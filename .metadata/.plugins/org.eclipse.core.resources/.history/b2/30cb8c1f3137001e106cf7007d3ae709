/*
 * usr_vl53_main.c
 *
 *  Created on: Aug 10, 2023
 *      Author: nosak
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usr_system.h"
#include "vl53l0x_api.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
extern I2C_HandleTypeDef hi2c1;

uint8_t 	Message[64];
uint8_t 	MessageLen;

uint32_t 	refSpadCount;
uint8_t 	isApertureSpads;
uint8_t 	VhvSettings;
uint8_t 	PhaseCal;

VL53L0X_RangingMeasurementData_t 	RangingData;
VL53L0X_Dev_t  						vl53l0x_c; // center module
VL53L0X_DEV    						Dev = &vl53l0x_c;

/* Private function prototypes -----------------------------------------------*/

void vl53_init(void);
void vl53_main(void);

void SystemClock_Config(void);

//==============================================================================
//
//==============================================================================

void vl53_init(void)
{
	Dev->I2cHandle = &hi2c1;
	Dev->I2cDevAddr = 0x52;

#ifdef ___NOP
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
	HAL_Delay(20);
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
	HAL_Delay(20);
#endif	// ___NOP
	//
	// VL53L0X init for Single Measurement
	//

	VL53L0X_WaitDeviceBooted( Dev );
	VL53L0X_DataInit( Dev );
	VL53L0X_StaticInit( Dev );
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);

}

//==============================================================================
//
//==============================================================================
void vl53_main(void)
{


Set_logInfo2("VL53 START");
	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
Set_logInfo2("VL53 END");

	if(RangingData.RangeStatus == 0){
		SKprintf("Measured distance: %i\n\r", RangingData.RangeMilliMeter);
	}
}
