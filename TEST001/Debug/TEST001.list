
TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000812c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008880  08008880  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008880  08008880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008888  08008888  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008888  08008888  00018888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006484  20000074  08008904  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200064f8  08008904  000264f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7ce  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f0b  00000000  00000000  0003c872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00040780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  00041ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019465  00000000  00000000  000434c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8ee  00000000  00000000  0005c925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e6e6  00000000  00000000  00077213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001158f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069e4  00000000  00000000  0011594c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080082b4 	.word	0x080082b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080082b4 	.word	0x080082b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <debu_main>:

//=============================================================================
//
//=============================================================================
void debu_main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	//char ch;

	if(read_line_streem() == INPUT_DATA_FIX){
 80005b8:	f000 fad0 	bl	8000b5c <read_line_streem>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d12c      	bne.n	800061c <debu_main+0x68>

		input_char_step = INPUT_INIT;
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <debu_main+0x6c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

		SKprintf("debu_main:001\r\n");
 80005c8:	4816      	ldr	r0, [pc, #88]	; (8000624 <debu_main+0x70>)
 80005ca:	f000 fc79 	bl	8000ec0 <SKprintf>

		switch(dev_menue_type){
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <debu_main+0x74>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d816      	bhi.n	8000604 <debu_main+0x50>
 80005d6:	a201      	add	r2, pc, #4	; (adr r2, 80005dc <debu_main+0x28>)
 80005d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005dc:	080005ed 	.word	0x080005ed
 80005e0:	080005f3 	.word	0x080005f3
 80005e4:	080005f9 	.word	0x080005f9
 80005e8:	080005ff 	.word	0x080005ff
		case DEB_PROMPT_MODE:
			DBmanue_prompt();
 80005ec:	f000 f856 	bl	800069c <DBmanue_prompt>
			break;
 80005f0:	e009      	b.n	8000606 <debu_main+0x52>
		case DEB_LOG_MENUE:
			DBmanue_log();
 80005f2:	f000 f879 	bl	80006e8 <DBmanue_log>
			break;
 80005f6:	e006      	b.n	8000606 <debu_main+0x52>
		case DEB_RS485_MENUE:
			DBmanue_rs485();
 80005f8:	f000 f8e8 	bl	80007cc <DBmanue_rs485>
			break;
 80005fc:	e003      	b.n	8000606 <debu_main+0x52>
		case DEB_MEM_MENUE:
			DBmanue_memdump();
 80005fe:	f000 f947 	bl	8000890 <DBmanue_memdump>
			break;
 8000602:	e000      	b.n	8000606 <debu_main+0x52>
		default:
			break;
 8000604:	bf00      	nop
		}

		SKprintf("debu_main:002\r\n");
 8000606:	4809      	ldr	r0, [pc, #36]	; (800062c <debu_main+0x78>)
 8000608:	f000 fc5a 	bl	8000ec0 <SKprintf>
        // メニュを表示する
        DispMenue(dev_menue_type);
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <debu_main+0x74>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f80f 	bl	8000634 <DispMenue>
        SKprintf("debu_main:003\r\n");
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <debu_main+0x7c>)
 8000618:	f000 fc52 	bl	8000ec0 <SKprintf>

	}
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000094 	.word	0x20000094
 8000624:	080082cc 	.word	0x080082cc
 8000628:	20000118 	.word	0x20000118
 800062c:	080082dc 	.word	0x080082dc
 8000630:	080082ec 	.word	0x080082ec

08000634 <DispMenue>:
//==============================================================================
//
//==============================================================================
void DispMenue(uint8_t type)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    if( type==DEB_PROMPT_MODE ){
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d103      	bne.n	800064c <DispMenue+0x18>
        SKprintf("ST> ");
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <DispMenue+0x5c>)
 8000646:	f000 fc3b 	bl	8000ec0 <SKprintf>
    else{
        for( i=0; i<MenueList[type-1].clumn; i++){
            SKprintf("%s\r\n", &MenueList[type-1].pt[i].name[0]);
        }
    }
}
 800064a:	e01d      	b.n	8000688 <DispMenue+0x54>
        for( i=0; i<MenueList[type-1].clumn; i++){
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e011      	b.n	8000676 <DispMenue+0x42>
            SKprintf("%s\r\n", &MenueList[type-1].pt[i].name[0]);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	3b01      	subs	r3, #1
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <DispMenue+0x60>)
 8000658:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800065c:	7bfa      	ldrb	r2, [r7, #15]
 800065e:	4613      	mov	r3, r2
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	1a9b      	subs	r3, r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	440b      	add	r3, r1
 8000668:	4619      	mov	r1, r3
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <DispMenue+0x64>)
 800066c:	f000 fc28 	bl	8000ec0 <SKprintf>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	3301      	adds	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	3b01      	subs	r3, #1
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <DispMenue+0x60>)
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	4413      	add	r3, r2
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	7bfa      	ldrb	r2, [r7, #15]
 8000684:	429a      	cmp	r2, r3
 8000686:	d3e4      	bcc.n	8000652 <DispMenue+0x1e>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	080082fc 	.word	0x080082fc
 8000694:	08008660 	.word	0x08008660
 8000698:	08008304 	.word	0x08008304

0800069c <DBmanue_prompt>:
//=============================================================================
//
//=============================================================================
void DBmanue_prompt(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    switch( input2menu() ){
 80006a0:	f000 f958 	bl	8000954 <input2menu>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d819      	bhi.n	80006de <DBmanue_prompt+0x42>
 80006aa:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <DBmanue_prompt+0x14>)
 80006ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c7 	.word	0x080006c7
 80006b8:	080006cf 	.word	0x080006cf
 80006bc:	080006d7 	.word	0x080006d7
    case CMD_RTC:
    	rtc_display();
 80006c0:	f000 fc72 	bl	8000fa8 <rtc_display>
        break;
 80006c4:	e00c      	b.n	80006e0 <DBmanue_prompt+0x44>
    case CMD_LOG:
        dev_menue_type = DEB_LOG_MENUE;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <DBmanue_prompt+0x48>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
        break;
 80006cc:	e008      	b.n	80006e0 <DBmanue_prompt+0x44>
    case CMD_RS485:
        dev_menue_type = DEB_RS485_MENUE;
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <DBmanue_prompt+0x48>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	701a      	strb	r2, [r3, #0]
        break;
 80006d4:	e004      	b.n	80006e0 <DBmanue_prompt+0x44>
    case CMD_MEM_DUMP:
        dev_menue_type = DEB_MEM_MENUE;
 80006d6:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <DBmanue_prompt+0x48>)
 80006d8:	2203      	movs	r2, #3
 80006da:	701a      	strb	r2, [r3, #0]
    	break;
 80006dc:	e000      	b.n	80006e0 <DBmanue_prompt+0x44>

    default:
        break;
 80006de:	bf00      	nop
    }
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000118 	.word	0x20000118

080006e8 <DBmanue_log>:

//=============================================================================
//
//=============================================================================
void DBmanue_log(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80006ec:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <DBmanue_log+0xdc>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b52      	cmp	r3, #82	; 0x52
 80006f2:	dc4b      	bgt.n	800078c <DBmanue_log+0xa4>
 80006f4:	2b31      	cmp	r3, #49	; 0x31
 80006f6:	db61      	blt.n	80007bc <DBmanue_log+0xd4>
 80006f8:	3b31      	subs	r3, #49	; 0x31
 80006fa:	2b21      	cmp	r3, #33	; 0x21
 80006fc:	d85e      	bhi.n	80007bc <DBmanue_log+0xd4>
 80006fe:	a201      	add	r2, pc, #4	; (adr r2, 8000704 <DBmanue_log+0x1c>)
 8000700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000704:	08000793 	.word	0x08000793
 8000708:	08000799 	.word	0x08000799
 800070c:	0800079f 	.word	0x0800079f
 8000710:	080007a7 	.word	0x080007a7
 8000714:	080007af 	.word	0x080007af
 8000718:	080007bd 	.word	0x080007bd
 800071c:	080007bd 	.word	0x080007bd
 8000720:	080007bd 	.word	0x080007bd
 8000724:	080007bd 	.word	0x080007bd
 8000728:	080007bd 	.word	0x080007bd
 800072c:	080007bd 	.word	0x080007bd
 8000730:	080007bd 	.word	0x080007bd
 8000734:	080007bd 	.word	0x080007bd
 8000738:	080007bd 	.word	0x080007bd
 800073c:	080007bd 	.word	0x080007bd
 8000740:	080007bd 	.word	0x080007bd
 8000744:	080007bd 	.word	0x080007bd
 8000748:	080007bd 	.word	0x080007bd
 800074c:	080007bd 	.word	0x080007bd
 8000750:	080007bd 	.word	0x080007bd
 8000754:	080007bd 	.word	0x080007bd
 8000758:	080007bd 	.word	0x080007bd
 800075c:	080007bd 	.word	0x080007bd
 8000760:	080007bd 	.word	0x080007bd
 8000764:	080007bd 	.word	0x080007bd
 8000768:	080007bd 	.word	0x080007bd
 800076c:	080007bd 	.word	0x080007bd
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007bd 	.word	0x080007bd
 8000778:	080007bd 	.word	0x080007bd
 800077c:	080007bd 	.word	0x080007bd
 8000780:	080007bd 	.word	0x080007bd
 8000784:	080007bd 	.word	0x080007bd
 8000788:	080007b7 	.word	0x080007b7
 800078c:	2b72      	cmp	r3, #114	; 0x72
 800078e:	d012      	beq.n	80007b6 <DBmanue_log+0xce>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000790:	e014      	b.n	80007bc <DBmanue_log+0xd4>
		LogInfo_display();
 8000792:	f000 fad9 	bl	8000d48 <LogInfo_display>
		break;
 8000796:	e012      	b.n	80007be <DBmanue_log+0xd6>
		LogInfo_clear();
 8000798:	f000 fb7e 	bl	8000e98 <LogInfo_clear>
		break;
 800079c:	e00f      	b.n	80007be <DBmanue_log+0xd6>
		Set_logflg(LF_NON_STOP);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 fab8 	bl	8000d14 <Set_logflg>
		break;
 80007a4:	e00b      	b.n	80007be <DBmanue_log+0xd6>
		Set_logflg(LF_IMMMEDIATE_STOP);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f000 fab4 	bl	8000d14 <Set_logflg>
		break;
 80007ac:	e007      	b.n	80007be <DBmanue_log+0xd6>
		Set_logflg(LF_MAX_DATA_STOP);
 80007ae:	2002      	movs	r0, #2
 80007b0:	f000 fab0 	bl	8000d14 <Set_logflg>
		break;
 80007b4:	e003      	b.n	80007be <DBmanue_log+0xd6>
		dev_menue_type = DEB_PROMPT_MODE;
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <DBmanue_log+0xe0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
		break;
 80007bc:	bf00      	nop
	}
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000098 	.word	0x20000098
 80007c8:	20000118 	.word	0x20000118

080007cc <DBmanue_rs485>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80007d0:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <DBmanue_rs485+0xbc>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b52      	cmp	r3, #82	; 0x52
 80007d6:	dc4b      	bgt.n	8000870 <DBmanue_rs485+0xa4>
 80007d8:	2b31      	cmp	r3, #49	; 0x31
 80007da:	db4f      	blt.n	800087c <DBmanue_rs485+0xb0>
 80007dc:	3b31      	subs	r3, #49	; 0x31
 80007de:	2b21      	cmp	r3, #33	; 0x21
 80007e0:	d84c      	bhi.n	800087c <DBmanue_rs485+0xb0>
 80007e2:	a201      	add	r2, pc, #4	; (adr r2, 80007e8 <DBmanue_rs485+0x1c>)
 80007e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e8:	0800087d 	.word	0x0800087d
 80007ec:	0800087d 	.word	0x0800087d
 80007f0:	0800087d 	.word	0x0800087d
 80007f4:	0800087d 	.word	0x0800087d
 80007f8:	0800087d 	.word	0x0800087d
 80007fc:	0800087d 	.word	0x0800087d
 8000800:	0800087d 	.word	0x0800087d
 8000804:	0800087d 	.word	0x0800087d
 8000808:	0800087d 	.word	0x0800087d
 800080c:	0800087d 	.word	0x0800087d
 8000810:	0800087d 	.word	0x0800087d
 8000814:	0800087d 	.word	0x0800087d
 8000818:	0800087d 	.word	0x0800087d
 800081c:	0800087d 	.word	0x0800087d
 8000820:	0800087d 	.word	0x0800087d
 8000824:	0800087d 	.word	0x0800087d
 8000828:	0800087d 	.word	0x0800087d
 800082c:	0800087d 	.word	0x0800087d
 8000830:	0800087d 	.word	0x0800087d
 8000834:	0800087d 	.word	0x0800087d
 8000838:	0800087d 	.word	0x0800087d
 800083c:	0800087d 	.word	0x0800087d
 8000840:	0800087d 	.word	0x0800087d
 8000844:	0800087d 	.word	0x0800087d
 8000848:	0800087d 	.word	0x0800087d
 800084c:	0800087d 	.word	0x0800087d
 8000850:	0800087d 	.word	0x0800087d
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800087d 	.word	0x0800087d
 800085c:	0800087d 	.word	0x0800087d
 8000860:	0800087d 	.word	0x0800087d
 8000864:	0800087d 	.word	0x0800087d
 8000868:	0800087d 	.word	0x0800087d
 800086c:	08000877 	.word	0x08000877
 8000870:	2b72      	cmp	r3, #114	; 0x72
 8000872:	d000      	beq.n	8000876 <DBmanue_rs485+0xaa>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000874:	e002      	b.n	800087c <DBmanue_rs485+0xb0>
		dev_menue_type = DEB_PROMPT_MODE;
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <DBmanue_rs485+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
		break;
 800087c:	bf00      	nop
	}
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	20000098 	.word	0x20000098
 800088c:	20000118 	.word	0x20000118

08000890 <DBmanue_memdump>:

//==============================================================================
//
//==============================================================================
void DBmanue_memdump(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 8000894:	4b2d      	ldr	r3, [pc, #180]	; (800094c <DBmanue_memdump+0xbc>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b52      	cmp	r3, #82	; 0x52
 800089a:	dc4b      	bgt.n	8000934 <DBmanue_memdump+0xa4>
 800089c:	2b31      	cmp	r3, #49	; 0x31
 800089e:	db4f      	blt.n	8000940 <DBmanue_memdump+0xb0>
 80008a0:	3b31      	subs	r3, #49	; 0x31
 80008a2:	2b21      	cmp	r3, #33	; 0x21
 80008a4:	d84c      	bhi.n	8000940 <DBmanue_memdump+0xb0>
 80008a6:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <DBmanue_memdump+0x1c>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	08000941 	.word	0x08000941
 80008b0:	08000941 	.word	0x08000941
 80008b4:	08000941 	.word	0x08000941
 80008b8:	08000941 	.word	0x08000941
 80008bc:	08000941 	.word	0x08000941
 80008c0:	08000941 	.word	0x08000941
 80008c4:	08000941 	.word	0x08000941
 80008c8:	08000941 	.word	0x08000941
 80008cc:	08000941 	.word	0x08000941
 80008d0:	08000941 	.word	0x08000941
 80008d4:	08000941 	.word	0x08000941
 80008d8:	08000941 	.word	0x08000941
 80008dc:	08000941 	.word	0x08000941
 80008e0:	08000941 	.word	0x08000941
 80008e4:	08000941 	.word	0x08000941
 80008e8:	08000941 	.word	0x08000941
 80008ec:	08000941 	.word	0x08000941
 80008f0:	08000941 	.word	0x08000941
 80008f4:	08000941 	.word	0x08000941
 80008f8:	08000941 	.word	0x08000941
 80008fc:	08000941 	.word	0x08000941
 8000900:	08000941 	.word	0x08000941
 8000904:	08000941 	.word	0x08000941
 8000908:	08000941 	.word	0x08000941
 800090c:	08000941 	.word	0x08000941
 8000910:	08000941 	.word	0x08000941
 8000914:	08000941 	.word	0x08000941
 8000918:	08000941 	.word	0x08000941
 800091c:	08000941 	.word	0x08000941
 8000920:	08000941 	.word	0x08000941
 8000924:	08000941 	.word	0x08000941
 8000928:	08000941 	.word	0x08000941
 800092c:	08000941 	.word	0x08000941
 8000930:	0800093b 	.word	0x0800093b
 8000934:	2b72      	cmp	r3, #114	; 0x72
 8000936:	d000      	beq.n	800093a <DBmanue_memdump+0xaa>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000938:	e002      	b.n	8000940 <DBmanue_memdump+0xb0>
		dev_menue_type = DEB_PROMPT_MODE;
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <DBmanue_memdump+0xc0>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
		break;
 8000940:	bf00      	nop
	}

}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	20000098 	.word	0x20000098
 8000950:	20000118 	.word	0x20000118

08000954 <input2menu>:
//==============================================================================
//
//==============================================================================

COMMAND_MENUE input2menu(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
     uint16_t i = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	80fb      	strh	r3, [r7, #6]
    COMMAND_MENUE rtn = CMD_MAX;
 800095e:	2304      	movs	r3, #4
 8000960:	717b      	strb	r3, [r7, #5]

        while( com_list[i].pt != CMD_MAX ){
 8000962:	e01d      	b.n	80009a0 <input2menu+0x4c>
            if (strcmp(&input_string.main[0], &com_list[i].command[0]) == 0){
 8000964:	88fa      	ldrh	r2, [r7, #6]
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	4413      	add	r3, r2
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <input2menu+0x6c>)
 8000972:	4413      	add	r3, r2
 8000974:	3301      	adds	r3, #1
 8000976:	4619      	mov	r1, r3
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <input2menu+0x70>)
 800097a:	f7ff fc31 	bl	80001e0 <strcmp>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10a      	bne.n	800099a <input2menu+0x46>
                rtn = com_list[i].pt;
 8000984:	88fa      	ldrh	r2, [r7, #6]
 8000986:	490e      	ldr	r1, [pc, #56]	; (80009c0 <input2menu+0x6c>)
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4413      	add	r3, r2
 8000992:	440b      	add	r3, r1
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	717b      	strb	r3, [r7, #5]
                break;
 8000998:	e00d      	b.n	80009b6 <input2menu+0x62>
            }
            i++;
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	3301      	adds	r3, #1
 800099e:	80fb      	strh	r3, [r7, #6]
        while( com_list[i].pt != CMD_MAX ){
 80009a0:	88fa      	ldrh	r2, [r7, #6]
 80009a2:	4907      	ldr	r1, [pc, #28]	; (80009c0 <input2menu+0x6c>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d1d6      	bne.n	8000964 <input2menu+0x10>
        }

    return rtn;
 80009b6:	797b      	ldrb	r3, [r7, #5]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	080084dc 	.word	0x080084dc
 80009c4:	20000098 	.word	0x20000098

080009c8 <command_split>:
//==============================================================================
//
//==============================================================================
void command_split(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
	int		i;
	int		j;
	char	moji = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71fb      	strb	r3, [r7, #7]
	char 	*ptr;

	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	e008      	b.n	80009ea <command_split+0x22>
		input_string.sub_ptr[j] = 0;
 80009d8:	4a5d      	ldr	r2, [pc, #372]	; (8000b50 <command_split+0x188>)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	3308      	adds	r3, #8
 80009de:	2100      	movs	r1, #0
 80009e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b0e      	cmp	r3, #14
 80009ee:	ddf3      	ble.n	80009d8 <command_split+0x10>
	}

	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e027      	b.n	8000a46 <command_split+0x7e>
		switch(input_string.main[i]){
 80009f6:	4a56      	ldr	r2, [pc, #344]	; (8000b50 <command_split+0x188>)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b2c      	cmp	r3, #44	; 0x2c
 8000a00:	d005      	beq.n	8000a0e <command_split+0x46>
 8000a02:	2b2c      	cmp	r3, #44	; 0x2c
 8000a04:	dc0b      	bgt.n	8000a1e <command_split+0x56>
 8000a06:	2b09      	cmp	r3, #9
 8000a08:	d001      	beq.n	8000a0e <command_split+0x46>
 8000a0a:	2b20      	cmp	r3, #32
 8000a0c:	d107      	bne.n	8000a1e <command_split+0x56>
		case ' ':		// スペース
		case ',':		//　カンマ
		case '	':		//　タブ
			input_string.main[i] = '\0';
 8000a0e:	4a50      	ldr	r2, [pc, #320]	; (8000b50 <command_split+0x188>)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
			moji = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	71fb      	strb	r3, [r7, #7]
			break;
 8000a1c:	e010      	b.n	8000a40 <command_split+0x78>
		default:
			if( moji == 0 ){
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10c      	bne.n	8000a3e <command_split+0x76>
				if( j < INPUT_BUF_SIZE/2){
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	2b0e      	cmp	r3, #14
 8000a28:	dc07      	bgt.n	8000a3a <command_split+0x72>
					input_string.sub_ptr[j] = &input_string.main[i];
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4a48      	ldr	r2, [pc, #288]	; (8000b50 <command_split+0x188>)
 8000a2e:	441a      	add	r2, r3
 8000a30:	4947      	ldr	r1, [pc, #284]	; (8000b50 <command_split+0x188>)
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3308      	adds	r3, #8
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				moji = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8000a3e:	bf00      	nop
	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b1d      	cmp	r3, #29
 8000a4a:	ddd4      	ble.n	80009f6 <command_split+0x2e>
		}
	}

	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	e074      	b.n	8000b3c <command_split+0x174>
		ptr = input_string.sub_ptr[j];
 8000a52:	4a3f      	ldr	r2, [pc, #252]	; (8000b50 <command_split+0x188>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	3308      	adds	r3, #8
 8000a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5c:	603b      	str	r3, [r7, #0]
		moji = 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	71fb      	strb	r3, [r7, #7]
		if( ptr != 0 ){
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d06d      	beq.n	8000b44 <command_split+0x17c>
			if ( ptr[0] == '0' && ptr[1] == 'x'){
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b30      	cmp	r3, #48	; 0x30
 8000a6e:	d14c      	bne.n	8000b0a <command_split+0x142>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b78      	cmp	r3, #120	; 0x78
 8000a78:	d147      	bne.n	8000b0a <command_split+0x142>
				ptr ++;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	603b      	str	r3, [r7, #0]
				ptr ++;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8000a86:	e01c      	b.n	8000ac2 <command_split+0xfa>
					if( ('0'<=*ptr && *ptr<='9') || ('A'<=*ptr && *ptr<='F') || ('a'<=*ptr && *ptr<='f')){
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b2f      	cmp	r3, #47	; 0x2f
 8000a8e:	d903      	bls.n	8000a98 <command_split+0xd0>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b39      	cmp	r3, #57	; 0x39
 8000a96:	d911      	bls.n	8000abc <command_split+0xf4>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b40      	cmp	r3, #64	; 0x40
 8000a9e:	d903      	bls.n	8000aa8 <command_split+0xe0>
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b46      	cmp	r3, #70	; 0x46
 8000aa6:	d909      	bls.n	8000abc <command_split+0xf4>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b60      	cmp	r3, #96	; 0x60
 8000aae:	d903      	bls.n	8000ab8 <command_split+0xf0>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b66      	cmp	r3, #102	; 0x66
 8000ab6:	d901      	bls.n	8000abc <command_split+0xf4>

					}
					else{
						moji = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1de      	bne.n	8000a88 <command_split+0xc0>
				}

				if( moji == 1 ){
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d132      	bne.n	8000b36 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%x", &input_string.data[j]);
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <command_split+0x188>)
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	3308      	adds	r3, #8
 8000ad6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	332c      	adds	r3, #44	; 0x2c
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <command_split+0x188>)
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	491a      	ldr	r1, [pc, #104]	; (8000b54 <command_split+0x18c>)
 8000aea:	f006 fac7 	bl	800707c <siscanf>
				if( moji == 1 ){
 8000aee:	e022      	b.n	8000b36 <command_split+0x16e>
				}
			}
			else{
				while( *ptr != '\0' ){
					if( '0'<=*ptr && *ptr<='9'){
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b2f      	cmp	r3, #47	; 0x2f
 8000af6:	d903      	bls.n	8000b00 <command_split+0x138>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b39      	cmp	r3, #57	; 0x39
 8000afe:	d901      	bls.n	8000b04 <command_split+0x13c>
					}
					else{
						moji = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1ee      	bne.n	8000af0 <command_split+0x128>
				}

				if( moji == 1 ){
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d10e      	bne.n	8000b36 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%d", &input_string.data[j]);
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <command_split+0x188>)
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	3308      	adds	r3, #8
 8000b1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	332c      	adds	r3, #44	; 0x2c
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <command_split+0x188>)
 8000b2a:	4413      	add	r3, r2
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4909      	ldr	r1, [pc, #36]	; (8000b58 <command_split+0x190>)
 8000b32:	f006 faa3 	bl	800707c <siscanf>
	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	2b0e      	cmp	r3, #14
 8000b40:	dd87      	ble.n	8000a52 <command_split+0x8a>
		else{
			break;
		}
	}

}
 8000b42:	e000      	b.n	8000b46 <command_split+0x17e>
			break;
 8000b44:	bf00      	nop
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000098 	.word	0x20000098
 8000b54:	0800839c 	.word	0x0800839c
 8000b58:	080083a0 	.word	0x080083a0

08000b5c <read_line_streem>:

//==============================================================================
//
//==============================================================================
 INPUT_CHAR_STEP read_line_streem(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
    uint8_t num;
    uint8_t sub_cnt;
#endif	// ___NOP
    char	string[2];

    string[0] = '\0';
 8000b62:	2300      	movs	r3, #0
 8000b64:	713b      	strb	r3, [r7, #4]
    string[1] = '\0';
 8000b66:	2300      	movs	r3, #0
 8000b68:	717b      	strb	r3, [r7, #5]


    c = (char)getch();
 8000b6a:	f000 fa5d 	bl	8001028 <getch>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]

    if( c != 0 ){
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d04b      	beq.n	8000c10 <read_line_streem+0xb4>

        switch(input_char_step){
 8000b78:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <read_line_streem+0xc8>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <read_line_streem+0x2a>
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d006      	beq.n	8000b92 <read_line_streem+0x36>
                    input_char_step = INPUT_DATA_FIX;

                    command_split();
                }
            default:
                break;
 8000b84:	e046      	b.n	8000c14 <read_line_streem+0xb8>
                input_pos = 0;
 8000b86:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <read_line_streem+0xcc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
                input_char_step = INPUT_SAVING;
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <read_line_streem+0xc8>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f006 fa53 	bl	8007040 <isprint>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d015      	beq.n	8000bcc <read_line_streem+0x70>
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <read_line_streem+0xcc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b1c      	cmp	r3, #28
 8000ba6:	dc11      	bgt.n	8000bcc <read_line_streem+0x70>
                    input_string.main[input_pos] = c;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <read_line_streem+0xcc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	491f      	ldr	r1, [pc, #124]	; (8000c2c <read_line_streem+0xd0>)
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	54ca      	strb	r2, [r1, r3]
                    input_pos ++;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <read_line_streem+0xcc>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <read_line_streem+0xcc>)
 8000bba:	6013      	str	r3, [r2, #0]
                    string[0] = c;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	713b      	strb	r3, [r7, #4]
                    SKprintf("%s",string);
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481a      	ldr	r0, [pc, #104]	; (8000c30 <read_line_streem+0xd4>)
 8000bc6:	f000 f97b 	bl	8000ec0 <SKprintf>
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8000bca:	e020      	b.n	8000c0e <read_line_streem+0xb2>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d10c      	bne.n	8000bec <read_line_streem+0x90>
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <read_line_streem+0xcc>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	dd08      	ble.n	8000bec <read_line_streem+0x90>
                    input_pos --;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <read_line_streem+0xcc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <read_line_streem+0xcc>)
 8000be2:	6013      	str	r3, [r2, #0]
                    SKprintf("\x08 \x08");
 8000be4:	4813      	ldr	r0, [pc, #76]	; (8000c34 <read_line_streem+0xd8>)
 8000be6:	f000 f96b 	bl	8000ec0 <SKprintf>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8000bea:	e010      	b.n	8000c0e <read_line_streem+0xb2>
                else if (c == '\r') {
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b0d      	cmp	r3, #13
 8000bf0:	d110      	bne.n	8000c14 <read_line_streem+0xb8>
                    input_string.main[input_pos] = '\0';
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <read_line_streem+0xcc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <read_line_streem+0xd0>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	54d1      	strb	r1, [r2, r3]
                    SKprintf("\r\n");
 8000bfc:	480e      	ldr	r0, [pc, #56]	; (8000c38 <read_line_streem+0xdc>)
 8000bfe:	f000 f95f 	bl	8000ec0 <SKprintf>
                    input_char_step = INPUT_DATA_FIX;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <read_line_streem+0xc8>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	701a      	strb	r2, [r3, #0]
                    command_split();
 8000c08:	f7ff fede 	bl	80009c8 <command_split>
                break;
 8000c0c:	e002      	b.n	8000c14 <read_line_streem+0xb8>
 8000c0e:	e001      	b.n	8000c14 <read_line_streem+0xb8>
        }
    }
 8000c10:	bf00      	nop
 8000c12:	e000      	b.n	8000c16 <read_line_streem+0xba>
                break;
 8000c14:	bf00      	nop
    return(input_char_step);
 8000c16:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <read_line_streem+0xc8>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 }
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000094 	.word	0x20000094
 8000c28:	20000090 	.word	0x20000090
 8000c2c:	20000098 	.word	0x20000098
 8000c30:	080083a4 	.word	0x080083a4
 8000c34:	080083a8 	.word	0x080083a8
 8000c38:	080083ac 	.word	0x080083ac

08000c3c <HAL_RTCEx_WakeUpTimerEventCallback>:
//==============================================================================
//
//==============================================================================

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

	uint8_t	i;

	if( timer.start > TIMER_AV_NUM){
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c46:	7e5b      	ldrb	r3, [r3, #25]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d941      	bls.n	8000cd0 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>

		timer.dt_buf[timer.av_wcnt] = timer.dt;
 8000c4c:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c4e:	7e1b      	ldrb	r3, [r3, #24]
 8000c50:	4618      	mov	r0, r3
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	4926      	ldr	r1, [pc, #152]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c58:	0083      	lsls	r3, r0, #2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	605a      	str	r2, [r3, #4]
		timer.av_wcnt ++;
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c60:	7e1b      	ldrb	r3, [r3, #24]
 8000c62:	3301      	adds	r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c68:	761a      	strb	r2, [r3, #24]

		if(timer.av_wcnt > TIMER_AV_NUM){
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c6c:	7e1b      	ldrb	r3, [r3, #24]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d920      	bls.n	8000cb4 <HAL_RTCEx_WakeUpTimerEventCallback+0x78>
			timer.av_wcnt = 0;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	761a      	strb	r2, [r3, #24]
			timer.dt_av = 0;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	e00c      	b.n	8000c9e <HAL_RTCEx_WakeUpTimerEventCallback+0x62>
				timer.dt_av +=  timer.dt_buf[i];
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c86:	695a      	ldr	r2, [r3, #20]
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	4919      	ldr	r1, [pc, #100]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a16      	ldr	r2, [pc, #88]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000c96:	6153      	str	r3, [r2, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d9ef      	bls.n	8000c84 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>
			}
			timer.dt_av /= TIMER_AV_NUM;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <HAL_RTCEx_WakeUpTimerEventCallback+0xb8>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	085b      	lsrs	r3, r3, #1
 8000cb0:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000cb2:	6153      	str	r3, [r2, #20]
		}

		if( timer.dt_max < timer.dt ){
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000cb6:	691a      	ldr	r2, [r3, #16]
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d203      	bcs.n	8000cc8 <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>
			timer.dt_max = timer.dt;
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000cc6:	6113      	str	r3, [r2, #16]
		}

		timer.dt = 0;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
	}
	else{
		timer.start ++;
		timer.dt = 0;
	}
}
 8000cce:	e008      	b.n	8000ce2 <HAL_RTCEx_WakeUpTimerEventCallback+0xa6>
		timer.start ++;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000cd2:	7e5b      	ldrb	r3, [r3, #25]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000cda:	765a      	strb	r2, [r3, #25]
		timer.dt = 0;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	2000011c 	.word	0x2000011c
 8000cf4:	aaaaaaab 	.word	0xaaaaaaab

08000cf8 <usr_isr_tim1_up>:
//==============================================================================
//
//==============================================================================
void usr_isr_tim1_up(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	timer.dt += 10;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <usr_isr_tim1_up+0x18>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	330a      	adds	r3, #10
 8000d02:	4a03      	ldr	r2, [pc, #12]	; (8000d10 <usr_isr_tim1_up+0x18>)
 8000d04:	6013      	str	r3, [r2, #0]

}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	2000011c 	.word	0x2000011c

08000d14 <Set_logflg>:
//=============================================================================
//
//
//=============================================================================
void Set_logflg(LOG_FLAG flg)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]

	if( flg < LF_MAX){
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d808      	bhi.n	8000d36 <Set_logflg+0x22>
		log.flg = flg;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <Set_logflg+0x2c>)
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	7193      	strb	r3, [r2, #6]
		SKprintf("log.flg=%d \r\n",log.flg);
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <Set_logflg+0x2c>)
 8000d2c:	799b      	ldrb	r3, [r3, #6]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <Set_logflg+0x30>)
 8000d32:	f000 f8c5 	bl	8000ec0 <SKprintf>
	}
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000140 	.word	0x20000140
 8000d44:	080083b0 	.word	0x080083b0

08000d48 <LogInfo_display>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_display(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
	uint16_t	i;
	uint16_t	msec;
	uint16_t	usec;
	uint32_t	dt;
	uint16_t	rptr = log.rptr;
 8000d4e:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <LogInfo_display+0x134>)
 8000d50:	885b      	ldrh	r3, [r3, #2]
 8000d52:	80fb      	strh	r3, [r7, #6]


	if( log.num != 0 ){
 8000d54:	4b49      	ldr	r3, [pc, #292]	; (8000e7c <LogInfo_display+0x134>)
 8000d56:	889b      	ldrh	r3, [r3, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 8086 	beq.w	8000e6a <LogInfo_display+0x122>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8000d5e:	2300      	movs	r3, #0
 8000d60:	81fb      	strh	r3, [r7, #14]
 8000d62:	e07d      	b.n	8000e60 <LogInfo_display+0x118>
			SKprintf("%02d:%02d:%02d.", log.rec[rptr].Hours, log.rec[rptr].Minutes, log.rec[rptr].Seconds);
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	4a45      	ldr	r2, [pc, #276]	; (8000e7c <LogInfo_display+0x134>)
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	4413      	add	r3, r2
 8000d6c:	3308      	adds	r3, #8
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	4a41      	ldr	r2, [pc, #260]	; (8000e7c <LogInfo_display+0x134>)
 8000d76:	019b      	lsls	r3, r3, #6
 8000d78:	4413      	add	r3, r2
 8000d7a:	3309      	adds	r3, #9
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4a3e      	ldr	r2, [pc, #248]	; (8000e7c <LogInfo_display+0x134>)
 8000d84:	019b      	lsls	r3, r3, #6
 8000d86:	4413      	add	r3, r2
 8000d88:	330a      	adds	r3, #10
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	483c      	ldr	r0, [pc, #240]	; (8000e80 <LogInfo_display+0x138>)
 8000d90:	f000 f896 	bl	8000ec0 <SKprintf>

			if(log.rec[rptr].dt <= log.rec[rptr].dt_av){
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	4a39      	ldr	r2, [pc, #228]	; (8000e7c <LogInfo_display+0x134>)
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	4413      	add	r3, r2
 8000d9c:	330c      	adds	r3, #12
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	4936      	ldr	r1, [pc, #216]	; (8000e7c <LogInfo_display+0x134>)
 8000da4:	019b      	lsls	r3, r3, #6
 8000da6:	440b      	add	r3, r1
 8000da8:	3310      	adds	r3, #16
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d812      	bhi.n	8000dd6 <LogInfo_display+0x8e>
				dt = 1000000 * log.rec[rptr].dt / log.rec[rptr].dt_av;
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <LogInfo_display+0x134>)
 8000db4:	019b      	lsls	r3, r3, #6
 8000db6:	4413      	add	r3, r2
 8000db8:	330c      	adds	r3, #12
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <LogInfo_display+0x13c>)
 8000dbe:	fb03 f202 	mul.w	r2, r3, r2
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	492d      	ldr	r1, [pc, #180]	; (8000e7c <LogInfo_display+0x134>)
 8000dc6:	019b      	lsls	r3, r3, #6
 8000dc8:	440b      	add	r3, r1
 8000dca:	3310      	adds	r3, #16
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	e012      	b.n	8000dfc <LogInfo_display+0xb4>
			}
			else{
				dt = 1000000 * log.rec[rptr].dt / (log.rec[rptr].dt + 1 );
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <LogInfo_display+0x134>)
 8000dda:	019b      	lsls	r3, r3, #6
 8000ddc:	4413      	add	r3, r2
 8000dde:	330c      	adds	r3, #12
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <LogInfo_display+0x13c>)
 8000de4:	fb03 f202 	mul.w	r2, r3, r2
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	4924      	ldr	r1, [pc, #144]	; (8000e7c <LogInfo_display+0x134>)
 8000dec:	019b      	lsls	r3, r3, #6
 8000dee:	440b      	add	r3, r1
 8000df0:	330c      	adds	r3, #12
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	60bb      	str	r3, [r7, #8]
			}
			msec = (uint16_t)( dt / 1000 );
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <LogInfo_display+0x140>)
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
 8000e04:	099b      	lsrs	r3, r3, #6
 8000e06:	80bb      	strh	r3, [r7, #4]
			usec = (uint16_t)( dt % 1000 );
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <LogInfo_display+0x140>)
 8000e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e10:	099b      	lsrs	r3, r3, #6
 8000e12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e16:	fb01 f303 	mul.w	r3, r1, r3
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	807b      	strh	r3, [r7, #2]
			SKprintf("%03d %03d ", msec,usec);
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	887a      	ldrh	r2, [r7, #2]
 8000e22:	4619      	mov	r1, r3
 8000e24:	4819      	ldr	r0, [pc, #100]	; (8000e8c <LogInfo_display+0x144>)
 8000e26:	f000 f84b 	bl	8000ec0 <SKprintf>

			SKprintf("%s\r\n", &log.rec[log.wptr].string[0]);
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <LogInfo_display+0x134>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	019b      	lsls	r3, r3, #6
 8000e30:	3310      	adds	r3, #16
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <LogInfo_display+0x134>)
 8000e34:	4413      	add	r3, r2
 8000e36:	3304      	adds	r3, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <LogInfo_display+0x148>)
 8000e3c:	f000 f840 	bl	8000ec0 <SKprintf>

			rptr ++;
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	3301      	adds	r3, #1
 8000e44:	80fb      	strh	r3, [r7, #6]
			if( rptr > LOG_RECODE_MAX ){
 8000e46:	88fb      	ldrh	r3, [r7, #6]
 8000e48:	2b64      	cmp	r3, #100	; 0x64
 8000e4a:	d901      	bls.n	8000e50 <LogInfo_display+0x108>
				rptr = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	80fb      	strh	r3, [r7, #6]
			}
			if( log.wptr == rptr ){
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <LogInfo_display+0x134>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	88fa      	ldrh	r2, [r7, #6]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d00b      	beq.n	8000e72 <LogInfo_display+0x12a>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8000e5a:	89fb      	ldrh	r3, [r7, #14]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	81fb      	strh	r3, [r7, #14]
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	2b63      	cmp	r3, #99	; 0x63
 8000e64:	f67f af7e 	bls.w	8000d64 <LogInfo_display+0x1c>
		}
	}
	else{
		SKprintf("LOG NONE\r\n");
	}
}
 8000e68:	e004      	b.n	8000e74 <LogInfo_display+0x12c>
		SKprintf("LOG NONE\r\n");
 8000e6a:	480a      	ldr	r0, [pc, #40]	; (8000e94 <LogInfo_display+0x14c>)
 8000e6c:	f000 f828 	bl	8000ec0 <SKprintf>
}
 8000e70:	e000      	b.n	8000e74 <LogInfo_display+0x12c>
				break;
 8000e72:	bf00      	nop
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000140 	.word	0x20000140
 8000e80:	080083c0 	.word	0x080083c0
 8000e84:	000f4240 	.word	0x000f4240
 8000e88:	10624dd3 	.word	0x10624dd3
 8000e8c:	080083d0 	.word	0x080083d0
 8000e90:	080083dc 	.word	0x080083dc
 8000e94:	080083e4 	.word	0x080083e4

08000e98 <LogInfo_clear>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_clear(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0

	log.rptr = 0;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <LogInfo_clear+0x20>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	805a      	strh	r2, [r3, #2]
	log.wptr = 0;
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <LogInfo_clear+0x20>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	801a      	strh	r2, [r3, #0]
	log.num = 0;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <LogInfo_clear+0x20>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	809a      	strh	r2, [r3, #4]

	SKprintf("LOG CLEAR \r\n");
 8000eae:	4803      	ldr	r0, [pc, #12]	; (8000ebc <LogInfo_clear+0x24>)
 8000eb0:	f000 f806 	bl	8000ec0 <SKprintf>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000140 	.word	0x20000140
 8000ebc:	080083f0 	.word	0x080083f0

08000ec0 <SKprintf>:
// 総和を求める関数（値は int 型を想定）
// n は、渡す引数の数、それ以降は計算する値です。
//==============================================================================

int	SKprintf (const char *string, ...)
{
 8000ec0:	b40f      	push	{r0, r1, r2, r3}
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b090      	sub	sp, #64	; 0x40
 8000ec6:	af00      	add	r7, sp, #0
	int i;

	char buffer[PRiNTF_BUFFMAX];


	while( Sem_Printf != 0 );
 8000ec8:	bf00      	nop
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <SKprintf+0x74>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1fb      	bne.n	8000eca <SKprintf+0xa>

	Sem_Printf = 1;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <SKprintf+0x74>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]

	// 可変個引数の利用準備
	// -- １… va_list 構造体 ap
	// -- 2 … 可変個引数の直前にある引数

	va_start(ap, string);
 8000ed8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
	vsprintf(buffer, string, ap);
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ee2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f006 f90d 	bl	8007104 <vsiprintf>
	va_end(ap);

	for(i=0; i<PRiNTF_BUFFMAX; i++){
 8000eea:	2300      	movs	r3, #0
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eee:	e008      	b.n	8000f02 <SKprintf+0x42>
		if(buffer[i] == '\0'){
 8000ef0:	1d3a      	adds	r2, r7, #4
 8000ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <SKprintf+0x4a>
	for(i=0; i<PRiNTF_BUFFMAX; i++){
 8000efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000efe:	3301      	adds	r3, #1
 8000f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f04:	2b31      	cmp	r3, #49	; 0x31
 8000f06:	ddf3      	ble.n	8000ef0 <SKprintf+0x30>
 8000f08:	e000      	b.n	8000f0c <SKprintf+0x4c>
			break;
 8000f0a:	bf00      	nop
		}
	}
	HAL_UART_Transmit(&huart2, buffer, i, HAL_MAX_DELAY);
 8000f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	1d39      	adds	r1, r7, #4
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	4808      	ldr	r0, [pc, #32]	; (8000f38 <SKprintf+0x78>)
 8000f18:	f002 febb 	bl	8003c92 <HAL_UART_Transmit>

	Sem_Printf = 0;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SKprintf+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]

}
 8000f22:	bf00      	nop
 8000f24:	4618      	mov	r0, r3
 8000f26:	3740      	adds	r7, #64	; 0x40
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f2e:	b004      	add	sp, #16
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20001a48 	.word	0x20001a48
 8000f38:	20001afc 	.word	0x20001afc

08000f3c <user_init>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	//LED_Flush(0);
	SKprintf("Initialize all configured peripherals\r\n");
 8000f40:	4815      	ldr	r0, [pc, #84]	; (8000f98 <user_init+0x5c>)
 8000f42:	f7ff ffbd 	bl	8000ec0 <SKprintf>
	SKprintf("******************\r\n");
 8000f46:	4815      	ldr	r0, [pc, #84]	; (8000f9c <user_init+0x60>)
 8000f48:	f7ff ffba 	bl	8000ec0 <SKprintf>
	SKprintf("*** UART START ***\r\n");
 8000f4c:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <user_init+0x64>)
 8000f4e:	f7ff ffb7 	bl	8000ec0 <SKprintf>
	SKprintf("******************\r\n");
 8000f52:	4812      	ldr	r0, [pc, #72]	; (8000f9c <user_init+0x60>)
 8000f54:	f7ff ffb4 	bl	8000ec0 <SKprintf>


	//-----------------------------------------------
	// Log Timer Counter
	//-----------------------------------------------
	timer.usec = 0;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <user_init+0x68>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	835a      	strh	r2, [r3, #26]
	timer.msec = 0;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <user_init+0x68>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	839a      	strh	r2, [r3, #28]
	timer.usec_max = 0;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <user_init+0x68>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	83da      	strh	r2, [r3, #30]
	timer.msec_max = 0;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <user_init+0x68>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	841a      	strh	r2, [r3, #32]
	timer.dt = 0;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <user_init+0x68>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
	timer.dt_max = 0;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <user_init+0x68>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
	timer.dt_av = 0;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <user_init+0x68>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
	timer.start = 0;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <user_init+0x68>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	765a      	strb	r2, [r3, #25]
	timer.av_wcnt = 0;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <user_init+0x68>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	761a      	strb	r2, [r3, #24]

	//-----------------------------------------------
	// Log Info Init
	//-----------------------------------------------
	LogInfo_clear();
 8000f8e:	f7ff ff83 	bl	8000e98 <LogInfo_clear>


}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	08008400 	.word	0x08008400
 8000f9c:	08008428 	.word	0x08008428
 8000fa0:	08008440 	.word	0x08008440
 8000fa4:	2000011c 	.word	0x2000011c

08000fa8 <rtc_display>:

//==============================================================================
//
//==============================================================================
void rtc_display(void)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4817      	ldr	r0, [pc, #92]	; (8001014 <rtc_display+0x6c>)
 8000fb6:	f001 fed5 	bl	8002d64 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4814      	ldr	r0, [pc, #80]	; (8001014 <rtc_display+0x6c>)
 8000fc2:	f001 ffb1 	bl	8002f28 <HAL_RTC_GetDate>
	SKprintf("20%02d.%02d.%02d %02d:%02d:%02d\r\n", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000fc6:	78fb      	ldrb	r3, [r7, #3]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	787b      	ldrb	r3, [r7, #1]
 8000fcc:	461c      	mov	r4, r3
 8000fce:	78bb      	ldrb	r3, [r7, #2]
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	793b      	ldrb	r3, [r7, #4]
 8000fd4:	797a      	ldrb	r2, [r7, #5]
 8000fd6:	79b9      	ldrb	r1, [r7, #6]
 8000fd8:	9102      	str	r1, [sp, #8]
 8000fda:	9201      	str	r2, [sp, #4]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	462b      	mov	r3, r5
 8000fe0:	4622      	mov	r2, r4
 8000fe2:	4601      	mov	r1, r0
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <rtc_display+0x70>)
 8000fe6:	f7ff ff6b 	bl	8000ec0 <SKprintf>
	SKprintf("av=%d max=%d\r\n",timer.dt_av,timer.dt_max);
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <rtc_display+0x74>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <rtc_display+0x74>)
 8000ff0:	6912      	ldr	r2, [r2, #16]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <rtc_display+0x78>)
 8000ff6:	f7ff ff63 	bl	8000ec0 <SKprintf>
	SKprintf("dt_buf=%d, %d, %d\r\n", timer.dt_buf[0],timer.dt_buf[1],timer.dt_buf[2]);
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <rtc_display+0x74>)
 8000ffc:	6859      	ldr	r1, [r3, #4]
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <rtc_display+0x74>)
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <rtc_display+0x74>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <rtc_display+0x7c>)
 8001008:	f7ff ff5a 	bl	8000ec0 <SKprintf>
}
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bdb0      	pop	{r4, r5, r7, pc}
 8001014:	20001a4c 	.word	0x20001a4c
 8001018:	08008458 	.word	0x08008458
 800101c:	2000011c 	.word	0x2000011c
 8001020:	0800847c 	.word	0x0800847c
 8001024:	0800848c 	.word	0x0800848c

08001028 <getch>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
int getch(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0c2      	sub	sp, #264	; 0x108
 800102c:	af00      	add	r7, sp, #0
	uint8_t buffer[256];
	HAL_StatusTypeDef s;
	int rtn = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	s = HAL_UART_Receive(&huart2, buffer, 1, HAL_MAX_DELAY);
 8001034:	4639      	mov	r1, r7
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	2201      	movs	r2, #1
 800103c:	480f      	ldr	r0, [pc, #60]	; (800107c <getch+0x54>)
 800103e:	f002 feba 	bl	8003db6 <HAL_UART_Receive>
 8001042:	4603      	mov	r3, r0
 8001044:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103

	switch(s){
 8001048:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <getch+0x34>
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0b      	blt.n	800106c <getch+0x44>
 8001054:	3b01      	subs	r3, #1
 8001056:	2b02      	cmp	r3, #2
 8001058:	d808      	bhi.n	800106c <getch+0x44>
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:

		break;
 800105a:	e007      	b.n	800106c <getch+0x44>
		rtn = (int) buffer[0];
 800105c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		break;
 800106a:	bf00      	nop
	}

	return rtn;
 800106c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8001070:	4618      	mov	r0, r3
 8001072:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20001afc 	.word	0x20001afc

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f000 fcca 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f82e 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f000 fa08 	bl	80014a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001090:	f000 f9dc 	bl	800144c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001094:	f000 f896 	bl	80011c4 <MX_RTC_Init>
  MX_TIM1_Init();
 8001098:	f000 f936 	bl	8001308 <MX_TIM1_Init>
  MX_TIM2_Init();
 800109c:	f000 f988 	bl	80013b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  user_init();		// SK ADD
 80010a0:	f7ff ff4c 	bl	8000f3c <user_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010a4:	f003 fa50 	bl	8004548 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_main */
  Task_mainHandle = osThreadNew(StartDefaultTask, NULL, &Task_main_attributes);
 80010a8:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <main+0x50>)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <main+0x54>)
 80010ae:	f003 fa95 	bl	80045dc <osThreadNew>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <main+0x58>)
 80010b6:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub1 */
  Task_sub1Handle = osThreadNew(StartTask02, NULL, &Task_sub1_attributes);
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <main+0x5c>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <main+0x60>)
 80010be:	f003 fa8d 	bl	80045dc <osThreadNew>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <main+0x64>)
 80010c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010c8:	f003 fa62 	bl	8004590 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0x4c>
 80010ce:	bf00      	nop
 80010d0:	08008670 	.word	0x08008670
 80010d4:	080015a5 	.word	0x080015a5
 80010d8:	20001b40 	.word	0x20001b40
 80010dc:	08008694 	.word	0x08008694
 80010e0:	080015c5 	.word	0x080015c5
 80010e4:	20001b44 	.word	0x20001b44

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	; 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f005 ffb8 	bl	800706c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <SystemClock_Config+0xd4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a29      	ldr	r2, [pc, #164]	; (80011bc <SystemClock_Config+0xd4>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <SystemClock_Config+0xd4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <SystemClock_Config+0xd8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001134:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <SystemClock_Config+0xd8>)
 8001136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <SystemClock_Config+0xd8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001148:	2306      	movs	r3, #6
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	2301      	movs	r3, #1
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001154:	2310      	movs	r3, #16
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115c:	2300      	movs	r3, #0
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001160:	2310      	movs	r3, #16
 8001162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001164:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800116a:	2304      	movs	r3, #4
 800116c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800116e:	2307      	movs	r3, #7
 8001170:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	4618      	mov	r0, r3
 8001178:	f000 ff2c 	bl	8001fd4 <HAL_RCC_OscConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001182:	f000 fa3b 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2302      	movs	r3, #2
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2102      	movs	r1, #2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 f98e 	bl	80024c4 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ae:	f000 fa25 	bl	80015fc <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3750      	adds	r7, #80	; 0x50
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011de:	4b48      	ldr	r3, [pc, #288]	; (8001300 <MX_RTC_Init+0x13c>)
 80011e0:	4a48      	ldr	r2, [pc, #288]	; (8001304 <MX_RTC_Init+0x140>)
 80011e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011e4:	4b46      	ldr	r3, [pc, #280]	; (8001300 <MX_RTC_Init+0x13c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011ea:	4b45      	ldr	r3, [pc, #276]	; (8001300 <MX_RTC_Init+0x13c>)
 80011ec:	227f      	movs	r2, #127	; 0x7f
 80011ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011f0:	4b43      	ldr	r3, [pc, #268]	; (8001300 <MX_RTC_Init+0x13c>)
 80011f2:	22ff      	movs	r2, #255	; 0xff
 80011f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011f6:	4b42      	ldr	r3, [pc, #264]	; (8001300 <MX_RTC_Init+0x13c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011fc:	4b40      	ldr	r3, [pc, #256]	; (8001300 <MX_RTC_Init+0x13c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001202:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <MX_RTC_Init+0x13c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001208:	483d      	ldr	r0, [pc, #244]	; (8001300 <MX_RTC_Init+0x13c>)
 800120a:	f001 fc9b 	bl	8002b44 <HAL_RTC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001214:	f000 f9f2 	bl	80015fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001218:	2300      	movs	r3, #0
 800121a:	773b      	strb	r3, [r7, #28]
  sTime.Minutes = 0x0;
 800121c:	2300      	movs	r3, #0
 800121e:	777b      	strb	r3, [r7, #29]
  sTime.Seconds = 0x0;
 8001220:	2300      	movs	r3, #0
 8001222:	77bb      	strb	r3, [r7, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	2201      	movs	r2, #1
 8001232:	4619      	mov	r1, r3
 8001234:	4832      	ldr	r0, [pc, #200]	; (8001300 <MX_RTC_Init+0x13c>)
 8001236:	f001 fcfb 	bl	8002c30 <HAL_RTC_SetTime>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001240:	f000 f9dc 	bl	80015fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001244:	2301      	movs	r3, #1
 8001246:	763b      	strb	r3, [r7, #24]
  sDate.Month = RTC_MONTH_JANUARY;
 8001248:	2301      	movs	r3, #1
 800124a:	767b      	strb	r3, [r7, #25]
  sDate.Date = 0x1;
 800124c:	2301      	movs	r3, #1
 800124e:	76bb      	strb	r3, [r7, #26]
  sDate.Year = 0x0;
 8001250:	2300      	movs	r3, #0
 8001252:	76fb      	strb	r3, [r7, #27]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	2201      	movs	r2, #1
 800125a:	4619      	mov	r1, r3
 800125c:	4828      	ldr	r0, [pc, #160]	; (8001300 <MX_RTC_Init+0x13c>)
 800125e:	f001 fddf 	bl	8002e20 <HAL_RTC_SetDate>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001268:	f000 f9c8 	bl	80015fc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800126c:	2204      	movs	r2, #4
 800126e:	2100      	movs	r1, #0
 8001270:	4823      	ldr	r0, [pc, #140]	; (8001300 <MX_RTC_Init+0x13c>)
 8001272:	f001 ff65 	bl	8003140 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800127c:	f000 f9be 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#define MAGIC_NO 0x12a5			// SK ADD

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != MAGIC_NO)
 8001280:	2100      	movs	r1, #0
 8001282:	481f      	ldr	r0, [pc, #124]	; (8001300 <MX_RTC_Init+0x13c>)
 8001284:	f002 f85a 	bl	800333c <HAL_RTCEx_BKUPRead>
 8001288:	4603      	mov	r3, r0
 800128a:	f241 22a5 	movw	r2, #4773	; 0x12a5
 800128e:	4293      	cmp	r3, r2
 8001290:	d032      	beq.n	80012f8 <MX_RTC_Init+0x134>
  {
    RTC_TimeTypeDef sTime = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80012a0:	2300      	movs	r3, #0
 80012a2:	603b      	str	r3, [r7, #0]

    sTime.Hours = 1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	71bb      	strb	r3, [r7, #6]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	4619      	mov	r1, r3
 80012b6:	4812      	ldr	r0, [pc, #72]	; (8001300 <MX_RTC_Init+0x13c>)
 80012b8:	f001 fcba 	bl	8002c30 <HAL_RTC_SetTime>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_RTC_Init+0x102>
    {
      Error_Handler();
 80012c2:	f000 f99b 	bl	80015fc <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80012c6:	2303      	movs	r3, #3
 80012c8:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 80012ca:	2301      	movs	r3, #1
 80012cc:	707b      	strb	r3, [r7, #1]
    sDate.Date = 1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 20;
 80012d2:	2314      	movs	r3, #20
 80012d4:	70fb      	strb	r3, [r7, #3]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	4808      	ldr	r0, [pc, #32]	; (8001300 <MX_RTC_Init+0x13c>)
 80012de:	f001 fd9f 	bl	8002e20 <HAL_RTC_SetDate>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_RTC_Init+0x128>
    {
      Error_Handler();
 80012e8:	f000 f988 	bl	80015fc <Error_Handler>

    }
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, MAGIC_NO);
 80012ec:	f241 22a5 	movw	r2, #4773	; 0x12a5
 80012f0:	2100      	movs	r1, #0
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_RTC_Init+0x13c>)
 80012f4:	f002 f808 	bl	8003308 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3730      	adds	r7, #48	; 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20001a4c 	.word	0x20001a4c
 8001304:	40002800 	.word	0x40002800

08001308 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001326:	4a21      	ldr	r2, [pc, #132]	; (80013ac <MX_TIM1_Init+0xa4>)
 8001328:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800132c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001330:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800133a:	f245 2207 	movw	r2, #20999	; 0x5207
 800133e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001352:	4815      	ldr	r0, [pc, #84]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001354:	f002 f80a 	bl	800336c <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800135e:	f000 f94d 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4619      	mov	r1, r3
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001370:	f002 f9b6 	bl	80036e0 <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800137a:	f000 f93f 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	4619      	mov	r1, r3
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800138c:	f002 fbb2 	bl	8003af4 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001396:	f000 f931 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);    // SK ADD
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800139c:	f002 f836 	bl	800340c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20001a6c 	.word	0x20001a6c
 80013ac:	40010000 	.word	0x40010000

080013b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	463b      	mov	r3, r7
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <MX_TIM2_Init+0x98>)
 80013ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_TIM2_Init+0x98>)
 80013d6:	2203      	movs	r2, #3
 80013d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_TIM2_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 209;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_TIM2_Init+0x98>)
 80013e2:	22d1      	movs	r2, #209	; 0xd1
 80013e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_TIM2_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_TIM2_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f2:	4815      	ldr	r0, [pc, #84]	; (8001448 <MX_TIM2_Init+0x98>)
 80013f4:	f001 ffba 	bl	800336c <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80013fe:	f000 f8fd 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4619      	mov	r1, r3
 800140e:	480e      	ldr	r0, [pc, #56]	; (8001448 <MX_TIM2_Init+0x98>)
 8001410:	f002 f966 	bl	80036e0 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800141a:	f000 f8ef 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	4619      	mov	r1, r3
 800142a:	4807      	ldr	r0, [pc, #28]	; (8001448 <MX_TIM2_Init+0x98>)
 800142c:	f002 fb62 	bl	8003af4 <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001436:	f000 f8e1 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);    // SK ADD
 800143a:	4803      	ldr	r0, [pc, #12]	; (8001448 <MX_TIM2_Init+0x98>)
 800143c:	f001 ffe6 	bl	800340c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20001ab4 	.word	0x20001ab4

0800144c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_USART2_UART_Init+0x50>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USART2_UART_Init+0x4c>)
 8001484:	f002 fbb8 	bl	8003bf8 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148e:	f000 f8b5 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20001afc 	.word	0x20001afc
 800149c:	40004400 	.word	0x40004400

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b37      	ldr	r3, [pc, #220]	; (8001598 <MX_GPIO_Init+0xf8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a36      	ldr	r2, [pc, #216]	; (8001598 <MX_GPIO_Init+0xf8>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b34      	ldr	r3, [pc, #208]	; (8001598 <MX_GPIO_Init+0xf8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <MX_GPIO_Init+0xf8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a2f      	ldr	r2, [pc, #188]	; (8001598 <MX_GPIO_Init+0xf8>)
 80014dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <MX_GPIO_Init+0xf8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <MX_GPIO_Init+0xf8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a28      	ldr	r2, [pc, #160]	; (8001598 <MX_GPIO_Init+0xf8>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <MX_GPIO_Init+0xf8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <MX_GPIO_Init+0xf8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a21      	ldr	r2, [pc, #132]	; (8001598 <MX_GPIO_Init+0xf8>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <MX_GPIO_Init+0xf8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIM1_PLS_GPIO_Port, TIM1_PLS_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2104      	movs	r1, #4
 800152a:	481c      	ldr	r0, [pc, #112]	; (800159c <MX_GPIO_Init+0xfc>)
 800152c:	f000 fd1e 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2120      	movs	r1, #32
 8001534:	481a      	ldr	r0, [pc, #104]	; (80015a0 <MX_GPIO_Init+0x100>)
 8001536:	f000 fd19 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800153a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001540:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4812      	ldr	r0, [pc, #72]	; (800159c <MX_GPIO_Init+0xfc>)
 8001552:	f000 fb87 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM1_PLS_Pin */
  GPIO_InitStruct.Pin = TIM1_PLS_Pin;
 8001556:	2304      	movs	r3, #4
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIM1_PLS_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <MX_GPIO_Init+0xfc>)
 800156e:	f000 fb79 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001572:	2320      	movs	r3, #32
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_GPIO_Init+0x100>)
 800158a:	f000 fb6b 	bl	8001c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40020800 	.word	0x40020800
 80015a0:	40020000 	.word	0x40020000

080015a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	  rtc_display();
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015ac:	2120      	movs	r1, #32
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <StartDefaultTask+0x1c>)
 80015b0:	f000 fcf5 	bl	8001f9e <HAL_GPIO_TogglePin>
    osDelay(1000);
 80015b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b8:	f003 f8a2 	bl	8004700 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80015bc:	e7f6      	b.n	80015ac <StartDefaultTask+0x8>
 80015be:	bf00      	nop
 80015c0:	40020000 	.word	0x40020000

080015c4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  debu_main();
 80015cc:	f7fe fff2 	bl	80005b4 <debu_main>
//	  user_main_loop();		// SK ADD
    osDelay(1);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f003 f895 	bl	8004700 <osDelay>
	  debu_main();
 80015d6:	e7f9      	b.n	80015cc <StartTask02+0x8>

080015d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ea:	f000 fa39 	bl	8001a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40014400 	.word	0x40014400

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	e7fe      	b.n	8001604 <Error_Handler+0x8>
	...

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_MspInit+0x54>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a11      	ldr	r2, [pc, #68]	; (800165c <HAL_MspInit+0x54>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_MspInit+0x54>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_MspInit+0x54>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_MspInit+0x54>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_MspInit+0x54>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	210f      	movs	r1, #15
 800164a:	f06f 0001 	mvn.w	r0, #1
 800164e:	f000 fadf 	bl	8001c10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_RTC_MspInit+0x60>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d119      	bne.n	80016b6 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001682:	2302      	movs	r3, #2
 8001684:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	4618      	mov	r0, r3
 8001692:	f001 f969 	bl	8002968 <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800169c:	f7ff ffae 	bl	80015fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_RTC_MspInit+0x64>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2105      	movs	r1, #5
 80016aa:	2003      	movs	r0, #3
 80016ac:	f000 fab0 	bl	8001c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 fac9 	bl	8001c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40002800 	.word	0x40002800
 80016c4:	42470e3c 	.word	0x42470e3c

080016c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <HAL_TIM_Base_MspInit+0x80>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d116      	bne.n	8001708 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_TIM_Base_MspInit+0x84>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a1a      	ldr	r2, [pc, #104]	; (800174c <HAL_TIM_Base_MspInit+0x84>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_TIM_Base_MspInit+0x84>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	210f      	movs	r1, #15
 80016fa:	2019      	movs	r0, #25
 80016fc:	f000 fa88 	bl	8001c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001700:	2019      	movs	r0, #25
 8001702:	f000 faa1 	bl	8001c48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001706:	e01a      	b.n	800173e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001710:	d115      	bne.n	800173e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_TIM_Base_MspInit+0x84>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_TIM_Base_MspInit+0x84>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_TIM_Base_MspInit+0x84>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2105      	movs	r1, #5
 8001732:	201c      	movs	r0, #28
 8001734:	f000 fa6c 	bl	8001c10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001738:	201c      	movs	r0, #28
 800173a:	f000 fa85 	bl	8001c48 <HAL_NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40010000 	.word	0x40010000
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_UART_MspInit+0x84>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12b      	bne.n	80017ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_UART_MspInit+0x88>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_UART_MspInit+0x88>)
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_UART_MspInit+0x88>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_UART_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_UART_MspInit+0x88>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_UART_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017aa:	230c      	movs	r3, #12
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ba:	2307      	movs	r3, #7
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_UART_MspInit+0x8c>)
 80017c6:	f000 fa4d 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40004400 	.word	0x40004400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000

080017e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <HAL_InitTick+0xd0>)
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	4a2d      	ldr	r2, [pc, #180]	; (80018b0 <HAL_InitTick+0xd0>)
 80017fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_InitTick+0xd0>)
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800180c:	f107 020c 	add.w	r2, r7, #12
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f001 f874 	bl	8002904 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800181c:	f001 f85e 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8001820:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <HAL_InitTick+0xd4>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9b      	lsrs	r3, r3, #18
 800182c:	3b01      	subs	r3, #1
 800182e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_InitTick+0xd8>)
 8001832:	4a22      	ldr	r2, [pc, #136]	; (80018bc <HAL_InitTick+0xdc>)
 8001834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_InitTick+0xd8>)
 8001838:	f240 32e7 	movw	r2, #999	; 0x3e7
 800183c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <HAL_InitTick+0xd8>)
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_InitTick+0xd8>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_InitTick+0xd8>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_InitTick+0xd8>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001856:	4818      	ldr	r0, [pc, #96]	; (80018b8 <HAL_InitTick+0xd8>)
 8001858:	f001 fd88 	bl	800336c <HAL_TIM_Base_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001866:	2b00      	cmp	r3, #0
 8001868:	d11b      	bne.n	80018a2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800186a:	4813      	ldr	r0, [pc, #76]	; (80018b8 <HAL_InitTick+0xd8>)
 800186c:	f001 fdce 	bl	800340c <HAL_TIM_Base_Start_IT>
 8001870:	4603      	mov	r3, r0
 8001872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800187a:	2b00      	cmp	r3, #0
 800187c:	d111      	bne.n	80018a2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800187e:	2019      	movs	r0, #25
 8001880:	f000 f9e2 	bl	8001c48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	d808      	bhi.n	800189c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800188a:	2200      	movs	r2, #0
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	2019      	movs	r0, #25
 8001890:	f000 f9be 	bl	8001c10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_InitTick+0xe0>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e002      	b.n	80018a2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3730      	adds	r7, #48	; 0x30
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	431bde83 	.word	0x431bde83
 80018b8:	20001b48 	.word	0x20001b48
 80018bc:	40014400 	.word	0x40014400
 80018c0:	20000004 	.word	0x20000004

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <RTC_WKUP_IRQHandler+0x10>)
 80018f6:	f001 fce3 	bl	80032c0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20001a4c 	.word	0x20001a4c

08001904 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800190a:	f001 fde1 	bl	80034d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800190e:	4803      	ldr	r0, [pc, #12]	; (800191c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001910:	f001 fdde 	bl	80034d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//  usr_isr_tim1_up();	// SK ADD
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20001a6c 	.word	0x20001a6c
 800191c:	20001b48 	.word	0x20001b48

08001920 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <TIM2_IRQHandler+0x14>)
 8001926:	f001 fdd3 	bl	80034d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  usr_isr_tim1_up();	// SK ADD
 800192a:	f7ff f9e5 	bl	8000cf8 <usr_isr_tim1_up>

  /* USER CODE END TIM2_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20001ab4 	.word	0x20001ab4

08001938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001940:	4a14      	ldr	r2, [pc, #80]	; (8001994 <_sbrk+0x5c>)
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <_sbrk+0x60>)
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <_sbrk+0x64>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <_sbrk+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	d207      	bcs.n	8001978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001968:	f005 fb40 	bl	8006fec <__errno>
 800196c:	4603      	mov	r3, r0
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e009      	b.n	800198c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <_sbrk+0x64>)
 8001988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20018000 	.word	0x20018000
 8001998:	00000400 	.word	0x00000400
 800199c:	20001b90 	.word	0x20001b90
 80019a0:	200064f8 	.word	0x200064f8

080019a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <SystemInit+0x20>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <SystemInit+0x20>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ce:	490e      	ldr	r1, [pc, #56]	; (8001a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d0:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d4:	e002      	b.n	80019dc <LoopCopyDataInit>

080019d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019da:	3304      	adds	r3, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e0:	d3f9      	bcc.n	80019d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e4:	4c0b      	ldr	r4, [pc, #44]	; (8001a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e8:	e001      	b.n	80019ee <LoopFillZerobss>

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ec:	3204      	adds	r2, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019f2:	f7ff ffd7 	bl	80019a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f6:	f005 faff 	bl	8006ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fa:	f7ff fb41 	bl	8001080 <main>
  bx  lr    
 80019fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a0c:	08008890 	.word	0x08008890
  ldr r2, =_sbss
 8001a10:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a14:	200064f8 	.word	0x200064f8

08001a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_Init+0x40>)
 8001a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_Init+0x40>)
 8001a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_Init+0x40>)
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 f8d8 	bl	8001bfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4a:	200f      	movs	r0, #15
 8001a4c:	f7ff fec8 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a50:	f7ff fdda 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20001b94 	.word	0x20001b94

08001a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20001b94 	.word	0x20001b94

08001aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	db0b      	blt.n	8001b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	4907      	ldr	r1, [pc, #28]	; (8001b3c <__NVIC_EnableIRQ+0x38>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	2001      	movs	r0, #1
 8001b26:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	; (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	0112      	lsls	r2, r2, #4
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	; (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf28      	it	cs
 8001bb2:	2304      	movcs	r3, #4
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b03      	subs	r3, #3
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
         );
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ff4c 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c22:	f7ff ff61 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	6978      	ldr	r0, [r7, #20]
 8001c2e:	f7ff ffb1 	bl	8001b94 <NVIC_EncodePriority>
 8001c32:	4602      	mov	r2, r0
 8001c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff80 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c40:	bf00      	nop
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff54 	bl	8001b04 <__NVIC_EnableIRQ>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e159      	b.n	8001f34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	f040 8148 	bne.w	8001f2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d005      	beq.n	8001cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d130      	bne.n	8001d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 0201 	and.w	r2, r3, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d017      	beq.n	8001d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d123      	bne.n	8001da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a2 	beq.w	8001f2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4a56      	ldr	r2, [pc, #344]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfa:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e06:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_GPIO_Init+0x2ec>)
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a49      	ldr	r2, [pc, #292]	; (8001f54 <HAL_GPIO_Init+0x2f0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d019      	beq.n	8001e66 <HAL_GPIO_Init+0x202>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <HAL_GPIO_Init+0x2f4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0x1fe>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a47      	ldr	r2, [pc, #284]	; (8001f5c <HAL_GPIO_Init+0x2f8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00d      	beq.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a46      	ldr	r2, [pc, #280]	; (8001f60 <HAL_GPIO_Init+0x2fc>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d007      	beq.n	8001e5a <HAL_GPIO_Init+0x1f6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a45      	ldr	r2, [pc, #276]	; (8001f64 <HAL_GPIO_Init+0x300>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_GPIO_Init+0x1f2>
 8001e52:	2304      	movs	r3, #4
 8001e54:	e008      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e56:	2307      	movs	r3, #7
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x204>
 8001e66:	2300      	movs	r3, #0
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e78:	4935      	ldr	r1, [pc, #212]	; (8001f50 <HAL_GPIO_Init+0x2ec>)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e86:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eaa:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed4:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001efe:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_GPIO_Init+0x304>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	2b0f      	cmp	r3, #15
 8001f38:	f67f aea2 	bls.w	8001c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40013c00 	.word	0x40013c00

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f88:	e003      	b.n	8001f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	619a      	str	r2, [r3, #24]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb0:	887a      	ldrh	r2, [r7, #2]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	041a      	lsls	r2, r3, #16
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	400b      	ands	r3, r1
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	619a      	str	r2, [r3, #24]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e267      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d075      	beq.n	80020de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff2:	4b88      	ldr	r3, [pc, #544]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d00c      	beq.n	8002018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffe:	4b85      	ldr	r3, [pc, #532]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002006:	2b08      	cmp	r3, #8
 8002008:	d112      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200a:	4b82      	ldr	r3, [pc, #520]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002016:	d10b      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	4b7e      	ldr	r3, [pc, #504]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d05b      	beq.n	80020dc <HAL_RCC_OscConfig+0x108>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d157      	bne.n	80020dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e242      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d106      	bne.n	8002048 <HAL_RCC_OscConfig+0x74>
 800203a:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a75      	ldr	r2, [pc, #468]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e01d      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x98>
 8002052:	4b70      	ldr	r3, [pc, #448]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6f      	ldr	r2, [pc, #444]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6c      	ldr	r2, [pc, #432]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 800206c:	4b69      	ldr	r3, [pc, #420]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a68      	ldr	r2, [pc, #416]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b66      	ldr	r3, [pc, #408]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a65      	ldr	r2, [pc, #404]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fcfc 	bl	8001a88 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff fcf8 	bl	8001a88 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e207      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b5b      	ldr	r3, [pc, #364]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0xc0>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff fce8 	bl	8001a88 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff fce4 	bl	8001a88 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1f3      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	4b51      	ldr	r3, [pc, #324]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0xe8>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d063      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f6:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d11c      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002102:	4b44      	ldr	r3, [pc, #272]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1c7      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4937      	ldr	r1, [pc, #220]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	e03a      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002144:	4b34      	ldr	r3, [pc, #208]	; (8002218 <HAL_RCC_OscConfig+0x244>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff fc9d 	bl	8001a88 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002152:	f7ff fc99 	bl	8001a88 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1a8      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4925      	ldr	r1, [pc, #148]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_OscConfig+0x244>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fc7c 	bl	8001a88 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002194:	f7ff fc78 	bl	8001a88 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e187      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d036      	beq.n	800222c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_RCC_OscConfig+0x248>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff fc5c 	bl	8001a88 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d4:	f7ff fc58 	bl	8001a88 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e167      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_OscConfig+0x240>)
 80021e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x200>
 80021f2:	e01b      	b.n	800222c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_RCC_OscConfig+0x248>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff fc45 	bl	8001a88 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	e00e      	b.n	8002220 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002202:	f7ff fc41 	bl	8001a88 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d907      	bls.n	8002220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e150      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
 8002214:	40023800 	.word	0x40023800
 8002218:	42470000 	.word	0x42470000
 800221c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b88      	ldr	r3, [pc, #544]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ea      	bne.n	8002202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8097 	beq.w	8002368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b81      	ldr	r3, [pc, #516]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b7d      	ldr	r3, [pc, #500]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a7c      	ldr	r2, [pc, #496]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b7a      	ldr	r3, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226a:	4b77      	ldr	r3, [pc, #476]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002276:	4b74      	ldr	r3, [pc, #464]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a73      	ldr	r2, [pc, #460]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7ff fc01 	bl	8001a88 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7ff fbfd 	bl	8001a88 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e10c      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <HAL_RCC_OscConfig+0x474>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x2ea>
 80022b0:	4b64      	ldr	r3, [pc, #400]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a63      	ldr	r2, [pc, #396]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	e01c      	b.n	80022f8 <HAL_RCC_OscConfig+0x324>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x30c>
 80022c6:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	4a5e      	ldr	r2, [pc, #376]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	6713      	str	r3, [r2, #112]	; 0x70
 80022d2:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a5b      	ldr	r2, [pc, #364]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0x324>
 80022e0:	4b58      	ldr	r3, [pc, #352]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	4a57      	ldr	r2, [pc, #348]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6713      	str	r3, [r2, #112]	; 0x70
 80022ec:	4b55      	ldr	r3, [pc, #340]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4a54      	ldr	r2, [pc, #336]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80022f2:	f023 0304 	bic.w	r3, r3, #4
 80022f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d015      	beq.n	800232c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7ff fbc2 	bl	8001a88 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	e00a      	b.n	800231e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002308:	f7ff fbbe 	bl	8001a88 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e0cb      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231e:	4b49      	ldr	r3, [pc, #292]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0ee      	beq.n	8002308 <HAL_RCC_OscConfig+0x334>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232c:	f7ff fbac 	bl	8001a88 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7ff fba8 	bl	8001a88 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0b5      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1ee      	bne.n	8002334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002356:	7dfb      	ldrb	r3, [r7, #23]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235c:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	4a38      	ldr	r2, [pc, #224]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002366:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80a1 	beq.w	80024b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002372:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b08      	cmp	r3, #8
 800237c:	d05c      	beq.n	8002438 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d141      	bne.n	800240a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCC_OscConfig+0x478>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff fb7c 	bl	8001a88 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002394:	f7ff fb78 	bl	8001a88 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e087      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	4b27      	ldr	r3, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	3b01      	subs	r3, #1
 80023cc:	041b      	lsls	r3, r3, #16
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	491b      	ldr	r1, [pc, #108]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x478>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7ff fb51 	bl	8001a88 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ea:	f7ff fb4d 	bl	8001a88 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e05c      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x416>
 8002408:	e054      	b.n	80024b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x478>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff fb3a 	bl	8001a88 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002418:	f7ff fb36 	bl	8001a88 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e045      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_RCC_OscConfig+0x470>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x444>
 8002436:	e03d      	b.n	80024b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d107      	bne.n	8002450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e038      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
 8002444:	40023800 	.word	0x40023800
 8002448:	40007000 	.word	0x40007000
 800244c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d028      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d121      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d11a      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002480:	4013      	ands	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002488:	4293      	cmp	r3, r2
 800248a:	d111      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	3b01      	subs	r3, #1
 800249a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0cc      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d90c      	bls.n	8002500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b8      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a52      	ldr	r2, [pc, #328]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	494d      	ldr	r1, [pc, #308]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d044      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d003      	beq.n	8002582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e067      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4934      	ldr	r1, [pc, #208]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7ff fa68 	bl	8001a88 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7ff fa64 	bl	8001a88 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e04f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d20c      	bcs.n	800260c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e032      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	490e      	ldr	r1, [pc, #56]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264a:	f000 f821 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	5ccb      	ldrb	r3, [r1, r3]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff f8b8 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	40023800 	.word	0x40023800
 8002684:	080086b8 	.word	0x080086b8
 8002688:	20000000 	.word	0x20000000
 800268c:	20000004 	.word	0x20000004

08002690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002694:	b094      	sub	sp, #80	; 0x50
 8002696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	647b      	str	r3, [r7, #68]	; 0x44
 800269c:	2300      	movs	r3, #0
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a0:	2300      	movs	r3, #0
 80026a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a8:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d00d      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x40>
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	f200 80e1 	bhi.w	800287c <HAL_RCC_GetSysClockFreq+0x1ec>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x3a>
 80026c2:	e0db      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b73      	ldr	r3, [pc, #460]	; (8002894 <HAL_RCC_GetSysClockFreq+0x204>)
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026c8:	e0db      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ca:	4b73      	ldr	r3, [pc, #460]	; (8002898 <HAL_RCC_GetSysClockFreq+0x208>)
 80026cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ce:	e0d8      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026da:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d063      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	2200      	movs	r2, #0
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
 80026fa:	2300      	movs	r3, #0
 80026fc:	637b      	str	r3, [r7, #52]	; 0x34
 80026fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002702:	4622      	mov	r2, r4
 8002704:	462b      	mov	r3, r5
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	0159      	lsls	r1, r3, #5
 8002710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002714:	0150      	lsls	r0, r2, #5
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4621      	mov	r1, r4
 800271c:	1a51      	subs	r1, r2, r1
 800271e:	6139      	str	r1, [r7, #16]
 8002720:	4629      	mov	r1, r5
 8002722:	eb63 0301 	sbc.w	r3, r3, r1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002734:	4659      	mov	r1, fp
 8002736:	018b      	lsls	r3, r1, #6
 8002738:	4651      	mov	r1, sl
 800273a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800273e:	4651      	mov	r1, sl
 8002740:	018a      	lsls	r2, r1, #6
 8002742:	4651      	mov	r1, sl
 8002744:	ebb2 0801 	subs.w	r8, r2, r1
 8002748:	4659      	mov	r1, fp
 800274a:	eb63 0901 	sbc.w	r9, r3, r1
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800275a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800275e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002762:	4690      	mov	r8, r2
 8002764:	4699      	mov	r9, r3
 8002766:	4623      	mov	r3, r4
 8002768:	eb18 0303 	adds.w	r3, r8, r3
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	462b      	mov	r3, r5
 8002770:	eb49 0303 	adc.w	r3, r9, r3
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002782:	4629      	mov	r1, r5
 8002784:	024b      	lsls	r3, r1, #9
 8002786:	4621      	mov	r1, r4
 8002788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800278c:	4621      	mov	r1, r4
 800278e:	024a      	lsls	r2, r1, #9
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002796:	2200      	movs	r2, #0
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 800279a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800279c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027a0:	f7fd fd86 	bl	80002b0 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4613      	mov	r3, r2
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ac:	e058      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	2200      	movs	r2, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	4611      	mov	r1, r2
 80027ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027be:	623b      	str	r3, [r7, #32]
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c8:	4642      	mov	r2, r8
 80027ca:	464b      	mov	r3, r9
 80027cc:	f04f 0000 	mov.w	r0, #0
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	0159      	lsls	r1, r3, #5
 80027d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027da:	0150      	lsls	r0, r2, #5
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4641      	mov	r1, r8
 80027e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027e6:	4649      	mov	r1, r9
 80027e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002800:	ebb2 040a 	subs.w	r4, r2, sl
 8002804:	eb63 050b 	sbc.w	r5, r3, fp
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	00eb      	lsls	r3, r5, #3
 8002812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002816:	00e2      	lsls	r2, r4, #3
 8002818:	4614      	mov	r4, r2
 800281a:	461d      	mov	r5, r3
 800281c:	4643      	mov	r3, r8
 800281e:	18e3      	adds	r3, r4, r3
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	464b      	mov	r3, r9
 8002824:	eb45 0303 	adc.w	r3, r5, r3
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002836:	4629      	mov	r1, r5
 8002838:	028b      	lsls	r3, r1, #10
 800283a:	4621      	mov	r1, r4
 800283c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002840:	4621      	mov	r1, r4
 8002842:	028a      	lsls	r2, r1, #10
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284a:	2200      	movs	r2, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	61fa      	str	r2, [r7, #28]
 8002850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002854:	f7fd fd2c 	bl	80002b0 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_GetSysClockFreq+0x200>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	3301      	adds	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002870:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800287a:	e002      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetSysClockFreq+0x204>)
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002884:	4618      	mov	r0, r3
 8002886:	3750      	adds	r7, #80	; 0x50
 8002888:	46bd      	mov	sp, r7
 800288a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	00f42400 	.word	0x00f42400
 8002898:	007a1200 	.word	0x007a1200

0800289c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b8:	f7ff fff0 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0a9b      	lsrs	r3, r3, #10
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	080086c8 	.word	0x080086c8

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e0:	f7ff ffdc 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0b5b      	lsrs	r3, r3, #13
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	080086c8 	.word	0x080086c8

08002904 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	220f      	movs	r2, #15
 8002912:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_RCC_GetClockConfig+0x5c>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_RCC_GetClockConfig+0x5c>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_RCC_GetClockConfig+0x5c>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_GetClockConfig+0x5c>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_RCC_GetClockConfig+0x60>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0207 	and.w	r2, r3, #7
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	601a      	str	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40023c00 	.word	0x40023c00

08002968 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800298c:	2b00      	cmp	r3, #0
 800298e:	d035      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002990:	4b67      	ldr	r3, [pc, #412]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002996:	f7ff f877 	bl	8001a88 <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800299e:	f7ff f873 	bl	8001a88 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e0ba      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029b0:	4b60      	ldr	r3, [pc, #384]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	019a      	lsls	r2, r3, #6
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	071b      	lsls	r3, r3, #28
 80029c8:	495a      	ldr	r1, [pc, #360]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029d0:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029d6:	f7ff f857 	bl	8001a88 <HAL_GetTick>
 80029da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029de:	f7ff f853 	bl	8001a88 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e09a      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029f0:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8083 	beq.w	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a48      	ldr	r2, [pc, #288]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a26:	4b44      	ldr	r3, [pc, #272]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a43      	ldr	r2, [pc, #268]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a32:	f7ff f829 	bl	8001a88 <HAL_GetTick>
 8002a36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7ff f825 	bl	8001a88 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e06c      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a58:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d02f      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d028      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a76:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a80:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a86:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a8c:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d114      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fff3 	bl	8001a88 <HAL_GetTick>
 8002aa2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe ffef 	bl	8001a88 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e034      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ee      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ad4:	d10d      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aea:	4912      	ldr	r1, [pc, #72]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]
 8002af0:	e005      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002af8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002afc:	6093      	str	r3, [r2, #8]
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0a:	490a      	ldr	r1, [pc, #40]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7c1a      	ldrb	r2, [r3, #16]
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b22:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	42470068 	.word	0x42470068
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	42470e40 	.word	0x42470e40
 8002b40:	424711e0 	.word	0x424711e0

08002b44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e066      	b.n	8002c28 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	7f5b      	ldrb	r3, [r3, #29]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe fd78 	bl	8001660 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	22ca      	movs	r2, #202	; 0xca
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2253      	movs	r2, #83	; 0x53
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa45 	bl	8003016 <RTC_EnterInitMode>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d12c      	bne.n	8002bf0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6899      	ldr	r1, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	68d2      	ldr	r2, [r2, #12]
 8002bd0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6919      	ldr	r1, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fa4c 	bl	8003084 <RTC_ExitInitMode>
 8002bec:	4603      	mov	r3, r0
 8002bee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d113      	bne.n	8002c1e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699a      	ldr	r2, [r3, #24]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	22ff      	movs	r2, #255	; 0xff
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	7f1b      	ldrb	r3, [r3, #28]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_RTC_SetTime+0x1c>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e087      	b.n	8002d5c <HAL_RTC_SetTime+0x12c>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2202      	movs	r2, #2
 8002c56:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d126      	bne.n	8002cac <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fa29 	bl	80030ce <RTC_ByteToBcd2>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	785b      	ldrb	r3, [r3, #1]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fa22 	bl	80030ce <RTC_ByteToBcd2>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002c8e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	789b      	ldrb	r3, [r3, #2]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fa1a 	bl	80030ce <RTC_ByteToBcd2>
 8002c9a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c9c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	78db      	ldrb	r3, [r3, #3]
 8002ca4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e018      	b.n	8002cde <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ccc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002cd2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	78db      	ldrb	r3, [r3, #3]
 8002cd8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	22ca      	movs	r2, #202	; 0xca
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2253      	movs	r2, #83	; 0x53
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f991 	bl	8003016 <RTC_EnterInitMode>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d120      	bne.n	8002d40 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d08:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d0c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6899      	ldr	r1, [r3, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f9a4 	bl	8003084 <RTC_ExitInitMode>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	22ff      	movs	r2, #255	; 0xff
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	771a      	strb	r2, [r3, #28]

  return status;
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd90      	pop	{r4, r7, pc}

08002d64 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	0d9b      	lsrs	r3, r3, #22
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d11a      	bne.n	8002e16 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f98f 	bl	8003108 <RTC_Bcd2ToByte>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	785b      	ldrb	r3, [r3, #1]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f986 	bl	8003108 <RTC_Bcd2ToByte>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	789b      	ldrb	r3, [r3, #2]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f97d 	bl	8003108 <RTC_Bcd2ToByte>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	7f1b      	ldrb	r3, [r3, #28]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_RTC_SetDate+0x1c>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e071      	b.n	8002f20 <HAL_RTC_SetDate+0x100>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2202      	movs	r2, #2
 8002e46:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10e      	bne.n	8002e6c <HAL_RTC_SetDate+0x4c>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	f023 0310 	bic.w	r3, r3, #16
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	330a      	adds	r3, #10
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11c      	bne.n	8002eac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	78db      	ldrb	r3, [r3, #3]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f929 	bl	80030ce <RTC_ByteToBcd2>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	785b      	ldrb	r3, [r3, #1]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f922 	bl	80030ce <RTC_ByteToBcd2>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e8e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	789b      	ldrb	r3, [r3, #2]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f91a 	bl	80030ce <RTC_ByteToBcd2>
 8002e9a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e9c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e00e      	b.n	8002eca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	78db      	ldrb	r3, [r3, #3]
 8002eb0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	785b      	ldrb	r3, [r3, #1]
 8002eb6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002eb8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ebe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	22ca      	movs	r2, #202	; 0xca
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2253      	movs	r2, #83	; 0x53
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f89b 	bl	8003016 <RTC_EnterInitMode>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ef4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ef8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f8c2 	bl	8003084 <RTC_ExitInitMode>
 8002f00:	4603      	mov	r3, r0
 8002f02:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	22ff      	movs	r2, #255	; 0xff
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	771a      	strb	r2, [r3, #28]

  return status;
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd90      	pop	{r4, r7, pc}

08002f28 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f46:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	0c1b      	lsrs	r3, r3, #16
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	0b5b      	lsrs	r3, r3, #13
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d11a      	bne.n	8002fbc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	78db      	ldrb	r3, [r3, #3]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f8bc 	bl	8003108 <RTC_Bcd2ToByte>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	785b      	ldrb	r3, [r3, #1]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f8b3 	bl	8003108 <RTC_Bcd2ToByte>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	789b      	ldrb	r3, [r3, #2]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f8aa 	bl	8003108 <RTC_Bcd2ToByte>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fe0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fe2:	f7fe fd51 	bl	8001a88 <HAL_GetTick>
 8002fe6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002fe8:	e009      	b.n	8002ffe <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fea:	f7fe fd4d 	bl	8001a88 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff8:	d901      	bls.n	8002ffe <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e007      	b.n	800300e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ee      	beq.n	8002fea <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d122      	bne.n	800307a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003042:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003044:	f7fe fd20 	bl	8001a88 <HAL_GetTick>
 8003048:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800304a:	e00c      	b.n	8003066 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800304c:	f7fe fd1c 	bl	8001a88 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800305a:	d904      	bls.n	8003066 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2204      	movs	r2, #4
 8003060:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <RTC_EnterInitMode+0x64>
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d1e8      	bne.n	800304c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ff89 	bl	8002fc6 <HAL_RTC_WaitForSynchro>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2204      	movs	r2, #4
 80030be:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80030dc:	e005      	b.n	80030ea <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	3301      	adds	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	3b0a      	subs	r3, #10
 80030e8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	2b09      	cmp	r3, #9
 80030ee:	d8f6      	bhi.n	80030de <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	b2db      	uxtb	r3, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	4413      	add	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	b2da      	uxtb	r2, r3
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	4413      	add	r3, r2
 8003132:	b2db      	uxtb	r3, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800314c:	4b59      	ldr	r3, [pc, #356]	; (80032b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a59      	ldr	r2, [pc, #356]	; (80032b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0adb      	lsrs	r3, r3, #11
 8003158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	7f1b      	ldrb	r3, [r3, #28]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800316a:	2302      	movs	r3, #2
 800316c:	e09b      	b.n	80032a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2202      	movs	r2, #2
 8003178:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	22ca      	movs	r2, #202	; 0xca
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2253      	movs	r2, #83	; 0x53
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d017      	beq.n	80031c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	1e5a      	subs	r2, r3, #1
 800319c:	617a      	str	r2, [r7, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	22ff      	movs	r2, #255	; 0xff
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2203      	movs	r2, #3
 80031ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e075      	b.n	80032a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e7      	bne.n	8003198 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80031e8:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80031ea:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a32      	ldr	r2, [pc, #200]	; (80032b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	0adb      	lsrs	r3, r3, #11
 80031f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	1e5a      	subs	r2, r3, #1
 8003204:	617a      	str	r2, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	22ff      	movs	r2, #255	; 0xff
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2203      	movs	r2, #3
 8003216:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e041      	b.n	80032a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0e7      	beq.n	8003200 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0207 	bic.w	r2, r2, #7
 800323e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a17      	ldr	r2, [pc, #92]	; (80032bc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800325e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003262:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800326a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800326e:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800327e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800328e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000000 	.word	0x20000000
 80032b8:	10624dd3 	.word	0x10624dd3
 80032bc:	40013c00 	.word	0x40013c00

080032c0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fcb0 	bl	8000c3c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80032ec:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 80032f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80032f4:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	775a      	strb	r2, [r3, #29]
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40013c00 	.word	0x40013c00

08003308 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3350      	adds	r3, #80	; 0x50
 800331e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4413      	add	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	601a      	str	r2, [r3, #0]
}
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3350      	adds	r3, #80	; 0x50
 8003350:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e041      	b.n	8003402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fe f998 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f000 fa88 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d001      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e044      	b.n	80034ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_TIM_Base_Start_IT+0xb0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x6c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344e:	d013      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x6c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x6c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x6c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a17      	ldr	r2, [pc, #92]	; (80034c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_TIM_Base_Start_IT+0x6c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a16      	ldr	r2, [pc, #88]	; (80034cc <HAL_TIM_Base_Start_IT+0xc0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d111      	bne.n	800349c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b06      	cmp	r3, #6
 8003488:	d010      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349a:	e007      	b.n	80034ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40014000 	.word	0x40014000

080034d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d122      	bne.n	800352c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d11b      	bne.n	800352c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0202 	mvn.w	r2, #2
 80034fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f9b5 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9a7 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f9b8 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b04      	cmp	r3, #4
 8003538:	d122      	bne.n	8003580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b04      	cmp	r3, #4
 8003546:	d11b      	bne.n	8003580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0204 	mvn.w	r2, #4
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f98b 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f97d 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f98e 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b08      	cmp	r3, #8
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b08      	cmp	r3, #8
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0208 	mvn.w	r2, #8
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2204      	movs	r2, #4
 80035aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f961 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f953 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f964 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0210 	mvn.w	r2, #16
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2208      	movs	r2, #8
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f937 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f929 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f93a 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10e      	bne.n	8003654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d107      	bne.n	8003654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0201 	mvn.w	r2, #1
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd ffc2 	bl	80015d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365e:	2b80      	cmp	r3, #128	; 0x80
 8003660:	d10e      	bne.n	8003680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b80      	cmp	r3, #128	; 0x80
 800366e:	d107      	bne.n	8003680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fab2 	bl	8003be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b40      	cmp	r3, #64	; 0x40
 800368c:	d10e      	bne.n	80036ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d107      	bne.n	80036ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8ff 	bl	80038aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d10e      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d107      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0220 	mvn.w	r2, #32
 80036d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa7c 	bl	8003bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_ConfigClockSource+0x1c>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e0b4      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x186>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800371a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003722:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003734:	d03e      	beq.n	80037b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373a:	f200 8087 	bhi.w	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003742:	f000 8086 	beq.w	8003852 <HAL_TIM_ConfigClockSource+0x172>
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	d87f      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b70      	cmp	r3, #112	; 0x70
 800374e:	d01a      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0xa6>
 8003750:	2b70      	cmp	r3, #112	; 0x70
 8003752:	d87b      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b60      	cmp	r3, #96	; 0x60
 8003756:	d050      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x11a>
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d877      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b50      	cmp	r3, #80	; 0x50
 800375e:	d03c      	beq.n	80037da <HAL_TIM_ConfigClockSource+0xfa>
 8003760:	2b50      	cmp	r3, #80	; 0x50
 8003762:	d873      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d058      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x13a>
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d86f      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b30      	cmp	r3, #48	; 0x30
 800376e:	d064      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	2b30      	cmp	r3, #48	; 0x30
 8003772:	d86b      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b20      	cmp	r3, #32
 8003776:	d060      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d867      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d05c      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003780:	2b10      	cmp	r3, #16
 8003782:	d05a      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003784:	e062      	b.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6899      	ldr	r1, [r3, #8]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f000 f98d 	bl	8003ab4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	609a      	str	r2, [r3, #8]
      break;
 80037b2:	e04f      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6899      	ldr	r1, [r3, #8]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f000 f976 	bl	8003ab4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037d6:	609a      	str	r2, [r3, #8]
      break;
 80037d8:	e03c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f000 f8ea 	bl	80039c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2150      	movs	r1, #80	; 0x50
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f943 	bl	8003a7e <TIM_ITRx_SetConfig>
      break;
 80037f8:	e02c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	461a      	mov	r2, r3
 8003808:	f000 f909 	bl	8003a1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2160      	movs	r1, #96	; 0x60
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f933 	bl	8003a7e <TIM_ITRx_SetConfig>
      break;
 8003818:	e01c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	461a      	mov	r2, r3
 8003828:	f000 f8ca 	bl	80039c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2140      	movs	r1, #64	; 0x40
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f923 	bl	8003a7e <TIM_ITRx_SetConfig>
      break;
 8003838:	e00c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f000 f91a 	bl	8003a7e <TIM_ITRx_SetConfig>
      break;
 800384a:	e003      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      break;
 8003850:	e000      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a34      	ldr	r2, [pc, #208]	; (80039a4 <TIM_Base_SetConfig+0xe4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00f      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038de:	d00b      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a31      	ldr	r2, [pc, #196]	; (80039a8 <TIM_Base_SetConfig+0xe8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a30      	ldr	r2, [pc, #192]	; (80039ac <TIM_Base_SetConfig+0xec>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <TIM_Base_SetConfig+0xf0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d108      	bne.n	800390a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <TIM_Base_SetConfig+0xe4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01b      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d017      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <TIM_Base_SetConfig+0xe8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a21      	ldr	r2, [pc, #132]	; (80039ac <TIM_Base_SetConfig+0xec>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00f      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a20      	ldr	r2, [pc, #128]	; (80039b0 <TIM_Base_SetConfig+0xf0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <TIM_Base_SetConfig+0xf4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <TIM_Base_SetConfig+0xf8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <TIM_Base_SetConfig+0xfc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <TIM_Base_SetConfig+0xe4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800
 80039b0:	40000c00 	.word	0x40000c00
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800

080039c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f023 0201 	bic.w	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f023 030a 	bic.w	r3, r3, #10
 80039fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b087      	sub	sp, #28
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	f023 0210 	bic.w	r2, r3, #16
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	031b      	lsls	r3, r3, #12
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b085      	sub	sp, #20
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f043 0307 	orr.w	r3, r3, #7
 8003aa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	609a      	str	r2, [r3, #8]
}
 8003aa8:	bf00      	nop
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	609a      	str	r2, [r3, #8]
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e050      	b.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d018      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d013      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00e      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d10c      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800
 8003bc8:	40000c00 	.word	0x40000c00
 8003bcc:	40014000 	.word	0x40014000

08003bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e03f      	b.n	8003c8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd fd96 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2224      	movs	r2, #36	; 0x24
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f9cb 	bl	8003fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695a      	ldr	r2, [r3, #20]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b08a      	sub	sp, #40	; 0x28
 8003c96:	af02      	add	r7, sp, #8
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d17c      	bne.n	8003dac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_UART_Transmit+0x2c>
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e075      	b.n	8003dae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_UART_Transmit+0x3e>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e06e      	b.n	8003dae <HAL_UART_Transmit+0x11c>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2221      	movs	r2, #33	; 0x21
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ce6:	f7fd fecf 	bl	8001a88 <HAL_GetTick>
 8003cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	88fa      	ldrh	r2, [r7, #6]
 8003cf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	88fa      	ldrh	r2, [r7, #6]
 8003cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d00:	d108      	bne.n	8003d14 <HAL_UART_Transmit+0x82>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	e003      	b.n	8003d1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d24:	e02a      	b.n	8003d7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	; 0x80
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f8e2 	bl	8003efa <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e036      	b.n	8003dae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	3302      	adds	r3, #2
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	e007      	b.n	8003d6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1cf      	bne.n	8003d26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2140      	movs	r1, #64	; 0x40
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f8b2 	bl	8003efa <UART_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e006      	b.n	8003dae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e000      	b.n	8003dae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b08a      	sub	sp, #40	; 0x28
 8003dba:	af02      	add	r7, sp, #8
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	f040 808c 	bne.w	8003ef0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_UART_Receive+0x2e>
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e084      	b.n	8003ef2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Receive+0x40>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e07d      	b.n	8003ef2 <HAL_UART_Receive+0x13c>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2222      	movs	r2, #34	; 0x22
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e12:	f7fd fe39 	bl	8001a88 <HAL_GetTick>
 8003e16:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	88fa      	ldrh	r2, [r7, #6]
 8003e22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2c:	d108      	bne.n	8003e40 <HAL_UART_Receive+0x8a>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d104      	bne.n	8003e40 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	e003      	b.n	8003e48 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e50:	e043      	b.n	8003eda <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2120      	movs	r1, #32
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f84c 	bl	8003efa <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e042      	b.n	8003ef2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	3302      	adds	r3, #2
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	e01f      	b.n	8003ecc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e94:	d007      	beq.n	8003ea6 <HAL_UART_Receive+0xf0>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_UART_Receive+0xfe>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	701a      	strb	r2, [r3, #0]
 8003eb2:	e008      	b.n	8003ec6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1b6      	bne.n	8003e52 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
  }
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b090      	sub	sp, #64	; 0x40
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4613      	mov	r3, r2
 8003f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0a:	e050      	b.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f12:	d04c      	beq.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f1a:	f7fd fdb5 	bl	8001a88 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d241      	bcs.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	330c      	adds	r3, #12
 8003f48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f4a:	637a      	str	r2, [r7, #52]	; 0x34
 8003f4c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3314      	adds	r3, #20
 8003f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f7e:	623a      	str	r2, [r7, #32]
 8003f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	69f9      	ldr	r1, [r7, #28]
 8003f84:	6a3a      	ldr	r2, [r7, #32]
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e5      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e00f      	b.n	8003fce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d09f      	beq.n	8003f0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3740      	adds	r7, #64	; 0x40
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fdc:	b0c0      	sub	sp, #256	; 0x100
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	68d9      	ldr	r1, [r3, #12]
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	ea40 0301 	orr.w	r3, r0, r1
 8004000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	431a      	orrs	r2, r3
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	431a      	orrs	r2, r3
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004030:	f021 010c 	bic.w	r1, r1, #12
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800403e:	430b      	orrs	r3, r1
 8004040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004052:	6999      	ldr	r1, [r3, #24]
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	ea40 0301 	orr.w	r3, r0, r1
 800405e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b8f      	ldr	r3, [pc, #572]	; (80042a4 <UART_SetConfig+0x2cc>)
 8004068:	429a      	cmp	r2, r3
 800406a:	d005      	beq.n	8004078 <UART_SetConfig+0xa0>
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b8d      	ldr	r3, [pc, #564]	; (80042a8 <UART_SetConfig+0x2d0>)
 8004074:	429a      	cmp	r2, r3
 8004076:	d104      	bne.n	8004082 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7fe fc30 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 800407c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004080:	e003      	b.n	800408a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004082:	f7fe fc17 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8004086:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004094:	f040 810c 	bne.w	80042b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800409c:	2200      	movs	r2, #0
 800409e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040aa:	4622      	mov	r2, r4
 80040ac:	462b      	mov	r3, r5
 80040ae:	1891      	adds	r1, r2, r2
 80040b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80040b2:	415b      	adcs	r3, r3
 80040b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040ba:	4621      	mov	r1, r4
 80040bc:	eb12 0801 	adds.w	r8, r2, r1
 80040c0:	4629      	mov	r1, r5
 80040c2:	eb43 0901 	adc.w	r9, r3, r1
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040da:	4690      	mov	r8, r2
 80040dc:	4699      	mov	r9, r3
 80040de:	4623      	mov	r3, r4
 80040e0:	eb18 0303 	adds.w	r3, r8, r3
 80040e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040e8:	462b      	mov	r3, r5
 80040ea:	eb49 0303 	adc.w	r3, r9, r3
 80040ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004102:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004106:	460b      	mov	r3, r1
 8004108:	18db      	adds	r3, r3, r3
 800410a:	653b      	str	r3, [r7, #80]	; 0x50
 800410c:	4613      	mov	r3, r2
 800410e:	eb42 0303 	adc.w	r3, r2, r3
 8004112:	657b      	str	r3, [r7, #84]	; 0x54
 8004114:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800411c:	f7fc f8c8 	bl	80002b0 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4b61      	ldr	r3, [pc, #388]	; (80042ac <UART_SetConfig+0x2d4>)
 8004126:	fba3 2302 	umull	r2, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	011c      	lsls	r4, r3, #4
 800412e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004132:	2200      	movs	r2, #0
 8004134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004138:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800413c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004140:	4642      	mov	r2, r8
 8004142:	464b      	mov	r3, r9
 8004144:	1891      	adds	r1, r2, r2
 8004146:	64b9      	str	r1, [r7, #72]	; 0x48
 8004148:	415b      	adcs	r3, r3
 800414a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004150:	4641      	mov	r1, r8
 8004152:	eb12 0a01 	adds.w	sl, r2, r1
 8004156:	4649      	mov	r1, r9
 8004158:	eb43 0b01 	adc.w	fp, r3, r1
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004168:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800416c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004170:	4692      	mov	sl, r2
 8004172:	469b      	mov	fp, r3
 8004174:	4643      	mov	r3, r8
 8004176:	eb1a 0303 	adds.w	r3, sl, r3
 800417a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800417e:	464b      	mov	r3, r9
 8004180:	eb4b 0303 	adc.w	r3, fp, r3
 8004184:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004194:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004198:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800419c:	460b      	mov	r3, r1
 800419e:	18db      	adds	r3, r3, r3
 80041a0:	643b      	str	r3, [r7, #64]	; 0x40
 80041a2:	4613      	mov	r3, r2
 80041a4:	eb42 0303 	adc.w	r3, r2, r3
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
 80041aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041b2:	f7fc f87d 	bl	80002b0 <__aeabi_uldivmod>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <UART_SetConfig+0x2d4>)
 80041be:	fba3 2301 	umull	r2, r3, r3, r1
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2264      	movs	r2, #100	; 0x64
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	1acb      	subs	r3, r1, r3
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <UART_SetConfig+0x2d4>)
 80041d4:	fba3 2302 	umull	r2, r3, r3, r2
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041e0:	441c      	add	r4, r3
 80041e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041f4:	4642      	mov	r2, r8
 80041f6:	464b      	mov	r3, r9
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80041fc:	415b      	adcs	r3, r3
 80041fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004204:	4641      	mov	r1, r8
 8004206:	1851      	adds	r1, r2, r1
 8004208:	6339      	str	r1, [r7, #48]	; 0x30
 800420a:	4649      	mov	r1, r9
 800420c:	414b      	adcs	r3, r1
 800420e:	637b      	str	r3, [r7, #52]	; 0x34
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800421c:	4659      	mov	r1, fp
 800421e:	00cb      	lsls	r3, r1, #3
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004226:	4651      	mov	r1, sl
 8004228:	00ca      	lsls	r2, r1, #3
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	4603      	mov	r3, r0
 8004230:	4642      	mov	r2, r8
 8004232:	189b      	adds	r3, r3, r2
 8004234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004238:	464b      	mov	r3, r9
 800423a:	460a      	mov	r2, r1
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004250:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004254:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004258:	460b      	mov	r3, r1
 800425a:	18db      	adds	r3, r3, r3
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
 800425e:	4613      	mov	r3, r2
 8004260:	eb42 0303 	adc.w	r3, r2, r3
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800426a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800426e:	f7fc f81f 	bl	80002b0 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <UART_SetConfig+0x2d4>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	; 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	3332      	adds	r3, #50	; 0x32
 800428a:	4a08      	ldr	r2, [pc, #32]	; (80042ac <UART_SetConfig+0x2d4>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 0207 	and.w	r2, r3, #7
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4422      	add	r2, r4
 800429e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042a0:	e105      	b.n	80044ae <UART_SetConfig+0x4d6>
 80042a2:	bf00      	nop
 80042a4:	40011000 	.word	0x40011000
 80042a8:	40011400 	.word	0x40011400
 80042ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042c2:	4642      	mov	r2, r8
 80042c4:	464b      	mov	r3, r9
 80042c6:	1891      	adds	r1, r2, r2
 80042c8:	6239      	str	r1, [r7, #32]
 80042ca:	415b      	adcs	r3, r3
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
 80042ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042d2:	4641      	mov	r1, r8
 80042d4:	1854      	adds	r4, r2, r1
 80042d6:	4649      	mov	r1, r9
 80042d8:	eb43 0501 	adc.w	r5, r3, r1
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	00eb      	lsls	r3, r5, #3
 80042e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ea:	00e2      	lsls	r2, r4, #3
 80042ec:	4614      	mov	r4, r2
 80042ee:	461d      	mov	r5, r3
 80042f0:	4643      	mov	r3, r8
 80042f2:	18e3      	adds	r3, r4, r3
 80042f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042f8:	464b      	mov	r3, r9
 80042fa:	eb45 0303 	adc.w	r3, r5, r3
 80042fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800430e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800431e:	4629      	mov	r1, r5
 8004320:	008b      	lsls	r3, r1, #2
 8004322:	4621      	mov	r1, r4
 8004324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004328:	4621      	mov	r1, r4
 800432a:	008a      	lsls	r2, r1, #2
 800432c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004330:	f7fb ffbe 	bl	80002b0 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4b60      	ldr	r3, [pc, #384]	; (80044bc <UART_SetConfig+0x4e4>)
 800433a:	fba3 2302 	umull	r2, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	011c      	lsls	r4, r3, #4
 8004342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800434c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004350:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	1891      	adds	r1, r2, r2
 800435a:	61b9      	str	r1, [r7, #24]
 800435c:	415b      	adcs	r3, r3
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004364:	4641      	mov	r1, r8
 8004366:	1851      	adds	r1, r2, r1
 8004368:	6139      	str	r1, [r7, #16]
 800436a:	4649      	mov	r1, r9
 800436c:	414b      	adcs	r3, r1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800437c:	4659      	mov	r1, fp
 800437e:	00cb      	lsls	r3, r1, #3
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004386:	4651      	mov	r1, sl
 8004388:	00ca      	lsls	r2, r1, #3
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	4603      	mov	r3, r0
 8004390:	4642      	mov	r2, r8
 8004392:	189b      	adds	r3, r3, r2
 8004394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043bc:	4649      	mov	r1, r9
 80043be:	008b      	lsls	r3, r1, #2
 80043c0:	4641      	mov	r1, r8
 80043c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043c6:	4641      	mov	r1, r8
 80043c8:	008a      	lsls	r2, r1, #2
 80043ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043ce:	f7fb ff6f 	bl	80002b0 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4b39      	ldr	r3, [pc, #228]	; (80044bc <UART_SetConfig+0x4e4>)
 80043d8:	fba3 1302 	umull	r1, r3, r3, r2
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	2164      	movs	r1, #100	; 0x64
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	3332      	adds	r3, #50	; 0x32
 80043ea:	4a34      	ldr	r2, [pc, #208]	; (80044bc <UART_SetConfig+0x4e4>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f6:	441c      	add	r4, r3
 80043f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043fc:	2200      	movs	r2, #0
 80043fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004400:	677a      	str	r2, [r7, #116]	; 0x74
 8004402:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004406:	4642      	mov	r2, r8
 8004408:	464b      	mov	r3, r9
 800440a:	1891      	adds	r1, r2, r2
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	415b      	adcs	r3, r3
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004416:	4641      	mov	r1, r8
 8004418:	1851      	adds	r1, r2, r1
 800441a:	6039      	str	r1, [r7, #0]
 800441c:	4649      	mov	r1, r9
 800441e:	414b      	adcs	r3, r1
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800442e:	4659      	mov	r1, fp
 8004430:	00cb      	lsls	r3, r1, #3
 8004432:	4651      	mov	r1, sl
 8004434:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004438:	4651      	mov	r1, sl
 800443a:	00ca      	lsls	r2, r1, #3
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	4603      	mov	r3, r0
 8004442:	4642      	mov	r2, r8
 8004444:	189b      	adds	r3, r3, r2
 8004446:	66bb      	str	r3, [r7, #104]	; 0x68
 8004448:	464b      	mov	r3, r9
 800444a:	460a      	mov	r2, r1
 800444c:	eb42 0303 	adc.w	r3, r2, r3
 8004450:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	663b      	str	r3, [r7, #96]	; 0x60
 800445c:	667a      	str	r2, [r7, #100]	; 0x64
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800446a:	4649      	mov	r1, r9
 800446c:	008b      	lsls	r3, r1, #2
 800446e:	4641      	mov	r1, r8
 8004470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004474:	4641      	mov	r1, r8
 8004476:	008a      	lsls	r2, r1, #2
 8004478:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800447c:	f7fb ff18 	bl	80002b0 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <UART_SetConfig+0x4e4>)
 8004486:	fba3 1302 	umull	r1, r3, r3, r2
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2164      	movs	r1, #100	; 0x64
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	3332      	adds	r3, #50	; 0x32
 8004498:	4a08      	ldr	r2, [pc, #32]	; (80044bc <UART_SetConfig+0x4e4>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4422      	add	r2, r4
 80044ac:	609a      	str	r2, [r3, #8]
}
 80044ae:	bf00      	nop
 80044b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044b4:	46bd      	mov	sp, r7
 80044b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ba:	bf00      	nop
 80044bc:	51eb851f 	.word	0x51eb851f

080044c0 <__NVIC_SetPriority>:
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	6039      	str	r1, [r7, #0]
 80044ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	db0a      	blt.n	80044ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	490c      	ldr	r1, [pc, #48]	; (800450c <__NVIC_SetPriority+0x4c>)
 80044da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044de:	0112      	lsls	r2, r2, #4
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	440b      	add	r3, r1
 80044e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80044e8:	e00a      	b.n	8004500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4908      	ldr	r1, [pc, #32]	; (8004510 <__NVIC_SetPriority+0x50>)
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	3b04      	subs	r3, #4
 80044f8:	0112      	lsls	r2, r2, #4
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	440b      	add	r3, r1
 80044fe:	761a      	strb	r2, [r3, #24]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000e100 	.word	0xe000e100
 8004510:	e000ed00 	.word	0xe000ed00

08004514 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <SysTick_Handler+0x1c>)
 800451a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800451c:	f001 fcfe 	bl	8005f1c <xTaskGetSchedulerState>
 8004520:	4603      	mov	r3, r0
 8004522:	2b01      	cmp	r3, #1
 8004524:	d001      	beq.n	800452a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004526:	f002 fae7 	bl	8006af8 <xPortSysTickHandler>
  }
}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010

08004534 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004538:	2100      	movs	r1, #0
 800453a:	f06f 0004 	mvn.w	r0, #4
 800453e:	f7ff ffbf 	bl	80044c0 <__NVIC_SetPriority>
#endif
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800454e:	f3ef 8305 	mrs	r3, IPSR
 8004552:	603b      	str	r3, [r7, #0]
  return(result);
 8004554:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800455a:	f06f 0305 	mvn.w	r3, #5
 800455e:	607b      	str	r3, [r7, #4]
 8004560:	e00c      	b.n	800457c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004562:	4b0a      	ldr	r3, [pc, #40]	; (800458c <osKernelInitialize+0x44>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d105      	bne.n	8004576 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800456a:	4b08      	ldr	r3, [pc, #32]	; (800458c <osKernelInitialize+0x44>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004570:	2300      	movs	r3, #0
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	e002      	b.n	800457c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004576:	f04f 33ff 	mov.w	r3, #4294967295
 800457a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800457c:	687b      	ldr	r3, [r7, #4]
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20001b98 	.word	0x20001b98

08004590 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004596:	f3ef 8305 	mrs	r3, IPSR
 800459a:	603b      	str	r3, [r7, #0]
  return(result);
 800459c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80045a2:	f06f 0305 	mvn.w	r3, #5
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	e010      	b.n	80045cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <osKernelStart+0x48>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d109      	bne.n	80045c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045b2:	f7ff ffbf 	bl	8004534 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <osKernelStart+0x48>)
 80045b8:	2202      	movs	r2, #2
 80045ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045bc:	f001 f866 	bl	800568c <vTaskStartScheduler>
      stat = osOK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	e002      	b.n	80045cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045c6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045cc:	687b      	ldr	r3, [r7, #4]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20001b98 	.word	0x20001b98

080045dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	; 0x38
 80045e0:	af04      	add	r7, sp, #16
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ec:	f3ef 8305 	mrs	r3, IPSR
 80045f0:	617b      	str	r3, [r7, #20]
  return(result);
 80045f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d17e      	bne.n	80046f6 <osThreadNew+0x11a>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d07b      	beq.n	80046f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004602:	2318      	movs	r3, #24
 8004604:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d045      	beq.n	80046a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <osThreadNew+0x48>
        name = attr->name;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <osThreadNew+0x6e>
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b38      	cmp	r3, #56	; 0x38
 800463c:	d805      	bhi.n	800464a <osThreadNew+0x6e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <osThreadNew+0x72>
        return (NULL);
 800464a:	2300      	movs	r3, #0
 800464c:	e054      	b.n	80046f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00e      	beq.n	8004684 <osThreadNew+0xa8>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b5b      	cmp	r3, #91	; 0x5b
 800466c:	d90a      	bls.n	8004684 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004672:	2b00      	cmp	r3, #0
 8004674:	d006      	beq.n	8004684 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <osThreadNew+0xa8>
        mem = 1;
 800467e:	2301      	movs	r3, #1
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	e010      	b.n	80046a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10c      	bne.n	80046a6 <osThreadNew+0xca>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d108      	bne.n	80046a6 <osThreadNew+0xca>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <osThreadNew+0xca>
          mem = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	e001      	b.n	80046a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d110      	bne.n	80046ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046b4:	9202      	str	r2, [sp, #8]
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a3a      	ldr	r2, [r7, #32]
 80046c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fe0c 	bl	80052e0 <xTaskCreateStatic>
 80046c8:	4603      	mov	r3, r0
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	e013      	b.n	80046f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d110      	bne.n	80046f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	f107 0310 	add.w	r3, r7, #16
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fe57 	bl	800539a <xTaskCreate>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d001      	beq.n	80046f6 <osThreadNew+0x11a>
            hTask = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046f6:	693b      	ldr	r3, [r7, #16]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3728      	adds	r7, #40	; 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004708:	f3ef 8305 	mrs	r3, IPSR
 800470c:	60bb      	str	r3, [r7, #8]
  return(result);
 800470e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <osDelay+0x1c>
    stat = osErrorISR;
 8004714:	f06f 0305 	mvn.w	r3, #5
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	e007      	b.n	800472c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 ff7c 	bl	8005624 <vTaskDelay>
    }
  }

  return (stat);
 800472c:	68fb      	ldr	r3, [r7, #12]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a07      	ldr	r2, [pc, #28]	; (8004764 <vApplicationGetIdleTaskMemory+0x2c>)
 8004748:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4a06      	ldr	r2, [pc, #24]	; (8004768 <vApplicationGetIdleTaskMemory+0x30>)
 800474e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2280      	movs	r2, #128	; 0x80
 8004754:	601a      	str	r2, [r3, #0]
}
 8004756:	bf00      	nop
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20001b9c 	.word	0x20001b9c
 8004768:	20001bf8 	.word	0x20001bf8

0800476c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a07      	ldr	r2, [pc, #28]	; (8004798 <vApplicationGetTimerTaskMemory+0x2c>)
 800477c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a06      	ldr	r2, [pc, #24]	; (800479c <vApplicationGetTimerTaskMemory+0x30>)
 8004782:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800478a:	601a      	str	r2, [r3, #0]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	20001df8 	.word	0x20001df8
 800479c:	20001e54 	.word	0x20001e54

080047a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f103 0208 	add.w	r2, r3, #8
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f103 0208 	add.w	r2, r3, #8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f103 0208 	add.w	r2, r3, #8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d103      	bne.n	8004862 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e00c      	b.n	800487c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3308      	adds	r3, #8
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e002      	b.n	8004870 <vListInsert+0x2e>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	d2f6      	bcs.n	800486a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6892      	ldr	r2, [r2, #8]
 80048ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6852      	ldr	r2, [r2, #4]
 80048d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d103      	bne.n	80048e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	1e5a      	subs	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004932:	f002 f84f 	bl	80069d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	441a      	add	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004962:	3b01      	subs	r3, #1
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	441a      	add	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	22ff      	movs	r2, #255	; 0xff
 8004976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d114      	bne.n	80049b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01a      	beq.n	80049c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3310      	adds	r3, #16
 8004994:	4618      	mov	r0, r3
 8004996:	f001 f903 	bl	8005ba0 <xTaskRemoveFromEventList>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d012      	beq.n	80049c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049a0:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <xQueueGenericReset+0xcc>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	e009      	b.n	80049c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3310      	adds	r3, #16
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fef2 	bl	80047a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3324      	adds	r3, #36	; 0x24
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff feed 	bl	80047a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049c6:	f002 f835 	bl	8006a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049ca:	2301      	movs	r3, #1
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	e000ed04 	.word	0xe000ed04

080049d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08e      	sub	sp, #56	; 0x38
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <xQueueGenericCreateStatic+0x52>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <xQueueGenericCreateStatic+0x56>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <xQueueGenericCreateStatic+0x58>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	623b      	str	r3, [r7, #32]
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <xQueueGenericCreateStatic+0x7e>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <xQueueGenericCreateStatic+0x82>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <xQueueGenericCreateStatic+0x84>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	61fb      	str	r3, [r7, #28]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a76:	2350      	movs	r3, #80	; 0x50
 8004a78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b50      	cmp	r3, #80	; 0x50
 8004a7e:	d00a      	beq.n	8004a96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61bb      	str	r3, [r7, #24]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f805 	bl	8004ac8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3730      	adds	r7, #48	; 0x30
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e002      	b.n	8004aea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004af6:	2101      	movs	r1, #1
 8004af8:	69b8      	ldr	r0, [r7, #24]
 8004afa:	f7ff ff05 	bl	8004908 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08e      	sub	sp, #56	; 0x38
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <xQueueGenericSend+0x32>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <xQueueGenericSend+0x40>
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <xQueueGenericSend+0x44>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <xQueueGenericSend+0x46>
 8004b54:	2300      	movs	r3, #0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <xQueueGenericSend+0x60>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d103      	bne.n	8004b7e <xQueueGenericSend+0x6e>
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <xQueueGenericSend+0x72>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <xQueueGenericSend+0x74>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <xQueueGenericSend+0x8e>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	623b      	str	r3, [r7, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b9e:	f001 f9bd 	bl	8005f1c <xTaskGetSchedulerState>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <xQueueGenericSend+0x9e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <xQueueGenericSend+0xa2>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <xQueueGenericSend+0xa4>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <xQueueGenericSend+0xbe>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	61fb      	str	r3, [r7, #28]
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bce:	f001 ff01 	bl	80069d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d302      	bcc.n	8004be4 <xQueueGenericSend+0xd4>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d129      	bne.n	8004c38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bea:	f000 fa0b 	bl	8005004 <prvCopyDataToQueue>
 8004bee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d010      	beq.n	8004c1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	3324      	adds	r3, #36	; 0x24
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 ffcf 	bl	8005ba0 <xTaskRemoveFromEventList>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d013      	beq.n	8004c30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c08:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <xQueueGenericSend+0x1f8>)
 8004c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	e00a      	b.n	8004c30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c20:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <xQueueGenericSend+0x1f8>)
 8004c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c30:	f001 ff00 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e063      	b.n	8004d00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c3e:	f001 fef9 	bl	8006a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e05c      	b.n	8004d00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c4c:	f107 0314 	add.w	r3, r7, #20
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 f809 	bl	8005c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c56:	2301      	movs	r3, #1
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c5a:	f001 feeb 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c5e:	f000 fd7b 	bl	8005758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c62:	f001 feb7 	bl	80069d4 <vPortEnterCritical>
 8004c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c6c:	b25b      	sxtb	r3, r3
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c72:	d103      	bne.n	8004c7c <xQueueGenericSend+0x16c>
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c82:	b25b      	sxtb	r3, r3
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d103      	bne.n	8004c92 <xQueueGenericSend+0x182>
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c92:	f001 fecf 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c96:	1d3a      	adds	r2, r7, #4
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fff8 	bl	8005c94 <xTaskCheckForTimeOut>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d124      	bne.n	8004cf4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cac:	f000 faa2 	bl	80051f4 <prvIsQueueFull>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d018      	beq.n	8004ce8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	3310      	adds	r3, #16
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 ff1e 	bl	8005b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cc6:	f000 fa2d 	bl	8005124 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cca:	f000 fd53 	bl	8005774 <xTaskResumeAll>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f47f af7c 	bne.w	8004bce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <xQueueGenericSend+0x1f8>)
 8004cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	e772      	b.n	8004bce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cea:	f000 fa1b 	bl	8005124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cee:	f000 fd41 	bl	8005774 <xTaskResumeAll>
 8004cf2:	e76c      	b.n	8004bce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf6:	f000 fa15 	bl	8005124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cfa:	f000 fd3b 	bl	8005774 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004cfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3738      	adds	r7, #56	; 0x38
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b090      	sub	sp, #64	; 0x40
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <xQueueGenericSendFromISR+0x3c>
 8004d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <xQueueGenericSendFromISR+0x40>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <xQueueGenericSendFromISR+0x42>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d103      	bne.n	8004d76 <xQueueGenericSendFromISR+0x6a>
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <xQueueGenericSendFromISR+0x6e>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <xQueueGenericSendFromISR+0x70>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	623b      	str	r3, [r7, #32]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d96:	f001 feff 	bl	8006b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d9a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	61fa      	str	r2, [r7, #28]
 8004db0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004db2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <xQueueGenericSendFromISR+0xbc>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d12f      	bne.n	8004e28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004dde:	f000 f911 	bl	8005004 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004de2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d112      	bne.n	8004e12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d016      	beq.n	8004e22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	3324      	adds	r3, #36	; 0x24
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fed1 	bl	8005ba0 <xTaskRemoveFromEventList>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00e      	beq.n	8004e22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e007      	b.n	8004e22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e16:	3301      	adds	r3, #1
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	b25a      	sxtb	r2, r3
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e22:	2301      	movs	r3, #1
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e26:	e001      	b.n	8004e2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3740      	adds	r7, #64	; 0x40
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08c      	sub	sp, #48	; 0x30
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <xQueueReceive+0x30>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	623b      	str	r3, [r7, #32]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d103      	bne.n	8004e82 <xQueueReceive+0x3e>
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <xQueueReceive+0x42>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <xQueueReceive+0x44>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <xQueueReceive+0x5e>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	61fb      	str	r3, [r7, #28]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ea2:	f001 f83b 	bl	8005f1c <xTaskGetSchedulerState>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <xQueueReceive+0x6e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <xQueueReceive+0x72>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <xQueueReceive+0x74>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xQueueReceive+0x8e>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	61bb      	str	r3, [r7, #24]
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ed2:	f001 fd7f 	bl	80069d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01f      	beq.n	8004f22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee6:	f000 f8f7 	bl	80050d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	1e5a      	subs	r2, r3, #1
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00f      	beq.n	8004f1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	3310      	adds	r3, #16
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fe4e 	bl	8005ba0 <xTaskRemoveFromEventList>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f0a:	4b3d      	ldr	r3, [pc, #244]	; (8005000 <xQueueReceive+0x1bc>)
 8004f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f1a:	f001 fd8b 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e069      	b.n	8004ff6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f28:	f001 fd84 	bl	8006a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e062      	b.n	8004ff6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f36:	f107 0310 	add.w	r3, r7, #16
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fe94 	bl	8005c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f44:	f001 fd76 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f48:	f000 fc06 	bl	8005758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f4c:	f001 fd42 	bl	80069d4 <vPortEnterCritical>
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f56:	b25b      	sxtb	r3, r3
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d103      	bne.n	8004f66 <xQueueReceive+0x122>
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f6c:	b25b      	sxtb	r3, r3
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d103      	bne.n	8004f7c <xQueueReceive+0x138>
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f7c:	f001 fd5a 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f80:	1d3a      	adds	r2, r7, #4
 8004f82:	f107 0310 	add.w	r3, r7, #16
 8004f86:	4611      	mov	r1, r2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fe83 	bl	8005c94 <xTaskCheckForTimeOut>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d123      	bne.n	8004fdc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f96:	f000 f917 	bl	80051c8 <prvIsQueueEmpty>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d017      	beq.n	8004fd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	3324      	adds	r3, #36	; 0x24
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fda9 	bl	8005b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb0:	f000 f8b8 	bl	8005124 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fb4:	f000 fbde 	bl	8005774 <xTaskResumeAll>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d189      	bne.n	8004ed2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <xQueueReceive+0x1bc>)
 8004fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	e780      	b.n	8004ed2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd2:	f000 f8a7 	bl	8005124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fd6:	f000 fbcd 	bl	8005774 <xTaskResumeAll>
 8004fda:	e77a      	b.n	8004ed2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fde:	f000 f8a1 	bl	8005124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fe2:	f000 fbc7 	bl	8005774 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe8:	f000 f8ee 	bl	80051c8 <prvIsQueueEmpty>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f43f af6f 	beq.w	8004ed2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ff4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3730      	adds	r7, #48	; 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	e000ed04 	.word	0xe000ed04

08005004 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d14d      	bne.n	80050c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 ff92 	bl	8005f58 <xTaskPriorityDisinherit>
 8005034:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	609a      	str	r2, [r3, #8]
 800503c:	e043      	b.n	80050c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d119      	bne.n	8005078 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6858      	ldr	r0, [r3, #4]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	461a      	mov	r2, r3
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	f001 fffe 	bl	8007050 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	441a      	add	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	d32b      	bcc.n	80050c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	e026      	b.n	80050c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68d8      	ldr	r0, [r3, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	461a      	mov	r2, r3
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	f001 ffe4 	bl	8007050 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	425b      	negs	r3, r3
 8005092:	441a      	add	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d207      	bcs.n	80050b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	425b      	negs	r3, r3
 80050ae:	441a      	add	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d105      	bne.n	80050c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050ce:	697b      	ldr	r3, [r7, #20]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d018      	beq.n	800511c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	441a      	add	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	d303      	bcc.n	800510c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68d9      	ldr	r1, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	461a      	mov	r2, r3
 8005116:	6838      	ldr	r0, [r7, #0]
 8005118:	f001 ff9a 	bl	8007050 <memcpy>
	}
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800512c:	f001 fc52 	bl	80069d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005136:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005138:	e011      	b.n	800515e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d012      	beq.n	8005168 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3324      	adds	r3, #36	; 0x24
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fd2a 	bl	8005ba0 <xTaskRemoveFromEventList>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005152:	f000 fe01 	bl	8005d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	3b01      	subs	r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800515e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	dce9      	bgt.n	800513a <prvUnlockQueue+0x16>
 8005166:	e000      	b.n	800516a <prvUnlockQueue+0x46>
					break;
 8005168:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	22ff      	movs	r2, #255	; 0xff
 800516e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005172:	f001 fc5f 	bl	8006a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005176:	f001 fc2d 	bl	80069d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005180:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005182:	e011      	b.n	80051a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d012      	beq.n	80051b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3310      	adds	r3, #16
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fd05 	bl	8005ba0 <xTaskRemoveFromEventList>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800519c:	f000 fddc 	bl	8005d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051a0:	7bbb      	ldrb	r3, [r7, #14]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dce9      	bgt.n	8005184 <prvUnlockQueue+0x60>
 80051b0:	e000      	b.n	80051b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	22ff      	movs	r2, #255	; 0xff
 80051b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051bc:	f001 fc3a 	bl	8006a34 <vPortExitCritical>
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051d0:	f001 fc00 	bl	80069d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051dc:	2301      	movs	r3, #1
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e001      	b.n	80051e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051e6:	f001 fc25 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 80051ea:	68fb      	ldr	r3, [r7, #12]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051fc:	f001 fbea 	bl	80069d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005208:	429a      	cmp	r2, r3
 800520a:	d102      	bne.n	8005212 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800520c:	2301      	movs	r3, #1
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e001      	b.n	8005216 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005216:	f001 fc0d 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 800521a:	68fb      	ldr	r3, [r7, #12]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e014      	b.n	800525e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005234:	4a0f      	ldr	r2, [pc, #60]	; (8005274 <vQueueAddToRegistry+0x50>)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10b      	bne.n	8005258 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005240:	490c      	ldr	r1, [pc, #48]	; (8005274 <vQueueAddToRegistry+0x50>)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800524a:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <vQueueAddToRegistry+0x50>)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005256:	e006      	b.n	8005266 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b07      	cmp	r3, #7
 8005262:	d9e7      	bls.n	8005234 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20002254 	.word	0x20002254

08005278 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005288:	f001 fba4 	bl	80069d4 <vPortEnterCritical>
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005292:	b25b      	sxtb	r3, r3
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d103      	bne.n	80052a2 <vQueueWaitForMessageRestricted+0x2a>
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052a8:	b25b      	sxtb	r3, r3
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ae:	d103      	bne.n	80052b8 <vQueueWaitForMessageRestricted+0x40>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b8:	f001 fbbc 	bl	8006a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	3324      	adds	r3, #36	; 0x24
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fc3b 	bl	8005b48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052d2:	6978      	ldr	r0, [r7, #20]
 80052d4:	f7ff ff26 	bl	8005124 <prvUnlockQueue>
	}
 80052d8:	bf00      	nop
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08e      	sub	sp, #56	; 0x38
 80052e4:	af04      	add	r7, sp, #16
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <xTaskCreateStatic+0x2a>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	623b      	str	r3, [r7, #32]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <xTaskCreateStatic+0x46>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	61fb      	str	r3, [r7, #28]
}
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005326:	235c      	movs	r3, #92	; 0x5c
 8005328:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b5c      	cmp	r3, #92	; 0x5c
 800532e:	d00a      	beq.n	8005346 <xTaskCreateStatic+0x66>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	61bb      	str	r3, [r7, #24]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005346:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01e      	beq.n	800538c <xTaskCreateStatic+0xac>
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01b      	beq.n	800538c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800535c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	2202      	movs	r2, #2
 8005362:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005366:	2300      	movs	r3, #0
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	f107 0314 	add.w	r3, r7, #20
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f850 	bl	8005424 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005386:	f000 f8dd 	bl	8005544 <prvAddNewTaskToReadyList>
 800538a:	e001      	b.n	8005390 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005390:	697b      	ldr	r3, [r7, #20]
	}
 8005392:	4618      	mov	r0, r3
 8005394:	3728      	adds	r7, #40	; 0x28
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800539a:	b580      	push	{r7, lr}
 800539c:	b08c      	sub	sp, #48	; 0x30
 800539e:	af04      	add	r7, sp, #16
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 fc32 	bl	8006c18 <pvPortMalloc>
 80053b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00e      	beq.n	80053da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053bc:	205c      	movs	r0, #92	; 0x5c
 80053be:	f001 fc2b 	bl	8006c18 <pvPortMalloc>
 80053c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
 80053d0:	e005      	b.n	80053de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053d2:	6978      	ldr	r0, [r7, #20]
 80053d4:	f001 fcec 	bl	8006db0 <vPortFree>
 80053d8:	e001      	b.n	80053de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d017      	beq.n	8005414 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053ec:	88fa      	ldrh	r2, [r7, #6]
 80053ee:	2300      	movs	r3, #0
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	9302      	str	r3, [sp, #8]
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f80e 	bl	8005424 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005408:	69f8      	ldr	r0, [r7, #28]
 800540a:	f000 f89b 	bl	8005544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800540e:	2301      	movs	r3, #1
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e002      	b.n	800541a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005414:	f04f 33ff 	mov.w	r3, #4294967295
 8005418:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800541a:	69bb      	ldr	r3, [r7, #24]
	}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	461a      	mov	r2, r3
 800543c:	21a5      	movs	r1, #165	; 0xa5
 800543e:	f001 fe15 	bl	800706c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800544c:	3b01      	subs	r3, #1
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f023 0307 	bic.w	r3, r3, #7
 800545a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	617b      	str	r3, [r7, #20]
}
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01f      	beq.n	80054c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	e012      	b.n	80054ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	7819      	ldrb	r1, [r3, #0]
 8005490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	3334      	adds	r3, #52	; 0x34
 8005498:	460a      	mov	r2, r1
 800549a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d006      	beq.n	80054b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d9e9      	bls.n	8005488 <prvInitialiseNewTask+0x64>
 80054b4:	e000      	b.n	80054b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80054b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054c0:	e003      	b.n	80054ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	2b37      	cmp	r3, #55	; 0x37
 80054ce:	d901      	bls.n	80054d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054d0:	2337      	movs	r3, #55	; 0x37
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	2200      	movs	r2, #0
 80054e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff f978 	bl	80047e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	3318      	adds	r3, #24
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff f973 	bl	80047e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	2200      	movs	r2, #0
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	69b8      	ldr	r0, [r7, #24]
 8005524:	f001 f928 	bl	8006778 <pxPortInitialiseStack>
 8005528:	4602      	mov	r2, r0
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800553a:	bf00      	nop
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800554c:	f001 fa42 	bl	80069d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005550:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <prvAddNewTaskToReadyList+0xc4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a2c      	ldr	r2, [pc, #176]	; (8005608 <prvAddNewTaskToReadyList+0xc4>)
 8005558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800555a:	4b2c      	ldr	r3, [pc, #176]	; (800560c <prvAddNewTaskToReadyList+0xc8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005562:	4a2a      	ldr	r2, [pc, #168]	; (800560c <prvAddNewTaskToReadyList+0xc8>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005568:	4b27      	ldr	r3, [pc, #156]	; (8005608 <prvAddNewTaskToReadyList+0xc4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d110      	bne.n	8005592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005570:	f000 fc16 	bl	8005da0 <prvInitialiseTaskLists>
 8005574:	e00d      	b.n	8005592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005576:	4b26      	ldr	r3, [pc, #152]	; (8005610 <prvAddNewTaskToReadyList+0xcc>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800557e:	4b23      	ldr	r3, [pc, #140]	; (800560c <prvAddNewTaskToReadyList+0xc8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	429a      	cmp	r2, r3
 800558a:	d802      	bhi.n	8005592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800558c:	4a1f      	ldr	r2, [pc, #124]	; (800560c <prvAddNewTaskToReadyList+0xc8>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005592:	4b20      	ldr	r3, [pc, #128]	; (8005614 <prvAddNewTaskToReadyList+0xd0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3301      	adds	r3, #1
 8005598:	4a1e      	ldr	r2, [pc, #120]	; (8005614 <prvAddNewTaskToReadyList+0xd0>)
 800559a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800559c:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <prvAddNewTaskToReadyList+0xd0>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <prvAddNewTaskToReadyList+0xd4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d903      	bls.n	80055b8 <prvAddNewTaskToReadyList+0x74>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <prvAddNewTaskToReadyList+0xd4>)
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <prvAddNewTaskToReadyList+0xd8>)
 80055c6:	441a      	add	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f7ff f913 	bl	80047fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055d4:	f001 fa2e 	bl	8006a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <prvAddNewTaskToReadyList+0xcc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00e      	beq.n	80055fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <prvAddNewTaskToReadyList+0xc8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d207      	bcs.n	80055fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055ee:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <prvAddNewTaskToReadyList+0xdc>)
 80055f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055fe:	bf00      	nop
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20002768 	.word	0x20002768
 800560c:	20002294 	.word	0x20002294
 8005610:	20002774 	.word	0x20002774
 8005614:	20002784 	.word	0x20002784
 8005618:	20002770 	.word	0x20002770
 800561c:	20002298 	.word	0x20002298
 8005620:	e000ed04 	.word	0xe000ed04

08005624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d017      	beq.n	8005666 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <vTaskDelay+0x60>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <vTaskDelay+0x30>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	60bb      	str	r3, [r7, #8]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005654:	f000 f880 	bl	8005758 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005658:	2100      	movs	r1, #0
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fcea 	bl	8006034 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005660:	f000 f888 	bl	8005774 <xTaskResumeAll>
 8005664:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d107      	bne.n	800567c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <vTaskDelay+0x64>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20002790 	.word	0x20002790
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800569a:	463a      	mov	r2, r7
 800569c:	1d39      	adds	r1, r7, #4
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff f848 	bl	8004738 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	9202      	str	r2, [sp, #8]
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	2300      	movs	r3, #0
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	2300      	movs	r3, #0
 80056b8:	460a      	mov	r2, r1
 80056ba:	4921      	ldr	r1, [pc, #132]	; (8005740 <vTaskStartScheduler+0xb4>)
 80056bc:	4821      	ldr	r0, [pc, #132]	; (8005744 <vTaskStartScheduler+0xb8>)
 80056be:	f7ff fe0f 	bl	80052e0 <xTaskCreateStatic>
 80056c2:	4603      	mov	r3, r0
 80056c4:	4a20      	ldr	r2, [pc, #128]	; (8005748 <vTaskStartScheduler+0xbc>)
 80056c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056c8:	4b1f      	ldr	r3, [pc, #124]	; (8005748 <vTaskStartScheduler+0xbc>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056d0:	2301      	movs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e001      	b.n	80056da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d102      	bne.n	80056e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056e0:	f000 fcfc 	bl	80060dc <xTimerCreateTimerTask>
 80056e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d116      	bne.n	800571a <vTaskStartScheduler+0x8e>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	613b      	str	r3, [r7, #16]
}
 80056fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005700:	4b12      	ldr	r3, [pc, #72]	; (800574c <vTaskStartScheduler+0xc0>)
 8005702:	f04f 32ff 	mov.w	r2, #4294967295
 8005706:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005708:	4b11      	ldr	r3, [pc, #68]	; (8005750 <vTaskStartScheduler+0xc4>)
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <vTaskStartScheduler+0xc8>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005714:	f001 f8bc 	bl	8006890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005718:	e00e      	b.n	8005738 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d10a      	bne.n	8005738 <vTaskStartScheduler+0xac>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	60fb      	str	r3, [r7, #12]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <vTaskStartScheduler+0xaa>
}
 8005738:	bf00      	nop
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	080084b8 	.word	0x080084b8
 8005744:	08005d71 	.word	0x08005d71
 8005748:	2000278c 	.word	0x2000278c
 800574c:	20002788 	.word	0x20002788
 8005750:	20002774 	.word	0x20002774
 8005754:	2000276c 	.word	0x2000276c

08005758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800575c:	4b04      	ldr	r3, [pc, #16]	; (8005770 <vTaskSuspendAll+0x18>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3301      	adds	r3, #1
 8005762:	4a03      	ldr	r2, [pc, #12]	; (8005770 <vTaskSuspendAll+0x18>)
 8005764:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005766:	bf00      	nop
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	20002790 	.word	0x20002790

08005774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005782:	4b42      	ldr	r3, [pc, #264]	; (800588c <xTaskResumeAll+0x118>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	603b      	str	r3, [r7, #0]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057a0:	f001 f918 	bl	80069d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057a4:	4b39      	ldr	r3, [pc, #228]	; (800588c <xTaskResumeAll+0x118>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	4a38      	ldr	r2, [pc, #224]	; (800588c <xTaskResumeAll+0x118>)
 80057ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ae:	4b37      	ldr	r3, [pc, #220]	; (800588c <xTaskResumeAll+0x118>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d162      	bne.n	800587c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057b6:	4b36      	ldr	r3, [pc, #216]	; (8005890 <xTaskResumeAll+0x11c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d05e      	beq.n	800587c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057be:	e02f      	b.n	8005820 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c0:	4b34      	ldr	r3, [pc, #208]	; (8005894 <xTaskResumeAll+0x120>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3318      	adds	r3, #24
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff f871 	bl	80048b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff f86c 	bl	80048b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	4b2d      	ldr	r3, [pc, #180]	; (8005898 <xTaskResumeAll+0x124>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d903      	bls.n	80057f0 <xTaskResumeAll+0x7c>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	4a2a      	ldr	r2, [pc, #168]	; (8005898 <xTaskResumeAll+0x124>)
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4a27      	ldr	r2, [pc, #156]	; (800589c <xTaskResumeAll+0x128>)
 80057fe:	441a      	add	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7fe fff7 	bl	80047fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4b23      	ldr	r3, [pc, #140]	; (80058a0 <xTaskResumeAll+0x12c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800581a:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <xTaskResumeAll+0x130>)
 800581c:	2201      	movs	r2, #1
 800581e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005820:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <xTaskResumeAll+0x120>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1cb      	bne.n	80057c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800582e:	f000 fb55 	bl	8005edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005832:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <xTaskResumeAll+0x134>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800583e:	f000 f847 	bl	80058d0 <xTaskIncrementTick>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005848:	4b16      	ldr	r3, [pc, #88]	; (80058a4 <xTaskResumeAll+0x130>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3b01      	subs	r3, #1
 8005852:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f1      	bne.n	800583e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800585a:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <xTaskResumeAll+0x134>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005860:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <xTaskResumeAll+0x130>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d009      	beq.n	800587c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <xTaskResumeAll+0x138>)
 800586e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800587c:	f001 f8da 	bl	8006a34 <vPortExitCritical>

	return xAlreadyYielded;
 8005880:	68bb      	ldr	r3, [r7, #8]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20002790 	.word	0x20002790
 8005890:	20002768 	.word	0x20002768
 8005894:	20002728 	.word	0x20002728
 8005898:	20002770 	.word	0x20002770
 800589c:	20002298 	.word	0x20002298
 80058a0:	20002294 	.word	0x20002294
 80058a4:	2000277c 	.word	0x2000277c
 80058a8:	20002778 	.word	0x20002778
 80058ac:	e000ed04 	.word	0xe000ed04

080058b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <xTaskGetTickCount+0x1c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058bc:	687b      	ldr	r3, [r7, #4]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	2000276c 	.word	0x2000276c

080058d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058da:	4b4f      	ldr	r3, [pc, #316]	; (8005a18 <xTaskIncrementTick+0x148>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f040 808f 	bne.w	8005a02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058e4:	4b4d      	ldr	r3, [pc, #308]	; (8005a1c <xTaskIncrementTick+0x14c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058ec:	4a4b      	ldr	r2, [pc, #300]	; (8005a1c <xTaskIncrementTick+0x14c>)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d120      	bne.n	800593a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058f8:	4b49      	ldr	r3, [pc, #292]	; (8005a20 <xTaskIncrementTick+0x150>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <xTaskIncrementTick+0x48>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	603b      	str	r3, [r7, #0]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <xTaskIncrementTick+0x46>
 8005918:	4b41      	ldr	r3, [pc, #260]	; (8005a20 <xTaskIncrementTick+0x150>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	4b41      	ldr	r3, [pc, #260]	; (8005a24 <xTaskIncrementTick+0x154>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a3f      	ldr	r2, [pc, #252]	; (8005a20 <xTaskIncrementTick+0x150>)
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	4a3f      	ldr	r2, [pc, #252]	; (8005a24 <xTaskIncrementTick+0x154>)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	4b3e      	ldr	r3, [pc, #248]	; (8005a28 <xTaskIncrementTick+0x158>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	4a3d      	ldr	r2, [pc, #244]	; (8005a28 <xTaskIncrementTick+0x158>)
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	f000 fad1 	bl	8005edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800593a:	4b3c      	ldr	r3, [pc, #240]	; (8005a2c <xTaskIncrementTick+0x15c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	429a      	cmp	r2, r3
 8005942:	d349      	bcc.n	80059d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005944:	4b36      	ldr	r3, [pc, #216]	; (8005a20 <xTaskIncrementTick+0x150>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d104      	bne.n	8005958 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800594e:	4b37      	ldr	r3, [pc, #220]	; (8005a2c <xTaskIncrementTick+0x15c>)
 8005950:	f04f 32ff 	mov.w	r2, #4294967295
 8005954:	601a      	str	r2, [r3, #0]
					break;
 8005956:	e03f      	b.n	80059d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005958:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <xTaskIncrementTick+0x150>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	429a      	cmp	r2, r3
 800596e:	d203      	bcs.n	8005978 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005970:	4a2e      	ldr	r2, [pc, #184]	; (8005a2c <xTaskIncrementTick+0x15c>)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005976:	e02f      	b.n	80059d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	3304      	adds	r3, #4
 800597c:	4618      	mov	r0, r3
 800597e:	f7fe ff99 	bl	80048b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3318      	adds	r3, #24
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe ff90 	bl	80048b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005998:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <xTaskIncrementTick+0x160>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d903      	bls.n	80059a8 <xTaskIncrementTick+0xd8>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <xTaskIncrementTick+0x160>)
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4a1f      	ldr	r2, [pc, #124]	; (8005a34 <xTaskIncrementTick+0x164>)
 80059b6:	441a      	add	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f7fe ff1b 	bl	80047fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c8:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <xTaskIncrementTick+0x168>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d3b8      	bcc.n	8005944 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059d2:	2301      	movs	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059d6:	e7b5      	b.n	8005944 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059d8:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <xTaskIncrementTick+0x168>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059de:	4915      	ldr	r1, [pc, #84]	; (8005a34 <xTaskIncrementTick+0x164>)
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d901      	bls.n	80059f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059f0:	2301      	movs	r3, #1
 80059f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059f4:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <xTaskIncrementTick+0x16c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e004      	b.n	8005a0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a02:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <xTaskIncrementTick+0x170>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	4a0d      	ldr	r2, [pc, #52]	; (8005a40 <xTaskIncrementTick+0x170>)
 8005a0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a0c:	697b      	ldr	r3, [r7, #20]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20002790 	.word	0x20002790
 8005a1c:	2000276c 	.word	0x2000276c
 8005a20:	20002720 	.word	0x20002720
 8005a24:	20002724 	.word	0x20002724
 8005a28:	20002780 	.word	0x20002780
 8005a2c:	20002788 	.word	0x20002788
 8005a30:	20002770 	.word	0x20002770
 8005a34:	20002298 	.word	0x20002298
 8005a38:	20002294 	.word	0x20002294
 8005a3c:	2000277c 	.word	0x2000277c
 8005a40:	20002778 	.word	0x20002778

08005a44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a4a:	4b28      	ldr	r3, [pc, #160]	; (8005aec <vTaskSwitchContext+0xa8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a52:	4b27      	ldr	r3, [pc, #156]	; (8005af0 <vTaskSwitchContext+0xac>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a58:	e041      	b.n	8005ade <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005a5a:	4b25      	ldr	r3, [pc, #148]	; (8005af0 <vTaskSwitchContext+0xac>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a60:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <vTaskSwitchContext+0xb0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	e010      	b.n	8005a8a <vTaskSwitchContext+0x46>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	607b      	str	r3, [r7, #4]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <vTaskSwitchContext+0x3e>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	491b      	ldr	r1, [pc, #108]	; (8005af8 <vTaskSwitchContext+0xb4>)
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0e4      	beq.n	8005a68 <vTaskSwitchContext+0x24>
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4a13      	ldr	r2, [pc, #76]	; (8005af8 <vTaskSwitchContext+0xb4>)
 8005aaa:	4413      	add	r3, r2
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d104      	bne.n	8005ace <vTaskSwitchContext+0x8a>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	605a      	str	r2, [r3, #4]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4a09      	ldr	r2, [pc, #36]	; (8005afc <vTaskSwitchContext+0xb8>)
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	4a06      	ldr	r2, [pc, #24]	; (8005af4 <vTaskSwitchContext+0xb0>)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6013      	str	r3, [r2, #0]
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20002790 	.word	0x20002790
 8005af0:	2000277c 	.word	0x2000277c
 8005af4:	20002770 	.word	0x20002770
 8005af8:	20002298 	.word	0x20002298
 8005afc:	20002294 	.word	0x20002294

08005b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	60fb      	str	r3, [r7, #12]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b26:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <vTaskPlaceOnEventList+0x44>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3318      	adds	r3, #24
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fe fe87 	bl	8004842 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b34:	2101      	movs	r1, #1
 8005b36:	6838      	ldr	r0, [r7, #0]
 8005b38:	f000 fa7c 	bl	8006034 <prvAddCurrentTaskToDelayedList>
}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20002294 	.word	0x20002294

08005b48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10a      	bne.n	8005b70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	617b      	str	r3, [r7, #20]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <vTaskPlaceOnEventListRestricted+0x54>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3318      	adds	r3, #24
 8005b76:	4619      	mov	r1, r3
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7fe fe3e 	bl	80047fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b84:	f04f 33ff 	mov.w	r3, #4294967295
 8005b88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	68b8      	ldr	r0, [r7, #8]
 8005b8e:	f000 fa51 	bl	8006034 <prvAddCurrentTaskToDelayedList>
	}
 8005b92:	bf00      	nop
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20002294 	.word	0x20002294

08005ba0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	60fb      	str	r3, [r7, #12]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	3318      	adds	r3, #24
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe fe6f 	bl	80048b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bd6:	4b1e      	ldr	r3, [pc, #120]	; (8005c50 <xTaskRemoveFromEventList+0xb0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d11d      	bne.n	8005c1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fe66 	bl	80048b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bec:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <xTaskRemoveFromEventList+0xb4>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d903      	bls.n	8005bfc <xTaskRemoveFromEventList+0x5c>
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	4a16      	ldr	r2, [pc, #88]	; (8005c54 <xTaskRemoveFromEventList+0xb4>)
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4a13      	ldr	r2, [pc, #76]	; (8005c58 <xTaskRemoveFromEventList+0xb8>)
 8005c0a:	441a      	add	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f7fe fdf1 	bl	80047fa <vListInsertEnd>
 8005c18:	e005      	b.n	8005c26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	4619      	mov	r1, r3
 8005c20:	480e      	ldr	r0, [pc, #56]	; (8005c5c <xTaskRemoveFromEventList+0xbc>)
 8005c22:	f7fe fdea 	bl	80047fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <xTaskRemoveFromEventList+0xc0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d905      	bls.n	8005c40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c38:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <xTaskRemoveFromEventList+0xc4>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e001      	b.n	8005c44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c44:	697b      	ldr	r3, [r7, #20]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20002790 	.word	0x20002790
 8005c54:	20002770 	.word	0x20002770
 8005c58:	20002298 	.word	0x20002298
 8005c5c:	20002728 	.word	0x20002728
 8005c60:	20002294 	.word	0x20002294
 8005c64:	2000277c 	.word	0x2000277c

08005c68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c70:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <vTaskInternalSetTimeOutState+0x24>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <vTaskInternalSetTimeOutState+0x28>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	605a      	str	r2, [r3, #4]
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	20002780 	.word	0x20002780
 8005c90:	2000276c 	.word	0x2000276c

08005c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	613b      	str	r3, [r7, #16]
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60fb      	str	r3, [r7, #12]
}
 8005cd2:	bf00      	nop
 8005cd4:	e7fe      	b.n	8005cd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cd6:	f000 fe7d 	bl	80069d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cda:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <xTaskCheckForTimeOut+0xbc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d102      	bne.n	8005cfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e023      	b.n	8005d42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <xTaskCheckForTimeOut+0xc0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d007      	beq.n	8005d16 <xTaskCheckForTimeOut+0x82>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d302      	bcc.n	8005d16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	e015      	b.n	8005d42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d20b      	bcs.n	8005d38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ff9b 	bl	8005c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e004      	b.n	8005d42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d42:	f000 fe77 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 8005d46:	69fb      	ldr	r3, [r7, #28]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	2000276c 	.word	0x2000276c
 8005d54:	20002780 	.word	0x20002780

08005d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <vTaskMissedYield+0x14>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
}
 8005d62:	bf00      	nop
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	2000277c 	.word	0x2000277c

08005d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d78:	f000 f852 	bl	8005e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <prvIdleTask+0x28>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d9f9      	bls.n	8005d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <prvIdleTask+0x2c>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d94:	e7f0      	b.n	8005d78 <prvIdleTask+0x8>
 8005d96:	bf00      	nop
 8005d98:	20002298 	.word	0x20002298
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005da6:	2300      	movs	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
 8005daa:	e00c      	b.n	8005dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <prvInitialiseTaskLists+0x60>)
 8005db8:	4413      	add	r3, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe fcf0 	bl	80047a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b37      	cmp	r3, #55	; 0x37
 8005dca:	d9ef      	bls.n	8005dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dcc:	480d      	ldr	r0, [pc, #52]	; (8005e04 <prvInitialiseTaskLists+0x64>)
 8005dce:	f7fe fce7 	bl	80047a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dd2:	480d      	ldr	r0, [pc, #52]	; (8005e08 <prvInitialiseTaskLists+0x68>)
 8005dd4:	f7fe fce4 	bl	80047a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dd8:	480c      	ldr	r0, [pc, #48]	; (8005e0c <prvInitialiseTaskLists+0x6c>)
 8005dda:	f7fe fce1 	bl	80047a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dde:	480c      	ldr	r0, [pc, #48]	; (8005e10 <prvInitialiseTaskLists+0x70>)
 8005de0:	f7fe fcde 	bl	80047a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005de4:	480b      	ldr	r0, [pc, #44]	; (8005e14 <prvInitialiseTaskLists+0x74>)
 8005de6:	f7fe fcdb 	bl	80047a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <prvInitialiseTaskLists+0x78>)
 8005dec:	4a05      	ldr	r2, [pc, #20]	; (8005e04 <prvInitialiseTaskLists+0x64>)
 8005dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005df0:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <prvInitialiseTaskLists+0x7c>)
 8005df2:	4a05      	ldr	r2, [pc, #20]	; (8005e08 <prvInitialiseTaskLists+0x68>)
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20002298 	.word	0x20002298
 8005e04:	200026f8 	.word	0x200026f8
 8005e08:	2000270c 	.word	0x2000270c
 8005e0c:	20002728 	.word	0x20002728
 8005e10:	2000273c 	.word	0x2000273c
 8005e14:	20002754 	.word	0x20002754
 8005e18:	20002720 	.word	0x20002720
 8005e1c:	20002724 	.word	0x20002724

08005e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e26:	e019      	b.n	8005e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e28:	f000 fdd4 	bl	80069d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2c:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <prvCheckTasksWaitingTermination+0x50>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fd3b 	bl	80048b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e3e:	4b0d      	ldr	r3, [pc, #52]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	4a0b      	ldr	r2, [pc, #44]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e48:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <prvCheckTasksWaitingTermination+0x58>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <prvCheckTasksWaitingTermination+0x58>)
 8005e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e52:	f000 fdef 	bl	8006a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f810 	bl	8005e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e5c:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <prvCheckTasksWaitingTermination+0x58>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e1      	bne.n	8005e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	2000273c 	.word	0x2000273c
 8005e74:	20002768 	.word	0x20002768
 8005e78:	20002750 	.word	0x20002750

08005e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d108      	bne.n	8005ea0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 ff8c 	bl	8006db0 <vPortFree>
				vPortFree( pxTCB );
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 ff89 	bl	8006db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e9e:	e018      	b.n	8005ed2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d103      	bne.n	8005eb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 ff80 	bl	8006db0 <vPortFree>
	}
 8005eb0:	e00f      	b.n	8005ed2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d00a      	beq.n	8005ed2 <prvDeleteTCB+0x56>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	60fb      	str	r3, [r7, #12]
}
 8005ece:	bf00      	nop
 8005ed0:	e7fe      	b.n	8005ed0 <prvDeleteTCB+0x54>
	}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee2:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <prvResetNextTaskUnblockTime+0x38>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <prvResetNextTaskUnblockTime+0x3c>)
 8005eee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ef4:	e008      	b.n	8005f08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ef6:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <prvResetNextTaskUnblockTime+0x38>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <prvResetNextTaskUnblockTime+0x3c>)
 8005f06:	6013      	str	r3, [r2, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	20002720 	.word	0x20002720
 8005f18:	20002788 	.word	0x20002788

08005f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f22:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <xTaskGetSchedulerState+0x34>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	e008      	b.n	8005f42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f30:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <xTaskGetSchedulerState+0x38>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f38:	2302      	movs	r3, #2
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	e001      	b.n	8005f42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f42:	687b      	ldr	r3, [r7, #4]
	}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20002774 	.word	0x20002774
 8005f54:	20002790 	.word	0x20002790

08005f58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d056      	beq.n	800601c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <xTaskPriorityDisinherit+0xd0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d00a      	beq.n	8005f8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60fb      	str	r3, [r7, #12]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	60bb      	str	r3, [r7, #8]
}
 8005fa8:	bf00      	nop
 8005faa:	e7fe      	b.n	8005faa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb0:	1e5a      	subs	r2, r3, #1
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d02c      	beq.n	800601c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d128      	bne.n	800601c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe fc70 	bl	80048b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fec:	4b0f      	ldr	r3, [pc, #60]	; (800602c <xTaskPriorityDisinherit+0xd4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d903      	bls.n	8005ffc <xTaskPriorityDisinherit+0xa4>
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	; (800602c <xTaskPriorityDisinherit+0xd4>)
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <xTaskPriorityDisinherit+0xd8>)
 800600a:	441a      	add	r2, r3
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f7fe fbf1 	bl	80047fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800601c:	697b      	ldr	r3, [r7, #20]
	}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20002294 	.word	0x20002294
 800602c:	20002770 	.word	0x20002770
 8006030:	20002298 	.word	0x20002298

08006034 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800603e:	4b21      	ldr	r3, [pc, #132]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006044:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3304      	adds	r3, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fc32 	bl	80048b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006056:	d10a      	bne.n	800606e <prvAddCurrentTaskToDelayedList+0x3a>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800605e:	4b1a      	ldr	r3, [pc, #104]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4819      	ldr	r0, [pc, #100]	; (80060cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006068:	f7fe fbc7 	bl	80047fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800606c:	e026      	b.n	80060bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4413      	add	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	429a      	cmp	r2, r3
 8006084:	d209      	bcs.n	800609a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006086:	4b12      	ldr	r3, [pc, #72]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3304      	adds	r3, #4
 8006090:	4619      	mov	r1, r3
 8006092:	4610      	mov	r0, r2
 8006094:	f7fe fbd5 	bl	8004842 <vListInsert>
}
 8006098:	e010      	b.n	80060bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800609a:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fe fbcb 	bl	8004842 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d202      	bcs.n	80060bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060b6:	4a08      	ldr	r2, [pc, #32]	; (80060d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	6013      	str	r3, [r2, #0]
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	2000276c 	.word	0x2000276c
 80060c8:	20002294 	.word	0x20002294
 80060cc:	20002754 	.word	0x20002754
 80060d0:	20002724 	.word	0x20002724
 80060d4:	20002720 	.word	0x20002720
 80060d8:	20002788 	.word	0x20002788

080060dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	; 0x28
 80060e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060e6:	f000 fb07 	bl	80066f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060ea:	4b1c      	ldr	r3, [pc, #112]	; (800615c <xTimerCreateTimerTask+0x80>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d021      	beq.n	8006136 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060fa:	1d3a      	adds	r2, r7, #4
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	f107 030c 	add.w	r3, r7, #12
 8006104:	4618      	mov	r0, r3
 8006106:	f7fe fb31 	bl	800476c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	9202      	str	r2, [sp, #8]
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	2302      	movs	r3, #2
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2300      	movs	r3, #0
 800611a:	460a      	mov	r2, r1
 800611c:	4910      	ldr	r1, [pc, #64]	; (8006160 <xTimerCreateTimerTask+0x84>)
 800611e:	4811      	ldr	r0, [pc, #68]	; (8006164 <xTimerCreateTimerTask+0x88>)
 8006120:	f7ff f8de 	bl	80052e0 <xTaskCreateStatic>
 8006124:	4603      	mov	r3, r0
 8006126:	4a10      	ldr	r2, [pc, #64]	; (8006168 <xTimerCreateTimerTask+0x8c>)
 8006128:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <xTimerCreateTimerTask+0x8c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006132:	2301      	movs	r3, #1
 8006134:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	613b      	str	r3, [r7, #16]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006152:	697b      	ldr	r3, [r7, #20]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200027c4 	.word	0x200027c4
 8006160:	080084c0 	.word	0x080084c0
 8006164:	080062a1 	.word	0x080062a1
 8006168:	200027c8 	.word	0x200027c8

0800616c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800617a:	2300      	movs	r3, #0
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	623b      	str	r3, [r7, #32]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800619a:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <xTimerGenericCommand+0x98>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d02a      	beq.n	80061f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	dc18      	bgt.n	80061e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061b4:	f7ff feb2 	bl	8005f1c <xTaskGetSchedulerState>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d109      	bne.n	80061d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <xTimerGenericCommand+0x98>)
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f107 0110 	add.w	r1, r7, #16
 80061c6:	2300      	movs	r3, #0
 80061c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ca:	f7fe fca1 	bl	8004b10 <xQueueGenericSend>
 80061ce:	6278      	str	r0, [r7, #36]	; 0x24
 80061d0:	e012      	b.n	80061f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061d2:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <xTimerGenericCommand+0x98>)
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	f107 0110 	add.w	r1, r7, #16
 80061da:	2300      	movs	r3, #0
 80061dc:	2200      	movs	r2, #0
 80061de:	f7fe fc97 	bl	8004b10 <xQueueGenericSend>
 80061e2:	6278      	str	r0, [r7, #36]	; 0x24
 80061e4:	e008      	b.n	80061f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061e6:	4b07      	ldr	r3, [pc, #28]	; (8006204 <xTimerGenericCommand+0x98>)
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	f107 0110 	add.w	r1, r7, #16
 80061ee:	2300      	movs	r3, #0
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	f7fe fd8b 	bl	8004d0c <xQueueGenericSendFromISR>
 80061f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3728      	adds	r7, #40	; 0x28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	200027c4 	.word	0x200027c4

08006208 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af02      	add	r7, sp, #8
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006212:	4b22      	ldr	r3, [pc, #136]	; (800629c <prvProcessExpiredTimer+0x94>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	3304      	adds	r3, #4
 8006220:	4618      	mov	r0, r3
 8006222:	f7fe fb47 	bl	80048b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d022      	beq.n	800627a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	18d1      	adds	r1, r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	6978      	ldr	r0, [r7, #20]
 8006242:	f000 f8d1 	bl	80063e8 <prvInsertTimerInActiveList>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01f      	beq.n	800628c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800624c:	2300      	movs	r3, #0
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	2300      	movs	r3, #0
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	2100      	movs	r1, #0
 8006256:	6978      	ldr	r0, [r7, #20]
 8006258:	f7ff ff88 	bl	800616c <xTimerGenericCommand>
 800625c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d113      	bne.n	800628c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	60fb      	str	r3, [r7, #12]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	b2da      	uxtb	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	6978      	ldr	r0, [r7, #20]
 8006292:	4798      	blx	r3
}
 8006294:	bf00      	nop
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	200027bc 	.word	0x200027bc

080062a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062a8:	f107 0308 	add.w	r3, r7, #8
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f857 	bl	8006360 <prvGetNextExpireTime>
 80062b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4619      	mov	r1, r3
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f803 	bl	80062c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062be:	f000 f8d5 	bl	800646c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062c2:	e7f1      	b.n	80062a8 <prvTimerTask+0x8>

080062c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062ce:	f7ff fa43 	bl	8005758 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f866 	bl	80063a8 <prvSampleTimeNow>
 80062dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d130      	bne.n	8006346 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <prvProcessTimerOrBlockTask+0x3c>
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d806      	bhi.n	8006300 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062f2:	f7ff fa3f 	bl	8005774 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ff85 	bl	8006208 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062fe:	e024      	b.n	800634a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <prvProcessTimerOrBlockTask+0x90>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <prvProcessTimerOrBlockTask+0x50>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <prvProcessTimerOrBlockTask+0x52>
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <prvProcessTimerOrBlockTask+0x94>)
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	4619      	mov	r1, r3
 8006326:	f7fe ffa7 	bl	8005278 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800632a:	f7ff fa23 	bl	8005774 <xTaskResumeAll>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006334:	4b09      	ldr	r3, [pc, #36]	; (800635c <prvProcessTimerOrBlockTask+0x98>)
 8006336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	f3bf 8f6f 	isb	sy
}
 8006344:	e001      	b.n	800634a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006346:	f7ff fa15 	bl	8005774 <xTaskResumeAll>
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	200027c0 	.word	0x200027c0
 8006358:	200027c4 	.word	0x200027c4
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006368:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <prvGetNextExpireTime+0x44>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <prvGetNextExpireTime+0x16>
 8006372:	2201      	movs	r2, #1
 8006374:	e000      	b.n	8006378 <prvGetNextExpireTime+0x18>
 8006376:	2200      	movs	r2, #0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <prvGetNextExpireTime+0x44>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e001      	b.n	8006394 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006394:	68fb      	ldr	r3, [r7, #12]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	200027bc 	.word	0x200027bc

080063a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063b0:	f7ff fa7e 	bl	80058b0 <xTaskGetTickCount>
 80063b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <prvSampleTimeNow+0x3c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d205      	bcs.n	80063cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063c0:	f000 f936 	bl	8006630 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063d2:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <prvSampleTimeNow+0x3c>)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063d8:	68fb      	ldr	r3, [r7, #12]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	200027cc 	.word	0x200027cc

080063e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	429a      	cmp	r2, r3
 800640c:	d812      	bhi.n	8006434 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e01b      	b.n	800645a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006422:	4b10      	ldr	r3, [pc, #64]	; (8006464 <prvInsertTimerInActiveList+0x7c>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3304      	adds	r3, #4
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f7fe fa08 	bl	8004842 <vListInsert>
 8006432:	e012      	b.n	800645a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d206      	bcs.n	800644a <prvInsertTimerInActiveList+0x62>
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d302      	bcc.n	800644a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006444:	2301      	movs	r3, #1
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e007      	b.n	800645a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800644a:	4b07      	ldr	r3, [pc, #28]	; (8006468 <prvInsertTimerInActiveList+0x80>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7fe f9f4 	bl	8004842 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800645a:	697b      	ldr	r3, [r7, #20]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	200027c0 	.word	0x200027c0
 8006468:	200027bc 	.word	0x200027bc

0800646c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08e      	sub	sp, #56	; 0x38
 8006470:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006472:	e0ca      	b.n	800660a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	da18      	bge.n	80064ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800647a:	1d3b      	adds	r3, r7, #4
 800647c:	3304      	adds	r3, #4
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	61fb      	str	r3, [r7, #28]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a2:	6850      	ldr	r0, [r2, #4]
 80064a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a6:	6892      	ldr	r2, [r2, #8]
 80064a8:	4611      	mov	r1, r2
 80064aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f2c0 80aa 	blt.w	8006608 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	3304      	adds	r3, #4
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fe f9f5 	bl	80048b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ca:	463b      	mov	r3, r7
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff ff6b 	bl	80063a8 <prvSampleTimeNow>
 80064d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b09      	cmp	r3, #9
 80064d8:	f200 8097 	bhi.w	800660a <prvProcessReceivedCommands+0x19e>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <prvProcessReceivedCommands+0x78>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	0800650d 	.word	0x0800650d
 80064f0:	08006581 	.word	0x08006581
 80064f4:	08006595 	.word	0x08006595
 80064f8:	080065df 	.word	0x080065df
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	0800650d 	.word	0x0800650d
 8006504:	08006581 	.word	0x08006581
 8006508:	08006595 	.word	0x08006595
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	b2da      	uxtb	r2, r3
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	18d1      	adds	r1, r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652c:	f7ff ff5c 	bl	80063e8 <prvInsertTimerInActiveList>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d069      	beq.n	800660a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800653c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d05e      	beq.n	800660a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	441a      	add	r2, r3
 8006554:	2300      	movs	r3, #0
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	2300      	movs	r3, #0
 800655a:	2100      	movs	r1, #0
 800655c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800655e:	f7ff fe05 	bl	800616c <xTimerGenericCommand>
 8006562:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d14f      	bne.n	800660a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	61bb      	str	r3, [r7, #24]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006586:	f023 0301 	bic.w	r3, r3, #1
 800658a:	b2da      	uxtb	r2, r3
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006592:	e03a      	b.n	800660a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	617b      	str	r3, [r7, #20]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	699a      	ldr	r2, [r3, #24]
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	18d1      	adds	r1, r2, r3
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d8:	f7ff ff06 	bl	80063e8 <prvInsertTimerInActiveList>
					break;
 80065dc:	e015      	b.n	800660a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80065ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ee:	f000 fbdf 	bl	8006db0 <vPortFree>
 80065f2:	e00a      	b.n	800660a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065fa:	f023 0301 	bic.w	r3, r3, #1
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006606:	e000      	b.n	800660a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006608:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800660a:	4b08      	ldr	r3, [pc, #32]	; (800662c <prvProcessReceivedCommands+0x1c0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	1d39      	adds	r1, r7, #4
 8006610:	2200      	movs	r2, #0
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe fc16 	bl	8004e44 <xQueueReceive>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	f47f af2a 	bne.w	8006474 <prvProcessReceivedCommands+0x8>
	}
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	3730      	adds	r7, #48	; 0x30
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200027c4 	.word	0x200027c4

08006630 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006636:	e048      	b.n	80066ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006638:	4b2d      	ldr	r3, [pc, #180]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006642:	4b2b      	ldr	r3, [pc, #172]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe f92f 	bl	80048b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d02e      	beq.n	80066ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4413      	add	r3, r2
 8006674:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	429a      	cmp	r2, r3
 800667c:	d90e      	bls.n	800669c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800668a:	4b19      	ldr	r3, [pc, #100]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fe f8d4 	bl	8004842 <vListInsert>
 800669a:	e016      	b.n	80066ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800669c:	2300      	movs	r3, #0
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	2300      	movs	r3, #0
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	2100      	movs	r1, #0
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fd60 	bl	800616c <xTimerGenericCommand>
 80066ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	603b      	str	r3, [r7, #0]
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ca:	4b09      	ldr	r3, [pc, #36]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1b1      	bne.n	8006638 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066da:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <prvSwitchTimerLists+0xc4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a04      	ldr	r2, [pc, #16]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 80066e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066e2:	4a04      	ldr	r2, [pc, #16]	; (80066f4 <prvSwitchTimerLists+0xc4>)
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	6013      	str	r3, [r2, #0]
}
 80066e8:	bf00      	nop
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	200027bc 	.word	0x200027bc
 80066f4:	200027c0 	.word	0x200027c0

080066f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066fe:	f000 f969 	bl	80069d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <prvCheckForValidListAndQueue+0x60>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d120      	bne.n	800674c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800670a:	4814      	ldr	r0, [pc, #80]	; (800675c <prvCheckForValidListAndQueue+0x64>)
 800670c:	f7fe f848 	bl	80047a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006710:	4813      	ldr	r0, [pc, #76]	; (8006760 <prvCheckForValidListAndQueue+0x68>)
 8006712:	f7fe f845 	bl	80047a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006716:	4b13      	ldr	r3, [pc, #76]	; (8006764 <prvCheckForValidListAndQueue+0x6c>)
 8006718:	4a10      	ldr	r2, [pc, #64]	; (800675c <prvCheckForValidListAndQueue+0x64>)
 800671a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <prvCheckForValidListAndQueue+0x70>)
 800671e:	4a10      	ldr	r2, [pc, #64]	; (8006760 <prvCheckForValidListAndQueue+0x68>)
 8006720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006722:	2300      	movs	r3, #0
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	4b11      	ldr	r3, [pc, #68]	; (800676c <prvCheckForValidListAndQueue+0x74>)
 8006728:	4a11      	ldr	r2, [pc, #68]	; (8006770 <prvCheckForValidListAndQueue+0x78>)
 800672a:	2110      	movs	r1, #16
 800672c:	200a      	movs	r0, #10
 800672e:	f7fe f953 	bl	80049d8 <xQueueGenericCreateStatic>
 8006732:	4603      	mov	r3, r0
 8006734:	4a08      	ldr	r2, [pc, #32]	; (8006758 <prvCheckForValidListAndQueue+0x60>)
 8006736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006738:	4b07      	ldr	r3, [pc, #28]	; (8006758 <prvCheckForValidListAndQueue+0x60>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <prvCheckForValidListAndQueue+0x60>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	490b      	ldr	r1, [pc, #44]	; (8006774 <prvCheckForValidListAndQueue+0x7c>)
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fd6c 	bl	8005224 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800674c:	f000 f972 	bl	8006a34 <vPortExitCritical>
}
 8006750:	bf00      	nop
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	200027c4 	.word	0x200027c4
 800675c:	20002794 	.word	0x20002794
 8006760:	200027a8 	.word	0x200027a8
 8006764:	200027bc 	.word	0x200027bc
 8006768:	200027c0 	.word	0x200027c0
 800676c:	20002870 	.word	0x20002870
 8006770:	200027d0 	.word	0x200027d0
 8006774:	080084c8 	.word	0x080084c8

08006778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3b04      	subs	r3, #4
 8006788:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3b04      	subs	r3, #4
 8006796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f023 0201 	bic.w	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3b04      	subs	r3, #4
 80067a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067a8:	4a0c      	ldr	r2, [pc, #48]	; (80067dc <pxPortInitialiseStack+0x64>)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3b14      	subs	r3, #20
 80067b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3b04      	subs	r3, #4
 80067be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f06f 0202 	mvn.w	r2, #2
 80067c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3b20      	subs	r3, #32
 80067cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067ce:	68fb      	ldr	r3, [r7, #12]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	080067e1 	.word	0x080067e1

080067e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <prvTaskExitError+0x54>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f2:	d00a      	beq.n	800680a <prvTaskExitError+0x2a>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	60fb      	str	r3, [r7, #12]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <prvTaskExitError+0x28>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	60bb      	str	r3, [r7, #8]
}
 800681c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800681e:	bf00      	nop
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0fc      	beq.n	8006820 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006826:	bf00      	nop
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	2000000c 	.word	0x2000000c
	...

08006840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <pxCurrentTCBConst2>)
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	6808      	ldr	r0, [r1, #0]
 8006846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	f380 8809 	msr	PSP, r0
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8811 	msr	BASEPRI, r0
 800685a:	4770      	bx	lr
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst2>:
 8006860:	20002294 	.word	0x20002294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006868:	4808      	ldr	r0, [pc, #32]	; (800688c <prvPortStartFirstTask+0x24>)
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f380 8808 	msr	MSP, r0
 8006872:	f04f 0000 	mov.w	r0, #0
 8006876:	f380 8814 	msr	CONTROL, r0
 800687a:	b662      	cpsie	i
 800687c:	b661      	cpsie	f
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	df00      	svc	0
 8006888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800688a:	bf00      	nop
 800688c:	e000ed08 	.word	0xe000ed08

08006890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006896:	4b46      	ldr	r3, [pc, #280]	; (80069b0 <xPortStartScheduler+0x120>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a46      	ldr	r2, [pc, #280]	; (80069b4 <xPortStartScheduler+0x124>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10a      	bne.n	80068b6 <xPortStartScheduler+0x26>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068b6:	4b3e      	ldr	r3, [pc, #248]	; (80069b0 <xPortStartScheduler+0x120>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a3f      	ldr	r2, [pc, #252]	; (80069b8 <xPortStartScheduler+0x128>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10a      	bne.n	80068d6 <xPortStartScheduler+0x46>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	60fb      	str	r3, [r7, #12]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068d6:	4b39      	ldr	r3, [pc, #228]	; (80069bc <xPortStartScheduler+0x12c>)
 80068d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	22ff      	movs	r2, #255	; 0xff
 80068e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <xPortStartScheduler+0x130>)
 80068fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <xPortStartScheduler+0x134>)
 8006900:	2207      	movs	r2, #7
 8006902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006904:	e009      	b.n	800691a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006906:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <xPortStartScheduler+0x134>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3b01      	subs	r3, #1
 800690c:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <xPortStartScheduler+0x134>)
 800690e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	b2db      	uxtb	r3, r3
 8006918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d0ef      	beq.n	8006906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006926:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <xPortStartScheduler+0x134>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1c3 0307 	rsb	r3, r3, #7
 800692e:	2b04      	cmp	r3, #4
 8006930:	d00a      	beq.n	8006948 <xPortStartScheduler+0xb8>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	60bb      	str	r3, [r7, #8]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006948:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <xPortStartScheduler+0x134>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <xPortStartScheduler+0x134>)
 8006950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <xPortStartScheduler+0x134>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800695a:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <xPortStartScheduler+0x134>)
 800695c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006966:	4b18      	ldr	r3, [pc, #96]	; (80069c8 <xPortStartScheduler+0x138>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <xPortStartScheduler+0x138>)
 800696c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <xPortStartScheduler+0x138>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <xPortStartScheduler+0x138>)
 8006978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800697c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800697e:	f000 f8dd 	bl	8006b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <xPortStartScheduler+0x13c>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006988:	f000 f8fc 	bl	8006b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <xPortStartScheduler+0x140>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0f      	ldr	r2, [pc, #60]	; (80069d0 <xPortStartScheduler+0x140>)
 8006992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006998:	f7ff ff66 	bl	8006868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800699c:	f7ff f852 	bl	8005a44 <vTaskSwitchContext>
	prvTaskExitError();
 80069a0:	f7ff ff1e 	bl	80067e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	e000ed00 	.word	0xe000ed00
 80069b4:	410fc271 	.word	0x410fc271
 80069b8:	410fc270 	.word	0x410fc270
 80069bc:	e000e400 	.word	0xe000e400
 80069c0:	200028c0 	.word	0x200028c0
 80069c4:	200028c4 	.word	0x200028c4
 80069c8:	e000ed20 	.word	0xe000ed20
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	e000ef34 	.word	0xe000ef34

080069d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	607b      	str	r3, [r7, #4]
}
 80069ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <vPortEnterCritical+0x58>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	4a0d      	ldr	r2, [pc, #52]	; (8006a2c <vPortEnterCritical+0x58>)
 80069f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069f8:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <vPortEnterCritical+0x58>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d10f      	bne.n	8006a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vPortEnterCritical+0x5c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	603b      	str	r3, [r7, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <vPortEnterCritical+0x4a>
	}
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	2000000c 	.word	0x2000000c
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <vPortExitCritical+0x50>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <vPortExitCritical+0x24>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	607b      	str	r3, [r7, #4]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <vPortExitCritical+0x50>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <vPortExitCritical+0x50>)
 8006a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a62:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <vPortExitCritical+0x50>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <vPortExitCritical+0x42>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	f383 8811 	msr	BASEPRI, r3
}
 8006a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	2000000c 	.word	0x2000000c
	...

08006a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a90:	f3ef 8009 	mrs	r0, PSP
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <pxCurrentTCBConst>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f01e 0f10 	tst.w	lr, #16
 8006aa0:	bf08      	it	eq
 8006aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aaa:	6010      	str	r0, [r2, #0]
 8006aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ab4:	f380 8811 	msr	BASEPRI, r0
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f7fe ffc0 	bl	8005a44 <vTaskSwitchContext>
 8006ac4:	f04f 0000 	mov.w	r0, #0
 8006ac8:	f380 8811 	msr	BASEPRI, r0
 8006acc:	bc09      	pop	{r0, r3}
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	6808      	ldr	r0, [r1, #0]
 8006ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad6:	f01e 0f10 	tst.w	lr, #16
 8006ada:	bf08      	it	eq
 8006adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ae0:	f380 8809 	msr	PSP, r0
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	f3af 8000 	nop.w

08006af0 <pxCurrentTCBConst>:
 8006af0:	20002294 	.word	0x20002294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop

08006af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	607b      	str	r3, [r7, #4]
}
 8006b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b12:	f7fe fedd 	bl	80058d0 <xTaskIncrementTick>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <xPortSysTickHandler+0x40>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f383 8811 	msr	BASEPRI, r3
}
 8006b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b40:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <vPortSetupTimerInterrupt+0x38>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <vPortSetupTimerInterrupt+0x3c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <vPortSetupTimerInterrupt+0x40>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	099b      	lsrs	r3, r3, #6
 8006b58:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <vPortSetupTimerInterrupt+0x44>)
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b5e:	4b04      	ldr	r3, [pc, #16]	; (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b60:	2207      	movs	r2, #7
 8006b62:	601a      	str	r2, [r3, #0]
}
 8006b64:	bf00      	nop
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	e000e010 	.word	0xe000e010
 8006b74:	e000e018 	.word	0xe000e018
 8006b78:	20000000 	.word	0x20000000
 8006b7c:	10624dd3 	.word	0x10624dd3
 8006b80:	e000e014 	.word	0xe000e014

08006b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b94 <vPortEnableVFP+0x10>
 8006b88:	6801      	ldr	r1, [r0, #0]
 8006b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b8e:	6001      	str	r1, [r0, #0]
 8006b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b92:	bf00      	nop
 8006b94:	e000ed88 	.word	0xe000ed88

08006b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b9e:	f3ef 8305 	mrs	r3, IPSR
 8006ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	d914      	bls.n	8006bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <vPortValidateInterruptPriority+0x70>)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bb4:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <vPortValidateInterruptPriority+0x74>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	7afa      	ldrb	r2, [r7, #11]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d20a      	bcs.n	8006bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	607b      	str	r3, [r7, #4]
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <vPortValidateInterruptPriority+0x78>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <vPortValidateInterruptPriority+0x7c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d90a      	bls.n	8006bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	603b      	str	r3, [r7, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <vPortValidateInterruptPriority+0x60>
	}
 8006bfa:	bf00      	nop
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	e000e3f0 	.word	0xe000e3f0
 8006c0c:	200028c0 	.word	0x200028c0
 8006c10:	e000ed0c 	.word	0xe000ed0c
 8006c14:	200028c4 	.word	0x200028c4

08006c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	; 0x28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c24:	f7fe fd98 	bl	8005758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c28:	4b5b      	ldr	r3, [pc, #364]	; (8006d98 <pvPortMalloc+0x180>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c30:	f000 f920 	bl	8006e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c34:	4b59      	ldr	r3, [pc, #356]	; (8006d9c <pvPortMalloc+0x184>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 8093 	bne.w	8006d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01d      	beq.n	8006c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c48:	2208      	movs	r2, #8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d014      	beq.n	8006c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f023 0307 	bic.w	r3, r3, #7
 8006c60:	3308      	adds	r3, #8
 8006c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <pvPortMalloc+0x6c>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	617b      	str	r3, [r7, #20]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d06e      	beq.n	8006d68 <pvPortMalloc+0x150>
 8006c8a:	4b45      	ldr	r3, [pc, #276]	; (8006da0 <pvPortMalloc+0x188>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d869      	bhi.n	8006d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c94:	4b43      	ldr	r3, [pc, #268]	; (8006da4 <pvPortMalloc+0x18c>)
 8006c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c98:	4b42      	ldr	r3, [pc, #264]	; (8006da4 <pvPortMalloc+0x18c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c9e:	e004      	b.n	8006caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d903      	bls.n	8006cbc <pvPortMalloc+0xa4>
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1f1      	bne.n	8006ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cbc:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <pvPortMalloc+0x180>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d050      	beq.n	8006d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2208      	movs	r2, #8
 8006ccc:	4413      	add	r3, r2
 8006cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d91f      	bls.n	8006d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <pvPortMalloc+0xf8>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	613b      	str	r3, [r7, #16]
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d22:	69b8      	ldr	r0, [r7, #24]
 8006d24:	f000 f908 	bl	8006f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d28:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <pvPortMalloc+0x188>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <pvPortMalloc+0x188>)
 8006d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d36:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <pvPortMalloc+0x188>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <pvPortMalloc+0x190>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d203      	bcs.n	8006d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d42:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <pvPortMalloc+0x188>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <pvPortMalloc+0x190>)
 8006d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	4b13      	ldr	r3, [pc, #76]	; (8006d9c <pvPortMalloc+0x184>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <pvPortMalloc+0x194>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	4a11      	ldr	r2, [pc, #68]	; (8006dac <pvPortMalloc+0x194>)
 8006d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d68:	f7fe fd04 	bl	8005774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <pvPortMalloc+0x174>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60fb      	str	r3, [r7, #12]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <pvPortMalloc+0x172>
	return pvReturn;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3728      	adds	r7, #40	; 0x28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200064d0 	.word	0x200064d0
 8006d9c:	200064e4 	.word	0x200064e4
 8006da0:	200064d4 	.word	0x200064d4
 8006da4:	200064c8 	.word	0x200064c8
 8006da8:	200064d8 	.word	0x200064d8
 8006dac:	200064dc 	.word	0x200064dc

08006db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d04d      	beq.n	8006e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	425b      	negs	r3, r3
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <vPortFree+0xb8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <vPortFree+0x44>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	60fb      	str	r3, [r7, #12]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <vPortFree+0x62>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60bb      	str	r3, [r7, #8]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <vPortFree+0xb8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01e      	beq.n	8006e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d11a      	bne.n	8006e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <vPortFree+0xb8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	43db      	mvns	r3, r3
 8006e32:	401a      	ands	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e38:	f7fe fc8e 	bl	8005758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <vPortFree+0xbc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4413      	add	r3, r2
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <vPortFree+0xbc>)
 8006e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e4a:	6938      	ldr	r0, [r7, #16]
 8006e4c:	f000 f874 	bl	8006f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <vPortFree+0xc0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a06      	ldr	r2, [pc, #24]	; (8006e70 <vPortFree+0xc0>)
 8006e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e5a:	f7fe fc8b 	bl	8005774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e5e:	bf00      	nop
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	200064e4 	.word	0x200064e4
 8006e6c:	200064d4 	.word	0x200064d4
 8006e70:	200064e0 	.word	0x200064e0

08006e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <prvHeapInit+0xac>)
 8006e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3307      	adds	r3, #7
 8006e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0307 	bic.w	r3, r3, #7
 8006e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <prvHeapInit+0xac>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006eac:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <prvHeapInit+0xb0>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <prvHeapInit+0xb0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0307 	bic.w	r3, r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <prvHeapInit+0xb4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <prvHeapInit+0xb4>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <prvHeapInit+0xb8>)
 8006f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <prvHeapInit+0xbc>)
 8006f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <prvHeapInit+0xc0>)
 8006f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	200028c8 	.word	0x200028c8
 8006f24:	200064c8 	.word	0x200064c8
 8006f28:	200064d0 	.word	0x200064d0
 8006f2c:	200064d8 	.word	0x200064d8
 8006f30:	200064d4 	.word	0x200064d4
 8006f34:	200064e4 	.word	0x200064e4

08006f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f40:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <prvInsertBlockIntoFreeList+0xac>)
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e002      	b.n	8006f4c <prvInsertBlockIntoFreeList+0x14>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d8f7      	bhi.n	8006f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d108      	bne.n	8006f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	441a      	add	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d118      	bne.n	8006fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d00d      	beq.n	8006fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e008      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e003      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d002      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	200064c8 	.word	0x200064c8
 8006fe8:	200064d0 	.word	0x200064d0

08006fec <__errno>:
 8006fec:	4b01      	ldr	r3, [pc, #4]	; (8006ff4 <__errno+0x8>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000010 	.word	0x20000010

08006ff8 <__libc_init_array>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4d0d      	ldr	r5, [pc, #52]	; (8007030 <__libc_init_array+0x38>)
 8006ffc:	4c0d      	ldr	r4, [pc, #52]	; (8007034 <__libc_init_array+0x3c>)
 8006ffe:	1b64      	subs	r4, r4, r5
 8007000:	10a4      	asrs	r4, r4, #2
 8007002:	2600      	movs	r6, #0
 8007004:	42a6      	cmp	r6, r4
 8007006:	d109      	bne.n	800701c <__libc_init_array+0x24>
 8007008:	4d0b      	ldr	r5, [pc, #44]	; (8007038 <__libc_init_array+0x40>)
 800700a:	4c0c      	ldr	r4, [pc, #48]	; (800703c <__libc_init_array+0x44>)
 800700c:	f001 f952 	bl	80082b4 <_init>
 8007010:	1b64      	subs	r4, r4, r5
 8007012:	10a4      	asrs	r4, r4, #2
 8007014:	2600      	movs	r6, #0
 8007016:	42a6      	cmp	r6, r4
 8007018:	d105      	bne.n	8007026 <__libc_init_array+0x2e>
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007020:	4798      	blx	r3
 8007022:	3601      	adds	r6, #1
 8007024:	e7ee      	b.n	8007004 <__libc_init_array+0xc>
 8007026:	f855 3b04 	ldr.w	r3, [r5], #4
 800702a:	4798      	blx	r3
 800702c:	3601      	adds	r6, #1
 800702e:	e7f2      	b.n	8007016 <__libc_init_array+0x1e>
 8007030:	08008888 	.word	0x08008888
 8007034:	08008888 	.word	0x08008888
 8007038:	08008888 	.word	0x08008888
 800703c:	0800888c 	.word	0x0800888c

08007040 <isprint>:
 8007040:	4b02      	ldr	r3, [pc, #8]	; (800704c <isprint+0xc>)
 8007042:	4418      	add	r0, r3
 8007044:	7840      	ldrb	r0, [r0, #1]
 8007046:	f000 0097 	and.w	r0, r0, #151	; 0x97
 800704a:	4770      	bx	lr
 800704c:	080086d0 	.word	0x080086d0

08007050 <memcpy>:
 8007050:	440a      	add	r2, r1
 8007052:	4291      	cmp	r1, r2
 8007054:	f100 33ff 	add.w	r3, r0, #4294967295
 8007058:	d100      	bne.n	800705c <memcpy+0xc>
 800705a:	4770      	bx	lr
 800705c:	b510      	push	{r4, lr}
 800705e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007066:	4291      	cmp	r1, r2
 8007068:	d1f9      	bne.n	800705e <memcpy+0xe>
 800706a:	bd10      	pop	{r4, pc}

0800706c <memset>:
 800706c:	4402      	add	r2, r0
 800706e:	4603      	mov	r3, r0
 8007070:	4293      	cmp	r3, r2
 8007072:	d100      	bne.n	8007076 <memset+0xa>
 8007074:	4770      	bx	lr
 8007076:	f803 1b01 	strb.w	r1, [r3], #1
 800707a:	e7f9      	b.n	8007070 <memset+0x4>

0800707c <siscanf>:
 800707c:	b40e      	push	{r1, r2, r3}
 800707e:	b510      	push	{r4, lr}
 8007080:	b09f      	sub	sp, #124	; 0x7c
 8007082:	ac21      	add	r4, sp, #132	; 0x84
 8007084:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007088:	f854 2b04 	ldr.w	r2, [r4], #4
 800708c:	9201      	str	r2, [sp, #4]
 800708e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007092:	9004      	str	r0, [sp, #16]
 8007094:	9008      	str	r0, [sp, #32]
 8007096:	f7f9 f8ad 	bl	80001f4 <strlen>
 800709a:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <siscanf+0x50>)
 800709c:	9005      	str	r0, [sp, #20]
 800709e:	9009      	str	r0, [sp, #36]	; 0x24
 80070a0:	930d      	str	r3, [sp, #52]	; 0x34
 80070a2:	480b      	ldr	r0, [pc, #44]	; (80070d0 <siscanf+0x54>)
 80070a4:	9a01      	ldr	r2, [sp, #4]
 80070a6:	6800      	ldr	r0, [r0, #0]
 80070a8:	9403      	str	r4, [sp, #12]
 80070aa:	2300      	movs	r3, #0
 80070ac:	9311      	str	r3, [sp, #68]	; 0x44
 80070ae:	9316      	str	r3, [sp, #88]	; 0x58
 80070b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80070b8:	a904      	add	r1, sp, #16
 80070ba:	4623      	mov	r3, r4
 80070bc:	f000 f9e2 	bl	8007484 <__ssvfiscanf_r>
 80070c0:	b01f      	add	sp, #124	; 0x7c
 80070c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c6:	b003      	add	sp, #12
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	080070d5 	.word	0x080070d5
 80070d0:	20000010 	.word	0x20000010

080070d4 <__seofread>:
 80070d4:	2000      	movs	r0, #0
 80070d6:	4770      	bx	lr

080070d8 <_vsiprintf_r>:
 80070d8:	b500      	push	{lr}
 80070da:	b09b      	sub	sp, #108	; 0x6c
 80070dc:	9100      	str	r1, [sp, #0]
 80070de:	9104      	str	r1, [sp, #16]
 80070e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070e4:	9105      	str	r1, [sp, #20]
 80070e6:	9102      	str	r1, [sp, #8]
 80070e8:	4905      	ldr	r1, [pc, #20]	; (8007100 <_vsiprintf_r+0x28>)
 80070ea:	9103      	str	r1, [sp, #12]
 80070ec:	4669      	mov	r1, sp
 80070ee:	f000 f86f 	bl	80071d0 <_svfiprintf_r>
 80070f2:	9b00      	ldr	r3, [sp, #0]
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	b01b      	add	sp, #108	; 0x6c
 80070fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80070fe:	bf00      	nop
 8007100:	ffff0208 	.word	0xffff0208

08007104 <vsiprintf>:
 8007104:	4613      	mov	r3, r2
 8007106:	460a      	mov	r2, r1
 8007108:	4601      	mov	r1, r0
 800710a:	4802      	ldr	r0, [pc, #8]	; (8007114 <vsiprintf+0x10>)
 800710c:	6800      	ldr	r0, [r0, #0]
 800710e:	f7ff bfe3 	b.w	80070d8 <_vsiprintf_r>
 8007112:	bf00      	nop
 8007114:	20000010 	.word	0x20000010

08007118 <__ssputs_r>:
 8007118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	688e      	ldr	r6, [r1, #8]
 800711e:	429e      	cmp	r6, r3
 8007120:	4682      	mov	sl, r0
 8007122:	460c      	mov	r4, r1
 8007124:	4690      	mov	r8, r2
 8007126:	461f      	mov	r7, r3
 8007128:	d838      	bhi.n	800719c <__ssputs_r+0x84>
 800712a:	898a      	ldrh	r2, [r1, #12]
 800712c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007130:	d032      	beq.n	8007198 <__ssputs_r+0x80>
 8007132:	6825      	ldr	r5, [r4, #0]
 8007134:	6909      	ldr	r1, [r1, #16]
 8007136:	eba5 0901 	sub.w	r9, r5, r1
 800713a:	6965      	ldr	r5, [r4, #20]
 800713c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007144:	3301      	adds	r3, #1
 8007146:	444b      	add	r3, r9
 8007148:	106d      	asrs	r5, r5, #1
 800714a:	429d      	cmp	r5, r3
 800714c:	bf38      	it	cc
 800714e:	461d      	movcc	r5, r3
 8007150:	0553      	lsls	r3, r2, #21
 8007152:	d531      	bpl.n	80071b8 <__ssputs_r+0xa0>
 8007154:	4629      	mov	r1, r5
 8007156:	f000 ffe5 	bl	8008124 <_malloc_r>
 800715a:	4606      	mov	r6, r0
 800715c:	b950      	cbnz	r0, 8007174 <__ssputs_r+0x5c>
 800715e:	230c      	movs	r3, #12
 8007160:	f8ca 3000 	str.w	r3, [sl]
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007174:	6921      	ldr	r1, [r4, #16]
 8007176:	464a      	mov	r2, r9
 8007178:	f7ff ff6a 	bl	8007050 <memcpy>
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007186:	81a3      	strh	r3, [r4, #12]
 8007188:	6126      	str	r6, [r4, #16]
 800718a:	6165      	str	r5, [r4, #20]
 800718c:	444e      	add	r6, r9
 800718e:	eba5 0509 	sub.w	r5, r5, r9
 8007192:	6026      	str	r6, [r4, #0]
 8007194:	60a5      	str	r5, [r4, #8]
 8007196:	463e      	mov	r6, r7
 8007198:	42be      	cmp	r6, r7
 800719a:	d900      	bls.n	800719e <__ssputs_r+0x86>
 800719c:	463e      	mov	r6, r7
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	4632      	mov	r2, r6
 80071a2:	4641      	mov	r1, r8
 80071a4:	f000 ff38 	bl	8008018 <memmove>
 80071a8:	68a3      	ldr	r3, [r4, #8]
 80071aa:	1b9b      	subs	r3, r3, r6
 80071ac:	60a3      	str	r3, [r4, #8]
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	4433      	add	r3, r6
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	2000      	movs	r0, #0
 80071b6:	e7db      	b.n	8007170 <__ssputs_r+0x58>
 80071b8:	462a      	mov	r2, r5
 80071ba:	f001 f827 	bl	800820c <_realloc_r>
 80071be:	4606      	mov	r6, r0
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d1e1      	bne.n	8007188 <__ssputs_r+0x70>
 80071c4:	6921      	ldr	r1, [r4, #16]
 80071c6:	4650      	mov	r0, sl
 80071c8:	f000 ff40 	bl	800804c <_free_r>
 80071cc:	e7c7      	b.n	800715e <__ssputs_r+0x46>
	...

080071d0 <_svfiprintf_r>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	4698      	mov	r8, r3
 80071d6:	898b      	ldrh	r3, [r1, #12]
 80071d8:	061b      	lsls	r3, r3, #24
 80071da:	b09d      	sub	sp, #116	; 0x74
 80071dc:	4607      	mov	r7, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	d50e      	bpl.n	8007202 <_svfiprintf_r+0x32>
 80071e4:	690b      	ldr	r3, [r1, #16]
 80071e6:	b963      	cbnz	r3, 8007202 <_svfiprintf_r+0x32>
 80071e8:	2140      	movs	r1, #64	; 0x40
 80071ea:	f000 ff9b 	bl	8008124 <_malloc_r>
 80071ee:	6028      	str	r0, [r5, #0]
 80071f0:	6128      	str	r0, [r5, #16]
 80071f2:	b920      	cbnz	r0, 80071fe <_svfiprintf_r+0x2e>
 80071f4:	230c      	movs	r3, #12
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	e0d1      	b.n	80073a2 <_svfiprintf_r+0x1d2>
 80071fe:	2340      	movs	r3, #64	; 0x40
 8007200:	616b      	str	r3, [r5, #20]
 8007202:	2300      	movs	r3, #0
 8007204:	9309      	str	r3, [sp, #36]	; 0x24
 8007206:	2320      	movs	r3, #32
 8007208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800720c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007210:	2330      	movs	r3, #48	; 0x30
 8007212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073bc <_svfiprintf_r+0x1ec>
 8007216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800721a:	f04f 0901 	mov.w	r9, #1
 800721e:	4623      	mov	r3, r4
 8007220:	469a      	mov	sl, r3
 8007222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007226:	b10a      	cbz	r2, 800722c <_svfiprintf_r+0x5c>
 8007228:	2a25      	cmp	r2, #37	; 0x25
 800722a:	d1f9      	bne.n	8007220 <_svfiprintf_r+0x50>
 800722c:	ebba 0b04 	subs.w	fp, sl, r4
 8007230:	d00b      	beq.n	800724a <_svfiprintf_r+0x7a>
 8007232:	465b      	mov	r3, fp
 8007234:	4622      	mov	r2, r4
 8007236:	4629      	mov	r1, r5
 8007238:	4638      	mov	r0, r7
 800723a:	f7ff ff6d 	bl	8007118 <__ssputs_r>
 800723e:	3001      	adds	r0, #1
 8007240:	f000 80aa 	beq.w	8007398 <_svfiprintf_r+0x1c8>
 8007244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007246:	445a      	add	r2, fp
 8007248:	9209      	str	r2, [sp, #36]	; 0x24
 800724a:	f89a 3000 	ldrb.w	r3, [sl]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 80a2 	beq.w	8007398 <_svfiprintf_r+0x1c8>
 8007254:	2300      	movs	r3, #0
 8007256:	f04f 32ff 	mov.w	r2, #4294967295
 800725a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800725e:	f10a 0a01 	add.w	sl, sl, #1
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	9307      	str	r3, [sp, #28]
 8007266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800726a:	931a      	str	r3, [sp, #104]	; 0x68
 800726c:	4654      	mov	r4, sl
 800726e:	2205      	movs	r2, #5
 8007270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007274:	4851      	ldr	r0, [pc, #324]	; (80073bc <_svfiprintf_r+0x1ec>)
 8007276:	f7f8 ffcb 	bl	8000210 <memchr>
 800727a:	9a04      	ldr	r2, [sp, #16]
 800727c:	b9d8      	cbnz	r0, 80072b6 <_svfiprintf_r+0xe6>
 800727e:	06d0      	lsls	r0, r2, #27
 8007280:	bf44      	itt	mi
 8007282:	2320      	movmi	r3, #32
 8007284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007288:	0711      	lsls	r1, r2, #28
 800728a:	bf44      	itt	mi
 800728c:	232b      	movmi	r3, #43	; 0x2b
 800728e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007292:	f89a 3000 	ldrb.w	r3, [sl]
 8007296:	2b2a      	cmp	r3, #42	; 0x2a
 8007298:	d015      	beq.n	80072c6 <_svfiprintf_r+0xf6>
 800729a:	9a07      	ldr	r2, [sp, #28]
 800729c:	4654      	mov	r4, sl
 800729e:	2000      	movs	r0, #0
 80072a0:	f04f 0c0a 	mov.w	ip, #10
 80072a4:	4621      	mov	r1, r4
 80072a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072aa:	3b30      	subs	r3, #48	; 0x30
 80072ac:	2b09      	cmp	r3, #9
 80072ae:	d94e      	bls.n	800734e <_svfiprintf_r+0x17e>
 80072b0:	b1b0      	cbz	r0, 80072e0 <_svfiprintf_r+0x110>
 80072b2:	9207      	str	r2, [sp, #28]
 80072b4:	e014      	b.n	80072e0 <_svfiprintf_r+0x110>
 80072b6:	eba0 0308 	sub.w	r3, r0, r8
 80072ba:	fa09 f303 	lsl.w	r3, r9, r3
 80072be:	4313      	orrs	r3, r2
 80072c0:	9304      	str	r3, [sp, #16]
 80072c2:	46a2      	mov	sl, r4
 80072c4:	e7d2      	b.n	800726c <_svfiprintf_r+0x9c>
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	1d19      	adds	r1, r3, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	9103      	str	r1, [sp, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	bfbb      	ittet	lt
 80072d2:	425b      	neglt	r3, r3
 80072d4:	f042 0202 	orrlt.w	r2, r2, #2
 80072d8:	9307      	strge	r3, [sp, #28]
 80072da:	9307      	strlt	r3, [sp, #28]
 80072dc:	bfb8      	it	lt
 80072de:	9204      	strlt	r2, [sp, #16]
 80072e0:	7823      	ldrb	r3, [r4, #0]
 80072e2:	2b2e      	cmp	r3, #46	; 0x2e
 80072e4:	d10c      	bne.n	8007300 <_svfiprintf_r+0x130>
 80072e6:	7863      	ldrb	r3, [r4, #1]
 80072e8:	2b2a      	cmp	r3, #42	; 0x2a
 80072ea:	d135      	bne.n	8007358 <_svfiprintf_r+0x188>
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	1d1a      	adds	r2, r3, #4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	9203      	str	r2, [sp, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bfb8      	it	lt
 80072f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80072fc:	3402      	adds	r4, #2
 80072fe:	9305      	str	r3, [sp, #20]
 8007300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073cc <_svfiprintf_r+0x1fc>
 8007304:	7821      	ldrb	r1, [r4, #0]
 8007306:	2203      	movs	r2, #3
 8007308:	4650      	mov	r0, sl
 800730a:	f7f8 ff81 	bl	8000210 <memchr>
 800730e:	b140      	cbz	r0, 8007322 <_svfiprintf_r+0x152>
 8007310:	2340      	movs	r3, #64	; 0x40
 8007312:	eba0 000a 	sub.w	r0, r0, sl
 8007316:	fa03 f000 	lsl.w	r0, r3, r0
 800731a:	9b04      	ldr	r3, [sp, #16]
 800731c:	4303      	orrs	r3, r0
 800731e:	3401      	adds	r4, #1
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007326:	4826      	ldr	r0, [pc, #152]	; (80073c0 <_svfiprintf_r+0x1f0>)
 8007328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800732c:	2206      	movs	r2, #6
 800732e:	f7f8 ff6f 	bl	8000210 <memchr>
 8007332:	2800      	cmp	r0, #0
 8007334:	d038      	beq.n	80073a8 <_svfiprintf_r+0x1d8>
 8007336:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <_svfiprintf_r+0x1f4>)
 8007338:	bb1b      	cbnz	r3, 8007382 <_svfiprintf_r+0x1b2>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	3307      	adds	r3, #7
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	3308      	adds	r3, #8
 8007344:	9303      	str	r3, [sp, #12]
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	4433      	add	r3, r6
 800734a:	9309      	str	r3, [sp, #36]	; 0x24
 800734c:	e767      	b.n	800721e <_svfiprintf_r+0x4e>
 800734e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007352:	460c      	mov	r4, r1
 8007354:	2001      	movs	r0, #1
 8007356:	e7a5      	b.n	80072a4 <_svfiprintf_r+0xd4>
 8007358:	2300      	movs	r3, #0
 800735a:	3401      	adds	r4, #1
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	4619      	mov	r1, r3
 8007360:	f04f 0c0a 	mov.w	ip, #10
 8007364:	4620      	mov	r0, r4
 8007366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800736a:	3a30      	subs	r2, #48	; 0x30
 800736c:	2a09      	cmp	r2, #9
 800736e:	d903      	bls.n	8007378 <_svfiprintf_r+0x1a8>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0c5      	beq.n	8007300 <_svfiprintf_r+0x130>
 8007374:	9105      	str	r1, [sp, #20]
 8007376:	e7c3      	b.n	8007300 <_svfiprintf_r+0x130>
 8007378:	fb0c 2101 	mla	r1, ip, r1, r2
 800737c:	4604      	mov	r4, r0
 800737e:	2301      	movs	r3, #1
 8007380:	e7f0      	b.n	8007364 <_svfiprintf_r+0x194>
 8007382:	ab03      	add	r3, sp, #12
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	462a      	mov	r2, r5
 8007388:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <_svfiprintf_r+0x1f8>)
 800738a:	a904      	add	r1, sp, #16
 800738c:	4638      	mov	r0, r7
 800738e:	f3af 8000 	nop.w
 8007392:	1c42      	adds	r2, r0, #1
 8007394:	4606      	mov	r6, r0
 8007396:	d1d6      	bne.n	8007346 <_svfiprintf_r+0x176>
 8007398:	89ab      	ldrh	r3, [r5, #12]
 800739a:	065b      	lsls	r3, r3, #25
 800739c:	f53f af2c 	bmi.w	80071f8 <_svfiprintf_r+0x28>
 80073a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073a2:	b01d      	add	sp, #116	; 0x74
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	ab03      	add	r3, sp, #12
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	462a      	mov	r2, r5
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <_svfiprintf_r+0x1f8>)
 80073b0:	a904      	add	r1, sp, #16
 80073b2:	4638      	mov	r0, r7
 80073b4:	f000 fa4c 	bl	8007850 <_printf_i>
 80073b8:	e7eb      	b.n	8007392 <_svfiprintf_r+0x1c2>
 80073ba:	bf00      	nop
 80073bc:	080087d1 	.word	0x080087d1
 80073c0:	080087db 	.word	0x080087db
 80073c4:	00000000 	.word	0x00000000
 80073c8:	08007119 	.word	0x08007119
 80073cc:	080087d7 	.word	0x080087d7

080073d0 <_sungetc_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	1c4b      	adds	r3, r1, #1
 80073d4:	4614      	mov	r4, r2
 80073d6:	d103      	bne.n	80073e0 <_sungetc_r+0x10>
 80073d8:	f04f 35ff 	mov.w	r5, #4294967295
 80073dc:	4628      	mov	r0, r5
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	8993      	ldrh	r3, [r2, #12]
 80073e2:	f023 0320 	bic.w	r3, r3, #32
 80073e6:	8193      	strh	r3, [r2, #12]
 80073e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073ea:	6852      	ldr	r2, [r2, #4]
 80073ec:	b2cd      	uxtb	r5, r1
 80073ee:	b18b      	cbz	r3, 8007414 <_sungetc_r+0x44>
 80073f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80073f2:	4293      	cmp	r3, r2
 80073f4:	dd08      	ble.n	8007408 <_sungetc_r+0x38>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	1e5a      	subs	r2, r3, #1
 80073fa:	6022      	str	r2, [r4, #0]
 80073fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007400:	6863      	ldr	r3, [r4, #4]
 8007402:	3301      	adds	r3, #1
 8007404:	6063      	str	r3, [r4, #4]
 8007406:	e7e9      	b.n	80073dc <_sungetc_r+0xc>
 8007408:	4621      	mov	r1, r4
 800740a:	f000 fdc9 	bl	8007fa0 <__submore>
 800740e:	2800      	cmp	r0, #0
 8007410:	d0f1      	beq.n	80073f6 <_sungetc_r+0x26>
 8007412:	e7e1      	b.n	80073d8 <_sungetc_r+0x8>
 8007414:	6921      	ldr	r1, [r4, #16]
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	b151      	cbz	r1, 8007430 <_sungetc_r+0x60>
 800741a:	4299      	cmp	r1, r3
 800741c:	d208      	bcs.n	8007430 <_sungetc_r+0x60>
 800741e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007422:	42a9      	cmp	r1, r5
 8007424:	d104      	bne.n	8007430 <_sungetc_r+0x60>
 8007426:	3b01      	subs	r3, #1
 8007428:	3201      	adds	r2, #1
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	6062      	str	r2, [r4, #4]
 800742e:	e7d5      	b.n	80073dc <_sungetc_r+0xc>
 8007430:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007438:	6363      	str	r3, [r4, #52]	; 0x34
 800743a:	2303      	movs	r3, #3
 800743c:	63a3      	str	r3, [r4, #56]	; 0x38
 800743e:	4623      	mov	r3, r4
 8007440:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	2301      	movs	r3, #1
 8007448:	e7dc      	b.n	8007404 <_sungetc_r+0x34>

0800744a <__ssrefill_r>:
 800744a:	b510      	push	{r4, lr}
 800744c:	460c      	mov	r4, r1
 800744e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007450:	b169      	cbz	r1, 800746e <__ssrefill_r+0x24>
 8007452:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007456:	4299      	cmp	r1, r3
 8007458:	d001      	beq.n	800745e <__ssrefill_r+0x14>
 800745a:	f000 fdf7 	bl	800804c <_free_r>
 800745e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007460:	6063      	str	r3, [r4, #4]
 8007462:	2000      	movs	r0, #0
 8007464:	6360      	str	r0, [r4, #52]	; 0x34
 8007466:	b113      	cbz	r3, 800746e <__ssrefill_r+0x24>
 8007468:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800746a:	6023      	str	r3, [r4, #0]
 800746c:	bd10      	pop	{r4, pc}
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	2300      	movs	r3, #0
 8007474:	6063      	str	r3, [r4, #4]
 8007476:	89a3      	ldrh	r3, [r4, #12]
 8007478:	f043 0320 	orr.w	r3, r3, #32
 800747c:	81a3      	strh	r3, [r4, #12]
 800747e:	f04f 30ff 	mov.w	r0, #4294967295
 8007482:	e7f3      	b.n	800746c <__ssrefill_r+0x22>

08007484 <__ssvfiscanf_r>:
 8007484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800748e:	2100      	movs	r1, #0
 8007490:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007494:	49a6      	ldr	r1, [pc, #664]	; (8007730 <__ssvfiscanf_r+0x2ac>)
 8007496:	91a0      	str	r1, [sp, #640]	; 0x280
 8007498:	f10d 0804 	add.w	r8, sp, #4
 800749c:	49a5      	ldr	r1, [pc, #660]	; (8007734 <__ssvfiscanf_r+0x2b0>)
 800749e:	4fa6      	ldr	r7, [pc, #664]	; (8007738 <__ssvfiscanf_r+0x2b4>)
 80074a0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800773c <__ssvfiscanf_r+0x2b8>
 80074a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80074a8:	4606      	mov	r6, r0
 80074aa:	91a1      	str	r1, [sp, #644]	; 0x284
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	7813      	ldrb	r3, [r2, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 815a 	beq.w	800776a <__ssvfiscanf_r+0x2e6>
 80074b6:	5dd9      	ldrb	r1, [r3, r7]
 80074b8:	f011 0108 	ands.w	r1, r1, #8
 80074bc:	f102 0501 	add.w	r5, r2, #1
 80074c0:	d019      	beq.n	80074f6 <__ssvfiscanf_r+0x72>
 80074c2:	6863      	ldr	r3, [r4, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	dd0f      	ble.n	80074e8 <__ssvfiscanf_r+0x64>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	5cba      	ldrb	r2, [r7, r2]
 80074ce:	0712      	lsls	r2, r2, #28
 80074d0:	d401      	bmi.n	80074d6 <__ssvfiscanf_r+0x52>
 80074d2:	462a      	mov	r2, r5
 80074d4:	e7eb      	b.n	80074ae <__ssvfiscanf_r+0x2a>
 80074d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80074d8:	3201      	adds	r2, #1
 80074da:	9245      	str	r2, [sp, #276]	; 0x114
 80074dc:	6862      	ldr	r2, [r4, #4]
 80074de:	3301      	adds	r3, #1
 80074e0:	3a01      	subs	r2, #1
 80074e2:	6062      	str	r2, [r4, #4]
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	e7ec      	b.n	80074c2 <__ssvfiscanf_r+0x3e>
 80074e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074ea:	4621      	mov	r1, r4
 80074ec:	4630      	mov	r0, r6
 80074ee:	4798      	blx	r3
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d0e9      	beq.n	80074c8 <__ssvfiscanf_r+0x44>
 80074f4:	e7ed      	b.n	80074d2 <__ssvfiscanf_r+0x4e>
 80074f6:	2b25      	cmp	r3, #37	; 0x25
 80074f8:	d012      	beq.n	8007520 <__ssvfiscanf_r+0x9c>
 80074fa:	469a      	mov	sl, r3
 80074fc:	6863      	ldr	r3, [r4, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f340 8091 	ble.w	8007626 <__ssvfiscanf_r+0x1a2>
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	7813      	ldrb	r3, [r2, #0]
 8007508:	4553      	cmp	r3, sl
 800750a:	f040 812e 	bne.w	800776a <__ssvfiscanf_r+0x2e6>
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	3b01      	subs	r3, #1
 8007512:	6063      	str	r3, [r4, #4]
 8007514:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007516:	3201      	adds	r2, #1
 8007518:	3301      	adds	r3, #1
 800751a:	6022      	str	r2, [r4, #0]
 800751c:	9345      	str	r3, [sp, #276]	; 0x114
 800751e:	e7d8      	b.n	80074d2 <__ssvfiscanf_r+0x4e>
 8007520:	9141      	str	r1, [sp, #260]	; 0x104
 8007522:	9143      	str	r1, [sp, #268]	; 0x10c
 8007524:	7853      	ldrb	r3, [r2, #1]
 8007526:	2b2a      	cmp	r3, #42	; 0x2a
 8007528:	bf02      	ittt	eq
 800752a:	2310      	moveq	r3, #16
 800752c:	1c95      	addeq	r5, r2, #2
 800752e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007530:	220a      	movs	r2, #10
 8007532:	46aa      	mov	sl, r5
 8007534:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007538:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800753c:	2b09      	cmp	r3, #9
 800753e:	d91d      	bls.n	800757c <__ssvfiscanf_r+0xf8>
 8007540:	487e      	ldr	r0, [pc, #504]	; (800773c <__ssvfiscanf_r+0x2b8>)
 8007542:	2203      	movs	r2, #3
 8007544:	f7f8 fe64 	bl	8000210 <memchr>
 8007548:	b140      	cbz	r0, 800755c <__ssvfiscanf_r+0xd8>
 800754a:	2301      	movs	r3, #1
 800754c:	eba0 0009 	sub.w	r0, r0, r9
 8007550:	fa03 f000 	lsl.w	r0, r3, r0
 8007554:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007556:	4318      	orrs	r0, r3
 8007558:	9041      	str	r0, [sp, #260]	; 0x104
 800755a:	4655      	mov	r5, sl
 800755c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007560:	2b78      	cmp	r3, #120	; 0x78
 8007562:	d806      	bhi.n	8007572 <__ssvfiscanf_r+0xee>
 8007564:	2b57      	cmp	r3, #87	; 0x57
 8007566:	d810      	bhi.n	800758a <__ssvfiscanf_r+0x106>
 8007568:	2b25      	cmp	r3, #37	; 0x25
 800756a:	d0c6      	beq.n	80074fa <__ssvfiscanf_r+0x76>
 800756c:	d856      	bhi.n	800761c <__ssvfiscanf_r+0x198>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d064      	beq.n	800763c <__ssvfiscanf_r+0x1b8>
 8007572:	2303      	movs	r3, #3
 8007574:	9347      	str	r3, [sp, #284]	; 0x11c
 8007576:	230a      	movs	r3, #10
 8007578:	9342      	str	r3, [sp, #264]	; 0x108
 800757a:	e071      	b.n	8007660 <__ssvfiscanf_r+0x1dc>
 800757c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800757e:	fb02 1103 	mla	r1, r2, r3, r1
 8007582:	3930      	subs	r1, #48	; 0x30
 8007584:	9143      	str	r1, [sp, #268]	; 0x10c
 8007586:	4655      	mov	r5, sl
 8007588:	e7d3      	b.n	8007532 <__ssvfiscanf_r+0xae>
 800758a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800758e:	2a20      	cmp	r2, #32
 8007590:	d8ef      	bhi.n	8007572 <__ssvfiscanf_r+0xee>
 8007592:	a101      	add	r1, pc, #4	; (adr r1, 8007598 <__ssvfiscanf_r+0x114>)
 8007594:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007598:	0800764b 	.word	0x0800764b
 800759c:	08007573 	.word	0x08007573
 80075a0:	08007573 	.word	0x08007573
 80075a4:	080076a9 	.word	0x080076a9
 80075a8:	08007573 	.word	0x08007573
 80075ac:	08007573 	.word	0x08007573
 80075b0:	08007573 	.word	0x08007573
 80075b4:	08007573 	.word	0x08007573
 80075b8:	08007573 	.word	0x08007573
 80075bc:	08007573 	.word	0x08007573
 80075c0:	08007573 	.word	0x08007573
 80075c4:	080076bf 	.word	0x080076bf
 80075c8:	08007695 	.word	0x08007695
 80075cc:	08007623 	.word	0x08007623
 80075d0:	08007623 	.word	0x08007623
 80075d4:	08007623 	.word	0x08007623
 80075d8:	08007573 	.word	0x08007573
 80075dc:	08007699 	.word	0x08007699
 80075e0:	08007573 	.word	0x08007573
 80075e4:	08007573 	.word	0x08007573
 80075e8:	08007573 	.word	0x08007573
 80075ec:	08007573 	.word	0x08007573
 80075f0:	080076cf 	.word	0x080076cf
 80075f4:	080076a1 	.word	0x080076a1
 80075f8:	08007643 	.word	0x08007643
 80075fc:	08007573 	.word	0x08007573
 8007600:	08007573 	.word	0x08007573
 8007604:	080076cb 	.word	0x080076cb
 8007608:	08007573 	.word	0x08007573
 800760c:	08007695 	.word	0x08007695
 8007610:	08007573 	.word	0x08007573
 8007614:	08007573 	.word	0x08007573
 8007618:	0800764b 	.word	0x0800764b
 800761c:	3b45      	subs	r3, #69	; 0x45
 800761e:	2b02      	cmp	r3, #2
 8007620:	d8a7      	bhi.n	8007572 <__ssvfiscanf_r+0xee>
 8007622:	2305      	movs	r3, #5
 8007624:	e01b      	b.n	800765e <__ssvfiscanf_r+0x1da>
 8007626:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007628:	4621      	mov	r1, r4
 800762a:	4630      	mov	r0, r6
 800762c:	4798      	blx	r3
 800762e:	2800      	cmp	r0, #0
 8007630:	f43f af68 	beq.w	8007504 <__ssvfiscanf_r+0x80>
 8007634:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007636:	2800      	cmp	r0, #0
 8007638:	f040 808d 	bne.w	8007756 <__ssvfiscanf_r+0x2d2>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	e08f      	b.n	8007762 <__ssvfiscanf_r+0x2de>
 8007642:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007644:	f042 0220 	orr.w	r2, r2, #32
 8007648:	9241      	str	r2, [sp, #260]	; 0x104
 800764a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800764c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007650:	9241      	str	r2, [sp, #260]	; 0x104
 8007652:	2210      	movs	r2, #16
 8007654:	2b6f      	cmp	r3, #111	; 0x6f
 8007656:	9242      	str	r2, [sp, #264]	; 0x108
 8007658:	bf34      	ite	cc
 800765a:	2303      	movcc	r3, #3
 800765c:	2304      	movcs	r3, #4
 800765e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007660:	6863      	ldr	r3, [r4, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	dd42      	ble.n	80076ec <__ssvfiscanf_r+0x268>
 8007666:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007668:	0659      	lsls	r1, r3, #25
 800766a:	d404      	bmi.n	8007676 <__ssvfiscanf_r+0x1f2>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	781a      	ldrb	r2, [r3, #0]
 8007670:	5cba      	ldrb	r2, [r7, r2]
 8007672:	0712      	lsls	r2, r2, #28
 8007674:	d441      	bmi.n	80076fa <__ssvfiscanf_r+0x276>
 8007676:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007678:	2b02      	cmp	r3, #2
 800767a:	dc50      	bgt.n	800771e <__ssvfiscanf_r+0x29a>
 800767c:	466b      	mov	r3, sp
 800767e:	4622      	mov	r2, r4
 8007680:	a941      	add	r1, sp, #260	; 0x104
 8007682:	4630      	mov	r0, r6
 8007684:	f000 fa0a 	bl	8007a9c <_scanf_chars>
 8007688:	2801      	cmp	r0, #1
 800768a:	d06e      	beq.n	800776a <__ssvfiscanf_r+0x2e6>
 800768c:	2802      	cmp	r0, #2
 800768e:	f47f af20 	bne.w	80074d2 <__ssvfiscanf_r+0x4e>
 8007692:	e7cf      	b.n	8007634 <__ssvfiscanf_r+0x1b0>
 8007694:	220a      	movs	r2, #10
 8007696:	e7dd      	b.n	8007654 <__ssvfiscanf_r+0x1d0>
 8007698:	2300      	movs	r3, #0
 800769a:	9342      	str	r3, [sp, #264]	; 0x108
 800769c:	2303      	movs	r3, #3
 800769e:	e7de      	b.n	800765e <__ssvfiscanf_r+0x1da>
 80076a0:	2308      	movs	r3, #8
 80076a2:	9342      	str	r3, [sp, #264]	; 0x108
 80076a4:	2304      	movs	r3, #4
 80076a6:	e7da      	b.n	800765e <__ssvfiscanf_r+0x1da>
 80076a8:	4629      	mov	r1, r5
 80076aa:	4640      	mov	r0, r8
 80076ac:	f000 fb48 	bl	8007d40 <__sccl>
 80076b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b6:	9341      	str	r3, [sp, #260]	; 0x104
 80076b8:	4605      	mov	r5, r0
 80076ba:	2301      	movs	r3, #1
 80076bc:	e7cf      	b.n	800765e <__ssvfiscanf_r+0x1da>
 80076be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80076c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c4:	9341      	str	r3, [sp, #260]	; 0x104
 80076c6:	2300      	movs	r3, #0
 80076c8:	e7c9      	b.n	800765e <__ssvfiscanf_r+0x1da>
 80076ca:	2302      	movs	r3, #2
 80076cc:	e7c7      	b.n	800765e <__ssvfiscanf_r+0x1da>
 80076ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 80076d0:	06c3      	lsls	r3, r0, #27
 80076d2:	f53f aefe 	bmi.w	80074d2 <__ssvfiscanf_r+0x4e>
 80076d6:	9b00      	ldr	r3, [sp, #0]
 80076d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076da:	1d19      	adds	r1, r3, #4
 80076dc:	9100      	str	r1, [sp, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f010 0f01 	tst.w	r0, #1
 80076e4:	bf14      	ite	ne
 80076e6:	801a      	strhne	r2, [r3, #0]
 80076e8:	601a      	streq	r2, [r3, #0]
 80076ea:	e6f2      	b.n	80074d2 <__ssvfiscanf_r+0x4e>
 80076ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80076ee:	4621      	mov	r1, r4
 80076f0:	4630      	mov	r0, r6
 80076f2:	4798      	blx	r3
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d0b6      	beq.n	8007666 <__ssvfiscanf_r+0x1e2>
 80076f8:	e79c      	b.n	8007634 <__ssvfiscanf_r+0x1b0>
 80076fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076fc:	3201      	adds	r2, #1
 80076fe:	9245      	str	r2, [sp, #276]	; 0x114
 8007700:	6862      	ldr	r2, [r4, #4]
 8007702:	3a01      	subs	r2, #1
 8007704:	2a00      	cmp	r2, #0
 8007706:	6062      	str	r2, [r4, #4]
 8007708:	dd02      	ble.n	8007710 <__ssvfiscanf_r+0x28c>
 800770a:	3301      	adds	r3, #1
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	e7ad      	b.n	800766c <__ssvfiscanf_r+0x1e8>
 8007710:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007712:	4621      	mov	r1, r4
 8007714:	4630      	mov	r0, r6
 8007716:	4798      	blx	r3
 8007718:	2800      	cmp	r0, #0
 800771a:	d0a7      	beq.n	800766c <__ssvfiscanf_r+0x1e8>
 800771c:	e78a      	b.n	8007634 <__ssvfiscanf_r+0x1b0>
 800771e:	2b04      	cmp	r3, #4
 8007720:	dc0e      	bgt.n	8007740 <__ssvfiscanf_r+0x2bc>
 8007722:	466b      	mov	r3, sp
 8007724:	4622      	mov	r2, r4
 8007726:	a941      	add	r1, sp, #260	; 0x104
 8007728:	4630      	mov	r0, r6
 800772a:	f000 fa11 	bl	8007b50 <_scanf_i>
 800772e:	e7ab      	b.n	8007688 <__ssvfiscanf_r+0x204>
 8007730:	080073d1 	.word	0x080073d1
 8007734:	0800744b 	.word	0x0800744b
 8007738:	080086d1 	.word	0x080086d1
 800773c:	080087d7 	.word	0x080087d7
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <__ssvfiscanf_r+0x2ec>)
 8007742:	2b00      	cmp	r3, #0
 8007744:	f43f aec5 	beq.w	80074d2 <__ssvfiscanf_r+0x4e>
 8007748:	466b      	mov	r3, sp
 800774a:	4622      	mov	r2, r4
 800774c:	a941      	add	r1, sp, #260	; 0x104
 800774e:	4630      	mov	r0, r6
 8007750:	f3af 8000 	nop.w
 8007754:	e798      	b.n	8007688 <__ssvfiscanf_r+0x204>
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	f013 0f40 	tst.w	r3, #64	; 0x40
 800775c:	bf18      	it	ne
 800775e:	f04f 30ff 	movne.w	r0, #4294967295
 8007762:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800776c:	e7f9      	b.n	8007762 <__ssvfiscanf_r+0x2de>
 800776e:	bf00      	nop
 8007770:	00000000 	.word	0x00000000

08007774 <_printf_common>:
 8007774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	4616      	mov	r6, r2
 800777a:	4699      	mov	r9, r3
 800777c:	688a      	ldr	r2, [r1, #8]
 800777e:	690b      	ldr	r3, [r1, #16]
 8007780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007784:	4293      	cmp	r3, r2
 8007786:	bfb8      	it	lt
 8007788:	4613      	movlt	r3, r2
 800778a:	6033      	str	r3, [r6, #0]
 800778c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007790:	4607      	mov	r7, r0
 8007792:	460c      	mov	r4, r1
 8007794:	b10a      	cbz	r2, 800779a <_printf_common+0x26>
 8007796:	3301      	adds	r3, #1
 8007798:	6033      	str	r3, [r6, #0]
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	0699      	lsls	r1, r3, #26
 800779e:	bf42      	ittt	mi
 80077a0:	6833      	ldrmi	r3, [r6, #0]
 80077a2:	3302      	addmi	r3, #2
 80077a4:	6033      	strmi	r3, [r6, #0]
 80077a6:	6825      	ldr	r5, [r4, #0]
 80077a8:	f015 0506 	ands.w	r5, r5, #6
 80077ac:	d106      	bne.n	80077bc <_printf_common+0x48>
 80077ae:	f104 0a19 	add.w	sl, r4, #25
 80077b2:	68e3      	ldr	r3, [r4, #12]
 80077b4:	6832      	ldr	r2, [r6, #0]
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	dc26      	bgt.n	800780a <_printf_common+0x96>
 80077bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077c0:	1e13      	subs	r3, r2, #0
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	bf18      	it	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	0692      	lsls	r2, r2, #26
 80077ca:	d42b      	bmi.n	8007824 <_printf_common+0xb0>
 80077cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d0:	4649      	mov	r1, r9
 80077d2:	4638      	mov	r0, r7
 80077d4:	47c0      	blx	r8
 80077d6:	3001      	adds	r0, #1
 80077d8:	d01e      	beq.n	8007818 <_printf_common+0xa4>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	68e5      	ldr	r5, [r4, #12]
 80077de:	6832      	ldr	r2, [r6, #0]
 80077e0:	f003 0306 	and.w	r3, r3, #6
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	bf08      	it	eq
 80077e8:	1aad      	subeq	r5, r5, r2
 80077ea:	68a3      	ldr	r3, [r4, #8]
 80077ec:	6922      	ldr	r2, [r4, #16]
 80077ee:	bf0c      	ite	eq
 80077f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f4:	2500      	movne	r5, #0
 80077f6:	4293      	cmp	r3, r2
 80077f8:	bfc4      	itt	gt
 80077fa:	1a9b      	subgt	r3, r3, r2
 80077fc:	18ed      	addgt	r5, r5, r3
 80077fe:	2600      	movs	r6, #0
 8007800:	341a      	adds	r4, #26
 8007802:	42b5      	cmp	r5, r6
 8007804:	d11a      	bne.n	800783c <_printf_common+0xc8>
 8007806:	2000      	movs	r0, #0
 8007808:	e008      	b.n	800781c <_printf_common+0xa8>
 800780a:	2301      	movs	r3, #1
 800780c:	4652      	mov	r2, sl
 800780e:	4649      	mov	r1, r9
 8007810:	4638      	mov	r0, r7
 8007812:	47c0      	blx	r8
 8007814:	3001      	adds	r0, #1
 8007816:	d103      	bne.n	8007820 <_printf_common+0xac>
 8007818:	f04f 30ff 	mov.w	r0, #4294967295
 800781c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007820:	3501      	adds	r5, #1
 8007822:	e7c6      	b.n	80077b2 <_printf_common+0x3e>
 8007824:	18e1      	adds	r1, r4, r3
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	2030      	movs	r0, #48	; 0x30
 800782a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800782e:	4422      	add	r2, r4
 8007830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007838:	3302      	adds	r3, #2
 800783a:	e7c7      	b.n	80077cc <_printf_common+0x58>
 800783c:	2301      	movs	r3, #1
 800783e:	4622      	mov	r2, r4
 8007840:	4649      	mov	r1, r9
 8007842:	4638      	mov	r0, r7
 8007844:	47c0      	blx	r8
 8007846:	3001      	adds	r0, #1
 8007848:	d0e6      	beq.n	8007818 <_printf_common+0xa4>
 800784a:	3601      	adds	r6, #1
 800784c:	e7d9      	b.n	8007802 <_printf_common+0x8e>
	...

08007850 <_printf_i>:
 8007850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007854:	7e0f      	ldrb	r7, [r1, #24]
 8007856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007858:	2f78      	cmp	r7, #120	; 0x78
 800785a:	4691      	mov	r9, r2
 800785c:	4680      	mov	r8, r0
 800785e:	460c      	mov	r4, r1
 8007860:	469a      	mov	sl, r3
 8007862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007866:	d807      	bhi.n	8007878 <_printf_i+0x28>
 8007868:	2f62      	cmp	r7, #98	; 0x62
 800786a:	d80a      	bhi.n	8007882 <_printf_i+0x32>
 800786c:	2f00      	cmp	r7, #0
 800786e:	f000 80d8 	beq.w	8007a22 <_printf_i+0x1d2>
 8007872:	2f58      	cmp	r7, #88	; 0x58
 8007874:	f000 80a3 	beq.w	80079be <_printf_i+0x16e>
 8007878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800787c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007880:	e03a      	b.n	80078f8 <_printf_i+0xa8>
 8007882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007886:	2b15      	cmp	r3, #21
 8007888:	d8f6      	bhi.n	8007878 <_printf_i+0x28>
 800788a:	a101      	add	r1, pc, #4	; (adr r1, 8007890 <_printf_i+0x40>)
 800788c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007890:	080078e9 	.word	0x080078e9
 8007894:	080078fd 	.word	0x080078fd
 8007898:	08007879 	.word	0x08007879
 800789c:	08007879 	.word	0x08007879
 80078a0:	08007879 	.word	0x08007879
 80078a4:	08007879 	.word	0x08007879
 80078a8:	080078fd 	.word	0x080078fd
 80078ac:	08007879 	.word	0x08007879
 80078b0:	08007879 	.word	0x08007879
 80078b4:	08007879 	.word	0x08007879
 80078b8:	08007879 	.word	0x08007879
 80078bc:	08007a09 	.word	0x08007a09
 80078c0:	0800792d 	.word	0x0800792d
 80078c4:	080079eb 	.word	0x080079eb
 80078c8:	08007879 	.word	0x08007879
 80078cc:	08007879 	.word	0x08007879
 80078d0:	08007a2b 	.word	0x08007a2b
 80078d4:	08007879 	.word	0x08007879
 80078d8:	0800792d 	.word	0x0800792d
 80078dc:	08007879 	.word	0x08007879
 80078e0:	08007879 	.word	0x08007879
 80078e4:	080079f3 	.word	0x080079f3
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	1d1a      	adds	r2, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	602a      	str	r2, [r5, #0]
 80078f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078f8:	2301      	movs	r3, #1
 80078fa:	e0a3      	b.n	8007a44 <_printf_i+0x1f4>
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	6829      	ldr	r1, [r5, #0]
 8007900:	0606      	lsls	r6, r0, #24
 8007902:	f101 0304 	add.w	r3, r1, #4
 8007906:	d50a      	bpl.n	800791e <_printf_i+0xce>
 8007908:	680e      	ldr	r6, [r1, #0]
 800790a:	602b      	str	r3, [r5, #0]
 800790c:	2e00      	cmp	r6, #0
 800790e:	da03      	bge.n	8007918 <_printf_i+0xc8>
 8007910:	232d      	movs	r3, #45	; 0x2d
 8007912:	4276      	negs	r6, r6
 8007914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007918:	485e      	ldr	r0, [pc, #376]	; (8007a94 <_printf_i+0x244>)
 800791a:	230a      	movs	r3, #10
 800791c:	e019      	b.n	8007952 <_printf_i+0x102>
 800791e:	680e      	ldr	r6, [r1, #0]
 8007920:	602b      	str	r3, [r5, #0]
 8007922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007926:	bf18      	it	ne
 8007928:	b236      	sxthne	r6, r6
 800792a:	e7ef      	b.n	800790c <_printf_i+0xbc>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	6820      	ldr	r0, [r4, #0]
 8007930:	1d19      	adds	r1, r3, #4
 8007932:	6029      	str	r1, [r5, #0]
 8007934:	0601      	lsls	r1, r0, #24
 8007936:	d501      	bpl.n	800793c <_printf_i+0xec>
 8007938:	681e      	ldr	r6, [r3, #0]
 800793a:	e002      	b.n	8007942 <_printf_i+0xf2>
 800793c:	0646      	lsls	r6, r0, #25
 800793e:	d5fb      	bpl.n	8007938 <_printf_i+0xe8>
 8007940:	881e      	ldrh	r6, [r3, #0]
 8007942:	4854      	ldr	r0, [pc, #336]	; (8007a94 <_printf_i+0x244>)
 8007944:	2f6f      	cmp	r7, #111	; 0x6f
 8007946:	bf0c      	ite	eq
 8007948:	2308      	moveq	r3, #8
 800794a:	230a      	movne	r3, #10
 800794c:	2100      	movs	r1, #0
 800794e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007952:	6865      	ldr	r5, [r4, #4]
 8007954:	60a5      	str	r5, [r4, #8]
 8007956:	2d00      	cmp	r5, #0
 8007958:	bfa2      	ittt	ge
 800795a:	6821      	ldrge	r1, [r4, #0]
 800795c:	f021 0104 	bicge.w	r1, r1, #4
 8007960:	6021      	strge	r1, [r4, #0]
 8007962:	b90e      	cbnz	r6, 8007968 <_printf_i+0x118>
 8007964:	2d00      	cmp	r5, #0
 8007966:	d04d      	beq.n	8007a04 <_printf_i+0x1b4>
 8007968:	4615      	mov	r5, r2
 800796a:	fbb6 f1f3 	udiv	r1, r6, r3
 800796e:	fb03 6711 	mls	r7, r3, r1, r6
 8007972:	5dc7      	ldrb	r7, [r0, r7]
 8007974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007978:	4637      	mov	r7, r6
 800797a:	42bb      	cmp	r3, r7
 800797c:	460e      	mov	r6, r1
 800797e:	d9f4      	bls.n	800796a <_printf_i+0x11a>
 8007980:	2b08      	cmp	r3, #8
 8007982:	d10b      	bne.n	800799c <_printf_i+0x14c>
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	07de      	lsls	r6, r3, #31
 8007988:	d508      	bpl.n	800799c <_printf_i+0x14c>
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	6861      	ldr	r1, [r4, #4]
 800798e:	4299      	cmp	r1, r3
 8007990:	bfde      	ittt	le
 8007992:	2330      	movle	r3, #48	; 0x30
 8007994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800799c:	1b52      	subs	r2, r2, r5
 800799e:	6122      	str	r2, [r4, #16]
 80079a0:	f8cd a000 	str.w	sl, [sp]
 80079a4:	464b      	mov	r3, r9
 80079a6:	aa03      	add	r2, sp, #12
 80079a8:	4621      	mov	r1, r4
 80079aa:	4640      	mov	r0, r8
 80079ac:	f7ff fee2 	bl	8007774 <_printf_common>
 80079b0:	3001      	adds	r0, #1
 80079b2:	d14c      	bne.n	8007a4e <_printf_i+0x1fe>
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	b004      	add	sp, #16
 80079ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079be:	4835      	ldr	r0, [pc, #212]	; (8007a94 <_printf_i+0x244>)
 80079c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079c4:	6829      	ldr	r1, [r5, #0]
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80079cc:	6029      	str	r1, [r5, #0]
 80079ce:	061d      	lsls	r5, r3, #24
 80079d0:	d514      	bpl.n	80079fc <_printf_i+0x1ac>
 80079d2:	07df      	lsls	r7, r3, #31
 80079d4:	bf44      	itt	mi
 80079d6:	f043 0320 	orrmi.w	r3, r3, #32
 80079da:	6023      	strmi	r3, [r4, #0]
 80079dc:	b91e      	cbnz	r6, 80079e6 <_printf_i+0x196>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	f023 0320 	bic.w	r3, r3, #32
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	2310      	movs	r3, #16
 80079e8:	e7b0      	b.n	800794c <_printf_i+0xfc>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	f043 0320 	orr.w	r3, r3, #32
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	2378      	movs	r3, #120	; 0x78
 80079f4:	4828      	ldr	r0, [pc, #160]	; (8007a98 <_printf_i+0x248>)
 80079f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079fa:	e7e3      	b.n	80079c4 <_printf_i+0x174>
 80079fc:	0659      	lsls	r1, r3, #25
 80079fe:	bf48      	it	mi
 8007a00:	b2b6      	uxthmi	r6, r6
 8007a02:	e7e6      	b.n	80079d2 <_printf_i+0x182>
 8007a04:	4615      	mov	r5, r2
 8007a06:	e7bb      	b.n	8007980 <_printf_i+0x130>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	6826      	ldr	r6, [r4, #0]
 8007a0c:	6961      	ldr	r1, [r4, #20]
 8007a0e:	1d18      	adds	r0, r3, #4
 8007a10:	6028      	str	r0, [r5, #0]
 8007a12:	0635      	lsls	r5, r6, #24
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	d501      	bpl.n	8007a1c <_printf_i+0x1cc>
 8007a18:	6019      	str	r1, [r3, #0]
 8007a1a:	e002      	b.n	8007a22 <_printf_i+0x1d2>
 8007a1c:	0670      	lsls	r0, r6, #25
 8007a1e:	d5fb      	bpl.n	8007a18 <_printf_i+0x1c8>
 8007a20:	8019      	strh	r1, [r3, #0]
 8007a22:	2300      	movs	r3, #0
 8007a24:	6123      	str	r3, [r4, #16]
 8007a26:	4615      	mov	r5, r2
 8007a28:	e7ba      	b.n	80079a0 <_printf_i+0x150>
 8007a2a:	682b      	ldr	r3, [r5, #0]
 8007a2c:	1d1a      	adds	r2, r3, #4
 8007a2e:	602a      	str	r2, [r5, #0]
 8007a30:	681d      	ldr	r5, [r3, #0]
 8007a32:	6862      	ldr	r2, [r4, #4]
 8007a34:	2100      	movs	r1, #0
 8007a36:	4628      	mov	r0, r5
 8007a38:	f7f8 fbea 	bl	8000210 <memchr>
 8007a3c:	b108      	cbz	r0, 8007a42 <_printf_i+0x1f2>
 8007a3e:	1b40      	subs	r0, r0, r5
 8007a40:	6060      	str	r0, [r4, #4]
 8007a42:	6863      	ldr	r3, [r4, #4]
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	2300      	movs	r3, #0
 8007a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a4c:	e7a8      	b.n	80079a0 <_printf_i+0x150>
 8007a4e:	6923      	ldr	r3, [r4, #16]
 8007a50:	462a      	mov	r2, r5
 8007a52:	4649      	mov	r1, r9
 8007a54:	4640      	mov	r0, r8
 8007a56:	47d0      	blx	sl
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d0ab      	beq.n	80079b4 <_printf_i+0x164>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	079b      	lsls	r3, r3, #30
 8007a60:	d413      	bmi.n	8007a8a <_printf_i+0x23a>
 8007a62:	68e0      	ldr	r0, [r4, #12]
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	4298      	cmp	r0, r3
 8007a68:	bfb8      	it	lt
 8007a6a:	4618      	movlt	r0, r3
 8007a6c:	e7a4      	b.n	80079b8 <_printf_i+0x168>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4632      	mov	r2, r6
 8007a72:	4649      	mov	r1, r9
 8007a74:	4640      	mov	r0, r8
 8007a76:	47d0      	blx	sl
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d09b      	beq.n	80079b4 <_printf_i+0x164>
 8007a7c:	3501      	adds	r5, #1
 8007a7e:	68e3      	ldr	r3, [r4, #12]
 8007a80:	9903      	ldr	r1, [sp, #12]
 8007a82:	1a5b      	subs	r3, r3, r1
 8007a84:	42ab      	cmp	r3, r5
 8007a86:	dcf2      	bgt.n	8007a6e <_printf_i+0x21e>
 8007a88:	e7eb      	b.n	8007a62 <_printf_i+0x212>
 8007a8a:	2500      	movs	r5, #0
 8007a8c:	f104 0619 	add.w	r6, r4, #25
 8007a90:	e7f5      	b.n	8007a7e <_printf_i+0x22e>
 8007a92:	bf00      	nop
 8007a94:	080087e2 	.word	0x080087e2
 8007a98:	080087f3 	.word	0x080087f3

08007a9c <_scanf_chars>:
 8007a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa0:	4615      	mov	r5, r2
 8007aa2:	688a      	ldr	r2, [r1, #8]
 8007aa4:	4680      	mov	r8, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	b932      	cbnz	r2, 8007ab8 <_scanf_chars+0x1c>
 8007aaa:	698a      	ldr	r2, [r1, #24]
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	bf0c      	ite	eq
 8007ab0:	2201      	moveq	r2, #1
 8007ab2:	f04f 32ff 	movne.w	r2, #4294967295
 8007ab6:	608a      	str	r2, [r1, #8]
 8007ab8:	6822      	ldr	r2, [r4, #0]
 8007aba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007b4c <_scanf_chars+0xb0>
 8007abe:	06d1      	lsls	r1, r2, #27
 8007ac0:	bf5f      	itttt	pl
 8007ac2:	681a      	ldrpl	r2, [r3, #0]
 8007ac4:	1d11      	addpl	r1, r2, #4
 8007ac6:	6019      	strpl	r1, [r3, #0]
 8007ac8:	6816      	ldrpl	r6, [r2, #0]
 8007aca:	2700      	movs	r7, #0
 8007acc:	69a0      	ldr	r0, [r4, #24]
 8007ace:	b188      	cbz	r0, 8007af4 <_scanf_chars+0x58>
 8007ad0:	2801      	cmp	r0, #1
 8007ad2:	d107      	bne.n	8007ae4 <_scanf_chars+0x48>
 8007ad4:	682a      	ldr	r2, [r5, #0]
 8007ad6:	7811      	ldrb	r1, [r2, #0]
 8007ad8:	6962      	ldr	r2, [r4, #20]
 8007ada:	5c52      	ldrb	r2, [r2, r1]
 8007adc:	b952      	cbnz	r2, 8007af4 <_scanf_chars+0x58>
 8007ade:	2f00      	cmp	r7, #0
 8007ae0:	d031      	beq.n	8007b46 <_scanf_chars+0xaa>
 8007ae2:	e022      	b.n	8007b2a <_scanf_chars+0x8e>
 8007ae4:	2802      	cmp	r0, #2
 8007ae6:	d120      	bne.n	8007b2a <_scanf_chars+0x8e>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007af0:	071b      	lsls	r3, r3, #28
 8007af2:	d41a      	bmi.n	8007b2a <_scanf_chars+0x8e>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	06da      	lsls	r2, r3, #27
 8007af8:	bf5e      	ittt	pl
 8007afa:	682b      	ldrpl	r3, [r5, #0]
 8007afc:	781b      	ldrbpl	r3, [r3, #0]
 8007afe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007b02:	682a      	ldr	r2, [r5, #0]
 8007b04:	686b      	ldr	r3, [r5, #4]
 8007b06:	3201      	adds	r2, #1
 8007b08:	602a      	str	r2, [r5, #0]
 8007b0a:	68a2      	ldr	r2, [r4, #8]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	3a01      	subs	r2, #1
 8007b10:	606b      	str	r3, [r5, #4]
 8007b12:	3701      	adds	r7, #1
 8007b14:	60a2      	str	r2, [r4, #8]
 8007b16:	b142      	cbz	r2, 8007b2a <_scanf_chars+0x8e>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dcd7      	bgt.n	8007acc <_scanf_chars+0x30>
 8007b1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b20:	4629      	mov	r1, r5
 8007b22:	4640      	mov	r0, r8
 8007b24:	4798      	blx	r3
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d0d0      	beq.n	8007acc <_scanf_chars+0x30>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	f013 0310 	ands.w	r3, r3, #16
 8007b30:	d105      	bne.n	8007b3e <_scanf_chars+0xa2>
 8007b32:	68e2      	ldr	r2, [r4, #12]
 8007b34:	3201      	adds	r2, #1
 8007b36:	60e2      	str	r2, [r4, #12]
 8007b38:	69a2      	ldr	r2, [r4, #24]
 8007b3a:	b102      	cbz	r2, 8007b3e <_scanf_chars+0xa2>
 8007b3c:	7033      	strb	r3, [r6, #0]
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	443b      	add	r3, r7
 8007b42:	6123      	str	r3, [r4, #16]
 8007b44:	2000      	movs	r0, #0
 8007b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b4a:	bf00      	nop
 8007b4c:	080086d1 	.word	0x080086d1

08007b50 <_scanf_i>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	4698      	mov	r8, r3
 8007b56:	4b76      	ldr	r3, [pc, #472]	; (8007d30 <_scanf_i+0x1e0>)
 8007b58:	460c      	mov	r4, r1
 8007b5a:	4682      	mov	sl, r0
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b62:	b087      	sub	sp, #28
 8007b64:	ab03      	add	r3, sp, #12
 8007b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007b6a:	4b72      	ldr	r3, [pc, #456]	; (8007d34 <_scanf_i+0x1e4>)
 8007b6c:	69a1      	ldr	r1, [r4, #24]
 8007b6e:	4a72      	ldr	r2, [pc, #456]	; (8007d38 <_scanf_i+0x1e8>)
 8007b70:	2903      	cmp	r1, #3
 8007b72:	bf18      	it	ne
 8007b74:	461a      	movne	r2, r3
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	9201      	str	r2, [sp, #4]
 8007b7a:	1e5a      	subs	r2, r3, #1
 8007b7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007b80:	bf88      	it	hi
 8007b82:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007b86:	4627      	mov	r7, r4
 8007b88:	bf82      	ittt	hi
 8007b8a:	eb03 0905 	addhi.w	r9, r3, r5
 8007b8e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007b92:	60a3      	strhi	r3, [r4, #8]
 8007b94:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007b98:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007b9c:	bf98      	it	ls
 8007b9e:	f04f 0900 	movls.w	r9, #0
 8007ba2:	6023      	str	r3, [r4, #0]
 8007ba4:	463d      	mov	r5, r7
 8007ba6:	f04f 0b00 	mov.w	fp, #0
 8007baa:	6831      	ldr	r1, [r6, #0]
 8007bac:	ab03      	add	r3, sp, #12
 8007bae:	7809      	ldrb	r1, [r1, #0]
 8007bb0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	f7f8 fb2b 	bl	8000210 <memchr>
 8007bba:	b328      	cbz	r0, 8007c08 <_scanf_i+0xb8>
 8007bbc:	f1bb 0f01 	cmp.w	fp, #1
 8007bc0:	d159      	bne.n	8007c76 <_scanf_i+0x126>
 8007bc2:	6862      	ldr	r2, [r4, #4]
 8007bc4:	b92a      	cbnz	r2, 8007bd2 <_scanf_i+0x82>
 8007bc6:	6822      	ldr	r2, [r4, #0]
 8007bc8:	2308      	movs	r3, #8
 8007bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bce:	6063      	str	r3, [r4, #4]
 8007bd0:	6022      	str	r2, [r4, #0]
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007bd8:	6022      	str	r2, [r4, #0]
 8007bda:	68a2      	ldr	r2, [r4, #8]
 8007bdc:	1e51      	subs	r1, r2, #1
 8007bde:	60a1      	str	r1, [r4, #8]
 8007be0:	b192      	cbz	r2, 8007c08 <_scanf_i+0xb8>
 8007be2:	6832      	ldr	r2, [r6, #0]
 8007be4:	1c51      	adds	r1, r2, #1
 8007be6:	6031      	str	r1, [r6, #0]
 8007be8:	7812      	ldrb	r2, [r2, #0]
 8007bea:	f805 2b01 	strb.w	r2, [r5], #1
 8007bee:	6872      	ldr	r2, [r6, #4]
 8007bf0:	3a01      	subs	r2, #1
 8007bf2:	2a00      	cmp	r2, #0
 8007bf4:	6072      	str	r2, [r6, #4]
 8007bf6:	dc07      	bgt.n	8007c08 <_scanf_i+0xb8>
 8007bf8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4650      	mov	r0, sl
 8007c00:	4790      	blx	r2
 8007c02:	2800      	cmp	r0, #0
 8007c04:	f040 8085 	bne.w	8007d12 <_scanf_i+0x1c2>
 8007c08:	f10b 0b01 	add.w	fp, fp, #1
 8007c0c:	f1bb 0f03 	cmp.w	fp, #3
 8007c10:	d1cb      	bne.n	8007baa <_scanf_i+0x5a>
 8007c12:	6863      	ldr	r3, [r4, #4]
 8007c14:	b90b      	cbnz	r3, 8007c1a <_scanf_i+0xca>
 8007c16:	230a      	movs	r3, #10
 8007c18:	6063      	str	r3, [r4, #4]
 8007c1a:	6863      	ldr	r3, [r4, #4]
 8007c1c:	4947      	ldr	r1, [pc, #284]	; (8007d3c <_scanf_i+0x1ec>)
 8007c1e:	6960      	ldr	r0, [r4, #20]
 8007c20:	1ac9      	subs	r1, r1, r3
 8007c22:	f000 f88d 	bl	8007d40 <__sccl>
 8007c26:	f04f 0b00 	mov.w	fp, #0
 8007c2a:	68a3      	ldr	r3, [r4, #8]
 8007c2c:	6822      	ldr	r2, [r4, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d03d      	beq.n	8007cae <_scanf_i+0x15e>
 8007c32:	6831      	ldr	r1, [r6, #0]
 8007c34:	6960      	ldr	r0, [r4, #20]
 8007c36:	f891 c000 	ldrb.w	ip, [r1]
 8007c3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d035      	beq.n	8007cae <_scanf_i+0x15e>
 8007c42:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007c46:	d124      	bne.n	8007c92 <_scanf_i+0x142>
 8007c48:	0510      	lsls	r0, r2, #20
 8007c4a:	d522      	bpl.n	8007c92 <_scanf_i+0x142>
 8007c4c:	f10b 0b01 	add.w	fp, fp, #1
 8007c50:	f1b9 0f00 	cmp.w	r9, #0
 8007c54:	d003      	beq.n	8007c5e <_scanf_i+0x10e>
 8007c56:	3301      	adds	r3, #1
 8007c58:	f109 39ff 	add.w	r9, r9, #4294967295
 8007c5c:	60a3      	str	r3, [r4, #8]
 8007c5e:	6873      	ldr	r3, [r6, #4]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	6073      	str	r3, [r6, #4]
 8007c66:	dd1b      	ble.n	8007ca0 <_scanf_i+0x150>
 8007c68:	6833      	ldr	r3, [r6, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	6033      	str	r3, [r6, #0]
 8007c6e:	68a3      	ldr	r3, [r4, #8]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	60a3      	str	r3, [r4, #8]
 8007c74:	e7d9      	b.n	8007c2a <_scanf_i+0xda>
 8007c76:	f1bb 0f02 	cmp.w	fp, #2
 8007c7a:	d1ae      	bne.n	8007bda <_scanf_i+0x8a>
 8007c7c:	6822      	ldr	r2, [r4, #0]
 8007c7e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007c82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007c86:	d1bf      	bne.n	8007c08 <_scanf_i+0xb8>
 8007c88:	2310      	movs	r3, #16
 8007c8a:	6063      	str	r3, [r4, #4]
 8007c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c90:	e7a2      	b.n	8007bd8 <_scanf_i+0x88>
 8007c92:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007c96:	6022      	str	r2, [r4, #0]
 8007c98:	780b      	ldrb	r3, [r1, #0]
 8007c9a:	f805 3b01 	strb.w	r3, [r5], #1
 8007c9e:	e7de      	b.n	8007c5e <_scanf_i+0x10e>
 8007ca0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4650      	mov	r0, sl
 8007ca8:	4798      	blx	r3
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d0df      	beq.n	8007c6e <_scanf_i+0x11e>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	05db      	lsls	r3, r3, #23
 8007cb2:	d50d      	bpl.n	8007cd0 <_scanf_i+0x180>
 8007cb4:	42bd      	cmp	r5, r7
 8007cb6:	d909      	bls.n	8007ccc <_scanf_i+0x17c>
 8007cb8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007cbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	4798      	blx	r3
 8007cc6:	f105 39ff 	add.w	r9, r5, #4294967295
 8007cca:	464d      	mov	r5, r9
 8007ccc:	42bd      	cmp	r5, r7
 8007cce:	d02d      	beq.n	8007d2c <_scanf_i+0x1dc>
 8007cd0:	6822      	ldr	r2, [r4, #0]
 8007cd2:	f012 0210 	ands.w	r2, r2, #16
 8007cd6:	d113      	bne.n	8007d00 <_scanf_i+0x1b0>
 8007cd8:	702a      	strb	r2, [r5, #0]
 8007cda:	6863      	ldr	r3, [r4, #4]
 8007cdc:	9e01      	ldr	r6, [sp, #4]
 8007cde:	4639      	mov	r1, r7
 8007ce0:	4650      	mov	r0, sl
 8007ce2:	47b0      	blx	r6
 8007ce4:	6821      	ldr	r1, [r4, #0]
 8007ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8007cea:	f011 0f20 	tst.w	r1, #32
 8007cee:	d013      	beq.n	8007d18 <_scanf_i+0x1c8>
 8007cf0:	1d1a      	adds	r2, r3, #4
 8007cf2:	f8c8 2000 	str.w	r2, [r8]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6018      	str	r0, [r3, #0]
 8007cfa:	68e3      	ldr	r3, [r4, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	60e3      	str	r3, [r4, #12]
 8007d00:	1bed      	subs	r5, r5, r7
 8007d02:	44ab      	add	fp, r5
 8007d04:	6925      	ldr	r5, [r4, #16]
 8007d06:	445d      	add	r5, fp
 8007d08:	6125      	str	r5, [r4, #16]
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	b007      	add	sp, #28
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	f04f 0b00 	mov.w	fp, #0
 8007d16:	e7ca      	b.n	8007cae <_scanf_i+0x15e>
 8007d18:	1d1a      	adds	r2, r3, #4
 8007d1a:	f8c8 2000 	str.w	r2, [r8]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f011 0f01 	tst.w	r1, #1
 8007d24:	bf14      	ite	ne
 8007d26:	8018      	strhne	r0, [r3, #0]
 8007d28:	6018      	streq	r0, [r3, #0]
 8007d2a:	e7e6      	b.n	8007cfa <_scanf_i+0x1aa>
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	e7ed      	b.n	8007d0c <_scanf_i+0x1bc>
 8007d30:	080084d0 	.word	0x080084d0
 8007d34:	08007f9d 	.word	0x08007f9d
 8007d38:	08007eb5 	.word	0x08007eb5
 8007d3c:	0800881d 	.word	0x0800881d

08007d40 <__sccl>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	780b      	ldrb	r3, [r1, #0]
 8007d44:	4604      	mov	r4, r0
 8007d46:	2b5e      	cmp	r3, #94	; 0x5e
 8007d48:	bf0b      	itete	eq
 8007d4a:	784b      	ldrbeq	r3, [r1, #1]
 8007d4c:	1c48      	addne	r0, r1, #1
 8007d4e:	1c88      	addeq	r0, r1, #2
 8007d50:	2200      	movne	r2, #0
 8007d52:	bf08      	it	eq
 8007d54:	2201      	moveq	r2, #1
 8007d56:	1e61      	subs	r1, r4, #1
 8007d58:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007d5c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007d60:	42a9      	cmp	r1, r5
 8007d62:	d1fb      	bne.n	8007d5c <__sccl+0x1c>
 8007d64:	b90b      	cbnz	r3, 8007d6a <__sccl+0x2a>
 8007d66:	3801      	subs	r0, #1
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
 8007d6a:	f082 0201 	eor.w	r2, r2, #1
 8007d6e:	54e2      	strb	r2, [r4, r3]
 8007d70:	4605      	mov	r5, r0
 8007d72:	4628      	mov	r0, r5
 8007d74:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007d78:	292d      	cmp	r1, #45	; 0x2d
 8007d7a:	d006      	beq.n	8007d8a <__sccl+0x4a>
 8007d7c:	295d      	cmp	r1, #93	; 0x5d
 8007d7e:	d0f3      	beq.n	8007d68 <__sccl+0x28>
 8007d80:	b909      	cbnz	r1, 8007d86 <__sccl+0x46>
 8007d82:	4628      	mov	r0, r5
 8007d84:	e7f0      	b.n	8007d68 <__sccl+0x28>
 8007d86:	460b      	mov	r3, r1
 8007d88:	e7f1      	b.n	8007d6e <__sccl+0x2e>
 8007d8a:	786e      	ldrb	r6, [r5, #1]
 8007d8c:	2e5d      	cmp	r6, #93	; 0x5d
 8007d8e:	d0fa      	beq.n	8007d86 <__sccl+0x46>
 8007d90:	42b3      	cmp	r3, r6
 8007d92:	dcf8      	bgt.n	8007d86 <__sccl+0x46>
 8007d94:	3502      	adds	r5, #2
 8007d96:	4619      	mov	r1, r3
 8007d98:	3101      	adds	r1, #1
 8007d9a:	428e      	cmp	r6, r1
 8007d9c:	5462      	strb	r2, [r4, r1]
 8007d9e:	dcfb      	bgt.n	8007d98 <__sccl+0x58>
 8007da0:	1af1      	subs	r1, r6, r3
 8007da2:	3901      	subs	r1, #1
 8007da4:	1c58      	adds	r0, r3, #1
 8007da6:	42b3      	cmp	r3, r6
 8007da8:	bfa8      	it	ge
 8007daa:	2100      	movge	r1, #0
 8007dac:	1843      	adds	r3, r0, r1
 8007dae:	e7e0      	b.n	8007d72 <__sccl+0x32>

08007db0 <_strtol_l.constprop.0>:
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db6:	d001      	beq.n	8007dbc <_strtol_l.constprop.0+0xc>
 8007db8:	2b24      	cmp	r3, #36	; 0x24
 8007dba:	d906      	bls.n	8007dca <_strtol_l.constprop.0+0x1a>
 8007dbc:	f7ff f916 	bl	8006fec <__errno>
 8007dc0:	2316      	movs	r3, #22
 8007dc2:	6003      	str	r3, [r0, #0]
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007eb0 <_strtol_l.constprop.0+0x100>
 8007dce:	460d      	mov	r5, r1
 8007dd0:	462e      	mov	r6, r5
 8007dd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007dda:	f017 0708 	ands.w	r7, r7, #8
 8007dde:	d1f7      	bne.n	8007dd0 <_strtol_l.constprop.0+0x20>
 8007de0:	2c2d      	cmp	r4, #45	; 0x2d
 8007de2:	d132      	bne.n	8007e4a <_strtol_l.constprop.0+0x9a>
 8007de4:	782c      	ldrb	r4, [r5, #0]
 8007de6:	2701      	movs	r7, #1
 8007de8:	1cb5      	adds	r5, r6, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d05b      	beq.n	8007ea6 <_strtol_l.constprop.0+0xf6>
 8007dee:	2b10      	cmp	r3, #16
 8007df0:	d109      	bne.n	8007e06 <_strtol_l.constprop.0+0x56>
 8007df2:	2c30      	cmp	r4, #48	; 0x30
 8007df4:	d107      	bne.n	8007e06 <_strtol_l.constprop.0+0x56>
 8007df6:	782c      	ldrb	r4, [r5, #0]
 8007df8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007dfc:	2c58      	cmp	r4, #88	; 0x58
 8007dfe:	d14d      	bne.n	8007e9c <_strtol_l.constprop.0+0xec>
 8007e00:	786c      	ldrb	r4, [r5, #1]
 8007e02:	2310      	movs	r3, #16
 8007e04:	3502      	adds	r5, #2
 8007e06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007e0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e0e:	f04f 0c00 	mov.w	ip, #0
 8007e12:	fbb8 f9f3 	udiv	r9, r8, r3
 8007e16:	4666      	mov	r6, ip
 8007e18:	fb03 8a19 	mls	sl, r3, r9, r8
 8007e1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007e20:	f1be 0f09 	cmp.w	lr, #9
 8007e24:	d816      	bhi.n	8007e54 <_strtol_l.constprop.0+0xa4>
 8007e26:	4674      	mov	r4, lr
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	dd24      	ble.n	8007e76 <_strtol_l.constprop.0+0xc6>
 8007e2c:	f1bc 0f00 	cmp.w	ip, #0
 8007e30:	db1e      	blt.n	8007e70 <_strtol_l.constprop.0+0xc0>
 8007e32:	45b1      	cmp	r9, r6
 8007e34:	d31c      	bcc.n	8007e70 <_strtol_l.constprop.0+0xc0>
 8007e36:	d101      	bne.n	8007e3c <_strtol_l.constprop.0+0x8c>
 8007e38:	45a2      	cmp	sl, r4
 8007e3a:	db19      	blt.n	8007e70 <_strtol_l.constprop.0+0xc0>
 8007e3c:	fb06 4603 	mla	r6, r6, r3, r4
 8007e40:	f04f 0c01 	mov.w	ip, #1
 8007e44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e48:	e7e8      	b.n	8007e1c <_strtol_l.constprop.0+0x6c>
 8007e4a:	2c2b      	cmp	r4, #43	; 0x2b
 8007e4c:	bf04      	itt	eq
 8007e4e:	782c      	ldrbeq	r4, [r5, #0]
 8007e50:	1cb5      	addeq	r5, r6, #2
 8007e52:	e7ca      	b.n	8007dea <_strtol_l.constprop.0+0x3a>
 8007e54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007e58:	f1be 0f19 	cmp.w	lr, #25
 8007e5c:	d801      	bhi.n	8007e62 <_strtol_l.constprop.0+0xb2>
 8007e5e:	3c37      	subs	r4, #55	; 0x37
 8007e60:	e7e2      	b.n	8007e28 <_strtol_l.constprop.0+0x78>
 8007e62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007e66:	f1be 0f19 	cmp.w	lr, #25
 8007e6a:	d804      	bhi.n	8007e76 <_strtol_l.constprop.0+0xc6>
 8007e6c:	3c57      	subs	r4, #87	; 0x57
 8007e6e:	e7db      	b.n	8007e28 <_strtol_l.constprop.0+0x78>
 8007e70:	f04f 3cff 	mov.w	ip, #4294967295
 8007e74:	e7e6      	b.n	8007e44 <_strtol_l.constprop.0+0x94>
 8007e76:	f1bc 0f00 	cmp.w	ip, #0
 8007e7a:	da05      	bge.n	8007e88 <_strtol_l.constprop.0+0xd8>
 8007e7c:	2322      	movs	r3, #34	; 0x22
 8007e7e:	6003      	str	r3, [r0, #0]
 8007e80:	4646      	mov	r6, r8
 8007e82:	b942      	cbnz	r2, 8007e96 <_strtol_l.constprop.0+0xe6>
 8007e84:	4630      	mov	r0, r6
 8007e86:	e79e      	b.n	8007dc6 <_strtol_l.constprop.0+0x16>
 8007e88:	b107      	cbz	r7, 8007e8c <_strtol_l.constprop.0+0xdc>
 8007e8a:	4276      	negs	r6, r6
 8007e8c:	2a00      	cmp	r2, #0
 8007e8e:	d0f9      	beq.n	8007e84 <_strtol_l.constprop.0+0xd4>
 8007e90:	f1bc 0f00 	cmp.w	ip, #0
 8007e94:	d000      	beq.n	8007e98 <_strtol_l.constprop.0+0xe8>
 8007e96:	1e69      	subs	r1, r5, #1
 8007e98:	6011      	str	r1, [r2, #0]
 8007e9a:	e7f3      	b.n	8007e84 <_strtol_l.constprop.0+0xd4>
 8007e9c:	2430      	movs	r4, #48	; 0x30
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1b1      	bne.n	8007e06 <_strtol_l.constprop.0+0x56>
 8007ea2:	2308      	movs	r3, #8
 8007ea4:	e7af      	b.n	8007e06 <_strtol_l.constprop.0+0x56>
 8007ea6:	2c30      	cmp	r4, #48	; 0x30
 8007ea8:	d0a5      	beq.n	8007df6 <_strtol_l.constprop.0+0x46>
 8007eaa:	230a      	movs	r3, #10
 8007eac:	e7ab      	b.n	8007e06 <_strtol_l.constprop.0+0x56>
 8007eae:	bf00      	nop
 8007eb0:	080086d1 	.word	0x080086d1

08007eb4 <_strtol_r>:
 8007eb4:	f7ff bf7c 	b.w	8007db0 <_strtol_l.constprop.0>

08007eb8 <_strtoul_l.constprop.0>:
 8007eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ebc:	4f36      	ldr	r7, [pc, #216]	; (8007f98 <_strtoul_l.constprop.0+0xe0>)
 8007ebe:	4686      	mov	lr, r0
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ec8:	5de6      	ldrb	r6, [r4, r7]
 8007eca:	f016 0608 	ands.w	r6, r6, #8
 8007ece:	d1f8      	bne.n	8007ec2 <_strtoul_l.constprop.0+0xa>
 8007ed0:	2c2d      	cmp	r4, #45	; 0x2d
 8007ed2:	d12f      	bne.n	8007f34 <_strtoul_l.constprop.0+0x7c>
 8007ed4:	782c      	ldrb	r4, [r5, #0]
 8007ed6:	2601      	movs	r6, #1
 8007ed8:	1c85      	adds	r5, r0, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d057      	beq.n	8007f8e <_strtoul_l.constprop.0+0xd6>
 8007ede:	2b10      	cmp	r3, #16
 8007ee0:	d109      	bne.n	8007ef6 <_strtoul_l.constprop.0+0x3e>
 8007ee2:	2c30      	cmp	r4, #48	; 0x30
 8007ee4:	d107      	bne.n	8007ef6 <_strtoul_l.constprop.0+0x3e>
 8007ee6:	7828      	ldrb	r0, [r5, #0]
 8007ee8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007eec:	2858      	cmp	r0, #88	; 0x58
 8007eee:	d149      	bne.n	8007f84 <_strtoul_l.constprop.0+0xcc>
 8007ef0:	786c      	ldrb	r4, [r5, #1]
 8007ef2:	2310      	movs	r3, #16
 8007ef4:	3502      	adds	r5, #2
 8007ef6:	f04f 38ff 	mov.w	r8, #4294967295
 8007efa:	2700      	movs	r7, #0
 8007efc:	fbb8 f8f3 	udiv	r8, r8, r3
 8007f00:	fb03 f908 	mul.w	r9, r3, r8
 8007f04:	ea6f 0909 	mvn.w	r9, r9
 8007f08:	4638      	mov	r0, r7
 8007f0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007f0e:	f1bc 0f09 	cmp.w	ip, #9
 8007f12:	d814      	bhi.n	8007f3e <_strtoul_l.constprop.0+0x86>
 8007f14:	4664      	mov	r4, ip
 8007f16:	42a3      	cmp	r3, r4
 8007f18:	dd22      	ble.n	8007f60 <_strtoul_l.constprop.0+0xa8>
 8007f1a:	2f00      	cmp	r7, #0
 8007f1c:	db1d      	blt.n	8007f5a <_strtoul_l.constprop.0+0xa2>
 8007f1e:	4580      	cmp	r8, r0
 8007f20:	d31b      	bcc.n	8007f5a <_strtoul_l.constprop.0+0xa2>
 8007f22:	d101      	bne.n	8007f28 <_strtoul_l.constprop.0+0x70>
 8007f24:	45a1      	cmp	r9, r4
 8007f26:	db18      	blt.n	8007f5a <_strtoul_l.constprop.0+0xa2>
 8007f28:	fb00 4003 	mla	r0, r0, r3, r4
 8007f2c:	2701      	movs	r7, #1
 8007f2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f32:	e7ea      	b.n	8007f0a <_strtoul_l.constprop.0+0x52>
 8007f34:	2c2b      	cmp	r4, #43	; 0x2b
 8007f36:	bf04      	itt	eq
 8007f38:	782c      	ldrbeq	r4, [r5, #0]
 8007f3a:	1c85      	addeq	r5, r0, #2
 8007f3c:	e7cd      	b.n	8007eda <_strtoul_l.constprop.0+0x22>
 8007f3e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007f42:	f1bc 0f19 	cmp.w	ip, #25
 8007f46:	d801      	bhi.n	8007f4c <_strtoul_l.constprop.0+0x94>
 8007f48:	3c37      	subs	r4, #55	; 0x37
 8007f4a:	e7e4      	b.n	8007f16 <_strtoul_l.constprop.0+0x5e>
 8007f4c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007f50:	f1bc 0f19 	cmp.w	ip, #25
 8007f54:	d804      	bhi.n	8007f60 <_strtoul_l.constprop.0+0xa8>
 8007f56:	3c57      	subs	r4, #87	; 0x57
 8007f58:	e7dd      	b.n	8007f16 <_strtoul_l.constprop.0+0x5e>
 8007f5a:	f04f 37ff 	mov.w	r7, #4294967295
 8007f5e:	e7e6      	b.n	8007f2e <_strtoul_l.constprop.0+0x76>
 8007f60:	2f00      	cmp	r7, #0
 8007f62:	da07      	bge.n	8007f74 <_strtoul_l.constprop.0+0xbc>
 8007f64:	2322      	movs	r3, #34	; 0x22
 8007f66:	f8ce 3000 	str.w	r3, [lr]
 8007f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6e:	b932      	cbnz	r2, 8007f7e <_strtoul_l.constprop.0+0xc6>
 8007f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f74:	b106      	cbz	r6, 8007f78 <_strtoul_l.constprop.0+0xc0>
 8007f76:	4240      	negs	r0, r0
 8007f78:	2a00      	cmp	r2, #0
 8007f7a:	d0f9      	beq.n	8007f70 <_strtoul_l.constprop.0+0xb8>
 8007f7c:	b107      	cbz	r7, 8007f80 <_strtoul_l.constprop.0+0xc8>
 8007f7e:	1e69      	subs	r1, r5, #1
 8007f80:	6011      	str	r1, [r2, #0]
 8007f82:	e7f5      	b.n	8007f70 <_strtoul_l.constprop.0+0xb8>
 8007f84:	2430      	movs	r4, #48	; 0x30
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1b5      	bne.n	8007ef6 <_strtoul_l.constprop.0+0x3e>
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	e7b3      	b.n	8007ef6 <_strtoul_l.constprop.0+0x3e>
 8007f8e:	2c30      	cmp	r4, #48	; 0x30
 8007f90:	d0a9      	beq.n	8007ee6 <_strtoul_l.constprop.0+0x2e>
 8007f92:	230a      	movs	r3, #10
 8007f94:	e7af      	b.n	8007ef6 <_strtoul_l.constprop.0+0x3e>
 8007f96:	bf00      	nop
 8007f98:	080086d1 	.word	0x080086d1

08007f9c <_strtoul_r>:
 8007f9c:	f7ff bf8c 	b.w	8007eb8 <_strtoul_l.constprop.0>

08007fa0 <__submore>:
 8007fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fac:	4299      	cmp	r1, r3
 8007fae:	d11d      	bne.n	8007fec <__submore+0x4c>
 8007fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007fb4:	f000 f8b6 	bl	8008124 <_malloc_r>
 8007fb8:	b918      	cbnz	r0, 8007fc2 <__submore+0x22>
 8007fba:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc6:	63a3      	str	r3, [r4, #56]	; 0x38
 8007fc8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8007fce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007fd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007fd6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007fda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007fde:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007fe2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007fe6:	6020      	str	r0, [r4, #0]
 8007fe8:	2000      	movs	r0, #0
 8007fea:	e7e8      	b.n	8007fbe <__submore+0x1e>
 8007fec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007fee:	0077      	lsls	r7, r6, #1
 8007ff0:	463a      	mov	r2, r7
 8007ff2:	f000 f90b 	bl	800820c <_realloc_r>
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d0de      	beq.n	8007fba <__submore+0x1a>
 8007ffc:	eb00 0806 	add.w	r8, r0, r6
 8008000:	4601      	mov	r1, r0
 8008002:	4632      	mov	r2, r6
 8008004:	4640      	mov	r0, r8
 8008006:	f7ff f823 	bl	8007050 <memcpy>
 800800a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800800e:	f8c4 8000 	str.w	r8, [r4]
 8008012:	e7e9      	b.n	8007fe8 <__submore+0x48>

08008014 <__retarget_lock_acquire_recursive>:
 8008014:	4770      	bx	lr

08008016 <__retarget_lock_release_recursive>:
 8008016:	4770      	bx	lr

08008018 <memmove>:
 8008018:	4288      	cmp	r0, r1
 800801a:	b510      	push	{r4, lr}
 800801c:	eb01 0402 	add.w	r4, r1, r2
 8008020:	d902      	bls.n	8008028 <memmove+0x10>
 8008022:	4284      	cmp	r4, r0
 8008024:	4623      	mov	r3, r4
 8008026:	d807      	bhi.n	8008038 <memmove+0x20>
 8008028:	1e43      	subs	r3, r0, #1
 800802a:	42a1      	cmp	r1, r4
 800802c:	d008      	beq.n	8008040 <memmove+0x28>
 800802e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008036:	e7f8      	b.n	800802a <memmove+0x12>
 8008038:	4402      	add	r2, r0
 800803a:	4601      	mov	r1, r0
 800803c:	428a      	cmp	r2, r1
 800803e:	d100      	bne.n	8008042 <memmove+0x2a>
 8008040:	bd10      	pop	{r4, pc}
 8008042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800804a:	e7f7      	b.n	800803c <memmove+0x24>

0800804c <_free_r>:
 800804c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800804e:	2900      	cmp	r1, #0
 8008050:	d044      	beq.n	80080dc <_free_r+0x90>
 8008052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008056:	9001      	str	r0, [sp, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	f1a1 0404 	sub.w	r4, r1, #4
 800805e:	bfb8      	it	lt
 8008060:	18e4      	addlt	r4, r4, r3
 8008062:	f000 f913 	bl	800828c <__malloc_lock>
 8008066:	4a1e      	ldr	r2, [pc, #120]	; (80080e0 <_free_r+0x94>)
 8008068:	9801      	ldr	r0, [sp, #4]
 800806a:	6813      	ldr	r3, [r2, #0]
 800806c:	b933      	cbnz	r3, 800807c <_free_r+0x30>
 800806e:	6063      	str	r3, [r4, #4]
 8008070:	6014      	str	r4, [r2, #0]
 8008072:	b003      	add	sp, #12
 8008074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008078:	f000 b90e 	b.w	8008298 <__malloc_unlock>
 800807c:	42a3      	cmp	r3, r4
 800807e:	d908      	bls.n	8008092 <_free_r+0x46>
 8008080:	6825      	ldr	r5, [r4, #0]
 8008082:	1961      	adds	r1, r4, r5
 8008084:	428b      	cmp	r3, r1
 8008086:	bf01      	itttt	eq
 8008088:	6819      	ldreq	r1, [r3, #0]
 800808a:	685b      	ldreq	r3, [r3, #4]
 800808c:	1949      	addeq	r1, r1, r5
 800808e:	6021      	streq	r1, [r4, #0]
 8008090:	e7ed      	b.n	800806e <_free_r+0x22>
 8008092:	461a      	mov	r2, r3
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	b10b      	cbz	r3, 800809c <_free_r+0x50>
 8008098:	42a3      	cmp	r3, r4
 800809a:	d9fa      	bls.n	8008092 <_free_r+0x46>
 800809c:	6811      	ldr	r1, [r2, #0]
 800809e:	1855      	adds	r5, r2, r1
 80080a0:	42a5      	cmp	r5, r4
 80080a2:	d10b      	bne.n	80080bc <_free_r+0x70>
 80080a4:	6824      	ldr	r4, [r4, #0]
 80080a6:	4421      	add	r1, r4
 80080a8:	1854      	adds	r4, r2, r1
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	6011      	str	r1, [r2, #0]
 80080ae:	d1e0      	bne.n	8008072 <_free_r+0x26>
 80080b0:	681c      	ldr	r4, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	6053      	str	r3, [r2, #4]
 80080b6:	4421      	add	r1, r4
 80080b8:	6011      	str	r1, [r2, #0]
 80080ba:	e7da      	b.n	8008072 <_free_r+0x26>
 80080bc:	d902      	bls.n	80080c4 <_free_r+0x78>
 80080be:	230c      	movs	r3, #12
 80080c0:	6003      	str	r3, [r0, #0]
 80080c2:	e7d6      	b.n	8008072 <_free_r+0x26>
 80080c4:	6825      	ldr	r5, [r4, #0]
 80080c6:	1961      	adds	r1, r4, r5
 80080c8:	428b      	cmp	r3, r1
 80080ca:	bf04      	itt	eq
 80080cc:	6819      	ldreq	r1, [r3, #0]
 80080ce:	685b      	ldreq	r3, [r3, #4]
 80080d0:	6063      	str	r3, [r4, #4]
 80080d2:	bf04      	itt	eq
 80080d4:	1949      	addeq	r1, r1, r5
 80080d6:	6021      	streq	r1, [r4, #0]
 80080d8:	6054      	str	r4, [r2, #4]
 80080da:	e7ca      	b.n	8008072 <_free_r+0x26>
 80080dc:	b003      	add	sp, #12
 80080de:	bd30      	pop	{r4, r5, pc}
 80080e0:	200064f0 	.word	0x200064f0

080080e4 <sbrk_aligned>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	4e0e      	ldr	r6, [pc, #56]	; (8008120 <sbrk_aligned+0x3c>)
 80080e8:	460c      	mov	r4, r1
 80080ea:	6831      	ldr	r1, [r6, #0]
 80080ec:	4605      	mov	r5, r0
 80080ee:	b911      	cbnz	r1, 80080f6 <sbrk_aligned+0x12>
 80080f0:	f000 f8bc 	bl	800826c <_sbrk_r>
 80080f4:	6030      	str	r0, [r6, #0]
 80080f6:	4621      	mov	r1, r4
 80080f8:	4628      	mov	r0, r5
 80080fa:	f000 f8b7 	bl	800826c <_sbrk_r>
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	d00a      	beq.n	8008118 <sbrk_aligned+0x34>
 8008102:	1cc4      	adds	r4, r0, #3
 8008104:	f024 0403 	bic.w	r4, r4, #3
 8008108:	42a0      	cmp	r0, r4
 800810a:	d007      	beq.n	800811c <sbrk_aligned+0x38>
 800810c:	1a21      	subs	r1, r4, r0
 800810e:	4628      	mov	r0, r5
 8008110:	f000 f8ac 	bl	800826c <_sbrk_r>
 8008114:	3001      	adds	r0, #1
 8008116:	d101      	bne.n	800811c <sbrk_aligned+0x38>
 8008118:	f04f 34ff 	mov.w	r4, #4294967295
 800811c:	4620      	mov	r0, r4
 800811e:	bd70      	pop	{r4, r5, r6, pc}
 8008120:	200064f4 	.word	0x200064f4

08008124 <_malloc_r>:
 8008124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008128:	1ccd      	adds	r5, r1, #3
 800812a:	f025 0503 	bic.w	r5, r5, #3
 800812e:	3508      	adds	r5, #8
 8008130:	2d0c      	cmp	r5, #12
 8008132:	bf38      	it	cc
 8008134:	250c      	movcc	r5, #12
 8008136:	2d00      	cmp	r5, #0
 8008138:	4607      	mov	r7, r0
 800813a:	db01      	blt.n	8008140 <_malloc_r+0x1c>
 800813c:	42a9      	cmp	r1, r5
 800813e:	d905      	bls.n	800814c <_malloc_r+0x28>
 8008140:	230c      	movs	r3, #12
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	2600      	movs	r6, #0
 8008146:	4630      	mov	r0, r6
 8008148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814c:	4e2e      	ldr	r6, [pc, #184]	; (8008208 <_malloc_r+0xe4>)
 800814e:	f000 f89d 	bl	800828c <__malloc_lock>
 8008152:	6833      	ldr	r3, [r6, #0]
 8008154:	461c      	mov	r4, r3
 8008156:	bb34      	cbnz	r4, 80081a6 <_malloc_r+0x82>
 8008158:	4629      	mov	r1, r5
 800815a:	4638      	mov	r0, r7
 800815c:	f7ff ffc2 	bl	80080e4 <sbrk_aligned>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	4604      	mov	r4, r0
 8008164:	d14d      	bne.n	8008202 <_malloc_r+0xde>
 8008166:	6834      	ldr	r4, [r6, #0]
 8008168:	4626      	mov	r6, r4
 800816a:	2e00      	cmp	r6, #0
 800816c:	d140      	bne.n	80081f0 <_malloc_r+0xcc>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	4631      	mov	r1, r6
 8008172:	4638      	mov	r0, r7
 8008174:	eb04 0803 	add.w	r8, r4, r3
 8008178:	f000 f878 	bl	800826c <_sbrk_r>
 800817c:	4580      	cmp	r8, r0
 800817e:	d13a      	bne.n	80081f6 <_malloc_r+0xd2>
 8008180:	6821      	ldr	r1, [r4, #0]
 8008182:	3503      	adds	r5, #3
 8008184:	1a6d      	subs	r5, r5, r1
 8008186:	f025 0503 	bic.w	r5, r5, #3
 800818a:	3508      	adds	r5, #8
 800818c:	2d0c      	cmp	r5, #12
 800818e:	bf38      	it	cc
 8008190:	250c      	movcc	r5, #12
 8008192:	4629      	mov	r1, r5
 8008194:	4638      	mov	r0, r7
 8008196:	f7ff ffa5 	bl	80080e4 <sbrk_aligned>
 800819a:	3001      	adds	r0, #1
 800819c:	d02b      	beq.n	80081f6 <_malloc_r+0xd2>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	442b      	add	r3, r5
 80081a2:	6023      	str	r3, [r4, #0]
 80081a4:	e00e      	b.n	80081c4 <_malloc_r+0xa0>
 80081a6:	6822      	ldr	r2, [r4, #0]
 80081a8:	1b52      	subs	r2, r2, r5
 80081aa:	d41e      	bmi.n	80081ea <_malloc_r+0xc6>
 80081ac:	2a0b      	cmp	r2, #11
 80081ae:	d916      	bls.n	80081de <_malloc_r+0xba>
 80081b0:	1961      	adds	r1, r4, r5
 80081b2:	42a3      	cmp	r3, r4
 80081b4:	6025      	str	r5, [r4, #0]
 80081b6:	bf18      	it	ne
 80081b8:	6059      	strne	r1, [r3, #4]
 80081ba:	6863      	ldr	r3, [r4, #4]
 80081bc:	bf08      	it	eq
 80081be:	6031      	streq	r1, [r6, #0]
 80081c0:	5162      	str	r2, [r4, r5]
 80081c2:	604b      	str	r3, [r1, #4]
 80081c4:	4638      	mov	r0, r7
 80081c6:	f104 060b 	add.w	r6, r4, #11
 80081ca:	f000 f865 	bl	8008298 <__malloc_unlock>
 80081ce:	f026 0607 	bic.w	r6, r6, #7
 80081d2:	1d23      	adds	r3, r4, #4
 80081d4:	1af2      	subs	r2, r6, r3
 80081d6:	d0b6      	beq.n	8008146 <_malloc_r+0x22>
 80081d8:	1b9b      	subs	r3, r3, r6
 80081da:	50a3      	str	r3, [r4, r2]
 80081dc:	e7b3      	b.n	8008146 <_malloc_r+0x22>
 80081de:	6862      	ldr	r2, [r4, #4]
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	bf0c      	ite	eq
 80081e4:	6032      	streq	r2, [r6, #0]
 80081e6:	605a      	strne	r2, [r3, #4]
 80081e8:	e7ec      	b.n	80081c4 <_malloc_r+0xa0>
 80081ea:	4623      	mov	r3, r4
 80081ec:	6864      	ldr	r4, [r4, #4]
 80081ee:	e7b2      	b.n	8008156 <_malloc_r+0x32>
 80081f0:	4634      	mov	r4, r6
 80081f2:	6876      	ldr	r6, [r6, #4]
 80081f4:	e7b9      	b.n	800816a <_malloc_r+0x46>
 80081f6:	230c      	movs	r3, #12
 80081f8:	603b      	str	r3, [r7, #0]
 80081fa:	4638      	mov	r0, r7
 80081fc:	f000 f84c 	bl	8008298 <__malloc_unlock>
 8008200:	e7a1      	b.n	8008146 <_malloc_r+0x22>
 8008202:	6025      	str	r5, [r4, #0]
 8008204:	e7de      	b.n	80081c4 <_malloc_r+0xa0>
 8008206:	bf00      	nop
 8008208:	200064f0 	.word	0x200064f0

0800820c <_realloc_r>:
 800820c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008210:	4680      	mov	r8, r0
 8008212:	4614      	mov	r4, r2
 8008214:	460e      	mov	r6, r1
 8008216:	b921      	cbnz	r1, 8008222 <_realloc_r+0x16>
 8008218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800821c:	4611      	mov	r1, r2
 800821e:	f7ff bf81 	b.w	8008124 <_malloc_r>
 8008222:	b92a      	cbnz	r2, 8008230 <_realloc_r+0x24>
 8008224:	f7ff ff12 	bl	800804c <_free_r>
 8008228:	4625      	mov	r5, r4
 800822a:	4628      	mov	r0, r5
 800822c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008230:	f000 f838 	bl	80082a4 <_malloc_usable_size_r>
 8008234:	4284      	cmp	r4, r0
 8008236:	4607      	mov	r7, r0
 8008238:	d802      	bhi.n	8008240 <_realloc_r+0x34>
 800823a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800823e:	d812      	bhi.n	8008266 <_realloc_r+0x5a>
 8008240:	4621      	mov	r1, r4
 8008242:	4640      	mov	r0, r8
 8008244:	f7ff ff6e 	bl	8008124 <_malloc_r>
 8008248:	4605      	mov	r5, r0
 800824a:	2800      	cmp	r0, #0
 800824c:	d0ed      	beq.n	800822a <_realloc_r+0x1e>
 800824e:	42bc      	cmp	r4, r7
 8008250:	4622      	mov	r2, r4
 8008252:	4631      	mov	r1, r6
 8008254:	bf28      	it	cs
 8008256:	463a      	movcs	r2, r7
 8008258:	f7fe fefa 	bl	8007050 <memcpy>
 800825c:	4631      	mov	r1, r6
 800825e:	4640      	mov	r0, r8
 8008260:	f7ff fef4 	bl	800804c <_free_r>
 8008264:	e7e1      	b.n	800822a <_realloc_r+0x1e>
 8008266:	4635      	mov	r5, r6
 8008268:	e7df      	b.n	800822a <_realloc_r+0x1e>
	...

0800826c <_sbrk_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d06      	ldr	r5, [pc, #24]	; (8008288 <_sbrk_r+0x1c>)
 8008270:	2300      	movs	r3, #0
 8008272:	4604      	mov	r4, r0
 8008274:	4608      	mov	r0, r1
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	f7f9 fb5e 	bl	8001938 <_sbrk>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_sbrk_r+0x1a>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_sbrk_r+0x1a>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	200064e8 	.word	0x200064e8

0800828c <__malloc_lock>:
 800828c:	4801      	ldr	r0, [pc, #4]	; (8008294 <__malloc_lock+0x8>)
 800828e:	f7ff bec1 	b.w	8008014 <__retarget_lock_acquire_recursive>
 8008292:	bf00      	nop
 8008294:	200064ec 	.word	0x200064ec

08008298 <__malloc_unlock>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__malloc_unlock+0x8>)
 800829a:	f7ff bebc 	b.w	8008016 <__retarget_lock_release_recursive>
 800829e:	bf00      	nop
 80082a0:	200064ec 	.word	0x200064ec

080082a4 <_malloc_usable_size_r>:
 80082a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a8:	1f18      	subs	r0, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bfbc      	itt	lt
 80082ae:	580b      	ldrlt	r3, [r1, r0]
 80082b0:	18c0      	addlt	r0, r0, r3
 80082b2:	4770      	bx	lr

080082b4 <_init>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	bf00      	nop
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr

080082c0 <_fini>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	bf00      	nop
 80082c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c6:	bc08      	pop	{r3}
 80082c8:	469e      	mov	lr, r3
 80082ca:	4770      	bx	lr
