/*
 * usr_system.h
 *
 *  Created on: Jul 21, 2023
 *      Author: nosak
 */

#ifndef INC_USR_SYSTEM_H_
#define INC_USR_SYSTEM_H_


/* Public includes -----------------------------------------------------------*/

#define TIMER_AV_NUM	3

/* Public typedef ------------------------------------------------------------*/
typedef struct{
	uint32_t	dt;
	uint32_t	dt_buf[TIMER_AV_NUM];
	uint32_t	dt_max;
	uint32_t	dt_av;
	uint8_t		av_wcnt;
	uint8_t		start;

	uint16_t	usec;
	uint16_t	msec;
	uint16_t	usec_max;
	uint16_t	msec_max;
} TIMER_TIC;


/* Public typedef ------------------------------------------------------------*/
typedef struct{
	uint8_t		*pxTopOfStack;
	uint8_t		*pxStack;
	uint16_t	size;
} STACK_INFO;



/* Public typedef ------------------------------------------------------------*/
typedef enum {
	RET_FALSE = 0,
	RET_TRUE

}RETURN_STATUS;



/* Public define -------------------------------------------------------------*/
#define PRiNTF_BUFFMAX 50


typedef enum{
	LF_NON_STOP = 0,
	LF_IMMMEDIATE_STOP,
	LF_MAX_DATA_STOP,

	LF_MAX
} LOG_FLAG;

typedef enum{
	SK_TASK_main = 0,
	SK_TASK_sub1,
	SK_TASK_sub2,

	SK_TASK_MAX
} SK_TASK;

typedef enum{
	SK_UART1_RS485 = 0,
	SK_UART2_DEBUG,

	SK_UART_MAX
} SK_UART;

/* Public define -------------------------------------------------------------*/
typedef enum {
	RS485_AD_MASTER = 0,
	RS485_AD_SLEVE01,
	RS485_AD_SLEVE02,


	RS485_AD_MAX
}RA485_ADDRESS;

#define MY_RS485_ADDRESS RS485_AD_MASTER


typedef enum {
	RS485_CMD_STATUS = 1,
	RS485_CMD_VERSION,
	RS485_CMD_MESUR,
	RS485_CMD_MESUR_DATA,

	RS485_CMD_MAX
}RA485_COMMAND;


typedef enum{
	RT_EVENT_COMMAND_REQ = 0,
	RT_EVENT_STOP_REQ,
	RT_EVENT_UART_RX,

	RT_EVENT_MAX
} RS485_TASK_EVENT;
typedef enum{
	RT_STATE_INIT = 0,
	RT_STATE_READY,
	RT_STATE_COMAND_SEND,
	RT_STATE_RESPONS_WAIT,

	RT_STATE_MAX
} RS485_TASK_STATE;

typedef struct{
	RS485_TASK_EVENT	event;
	RS485_TASK_STATE	state;

	RA485_COMMAND		command;
	RA485_ADDRESS		address;
	uint8_t				sub1;
} CMD_MSG;


typedef union{
	CMD_MSG				cmd_msg;
}MESSAGE_CMD_DETAIL;

typedef struct{
	void				*maroc_ptr;
	SK_TASK				send_task;

	MESSAGE_CMD_DETAIL	u;
}MESSAGE_QUE_DATA;

/* Private variables ---------------------------------------------------------*/
#define  	RCV_BUF_SIZE 	128

typedef struct{
	uint8_t		rcv_dt[2];
	uint8_t		rcvbuf[RCV_BUF_SIZE];
	uint8_t		rcvnum;
	uint8_t		rcv_wpt;
	uint8_t		rcv_rpt;
} UART_BUF;

/* Public macro --------------------------------------------------------------*/

/* Public variables ----------------------------------------------------------*/
extern TIMER_TIC timer;


/* Public function prototypes ------------------------------------------------*/

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc);
void usr_isr_tim1_up(void);
void LogInfo_clear(void);
void Set_logInfo2(const char *string, ...);
void LogInfo_display(void);
void debu_main(void);

int getch(SK_UART id);

void rtc_display(void);
void Set_logflg(LOG_FLAG flg);
void Set_logInfo(char *string);

void Get_task_stackptr(SK_TASK taskid, STACK_INFO *ptr);

int	SKprintf (const char *string, ...);
void task_chk_init(void);
void task_stack_chk(void);

int	putch_uart1 (const char *string);

void uart1_Rcv_init(void);

uint8_t	Get_rs485_rcvflg(void);
void Set_rs485_rcvflg(uint8_t dt);

RETURN_STATUS Recive_rs485(uint8_t *pData, uint16_t Size);
RETURN_STATUS Send_rs485(uint8_t *pData, uint16_t Size);


#endif /* INC_USR_SYSTEM_H_ */
