
TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018068  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028c0  08018208  08018208  00028208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aac8  0801aac8  000304f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801aac8  0801aac8  0002aac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aad0  0801aad0  000304f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aad0  0801aad0  0002aad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aad4  0801aad4  0002aad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  0801aad8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006868  200004f0  0801afc8  000304f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006d58  0801afc8  00036d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f595  00000000  00000000  00030520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005eaf  00000000  00000000  0005fab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002330  00000000  00000000  00065968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002128  00000000  00000000  00067c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d7f8  00000000  00000000  00069dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029f80  00000000  00000000  000875b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa4c6  00000000  00000000  000b1538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b9fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9d4  00000000  00000000  0015ba50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004f0 	.word	0x200004f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080181f0 	.word	0x080181f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004f4 	.word	0x200004f4
 80001dc:	080181f0 	.word	0x080181f0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <debu_main>:

//=============================================================================
//
//=============================================================================
void debu_main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	//char ch;
	//SKprintf("debu_main:001\r\n");
	if(read_line_streem() == INPUT_DATA_FIX){
 8000ee0:	f000 fecc 	bl	8001c7c <read_line_streem>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d133      	bne.n	8000f52 <debu_main+0x76>

		input_char_step = INPUT_INIT;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <debu_main+0x7c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]

		//SKprintf("debu_main:001\r\n");

		switch(dev_menue_type){
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <debu_main+0x80>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b06      	cmp	r3, #6
 8000ef6:	d826      	bhi.n	8000f46 <debu_main+0x6a>
 8000ef8:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <debu_main+0x24>)
 8000efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efe:	bf00      	nop
 8000f00:	08000f1d 	.word	0x08000f1d
 8000f04:	08000f23 	.word	0x08000f23
 8000f08:	08000f29 	.word	0x08000f29
 8000f0c:	08000f2f 	.word	0x08000f2f
 8000f10:	08000f35 	.word	0x08000f35
 8000f14:	08000f3b 	.word	0x08000f3b
 8000f18:	08000f41 	.word	0x08000f41
		case DEB_PROMPT_MODE:
			DBmanue_prompt();
 8000f1c:	f000 f854 	bl	8000fc8 <DBmanue_prompt>
			break;
 8000f20:	e012      	b.n	8000f48 <debu_main+0x6c>
		case DEB_LOG_MENUE:
			DBmanue_log();
 8000f22:	f000 faa7 	bl	8001474 <DBmanue_log>
			break;
 8000f26:	e00f      	b.n	8000f48 <debu_main+0x6c>
		case DEB_RS485_MENUE:
			DBmanue_rs485();
 8000f28:	f000 fb16 	bl	8001558 <DBmanue_rs485>
			break;
 8000f2c:	e00c      	b.n	8000f48 <debu_main+0x6c>
		case DEB_MEM_MENUE:
			DBmanue_memdump();
 8000f2e:	f000 fb75 	bl	800161c <DBmanue_memdump>
			break;
 8000f32:	e009      	b.n	8000f48 <debu_main+0x6c>
		case DEB_MEM_INPUT_MENUE:
			DBmanue_mem_input();
 8000f34:	f000 fc6a 	bl	800180c <DBmanue_mem_input>
			break;
 8000f38:	e006      	b.n	8000f48 <debu_main+0x6c>
		case DEB_RS485_SCAN_MENUE:
			DBmanue_rs485_scan();
 8000f3a:	f000 f957 	bl	80011ec <DBmanue_rs485_scan>
			break;
 8000f3e:	e003      	b.n	8000f48 <debu_main+0x6c>
		case DEB_VL53_MENUE:
			DBmanue_vl53();
 8000f40:	f000 f89c 	bl	800107c <DBmanue_vl53>
			break;
 8000f44:	e000      	b.n	8000f48 <debu_main+0x6c>
		default:
			break;
 8000f46:	bf00      	nop
		}

		//SKprintf("debu_main:002\r\n");
        // メニュを表示する
        DispMenue(dev_menue_type);
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <debu_main+0x80>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f807 	bl	8000f60 <DispMenue>
        //SKprintf("debu_main:003\r\n");

	}
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000514 	.word	0x20000514
 8000f5c:	20000598 	.word	0x20000598

08000f60 <DispMenue>:
//==============================================================================
//
//==============================================================================
void DispMenue(uint8_t type)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    if( type==DEB_PROMPT_MODE ){
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d103      	bne.n	8000f78 <DispMenue+0x18>
        SKprintf("ST> ");
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <DispMenue+0x5c>)
 8000f72:	f003 f95f 	bl	8004234 <SKprintf>
    else{
        for( i=0; i<MenueList[type-1].clumn; i++){
            SKprintf("%s", &MenueList[type-1].pt[i].name[0]);
        }
    }
}
 8000f76:	e01d      	b.n	8000fb4 <DispMenue+0x54>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e011      	b.n	8000fa2 <DispMenue+0x42>
            SKprintf("%s", &MenueList[type-1].pt[i].name[0]);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <DispMenue+0x60>)
 8000f84:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	440b      	add	r3, r1
 8000f94:	4619      	mov	r1, r3
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <DispMenue+0x64>)
 8000f98:	f003 f94c 	bl	8004234 <SKprintf>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <DispMenue+0x60>)
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4413      	add	r3, r2
 8000fac:	791b      	ldrb	r3, [r3, #4]
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3e4      	bcc.n	8000f7e <DispMenue+0x1e>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08018208 	.word	0x08018208
 8000fc0:	0801a588 	.word	0x0801a588
 8000fc4:	08018210 	.word	0x08018210

08000fc8 <DBmanue_prompt>:
//=============================================================================
extern osMessageQueueId_t myQueue01Handle;


void DBmanue_prompt(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	uint8_t		i;

//	size_t 	lsize2;
//	size_t 	lsize1;

	switch( input2menu() ){
 8000fce:	f000 fd51 	bl	8001a74 <input2menu>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b05      	cmp	r3, #5
 8000fd6:	d826      	bhi.n	8001026 <DBmanue_prompt+0x5e>
 8000fd8:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <DBmanue_prompt+0x18>)
 8000fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fde:	bf00      	nop
 8000fe0:	08000ff9 	.word	0x08000ff9
 8000fe4:	08000fff 	.word	0x08000fff
 8000fe8:	08001007 	.word	0x08001007
 8000fec:	0800100f 	.word	0x0800100f
 8000ff0:	08001017 	.word	0x08001017
 8000ff4:	0800101f 	.word	0x0800101f
    case CMD_RTC:
    	rtc_display();
 8000ff8:	f001 ff36 	bl	8002e68 <rtc_display>
        break;
 8000ffc:	e030      	b.n	8001060 <DBmanue_prompt+0x98>
    case CMD_LOG:
        dev_menue_type = DEB_LOG_MENUE;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <DBmanue_prompt+0xa0>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
        break;
 8001004:	e02c      	b.n	8001060 <DBmanue_prompt+0x98>
    case CMD_RS485:
        dev_menue_type = DEB_RS485_MENUE;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <DBmanue_prompt+0xa0>)
 8001008:	2202      	movs	r2, #2
 800100a:	701a      	strb	r2, [r3, #0]
        break;
 800100c:	e028      	b.n	8001060 <DBmanue_prompt+0x98>
    case CMD_MEM_DUMP:
        dev_menue_type = DEB_MEM_MENUE;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <DBmanue_prompt+0xa0>)
 8001010:	2203      	movs	r2, #3
 8001012:	701a      	strb	r2, [r3, #0]
    	break;
 8001014:	e024      	b.n	8001060 <DBmanue_prompt+0x98>
    case CMD_MSG_QUE:
    	dev_menue_type = DEB_RS485_SCAN_MENUE;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <DBmanue_prompt+0xa0>)
 8001018:	2205      	movs	r2, #5
 800101a:	701a      	strb	r2, [r3, #0]
    	break;
 800101c:	e020      	b.n	8001060 <DBmanue_prompt+0x98>
    case CMD_VL53:
    	dev_menue_type = DEB_VL53_MENUE;
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <DBmanue_prompt+0xa0>)
 8001020:	2206      	movs	r2, #6
 8001022:	701a      	strb	r2, [r3, #0]
    	break;
 8001024:	e01c      	b.n	8001060 <DBmanue_prompt+0x98>

    default:
    	SKprintf("Command not found.\r\n");
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <DBmanue_prompt+0xa4>)
 8001028:	f003 f904 	bl	8004234 <SKprintf>
    	SKprintf("Support Comand ...\r\n");
 800102c:	4810      	ldr	r0, [pc, #64]	; (8001070 <DBmanue_prompt+0xa8>)
 800102e:	f003 f901 	bl	8004234 <SKprintf>
    	for( i=0; i<CMD_MAX ; i++ ){
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	e00f      	b.n	8001058 <DBmanue_prompt+0x90>
        	SKprintf(" %s\r\n",&com_list[i].command[0]);
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <DBmanue_prompt+0xac>)
 8001046:	4413      	add	r3, r2
 8001048:	3301      	adds	r3, #1
 800104a:	4619      	mov	r1, r3
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <DBmanue_prompt+0xb0>)
 800104e:	f003 f8f1 	bl	8004234 <SKprintf>
    	for( i=0; i<CMD_MAX ; i++ ){
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	3301      	adds	r3, #1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b05      	cmp	r3, #5
 800105c:	d9ec      	bls.n	8001038 <DBmanue_prompt+0x70>
    	}

        break;
 800105e:	bf00      	nop
    }
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000598 	.word	0x20000598
 800106c:	08018214 	.word	0x08018214
 8001070:	0801822c 	.word	0x0801822c
 8001074:	0801a0a0 	.word	0x0801a0a0
 8001078:	08018244 	.word	0x08018244

0800107c <DBmanue_vl53>:

//=============================================================================
//
//=============================================================================
void DBmanue_vl53(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 8001080:	4b58      	ldr	r3, [pc, #352]	; (80011e4 <DBmanue_vl53+0x168>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	3b31      	subs	r3, #49	; 0x31
 8001086:	2b41      	cmp	r3, #65	; 0x41
 8001088:	f200 80a8 	bhi.w	80011dc <DBmanue_vl53+0x160>
 800108c:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <DBmanue_vl53+0x18>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080011dd 	.word	0x080011dd
 8001098:	0800119d 	.word	0x0800119d
 800109c:	080011a5 	.word	0x080011a5
 80010a0:	080011ad 	.word	0x080011ad
 80010a4:	080011b5 	.word	0x080011b5
 80010a8:	080011bd 	.word	0x080011bd
 80010ac:	080011c5 	.word	0x080011c5
 80010b0:	080011cb 	.word	0x080011cb
 80010b4:	080011d1 	.word	0x080011d1
 80010b8:	080011dd 	.word	0x080011dd
 80010bc:	080011dd 	.word	0x080011dd
 80010c0:	080011dd 	.word	0x080011dd
 80010c4:	080011dd 	.word	0x080011dd
 80010c8:	080011dd 	.word	0x080011dd
 80010cc:	080011dd 	.word	0x080011dd
 80010d0:	080011dd 	.word	0x080011dd
 80010d4:	080011dd 	.word	0x080011dd
 80010d8:	080011dd 	.word	0x080011dd
 80010dc:	080011dd 	.word	0x080011dd
 80010e0:	080011dd 	.word	0x080011dd
 80010e4:	080011dd 	.word	0x080011dd
 80010e8:	080011dd 	.word	0x080011dd
 80010ec:	080011dd 	.word	0x080011dd
 80010f0:	080011dd 	.word	0x080011dd
 80010f4:	080011dd 	.word	0x080011dd
 80010f8:	080011dd 	.word	0x080011dd
 80010fc:	080011dd 	.word	0x080011dd
 8001100:	080011dd 	.word	0x080011dd
 8001104:	080011dd 	.word	0x080011dd
 8001108:	080011dd 	.word	0x080011dd
 800110c:	080011dd 	.word	0x080011dd
 8001110:	080011dd 	.word	0x080011dd
 8001114:	080011dd 	.word	0x080011dd
 8001118:	080011d7 	.word	0x080011d7
 800111c:	080011dd 	.word	0x080011dd
 8001120:	080011dd 	.word	0x080011dd
 8001124:	080011dd 	.word	0x080011dd
 8001128:	080011dd 	.word	0x080011dd
 800112c:	080011dd 	.word	0x080011dd
 8001130:	080011dd 	.word	0x080011dd
 8001134:	080011dd 	.word	0x080011dd
 8001138:	080011dd 	.word	0x080011dd
 800113c:	080011dd 	.word	0x080011dd
 8001140:	080011dd 	.word	0x080011dd
 8001144:	080011dd 	.word	0x080011dd
 8001148:	080011dd 	.word	0x080011dd
 800114c:	080011dd 	.word	0x080011dd
 8001150:	080011dd 	.word	0x080011dd
 8001154:	080011dd 	.word	0x080011dd
 8001158:	080011dd 	.word	0x080011dd
 800115c:	080011dd 	.word	0x080011dd
 8001160:	080011dd 	.word	0x080011dd
 8001164:	080011dd 	.word	0x080011dd
 8001168:	080011dd 	.word	0x080011dd
 800116c:	080011dd 	.word	0x080011dd
 8001170:	080011dd 	.word	0x080011dd
 8001174:	080011dd 	.word	0x080011dd
 8001178:	080011dd 	.word	0x080011dd
 800117c:	080011dd 	.word	0x080011dd
 8001180:	080011dd 	.word	0x080011dd
 8001184:	080011dd 	.word	0x080011dd
 8001188:	080011dd 	.word	0x080011dd
 800118c:	080011dd 	.word	0x080011dd
 8001190:	080011dd 	.word	0x080011dd
 8001194:	080011dd 	.word	0x080011dd
 8001198:	080011d7 	.word	0x080011d7
	case '1':
        // VL53_init();
        break;
    case '2':
        //vl53l0x_test();
        vl53l0x_Racing_test( RASING_MODE_CONTINUE );
 800119c:	2004      	movs	r0, #4
 800119e:	f003 fd85 	bl	8004cac <vl53l0x_Racing_test>
        break;
 80011a2:	e01c      	b.n	80011de <DBmanue_vl53+0x162>
    case '3':
        //vl53l0x_Single_test();
        vl53l0x_Racing_test( RASING_MODE_SINGLE );
 80011a4:	2000      	movs	r0, #0
 80011a6:	f003 fd81 	bl	8004cac <vl53l0x_Racing_test>
        break;
 80011aa:	e018      	b.n	80011de <DBmanue_vl53+0x162>
    case '4':
        //vl53l0x_SingleHA_test();
        vl53l0x_Racing_test( RASING_MODE_SINGLE_HA );
 80011ac:	2001      	movs	r0, #1
 80011ae:	f003 fd7d 	bl	8004cac <vl53l0x_Racing_test>
        break;
 80011b2:	e014      	b.n	80011de <DBmanue_vl53+0x162>
    case '5':
        //vl53l0x_SingleHS_test();
        vl53l0x_Racing_test( RASING_MODE_SINGLE_HS );
 80011b4:	2002      	movs	r0, #2
 80011b6:	f003 fd79 	bl	8004cac <vl53l0x_Racing_test>
        break;
 80011ba:	e010      	b.n	80011de <DBmanue_vl53+0x162>
    case '6':
        //vl53l0x_SingleLR_test();
        vl53l0x_Racing_test( RASING_MODE_SINGLE_LR );
 80011bc:	2003      	movs	r0, #3
 80011be:	f003 fd75 	bl	8004cac <vl53l0x_Racing_test>
        break;
 80011c2:	e00c      	b.n	80011de <DBmanue_vl53+0x162>
    case '7':
        vl53data_disp();
 80011c4:	f003 fe6a 	bl	8004e9c <vl53data_disp>
		break;
 80011c8:	e009      	b.n	80011de <DBmanue_vl53+0x162>
	case '8':
		vl53_init();
 80011ca:	f003 f88f 	bl	80042ec <vl53_init>
		break;
 80011ce:	e006      	b.n	80011de <DBmanue_vl53+0x162>
	case '9':
		vl53_mesure_new_proc();
 80011d0:	f003 f9e8 	bl	80045a4 <vl53_mesure_new_proc>

		break;
 80011d4:	e003      	b.n	80011de <DBmanue_vl53+0x162>
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <DBmanue_vl53+0x16c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	default:
		break;
 80011dc:	bf00      	nop
	}
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000518 	.word	0x20000518
 80011e8:	20000598 	.word	0x20000598

080011ec <DBmanue_rs485_scan>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485_scan(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
	osStatus_t 			osStatus;
	MESSAGE_QUE_DATA	*msg;
	CMD_MSG				rt_task;

	switch( input_string.main[0] ){
 80011f2:	4b90      	ldr	r3, [pc, #576]	; (8001434 <DBmanue_rs485_scan+0x248>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b52      	cmp	r3, #82	; 0x52
 80011f8:	dc4e      	bgt.n	8001298 <DBmanue_rs485_scan+0xac>
 80011fa:	2b31      	cmp	r3, #49	; 0x31
 80011fc:	f2c0 8115 	blt.w	800142a <DBmanue_rs485_scan+0x23e>
 8001200:	3b31      	subs	r3, #49	; 0x31
 8001202:	2b21      	cmp	r3, #33	; 0x21
 8001204:	f200 8111 	bhi.w	800142a <DBmanue_rs485_scan+0x23e>
 8001208:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <DBmanue_rs485_scan+0x24>)
 800120a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120e:	bf00      	nop
 8001210:	080012a1 	.word	0x080012a1
 8001214:	080012db 	.word	0x080012db
 8001218:	080012fb 	.word	0x080012fb
 800121c:	08001309 	.word	0x08001309
 8001220:	0800141f 	.word	0x0800141f
 8001224:	0800142b 	.word	0x0800142b
 8001228:	0800142b 	.word	0x0800142b
 800122c:	0800142b 	.word	0x0800142b
 8001230:	0800142b 	.word	0x0800142b
 8001234:	0800142b 	.word	0x0800142b
 8001238:	0800142b 	.word	0x0800142b
 800123c:	0800142b 	.word	0x0800142b
 8001240:	0800142b 	.word	0x0800142b
 8001244:	0800142b 	.word	0x0800142b
 8001248:	0800142b 	.word	0x0800142b
 800124c:	0800142b 	.word	0x0800142b
 8001250:	0800142b 	.word	0x0800142b
 8001254:	0800142b 	.word	0x0800142b
 8001258:	0800142b 	.word	0x0800142b
 800125c:	0800142b 	.word	0x0800142b
 8001260:	0800142b 	.word	0x0800142b
 8001264:	0800142b 	.word	0x0800142b
 8001268:	0800142b 	.word	0x0800142b
 800126c:	0800142b 	.word	0x0800142b
 8001270:	0800142b 	.word	0x0800142b
 8001274:	0800142b 	.word	0x0800142b
 8001278:	0800142b 	.word	0x0800142b
 800127c:	0800142b 	.word	0x0800142b
 8001280:	0800142b 	.word	0x0800142b
 8001284:	0800142b 	.word	0x0800142b
 8001288:	0800142b 	.word	0x0800142b
 800128c:	0800142b 	.word	0x0800142b
 8001290:	0800142b 	.word	0x0800142b
 8001294:	08001425 	.word	0x08001425
 8001298:	2b72      	cmp	r3, #114	; 0x72
 800129a:	f000 80c3 	beq.w	8001424 <DBmanue_rs485_scan+0x238>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 800129e:	e0c4      	b.n	800142a <DBmanue_rs485_scan+0x23e>
		Set_logInfo2("HeapSize 001 = 0x%x",xPortGetFreeHeapSize());
 80012a0:	f013 faf8 	bl	8014894 <xPortGetFreeHeapSize>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4863      	ldr	r0, [pc, #396]	; (8001438 <DBmanue_rs485_scan+0x24c>)
 80012aa:	f001 f88d 	bl	80023c8 <Set_logInfo2>
		rt_task.address		= RS485_AD_SLEVE01;
 80012ae:	2301      	movs	r3, #1
 80012b0:	72bb      	strb	r3, [r7, #10]
		rt_task.command		= RS485_CMD_MESUR_DATA;
 80012b2:	2304      	movs	r3, #4
 80012b4:	71bb      	strb	r3, [r7, #6]
		rt_task.command_sub	= 1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	813b      	strh	r3, [r7, #8]
		rt_task.event 		= RT_EVENT_START_REQ;
 80012ba:	2300      	movs	r3, #0
 80012bc:	713b      	strb	r3, [r7, #4]
		rt_task.sub1 		= 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	72fb      	strb	r3, [r7, #11]
		SendMsgQue( &rt_task );
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 f8ef 	bl	80034a8 <SendMsgQue>
		Set_logInfo2("HeapSize 001 = 0x%x",xPortGetFreeHeapSize());
 80012ca:	f013 fae3 	bl	8014894 <xPortGetFreeHeapSize>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4859      	ldr	r0, [pc, #356]	; (8001438 <DBmanue_rs485_scan+0x24c>)
 80012d4:	f001 f878 	bl	80023c8 <Set_logInfo2>
		break;
 80012d8:	e0a8      	b.n	800142c <DBmanue_rs485_scan+0x240>
		rt_task.address		= RS485_AD_SLEVE01;
 80012da:	2301      	movs	r3, #1
 80012dc:	72bb      	strb	r3, [r7, #10]
		rt_task.command		= RS485_CMD_MESUR_DATA;
 80012de:	2304      	movs	r3, #4
 80012e0:	71bb      	strb	r3, [r7, #6]
		rt_task.command_sub	= 300;
 80012e2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012e6:	813b      	strh	r3, [r7, #8]
		rt_task.event 		= RT_EVENT_START_REQ;
 80012e8:	2300      	movs	r3, #0
 80012ea:	713b      	strb	r3, [r7, #4]
		rt_task.sub1 		= 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	72fb      	strb	r3, [r7, #11]
		SendMsgQue( &rt_task );
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 f8d8 	bl	80034a8 <SendMsgQue>
		break;
 80012f8:	e098      	b.n	800142c <DBmanue_rs485_scan+0x240>
		rt_task.event 		= RT_EVENT_STOP_REQ;
 80012fa:	2303      	movs	r3, #3
 80012fc:	713b      	strb	r3, [r7, #4]
		SendMsgQue( &rt_task );
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f002 f8d1 	bl	80034a8 <SendMsgQue>
		break;
 8001306:	e091      	b.n	800142c <DBmanue_rs485_scan+0x240>
		SKprintf("\r\nHeap Info\r\n");
 8001308:	484c      	ldr	r0, [pc, #304]	; (800143c <DBmanue_rs485_scan+0x250>)
 800130a:	f002 ff93 	bl	8004234 <SKprintf>
		SKprintf("  FreeHeapSize = 0x%x\r\n",xPortGetFreeHeapSize());
 800130e:	f013 fac1 	bl	8014894 <xPortGetFreeHeapSize>
 8001312:	4603      	mov	r3, r0
 8001314:	4619      	mov	r1, r3
 8001316:	484a      	ldr	r0, [pc, #296]	; (8001440 <DBmanue_rs485_scan+0x254>)
 8001318:	f002 ff8c 	bl	8004234 <SKprintf>
		SKprintf("\r\nMessage Que Info\r\n");
 800131c:	4849      	ldr	r0, [pc, #292]	; (8001444 <DBmanue_rs485_scan+0x258>)
 800131e:	f002 ff89 	bl	8004234 <SKprintf>
		SKprintf("            Que1  Que2  Que3\r\n");
 8001322:	4849      	ldr	r0, [pc, #292]	; (8001448 <DBmanue_rs485_scan+0x25c>)
 8001324:	f002 ff86 	bl	8004234 <SKprintf>
		SKprintf("  Capacity= 0x%02x  ",osMessageQueueGetCapacity(myQueue01Handle));
 8001328:	4b48      	ldr	r3, [pc, #288]	; (800144c <DBmanue_rs485_scan+0x260>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f010 fd79 	bl	8011e24 <osMessageQueueGetCapacity>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	4846      	ldr	r0, [pc, #280]	; (8001450 <DBmanue_rs485_scan+0x264>)
 8001338:	f002 ff7c 	bl	8004234 <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetCapacity(myQueue02Handle));
 800133c:	4b45      	ldr	r3, [pc, #276]	; (8001454 <DBmanue_rs485_scan+0x268>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f010 fd6f 	bl	8011e24 <osMessageQueueGetCapacity>
 8001346:	4603      	mov	r3, r0
 8001348:	4619      	mov	r1, r3
 800134a:	4843      	ldr	r0, [pc, #268]	; (8001458 <DBmanue_rs485_scan+0x26c>)
 800134c:	f002 ff72 	bl	8004234 <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetCapacity(myQueue03Handle));
 8001350:	4b42      	ldr	r3, [pc, #264]	; (800145c <DBmanue_rs485_scan+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f010 fd65 	bl	8011e24 <osMessageQueueGetCapacity>
 800135a:	4603      	mov	r3, r0
 800135c:	4619      	mov	r1, r3
 800135e:	4840      	ldr	r0, [pc, #256]	; (8001460 <DBmanue_rs485_scan+0x274>)
 8001360:	f002 ff68 	bl	8004234 <SKprintf>
		SKprintf("  MsgSize = 0x%02x  ",osMessageQueueGetMsgSize(myQueue01Handle));
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <DBmanue_rs485_scan+0x260>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f010 fd71 	bl	8011e50 <osMessageQueueGetMsgSize>
 800136e:	4603      	mov	r3, r0
 8001370:	4619      	mov	r1, r3
 8001372:	483c      	ldr	r0, [pc, #240]	; (8001464 <DBmanue_rs485_scan+0x278>)
 8001374:	f002 ff5e 	bl	8004234 <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetMsgSize(myQueue02Handle));
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <DBmanue_rs485_scan+0x268>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f010 fd67 	bl	8011e50 <osMessageQueueGetMsgSize>
 8001382:	4603      	mov	r3, r0
 8001384:	4619      	mov	r1, r3
 8001386:	4834      	ldr	r0, [pc, #208]	; (8001458 <DBmanue_rs485_scan+0x26c>)
 8001388:	f002 ff54 	bl	8004234 <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetMsgSize(myQueue03Handle));
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <DBmanue_rs485_scan+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f010 fd5d 	bl	8011e50 <osMessageQueueGetMsgSize>
 8001396:	4603      	mov	r3, r0
 8001398:	4619      	mov	r1, r3
 800139a:	4831      	ldr	r0, [pc, #196]	; (8001460 <DBmanue_rs485_scan+0x274>)
 800139c:	f002 ff4a 	bl	8004234 <SKprintf>
		SKprintf("  Count   = 0x%02x  ",osMessageQueueGetCount(myQueue01Handle));
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <DBmanue_rs485_scan+0x260>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f010 fd69 	bl	8011e7c <osMessageQueueGetCount>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4619      	mov	r1, r3
 80013ae:	482e      	ldr	r0, [pc, #184]	; (8001468 <DBmanue_rs485_scan+0x27c>)
 80013b0:	f002 ff40 	bl	8004234 <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetCount(myQueue02Handle));
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <DBmanue_rs485_scan+0x268>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f010 fd5f 	bl	8011e7c <osMessageQueueGetCount>
 80013be:	4603      	mov	r3, r0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4825      	ldr	r0, [pc, #148]	; (8001458 <DBmanue_rs485_scan+0x26c>)
 80013c4:	f002 ff36 	bl	8004234 <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetCount(myQueue03Handle));
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <DBmanue_rs485_scan+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f010 fd55 	bl	8011e7c <osMessageQueueGetCount>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4619      	mov	r1, r3
 80013d6:	4822      	ldr	r0, [pc, #136]	; (8001460 <DBmanue_rs485_scan+0x274>)
 80013d8:	f002 ff2c 	bl	8004234 <SKprintf>
		SKprintf("  Space   = 0x%02x  ",osMessageQueueGetSpace(myQueue01Handle));
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <DBmanue_rs485_scan+0x260>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f010 fd6b 	bl	8011ebc <osMessageQueueGetSpace>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4619      	mov	r1, r3
 80013ea:	4820      	ldr	r0, [pc, #128]	; (800146c <DBmanue_rs485_scan+0x280>)
 80013ec:	f002 ff22 	bl	8004234 <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetSpace(myQueue02Handle));
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <DBmanue_rs485_scan+0x268>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f010 fd61 	bl	8011ebc <osMessageQueueGetSpace>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4816      	ldr	r0, [pc, #88]	; (8001458 <DBmanue_rs485_scan+0x26c>)
 8001400:	f002 ff18 	bl	8004234 <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetSpace(myQueue03Handle));
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <DBmanue_rs485_scan+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f010 fd57 	bl	8011ebc <osMessageQueueGetSpace>
 800140e:	4603      	mov	r3, r0
 8001410:	4619      	mov	r1, r3
 8001412:	4813      	ldr	r0, [pc, #76]	; (8001460 <DBmanue_rs485_scan+0x274>)
 8001414:	f002 ff0e 	bl	8004234 <SKprintf>
		task_stack_display();
 8001418:	f001 fb86 	bl	8002b28 <task_stack_display>
		break;
 800141c:	e006      	b.n	800142c <DBmanue_rs485_scan+0x240>
		LogdisplayISR();
 800141e:	f001 f98d 	bl	800273c <LogdisplayISR>
		break;
 8001422:	e003      	b.n	800142c <DBmanue_rs485_scan+0x240>
		dev_menue_type = DEB_PROMPT_MODE;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <DBmanue_rs485_scan+0x284>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
		break;
 800142a:	bf00      	nop
	}

}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000518 	.word	0x20000518
 8001438:	0801824c 	.word	0x0801824c
 800143c:	08018260 	.word	0x08018260
 8001440:	08018270 	.word	0x08018270
 8001444:	08018288 	.word	0x08018288
 8001448:	080182a0 	.word	0x080182a0
 800144c:	2000239c 	.word	0x2000239c
 8001450:	080182c0 	.word	0x080182c0
 8001454:	200023a0 	.word	0x200023a0
 8001458:	080182d8 	.word	0x080182d8
 800145c:	200023a4 	.word	0x200023a4
 8001460:	080182e4 	.word	0x080182e4
 8001464:	080182f0 	.word	0x080182f0
 8001468:	08018308 	.word	0x08018308
 800146c:	08018320 	.word	0x08018320
 8001470:	20000598 	.word	0x20000598

08001474 <DBmanue_log>:
//=============================================================================
//
//=============================================================================
void DBmanue_log(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <DBmanue_log+0xdc>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b52      	cmp	r3, #82	; 0x52
 800147e:	dc4b      	bgt.n	8001518 <DBmanue_log+0xa4>
 8001480:	2b31      	cmp	r3, #49	; 0x31
 8001482:	db61      	blt.n	8001548 <DBmanue_log+0xd4>
 8001484:	3b31      	subs	r3, #49	; 0x31
 8001486:	2b21      	cmp	r3, #33	; 0x21
 8001488:	d85e      	bhi.n	8001548 <DBmanue_log+0xd4>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <DBmanue_log+0x1c>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	0800151f 	.word	0x0800151f
 8001494:	08001525 	.word	0x08001525
 8001498:	0800152b 	.word	0x0800152b
 800149c:	08001533 	.word	0x08001533
 80014a0:	0800153b 	.word	0x0800153b
 80014a4:	08001549 	.word	0x08001549
 80014a8:	08001549 	.word	0x08001549
 80014ac:	08001549 	.word	0x08001549
 80014b0:	08001549 	.word	0x08001549
 80014b4:	08001549 	.word	0x08001549
 80014b8:	08001549 	.word	0x08001549
 80014bc:	08001549 	.word	0x08001549
 80014c0:	08001549 	.word	0x08001549
 80014c4:	08001549 	.word	0x08001549
 80014c8:	08001549 	.word	0x08001549
 80014cc:	08001549 	.word	0x08001549
 80014d0:	08001549 	.word	0x08001549
 80014d4:	08001549 	.word	0x08001549
 80014d8:	08001549 	.word	0x08001549
 80014dc:	08001549 	.word	0x08001549
 80014e0:	08001549 	.word	0x08001549
 80014e4:	08001549 	.word	0x08001549
 80014e8:	08001549 	.word	0x08001549
 80014ec:	08001549 	.word	0x08001549
 80014f0:	08001549 	.word	0x08001549
 80014f4:	08001549 	.word	0x08001549
 80014f8:	08001549 	.word	0x08001549
 80014fc:	08001549 	.word	0x08001549
 8001500:	08001549 	.word	0x08001549
 8001504:	08001549 	.word	0x08001549
 8001508:	08001549 	.word	0x08001549
 800150c:	08001549 	.word	0x08001549
 8001510:	08001549 	.word	0x08001549
 8001514:	08001543 	.word	0x08001543
 8001518:	2b72      	cmp	r3, #114	; 0x72
 800151a:	d012      	beq.n	8001542 <DBmanue_log+0xce>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 800151c:	e014      	b.n	8001548 <DBmanue_log+0xd4>
		LogInfo_display();
 800151e:	f001 f88d 	bl	800263c <LogInfo_display>
		break;
 8001522:	e012      	b.n	800154a <DBmanue_log+0xd6>
		LogInfo_clear();
 8001524:	f001 f970 	bl	8002808 <LogInfo_clear>
		break;
 8001528:	e00f      	b.n	800154a <DBmanue_log+0xd6>
		Set_logflg(LF_NON_STOP);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 fe6e 	bl	800220c <Set_logflg>
		break;
 8001530:	e00b      	b.n	800154a <DBmanue_log+0xd6>
		Set_logflg(LF_IMMMEDIATE_STOP);
 8001532:	2001      	movs	r0, #1
 8001534:	f000 fe6a 	bl	800220c <Set_logflg>
		break;
 8001538:	e007      	b.n	800154a <DBmanue_log+0xd6>
		Set_logflg(LF_MAX_DATA_STOP);
 800153a:	2002      	movs	r0, #2
 800153c:	f000 fe66 	bl	800220c <Set_logflg>
		break;
 8001540:	e003      	b.n	800154a <DBmanue_log+0xd6>
		dev_menue_type = DEB_PROMPT_MODE;
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <DBmanue_log+0xe0>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
		break;
 8001548:	bf00      	nop
	}
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000518 	.word	0x20000518
 8001554:	20000598 	.word	0x20000598

08001558 <DBmanue_rs485>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 800155c:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <DBmanue_rs485+0xbc>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b52      	cmp	r3, #82	; 0x52
 8001562:	dc4b      	bgt.n	80015fc <DBmanue_rs485+0xa4>
 8001564:	2b31      	cmp	r3, #49	; 0x31
 8001566:	db4f      	blt.n	8001608 <DBmanue_rs485+0xb0>
 8001568:	3b31      	subs	r3, #49	; 0x31
 800156a:	2b21      	cmp	r3, #33	; 0x21
 800156c:	d84c      	bhi.n	8001608 <DBmanue_rs485+0xb0>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <DBmanue_rs485+0x1c>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	08001609 	.word	0x08001609
 8001578:	08001609 	.word	0x08001609
 800157c:	08001609 	.word	0x08001609
 8001580:	08001609 	.word	0x08001609
 8001584:	08001609 	.word	0x08001609
 8001588:	08001609 	.word	0x08001609
 800158c:	08001609 	.word	0x08001609
 8001590:	08001609 	.word	0x08001609
 8001594:	08001609 	.word	0x08001609
 8001598:	08001609 	.word	0x08001609
 800159c:	08001609 	.word	0x08001609
 80015a0:	08001609 	.word	0x08001609
 80015a4:	08001609 	.word	0x08001609
 80015a8:	08001609 	.word	0x08001609
 80015ac:	08001609 	.word	0x08001609
 80015b0:	08001609 	.word	0x08001609
 80015b4:	08001609 	.word	0x08001609
 80015b8:	08001609 	.word	0x08001609
 80015bc:	08001609 	.word	0x08001609
 80015c0:	08001609 	.word	0x08001609
 80015c4:	08001609 	.word	0x08001609
 80015c8:	08001609 	.word	0x08001609
 80015cc:	08001609 	.word	0x08001609
 80015d0:	08001609 	.word	0x08001609
 80015d4:	08001609 	.word	0x08001609
 80015d8:	08001609 	.word	0x08001609
 80015dc:	08001609 	.word	0x08001609
 80015e0:	08001609 	.word	0x08001609
 80015e4:	08001609 	.word	0x08001609
 80015e8:	08001609 	.word	0x08001609
 80015ec:	08001609 	.word	0x08001609
 80015f0:	08001609 	.word	0x08001609
 80015f4:	08001609 	.word	0x08001609
 80015f8:	08001603 	.word	0x08001603
 80015fc:	2b72      	cmp	r3, #114	; 0x72
 80015fe:	d000      	beq.n	8001602 <DBmanue_rs485+0xaa>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8001600:	e002      	b.n	8001608 <DBmanue_rs485+0xb0>
		dev_menue_type = DEB_PROMPT_MODE;
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <DBmanue_rs485+0xc0>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
		break;
 8001608:	bf00      	nop
	}
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20000518 	.word	0x20000518
 8001618:	20000598 	.word	0x20000598

0800161c <DBmanue_memdump>:

//==============================================================================
//
//==============================================================================
void DBmanue_memdump(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
	STACK_INFO stack;

	switch( input_string.main[0] ){
 8001622:	4b77      	ldr	r3, [pc, #476]	; (8001800 <DBmanue_memdump+0x1e4>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	3b31      	subs	r3, #49	; 0x31
 8001628:	2b41      	cmp	r3, #65	; 0x41
 800162a:	f200 80df 	bhi.w	80017ec <DBmanue_memdump+0x1d0>
 800162e:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <DBmanue_memdump+0x18>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	0800173d 	.word	0x0800173d
 8001638:	08001745 	.word	0x08001745
 800163c:	08001763 	.word	0x08001763
 8001640:	08001781 	.word	0x08001781
 8001644:	080017ed 	.word	0x080017ed
 8001648:	080017ed 	.word	0x080017ed
 800164c:	080017ed 	.word	0x080017ed
 8001650:	080017ed 	.word	0x080017ed
 8001654:	080017ed 	.word	0x080017ed
 8001658:	080017ed 	.word	0x080017ed
 800165c:	080017ed 	.word	0x080017ed
 8001660:	080017ed 	.word	0x080017ed
 8001664:	080017ed 	.word	0x080017ed
 8001668:	080017ed 	.word	0x080017ed
 800166c:	080017ed 	.word	0x080017ed
 8001670:	080017ed 	.word	0x080017ed
 8001674:	080017ed 	.word	0x080017ed
 8001678:	080017ed 	.word	0x080017ed
 800167c:	080017ed 	.word	0x080017ed
 8001680:	080017ed 	.word	0x080017ed
 8001684:	080017ed 	.word	0x080017ed
 8001688:	080017ed 	.word	0x080017ed
 800168c:	080017ed 	.word	0x080017ed
 8001690:	080017ed 	.word	0x080017ed
 8001694:	080017ed 	.word	0x080017ed
 8001698:	080017ed 	.word	0x080017ed
 800169c:	080017ed 	.word	0x080017ed
 80016a0:	080017ed 	.word	0x080017ed
 80016a4:	080017ed 	.word	0x080017ed
 80016a8:	080017ed 	.word	0x080017ed
 80016ac:	080017ed 	.word	0x080017ed
 80016b0:	080017ed 	.word	0x080017ed
 80016b4:	080017ed 	.word	0x080017ed
 80016b8:	080017e7 	.word	0x080017e7
 80016bc:	080017ed 	.word	0x080017ed
 80016c0:	080017ed 	.word	0x080017ed
 80016c4:	080017ed 	.word	0x080017ed
 80016c8:	080017ed 	.word	0x080017ed
 80016cc:	080017ed 	.word	0x080017ed
 80016d0:	080017ed 	.word	0x080017ed
 80016d4:	080017ed 	.word	0x080017ed
 80016d8:	080017ed 	.word	0x080017ed
 80016dc:	080017ed 	.word	0x080017ed
 80016e0:	080017ed 	.word	0x080017ed
 80016e4:	080017ed 	.word	0x080017ed
 80016e8:	080017ed 	.word	0x080017ed
 80016ec:	080017ed 	.word	0x080017ed
 80016f0:	080017ed 	.word	0x080017ed
 80016f4:	080017ed 	.word	0x080017ed
 80016f8:	080017c3 	.word	0x080017c3
 80016fc:	080017ed 	.word	0x080017ed
 8001700:	080017ed 	.word	0x080017ed
 8001704:	080017ed 	.word	0x080017ed
 8001708:	0800179f 	.word	0x0800179f
 800170c:	080017ed 	.word	0x080017ed
 8001710:	080017ed 	.word	0x080017ed
 8001714:	080017ed 	.word	0x080017ed
 8001718:	080017ed 	.word	0x080017ed
 800171c:	080017ed 	.word	0x080017ed
 8001720:	080017ed 	.word	0x080017ed
 8001724:	080017ed 	.word	0x080017ed
 8001728:	080017ed 	.word	0x080017ed
 800172c:	080017ed 	.word	0x080017ed
 8001730:	080017ed 	.word	0x080017ed
 8001734:	080017ed 	.word	0x080017ed
 8001738:	080017e7 	.word	0x080017e7
	case '1':
		dev_menue_type = DEB_MEM_INPUT_MENUE;
 800173c:	4b31      	ldr	r3, [pc, #196]	; (8001804 <DBmanue_memdump+0x1e8>)
 800173e:	2204      	movs	r2, #4
 8001740:	701a      	strb	r2, [r3, #0]
		break;
 8001742:	e058      	b.n	80017f6 <DBmanue_memdump+0x1da>
	case '2':
		Disp_task_info(SK_TASK_main);
 8001744:	2000      	movs	r0, #0
 8001746:	f001 fa5b 	bl	8002c00 <Disp_task_info>
		Get_task_stackptr(SK_TASK_main,&stack);
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	2000      	movs	r0, #0
 8001750:	f001 faf4 	bl	8002d3c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	89ba      	ldrh	r2, [r7, #12]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f8b6 	bl	80018cc <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 8001760:	e049      	b.n	80017f6 <DBmanue_memdump+0x1da>
	case '3':
		Disp_task_info(SK_TASK_sub1);
 8001762:	2001      	movs	r0, #1
 8001764:	f001 fa4c 	bl	8002c00 <Disp_task_info>
		Get_task_stackptr(SK_TASK_sub1,&stack);
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	2001      	movs	r0, #1
 800176e:	f001 fae5 	bl	8002d3c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	89ba      	ldrh	r2, [r7, #12]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f8a7 	bl	80018cc <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 800177e:	e03a      	b.n	80017f6 <DBmanue_memdump+0x1da>
	case '4':
		Disp_task_info(SK_TASK_sub2);
 8001780:	2002      	movs	r0, #2
 8001782:	f001 fa3d 	bl	8002c00 <Disp_task_info>
		Get_task_stackptr(SK_TASK_sub2,&stack);
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	2002      	movs	r0, #2
 800178c:	f001 fad6 	bl	8002d3c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	89ba      	ldrh	r2, [r7, #12]
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f898 	bl	80018cc <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 800179c:	e02b      	b.n	80017f6 <DBmanue_memdump+0x1da>
	case '5':
		break;
	case 'f':
		if(sk_mem_dump != NULL){
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d024      	beq.n	80017f0 <DBmanue_memdump+0x1d4>
			sk_mem_dump += 128*4;
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017ae:	4a16      	ldr	r2, [pc, #88]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017b0:	6013      	str	r3, [r2, #0]
			hex_dmp(sk_mem_dump, 128*4);
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f886 	bl	80018cc <hex_dmp>
		}
		break;
 80017c0:	e016      	b.n	80017f0 <DBmanue_memdump+0x1d4>
	case 'b':
		if(sk_mem_dump != NULL){
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d014      	beq.n	80017f4 <DBmanue_memdump+0x1d8>
			sk_mem_dump -= 128*4;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80017d2:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017d4:	6013      	str	r3, [r2, #0]
			hex_dmp(sk_mem_dump, 128*4);
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f874 	bl	80018cc <hex_dmp>
		}
		break;
 80017e4:	e006      	b.n	80017f4 <DBmanue_memdump+0x1d8>
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <DBmanue_memdump+0x1e8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	default:
		break;
 80017ec:	bf00      	nop
 80017ee:	e002      	b.n	80017f6 <DBmanue_memdump+0x1da>
		break;
 80017f0:	bf00      	nop
 80017f2:	e000      	b.n	80017f6 <DBmanue_memdump+0x1da>
		break;
 80017f4:	bf00      	nop
	}

}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000518 	.word	0x20000518
 8001804:	20000598 	.word	0x20000598
 8001808:	20000510 	.word	0x20000510

0800180c <DBmanue_mem_input>:

//==============================================================================
//
//==============================================================================
void DBmanue_mem_input(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
	int 		i = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
	uint32_t	dt = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
	uint8_t		c = input_string.main[0];
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <DBmanue_mem_input+0xb4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	71fb      	strb	r3, [r7, #7]

	if( c == 'r' || c == 'R' ){
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b72      	cmp	r3, #114	; 0x72
 8001824:	d044      	beq.n	80018b0 <DBmanue_mem_input+0xa4>
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b52      	cmp	r3, #82	; 0x52
 800182a:	d041      	beq.n	80018b0 <DBmanue_mem_input+0xa4>

	}
	else{
		while( input_string.main[i] != '\0'){
 800182c:	e030      	b.n	8001890 <DBmanue_mem_input+0x84>
			c= input_string.main[i];
 800182e:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <DBmanue_mem_input+0xb4>)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	71fb      	strb	r3, [r7, #7]

			dt <<= 4;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	60bb      	str	r3, [r7, #8]

			if( c >= '0'  && c <= '9' ){
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b2f      	cmp	r3, #47	; 0x2f
 8001842:	d909      	bls.n	8001858 <DBmanue_mem_input+0x4c>
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2b39      	cmp	r3, #57	; 0x39
 8001848:	d806      	bhi.n	8001858 <DBmanue_mem_input+0x4c>
				dt |= ( c - '0');
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	3b30      	subs	r3, #48	; 0x30
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	e018      	b.n	800188a <DBmanue_mem_input+0x7e>
			}
			else if( c >= 'a'  && c <= 'f' ){
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b60      	cmp	r3, #96	; 0x60
 800185c:	d909      	bls.n	8001872 <DBmanue_mem_input+0x66>
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b66      	cmp	r3, #102	; 0x66
 8001862:	d806      	bhi.n	8001872 <DBmanue_mem_input+0x66>
				dt |= ( c - 'a' + 10);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	3b57      	subs	r3, #87	; 0x57
 8001868:	461a      	mov	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4313      	orrs	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	e00b      	b.n	800188a <DBmanue_mem_input+0x7e>
			}
			else if( c >= 'A'  && c <= 'F' ){
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2b40      	cmp	r3, #64	; 0x40
 8001876:	d908      	bls.n	800188a <DBmanue_mem_input+0x7e>
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b46      	cmp	r3, #70	; 0x46
 800187c:	d805      	bhi.n	800188a <DBmanue_mem_input+0x7e>
				dt |= ( c - 'A' + 10);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	3b37      	subs	r3, #55	; 0x37
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
 8001888:	60bb      	str	r3, [r7, #8]
			}

			i++;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
		while( input_string.main[i] != '\0'){
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <DBmanue_mem_input+0xb4>)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1c8      	bne.n	800182e <DBmanue_mem_input+0x22>
		}

		SKprintf("dt=%lx",dt);
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <DBmanue_mem_input+0xb8>)
 80018a0:	f002 fcc8 	bl	8004234 <SKprintf>
		hex_dmp((uint8_t *)dt, 128*4);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f80e 	bl	80018cc <hex_dmp>
	}

	dev_menue_type = DEB_MEM_MENUE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <DBmanue_mem_input+0xbc>)
 80018b2:	2203      	movs	r2, #3
 80018b4:	701a      	strb	r2, [r3, #0]

}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000518 	.word	0x20000518
 80018c4:	08018338 	.word	0x08018338
 80018c8:	20000598 	.word	0x20000598

080018cc <hex_dmp>:

//==============================================================================
//
//==============================================================================
void hex_dmp(uint8_t *buf, uint16_t size)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	; 0x38
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
    uint16_t	size_plus;
    uint32_t pp;



   p = buf;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
   pp = (uint32_t)buf;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	623b      	str	r3, [r7, #32]
   p_disp = (uint8_t *)(pp & 0xfffffff0);
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f023 030f 	bic.w	r3, r3, #15
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   p = p_disp;
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24

   pre_data = (uint8_t)pp & 0x0000000F;
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	83fb      	strh	r3, [r7, #30]
   sk_mem_dump = p_disp;
 80018f8:	4a54      	ldr	r2, [pc, #336]	; (8001a4c <hex_dmp+0x180>)
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	6013      	str	r3, [r2, #0]

   size_plus = size + pre_data;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	8bfb      	ldrh	r3, [r7, #30]
 8001902:	4413      	add	r3, r2
 8001904:	853b      	strh	r3, [r7, #40]	; 0x28
   if(( size_plus % 16 ) != 0){
 8001906:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	b29b      	uxth	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <hex_dmp+0x52>
    	   size_plus = size_plus + 16 - (size_plus % 16);
 8001912:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001914:	f023 030f 	bic.w	r3, r3, #15
 8001918:	b29b      	uxth	r3, r3
 800191a:	3310      	adds	r3, #16
 800191c:	853b      	strh	r3, [r7, #40]	; 0x28
    }


    SKprintf("\r\n%p -->>\r\n",p);
 800191e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001920:	484b      	ldr	r0, [pc, #300]	; (8001a50 <hex_dmp+0x184>)
 8001922:	f002 fc87 	bl	8004234 <SKprintf>
    SKprintf("            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F    -- ASCII --\r\n");
 8001926:	484b      	ldr	r0, [pc, #300]	; (8001a54 <hex_dmp+0x188>)
 8001928:	f002 fc84 	bl	8004234 <SKprintf>
    SKprintf("-----------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-----------------\r\n");
 800192c:	484a      	ldr	r0, [pc, #296]	; (8001a58 <hex_dmp+0x18c>)
 800192e:	f002 fc81 	bl	8004234 <SKprintf>


    for (i=0; i<size_plus; i++) {
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
 8001936:	e070      	b.n	8001a1a <hex_dmp+0x14e>

    	if(( i % 16)== 0){
 8001938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	2b00      	cmp	r3, #0
 8001940:	d114      	bne.n	800196c <hex_dmp+0xa0>
    	    SKprintf("%08p  ",p_disp);
 8001942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001944:	4845      	ldr	r0, [pc, #276]	; (8001a5c <hex_dmp+0x190>)
 8001946:	f002 fc75 	bl	8004234 <SKprintf>
    	    if( p_disp != &p[i] ){
 800194a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194e:	4413      	add	r3, r2
 8001950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001952:	429a      	cmp	r2, r3
 8001954:	d007      	beq.n	8001966 <hex_dmp+0x9a>
    	    	SKprintf("\r\nERROR p_disp=%p,p=%p\r\n",p_disp,&p[i]);
 8001956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195a:	4413      	add	r3, r2
 800195c:	461a      	mov	r2, r3
 800195e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001960:	483f      	ldr	r0, [pc, #252]	; (8001a60 <hex_dmp+0x194>)
 8001962:	f002 fc67 	bl	8004234 <SKprintf>
    	    }
    	    p_disp += 16;
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	3310      	adds	r3, #16
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
    	}


		j = i % 16;
 800196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196e:	425a      	negs	r2, r3
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	f002 020f 	and.w	r2, r2, #15
 8001978:	bf58      	it	pl
 800197a:	4253      	negpl	r3, r2
 800197c:	633b      	str	r3, [r7, #48]	; 0x30

		if( i < (size + pre_data) ){
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	8bfb      	ldrh	r3, [r7, #30]
 8001982:	4413      	add	r3, r2
 8001984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001986:	429a      	cmp	r2, r3
 8001988:	da20      	bge.n	80019cc <hex_dmp+0x100>
			SKprintf("%02x ", p[i]);
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	4833      	ldr	r0, [pc, #204]	; (8001a64 <hex_dmp+0x198>)
 8001996:	f002 fc4d 	bl	8004234 <SKprintf>
			tmp[j] = (uint8_t)((p[i]<0x20||p[i]>=0x7f)? '.': p[i]);
 800199a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b1f      	cmp	r3, #31
 80019a4:	d90a      	bls.n	80019bc <hex_dmp+0xf0>
 80019a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019aa:	4413      	add	r3, r2
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b7e      	cmp	r3, #126	; 0x7e
 80019b0:	d804      	bhi.n	80019bc <hex_dmp+0xf0>
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b6:	4413      	add	r3, r2
 80019b8:	7819      	ldrb	r1, [r3, #0]
 80019ba:	e000      	b.n	80019be <hex_dmp+0xf2>
 80019bc:	212e      	movs	r1, #46	; 0x2e
 80019be:	f107 020c 	add.w	r2, r7, #12
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	4413      	add	r3, r2
 80019c6:	460a      	mov	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e008      	b.n	80019de <hex_dmp+0x112>
					}
		else{
			SKprintf("   ");
 80019cc:	4826      	ldr	r0, [pc, #152]	; (8001a68 <hex_dmp+0x19c>)
 80019ce:	f002 fc31 	bl	8004234 <SKprintf>
			tmp[j] = ' ';
 80019d2:	f107 020c 	add.w	r2, r7, #12
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	4413      	add	r3, r2
 80019da:	2220      	movs	r2, #32
 80019dc:	701a      	strb	r2, [r3, #0]
		}

		flg = 1;
 80019de:	2301      	movs	r3, #1
 80019e0:	857b      	strh	r3, [r7, #42]	; 0x2a
		if(( i % 16)==15 ){
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	425a      	negs	r2, r3
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	f002 020f 	and.w	r2, r2, #15
 80019ee:	bf58      	it	pl
 80019f0:	4253      	negpl	r3, r2
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	d10e      	bne.n	8001a14 <hex_dmp+0x148>
			flg = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	857b      	strh	r3, [r7, #42]	; 0x2a
			tmp[j+1] = '\0';
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	3301      	adds	r3, #1
 80019fe:	3338      	adds	r3, #56	; 0x38
 8001a00:	443b      	add	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	f803 2c2c 	strb.w	r2, [r3, #-44]
			SKprintf(" %s\r\n", tmp);
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4817      	ldr	r0, [pc, #92]	; (8001a6c <hex_dmp+0x1a0>)
 8001a10:	f002 fc10 	bl	8004234 <SKprintf>
    for (i=0; i<size_plus; i++) {
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	3301      	adds	r3, #1
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	db8a      	blt.n	8001938 <hex_dmp+0x6c>
		}
    }

    if( flg == 1 ){
 8001a22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10c      	bne.n	8001a42 <hex_dmp+0x176>
		tmp[j+1] = '\0';
 8001a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	3338      	adds	r3, #56	; 0x38
 8001a2e:	443b      	add	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	f803 2c2c 	strb.w	r2, [r3, #-44]
		SKprintf("%s\r\n", tmp);
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <hex_dmp+0x1a4>)
 8001a3e:	f002 fbf9 	bl	8004234 <SKprintf>
    }

}
 8001a42:	bf00      	nop
 8001a44:	3738      	adds	r7, #56	; 0x38
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000510 	.word	0x20000510
 8001a50:	08018340 	.word	0x08018340
 8001a54:	0801834c 	.word	0x0801834c
 8001a58:	08018398 	.word	0x08018398
 8001a5c:	080183e8 	.word	0x080183e8
 8001a60:	080183f0 	.word	0x080183f0
 8001a64:	0801840c 	.word	0x0801840c
 8001a68:	08018414 	.word	0x08018414
 8001a6c:	08018244 	.word	0x08018244
 8001a70:	08018418 	.word	0x08018418

08001a74 <input2menu>:
//==============================================================================
//
//==============================================================================

COMMAND_MENUE input2menu(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
     uint16_t i = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	80fb      	strh	r3, [r7, #6]
    COMMAND_MENUE rtn = CMD_MAX;
 8001a7e:	2306      	movs	r3, #6
 8001a80:	717b      	strb	r3, [r7, #5]

        while( com_list[i].pt != CMD_MAX ){
 8001a82:	e01d      	b.n	8001ac0 <input2menu+0x4c>
            if (strcmp(&input_string.main[0], &com_list[i].command[0]) == 0){
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <input2menu+0x6c>)
 8001a92:	4413      	add	r3, r2
 8001a94:	3301      	adds	r3, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	4812      	ldr	r0, [pc, #72]	; (8001ae4 <input2menu+0x70>)
 8001a9a:	f7fe fba1 	bl	80001e0 <strcmp>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10a      	bne.n	8001aba <input2menu+0x46>
                rtn = com_list[i].pt;
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <input2menu+0x6c>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	717b      	strb	r3, [r7, #5]
                break;
 8001ab8:	e00d      	b.n	8001ad6 <input2menu+0x62>
            }
            i++;
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	3301      	adds	r3, #1
 8001abe:	80fb      	strh	r3, [r7, #6]
        while( com_list[i].pt != CMD_MAX ){
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <input2menu+0x6c>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d1d6      	bne.n	8001a84 <input2menu+0x10>
        }

    return rtn;
 8001ad6:	797b      	ldrb	r3, [r7, #5]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	0801a0a0 	.word	0x0801a0a0
 8001ae4:	20000518 	.word	0x20000518

08001ae8 <command_split>:
//==============================================================================
//
//==============================================================================
void command_split(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
	int		i;
	int		j;
	char	moji = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71fb      	strb	r3, [r7, #7]
	char 	*ptr;

	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	e008      	b.n	8001b0a <command_split+0x22>
		input_string.sub_ptr[j] = 0;
 8001af8:	4a5d      	ldr	r2, [pc, #372]	; (8001c70 <command_split+0x188>)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3308      	adds	r3, #8
 8001afe:	2100      	movs	r1, #0
 8001b00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b0e      	cmp	r3, #14
 8001b0e:	ddf3      	ble.n	8001af8 <command_split+0x10>
	}

	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e027      	b.n	8001b66 <command_split+0x7e>
		switch(input_string.main[i]){
 8001b16:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <command_split+0x188>)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b2c      	cmp	r3, #44	; 0x2c
 8001b20:	d005      	beq.n	8001b2e <command_split+0x46>
 8001b22:	2b2c      	cmp	r3, #44	; 0x2c
 8001b24:	dc0b      	bgt.n	8001b3e <command_split+0x56>
 8001b26:	2b09      	cmp	r3, #9
 8001b28:	d001      	beq.n	8001b2e <command_split+0x46>
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d107      	bne.n	8001b3e <command_split+0x56>
		case ' ':		// スペース
		case ',':		//　カンマ
		case '	':		//　タブ
			input_string.main[i] = '\0';
 8001b2e:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <command_split+0x188>)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
			moji = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	71fb      	strb	r3, [r7, #7]
			break;
 8001b3c:	e010      	b.n	8001b60 <command_split+0x78>
		default:
			if( moji == 0 ){
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10c      	bne.n	8001b5e <command_split+0x76>
				if( j < INPUT_BUF_SIZE/2){
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b0e      	cmp	r3, #14
 8001b48:	dc07      	bgt.n	8001b5a <command_split+0x72>
					input_string.sub_ptr[j] = &input_string.main[i];
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4a48      	ldr	r2, [pc, #288]	; (8001c70 <command_split+0x188>)
 8001b4e:	441a      	add	r2, r3
 8001b50:	4947      	ldr	r1, [pc, #284]	; (8001c70 <command_split+0x188>)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3308      	adds	r3, #8
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				moji = 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8001b5e:	bf00      	nop
	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b1d      	cmp	r3, #29
 8001b6a:	ddd4      	ble.n	8001b16 <command_split+0x2e>
		}
	}

	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	e074      	b.n	8001c5c <command_split+0x174>
		ptr = input_string.sub_ptr[j];
 8001b72:	4a3f      	ldr	r2, [pc, #252]	; (8001c70 <command_split+0x188>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3308      	adds	r3, #8
 8001b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7c:	603b      	str	r3, [r7, #0]
		moji = 1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	71fb      	strb	r3, [r7, #7]
		if( ptr != 0 ){
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d06d      	beq.n	8001c64 <command_split+0x17c>
			if ( ptr[0] == '0' && ptr[1] == 'x'){
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b30      	cmp	r3, #48	; 0x30
 8001b8e:	d14c      	bne.n	8001c2a <command_split+0x142>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b78      	cmp	r3, #120	; 0x78
 8001b98:	d147      	bne.n	8001c2a <command_split+0x142>
				ptr ++;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	603b      	str	r3, [r7, #0]
				ptr ++;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8001ba6:	e01c      	b.n	8001be2 <command_split+0xfa>
					if( ('0'<=*ptr && *ptr<='9') || ('A'<=*ptr && *ptr<='F') || ('a'<=*ptr && *ptr<='f')){
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b2f      	cmp	r3, #47	; 0x2f
 8001bae:	d903      	bls.n	8001bb8 <command_split+0xd0>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b39      	cmp	r3, #57	; 0x39
 8001bb6:	d911      	bls.n	8001bdc <command_split+0xf4>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d903      	bls.n	8001bc8 <command_split+0xe0>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b46      	cmp	r3, #70	; 0x46
 8001bc6:	d909      	bls.n	8001bdc <command_split+0xf4>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b60      	cmp	r3, #96	; 0x60
 8001bce:	d903      	bls.n	8001bd8 <command_split+0xf0>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b66      	cmp	r3, #102	; 0x66
 8001bd6:	d901      	bls.n	8001bdc <command_split+0xf4>

					}
					else{
						moji = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1de      	bne.n	8001ba8 <command_split+0xc0>
				}

				if( moji == 1 ){
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d132      	bne.n	8001c56 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%x", &input_string.data[j]);
 8001bf0:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <command_split+0x188>)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	332c      	adds	r3, #44	; 0x2c
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <command_split+0x188>)
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	461a      	mov	r2, r3
 8001c08:	491a      	ldr	r1, [pc, #104]	; (8001c74 <command_split+0x18c>)
 8001c0a:	f013 fcbd 	bl	8015588 <siscanf>
				if( moji == 1 ){
 8001c0e:	e022      	b.n	8001c56 <command_split+0x16e>
				}
			}
			else{
				while( *ptr != '\0' ){
					if( '0'<=*ptr && *ptr<='9'){
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b2f      	cmp	r3, #47	; 0x2f
 8001c16:	d903      	bls.n	8001c20 <command_split+0x138>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b39      	cmp	r3, #57	; 0x39
 8001c1e:	d901      	bls.n	8001c24 <command_split+0x13c>
					}
					else{
						moji = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ee      	bne.n	8001c10 <command_split+0x128>
				}

				if( moji == 1 ){
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d10e      	bne.n	8001c56 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%d", &input_string.data[j]);
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <command_split+0x188>)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	3308      	adds	r3, #8
 8001c3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	332c      	adds	r3, #44	; 0x2c
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <command_split+0x188>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4909      	ldr	r1, [pc, #36]	; (8001c78 <command_split+0x190>)
 8001c52:	f013 fc99 	bl	8015588 <siscanf>
	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b0e      	cmp	r3, #14
 8001c60:	dd87      	ble.n	8001b72 <command_split+0x8a>
		else{
			break;
		}
	}

}
 8001c62:	e000      	b.n	8001c66 <command_split+0x17e>
			break;
 8001c64:	bf00      	nop
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000518 	.word	0x20000518
 8001c74:	08018420 	.word	0x08018420
 8001c78:	08018424 	.word	0x08018424

08001c7c <read_line_streem>:

//==============================================================================
//
//==============================================================================
 INPUT_CHAR_STEP read_line_streem(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
    uint8_t num;
    uint8_t sub_cnt;
#endif	// ___NOP
    char	string[2];

    string[0] = '\0';
 8001c82:	2300      	movs	r3, #0
 8001c84:	713b      	strb	r3, [r7, #4]
    string[1] = '\0';
 8001c86:	2300      	movs	r3, #0
 8001c88:	717b      	strb	r3, [r7, #5]


    c = (char)getch(SK_UART2_DEBUG);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f002 fb16 	bl	80042bc <getch>
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]

    //SKprintf("read_line_streem()\r\n");

    if( c != 0 ){
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d04b      	beq.n	8001d32 <read_line_streem+0xb6>



        switch(input_char_step){
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <read_line_streem+0xc8>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <read_line_streem+0x2c>
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d006      	beq.n	8001cb4 <read_line_streem+0x38>
                    input_char_step = INPUT_DATA_FIX;

                    command_split();
                }
            default:
                break;
 8001ca6:	e046      	b.n	8001d36 <read_line_streem+0xba>
                input_pos = 0;
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <read_line_streem+0xcc>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
                input_char_step = INPUT_SAVING;
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <read_line_streem+0xc8>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f012 fede 	bl	8014a78 <isprint>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d015      	beq.n	8001cee <read_line_streem+0x72>
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <read_line_streem+0xcc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b1c      	cmp	r3, #28
 8001cc8:	dc11      	bgt.n	8001cee <read_line_streem+0x72>
                    input_string.main[input_pos] = c;
 8001cca:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <read_line_streem+0xcc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	491f      	ldr	r1, [pc, #124]	; (8001d4c <read_line_streem+0xd0>)
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	54ca      	strb	r2, [r1, r3]
                    input_pos ++;
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <read_line_streem+0xcc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <read_line_streem+0xcc>)
 8001cdc:	6013      	str	r3, [r2, #0]
                    string[0] = c;
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	713b      	strb	r3, [r7, #4]
                    SKprintf("%s",string);
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481a      	ldr	r0, [pc, #104]	; (8001d50 <read_line_streem+0xd4>)
 8001ce8:	f002 faa4 	bl	8004234 <SKprintf>
 8001cec:	e020      	b.n	8001d30 <read_line_streem+0xb4>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d10c      	bne.n	8001d0e <read_line_streem+0x92>
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <read_line_streem+0xcc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	dd08      	ble.n	8001d0e <read_line_streem+0x92>
                    input_pos --;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <read_line_streem+0xcc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <read_line_streem+0xcc>)
 8001d04:	6013      	str	r3, [r2, #0]
                    SKprintf("\x08 \x08");
 8001d06:	4813      	ldr	r0, [pc, #76]	; (8001d54 <read_line_streem+0xd8>)
 8001d08:	f002 fa94 	bl	8004234 <SKprintf>
 8001d0c:	e010      	b.n	8001d30 <read_line_streem+0xb4>
                else if (c == '\r') {
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b0d      	cmp	r3, #13
 8001d12:	d110      	bne.n	8001d36 <read_line_streem+0xba>
                    input_string.main[input_pos] = '\0';
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <read_line_streem+0xcc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <read_line_streem+0xd0>)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	54d1      	strb	r1, [r2, r3]
                    SKprintf("\r\n");
 8001d1e:	480e      	ldr	r0, [pc, #56]	; (8001d58 <read_line_streem+0xdc>)
 8001d20:	f002 fa88 	bl	8004234 <SKprintf>
                    input_char_step = INPUT_DATA_FIX;
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <read_line_streem+0xc8>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	701a      	strb	r2, [r3, #0]
                    command_split();
 8001d2a:	f7ff fedd 	bl	8001ae8 <command_split>
                break;
 8001d2e:	e002      	b.n	8001d36 <read_line_streem+0xba>
 8001d30:	e001      	b.n	8001d36 <read_line_streem+0xba>
        }
    }
 8001d32:	bf00      	nop
 8001d34:	e000      	b.n	8001d38 <read_line_streem+0xbc>
                break;
 8001d36:	bf00      	nop
    return(input_char_step);
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <read_line_streem+0xc8>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 }
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000514 	.word	0x20000514
 8001d48:	2000050c 	.word	0x2000050c
 8001d4c:	20000518 	.word	0x20000518
 8001d50:	08018210 	.word	0x08018210
 8001d54:	08018428 	.word	0x08018428
 8001d58:	0801842c 	.word	0x0801842c

08001d5c <HAL_RTCEx_WakeUpTimerEventCallback>:
//==============================================================================
//
//==============================================================================

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

	uint8_t	i;

	if( timer.start > TIMER_AV_NUM){
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d66:	7e5b      	ldrb	r3, [r3, #25]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d941      	bls.n	8001df0 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>

		timer.dt_buf[timer.av_wcnt] = timer.dt;
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d6e:	7e1b      	ldrb	r3, [r3, #24]
 8001d70:	4618      	mov	r0, r3
 8001d72:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4926      	ldr	r1, [pc, #152]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d78:	0083      	lsls	r3, r0, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	605a      	str	r2, [r3, #4]
		timer.av_wcnt ++;
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d80:	7e1b      	ldrb	r3, [r3, #24]
 8001d82:	3301      	adds	r3, #1
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d88:	761a      	strb	r2, [r3, #24]

		if(timer.av_wcnt > TIMER_AV_NUM){
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d8c:	7e1b      	ldrb	r3, [r3, #24]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d920      	bls.n	8001dd4 <HAL_RTCEx_WakeUpTimerEventCallback+0x78>
			timer.av_wcnt = 0;
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	761a      	strb	r2, [r3, #24]
			timer.dt_av = 0;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e00c      	b.n	8001dbe <HAL_RTCEx_WakeUpTimerEventCallback+0x62>
				timer.dt_av +=  timer.dt_buf[i];
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	4919      	ldr	r1, [pc, #100]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001db6:	6153      	str	r3, [r2, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d9ef      	bls.n	8001da4 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>
			}
			timer.dt_av /= TIMER_AV_NUM;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <HAL_RTCEx_WakeUpTimerEventCallback+0xb8>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dd2:	6153      	str	r3, [r2, #20]
		}

		if( timer.dt_max < timer.dt ){
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d203      	bcs.n	8001de8 <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>
			timer.dt_max = timer.dt;
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001de6:	6113      	str	r3, [r2, #16]
		}

		timer.dt = 0;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
	}
	else{
		timer.start ++;
		timer.dt = 0;
	}
}
 8001dee:	e008      	b.n	8001e02 <HAL_RTCEx_WakeUpTimerEventCallback+0xa6>
		timer.start ++;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001df2:	7e5b      	ldrb	r3, [r3, #25]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dfa:	765a      	strb	r2, [r3, #25]
		timer.dt = 0;
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	2000059c 	.word	0x2000059c
 8001e14:	aaaaaaab 	.word	0xaaaaaaab

08001e18 <usr_isr_tim1_up>:
//	uint16_t	msec_max;
//} TIMER_TIC;
//
//==============================================================================
void usr_isr_tim1_up(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	timer.dt += 10;
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <usr_isr_tim1_up+0x90>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	330a      	adds	r3, #10
 8001e22:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <usr_isr_tim1_up+0x90>)
 8001e24:	6013      	str	r3, [r2, #0]

	tm.usec += 1;
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e30:	801a      	strh	r2, [r3, #0]

	if( tm.usec >= 100 ){
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	2b63      	cmp	r3, #99	; 0x63
 8001e38:	d930      	bls.n	8001e9c <usr_isr_tim1_up+0x84>
		tm.usec = 0;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	801a      	strh	r2, [r3, #0]
		tm.msec ++;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e42:	885b      	ldrh	r3, [r3, #2]
 8001e44:	3301      	adds	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e4a:	805a      	strh	r2, [r3, #2]
		if( tm.msec >= 1000 ){
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e4e:	885b      	ldrh	r3, [r3, #2]
 8001e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e54:	d322      	bcc.n	8001e9c <usr_isr_tim1_up+0x84>
			tm.msec = 0;
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	805a      	strh	r2, [r3, #2]
			tm.sec ++;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e5e:	889b      	ldrh	r3, [r3, #4]
 8001e60:	3301      	adds	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e66:	809a      	strh	r2, [r3, #4]
			if( tm.sec >= 60 ){
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e6a:	889b      	ldrh	r3, [r3, #4]
 8001e6c:	2b3b      	cmp	r3, #59	; 0x3b
 8001e6e:	d915      	bls.n	8001e9c <usr_isr_tim1_up+0x84>
				tm.sec = 0;
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	809a      	strh	r2, [r3, #4]
				tm.min ++;
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e78:	88db      	ldrh	r3, [r3, #6]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e80:	80da      	strh	r2, [r3, #6]
				if( tm.min >= 60 ){
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e84:	88db      	ldrh	r3, [r3, #6]
 8001e86:	2b3b      	cmp	r3, #59	; 0x3b
 8001e88:	d908      	bls.n	8001e9c <usr_isr_tim1_up+0x84>
					tm.min = 0;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	80da      	strh	r2, [r3, #6]
					tm.hour ++;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e92:	891b      	ldrh	r3, [r3, #8]
 8001e94:	3301      	adds	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e9a:	811a      	strh	r2, [r3, #8]
				}
			}
		}
	}

}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2000059c 	.word	0x2000059c
 8001eac:	200005c0 	.word	0x200005c0

08001eb0 <GetTime_tim1up>:
void GetTime_tim1up(TIMER_DATA *time)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	*time = tm;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <GetTime_tim1up+0x28>)
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	cb03      	ldmia	r3!, {r0, r1}
 8001ec2:	6010      	str	r0, [r2, #0]
 8001ec4:	6051      	str	r1, [r2, #4]
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	8113      	strh	r3, [r2, #8]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200005c0 	.word	0x200005c0

08001edc <my_putint>:
//==============================================================================
//
//==============================================================================

uint8_t *my_putint(int num, uint8_t *buf)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
//	SKprintf("num=%d,num/10=%d,num%%10=%d\r\n",num,num/10,num%10);

	if (num < 0) {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da08      	bge.n	8001efe <my_putint+0x22>
        *buf = '-';
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	222d      	movs	r2, #45	; 0x2d
 8001ef0:	701a      	strb	r2, [r3, #0]
        buf++;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	603b      	str	r3, [r7, #0]
        num = -num;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	425b      	negs	r3, r3
 8001efc:	607b      	str	r3, [r7, #4]
    }

    if (num / 10 != 0) {
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3309      	adds	r3, #9
 8001f02:	2b12      	cmp	r3, #18
 8001f04:	d90b      	bls.n	8001f1e <my_putint+0x42>
        buf = my_putint(num / 10, buf);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <my_putint+0x74>)
 8001f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f0e:	1092      	asrs	r2, r2, #2
 8001f10:	17db      	asrs	r3, r3, #31
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ffe0 	bl	8001edc <my_putint>
 8001f1c:	6038      	str	r0, [r7, #0]
    }

    *buf = '0' + (num % 10);
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <my_putint+0x74>)
 8001f22:	fb83 1302 	smull	r1, r3, r3, r2
 8001f26:	1099      	asrs	r1, r3, #2
 8001f28:	17d3      	asrs	r3, r2, #31
 8001f2a:	1ac9      	subs	r1, r1, r3
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	1ad1      	subs	r1, r2, r3
 8001f36:	b2cb      	uxtb	r3, r1
 8001f38:	3330      	adds	r3, #48	; 0x30
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	701a      	strb	r2, [r3, #0]
    buf++;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	603b      	str	r3, [r7, #0]

    return buf;
 8001f46:	683b      	ldr	r3, [r7, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	66666667 	.word	0x66666667

08001f54 <my_putfloat>:
//==============================================================================
//
//==============================================================================

uint8_t *my_putfloat(double num, int precision, uint8_t *buf)
{
 8001f54:	b5b0      	push	{r4, r5, r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	int dt;
	double fracPart,dtf;
	int intPart;
	int digit;

	intPart = (int)num;
 8001f62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f66:	f7fe fe0f 	bl	8000b88 <__aeabi_d2iz>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	61bb      	str	r3, [r7, #24]
    buf = my_putint(intPart, buf);
 8001f6e:	6839      	ldr	r1, [r7, #0]
 8001f70:	69b8      	ldr	r0, [r7, #24]
 8001f72:	f7ff ffb3 	bl	8001edc <my_putint>
 8001f76:	6038      	str	r0, [r7, #0]
    *buf = '.';
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	222e      	movs	r2, #46	; 0x2e
 8001f7c:	701a      	strb	r2, [r3, #0]
    buf ++;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	603b      	str	r3, [r7, #0]

    fracPart = num - intPart;
 8001f84:	69b8      	ldr	r0, [r7, #24]
 8001f86:	f7fe fae5 	bl	8000554 <__aeabi_i2d>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f92:	f7fe f991 	bl	80002b8 <__aeabi_dsub>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (fracPart < 0) {
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001faa:	f7fe fdaf 	bl	8000b0c <__aeabi_dcmplt>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <my_putfloat+0x6c>
        fracPart = -fracPart;
 8001fb4:	6a3c      	ldr	r4, [r7, #32]
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001fbc:	e9c7 4508 	strd	r4, r5, [r7, #32]
    }

    int count = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    while (count < precision) {
 8001fc4:	e029      	b.n	800201a <my_putfloat+0xc6>
        fracPart *= 10;
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <my_putfloat+0xe0>)
 8001fcc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fd0:	f7fe fb2a 	bl	8000628 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        int digit = (int)fracPart;
 8001fdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fe0:	f7fe fdd2 	bl	8000b88 <__aeabi_d2iz>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	617b      	str	r3, [r7, #20]

        *buf = '0' + digit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3330      	adds	r3, #48	; 0x30
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	701a      	strb	r2, [r3, #0]
        buf ++;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	603b      	str	r3, [r7, #0]

        fracPart -= digit;
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7fe faaa 	bl	8000554 <__aeabi_i2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002008:	f7fe f956 	bl	80002b8 <__aeabi_dsub>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	e9c7 2308 	strd	r2, r3, [r7, #32]
        count++;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	3301      	adds	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
    while (count < precision) {
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	dbd1      	blt.n	8001fc6 <my_putfloat+0x72>
    }

    *buf = '\0';
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]

    return buf;
 8002028:	683b      	ldr	r3, [r7, #0]

}
 800202a:	4618      	mov	r0, r3
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bdb0      	pop	{r4, r5, r7, pc}
 8002032:	bf00      	nop
 8002034:	40240000 	.word	0x40240000

08002038 <my_putchar>:
//
//
//=============================================================================

uint8_t *my_putchar(char c, uint8_t *buf )
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
	//SKprintf("_putchar c=%x, buf=%p\r\n",c,buf);
	*buf = c;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	79fa      	ldrb	r2, [r7, #7]
 8002048:	701a      	strb	r2, [r3, #0]
	buf ++;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	603b      	str	r3, [r7, #0]
	return buf ;
 8002050:	683b      	ldr	r3, [r7, #0]
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <my_puts>:
//=============================================================================
//
//
//=============================================================================
uint8_t *my_puts(char* str, uint8_t *buf )
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
	uint8_t *buf2;

	buf2=buf;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	60fb      	str	r3, [r7, #12]

	//SKprintf("_puts str=%s, buf=%p\r\n",str,buf);
    while ( *str != '\0' ) {
 800206c:	e009      	b.n	8002082 <my_puts+0x24>
        buf = my_putchar(*str, buf);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	6839      	ldr	r1, [r7, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ffdf 	bl	8002038 <my_putchar>
 800207a:	6038      	str	r0, [r7, #0]
        str++;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	607b      	str	r3, [r7, #4]
    while ( *str != '\0' ) {
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f1      	bne.n	800206e <my_puts+0x10>
    }
    *buf='\0';
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
	//SKprintf("_puts str=%s  %p\r\n",buf2, buf);
	return buf ;
 8002090:	683b      	ldr	r3, [r7, #0]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <my_putshex>:
//
//
//=============================================================================

uint8_t *my_putshex(uint16_t dt, uint8_t flg, uint8_t *buf )
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	603a      	str	r2, [r7, #0]
 80020a6:	80fb      	strh	r3, [r7, #6]
 80020a8:	460b      	mov	r3, r1
 80020aa:	717b      	strb	r3, [r7, #5]
	uint8_t	sw;

	switch(flg){
 80020ac:	797b      	ldrb	r3, [r7, #5]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d007      	beq.n	80020c2 <my_putshex+0x26>
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	f300 80a0 	bgt.w	80021f8 <my_putshex+0x15c>
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d048      	beq.n	800214e <my_putshex+0xb2>
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d02f      	beq.n	8002120 <my_putshex+0x84>
 80020c0:	e09a      	b.n	80021f8 <my_putshex+0x15c>
	case 4:
		*buf = ConvC[( dt >> 12 ) & 0x0f ];
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	0b1b      	lsrs	r3, r3, #12
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	4a4e      	ldr	r2, [pc, #312]	; (8002208 <my_putshex+0x16c>)
 80020ce:	5cd2      	ldrb	r2, [r2, r3]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	701a      	strb	r2, [r3, #0]
		buf ++;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	603b      	str	r3, [r7, #0]
		*buf = ConvC[( dt >> 8 ) & 0x0f ];
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	4a48      	ldr	r2, [pc, #288]	; (8002208 <my_putshex+0x16c>)
 80020e6:	5cd2      	ldrb	r2, [r2, r3]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
		buf ++;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	603b      	str	r3, [r7, #0]
		*buf = ConvC[( dt >> 4 ) & 0x0f ];
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	4a42      	ldr	r2, [pc, #264]	; (8002208 <my_putshex+0x16c>)
 80020fe:	5cd2      	ldrb	r2, [r2, r3]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	701a      	strb	r2, [r3, #0]
		buf ++;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	603b      	str	r3, [r7, #0]
		*buf = ConvC[ dt  & 0x0f ];
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	4a3d      	ldr	r2, [pc, #244]	; (8002208 <my_putshex+0x16c>)
 8002112:	5cd2      	ldrb	r2, [r2, r3]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	701a      	strb	r2, [r3, #0]
		buf ++;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	603b      	str	r3, [r7, #0]
		break;
 800211e:	e06b      	b.n	80021f8 <my_putshex+0x15c>

	case 2:
		*buf = ConvC[( dt >> 4 ) & 0x0f ];
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	b29b      	uxth	r3, r3
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	4a37      	ldr	r2, [pc, #220]	; (8002208 <my_putshex+0x16c>)
 800212c:	5cd2      	ldrb	r2, [r2, r3]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	701a      	strb	r2, [r3, #0]
		buf ++;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	603b      	str	r3, [r7, #0]
		*buf = ConvC[ dt  & 0x0f ];
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <my_putshex+0x16c>)
 8002140:	5cd2      	ldrb	r2, [r2, r3]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	701a      	strb	r2, [r3, #0]
		buf ++;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	603b      	str	r3, [r7, #0]
		break;
 800214c:	e054      	b.n	80021f8 <my_putshex+0x15c>
	case 0:
		sw = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
		if(( sw == 1) || (( dt >> 12 ) & 0x0f ) != 0 ){
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d006      	beq.n	8002166 <my_putshex+0xca>
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	0b1b      	lsrs	r3, r3, #12
 800215c:	b29b      	uxth	r3, r3
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <my_putshex+0xe6>
			*buf = ConvC[( dt >> 12 ) & 0x0f ];
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	0b1b      	lsrs	r3, r3, #12
 800216a:	b29b      	uxth	r3, r3
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	4a25      	ldr	r2, [pc, #148]	; (8002208 <my_putshex+0x16c>)
 8002172:	5cd2      	ldrb	r2, [r2, r3]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	701a      	strb	r2, [r3, #0]
			buf ++;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	603b      	str	r3, [r7, #0]
			sw = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
		}
		if(( sw == 1) || (( dt >> 8 ) & 0x0f ) != 0 ){
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d006      	beq.n	8002196 <my_putshex+0xfa>
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00d      	beq.n	80021b2 <my_putshex+0x116>
			*buf = ConvC[( dt >> 8 ) & 0x0f ];
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	b29b      	uxth	r3, r3
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	4a19      	ldr	r2, [pc, #100]	; (8002208 <my_putshex+0x16c>)
 80021a2:	5cd2      	ldrb	r2, [r2, r3]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	701a      	strb	r2, [r3, #0]
			buf ++;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	603b      	str	r3, [r7, #0]
			sw = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
		}
		if(( sw == 1) || (( dt >> 4 ) & 0x0f ) != 0 ){
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d006      	beq.n	80021c6 <my_putshex+0x12a>
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00d      	beq.n	80021e2 <my_putshex+0x146>
			*buf = ConvC[( dt >> 4 ) & 0x0f ];
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <my_putshex+0x16c>)
 80021d2:	5cd2      	ldrb	r2, [r2, r3]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	701a      	strb	r2, [r3, #0]
			buf ++;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	603b      	str	r3, [r7, #0]
			sw = 1;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
		}

		*buf = ConvC[ dt & 0x0f ];
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <my_putshex+0x16c>)
 80021ea:	5cd2      	ldrb	r2, [r2, r3]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	701a      	strb	r2, [r3, #0]
		buf ++;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	603b      	str	r3, [r7, #0]


		break;
 80021f6:	bf00      	nop
	}
	return buf ;
 80021f8:	683b      	ldr	r3, [r7, #0]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	0801a5b8 	.word	0x0801a5b8

0800220c <Set_logflg>:
//=============================================================================
//
//
//=============================================================================
void Set_logflg(LOG_FLAG flg)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]

	if( flg < LF_MAX){
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d808      	bhi.n	800222e <Set_logflg+0x22>
		log.flg = flg;
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <Set_logflg+0x2c>)
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	7193      	strb	r3, [r2, #6]
		SKprintf("log.flg=%d \r\n",log.flg);
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <Set_logflg+0x2c>)
 8002224:	799b      	ldrb	r3, [r3, #6]
 8002226:	4619      	mov	r1, r3
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <Set_logflg+0x30>)
 800222a:	f002 f803 	bl	8004234 <SKprintf>
	}
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200005cc 	.word	0x200005cc
 800223c:	08018430 	.word	0x08018430

08002240 <Set_logInfo>:
//=============================================================================
//
//
//=============================================================================
void Set_logInfo(char *string)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
//	RTC_TimeTypeDef sTime;
//	RTC_DateTypeDef sDate;
	TIMER_DATA time;

	int i;
	uint8_t	flg = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	74fb      	strb	r3, [r7, #19]
	uint32_t dt;



	switch(log.flg){
 800224c:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <Set_logInfo+0x184>)
 800224e:	799b      	ldrb	r3, [r3, #6]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d009      	beq.n	8002268 <Set_logInfo+0x28>
 8002254:	2b02      	cmp	r3, #2
 8002256:	dc0e      	bgt.n	8002276 <Set_logInfo+0x36>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <Set_logInfo+0x3a>
 800225c:	2b01      	cmp	r3, #1
 800225e:	d000      	beq.n	8002262 <Set_logInfo+0x22>
	case LF_MAX_DATA_STOP:
		if( log.num >= LOG_RECODE_MAX)
			flg = 1;
		break;
	default:
		break;
 8002260:	e009      	b.n	8002276 <Set_logInfo+0x36>
		flg = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	74fb      	strb	r3, [r7, #19]
		break;
 8002266:	e00b      	b.n	8002280 <Set_logInfo+0x40>
		if( log.num >= LOG_RECODE_MAX)
 8002268:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <Set_logInfo+0x184>)
 800226a:	889b      	ldrh	r3, [r3, #4]
 800226c:	2b63      	cmp	r3, #99	; 0x63
 800226e:	d906      	bls.n	800227e <Set_logInfo+0x3e>
			flg = 1;
 8002270:	2301      	movs	r3, #1
 8002272:	74fb      	strb	r3, [r7, #19]
		break;
 8002274:	e003      	b.n	800227e <Set_logInfo+0x3e>
		break;
 8002276:	bf00      	nop
 8002278:	e002      	b.n	8002280 <Set_logInfo+0x40>
		break;
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <Set_logInfo+0x40>
		break;
 800227e:	bf00      	nop
	}


	if( flg == 0 ){
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 809a 	bne.w	80023bc <Set_logInfo+0x17c>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e01a      	b.n	80022c4 <Set_logInfo+0x84>
			log.rec[log.wptr].string[i] = string[i];
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	4a4b      	ldr	r2, [pc, #300]	; (80023c4 <Set_logInfo+0x184>)
 8002296:	8812      	ldrh	r2, [r2, #0]
 8002298:	4611      	mov	r1, r2
 800229a:	7818      	ldrb	r0, [r3, #0]
 800229c:	4a49      	ldr	r2, [pc, #292]	; (80023c4 <Set_logInfo+0x184>)
 800229e:	460b      	mov	r3, r1
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	1a5b      	subs	r3, r3, r1
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	441a      	add	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4413      	add	r3, r2
 80022ac:	330e      	adds	r3, #14
 80022ae:	4602      	mov	r2, r0
 80022b0:	701a      	strb	r2, [r3, #0]
			if(string[i] == '\0'){
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <Set_logInfo+0x8c>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b31      	cmp	r3, #49	; 0x31
 80022c8:	dde1      	ble.n	800228e <Set_logInfo+0x4e>
 80022ca:	e000      	b.n	80022ce <Set_logInfo+0x8e>
				break;
 80022cc:	bf00      	nop
			}
		}

//		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
//		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
		GetTime_tim1up(&time);
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fdec 	bl	8001eb0 <GetTime_tim1up>

		log.rec[log.wptr].Hours = time.hour;
 80022d8:	8a3a      	ldrh	r2, [r7, #16]
 80022da:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <Set_logInfo+0x184>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	4619      	mov	r1, r3
 80022e0:	b2d0      	uxtb	r0, r2
 80022e2:	4a38      	ldr	r2, [pc, #224]	; (80023c4 <Set_logInfo+0x184>)
 80022e4:	460b      	mov	r3, r1
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a5b      	subs	r3, r3, r1
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	3308      	adds	r3, #8
 80022f0:	4602      	mov	r2, r0
 80022f2:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Minutes = time.min;
 80022f4:	89fa      	ldrh	r2, [r7, #14]
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <Set_logInfo+0x184>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	4619      	mov	r1, r3
 80022fc:	b2d0      	uxtb	r0, r2
 80022fe:	4a31      	ldr	r2, [pc, #196]	; (80023c4 <Set_logInfo+0x184>)
 8002300:	460b      	mov	r3, r1
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a5b      	subs	r3, r3, r1
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	3309      	adds	r3, #9
 800230c:	4602      	mov	r2, r0
 800230e:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Seconds = time.sec;
 8002310:	89ba      	ldrh	r2, [r7, #12]
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <Set_logInfo+0x184>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	b2d0      	uxtb	r0, r2
 800231a:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <Set_logInfo+0x184>)
 800231c:	460b      	mov	r3, r1
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a5b      	subs	r3, r3, r1
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	330a      	adds	r3, #10
 8002328:	4602      	mov	r2, r0
 800232a:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].msec = time.msec;
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <Set_logInfo+0x184>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	8978      	ldrh	r0, [r7, #10]
 8002334:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <Set_logInfo+0x184>)
 8002336:	460b      	mov	r3, r1
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a5b      	subs	r3, r3, r1
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	330c      	adds	r3, #12
 8002342:	4602      	mov	r2, r0
 8002344:	801a      	strh	r2, [r3, #0]
		log.rec[log.wptr].usec = time.usec;
 8002346:	893a      	ldrh	r2, [r7, #8]
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <Set_logInfo+0x184>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	b2d0      	uxtb	r0, r2
 8002350:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <Set_logInfo+0x184>)
 8002352:	460b      	mov	r3, r1
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a5b      	subs	r3, r3, r1
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	330b      	adds	r3, #11
 800235e:	4602      	mov	r2, r0
 8002360:	701a      	strb	r2, [r3, #0]

//		log.rec[log.wptr].dt = timer.dt;
//		log.rec[log.wptr].dt_av = timer.dt_av;


		log.num ++;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <Set_logInfo+0x184>)
 8002364:	889b      	ldrh	r3, [r3, #4]
 8002366:	3301      	adds	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <Set_logInfo+0x184>)
 800236c:	809a      	strh	r2, [r3, #4]
		if( log.num > LOG_RECODE_MAX ){
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <Set_logInfo+0x184>)
 8002370:	889b      	ldrh	r3, [r3, #4]
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d902      	bls.n	800237c <Set_logInfo+0x13c>
			log.num = LOG_RECODE_MAX;
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <Set_logInfo+0x184>)
 8002378:	2264      	movs	r2, #100	; 0x64
 800237a:	809a      	strh	r2, [r3, #4]
		}

		log.wptr ++;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <Set_logInfo+0x184>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <Set_logInfo+0x184>)
 8002386:	801a      	strh	r2, [r3, #0]
		if( log.wptr > LOG_RECODE_MAX ){
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <Set_logInfo+0x184>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d902      	bls.n	8002396 <Set_logInfo+0x156>
			log.wptr = 0;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <Set_logInfo+0x184>)
 8002392:	2200      	movs	r2, #0
 8002394:	801a      	strh	r2, [r3, #0]
		}

		if( log.wptr == log.rptr ){
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <Set_logInfo+0x184>)
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <Set_logInfo+0x184>)
 800239c:	885b      	ldrh	r3, [r3, #2]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d10c      	bne.n	80023bc <Set_logInfo+0x17c>
			log.rptr ++;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <Set_logInfo+0x184>)
 80023a4:	885b      	ldrh	r3, [r3, #2]
 80023a6:	3301      	adds	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <Set_logInfo+0x184>)
 80023ac:	805a      	strh	r2, [r3, #2]
			if( log.rptr > LOG_RECODE_MAX ){
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <Set_logInfo+0x184>)
 80023b0:	885b      	ldrh	r3, [r3, #2]
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d902      	bls.n	80023bc <Set_logInfo+0x17c>
				log.rptr = 0;
 80023b6:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <Set_logInfo+0x184>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	805a      	strh	r2, [r3, #2]
			}
		}
	}
}
 80023bc:	bf00      	nop
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200005cc 	.word	0x200005cc

080023c8 <Set_logInfo2>:
//=============================================================================
//
//
//=============================================================================
void Set_logInfo2(const char *string, ...)
{
 80023c8:	b40f      	push	{r0, r1, r2, r3}
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b08e      	sub	sp, #56	; 0x38
 80023ce:	af00      	add	r7, sp, #0
	TIMER_DATA time;

	va_list ap;
	int i;
	char *buffer, *temp;
	uint8_t	flg = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t uint32value;
    double  floatvalue;



	temp = buffer = (char *)loginfo_buf;
 80023d6:	4b97      	ldr	r3, [pc, #604]	; (8002634 <Set_logInfo2+0x26c>)
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
//	temp = buffer = (char *)pvPortMalloc(128);
	//SKprintf("_logInfo2() 0001 temp= %p\r\n",temp);

	switch(log.flg){
 80023de:	4b96      	ldr	r3, [pc, #600]	; (8002638 <Set_logInfo2+0x270>)
 80023e0:	799b      	ldrb	r3, [r3, #6]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d00a      	beq.n	80023fc <Set_logInfo2+0x34>
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	dc0a      	bgt.n	8002400 <Set_logInfo2+0x38>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <Set_logInfo2+0x3c>
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d000      	beq.n	80023f4 <Set_logInfo2+0x2c>
	case LF_MAX_DATA_STOP:
		//if( log.num >= LOG_RECODE_MAX)
		//	flg = 1;
		break;
	default:
		break;
 80023f2:	e005      	b.n	8002400 <Set_logInfo2+0x38>
		flg = 1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80023fa:	e004      	b.n	8002406 <Set_logInfo2+0x3e>
		break;
 80023fc:	bf00      	nop
 80023fe:	e002      	b.n	8002406 <Set_logInfo2+0x3e>
		break;
 8002400:	bf00      	nop
 8002402:	e000      	b.n	8002406 <Set_logInfo2+0x3e>
		break;
 8002404:	bf00      	nop
	}

	if( flg == 0 ){
 8002406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 810b 	bne.w	8002626 <Set_logInfo2+0x25e>
		va_start(ap, string);
 8002410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002414:	607b      	str	r3, [r7, #4]
//		vsprintf(buffer, string, ap);

		i = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
	    while (*string != '\0') {
 800241a:	e063      	b.n	80024e4 <Set_logInfo2+0x11c>
	    	//*buffer = *string;
	    	//buffer ++;

	        if (*string == '%') {
 800241c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b25      	cmp	r3, #37	; 0x25
 8002422:	d155      	bne.n	80024d0 <Set_logInfo2+0x108>
	            string++; // Move past '%'
 8002424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002426:	3301      	adds	r3, #1
 8002428:	643b      	str	r3, [r7, #64]	; 0x40
	            if (*string == 'd') {
 800242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d10a      	bne.n	8002448 <Set_logInfo2+0x80>
	            	intvalue = va_arg(ap, int);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	1d1a      	adds	r2, r3, #4
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	617b      	str	r3, [r7, #20]

	                buffer = my_putint(intvalue, buffer);
 800243c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff fd4c 	bl	8001edc <my_putint>
 8002444:	6338      	str	r0, [r7, #48]	; 0x30
 8002446:	e04a      	b.n	80024de <Set_logInfo2+0x116>
	                buffer = my_putfloat(floatvalue, 2, buffer );
	               // SKprintf("val =%s\r\n",temp);

	            }
#endif
	            else if (*string == 'f') {
 8002448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b66      	cmp	r3, #102	; 0x66
 800244e:	d112      	bne.n	8002476 <Set_logInfo2+0xae>
	            	//SKprintf("_logInfo2() 0002 val =%d\r\n",intvalue);
	            	floatvalue = va_arg(ap, double);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3307      	adds	r3, #7
 8002454:	f023 0307 	bic.w	r3, r3, #7
 8002458:	f103 0208 	add.w	r2, r3, #8
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	e9c7 2306 	strd	r2, r3, [r7, #24]
	            	//SKprintf("_logInfo2() 0002 val =%g\r\n",floatvalue);
	            	//SKprintf("_logInfo2() 0010 val =%f\r\n",floatvalue);
	                buffer = my_putfloat(floatvalue, 2, buffer );
 8002466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002468:	2002      	movs	r0, #2
 800246a:	ed97 0b06 	vldr	d0, [r7, #24]
 800246e:	f7ff fd71 	bl	8001f54 <my_putfloat>
 8002472:	6338      	str	r0, [r7, #48]	; 0x30
 8002474:	e033      	b.n	80024de <Set_logInfo2+0x116>

	            //else if (*string == 'c') {
	            //    int value = va_arg(ap, int);
	            //    buffer = my_putchar(value, buffer );
	            //}
	            else if (*string == 's') {
 8002476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b73      	cmp	r3, #115	; 0x73
 800247c:	d10a      	bne.n	8002494 <Set_logInfo2+0xcc>
	            	charvalue = va_arg(ap, char*);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1d1a      	adds	r2, r3, #4
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	623b      	str	r3, [r7, #32]
	            	//SKprintf("_logInfo2() 0003 val =%s\r\n",charvalue);
	                buffer = my_puts(charvalue, buffer );
 8002488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800248a:	6a38      	ldr	r0, [r7, #32]
 800248c:	f7ff fde7 	bl	800205e <my_puts>
 8002490:	6338      	str	r0, [r7, #48]	; 0x30
 8002492:	e024      	b.n	80024de <Set_logInfo2+0x116>
	            } else if (*string == 'x') {
 8002494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b78      	cmp	r3, #120	; 0x78
 800249a:	d10c      	bne.n	80024b6 <Set_logInfo2+0xee>
	            	uintvalue = (uint16_t)va_arg(ap, int);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	1d1a      	adds	r2, r3, #4
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	84fb      	strh	r3, [r7, #38]	; 0x26
	            	//SKprintf("_logInfo2() 0004 val =%x\r\n",uintvalue);
	                buffer = my_putshex(uintvalue, 0, buffer );
 80024a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fdf5 	bl	800209c <my_putshex>
 80024b2:	6338      	str	r0, [r7, #48]	; 0x30
 80024b4:	e013      	b.n	80024de <Set_logInfo2+0x116>
	            } else {
	                buffer = my_puts('%', buffer );
 80024b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024b8:	2025      	movs	r0, #37	; 0x25
 80024ba:	f7ff fdd0 	bl	800205e <my_puts>
 80024be:	6338      	str	r0, [r7, #48]	; 0x30
	                buffer = my_puts(*string, buffer );
 80024c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fdc9 	bl	800205e <my_puts>
 80024cc:	6338      	str	r0, [r7, #48]	; 0x30
 80024ce:	e006      	b.n	80024de <Set_logInfo2+0x116>
	            }
	        }
	        else {
	            buffer = my_putchar(*string, buffer );
 80024d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fdae 	bl	8002038 <my_putchar>
 80024dc:	6338      	str	r0, [r7, #48]	; 0x30

//	        	buffer = my_puts(*string, buffer );
	        }
	        string++;
 80024de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e0:	3301      	adds	r3, #1
 80024e2:	643b      	str	r3, [r7, #64]	; 0x40
	    while (*string != '\0') {
 80024e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d197      	bne.n	800241c <Set_logInfo2+0x54>
	    	//buffer++;
	    }

		*buffer = '\0';
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
    	//SKprintf("_logInfo2() 0005\r\n");


		va_end(ap);

		for(i=0; i<PRiNTF_BUFFMAX; i++){
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
 80024f6:	e01a      	b.n	800252e <Set_logInfo2+0x166>
			log.rec[log.wptr].string[i] = temp[i];
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024fc:	4413      	add	r3, r2
 80024fe:	4a4e      	ldr	r2, [pc, #312]	; (8002638 <Set_logInfo2+0x270>)
 8002500:	8812      	ldrh	r2, [r2, #0]
 8002502:	4611      	mov	r1, r2
 8002504:	7818      	ldrb	r0, [r3, #0]
 8002506:	4a4c      	ldr	r2, [pc, #304]	; (8002638 <Set_logInfo2+0x270>)
 8002508:	460b      	mov	r3, r1
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a5b      	subs	r3, r3, r1
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	441a      	add	r2, r3
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	4413      	add	r3, r2
 8002516:	330e      	adds	r3, #14
 8002518:	4602      	mov	r2, r0
 800251a:	701a      	strb	r2, [r3, #0]
			if(temp[i] == '\0'){
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002520:	4413      	add	r3, r2
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <Set_logInfo2+0x16e>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	3301      	adds	r3, #1
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
 800252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002530:	2b31      	cmp	r3, #49	; 0x31
 8002532:	dde1      	ble.n	80024f8 <Set_logInfo2+0x130>
 8002534:	e000      	b.n	8002538 <Set_logInfo2+0x170>
				break;
 8002536:	bf00      	nop
		}

		//SKprintf("CC %s\r\n", &log.rec[log.wptr].string[0]);

//		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		GetTime_tim1up(&time);
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fcb7 	bl	8001eb0 <GetTime_tim1up>

		log.rec[log.wptr].Hours = time.hour;
 8002542:	8a3a      	ldrh	r2, [r7, #16]
 8002544:	4b3c      	ldr	r3, [pc, #240]	; (8002638 <Set_logInfo2+0x270>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	b2d0      	uxtb	r0, r2
 800254c:	4a3a      	ldr	r2, [pc, #232]	; (8002638 <Set_logInfo2+0x270>)
 800254e:	460b      	mov	r3, r1
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	1a5b      	subs	r3, r3, r1
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	3308      	adds	r3, #8
 800255a:	4602      	mov	r2, r0
 800255c:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Minutes = time.min;
 800255e:	89fa      	ldrh	r2, [r7, #14]
 8002560:	4b35      	ldr	r3, [pc, #212]	; (8002638 <Set_logInfo2+0x270>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	b2d0      	uxtb	r0, r2
 8002568:	4a33      	ldr	r2, [pc, #204]	; (8002638 <Set_logInfo2+0x270>)
 800256a:	460b      	mov	r3, r1
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	1a5b      	subs	r3, r3, r1
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	3309      	adds	r3, #9
 8002576:	4602      	mov	r2, r0
 8002578:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Seconds = time.sec;
 800257a:	89ba      	ldrh	r2, [r7, #12]
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <Set_logInfo2+0x270>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	b2d0      	uxtb	r0, r2
 8002584:	4a2c      	ldr	r2, [pc, #176]	; (8002638 <Set_logInfo2+0x270>)
 8002586:	460b      	mov	r3, r1
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	1a5b      	subs	r3, r3, r1
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	330a      	adds	r3, #10
 8002592:	4602      	mov	r2, r0
 8002594:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].msec = time.msec;
 8002596:	4b28      	ldr	r3, [pc, #160]	; (8002638 <Set_logInfo2+0x270>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	8978      	ldrh	r0, [r7, #10]
 800259e:	4a26      	ldr	r2, [pc, #152]	; (8002638 <Set_logInfo2+0x270>)
 80025a0:	460b      	mov	r3, r1
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a5b      	subs	r3, r3, r1
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	330c      	adds	r3, #12
 80025ac:	4602      	mov	r2, r0
 80025ae:	801a      	strh	r2, [r3, #0]
		log.rec[log.wptr].usec = time.usec;
 80025b0:	893a      	ldrh	r2, [r7, #8]
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <Set_logInfo2+0x270>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	b2d0      	uxtb	r0, r2
 80025ba:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <Set_logInfo2+0x270>)
 80025bc:	460b      	mov	r3, r1
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a5b      	subs	r3, r3, r1
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	330b      	adds	r3, #11
 80025c8:	4602      	mov	r2, r0
 80025ca:	701a      	strb	r2, [r3, #0]


		log.num ++;
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <Set_logInfo2+0x270>)
 80025ce:	889b      	ldrh	r3, [r3, #4]
 80025d0:	3301      	adds	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <Set_logInfo2+0x270>)
 80025d6:	809a      	strh	r2, [r3, #4]
		if( log.num > LOG_RECODE_MAX ){
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <Set_logInfo2+0x270>)
 80025da:	889b      	ldrh	r3, [r3, #4]
 80025dc:	2b64      	cmp	r3, #100	; 0x64
 80025de:	d902      	bls.n	80025e6 <Set_logInfo2+0x21e>
			log.num = LOG_RECODE_MAX;
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <Set_logInfo2+0x270>)
 80025e2:	2264      	movs	r2, #100	; 0x64
 80025e4:	809a      	strh	r2, [r3, #4]
		}

		log.wptr ++;
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <Set_logInfo2+0x270>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <Set_logInfo2+0x270>)
 80025f0:	801a      	strh	r2, [r3, #0]
		if( log.wptr > LOG_RECODE_MAX ){
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <Set_logInfo2+0x270>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d902      	bls.n	8002600 <Set_logInfo2+0x238>
			log.wptr = 0;
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <Set_logInfo2+0x270>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	801a      	strh	r2, [r3, #0]
		}

		if( log.wptr == log.rptr ){
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <Set_logInfo2+0x270>)
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <Set_logInfo2+0x270>)
 8002606:	885b      	ldrh	r3, [r3, #2]
 8002608:	429a      	cmp	r2, r3
 800260a:	d10c      	bne.n	8002626 <Set_logInfo2+0x25e>
			log.rptr ++;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <Set_logInfo2+0x270>)
 800260e:	885b      	ldrh	r3, [r3, #2]
 8002610:	3301      	adds	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <Set_logInfo2+0x270>)
 8002616:	805a      	strh	r2, [r3, #2]
			if( log.rptr > LOG_RECODE_MAX ){
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <Set_logInfo2+0x270>)
 800261a:	885b      	ldrh	r3, [r3, #2]
 800261c:	2b64      	cmp	r3, #100	; 0x64
 800261e:	d902      	bls.n	8002626 <Set_logInfo2+0x25e>
				log.rptr = 0;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <Set_logInfo2+0x270>)
 8002622:	2200      	movs	r2, #0
 8002624:	805a      	strh	r2, [r3, #2]
			}
		}
	}
	//SKprintf("_logInfo2() 0006 temp= %p\r\n",temp);
//	vPortFree(temp);
}
 8002626:	bf00      	nop
 8002628:	3738      	adds	r7, #56	; 0x38
 800262a:	46bd      	mov	sp, r7
 800262c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002630:	b004      	add	sp, #16
 8002632:	4770      	bx	lr
 8002634:	20001bb4 	.word	0x20001bb4
 8002638:	200005cc 	.word	0x200005cc

0800263c <LogInfo_display>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_display(void)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
	uint16_t	i;
	uint16_t	rptr = log.rptr;
 8002642:	4b38      	ldr	r3, [pc, #224]	; (8002724 <LogInfo_display+0xe8>)
 8002644:	885b      	ldrh	r3, [r3, #2]
 8002646:	80bb      	strh	r3, [r7, #4]

	SKprintf("LogInfo_display()\r\n");
 8002648:	4837      	ldr	r0, [pc, #220]	; (8002728 <LogInfo_display+0xec>)
 800264a:	f001 fdf3 	bl	8004234 <SKprintf>
	if( log.num != 0 ){
 800264e:	4b35      	ldr	r3, [pc, #212]	; (8002724 <LogInfo_display+0xe8>)
 8002650:	889b      	ldrh	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d05d      	beq.n	8002712 <LogInfo_display+0xd6>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8002656:	2300      	movs	r3, #0
 8002658:	80fb      	strh	r3, [r7, #6]
 800265a:	e056      	b.n	800270a <LogInfo_display+0xce>
			SKprintf("%02d:%02d:%02d.", log.rec[rptr].Hours, log.rec[rptr].Minutes, log.rec[rptr].Seconds);
 800265c:	88ba      	ldrh	r2, [r7, #4]
 800265e:	4931      	ldr	r1, [pc, #196]	; (8002724 <LogInfo_display+0xe8>)
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	3308      	adds	r3, #8
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	88ba      	ldrh	r2, [r7, #4]
 8002672:	492c      	ldr	r1, [pc, #176]	; (8002724 <LogInfo_display+0xe8>)
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	3309      	adds	r3, #9
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461c      	mov	r4, r3
 8002684:	88ba      	ldrh	r2, [r7, #4]
 8002686:	4927      	ldr	r1, [pc, #156]	; (8002724 <LogInfo_display+0xe8>)
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	330a      	adds	r3, #10
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4622      	mov	r2, r4
 8002698:	4601      	mov	r1, r0
 800269a:	4824      	ldr	r0, [pc, #144]	; (800272c <LogInfo_display+0xf0>)
 800269c:	f001 fdca 	bl	8004234 <SKprintf>

			SKprintf("%03d %02d0 ", log.rec[rptr].msec, log.rec[rptr].usec);
 80026a0:	88ba      	ldrh	r2, [r7, #4]
 80026a2:	4920      	ldr	r1, [pc, #128]	; (8002724 <LogInfo_display+0xe8>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	330c      	adds	r3, #12
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	88ba      	ldrh	r2, [r7, #4]
 80026b6:	491b      	ldr	r1, [pc, #108]	; (8002724 <LogInfo_display+0xe8>)
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	330b      	adds	r3, #11
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	4601      	mov	r1, r0
 80026ca:	4819      	ldr	r0, [pc, #100]	; (8002730 <LogInfo_display+0xf4>)
 80026cc:	f001 fdb2 	bl	8004234 <SKprintf>

			SKprintf("%s\r\n", &log.rec[rptr].string[0]);
 80026d0:	88ba      	ldrh	r2, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	3308      	adds	r3, #8
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <LogInfo_display+0xe8>)
 80026de:	4413      	add	r3, r2
 80026e0:	3306      	adds	r3, #6
 80026e2:	4619      	mov	r1, r3
 80026e4:	4813      	ldr	r0, [pc, #76]	; (8002734 <LogInfo_display+0xf8>)
 80026e6:	f001 fda5 	bl	8004234 <SKprintf>

			rptr ++;
 80026ea:	88bb      	ldrh	r3, [r7, #4]
 80026ec:	3301      	adds	r3, #1
 80026ee:	80bb      	strh	r3, [r7, #4]
			if( rptr > LOG_RECODE_MAX ){
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <LogInfo_display+0xbe>
				rptr = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	80bb      	strh	r3, [r7, #4]
			}
			if( log.wptr == rptr ){
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <LogInfo_display+0xe8>)
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	88ba      	ldrh	r2, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	d00a      	beq.n	800271a <LogInfo_display+0xde>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	3301      	adds	r3, #1
 8002708:	80fb      	strh	r3, [r7, #6]
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	2b63      	cmp	r3, #99	; 0x63
 800270e:	d9a5      	bls.n	800265c <LogInfo_display+0x20>
		}
	}
	else{
		SKprintf("LOG NONE\r\n");
	}
}
 8002710:	e004      	b.n	800271c <LogInfo_display+0xe0>
		SKprintf("LOG NONE\r\n");
 8002712:	4809      	ldr	r0, [pc, #36]	; (8002738 <LogInfo_display+0xfc>)
 8002714:	f001 fd8e 	bl	8004234 <SKprintf>
}
 8002718:	e000      	b.n	800271c <LogInfo_display+0xe0>
				break;
 800271a:	bf00      	nop
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}
 8002724:	200005cc 	.word	0x200005cc
 8002728:	08018440 	.word	0x08018440
 800272c:	08018454 	.word	0x08018454
 8002730:	08018464 	.word	0x08018464
 8002734:	08018470 	.word	0x08018470
 8002738:	08018478 	.word	0x08018478

0800273c <LogdisplayISR>:
//=============================================================================
//
//
//=============================================================================
void LogdisplayISR(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
	uint16_t	i,j;
	uint16_t	rptr = log.rptr;
 8002742:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <LogdisplayISR+0xc4>)
 8002744:	885b      	ldrh	r3, [r3, #2]
 8002746:	807b      	strh	r3, [r7, #2]



	if( log.num != 0 ){
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <LogdisplayISR+0xc4>)
 800274a:	889b      	ldrh	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d052      	beq.n	80027f6 <LogdisplayISR+0xba>
		HAL_UART_Transmit(Get_huart(SK_UART2_DEBUG), "\r\n", 3, HAL_MAX_DELAY);
 8002750:	2001      	movs	r0, #1
 8002752:	f001 fc77 	bl	8004044 <Get_huart>
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	2203      	movs	r2, #3
 800275c:	4929      	ldr	r1, [pc, #164]	; (8002804 <LogdisplayISR+0xc8>)
 800275e:	f00e f8ca 	bl	80108f6 <HAL_UART_Transmit>

		for(i=0; i<LOG_RECODE_MAX; i++){
 8002762:	2300      	movs	r3, #0
 8002764:	80fb      	strh	r3, [r7, #6]
 8002766:	e041      	b.n	80027ec <LogdisplayISR+0xb0>

			for(j=0; j<PRiNTF_BUFFMAX; j++ ){
 8002768:	2300      	movs	r3, #0
 800276a:	80bb      	strh	r3, [r7, #4]
 800276c:	e00f      	b.n	800278e <LogdisplayISR+0x52>
				if( log.rec[rptr].string[j] == '\0'){
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	88b9      	ldrh	r1, [r7, #4]
 8002772:	4823      	ldr	r0, [pc, #140]	; (8002800 <LogdisplayISR+0xc4>)
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4403      	add	r3, r0
 800277e:	440b      	add	r3, r1
 8002780:	330e      	adds	r3, #14
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <LogdisplayISR+0x5a>
			for(j=0; j<PRiNTF_BUFFMAX; j++ ){
 8002788:	88bb      	ldrh	r3, [r7, #4]
 800278a:	3301      	adds	r3, #1
 800278c:	80bb      	strh	r3, [r7, #4]
 800278e:	88bb      	ldrh	r3, [r7, #4]
 8002790:	2b31      	cmp	r3, #49	; 0x31
 8002792:	d9ec      	bls.n	800276e <LogdisplayISR+0x32>
 8002794:	e000      	b.n	8002798 <LogdisplayISR+0x5c>
					break;
 8002796:	bf00      	nop
				}
			}
			//SKprintf(" %s\r\n", buf);
			//SKprintf("%s\r\n", &log.rec[rptr].string[0]);

			HAL_UART_Transmit(Get_huart(SK_UART2_DEBUG), &log.rec[rptr].string[0], j, HAL_MAX_DELAY);
 8002798:	2001      	movs	r0, #1
 800279a:	f001 fc53 	bl	8004044 <Get_huart>
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	3308      	adds	r3, #8
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <LogdisplayISR+0xc4>)
 80027ac:	4413      	add	r3, r2
 80027ae:	1d99      	adds	r1, r3, #6
 80027b0:	88ba      	ldrh	r2, [r7, #4]
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	f00e f89e 	bl	80108f6 <HAL_UART_Transmit>
			HAL_UART_Transmit(Get_huart(SK_UART2_DEBUG), "\r\n", 3, HAL_MAX_DELAY);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f001 fc42 	bl	8004044 <Get_huart>
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	2203      	movs	r2, #3
 80027c6:	490f      	ldr	r1, [pc, #60]	; (8002804 <LogdisplayISR+0xc8>)
 80027c8:	f00e f895 	bl	80108f6 <HAL_UART_Transmit>

			rptr ++;
 80027cc:	887b      	ldrh	r3, [r7, #2]
 80027ce:	3301      	adds	r3, #1
 80027d0:	807b      	strh	r3, [r7, #2]
			if( rptr > LOG_RECODE_MAX ){
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d901      	bls.n	80027dc <LogdisplayISR+0xa0>
				rptr = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	807b      	strh	r3, [r7, #2]
			}

			if( log.wptr == rptr ){
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <LogdisplayISR+0xc4>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	887a      	ldrh	r2, [r7, #2]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d006      	beq.n	80027f4 <LogdisplayISR+0xb8>
		for(i=0; i<LOG_RECODE_MAX; i++){
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	3301      	adds	r3, #1
 80027ea:	80fb      	strh	r3, [r7, #6]
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	2b63      	cmp	r3, #99	; 0x63
 80027f0:	d9ba      	bls.n	8002768 <LogdisplayISR+0x2c>
				break;
			}
		}
	}

}
 80027f2:	e000      	b.n	80027f6 <LogdisplayISR+0xba>
				break;
 80027f4:	bf00      	nop
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200005cc 	.word	0x200005cc
 8002804:	08018484 	.word	0x08018484

08002808 <LogInfo_clear>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_clear(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

	log.rptr = 0;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <LogInfo_clear+0x20>)
 800280e:	2200      	movs	r2, #0
 8002810:	805a      	strh	r2, [r3, #2]
	log.wptr = 0;
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <LogInfo_clear+0x20>)
 8002814:	2200      	movs	r2, #0
 8002816:	801a      	strh	r2, [r3, #0]
	log.num = 0;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <LogInfo_clear+0x20>)
 800281a:	2200      	movs	r2, #0
 800281c:	809a      	strh	r2, [r3, #4]

	SKprintf("LOG CLEAR \r\n");
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <LogInfo_clear+0x24>)
 8002820:	f001 fd08 	bl	8004234 <SKprintf>
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200005cc 	.word	0x200005cc
 800282c:	08018488 	.word	0x08018488

08002830 <GetMessageQue>:

//==============================================================================
//
//==============================================================================
osMessageQueueId_t GetMessageQue(SK_TASK task)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
	osMessageQueueId_t 	handle;

	switch(task){
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d00e      	beq.n	800285e <GetMessageQue+0x2e>
 8002840:	2b02      	cmp	r3, #2
 8002842:	dc10      	bgt.n	8002866 <GetMessageQue+0x36>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <GetMessageQue+0x1e>
 8002848:	2b01      	cmp	r3, #1
 800284a:	d004      	beq.n	8002856 <GetMessageQue+0x26>
 800284c:	e00b      	b.n	8002866 <GetMessageQue+0x36>
	case SK_TASK_main:
		handle = myQueue01Handle;
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <GetMessageQue+0x44>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]
		break;
 8002854:	e007      	b.n	8002866 <GetMessageQue+0x36>
	case SK_TASK_sub1:
		handle = myQueue02Handle;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <GetMessageQue+0x48>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
		break;
 800285c:	e003      	b.n	8002866 <GetMessageQue+0x36>
	case SK_TASK_sub2:
		handle = myQueue03Handle;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <GetMessageQue+0x4c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
		break;
 8002864:	bf00      	nop
	}

	return handle;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	2000239c 	.word	0x2000239c
 8002878:	200023a0 	.word	0x200023a0
 800287c:	200023a4 	.word	0x200023a4

08002880 <task_chk_init>:

//==============================================================================
//
//==============================================================================
void task_chk_init(void)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
	uint32_t 			*dtp;
	int		i;
	int		j;


	SKprintf("task_chk_init()\r\n");
 8002886:	4864      	ldr	r0, [pc, #400]	; (8002a18 <task_chk_init+0x198>)
 8002888:	f001 fcd4 	bl	8004234 <SKprintf>

	for( i=0; i < SK_TASK_MAX; i++ ){
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e0b8      	b.n	8002a04 <task_chk_init+0x184>
		switch(i){
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d013      	beq.n	80028c0 <task_chk_init+0x40>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b02      	cmp	r3, #2
 800289c:	dc15      	bgt.n	80028ca <task_chk_init+0x4a>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <task_chk_init+0x2c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d005      	beq.n	80028b6 <task_chk_init+0x36>
 80028aa:	e00e      	b.n	80028ca <task_chk_init+0x4a>
		case SK_TASK_main:
			dtp = &Task_mainHandle;
 80028ac:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <task_chk_init+0x19c>)
 80028ae:	613b      	str	r3, [r7, #16]
			attr = &Task_main_attributes;
 80028b0:	4b5b      	ldr	r3, [pc, #364]	; (8002a20 <task_chk_init+0x1a0>)
 80028b2:	617b      	str	r3, [r7, #20]
			break;
 80028b4:	e00d      	b.n	80028d2 <task_chk_init+0x52>
		case SK_TASK_sub1:
			dtp = &Task_sub1Handle;
 80028b6:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <task_chk_init+0x1a4>)
 80028b8:	613b      	str	r3, [r7, #16]
			attr = &Task_sub1_attributes;
 80028ba:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <task_chk_init+0x1a8>)
 80028bc:	617b      	str	r3, [r7, #20]
			break;
 80028be:	e008      	b.n	80028d2 <task_chk_init+0x52>
		case SK_TASK_sub2:
			dtp = &Task_sub2Handle;
 80028c0:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <task_chk_init+0x1ac>)
 80028c2:	613b      	str	r3, [r7, #16]
			attr = &Task_sub2_attributes;
 80028c4:	4b5a      	ldr	r3, [pc, #360]	; (8002a30 <task_chk_init+0x1b0>)
 80028c6:	617b      	str	r3, [r7, #20]
			break;
 80028c8:	e003      	b.n	80028d2 <task_chk_init+0x52>
		default:
			SKprintf("Error taskid\r\n");
 80028ca:	485a      	ldr	r0, [pc, #360]	; (8002a34 <task_chk_init+0x1b4>)
 80028cc:	f001 fcb2 	bl	8004234 <SKprintf>
			break;
 80028d0:	bf00      	nop
		}
		hTask = (TaskHandle_t *)*dtp;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	607b      	str	r3, [r7, #4]

		for( j=0; j < configMAX_TASK_NAME_LEN; j++ ){
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	e012      	b.n	8002904 <task_chk_init+0x84>
			task_chk_table[i].name[j] = hTask->pcTaskName[j];
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4413      	add	r3, r2
 80028e4:	3334      	adds	r3, #52	; 0x34
 80028e6:	7818      	ldrb	r0, [r3, #0]
 80028e8:	4953      	ldr	r1, [pc, #332]	; (8002a38 <task_chk_init+0x1b8>)
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	18ca      	adds	r2, r1, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4413      	add	r3, r2
 80028fa:	4602      	mov	r2, r0
 80028fc:	701a      	strb	r2, [r3, #0]
		for( j=0; j < configMAX_TASK_NAME_LEN; j++ ){
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3301      	adds	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	dde9      	ble.n	80028de <task_chk_init+0x5e>
		}
		task_chk_table[i].name[j-1] = '\0';
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1e59      	subs	r1, r3, #1
 800290e:	484a      	ldr	r0, [pc, #296]	; (8002a38 <task_chk_init+0x1b8>)
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4403      	add	r3, r0
 800291c:	440b      	add	r3, r1
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]

		task_chk_table[i].chk_stack = hTask->pxStack;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002926:	4844      	ldr	r0, [pc, #272]	; (8002a38 <task_chk_init+0x1b8>)
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4403      	add	r3, r0
 8002934:	3310      	adds	r3, #16
 8002936:	6019      	str	r1, [r3, #0]
		task_chk_table[i].size = attr->stack_size;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	b298      	uxth	r0, r3
 800293e:	493e      	ldr	r1, [pc, #248]	; (8002a38 <task_chk_init+0x1b8>)
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	3314      	adds	r3, #20
 800294e:	4602      	mov	r2, r0
 8002950:	801a      	strh	r2, [r3, #0]
		task_chk_table[i].used = 0;
 8002952:	4939      	ldr	r1, [pc, #228]	; (8002a38 <task_chk_init+0x1b8>)
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3316      	adds	r3, #22
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]

		SKprintf(" %s\r\n", &task_chk_table[i].name[0]);
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <task_chk_init+0x1b8>)
 8002972:	4413      	add	r3, r2
 8002974:	4619      	mov	r1, r3
 8002976:	4831      	ldr	r0, [pc, #196]	; (8002a3c <task_chk_init+0x1bc>)
 8002978:	f001 fc5c 	bl	8004234 <SKprintf>
		SKprintf("  Check Start Address = %p\r\n", task_chk_table[i].chk_stack);
 800297c:	492e      	ldr	r1, [pc, #184]	; (8002a38 <task_chk_init+0x1b8>)
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	3310      	adds	r3, #16
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	482b      	ldr	r0, [pc, #172]	; (8002a40 <task_chk_init+0x1c0>)
 8002992:	f001 fc4f 	bl	8004234 <SKprintf>
		SKprintf("  Size          = %d\r\n", task_chk_table[i].size);
 8002996:	4928      	ldr	r1, [pc, #160]	; (8002a38 <task_chk_init+0x1b8>)
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	3314      	adds	r3, #20
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	4826      	ldr	r0, [pc, #152]	; (8002a44 <task_chk_init+0x1c4>)
 80029ac:	f001 fc42 	bl	8004234 <SKprintf>
		SKprintf("  Used Size     = %d(%d%%)\r\n\r\n", task_chk_table[i].used, 100*task_chk_table[i].used/task_chk_table[i].size);
 80029b0:	4921      	ldr	r1, [pc, #132]	; (8002a38 <task_chk_init+0x1b8>)
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	3316      	adds	r3, #22
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	461c      	mov	r4, r3
 80029c4:	491c      	ldr	r1, [pc, #112]	; (8002a38 <task_chk_init+0x1b8>)
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	3316      	adds	r3, #22
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	2364      	movs	r3, #100	; 0x64
 80029da:	fb03 f102 	mul.w	r1, r3, r2
 80029de:	4816      	ldr	r0, [pc, #88]	; (8002a38 <task_chk_init+0x1b8>)
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4403      	add	r3, r0
 80029ec:	3314      	adds	r3, #20
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	fb91 f3f3 	sdiv	r3, r1, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	4621      	mov	r1, r4
 80029f8:	4813      	ldr	r0, [pc, #76]	; (8002a48 <task_chk_init+0x1c8>)
 80029fa:	f001 fc1b 	bl	8004234 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3301      	adds	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	f77f af43 	ble.w	8002892 <task_chk_init+0x12>

	}
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd90      	pop	{r4, r7, pc}
 8002a16:	bf00      	nop
 8002a18:	08018498 	.word	0x08018498
 8002a1c:	20002390 	.word	0x20002390
 8002a20:	0801a608 	.word	0x0801a608
 8002a24:	20002394 	.word	0x20002394
 8002a28:	0801a62c 	.word	0x0801a62c
 8002a2c:	20002398 	.word	0x20002398
 8002a30:	0801a650 	.word	0x0801a650
 8002a34:	080184ac 	.word	0x080184ac
 8002a38:	20001c34 	.word	0x20001c34
 8002a3c:	080184bc 	.word	0x080184bc
 8002a40:	080184c4 	.word	0x080184c4
 8002a44:	080184e4 	.word	0x080184e4
 8002a48:	080184fc 	.word	0x080184fc

08002a4c <task_stack_chk>:

//==============================================================================
//
//==============================================================================
void task_stack_chk(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
#ifdef ___TASK_CHK_DISPLAY
	SKprintf_uart1("\r\ntask_stack_chk()\r\n");
	SKprintf("\r\ntask_stack_chk()\r\n");
#endif	// ___TASK_CHK_DISPLAY

	for( i=0; i < SK_TASK_MAX; i++ ){
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	e059      	b.n	8002b0c <task_stack_chk+0xc0>

		for( j= 0; j < task_chk_table[i].size; j++){
 8002a58:	2300      	movs	r3, #0
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	e010      	b.n	8002a80 <task_stack_chk+0x34>
			if(task_chk_table[i].chk_stack[j] != 0xa5){
 8002a5e:	492f      	ldr	r1, [pc, #188]	; (8002b1c <task_stack_chk+0xd0>)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3310      	adds	r3, #16
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2ba5      	cmp	r3, #165	; 0xa5
 8002a78:	d110      	bne.n	8002a9c <task_stack_chk+0x50>
		for( j= 0; j < task_chk_table[i].size; j++){
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4926      	ldr	r1, [pc, #152]	; (8002b1c <task_stack_chk+0xd0>)
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3314      	adds	r3, #20
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4293      	cmp	r3, r2
 8002a98:	dbe1      	blt.n	8002a5e <task_stack_chk+0x12>
 8002a9a:	e000      	b.n	8002a9e <task_stack_chk+0x52>
				break;
 8002a9c:	bf00      	nop
			}
		}
		task_chk_table[i].used = task_chk_table[i].size - j;
 8002a9e:	491f      	ldr	r1, [pc, #124]	; (8002b1c <task_stack_chk+0xd0>)
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	3314      	adds	r3, #20
 8002aae:	881a      	ldrh	r2, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	b298      	uxth	r0, r3
 8002ab8:	4918      	ldr	r1, [pc, #96]	; (8002b1c <task_stack_chk+0xd0>)
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3316      	adds	r3, #22
 8002ac8:	4602      	mov	r2, r0
 8002aca:	801a      	strh	r2, [r3, #0]

#ifdef ___TASK_CHK_DISPLAY
		SKprintf(" %s:Used Size= %d(%d%%)\r\n", &task_chk_table[i].name[0], task_chk_table[i].used, (100*task_chk_table[i].used/task_chk_table[i].size));
#endif	// ___TASK_CHK_DISPLAY

		if( j < (task_chk_table[i].size/10) ){
 8002acc:	4913      	ldr	r1, [pc, #76]	; (8002b1c <task_stack_chk+0xd0>)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	3314      	adds	r3, #20
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <task_stack_chk+0xd4>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	08db      	lsrs	r3, r3, #3
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	4293      	cmp	r3, r2
 8002aee:	da0a      	bge.n	8002b06 <task_stack_chk+0xba>
			SKprintf("WARNING:STACK FULL  %s\r\n", &task_chk_table[i].name[0]);
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <task_stack_chk+0xd0>)
 8002afc:	4413      	add	r3, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	4808      	ldr	r0, [pc, #32]	; (8002b24 <task_stack_chk+0xd8>)
 8002b02:	f001 fb97 	bl	8004234 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	dda2      	ble.n	8002a58 <task_stack_chk+0xc>
		}

	}
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20001c34 	.word	0x20001c34
 8002b20:	cccccccd 	.word	0xcccccccd
 8002b24:	0801851c 	.word	0x0801851c

08002b28 <task_stack_display>:

void task_stack_display(void)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
	int		i;

	SKprintf("\r\nStack Info\r\n");
 8002b2e:	482e      	ldr	r0, [pc, #184]	; (8002be8 <task_stack_display+0xc0>)
 8002b30:	f001 fb80 	bl	8004234 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	e04e      	b.n	8002bd8 <task_stack_display+0xb0>
//		SKprintf(" %s:Used Size= %d(%d%%)\r\n", &task_chk_table[i].name[0], task_chk_table[i].used, (100*task_chk_table[i].used/task_chk_table[i].size));
		SKprintf(" %s\r\n", &task_chk_table[i].name[0]);
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4a29      	ldr	r2, [pc, #164]	; (8002bec <task_stack_display+0xc4>)
 8002b46:	4413      	add	r3, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4829      	ldr	r0, [pc, #164]	; (8002bf0 <task_stack_display+0xc8>)
 8002b4c:	f001 fb72 	bl	8004234 <SKprintf>
		SKprintf("  Check Start Address = %p\r\n", task_chk_table[i].chk_stack);
 8002b50:	4926      	ldr	r1, [pc, #152]	; (8002bec <task_stack_display+0xc4>)
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3310      	adds	r3, #16
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	4823      	ldr	r0, [pc, #140]	; (8002bf4 <task_stack_display+0xcc>)
 8002b66:	f001 fb65 	bl	8004234 <SKprintf>
		SKprintf("  Size          = %d\r\n", task_chk_table[i].size);
 8002b6a:	4920      	ldr	r1, [pc, #128]	; (8002bec <task_stack_display+0xc4>)
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	3314      	adds	r3, #20
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	481e      	ldr	r0, [pc, #120]	; (8002bf8 <task_stack_display+0xd0>)
 8002b80:	f001 fb58 	bl	8004234 <SKprintf>
		SKprintf("  Used Size     = %d(%d%%)\r\n\r\n", task_chk_table[i].used, 100*task_chk_table[i].used/task_chk_table[i].size);
 8002b84:	4919      	ldr	r1, [pc, #100]	; (8002bec <task_stack_display+0xc4>)
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3316      	adds	r3, #22
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	461c      	mov	r4, r3
 8002b98:	4914      	ldr	r1, [pc, #80]	; (8002bec <task_stack_display+0xc4>)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3316      	adds	r3, #22
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	2364      	movs	r3, #100	; 0x64
 8002bae:	fb03 f102 	mul.w	r1, r3, r2
 8002bb2:	480e      	ldr	r0, [pc, #56]	; (8002bec <task_stack_display+0xc4>)
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4403      	add	r3, r0
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	fb91 f3f3 	sdiv	r3, r1, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4621      	mov	r1, r4
 8002bcc:	480b      	ldr	r0, [pc, #44]	; (8002bfc <task_stack_display+0xd4>)
 8002bce:	f001 fb31 	bl	8004234 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	ddad      	ble.n	8002b3a <task_stack_display+0x12>
	}

}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	08018538 	.word	0x08018538
 8002bec:	20001c34 	.word	0x20001c34
 8002bf0:	080184bc 	.word	0x080184bc
 8002bf4:	080184c4 	.word	0x080184c4
 8002bf8:	080184e4 	.word	0x080184e4
 8002bfc:	080184fc 	.word	0x080184fc

08002c00 <Disp_task_info>:

//==============================================================================
//
//==============================================================================
void Disp_task_info(SK_TASK taskid)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
	SKtskTaskControlBlock *hTask;
	osThreadAttr_t		*attr;
	uint32_t 			*dtp;

	switch(taskid){
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d016      	beq.n	8002c3e <Disp_task_info+0x3e>
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	dc1c      	bgt.n	8002c4e <Disp_task_info+0x4e>
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <Disp_task_info+0x1e>
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d008      	beq.n	8002c2e <Disp_task_info+0x2e>
 8002c1c:	e017      	b.n	8002c4e <Disp_task_info+0x4e>
	case SK_TASK_main:
		dtp = &Task_mainHandle;
 8002c1e:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <Disp_task_info+0xf0>)
 8002c20:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	617b      	str	r3, [r7, #20]
		attr = &Task_main_attributes;
 8002c28:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <Disp_task_info+0xf4>)
 8002c2a:	613b      	str	r3, [r7, #16]
		break;
 8002c2c:	e013      	b.n	8002c56 <Disp_task_info+0x56>
	case SK_TASK_sub1:
		dtp = &Task_sub1Handle;
 8002c2e:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <Disp_task_info+0xf8>)
 8002c30:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	617b      	str	r3, [r7, #20]
		attr = &Task_sub1_attributes;
 8002c38:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <Disp_task_info+0xfc>)
 8002c3a:	613b      	str	r3, [r7, #16]
		break;
 8002c3c:	e00b      	b.n	8002c56 <Disp_task_info+0x56>
	case SK_TASK_sub2:
		dtp = &Task_sub2Handle;
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <Disp_task_info+0x100>)
 8002c40:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	617b      	str	r3, [r7, #20]
		attr = &Task_sub2_attributes;
 8002c48:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <Disp_task_info+0x104>)
 8002c4a:	613b      	str	r3, [r7, #16]
		break;
 8002c4c:	e003      	b.n	8002c56 <Disp_task_info+0x56>
	default:
		SKprintf("Error taskid\r\n");
 8002c4e:	482e      	ldr	r0, [pc, #184]	; (8002d08 <Disp_task_info+0x108>)
 8002c50:	f001 faf0 	bl	8004234 <SKprintf>
		break;
 8002c54:	bf00      	nop
	}

	SKprintf("<<< %s >>>\r\n" ,attr->name);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	482b      	ldr	r0, [pc, #172]	; (8002d0c <Disp_task_info+0x10c>)
 8002c5e:	f001 fae9 	bl	8004234 <SKprintf>
	SKprintf(" TCB Address           = %p\r\n" ,hTask);
 8002c62:	6979      	ldr	r1, [r7, #20]
 8002c64:	482a      	ldr	r0, [pc, #168]	; (8002d10 <Disp_task_info+0x110>)
 8002c66:	f001 fae5 	bl	8004234 <SKprintf>
	SKprintf(" Stack Botom Address   = 0x%lx\r\n", hTask->pxTopOfStack );
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4828      	ldr	r0, [pc, #160]	; (8002d14 <Disp_task_info+0x114>)
 8002c72:	f001 fadf 	bl	8004234 <SKprintf>
	SKprintf(" Stack top Address     = 0x%lx\r\n", hTask->pxStack );
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4826      	ldr	r0, [pc, #152]	; (8002d18 <Disp_task_info+0x118>)
 8002c7e:	f001 fad9 	bl	8004234 <SKprintf>
	SKprintf(" stack_size            = %lx\r\n" ,attr->stack_size);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	4619      	mov	r1, r3
 8002c88:	4824      	ldr	r0, [pc, #144]	; (8002d1c <Disp_task_info+0x11c>)
 8002c8a:	f001 fad3 	bl	8004234 <SKprintf>
	SKprintf(" uxTCBNumber           = %lx\r\n", hTask->uxTCBNumber );
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4619      	mov	r1, r3
 8002c94:	4822      	ldr	r0, [pc, #136]	; (8002d20 <Disp_task_info+0x120>)
 8002c96:	f001 facd 	bl	8004234 <SKprintf>
	SKprintf(" uxTaskNumber          = %lx\r\n", hTask->uxTaskNumber );
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4820      	ldr	r0, [pc, #128]	; (8002d24 <Disp_task_info+0x124>)
 8002ca2:	f001 fac7 	bl	8004234 <SKprintf>
	SKprintf(" uxBasePriority        = %lx\r\n", hTask->uxBasePriority );
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	4619      	mov	r1, r3
 8002cac:	481e      	ldr	r0, [pc, #120]	; (8002d28 <Disp_task_info+0x128>)
 8002cae:	f001 fac1 	bl	8004234 <SKprintf>
	SKprintf(" uxMutexesHeld         = %lx\r\n", hTask->uxMutexesHeld );
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	481c      	ldr	r0, [pc, #112]	; (8002d2c <Disp_task_info+0x12c>)
 8002cba:	f001 fabb 	bl	8004234 <SKprintf>
	SKprintf(" ulNotifiedValue       = %lx\r\n", hTask->ulNotifiedValue );
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	481a      	ldr	r0, [pc, #104]	; (8002d30 <Disp_task_info+0x130>)
 8002cc6:	f001 fab5 	bl	8004234 <SKprintf>
	SKprintf(" ucNotifyState         = %lx\r\n", hTask->ucNotifyState );
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4817      	ldr	r0, [pc, #92]	; (8002d34 <Disp_task_info+0x134>)
 8002cd6:	f001 faad 	bl	8004234 <SKprintf>
	SKprintf(" ucStaticallyAllocated = %lx\r\n", hTask->ucStaticallyAllocated );
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4815      	ldr	r0, [pc, #84]	; (8002d38 <Disp_task_info+0x138>)
 8002ce4:	f001 faa6 	bl	8004234 <SKprintf>
	SKprintf(" tz_module = %lx\r\n" ,attr->tz_module);
	SKprintf(" reserved = %lx\r\n" ,attr->reserved);
#endif	// ___NOP


}
 8002ce8:	bf00      	nop
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20002390 	.word	0x20002390
 8002cf4:	0801a608 	.word	0x0801a608
 8002cf8:	20002394 	.word	0x20002394
 8002cfc:	0801a62c 	.word	0x0801a62c
 8002d00:	20002398 	.word	0x20002398
 8002d04:	0801a650 	.word	0x0801a650
 8002d08:	080184ac 	.word	0x080184ac
 8002d0c:	08018548 	.word	0x08018548
 8002d10:	08018558 	.word	0x08018558
 8002d14:	08018578 	.word	0x08018578
 8002d18:	0801859c 	.word	0x0801859c
 8002d1c:	080185c0 	.word	0x080185c0
 8002d20:	080185e0 	.word	0x080185e0
 8002d24:	08018600 	.word	0x08018600
 8002d28:	08018620 	.word	0x08018620
 8002d2c:	08018640 	.word	0x08018640
 8002d30:	08018660 	.word	0x08018660
 8002d34:	08018680 	.word	0x08018680
 8002d38:	080186a0 	.word	0x080186a0

08002d3c <Get_task_stackptr>:

//==============================================================================
//
//==============================================================================
void Get_task_stackptr(SK_TASK taskid, STACK_INFO *ptr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
	SKtskTaskControlBlock *hTask;
	uint32_t 			*dtp;

	switch(taskid){
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d014      	beq.n	8002d78 <Get_task_stackptr+0x3c>
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	dc18      	bgt.n	8002d84 <Get_task_stackptr+0x48>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <Get_task_stackptr+0x20>
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d006      	beq.n	8002d68 <Get_task_stackptr+0x2c>
 8002d5a:	e013      	b.n	8002d84 <Get_task_stackptr+0x48>
	case SK_TASK_main:
		dtp = &Task_mainHandle;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <Get_task_stackptr+0x90>)
 8002d5e:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
		break;
 8002d66:	e011      	b.n	8002d8c <Get_task_stackptr+0x50>
	case SK_TASK_sub1:
		hTask = (TaskHandle_t)&Task_sub1Handle;
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <Get_task_stackptr+0x94>)
 8002d6a:	60fb      	str	r3, [r7, #12]
		dtp = &Task_sub1Handle;
 8002d6c:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <Get_task_stackptr+0x94>)
 8002d6e:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
		break;
 8002d76:	e009      	b.n	8002d8c <Get_task_stackptr+0x50>
	case SK_TASK_sub2:
		dtp = &Task_sub2Handle;
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <Get_task_stackptr+0x98>)
 8002d7a:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
		break;
 8002d82:	e003      	b.n	8002d8c <Get_task_stackptr+0x50>
	default:
		SKprintf("Error taskid\r\n");
 8002d84:	4814      	ldr	r0, [pc, #80]	; (8002dd8 <Get_task_stackptr+0x9c>)
 8002d86:	f001 fa55 	bl	8004234 <SKprintf>
		break;
 8002d8a:	bf00      	nop
	}

	SKprintf(" Stack top Address     = 0x%lx\r\n", hTask->pxStack );
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4619      	mov	r1, r3
 8002d92:	4812      	ldr	r0, [pc, #72]	; (8002ddc <Get_task_stackptr+0xa0>)
 8002d94:	f001 fa4e 	bl	8004234 <SKprintf>



	ptr->pxStack = (char *)hTask->pxStack;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
	ptr->pxTopOfStack = (char *)hTask->pxTopOfStack;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	601a      	str	r2, [r3, #0]
	ptr->size = (uint16_t)(128*4);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	811a      	strh	r2, [r3, #8]

	SKprintf("pxStack=%p,pxTopOfStack=%p,size=%d\r\n", ptr->pxStack,ptr->pxTopOfStack,ptr->size);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	891b      	ldrh	r3, [r3, #8]
 8002dbc:	4808      	ldr	r0, [pc, #32]	; (8002de0 <Get_task_stackptr+0xa4>)
 8002dbe:	f001 fa39 	bl	8004234 <SKprintf>
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20002390 	.word	0x20002390
 8002dd0:	20002394 	.word	0x20002394
 8002dd4:	20002398 	.word	0x20002398
 8002dd8:	080184ac 	.word	0x080184ac
 8002ddc:	0801859c 	.word	0x0801859c
 8002de0:	080186c0 	.word	0x080186c0

08002de4 <user_init>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
	RETURN_STATUS	status = RET_TRUE;
 8002dea:	2301      	movs	r3, #1
 8002dec:	71fb      	strb	r3, [r7, #7]

	//LED_Flush(0);
	SKprintf("Initialize all configured peripherals\r\n");
 8002dee:	481a      	ldr	r0, [pc, #104]	; (8002e58 <user_init+0x74>)
 8002df0:	f001 fa20 	bl	8004234 <SKprintf>
	SKprintf("******************\r\n");
 8002df4:	4819      	ldr	r0, [pc, #100]	; (8002e5c <user_init+0x78>)
 8002df6:	f001 fa1d 	bl	8004234 <SKprintf>
	SKprintf("*** UART START ***\r\n");
 8002dfa:	4819      	ldr	r0, [pc, #100]	; (8002e60 <user_init+0x7c>)
 8002dfc:	f001 fa1a 	bl	8004234 <SKprintf>
	SKprintf("******************\r\n");
 8002e00:	4816      	ldr	r0, [pc, #88]	; (8002e5c <user_init+0x78>)
 8002e02:	f001 fa17 	bl	8004234 <SKprintf>


	//-----------------------------------------------
	// Log Timer Counter
	//-----------------------------------------------
	timer.usec = 0;
 8002e06:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <user_init+0x80>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	835a      	strh	r2, [r3, #26]
	timer.msec = 0;
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <user_init+0x80>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	839a      	strh	r2, [r3, #28]
	timer.usec_max = 0;
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <user_init+0x80>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	83da      	strh	r2, [r3, #30]
	timer.msec_max = 0;
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <user_init+0x80>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	841a      	strh	r2, [r3, #32]
	timer.dt = 0;
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <user_init+0x80>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
	timer.dt_max = 0;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <user_init+0x80>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
	timer.dt_av = 0;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <user_init+0x80>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
	timer.start = 0;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <user_init+0x80>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	765a      	strb	r2, [r3, #25]
	timer.av_wcnt = 0;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <user_init+0x80>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	761a      	strb	r2, [r3, #24]

	//-----------------------------------------------
	// Log Info Init
	//-----------------------------------------------
	LogInfo_clear();
 8002e3c:	f7ff fce4 	bl	8002808 <LogInfo_clear>


	//-----------------------------------------------
	// 受信割込み準備
	//-----------------------------------------------
	uart_Data_init();
 8002e40:	f001 f960 	bl	8004104 <uart_Data_init>

	uart_Rcv_init(SK_UART1_RS485);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f001 f98b 	bl	8004160 <uart_Rcv_init>
	uart_Rcv_init(SK_UART2_DEBUG);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f001 f988 	bl	8004160 <uart_Rcv_init>

}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	080186e8 	.word	0x080186e8
 8002e5c:	08018710 	.word	0x08018710
 8002e60:	08018728 	.word	0x08018728
 8002e64:	2000059c 	.word	0x2000059c

08002e68 <rtc_display>:

//==============================================================================
//
//==============================================================================
void rtc_display(void)
{
 8002e68:	b5b0      	push	{r4, r5, r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	2200      	movs	r2, #0
 8002e72:	4619      	mov	r1, r3
 8002e74:	480f      	ldr	r0, [pc, #60]	; (8002eb4 <rtc_display+0x4c>)
 8002e76:	f00c fda7 	bl	800f9c8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4619      	mov	r1, r3
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <rtc_display+0x4c>)
 8002e82:	f00c fe83 	bl	800fb8c <HAL_RTC_GetDate>
	SKprintf("\r\n20%02d.%02d.%02d %02d:%02d:%02d\r\n", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	787b      	ldrb	r3, [r7, #1]
 8002e8c:	461c      	mov	r4, r3
 8002e8e:	78bb      	ldrb	r3, [r7, #2]
 8002e90:	461d      	mov	r5, r3
 8002e92:	793b      	ldrb	r3, [r7, #4]
 8002e94:	797a      	ldrb	r2, [r7, #5]
 8002e96:	79b9      	ldrb	r1, [r7, #6]
 8002e98:	9102      	str	r1, [sp, #8]
 8002e9a:	9201      	str	r2, [sp, #4]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	462b      	mov	r3, r5
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	4601      	mov	r1, r0
 8002ea4:	4804      	ldr	r0, [pc, #16]	; (8002eb8 <rtc_display+0x50>)
 8002ea6:	f001 f9c5 	bl	8004234 <SKprintf>
	//SKprintf("av=%d max=%d\r\n",timer.dt_av,timer.	dt_max);
	//SKprintf("dt_buf=%d, %d, %d\r\n", timer.dt_buf[0],timer.dt_buf[1],timer.dt_buf[2]);
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20002258 	.word	0x20002258
 8002eb8:	08018740 	.word	0x08018740

08002ebc <GetTimerEventID>:

//==============================================================================
//
//==============================================================================
uint8_t GetTimerEventID(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
	uint8_t				i;
	uint8_t				rtn;

	rtn = 0xff;
 8002ec2:	23ff      	movs	r3, #255	; 0xff
 8002ec4:	71bb      	strb	r3, [r7, #6]
	for(i=0; i<TIMER_EVENT_MAX; i++){
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	71fb      	strb	r3, [r7, #7]
 8002eca:	e01a      	b.n	8002f02 <GetTimerEventID+0x46>
		if( timer_event[i].flag == TIMER_NO_USED){
 8002ecc:	79fa      	ldrb	r2, [r7, #7]
 8002ece:	4912      	ldr	r1, [pc, #72]	; (8002f18 <GetTimerEventID+0x5c>)
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3302      	adds	r3, #2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10c      	bne.n	8002efc <GetTimerEventID+0x40>
			timer_event[i].flag = TIMER_USED;
 8002ee2:	79fa      	ldrb	r2, [r7, #7]
 8002ee4:	490c      	ldr	r1, [pc, #48]	; (8002f18 <GetTimerEventID+0x5c>)
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
			rtn = i;
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	71bb      	strb	r3, [r7, #6]
			break;
 8002efa:	e005      	b.n	8002f08 <GetTimerEventID+0x4c>
	for(i=0; i<TIMER_EVENT_MAX; i++){
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	3301      	adds	r3, #1
 8002f00:	71fb      	strb	r3, [r7, #7]
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d9e1      	bls.n	8002ecc <GetTimerEventID+0x10>
		}
	}

	return rtn;
 8002f08:	79bb      	ldrb	r3, [r7, #6]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20001c7c 	.word	0x20001c7c

08002f1c <ReleaceTimerEvent>:
//==============================================================================
//
//==============================================================================
void ReleaceTimerEvent(uint8_t timer_id)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
	MESSAGE_QUE_DATA 	*msg;
	Set_logInfo2("ReleaceTimerEvent(%d)",timer_id);
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4810      	ldr	r0, [pc, #64]	; (8002f6c <ReleaceTimerEvent+0x50>)
 8002f2c:	f7ff fa4c 	bl	80023c8 <Set_logInfo2>
	timer_event[timer_id].flag = TIMER_NO_USED;
 8002f30:	79fa      	ldrb	r2, [r7, #7]
 8002f32:	490f      	ldr	r1, [pc, #60]	; (8002f70 <ReleaceTimerEvent+0x54>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3302      	adds	r3, #2
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
	msg = timer_event[timer_id].message;
 8002f44:	79fa      	ldrb	r2, [r7, #7]
 8002f46:	490a      	ldr	r1, [pc, #40]	; (8002f70 <ReleaceTimerEvent+0x54>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3308      	adds	r3, #8
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]
	msg->maroc_ptr;
	vPortFree(msg->maroc_ptr);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f011 fc37 	bl	80147d0 <vPortFree>

#ifdef	 __HEAP_DBUG
	Set_logInfo2("vPortFree=%x",msg->maroc_ptr);
	Set_logInfo2("HeapSize 010 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	08018764 	.word	0x08018764
 8002f70:	20001c7c 	.word	0x20001c7c

08002f74 <TimerEventCtrl>:

//==============================================================================
//
//==============================================================================
void TimerEventCtrl(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
	void 				*msgQueBuf;
	uint8_t				rcvbuff[sizeof(void *)];
	TIMER_EVENT_FORM	*tm_form;
	osStatus_t			os_status;

	msgQueBuf = (void *)rcvbuff;
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	613b      	str	r3, [r7, #16]

		//-------------------------------------------------------------------------
		//	タイマー
		//-------------------------------------------------------------------------
		for(i=0; i<TIMER_EVENT_MAX; i++){
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
 8002f82:	e056      	b.n	8003032 <TimerEventCtrl+0xbe>
			if( timer_event[i].flag == TIMER_ACTIVE){
 8002f84:	7dfa      	ldrb	r2, [r7, #23]
 8002f86:	4957      	ldr	r1, [pc, #348]	; (80030e4 <TimerEventCtrl+0x170>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	3302      	adds	r3, #2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d148      	bne.n	800302c <TimerEventCtrl+0xb8>
				if( timer_event[i].counter != 0 ){
 8002f9a:	7dfa      	ldrb	r2, [r7, #23]
 8002f9c:	4951      	ldr	r1, [pc, #324]	; (80030e4 <TimerEventCtrl+0x170>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d012      	beq.n	8002fd4 <TimerEventCtrl+0x60>
					timer_event[i].counter --;
 8002fae:	7dfa      	ldrb	r2, [r7, #23]
 8002fb0:	494c      	ldr	r1, [pc, #304]	; (80030e4 <TimerEventCtrl+0x170>)
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b298      	uxth	r0, r3
 8002fc2:	4948      	ldr	r1, [pc, #288]	; (80030e4 <TimerEventCtrl+0x170>)
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	4602      	mov	r2, r0
 8002fd0:	801a      	strh	r2, [r3, #0]
 8002fd2:	e02b      	b.n	800302c <TimerEventCtrl+0xb8>
				}
				else{
					os_status = osMessageQueuePut (timer_event[i].hmsg, (void *)timer_event[i].message, 0,0);
 8002fd4:	7dfa      	ldrb	r2, [r7, #23]
 8002fd6:	4943      	ldr	r1, [pc, #268]	; (80030e4 <TimerEventCtrl+0x170>)
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	7dfa      	ldrb	r2, [r7, #23]
 8002fe8:	493e      	ldr	r1, [pc, #248]	; (80030e4 <TimerEventCtrl+0x170>)
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	6819      	ldr	r1, [r3, #0]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f00e fe54 	bl	8011ca8 <osMessageQueuePut>
 8003000:	60f8      	str	r0, [r7, #12]

			    	switch( os_status ){
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <TimerEventCtrl+0x9c>
					case osOK:
						Set_logInfo2("TimerEvent(). Send MsgQue OK");
 8003008:	4837      	ldr	r0, [pc, #220]	; (80030e8 <TimerEventCtrl+0x174>)
 800300a:	f7ff f9dd 	bl	80023c8 <Set_logInfo2>
						break;
 800300e:	e003      	b.n	8003018 <TimerEventCtrl+0xa4>
					default:
						Set_logInfo2("TimerEvent(). Send MsgQue ERROR");
 8003010:	4836      	ldr	r0, [pc, #216]	; (80030ec <TimerEventCtrl+0x178>)
 8003012:	f7ff f9d9 	bl	80023c8 <Set_logInfo2>
						break;
 8003016:	bf00      	nop
					}

			    	timer_event[i].flag = TIMER_NO_USED;
 8003018:	7dfa      	ldrb	r2, [r7, #23]
 800301a:	4932      	ldr	r1, [pc, #200]	; (80030e4 <TimerEventCtrl+0x170>)
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3302      	adds	r3, #2
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
		for(i=0; i<TIMER_EVENT_MAX; i++){
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	3301      	adds	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b09      	cmp	r3, #9
 8003036:	d9a5      	bls.n	8002f84 <TimerEventCtrl+0x10>
		//-------------------------------------------------------------------------
		//	メッセージ待ち
		//-------------------------------------------------------------------------
		//os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), msgQueBuf, 0, 0);
//		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub1), msgQueBuf, 0, osWaitForever);
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub1), msgQueBuf, 0, 10);
 8003038:	2001      	movs	r0, #1
 800303a:	f7ff fbf9 	bl	8002830 <GetMessageQue>
 800303e:	230a      	movs	r3, #10
 8003040:	2200      	movs	r2, #0
 8003042:	6939      	ldr	r1, [r7, #16]
 8003044:	f00e fe90 	bl	8011d68 <osMessageQueueGet>
 8003048:	60f8      	str	r0, [r7, #12]
		tm_form = (TIMER_EVENT_FORM *)msgQueBuf;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	60bb      	str	r3, [r7, #8]
		tm_form = (TIMER_EVENT_FORM	*)tm_form->maroc_ptr;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60bb      	str	r3, [r7, #8]

		switch( os_status ){
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f113 0f02 	cmn.w	r3, #2
 800305a:	d03e      	beq.n	80030da <TimerEventCtrl+0x166>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d136      	bne.n	80030d0 <TimerEventCtrl+0x15c>
		case osOK:
			//SKprintf("TimerEventCtrl(2):os_status=OK(%d)\r\n",os_status);
			Set_logInfo2("TimerEvent(). Recive MsgQue OK");
 8003062:	4823      	ldr	r0, [pc, #140]	; (80030f0 <TimerEventCtrl+0x17c>)
 8003064:	f7ff f9b0 	bl	80023c8 <Set_logInfo2>

			i = tm_form->timer_id;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	7d1b      	ldrb	r3, [r3, #20]
 800306c:	75fb      	strb	r3, [r7, #23]

			timer_event[i].counter 	= tm_form->time;
 800306e:	7dfa      	ldrb	r2, [r7, #23]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	8998      	ldrh	r0, [r3, #12]
 8003074:	491b      	ldr	r1, [pc, #108]	; (80030e4 <TimerEventCtrl+0x170>)
 8003076:	4613      	mov	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	4602      	mov	r2, r0
 8003082:	801a      	strh	r2, [r3, #0]
			timer_event[i].flag 	= TIMER_ACTIVE;
 8003084:	7dfa      	ldrb	r2, [r7, #23]
 8003086:	4917      	ldr	r1, [pc, #92]	; (80030e4 <TimerEventCtrl+0x170>)
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3302      	adds	r3, #2
 8003094:	2202      	movs	r2, #2
 8003096:	701a      	strb	r2, [r3, #0]
			timer_event[i].hmsg 	= tm_form->hmsg;
 8003098:	7dfa      	ldrb	r2, [r7, #23]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	6899      	ldr	r1, [r3, #8]
 800309e:	4811      	ldr	r0, [pc, #68]	; (80030e4 <TimerEventCtrl+0x170>)
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4403      	add	r3, r0
 80030aa:	3304      	adds	r3, #4
 80030ac:	6019      	str	r1, [r3, #0]
			timer_event[i].message 	= tm_form->mail_form;
 80030ae:	7dfa      	ldrb	r2, [r7, #23]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6919      	ldr	r1, [r3, #16]
 80030b4:	480b      	ldr	r0, [pc, #44]	; (80030e4 <TimerEventCtrl+0x170>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4403      	add	r3, r0
 80030c0:	3308      	adds	r3, #8
 80030c2:	6019      	str	r1, [r3, #0]

			//SKprintf("tm_form=%p,.message=%p\r\n",tm_form,timer_event[i].message);

			vPortFree(tm_form->maroc_ptr);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f011 fb81 	bl	80147d0 <vPortFree>
#ifdef	 __HEAP_DBUG
			Set_logInfo2("vPortFree=%x",tm_form);
			Set_logInfo2("HeapSize 007 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

			break;
 80030ce:	e005      	b.n	80030dc <TimerEventCtrl+0x168>
		case osErrorTimeout:
			break;
		default:
			SKprintf("TimerEventCtrl(2):os_status=Error(%d)\r\n",os_status);
 80030d0:	68f9      	ldr	r1, [r7, #12]
 80030d2:	4808      	ldr	r0, [pc, #32]	; (80030f4 <TimerEventCtrl+0x180>)
 80030d4:	f001 f8ae 	bl	8004234 <SKprintf>
			break;
 80030d8:	e000      	b.n	80030dc <TimerEventCtrl+0x168>
			break;
 80030da:	bf00      	nop
		}
}
 80030dc:	bf00      	nop
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20001c7c 	.word	0x20001c7c
 80030e8:	0801877c 	.word	0x0801877c
 80030ec:	0801879c 	.word	0x0801879c
 80030f0:	080187bc 	.word	0x080187bc
 80030f4:	080187dc 	.word	0x080187dc

080030f8 <tasuk3_init>:

//==============================================================================
//
//==============================================================================
void  tasuk3_init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	SKprintf("tasuk3_init(void)\r\n");
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <tasuk3_init+0x10>)
 80030fe:	f001 f899 	bl	8004234 <SKprintf>
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	08018804 	.word	0x08018804

0800310c <Set_rcv_data>:

//==============================================================================
//
//==============================================================================
void Set_rcv_data(SK_UART sel)
{
 800310c:	b490      	push	{r4, r7}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
	uart[sel].Set_cnt++;
 8003116:	79fa      	ldrb	r2, [r7, #7]
 8003118:	4952      	ldr	r1, [pc, #328]	; (8003264 <Set_rcv_data+0x158>)
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	440b      	add	r3, r1
 8003124:	338c      	adds	r3, #140	; 0x8c
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	b298      	uxth	r0, r3
 800312c:	494d      	ldr	r1, [pc, #308]	; (8003264 <Set_rcv_data+0x158>)
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	440b      	add	r3, r1
 8003138:	338c      	adds	r3, #140	; 0x8c
 800313a:	4602      	mov	r2, r0
 800313c:	801a      	strh	r2, [r3, #0]

	while(uart[sel].Sem_rs485_rcv==1);
 800313e:	bf00      	nop
 8003140:	79fa      	ldrb	r2, [r7, #7]
 8003142:	4948      	ldr	r1, [pc, #288]	; (8003264 <Set_rcv_data+0x158>)
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	440b      	add	r3, r1
 800314e:	338a      	adds	r3, #138	; 0x8a
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d0f4      	beq.n	8003140 <Set_rcv_data+0x34>

	uart[sel].Sem_rs485_rcv= 1;
 8003156:	79fa      	ldrb	r2, [r7, #7]
 8003158:	4942      	ldr	r1, [pc, #264]	; (8003264 <Set_rcv_data+0x158>)
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	440b      	add	r3, r1
 8003164:	338a      	adds	r3, #138	; 0x8a
 8003166:	2201      	movs	r2, #1
 8003168:	801a      	strh	r2, [r3, #0]
	uart[sel].rcvnum ++;
 800316a:	79fa      	ldrb	r2, [r7, #7]
 800316c:	493d      	ldr	r1, [pc, #244]	; (8003264 <Set_rcv_data+0x158>)
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	440b      	add	r3, r1
 8003178:	3382      	adds	r3, #130	; 0x82
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	b298      	uxth	r0, r3
 8003180:	4938      	ldr	r1, [pc, #224]	; (8003264 <Set_rcv_data+0x158>)
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	440b      	add	r3, r1
 800318c:	3382      	adds	r3, #130	; 0x82
 800318e:	4602      	mov	r2, r0
 8003190:	801a      	strh	r2, [r3, #0]
	uart[sel].Sem_rs485_rcv= 0;
 8003192:	79fa      	ldrb	r2, [r7, #7]
 8003194:	4933      	ldr	r1, [pc, #204]	; (8003264 <Set_rcv_data+0x158>)
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	440b      	add	r3, r1
 80031a0:	338a      	adds	r3, #138	; 0x8a
 80031a2:	2200      	movs	r2, #0
 80031a4:	801a      	strh	r2, [r3, #0]

	uart[sel].rcvbuf[uart[sel].rcv_wpt] = uart[sel].rcv_dt[0];
 80031a6:	79f9      	ldrb	r1, [r7, #7]
 80031a8:	79fa      	ldrb	r2, [r7, #7]
 80031aa:	79f8      	ldrb	r0, [r7, #7]
 80031ac:	4c2d      	ldr	r4, [pc, #180]	; (8003264 <Set_rcv_data+0x158>)
 80031ae:	4603      	mov	r3, r0
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4403      	add	r3, r0
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	4423      	add	r3, r4
 80031b8:	3386      	adds	r3, #134	; 0x86
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	461c      	mov	r4, r3
 80031be:	4829      	ldr	r0, [pc, #164]	; (8003264 <Set_rcv_data+0x158>)
 80031c0:	460b      	mov	r3, r1
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	4403      	add	r3, r0
 80031ca:	7818      	ldrb	r0, [r3, #0]
 80031cc:	4925      	ldr	r1, [pc, #148]	; (8003264 <Set_rcv_data+0x158>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	440b      	add	r3, r1
 80031d8:	4423      	add	r3, r4
 80031da:	3302      	adds	r3, #2
 80031dc:	4602      	mov	r2, r0
 80031de:	701a      	strb	r2, [r3, #0]
//	uart[sel].rcvnum ++;
	uart[sel].totalnum ++;
 80031e0:	79fa      	ldrb	r2, [r7, #7]
 80031e2:	4920      	ldr	r1, [pc, #128]	; (8003264 <Set_rcv_data+0x158>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	440b      	add	r3, r1
 80031ee:	3384      	adds	r3, #132	; 0x84
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	b298      	uxth	r0, r3
 80031f6:	491b      	ldr	r1, [pc, #108]	; (8003264 <Set_rcv_data+0x158>)
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	440b      	add	r3, r1
 8003202:	3384      	adds	r3, #132	; 0x84
 8003204:	4602      	mov	r2, r0
 8003206:	801a      	strh	r2, [r3, #0]

	uart[sel].rcv_wpt ++ ;
 8003208:	79fa      	ldrb	r2, [r7, #7]
 800320a:	4916      	ldr	r1, [pc, #88]	; (8003264 <Set_rcv_data+0x158>)
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	440b      	add	r3, r1
 8003216:	3386      	adds	r3, #134	; 0x86
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	b298      	uxth	r0, r3
 800321e:	4911      	ldr	r1, [pc, #68]	; (8003264 <Set_rcv_data+0x158>)
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	440b      	add	r3, r1
 800322a:	3386      	adds	r3, #134	; 0x86
 800322c:	4602      	mov	r2, r0
 800322e:	801a      	strh	r2, [r3, #0]
    if( uart[sel].rcv_wpt > RCV_BUF_SIZE ){
 8003230:	79fa      	ldrb	r2, [r7, #7]
 8003232:	490c      	ldr	r1, [pc, #48]	; (8003264 <Set_rcv_data+0x158>)
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	440b      	add	r3, r1
 800323e:	3386      	adds	r3, #134	; 0x86
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	2b80      	cmp	r3, #128	; 0x80
 8003244:	d909      	bls.n	800325a <Set_rcv_data+0x14e>
    	uart[sel].rcv_wpt = 0;
 8003246:	79fa      	ldrb	r2, [r7, #7]
 8003248:	4906      	ldr	r1, [pc, #24]	; (8003264 <Set_rcv_data+0x158>)
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	440b      	add	r3, r1
 8003254:	3386      	adds	r3, #134	; 0x86
 8003256:	2200      	movs	r2, #0
 8003258:	801a      	strh	r2, [r3, #0]
    }
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bc90      	pop	{r4, r7}
 8003262:	4770      	bx	lr
 8003264:	20001d78 	.word	0x20001d78

08003268 <Get_rcv_data>:
//==============================================================================
//
//==============================================================================
uint8_t Get_rcv_data(SK_UART sel)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
    uint8_t dt;
	uart[sel].Get_cnt++;
 8003272:	79fa      	ldrb	r2, [r7, #7]
 8003274:	4945      	ldr	r1, [pc, #276]	; (800338c <Get_rcv_data+0x124>)
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	440b      	add	r3, r1
 8003280:	338e      	adds	r3, #142	; 0x8e
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	b298      	uxth	r0, r3
 8003288:	4940      	ldr	r1, [pc, #256]	; (800338c <Get_rcv_data+0x124>)
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	440b      	add	r3, r1
 8003294:	338e      	adds	r3, #142	; 0x8e
 8003296:	4602      	mov	r2, r0
 8003298:	801a      	strh	r2, [r3, #0]

  	while(uart[sel].Sem_rs485_rcv==1);
 800329a:	bf00      	nop
 800329c:	79fa      	ldrb	r2, [r7, #7]
 800329e:	493b      	ldr	r1, [pc, #236]	; (800338c <Get_rcv_data+0x124>)
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	440b      	add	r3, r1
 80032aa:	338a      	adds	r3, #138	; 0x8a
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d0f4      	beq.n	800329c <Get_rcv_data+0x34>

	uart[sel].Sem_rs485_rcv = 1;
 80032b2:	79fa      	ldrb	r2, [r7, #7]
 80032b4:	4935      	ldr	r1, [pc, #212]	; (800338c <Get_rcv_data+0x124>)
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	440b      	add	r3, r1
 80032c0:	338a      	adds	r3, #138	; 0x8a
 80032c2:	2201      	movs	r2, #1
 80032c4:	801a      	strh	r2, [r3, #0]
	uart[sel].rcvnum --;
 80032c6:	79fa      	ldrb	r2, [r7, #7]
 80032c8:	4930      	ldr	r1, [pc, #192]	; (800338c <Get_rcv_data+0x124>)
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	440b      	add	r3, r1
 80032d4:	3382      	adds	r3, #130	; 0x82
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	3b01      	subs	r3, #1
 80032da:	b298      	uxth	r0, r3
 80032dc:	492b      	ldr	r1, [pc, #172]	; (800338c <Get_rcv_data+0x124>)
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	440b      	add	r3, r1
 80032e8:	3382      	adds	r3, #130	; 0x82
 80032ea:	4602      	mov	r2, r0
 80032ec:	801a      	strh	r2, [r3, #0]
	uart[sel].Sem_rs485_rcv = 0;
 80032ee:	79fa      	ldrb	r2, [r7, #7]
 80032f0:	4926      	ldr	r1, [pc, #152]	; (800338c <Get_rcv_data+0x124>)
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	440b      	add	r3, r1
 80032fc:	338a      	adds	r3, #138	; 0x8a
 80032fe:	2200      	movs	r2, #0
 8003300:	801a      	strh	r2, [r3, #0]

	dt =  uart[sel].rcvbuf[uart[sel].rcv_rpt];
 8003302:	79fa      	ldrb	r2, [r7, #7]
 8003304:	79f9      	ldrb	r1, [r7, #7]
 8003306:	4821      	ldr	r0, [pc, #132]	; (800338c <Get_rcv_data+0x124>)
 8003308:	460b      	mov	r3, r1
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	4403      	add	r3, r0
 8003312:	3388      	adds	r3, #136	; 0x88
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	491c      	ldr	r1, [pc, #112]	; (800338c <Get_rcv_data+0x124>)
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	440b      	add	r3, r1
 8003324:	4403      	add	r3, r0
 8003326:	3302      	adds	r3, #2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	73fb      	strb	r3, [r7, #15]
	uart[sel].rcv_rpt ++ ;
 800332c:	79fa      	ldrb	r2, [r7, #7]
 800332e:	4917      	ldr	r1, [pc, #92]	; (800338c <Get_rcv_data+0x124>)
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	440b      	add	r3, r1
 800333a:	3388      	adds	r3, #136	; 0x88
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	3301      	adds	r3, #1
 8003340:	b298      	uxth	r0, r3
 8003342:	4912      	ldr	r1, [pc, #72]	; (800338c <Get_rcv_data+0x124>)
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	440b      	add	r3, r1
 800334e:	3388      	adds	r3, #136	; 0x88
 8003350:	4602      	mov	r2, r0
 8003352:	801a      	strh	r2, [r3, #0]
	if( uart[sel].rcv_rpt > RCV_BUF_SIZE ){
 8003354:	79fa      	ldrb	r2, [r7, #7]
 8003356:	490d      	ldr	r1, [pc, #52]	; (800338c <Get_rcv_data+0x124>)
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	440b      	add	r3, r1
 8003362:	3388      	adds	r3, #136	; 0x88
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d909      	bls.n	800337e <Get_rcv_data+0x116>
		uart[sel].rcv_rpt = 0;
 800336a:	79fa      	ldrb	r2, [r7, #7]
 800336c:	4907      	ldr	r1, [pc, #28]	; (800338c <Get_rcv_data+0x124>)
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	440b      	add	r3, r1
 8003378:	3388      	adds	r3, #136	; 0x88
 800337a:	2200      	movs	r2, #0
 800337c:	801a      	strh	r2, [r3, #0]
	}

    return dt;
 800337e:	7bfb      	ldrb	r3, [r7, #15]

}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	20001d78 	.word	0x20001d78

08003390 <HAL_UART_RxCpltCallback>:

//==============================================================================
//　受信データ割込みコールバック
//==============================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

	if( Get_uart_port(huart) == SK_UART1_RS485 ){
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fe69 	bl	8004070 <Get_uart_port>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d112      	bne.n	80033ca <HAL_UART_RxCpltCallback+0x3a>
		Set_rcv_data(SK_UART1_RS485);
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7ff feb1 	bl	800310c <Set_rcv_data>
		uart_Rcv_init(SK_UART1_RS485);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f000 fed8 	bl	8004160 <uart_Rcv_init>
		if(uart[SK_UART1_RS485].totalnum >= COM_TABLE_MAX){
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_UART_RxCpltCallback+0xb4>)
 80033b2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80033b6:	2b21      	cmp	r3, #33	; 0x21
 80033b8:	d940      	bls.n	800343c <HAL_UART_RxCpltCallback+0xac>
			Set_logInfo("HAL_UART_RxCpltCallback(RS485)");
 80033ba:	4823      	ldr	r0, [pc, #140]	; (8003448 <HAL_UART_RxCpltCallback+0xb8>)
 80033bc:	f7fe ff40 	bl	8002240 <Set_logInfo>
			SendMsgQueISR(RT_EVENT_UART_RX, 0xff);
 80033c0:	21ff      	movs	r1, #255	; 0xff
 80033c2:	2001      	movs	r0, #1
 80033c4:	f000 f844 	bl	8003450 <SendMsgQueISR>
		Set_rcv_data(SK_UART2_DEBUG);
		uart_Rcv_init(SK_UART2_DEBUG);
	}
	else{
	}
}
 80033c8:	e038      	b.n	800343c <HAL_UART_RxCpltCallback+0xac>
	else if( Get_uart_port(huart) == SK_UART2_DEBUG ){
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fe50 	bl	8004070 <Get_uart_port>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d132      	bne.n	800343c <HAL_UART_RxCpltCallback+0xac>
		if(uart[SK_UART2_DEBUG].rcv_dt[0] == '!'){
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_UART_RxCpltCallback+0xb4>)
 80033d8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80033dc:	2b21      	cmp	r3, #33	; 0x21
 80033de:	d10e      	bne.n	80033fe <HAL_UART_RxCpltCallback+0x6e>
			esc.buf[esc.ptr] = uart[SK_UART2_DEBUG].rcv_dt[0];
 80033e0:	4b1a      	ldr	r3, [pc, #104]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 80033e2:	7a9b      	ldrb	r3, [r3, #10]
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b17      	ldr	r3, [pc, #92]	; (8003444 <HAL_UART_RxCpltCallback+0xb4>)
 80033e8:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 80033ee:	5499      	strb	r1, [r3, r2]
			esc.ptr++;
 80033f0:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 80033f2:	7a9b      	ldrb	r3, [r3, #10]
 80033f4:	3301      	adds	r3, #1
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	4b14      	ldr	r3, [pc, #80]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 80033fa:	729a      	strb	r2, [r3, #10]
 80033fc:	e018      	b.n	8003430 <HAL_UART_RxCpltCallback+0xa0>
		else if(esc.ptr == 1){
 80033fe:	4b13      	ldr	r3, [pc, #76]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 8003400:	7a9b      	ldrb	r3, [r3, #10]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d114      	bne.n	8003430 <HAL_UART_RxCpltCallback+0xa0>
			esc.buf[esc.ptr] = uart[SK_UART2_DEBUG].rcv_dt[0];
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 8003408:	7a9b      	ldrb	r3, [r3, #10]
 800340a:	461a      	mov	r2, r3
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_UART_RxCpltCallback+0xb4>)
 800340e:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 8003414:	5499      	strb	r1, [r3, r2]
			esc.ptr = 0;
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 8003418:	2200      	movs	r2, #0
 800341a:	729a      	strb	r2, [r3, #10]
			if(esc.buf[0]=='!' && esc.buf[1]=='l'){
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b21      	cmp	r3, #33	; 0x21
 8003422:	d105      	bne.n	8003430 <HAL_UART_RxCpltCallback+0xa0>
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 8003426:	785b      	ldrb	r3, [r3, #1]
 8003428:	2b6c      	cmp	r3, #108	; 0x6c
 800342a:	d101      	bne.n	8003430 <HAL_UART_RxCpltCallback+0xa0>
				LogdisplayISR();
 800342c:	f7ff f986 	bl	800273c <LogdisplayISR>
		Set_rcv_data(SK_UART2_DEBUG);
 8003430:	2001      	movs	r0, #1
 8003432:	f7ff fe6b 	bl	800310c <Set_rcv_data>
		uart_Rcv_init(SK_UART2_DEBUG);
 8003436:	2001      	movs	r0, #1
 8003438:	f000 fe92 	bl	8004160 <uart_Rcv_init>
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20001d78 	.word	0x20001d78
 8003448:	08018818 	.word	0x08018818
 800344c:	20001ee4 	.word	0x20001ee4

08003450 <SendMsgQueISR>:

//==============================================================================
//　割込み用
//==============================================================================
void SendMsgQueISR(RS485_TASK_EVENT event, uint8_t task)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	460a      	mov	r2, r1
 800345a:	71fb      	strb	r3, [r7, #7]
 800345c:	4613      	mov	r3, r2
 800345e:	71bb      	strb	r3, [r7, #6]
	MESSAGE_QUE_DATA	*msg;


	//msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));

	msg = &RTtaskISR;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <SendMsgQueISR+0x50>)
 8003462:	60fb      	str	r3, [r7, #12]
	msg->u.cmd_msg.event = event;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	79fa      	ldrb	r2, [r7, #7]
 8003468:	719a      	strb	r2, [r3, #6]
	msg->send_task = task;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	79ba      	ldrb	r2, [r7, #6]
 800346e:	711a      	strb	r2, [r3, #4]
	msg->maroc_ptr = (void *)msg;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]

	//SKprintf("event=0x%x, task=0x%x,msgpt=%p\r\n", msg->event,msg->send_task, msg->maroc_ptr);
	//   	lsize2 = xPortGetFreeHeapSize();
	// 		SKprintf("lsize1=0x%x,lsize2=%x\r\n",lsize1,lsize2);
	//    	SKprintf("MESSAGE_QUE_DATA=%p\r\n",msg);
	osStatus = osMessageQueuePut (GetMessageQue(SK_TASK_sub2), (void *)msg->maroc_ptr, 0,0);
 8003476:	2002      	movs	r0, #2
 8003478:	f7ff f9da 	bl	8002830 <GetMessageQue>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	2200      	movs	r2, #0
 8003484:	f00e fc10 	bl	8011ca8 <osMessageQueuePut>
 8003488:	60b8      	str	r0, [r7, #8]
	if( osStatus == osOK ){
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <SendMsgQueISR+0x46>
		//Set_logInfo("Rs485 RxRecived. Send MsgQue OK");
	}
	else{
		Set_logInfo("Rs485 RxRecived. Send MsgQue ERROR");
 8003490:	4804      	ldr	r0, [pc, #16]	; (80034a4 <SendMsgQueISR+0x54>)
 8003492:	f7fe fed5 	bl	8002240 <Set_logInfo>
	}
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20001ef0 	.word	0x20001ef0
 80034a4:	08018838 	.word	0x08018838

080034a8 <SendMsgQue>:

//==============================================================================
//
//==============================================================================
void SendMsgQue( CMD_MSG	*rt_task )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	osStatus_t 			osStatus;
	MESSAGE_QUE_DATA	*msg;



	msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));
 80034b0:	2010      	movs	r0, #16
 80034b2:	f011 f8c1 	bl	8014638 <pvPortMalloc>
 80034b6:	60f8      	str	r0, [r7, #12]

	#ifdef	 __HEAP_DBUG
	Set_logInfo2("pvPortMalloc=%x",msg);
#endif	//	 __HEAP_DBUG

	msg->u.cmd_msg.event = rt_task->event;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	719a      	strb	r2, [r3, #6]
	//msg->send_task = task;
	msg->maroc_ptr = (void *)msg;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	601a      	str	r2, [r3, #0]

	msg->u.cmd_msg.address = rt_task->address;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	799a      	ldrb	r2, [r3, #6]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	731a      	strb	r2, [r3, #12]
	msg->u.cmd_msg.command = rt_task->command;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	789a      	ldrb	r2, [r3, #2]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	721a      	strb	r2, [r3, #8]
	msg->u.cmd_msg.command_sub = rt_task->command_sub;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	889a      	ldrh	r2, [r3, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	815a      	strh	r2, [r3, #10]
	msg->u.cmd_msg.sub1 = rt_task->sub1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	79da      	ldrb	r2, [r3, #7]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	735a      	strb	r2, [r3, #13]

	//SKprintf("event=0x%x, task=0x%x,msgpt=%p\r\n", msg->event,msg->send_task, msg->maroc_ptr);
	//   	lsize2 = xPortGetFreeHeapSize();
	// 		SKprintf("lsize1=0x%x,lsize2=%x\r\n",lsize1,lsize2);
	//    	SKprintf("MESSAGE_QUE_DATA=%p\r\n",msg);
	osStatus = osMessageQueuePut (GetMessageQue(SK_TASK_sub2), (void *)msg->maroc_ptr, 0,0);
 80034e6:	2002      	movs	r0, #2
 80034e8:	f7ff f9a2 	bl	8002830 <GetMessageQue>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	2300      	movs	r3, #0
 80034f2:	2200      	movs	r2, #0
 80034f4:	f00e fbd8 	bl	8011ca8 <osMessageQueuePut>
 80034f8:	60b8      	str	r0, [r7, #8]
	if( osStatus == osOK ){
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <SendMsgQue+0x60>
		//Set_logInfo2("Rs485 RxRecived. Send MsgQue OK");
	}
	else{
		Set_logInfo2("Send MsgQue ERROR=%d",osStatus);
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4803      	ldr	r0, [pc, #12]	; (8003510 <SendMsgQue+0x68>)
 8003504:	f7fe ff60 	bl	80023c8 <Set_logInfo2>
	}
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	0801885c 	.word	0x0801885c

08003514 <rs485_com_task>:
//extern osMessageQueueId_t myQueue01Handle;



void rs485_com_task(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
	uint8_t				state;
	uint32_t			timer;
	uint8_t				*temp;
	uint8_t 			*buffer;

	RTtask.state = RT_STATE_INIT;
 800351a:	2300      	movs	r3, #0
 800351c:	717b      	strb	r3, [r7, #5]
	timer = osWaitForever;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	61bb      	str	r3, [r7, #24]
	RTtask.state = RT_STATE_READY;
 8003524:	2301      	movs	r3, #1
 8003526:	717b      	strb	r3, [r7, #5]
	while(1){

		//-------------------------------------------------------------------------
		//	メッセージ待ち
		//-------------------------------------------------------------------------
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), &msgQueBuf, 0, osWaitForever);
 8003528:	2002      	movs	r0, #2
 800352a:	f7ff f981 	bl	8002830 <GetMessageQue>
 800352e:	4639      	mov	r1, r7
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	2200      	movs	r2, #0
 8003536:	f00e fc17 	bl	8011d68 <osMessageQueueGet>
 800353a:	6178      	str	r0, [r7, #20]
		msg = (MESSAGE_QUE_DATA *)msgQueBuf;
 800353c:	463b      	mov	r3, r7
 800353e:	613b      	str	r3, [r7, #16]
		msg = (MESSAGE_QUE_DATA	*)msg->maroc_ptr;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	613b      	str	r3, [r7, #16]


		event = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	77fb      	strb	r3, [r7, #31]
		state = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	77bb      	strb	r3, [r7, #30]
		switch( os_status ){
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11d      	bne.n	8003590 <rs485_com_task+0x7c>
		case osOK:
			RTtask.event = msg->u.cmd_msg.event;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	799b      	ldrb	r3, [r3, #6]
 8003558:	713b      	strb	r3, [r7, #4]

			switch(RTtask.event){
 800355a:	793b      	ldrb	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <rs485_com_task+0x52>
 8003560:	2b03      	cmp	r3, #3
 8003562:	d00d      	beq.n	8003580 <rs485_com_task+0x6c>
				break;
			case RT_EVENT_STOP_REQ:
				RTtask.command_sub = 1;
				break;
			default:
				break;
 8003564:	e00f      	b.n	8003586 <rs485_com_task+0x72>
				RTtask.command = msg->u.cmd_msg.command;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	7a1b      	ldrb	r3, [r3, #8]
 800356a:	71bb      	strb	r3, [r7, #6]
				RTtask.command_sub = msg->u.cmd_msg.command_sub;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	895b      	ldrh	r3, [r3, #10]
 8003570:	813b      	strh	r3, [r7, #8]
				RTtask.address = msg->u.cmd_msg.address;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	7b1b      	ldrb	r3, [r3, #12]
 8003576:	72bb      	strb	r3, [r7, #10]
				RTtask.sub1 = msg->u.cmd_msg.sub1;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	7b5b      	ldrb	r3, [r3, #13]
 800357c:	72fb      	strb	r3, [r7, #11]
				break;
 800357e:	e002      	b.n	8003586 <rs485_com_task+0x72>
				RTtask.command_sub = 1;
 8003580:	2301      	movs	r3, #1
 8003582:	813b      	strh	r3, [r7, #8]
				break;
 8003584:	bf00      	nop
			}

			event = RTtask.event;
 8003586:	793b      	ldrb	r3, [r7, #4]
 8003588:	77fb      	strb	r3, [r7, #31]
			state = RTtask.state;
 800358a:	797b      	ldrb	r3, [r7, #5]
 800358c:	77bb      	strb	r3, [r7, #30]
			break;
 800358e:	e004      	b.n	800359a <rs485_com_task+0x86>

		case osErrorTimeout:
		default:
			SKprintf("rs485_com_task():os_status=Error(%d)\r\n",os_status);
 8003590:	6979      	ldr	r1, [r7, #20]
 8003592:	480c      	ldr	r0, [pc, #48]	; (80035c4 <rs485_com_task+0xb0>)
 8003594:	f000 fe4e 	bl	8004234 <SKprintf>
			break;
 8003598:	bf00      	nop
		}

		if( msg->maroc_ptr != &RTtaskISR ){
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <rs485_com_task+0xb4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <rs485_com_task+0x9a>
			vPortFree(msg->maroc_ptr);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f011 f911 	bl	80147d0 <vPortFree>

		//-------------------------------------------------------------------------
		//	処理関数
		//-------------------------------------------------------------------------
		//Set_logInfo2("RS485 MAIN: event=%d, state=%d\r\n",event,state);
		(*rs485_func_table[event][state ])( &RTtask );
 80035ae:	7ffa      	ldrb	r2, [r7, #31]
 80035b0:	7fbb      	ldrb	r3, [r7, #30]
 80035b2:	4906      	ldr	r1, [pc, #24]	; (80035cc <rs485_com_task+0xb8>)
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035bc:	1d3a      	adds	r2, r7, #4
 80035be:	4610      	mov	r0, r2
 80035c0:	4798      	blx	r3
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), &msgQueBuf, 0, osWaitForever);
 80035c2:	e7b1      	b.n	8003528 <rs485_com_task+0x14>
 80035c4:	08018874 	.word	0x08018874
 80035c8:	20001ef0 	.word	0x20001ef0
 80035cc:	20000000 	.word	0x20000000

080035d0 <RS_nop>:

//==============================================================================
//
//==============================================================================
void RS_nop( CMD_MSG	*rt_task )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	Set_logInfo2("★RS_nop(S=%d,E=%d)",rt_task->state, rt_task->event);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	4619      	mov	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	4803      	ldr	r0, [pc, #12]	; (80035f4 <RS_nop+0x24>)
 80035e6:	f7fe feef 	bl	80023c8 <Set_logInfo2>
//	SKprintf("RS_nop(%d,%d)\r\n", rt_task->state, rt_task->event);
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	0801889c 	.word	0x0801889c

080035f8 <RScomand_send>:
//==============================================================================
//
//==============================================================================
void RScomand_send( CMD_MSG	*rt_task )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
	uint8_t				timer_id;



//	Set_logInfo2("RScomand_send()");
	Set_logInfo2("★RScomand_send(S=%d,E=%d)",rt_task->state, rt_task->event);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	4619      	mov	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	482b      	ldr	r0, [pc, #172]	; (80036c0 <RScomand_send+0xc8>)
 8003612:	f7fe fed9 	bl	80023c8 <Set_logInfo2>

//	SKprintf("RScomand_send(%d,%d)\r\n", rt_task->state, rt_task->event);

	status = Send_rx485_cmd_message( rt_task );
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fc74 	bl	8003f04 <Send_rx485_cmd_message>
 800361c:	4603      	mov	r3, r0
 800361e:	75fb      	strb	r3, [r7, #23]

	if( status == RET_TRUE ){
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d148      	bne.n	80036b8 <RScomand_send+0xc0>
		rt_task->state = RT_STATE_RESPONS_RECIVE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	705a      	strb	r2, [r3, #1]
		uart[SK_UART1_RS485].totalnum = 0;
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <RScomand_send+0xcc>)
 800362e:	2200      	movs	r2, #0
 8003630:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		work_buf_num = 0;
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <RScomand_send+0xd0>)
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
		// タイムアウト　イベントをセット
#ifdef	 __HEAP_DBUG
		Set_logInfo2("HeapSize 008 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));
 800363a:	2010      	movs	r0, #16
 800363c:	f010 fffc 	bl	8014638 <pvPortMalloc>
 8003640:	6138      	str	r0, [r7, #16]
#ifdef	 __HEAP_DBUG
		Set_logInfo2("pvPortMalloc=%x",msg);
		Set_logInfo2("HeapSize 008 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		msg->maroc_ptr = msg;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	601a      	str	r2, [r3, #0]
		msg->u.cmd_msg.event = RT_EVENT_TIMEOUT;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2204      	movs	r2, #4
 800364c:	719a      	strb	r2, [r3, #6]

		te_form = (TIMER_EVENT_FORM *)pvPortMalloc(sizeof(TIMER_EVENT_FORM));
 800364e:	2018      	movs	r0, #24
 8003650:	f010 fff2 	bl	8014638 <pvPortMalloc>
 8003654:	60f8      	str	r0, [r7, #12]

#ifdef	 __HEAP_DBUG
		Set_logInfo2("pvPortMalloc=%x",te_form);
#endif	//	 __HEAP_DBUG

		te_form->maroc_ptr = te_form;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	601a      	str	r2, [r3, #0]
		te_form->mail_form = msg;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	611a      	str	r2, [r3, #16]
		te_form->hmsg = GetMessageQue(SK_TASK_sub2);
 8003662:	2002      	movs	r0, #2
 8003664:	f7ff f8e4 	bl	8002830 <GetMessageQue>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
		te_form->time = 50;		// 約500msec
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2232      	movs	r2, #50	; 0x32
 8003672:	819a      	strh	r2, [r3, #12]
		timer_id = GetTimerEventID();
 8003674:	f7ff fc22 	bl	8002ebc <GetTimerEventID>
 8003678:	4603      	mov	r3, r0
 800367a:	72fb      	strb	r3, [r7, #11]
		if( timer_id == 0xff ){
 800367c:	7afb      	ldrb	r3, [r7, #11]
 800367e:	2bff      	cmp	r3, #255	; 0xff
 8003680:	d102      	bne.n	8003688 <RScomand_send+0x90>
			SKprintf("TIMER EVENT NOT AVAILABLE\r\n");
 8003682:	4812      	ldr	r0, [pc, #72]	; (80036cc <RScomand_send+0xd4>)
 8003684:	f000 fdd6 	bl	8004234 <SKprintf>
		}
		te_form->timer_id = rt_task->timer_id = timer_id;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	7afa      	ldrb	r2, [r7, #11]
 800368c:	721a      	strb	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7a1a      	ldrb	r2, [r3, #8]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	751a      	strb	r2, [r3, #20]
#ifdef	 __HEAP_DBUG
		SKprintf("tm_form=%p, msg=%p\r\n",te_form, msg);
		Set_logInfo2("HeapSize 008 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		status = osMessageQueuePut (GetMessageQue(SK_TASK_sub1), (void *)te_form->maroc_ptr, 0,0);
 8003696:	2001      	movs	r0, #1
 8003698:	f7ff f8ca 	bl	8002830 <GetMessageQue>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	2200      	movs	r2, #0
 80036a4:	f00e fb00 	bl	8011ca8 <osMessageQueuePut>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]
		if( status == osOK ){
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <RScomand_send+0xc0>
			//Set_logInfo2("RScomand_send(). Send MsgQue OK");
		}
		else{
			Set_logInfo2("RScomand_send(). Send MsgQue ERROR");
 80036b2:	4807      	ldr	r0, [pc, #28]	; (80036d0 <RScomand_send+0xd8>)
 80036b4:	f7fe fe88 	bl	80023c8 <Set_logInfo2>
		}
		//SKprintf("RScomand_send() End \r\n");
	}
}
 80036b8:	bf00      	nop
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	080188b4 	.word	0x080188b4
 80036c4:	20001d78 	.word	0x20001d78
 80036c8:	20001d74 	.word	0x20001d74
 80036cc:	080188d0 	.word	0x080188d0
 80036d0:	080188ec 	.word	0x080188ec

080036d4 <RSrespons_recive>:
//==============================================================================
//
//==============================================================================
void RSrespons_recive( CMD_MSG	*rt_task )
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
	CMD_MSG				msg;

	Set_logInfo2("★RSrespons_recive(S=%d,E=%d)",rt_task->state, rt_task->event);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	4619      	mov	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	4832      	ldr	r0, [pc, #200]	; (80037b8 <RSrespons_recive+0xe4>)
 80036ee:	f7fe fe6b 	bl	80023c8 <Set_logInfo2>

//	Set_logInfo2("RSrespons_recive()");
//	SKprintf("RSrespons_recive(%d,%d)\r\n", rt_task->state, rt_task->event);

	while( (uart[SK_UART1_RS485].Set_cnt - uart[SK_UART1_RS485].Get_cnt)   > 0 ){
 80036f2:	e051      	b.n	8003798 <RSrespons_recive+0xc4>
		work_buf[work_buf_num ++] = Get_rcv_data(SK_UART1_RS485);
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <RSrespons_recive+0xe8>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	b2d1      	uxtb	r1, r2
 80036fc:	4a2f      	ldr	r2, [pc, #188]	; (80037bc <RSrespons_recive+0xe8>)
 80036fe:	7011      	strb	r1, [r2, #0]
 8003700:	461c      	mov	r4, r3
 8003702:	2000      	movs	r0, #0
 8003704:	f7ff fdb0 	bl	8003268 <Get_rcv_data>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <RSrespons_recive+0xec>)
 800370e:	551a      	strb	r2, [r3, r4]

		if( Get_end_test_pt(work_buf_num, work_buf) != 0 ){
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <RSrespons_recive+0xe8>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	b29b      	uxth	r3, r3
 8003716:	492a      	ldr	r1, [pc, #168]	; (80037c0 <RSrespons_recive+0xec>)
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fa8b 	bl	8003c34 <Get_end_test_pt>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d039      	beq.n	8003798 <RSrespons_recive+0xc4>
			//SKprintf("Respons Recive\r\n");
			ReleaceTimerEvent(rt_task->timer_id);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	7a1b      	ldrb	r3, [r3, #8]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fbf7 	bl	8002f1c <ReleaceTimerEvent>
			status = Set_Res_Message(work_buf_num, work_buf,Res_mesg);
 800372e:	4b23      	ldr	r3, [pc, #140]	; (80037bc <RSrespons_recive+0xe8>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	4a23      	ldr	r2, [pc, #140]	; (80037c4 <RSrespons_recive+0xf0>)
 8003736:	4922      	ldr	r1, [pc, #136]	; (80037c0 <RSrespons_recive+0xec>)
 8003738:	4618      	mov	r0, r3
 800373a:	f000 facf 	bl	8003cdc <Set_Res_Message>
 800373e:	4603      	mov	r3, r0
 8003740:	75fb      	strb	r3, [r7, #23]
			if( status == RET_TRUE ){
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d10d      	bne.n	8003764 <RSrespons_recive+0x90>
				rt_task->state = RT_STATE_RESPONS;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2203      	movs	r2, #3
 800374c:	705a      	strb	r2, [r3, #1]
				rt_task->retry_num = 0;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	725a      	strb	r2, [r3, #9]

				msg.event = RT_EVENT_RESPONS;
 8003754:	2302      	movs	r3, #2
 8003756:	733b      	strb	r3, [r7, #12]

#ifdef	 __HEAP_DBUG
				Set_logInfo2("HeapSize 003 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

				SendMsgQue(&msg);
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fea3 	bl	80034a8 <SendMsgQue>
Set_logInfo2("HeapSize 004 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG


			}
			break;
 8003762:	e024      	b.n	80037ae <RSrespons_recive+0xda>
				Set_logInfo2("RETRY:Recive data error");
 8003764:	4818      	ldr	r0, [pc, #96]	; (80037c8 <RSrespons_recive+0xf4>)
 8003766:	f7fe fe2f 	bl	80023c8 <Set_logInfo2>
				rt_task->state  = RT_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	705a      	strb	r2, [r3, #1]
				msg.event = RT_EVENT_START_REQ;
 8003770:	2300      	movs	r3, #0
 8003772:	733b      	strb	r3, [r7, #12]
				msg.address = rt_task->address ;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	799b      	ldrb	r3, [r3, #6]
 8003778:	74bb      	strb	r3, [r7, #18]
				msg.command = rt_task->command;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	789b      	ldrb	r3, [r3, #2]
 800377e:	73bb      	strb	r3, [r7, #14]
				msg.command_sub = rt_task->command_sub;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	889b      	ldrh	r3, [r3, #4]
 8003784:	823b      	strh	r3, [r7, #16]
				msg.sub1 = rt_task->sub1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	79db      	ldrb	r3, [r3, #7]
 800378a:	74fb      	strb	r3, [r7, #19]
				SendMsgQue(&msg);
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe89 	bl	80034a8 <SendMsgQue>
			break;
 8003796:	e00a      	b.n	80037ae <RSrespons_recive+0xda>
	while( (uart[SK_UART1_RS485].Set_cnt - uart[SK_UART1_RS485].Get_cnt)   > 0 ){
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <RSrespons_recive+0xf8>)
 800379a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800379e:	461a      	mov	r2, r3
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <RSrespons_recive+0xf8>)
 80037a2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	dca3      	bgt.n	80036f4 <RSrespons_recive+0x20>
		}
	}
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	08018910 	.word	0x08018910
 80037bc:	20001d74 	.word	0x20001d74
 80037c0:	20001cf4 	.word	0x20001cf4
 80037c4:	20001ebc 	.word	0x20001ebc
 80037c8:	08018930 	.word	0x08018930
 80037cc:	20001d78 	.word	0x20001d78

080037d0 <RSTimeout>:

//==============================================================================
//
//==============================================================================
void RSTimeout( CMD_MSG	*rt_task )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	; 0x30
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	CMD_MSG				msg;
	char	 	c[17];
	uint8_t		i,j,k;

	Set_logInfo2("★RSTimeout(S=%d,E=%d)",rt_task->state, rt_task->event);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	785b      	ldrb	r3, [r3, #1]
 80037dc:	4619      	mov	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4886      	ldr	r0, [pc, #536]	; (8003a00 <RSTimeout+0x230>)
 80037e6:	f7fe fdef 	bl	80023c8 <Set_logInfo2>

	rt_task->state = RT_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	705a      	strb	r2, [r3, #1]
	Set_logInfo2("TIME OUT END");
 80037f0:	4884      	ldr	r0, [pc, #528]	; (8003a04 <RSTimeout+0x234>)
 80037f2:	f7fe fde9 	bl	80023c8 <Set_logInfo2>



	SKprintf("Get_cnt  =%d\r\n",uart[SK_UART1_RS485].Get_cnt);
 80037f6:	4b84      	ldr	r3, [pc, #528]	; (8003a08 <RSTimeout+0x238>)
 80037f8:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80037fc:	4619      	mov	r1, r3
 80037fe:	4883      	ldr	r0, [pc, #524]	; (8003a0c <RSTimeout+0x23c>)
 8003800:	f000 fd18 	bl	8004234 <SKprintf>
	SKprintf("Set_cnt  =%d\r\n",uart[SK_UART1_RS485].Set_cnt);
 8003804:	4b80      	ldr	r3, [pc, #512]	; (8003a08 <RSTimeout+0x238>)
 8003806:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800380a:	4619      	mov	r1, r3
 800380c:	4880      	ldr	r0, [pc, #512]	; (8003a10 <RSTimeout+0x240>)
 800380e:	f000 fd11 	bl	8004234 <SKprintf>
	SKprintf("totalnum =%d\r\n",uart[SK_UART1_RS485].totalnum);
 8003812:	4b7d      	ldr	r3, [pc, #500]	; (8003a08 <RSTimeout+0x238>)
 8003814:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003818:	4619      	mov	r1, r3
 800381a:	487e      	ldr	r0, [pc, #504]	; (8003a14 <RSTimeout+0x244>)
 800381c:	f000 fd0a 	bl	8004234 <SKprintf>
	SKprintf("rcvnum   =%d\r\n",uart[SK_UART1_RS485].rcvnum);
 8003820:	4b79      	ldr	r3, [pc, #484]	; (8003a08 <RSTimeout+0x238>)
 8003822:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003826:	4619      	mov	r1, r3
 8003828:	487b      	ldr	r0, [pc, #492]	; (8003a18 <RSTimeout+0x248>)
 800382a:	f000 fd03 	bl	8004234 <SKprintf>
	SKprintf("rcv_wpt  =%d\r\n",uart[SK_UART1_RS485].rcv_wpt);
 800382e:	4b76      	ldr	r3, [pc, #472]	; (8003a08 <RSTimeout+0x238>)
 8003830:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003834:	4619      	mov	r1, r3
 8003836:	4879      	ldr	r0, [pc, #484]	; (8003a1c <RSTimeout+0x24c>)
 8003838:	f000 fcfc 	bl	8004234 <SKprintf>
	SKprintf("rcv_rpt  =%d\r\n",uart[SK_UART1_RS485].rcv_rpt);
 800383c:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <RSTimeout+0x238>)
 800383e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003842:	4619      	mov	r1, r3
 8003844:	4876      	ldr	r0, [pc, #472]	; (8003a20 <RSTimeout+0x250>)
 8003846:	f000 fcf5 	bl	8004234 <SKprintf>

	c[16] = '\0';
 800384a:	2300      	movs	r3, #0
 800384c:	773b      	strb	r3, [r7, #28]
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 800384e:	2300      	movs	r3, #0
 8003850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003854:	e041      	b.n	80038da <RSTimeout+0x10a>

		SKprintf(" [%03d] ", i*16 );
 8003856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4871      	ldr	r0, [pc, #452]	; (8003a24 <RSTimeout+0x254>)
 8003860:	f000 fce8 	bl	8004234 <SKprintf>

		for(j=0; j< 16; j++ ){
 8003864:	2300      	movs	r3, #0
 8003866:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800386a:	e027      	b.n	80038bc <RSTimeout+0xec>
			k = uart[SK_UART1_RS485].rcvbuf[i*16+j];
 800386c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003870:	011a      	lsls	r2, r3, #4
 8003872:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003876:	4413      	add	r3, r2
 8003878:	4a63      	ldr	r2, [pc, #396]	; (8003a08 <RSTimeout+0x238>)
 800387a:	4413      	add	r3, r2
 800387c:	789b      	ldrb	r3, [r3, #2]
 800387e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			SKprintf(" %02x ", k );
 8003882:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003886:	4619      	mov	r1, r3
 8003888:	4867      	ldr	r0, [pc, #412]	; (8003a28 <RSTimeout+0x258>)
 800388a:	f000 fcd3 	bl	8004234 <SKprintf>
			c[j] =  (uint8_t)((k<0x20||k>=0x7f)? '.': k);
 800388e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003892:	2b1f      	cmp	r3, #31
 8003894:	d906      	bls.n	80038a4 <RSTimeout+0xd4>
 8003896:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800389a:	2b7e      	cmp	r3, #126	; 0x7e
 800389c:	d802      	bhi.n	80038a4 <RSTimeout+0xd4>
 800389e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80038a2:	e000      	b.n	80038a6 <RSTimeout+0xd6>
 80038a4:	222e      	movs	r2, #46	; 0x2e
 80038a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80038aa:	3330      	adds	r3, #48	; 0x30
 80038ac:	443b      	add	r3, r7
 80038ae:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(j=0; j< 16; j++ ){
 80038b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80038b6:	3301      	adds	r3, #1
 80038b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80038bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80038c0:	2b0f      	cmp	r3, #15
 80038c2:	d9d3      	bls.n	800386c <RSTimeout+0x9c>
		}
		SKprintf("  %s\r\n",c );
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	4619      	mov	r1, r3
 80038ca:	4858      	ldr	r0, [pc, #352]	; (8003a2c <RSTimeout+0x25c>)
 80038cc:	f000 fcb2 	bl	8004234 <SKprintf>
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 80038d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038d4:	3301      	adds	r3, #1
 80038d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80038da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038de:	2b07      	cmp	r3, #7
 80038e0:	d9b9      	bls.n	8003856 <RSTimeout+0x86>
	}

	SKprintf("\r\nwork_buf_num =%d\r\n",work_buf_num);
 80038e2:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <RSTimeout+0x260>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	4619      	mov	r1, r3
 80038e8:	4852      	ldr	r0, [pc, #328]	; (8003a34 <RSTimeout+0x264>)
 80038ea:	f000 fca3 	bl	8004234 <SKprintf>

	c[16] = '\0';
 80038ee:	2300      	movs	r3, #0
 80038f0:	773b      	strb	r3, [r7, #28]
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80038f8:	e040      	b.n	800397c <RSTimeout+0x1ac>

		SKprintf(" [%03d] ", i*16 );
 80038fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4848      	ldr	r0, [pc, #288]	; (8003a24 <RSTimeout+0x254>)
 8003904:	f000 fc96 	bl	8004234 <SKprintf>

		for(j=0; j< 16; j++ ){
 8003908:	2300      	movs	r3, #0
 800390a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800390e:	e026      	b.n	800395e <RSTimeout+0x18e>
			k = work_buf[i*16+j];
 8003910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003914:	011a      	lsls	r2, r3, #4
 8003916:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800391a:	4413      	add	r3, r2
 800391c:	4a46      	ldr	r2, [pc, #280]	; (8003a38 <RSTimeout+0x268>)
 800391e:	5cd3      	ldrb	r3, [r2, r3]
 8003920:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			SKprintf(" %02x ", k );
 8003924:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003928:	4619      	mov	r1, r3
 800392a:	483f      	ldr	r0, [pc, #252]	; (8003a28 <RSTimeout+0x258>)
 800392c:	f000 fc82 	bl	8004234 <SKprintf>
			c[j] =  (uint8_t)((k<0x20||k>=0x7f)? '.': k);
 8003930:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003934:	2b1f      	cmp	r3, #31
 8003936:	d906      	bls.n	8003946 <RSTimeout+0x176>
 8003938:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800393c:	2b7e      	cmp	r3, #126	; 0x7e
 800393e:	d802      	bhi.n	8003946 <RSTimeout+0x176>
 8003940:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003944:	e000      	b.n	8003948 <RSTimeout+0x178>
 8003946:	222e      	movs	r2, #46	; 0x2e
 8003948:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800394c:	3330      	adds	r3, #48	; 0x30
 800394e:	443b      	add	r3, r7
 8003950:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(j=0; j< 16; j++ ){
 8003954:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003958:	3301      	adds	r3, #1
 800395a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800395e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003962:	2b0f      	cmp	r3, #15
 8003964:	d9d4      	bls.n	8003910 <RSTimeout+0x140>
		}
		SKprintf("  %s\r\n",c );
 8003966:	f107 030c 	add.w	r3, r7, #12
 800396a:	4619      	mov	r1, r3
 800396c:	482f      	ldr	r0, [pc, #188]	; (8003a2c <RSTimeout+0x25c>)
 800396e:	f000 fc61 	bl	8004234 <SKprintf>
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 8003972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003976:	3301      	adds	r3, #1
 8003978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800397c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003980:	2b07      	cmp	r3, #7
 8003982:	d9ba      	bls.n	80038fa <RSTimeout+0x12a>
	}

	if(rt_task->retry_num < 2){
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7a5b      	ldrb	r3, [r3, #9]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d817      	bhi.n	80039bc <RSTimeout+0x1ec>
		// 同じデバイスに再送する
		msg.event = RT_EVENT_START_REQ;
 800398c:	2300      	movs	r3, #0
 800398e:	f887 3020 	strb.w	r3, [r7, #32]
		msg.address = rt_task->address ;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	799b      	ldrb	r3, [r3, #6]
 8003996:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		msg.command = rt_task->command;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	789b      	ldrb	r3, [r3, #2]
 800399e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		msg.command_sub = rt_task->command_sub;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	889b      	ldrh	r3, [r3, #4]
 80039a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		msg.sub1 = rt_task->sub1;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	79db      	ldrb	r3, [r3, #7]
 80039ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

#ifdef	 __HEAP_DBUG
		Set_logInfo2("HeapSize 005 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		SendMsgQue(&msg);
 80039b0:	f107 0320 	add.w	r3, r7, #32
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fd77 	bl	80034a8 <SendMsgQue>

#ifdef	 __HEAP_DBUG
		Set_logInfo2("HeapSize 006 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG
	}
}
 80039ba:	e01d      	b.n	80039f8 <RSTimeout+0x228>
		if( rt_task->address == RS485_AD_SLEVE01){
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	799b      	ldrb	r3, [r3, #6]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d103      	bne.n	80039cc <RSTimeout+0x1fc>
			msg.address = RS485_AD_SLEVE02;
 80039c4:	2302      	movs	r3, #2
 80039c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80039ca:	e002      	b.n	80039d2 <RSTimeout+0x202>
			msg.address = RS485_AD_SLEVE01;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		msg.event = RT_EVENT_START_REQ;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f887 3020 	strb.w	r3, [r7, #32]
		msg.command = rt_task->command;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	789b      	ldrb	r3, [r3, #2]
 80039dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		msg.command_sub = rt_task->command_sub;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	889b      	ldrh	r3, [r3, #4]
 80039e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		msg.sub1 = rt_task->sub1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	79db      	ldrb	r3, [r3, #7]
 80039ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		SendMsgQue(&msg);
 80039ee:	f107 0320 	add.w	r3, r7, #32
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fd58 	bl	80034a8 <SendMsgQue>
}
 80039f8:	bf00      	nop
 80039fa:	3730      	adds	r7, #48	; 0x30
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	08018948 	.word	0x08018948
 8003a04:	08018960 	.word	0x08018960
 8003a08:	20001d78 	.word	0x20001d78
 8003a0c:	08018970 	.word	0x08018970
 8003a10:	08018980 	.word	0x08018980
 8003a14:	08018990 	.word	0x08018990
 8003a18:	080189a0 	.word	0x080189a0
 8003a1c:	080189b0 	.word	0x080189b0
 8003a20:	080189c0 	.word	0x080189c0
 8003a24:	080189d0 	.word	0x080189d0
 8003a28:	080189dc 	.word	0x080189dc
 8003a2c:	080189e4 	.word	0x080189e4
 8003a30:	20001d74 	.word	0x20001d74
 8003a34:	080189ec 	.word	0x080189ec
 8003a38:	20001cf4 	.word	0x20001cf4

08003a3c <RSstop_req>:
//==============================================================================
//
//==============================================================================
void RSstop_req( CMD_MSG	*rt_task )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	Set_logInfo2("★RSstop_req(S=%d,E=%d)",rt_task->state, rt_task->event);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4803      	ldr	r0, [pc, #12]	; (8003a60 <RSstop_req+0x24>)
 8003a52:	f7fe fcb9 	bl	80023c8 <Set_logInfo2>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	08018a04 	.word	0x08018a04

08003a64 <RSrespons_proc>:

//==============================================================================
//
//==============================================================================
void RSrespons_proc( CMD_MSG	*rt_task )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77fb      	strb	r3, [r7, #31]
	uint8_t		*pt;
	uint8_t 	*msgQueBuf;


//	Set_logInfo2("RSrespons_proc(()");
	Set_logInfo2("★RSrespons_proc(S=%d,E=%d)",rt_task->state, rt_task->event);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	4619      	mov	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	485e      	ldr	r0, [pc, #376]	; (8003bf8 <RSrespons_proc+0x194>)
 8003a7e:	f7fe fca3 	bl	80023c8 <Set_logInfo2>
//	SKprintf("RSrespons_proc(%d,%d)\r\n", );

	status = RET_TRUE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	77fb      	strb	r3, [r7, #31]
	switch( Res_mesg[COM_COMMAND] ){
 8003a86:	4b5d      	ldr	r3, [pc, #372]	; (8003bfc <RSrespons_proc+0x198>)
 8003a88:	7b5b      	ldrb	r3, [r3, #13]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d86a      	bhi.n	8003b66 <RSrespons_proc+0x102>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <RSrespons_proc+0x34>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003ab1 	.word	0x08003ab1
 8003aa0:	08003afd 	.word	0x08003afd
 8003aa4:	08003b05 	.word	0x08003b05
	case RS485_CMD_STATUS:
		Set_logInfo2("RS485_CMD_STATUS\r\n");
 8003aa8:	4855      	ldr	r0, [pc, #340]	; (8003c00 <RSrespons_proc+0x19c>)
 8003aaa:	f7fe fc8d 	bl	80023c8 <Set_logInfo2>

		break;
 8003aae:	e060      	b.n	8003b72 <RSrespons_proc+0x10e>
	case RS485_CMD_VERSION:
		Set_logInfo2("RS485_CMD_VERSION\r\n");
 8003ab0:	4854      	ldr	r0, [pc, #336]	; (8003c04 <RSrespons_proc+0x1a0>)
 8003ab2:	f7fe fc89 	bl	80023c8 <Set_logInfo2>

		dt16 = Res_mesg[COM_SLV_VERSION_H];
 8003ab6:	4b51      	ldr	r3, [pc, #324]	; (8003bfc <RSrespons_proc+0x198>)
 8003ab8:	7c1b      	ldrb	r3, [r3, #16]
 8003aba:	82fb      	strh	r3, [r7, #22]
		dt16 <<= 8;
 8003abc:	8afb      	ldrh	r3, [r7, #22]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	82fb      	strh	r3, [r7, #22]
		dt16 |= Res_mesg[COM_SLV_VERSION_L];
 8003ac2:	4b4e      	ldr	r3, [pc, #312]	; (8003bfc <RSrespons_proc+0x198>)
 8003ac4:	7bdb      	ldrb	r3, [r3, #15]
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	8afb      	ldrh	r3, [r7, #22]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	82fb      	strh	r3, [r7, #22]

		SKprintf("  SLV VER = %04x, ",dt16);
 8003ace:	8afb      	ldrh	r3, [r7, #22]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	484d      	ldr	r0, [pc, #308]	; (8003c08 <RSrespons_proc+0x1a4>)
 8003ad4:	f000 fbae 	bl	8004234 <SKprintf>

		dt16 = Res_mesg[COM_SNS_VERSION_H];
 8003ad8:	4b48      	ldr	r3, [pc, #288]	; (8003bfc <RSrespons_proc+0x198>)
 8003ada:	7c9b      	ldrb	r3, [r3, #18]
 8003adc:	82fb      	strh	r3, [r7, #22]
		dt16 <<= 8;
 8003ade:	8afb      	ldrh	r3, [r7, #22]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	82fb      	strh	r3, [r7, #22]
		dt16 |= Res_mesg[COM_SNS_VERSION_L];
 8003ae4:	4b45      	ldr	r3, [pc, #276]	; (8003bfc <RSrespons_proc+0x198>)
 8003ae6:	7c5b      	ldrb	r3, [r3, #17]
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	8afb      	ldrh	r3, [r7, #22]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	82fb      	strh	r3, [r7, #22]
		SKprintf("  SNS VER = %04x \r\n",dt16);
 8003af0:	8afb      	ldrh	r3, [r7, #22]
 8003af2:	4619      	mov	r1, r3
 8003af4:	4845      	ldr	r0, [pc, #276]	; (8003c0c <RSrespons_proc+0x1a8>)
 8003af6:	f000 fb9d 	bl	8004234 <SKprintf>

		break;
 8003afa:	e03a      	b.n	8003b72 <RSrespons_proc+0x10e>
	case RS485_CMD_MESUR:
		Set_logInfo2("RS485_CMD_MESUR\r\n");
 8003afc:	4844      	ldr	r0, [pc, #272]	; (8003c10 <RSrespons_proc+0x1ac>)
 8003afe:	f7fe fc63 	bl	80023c8 <Set_logInfo2>

		break;
 8003b02:	e036      	b.n	8003b72 <RSrespons_proc+0x10e>
	case RS485_CMD_MESUR_DATA:
		Set_logInfo2("RS485_CMD_MESUR_DATA\r\n");
 8003b04:	4843      	ldr	r0, [pc, #268]	; (8003c14 <RSrespons_proc+0x1b0>)
 8003b06:	f7fe fc5f 	bl	80023c8 <Set_logInfo2>

		pt = (uint8_t *)&dtf;
 8003b0a:	f107 0308 	add.w	r3, r7, #8
 8003b0e:	61bb      	str	r3, [r7, #24]
		pt[3] = Res_mesg[COM_MESUR_DATA_H];
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	3303      	adds	r3, #3
 8003b14:	4a39      	ldr	r2, [pc, #228]	; (8003bfc <RSrespons_proc+0x198>)
 8003b16:	7c92      	ldrb	r2, [r2, #18]
 8003b18:	701a      	strb	r2, [r3, #0]
		pt[2] = Res_mesg[COM_MESUR_DATA_MH];
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	4a37      	ldr	r2, [pc, #220]	; (8003bfc <RSrespons_proc+0x198>)
 8003b20:	7c52      	ldrb	r2, [r2, #17]
 8003b22:	701a      	strb	r2, [r3, #0]
		pt[1] = Res_mesg[COM_MESUR_DATA_ML];
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	3301      	adds	r3, #1
 8003b28:	4a34      	ldr	r2, [pc, #208]	; (8003bfc <RSrespons_proc+0x198>)
 8003b2a:	7c12      	ldrb	r2, [r2, #16]
 8003b2c:	701a      	strb	r2, [r3, #0]
		pt[0] = Res_mesg[COM_MESUR_DATA_L];
 8003b2e:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <RSrespons_proc+0x198>)
 8003b30:	7bda      	ldrb	r2, [r3, #15]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	701a      	strb	r2, [r3, #0]


		if( rt_task->address == RS485_AD_SLEVE01){
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	799b      	ldrb	r3, [r3, #6]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d109      	bne.n	8003b52 <RSrespons_proc+0xee>
			Set_logInfo2("SLAVE01 DATA = %fmm",dtf);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fc fd19 	bl	8000578 <__aeabi_f2d>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4833      	ldr	r0, [pc, #204]	; (8003c18 <RSrespons_proc+0x1b4>)
 8003b4c:	f7fe fc3c 	bl	80023c8 <Set_logInfo2>
			Set_logInfo2("SLAVE02 DATA = %fmm",dtf);
		}



		break;
 8003b50:	e00f      	b.n	8003b72 <RSrespons_proc+0x10e>
			Set_logInfo2("SLAVE02 DATA = %fmm",dtf);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fd0f 	bl	8000578 <__aeabi_f2d>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	482f      	ldr	r0, [pc, #188]	; (8003c1c <RSrespons_proc+0x1b8>)
 8003b60:	f7fe fc32 	bl	80023c8 <Set_logInfo2>
		break;
 8003b64:	e005      	b.n	8003b72 <RSrespons_proc+0x10e>
	default:
		status = RET_FALSE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	77fb      	strb	r3, [r7, #31]
		Set_logInfo2("ERROR Recive Command None \r\n");
 8003b6a:	482d      	ldr	r0, [pc, #180]	; (8003c20 <RSrespons_proc+0x1bc>)
 8003b6c:	f7fe fc2c 	bl	80023c8 <Set_logInfo2>
		break;
 8003b70:	bf00      	nop
	}

	if( status == RET_TRUE ){
 8003b72:	7ffb      	ldrb	r3, [r7, #31]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d13b      	bne.n	8003bf0 <RSrespons_proc+0x18c>
		rt_task->state = RT_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	705a      	strb	r2, [r3, #1]
		cmd_ptr ++;
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <RSrespons_proc+0x1c0>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	3301      	adds	r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <RSrespons_proc+0x1c0>)
 8003b88:	701a      	strb	r2, [r3, #0]

		Set_logInfo2("command_sub=%d",rt_task->command_sub);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	889b      	ldrh	r3, [r3, #4]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4825      	ldr	r0, [pc, #148]	; (8003c28 <RSrespons_proc+0x1c4>)
 8003b92:	f7fe fc19 	bl	80023c8 <Set_logInfo2>
		SKprintf("command_sub=%d\r\n",rt_task->command_sub);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	889b      	ldrh	r3, [r3, #4]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4823      	ldr	r0, [pc, #140]	; (8003c2c <RSrespons_proc+0x1c8>)
 8003b9e:	f000 fb49 	bl	8004234 <SKprintf>
		rt_task->command_sub --;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	889b      	ldrh	r3, [r3, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	809a      	strh	r2, [r3, #4]

		if(rt_task->command_sub > 0 ){
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	889b      	ldrh	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d019      	beq.n	8003bea <RSrespons_proc+0x186>
			msg.event = RT_EVENT_START_REQ;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	733b      	strb	r3, [r7, #12]

			if( rt_task->address == RS485_AD_SLEVE01){
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	799b      	ldrb	r3, [r3, #6]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d102      	bne.n	8003bc8 <RSrespons_proc+0x164>
				msg.address = RS485_AD_SLEVE02;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	74bb      	strb	r3, [r7, #18]
 8003bc6:	e001      	b.n	8003bcc <RSrespons_proc+0x168>
			}
			else{
				msg.address = RS485_AD_SLEVE01;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	74bb      	strb	r3, [r7, #18]
			}

			msg.command = rt_task->command;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	789b      	ldrb	r3, [r3, #2]
 8003bd0:	73bb      	strb	r3, [r7, #14]
			msg.command_sub = rt_task->command_sub;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	889b      	ldrh	r3, [r3, #4]
 8003bd6:	823b      	strh	r3, [r7, #16]
			msg.sub1 = rt_task->sub1;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	79db      	ldrb	r3, [r3, #7]
 8003bdc:	74fb      	strb	r3, [r7, #19]

			SendMsgQue(&msg);
 8003bde:	f107 030c 	add.w	r3, r7, #12
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff fc60 	bl	80034a8 <SendMsgQue>
			Set_logInfo2("END RSrespons_OK");
		}
	}


}
 8003be8:	e002      	b.n	8003bf0 <RSrespons_proc+0x18c>
			Set_logInfo2("END RSrespons_OK");
 8003bea:	4811      	ldr	r0, [pc, #68]	; (8003c30 <RSrespons_proc+0x1cc>)
 8003bec:	f7fe fbec 	bl	80023c8 <Set_logInfo2>
}
 8003bf0:	bf00      	nop
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	08018a20 	.word	0x08018a20
 8003bfc:	20001ebc 	.word	0x20001ebc
 8003c00:	08018a40 	.word	0x08018a40
 8003c04:	08018a54 	.word	0x08018a54
 8003c08:	08018a68 	.word	0x08018a68
 8003c0c:	08018a7c 	.word	0x08018a7c
 8003c10:	08018a90 	.word	0x08018a90
 8003c14:	08018aa4 	.word	0x08018aa4
 8003c18:	08018abc 	.word	0x08018abc
 8003c1c:	08018ad0 	.word	0x08018ad0
 8003c20:	08018ae4 	.word	0x08018ae4
 8003c24:	20001ede 	.word	0x20001ede
 8003c28:	08018b04 	.word	0x08018b04
 8003c2c:	08018b14 	.word	0x08018b14
 8003c30:	08018b28 	.word	0x08018b28

08003c34 <Get_end_test_pt>:

//==============================================================================
//
//==============================================================================
uint16_t  Get_end_test_pt(uint16_t num,uint8_t *buf )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	6039      	str	r1, [r7, #0]
 8003c3e:	80fb      	strh	r3, [r7, #6]
	uint16_t	i;
	uint16_t	rtn;

	rtn = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	81bb      	strh	r3, [r7, #12]

	for( i=0; i<num; i++){
 8003c44:	2300      	movs	r3, #0
 8003c46:	81fb      	strh	r3, [r7, #14]
 8003c48:	e03c      	b.n	8003cc4 <Get_end_test_pt+0x90>
		if( (i+TEXT_LENGTH) > num ){
 8003c4a:	89fb      	ldrh	r3, [r7, #14]
 8003c4c:	1d5a      	adds	r2, r3, #5
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	db02      	blt.n	8003c5a <Get_end_test_pt+0x26>
			rtn = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	81bb      	strh	r3, [r7, #12]
			//SKprintf("None\r\n");
			break;
 8003c58:	e038      	b.n	8003ccc <Get_end_test_pt+0x98>
		}
		else if( buf[i] == message_end_text[0]
 8003c5a:	89fb      	ldrh	r3, [r7, #14]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	4413      	add	r3, r2
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	224d      	movs	r2, #77	; 0x4d
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d12a      	bne.n	8003cbe <Get_end_test_pt+0x8a>
				&& buf[i+1] == message_end_text[1]
 8003c68:	89fb      	ldrh	r3, [r7, #14]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	4413      	add	r3, r2
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2253      	movs	r2, #83	; 0x53
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d122      	bne.n	8003cbe <Get_end_test_pt+0x8a>
				&& buf[i+2] == message_end_text[2]
 8003c78:	89fb      	ldrh	r3, [r7, #14]
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2247      	movs	r2, #71	; 0x47
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d11a      	bne.n	8003cbe <Get_end_test_pt+0x8a>
				&& buf[i+3] == message_end_text[3]
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	3303      	adds	r3, #3
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	4413      	add	r3, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2245      	movs	r2, #69	; 0x45
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d112      	bne.n	8003cbe <Get_end_test_pt+0x8a>
				&& buf[i+4] == message_end_text[4]
 8003c98:	89fb      	ldrh	r3, [r7, #14]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	224e      	movs	r2, #78	; 0x4e
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10a      	bne.n	8003cbe <Get_end_test_pt+0x8a>
				&& buf[i+5] == message_end_text[5] ){
 8003ca8:	89fb      	ldrh	r3, [r7, #14]
 8003caa:	3305      	adds	r3, #5
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2244      	movs	r2, #68	; 0x44
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d102      	bne.n	8003cbe <Get_end_test_pt+0x8a>

			//SKprintf("FIX\r\n");
			rtn = i;
 8003cb8:	89fb      	ldrh	r3, [r7, #14]
 8003cba:	81bb      	strh	r3, [r7, #12]
			break;
 8003cbc:	e006      	b.n	8003ccc <Get_end_test_pt+0x98>
	for( i=0; i<num; i++){
 8003cbe:	89fb      	ldrh	r3, [r7, #14]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	81fb      	strh	r3, [r7, #14]
 8003cc4:	89fa      	ldrh	r2, [r7, #14]
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3be      	bcc.n	8003c4a <Get_end_test_pt+0x16>
		}
	}

	return rtn;
 8003ccc:	89bb      	ldrh	r3, [r7, #12]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <Set_Res_Message>:
//==============================================================================
//
//==============================================================================
RETURN_STATUS  Set_Res_Message(uint16_t num, uint8_t *src, uint8_t *dist)
{
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b089      	sub	sp, #36	; 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	81fb      	strh	r3, [r7, #14]
	RETURN_STATUS	status = RET_TRUE;
 8003cea:	2301      	movs	r3, #1
 8003cec:	77fb      	strb	r3, [r7, #31]
	uint8_t		c[2];

	//-------------------------------------------------------
	// Command buffer Clesr
	//-------------------------------------------------------
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003cee:	2300      	movs	r3, #0
 8003cf0:	83bb      	strh	r3, [r7, #28]
 8003cf2:	e006      	b.n	8003d02 <Set_Res_Message+0x26>
		Res_mesg[i] = 0;
 8003cf4:	8bbb      	ldrh	r3, [r7, #28]
 8003cf6:	4a6d      	ldr	r2, [pc, #436]	; (8003eac <Set_Res_Message+0x1d0>)
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003cfc:	8bbb      	ldrh	r3, [r7, #28]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	83bb      	strh	r3, [r7, #28]
 8003d02:	8bbb      	ldrh	r3, [r7, #28]
 8003d04:	2b21      	cmp	r3, #33	; 0x21
 8003d06:	d9f5      	bls.n	8003cf4 <Set_Res_Message+0x18>


	//-------------------------------------------------------------
	// スタートテキスト検索
	//-------------------------------------------------------------
	start = 0xffff;
 8003d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d0c:	833b      	strh	r3, [r7, #24]
	for( i=0; i<num; i++){
 8003d0e:	2300      	movs	r3, #0
 8003d10:	83bb      	strh	r3, [r7, #28]
 8003d12:	e034      	b.n	8003d7e <Set_Res_Message+0xa2>
		if( src[i] == res_start_text[0]
 8003d14:	8bbb      	ldrh	r3, [r7, #28]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4413      	add	r3, r2
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2252      	movs	r2, #82	; 0x52
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d12a      	bne.n	8003d78 <Set_Res_Message+0x9c>
				&& src[i+1] == res_start_text[1]
 8003d22:	8bbb      	ldrh	r3, [r7, #28]
 8003d24:	3301      	adds	r3, #1
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2245      	movs	r2, #69	; 0x45
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d122      	bne.n	8003d78 <Set_Res_Message+0x9c>
				&& src[i+2] == res_start_text[2]
 8003d32:	8bbb      	ldrh	r3, [r7, #28]
 8003d34:	3302      	adds	r3, #2
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2253      	movs	r2, #83	; 0x53
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d11a      	bne.n	8003d78 <Set_Res_Message+0x9c>
				&& src[i+3] == res_start_text[3]
 8003d42:	8bbb      	ldrh	r3, [r7, #28]
 8003d44:	3303      	adds	r3, #3
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4413      	add	r3, r2
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	222d      	movs	r2, #45	; 0x2d
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d112      	bne.n	8003d78 <Set_Res_Message+0x9c>
				&& src[i+4] == res_start_text[4]
 8003d52:	8bbb      	ldrh	r3, [r7, #28]
 8003d54:	3304      	adds	r3, #4
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4413      	add	r3, r2
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2253      	movs	r2, #83	; 0x53
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10a      	bne.n	8003d78 <Set_Res_Message+0x9c>
				&& src[i+5] == res_start_text[5] ){
 8003d62:	8bbb      	ldrh	r3, [r7, #28]
 8003d64:	3305      	adds	r3, #5
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	4413      	add	r3, r2
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2254      	movs	r2, #84	; 0x54
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d102      	bne.n	8003d78 <Set_Res_Message+0x9c>

			start = i;
 8003d72:	8bbb      	ldrh	r3, [r7, #28]
 8003d74:	833b      	strh	r3, [r7, #24]
			break;
 8003d76:	e006      	b.n	8003d86 <Set_Res_Message+0xaa>
	for( i=0; i<num; i++){
 8003d78:	8bbb      	ldrh	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	83bb      	strh	r3, [r7, #28]
 8003d7e:	8bba      	ldrh	r2, [r7, #28]
 8003d80:	89fb      	ldrh	r3, [r7, #14]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d3c6      	bcc.n	8003d14 <Set_Res_Message+0x38>
		}
	}

	if( start == 0xffff ){
 8003d86:	8b3b      	ldrh	r3, [r7, #24]
 8003d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d104      	bne.n	8003d9a <Set_Res_Message+0xbe>
		status = RET_FALSE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	77fb      	strb	r3, [r7, #31]
		SKprintf("Error : Respons Data start txt none \r\n");
 8003d94:	4846      	ldr	r0, [pc, #280]	; (8003eb0 <Set_Res_Message+0x1d4>)
 8003d96:	f000 fa4d 	bl	8004234 <SKprintf>
	}

	//-------------------------------------------------------------
	// エンドテキスト検索
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 8003d9a:	7ffb      	ldrb	r3, [r7, #31]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d149      	bne.n	8003e34 <Set_Res_Message+0x158>
		end = 0xffff;
 8003da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003da4:	82fb      	strh	r3, [r7, #22]
		for( i=0; i<num; i++){
 8003da6:	2300      	movs	r3, #0
 8003da8:	83bb      	strh	r3, [r7, #28]
 8003daa:	e035      	b.n	8003e18 <Set_Res_Message+0x13c>
			if( src[i] == message_end_text[0]
 8003dac:	8bbb      	ldrh	r3, [r7, #28]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	4413      	add	r3, r2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	224d      	movs	r2, #77	; 0x4d
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d12b      	bne.n	8003e12 <Set_Res_Message+0x136>
					&& src[i+1] == message_end_text[1]
 8003dba:	8bbb      	ldrh	r3, [r7, #28]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2253      	movs	r2, #83	; 0x53
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d123      	bne.n	8003e12 <Set_Res_Message+0x136>
					&& src[i+2] == message_end_text[2]
 8003dca:	8bbb      	ldrh	r3, [r7, #28]
 8003dcc:	3302      	adds	r3, #2
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2247      	movs	r2, #71	; 0x47
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d11b      	bne.n	8003e12 <Set_Res_Message+0x136>
					&& src[i+3] == message_end_text[3]
 8003dda:	8bbb      	ldrh	r3, [r7, #28]
 8003ddc:	3303      	adds	r3, #3
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	4413      	add	r3, r2
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2245      	movs	r2, #69	; 0x45
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d113      	bne.n	8003e12 <Set_Res_Message+0x136>
					&& src[i+4] == message_end_text[4]
 8003dea:	8bbb      	ldrh	r3, [r7, #28]
 8003dec:	3304      	adds	r3, #4
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	4413      	add	r3, r2
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	224e      	movs	r2, #78	; 0x4e
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10b      	bne.n	8003e12 <Set_Res_Message+0x136>
					&& src[i+5] == message_end_text[5] ){
 8003dfa:	8bbb      	ldrh	r3, [r7, #28]
 8003dfc:	3305      	adds	r3, #5
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	4413      	add	r3, r2
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2244      	movs	r2, #68	; 0x44
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d103      	bne.n	8003e12 <Set_Res_Message+0x136>

				end = i+5+1;
 8003e0a:	8bbb      	ldrh	r3, [r7, #28]
 8003e0c:	3306      	adds	r3, #6
 8003e0e:	82fb      	strh	r3, [r7, #22]
				break;
 8003e10:	e006      	b.n	8003e20 <Set_Res_Message+0x144>
		for( i=0; i<num; i++){
 8003e12:	8bbb      	ldrh	r3, [r7, #28]
 8003e14:	3301      	adds	r3, #1
 8003e16:	83bb      	strh	r3, [r7, #28]
 8003e18:	8bba      	ldrh	r2, [r7, #28]
 8003e1a:	89fb      	ldrh	r3, [r7, #14]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3c5      	bcc.n	8003dac <Set_Res_Message+0xd0>
			}
		}

		if( end == 0xffff ){
 8003e20:	8afb      	ldrh	r3, [r7, #22]
 8003e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d104      	bne.n	8003e34 <Set_Res_Message+0x158>
			status = RET_FALSE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	77fb      	strb	r3, [r7, #31]
			SKprintf("Error : Respons Data end txt none \r\n");
 8003e2e:	4821      	ldr	r0, [pc, #132]	; (8003eb4 <Set_Res_Message+0x1d8>)
 8003e30:	f000 fa00 	bl	8004234 <SKprintf>
		}
	}
	//-------------------------------------------------------------
	// Res[]に転送
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 8003e34:	7ffb      	ldrb	r3, [r7, #31]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d11f      	bne.n	8003e7a <Set_Res_Message+0x19e>
		j = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	837b      	strh	r3, [r7, #26]
		for( i=start; i < end; i++){
 8003e3e:	8b3b      	ldrh	r3, [r7, #24]
 8003e40:	83bb      	strh	r3, [r7, #28]
 8003e42:	e016      	b.n	8003e72 <Set_Res_Message+0x196>
			if( j < COM_TABLE_MAX ){
 8003e44:	8b7b      	ldrh	r3, [r7, #26]
 8003e46:	2b21      	cmp	r3, #33	; 0x21
 8003e48:	d808      	bhi.n	8003e5c <Set_Res_Message+0x180>
				dist[j] = src[i];
 8003e4a:	8bbb      	ldrh	r3, [r7, #28]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	441a      	add	r2, r3
 8003e50:	8b7b      	ldrh	r3, [r7, #26]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	440b      	add	r3, r1
 8003e56:	7812      	ldrb	r2, [r2, #0]
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e004      	b.n	8003e66 <Set_Res_Message+0x18a>
			}
			else{
				status = RET_FALSE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77fb      	strb	r3, [r7, #31]
				SKprintf("Error : Respons data size over\r\n");
 8003e60:	4815      	ldr	r0, [pc, #84]	; (8003eb8 <Set_Res_Message+0x1dc>)
 8003e62:	f000 f9e7 	bl	8004234 <SKprintf>
			}
			j++;
 8003e66:	8b7b      	ldrh	r3, [r7, #26]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	837b      	strh	r3, [r7, #26]
		for( i=start; i < end; i++){
 8003e6c:	8bbb      	ldrh	r3, [r7, #28]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	83bb      	strh	r3, [r7, #28]
 8003e72:	8bba      	ldrh	r2, [r7, #28]
 8003e74:	8afb      	ldrh	r3, [r7, #22]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d3e4      	bcc.n	8003e44 <Set_Res_Message+0x168>
		}
	}
	//-------------------------------------------------------------
	// チェックサム確認
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 8003e7a:	7ffb      	ldrb	r3, [r7, #31]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10f      	bne.n	8003ea0 <Set_Res_Message+0x1c4>
		if( dist[COM_CHKSUM] !=Get_command_chksum(COM_COUNTER_L, COM_CHKSUM_ID, dist)){
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	331b      	adds	r3, #27
 8003e84:	781c      	ldrb	r4, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	211a      	movs	r1, #26
 8003e8a:	2006      	movs	r0, #6
 8003e8c:	f000 f818 	bl	8003ec0 <Get_command_chksum>
 8003e90:	4603      	mov	r3, r0
 8003e92:	429c      	cmp	r4, r3
 8003e94:	d004      	beq.n	8003ea0 <Set_Res_Message+0x1c4>
			status = RET_FALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	77fb      	strb	r3, [r7, #31]
			SKprintf("Error : Respons data chksum eoor");
 8003e9a:	4808      	ldr	r0, [pc, #32]	; (8003ebc <Set_Res_Message+0x1e0>)
 8003e9c:	f000 f9ca 	bl	8004234 <SKprintf>
	}
	SKprintf("\r\n");
#endif	// __COM_LOG_DISPLAY


	return status;
 8003ea0:	7ffb      	ldrb	r3, [r7, #31]

}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	; 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd90      	pop	{r4, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20001ebc 	.word	0x20001ebc
 8003eb0:	08018b3c 	.word	0x08018b3c
 8003eb4:	08018b64 	.word	0x08018b64
 8003eb8:	08018b8c 	.word	0x08018b8c
 8003ebc:	08018bb0 	.word	0x08018bb0

08003ec0 <Get_command_chksum>:
//==============================================================================
//
//=============================================================================
uint8_t Get_command_chksum(uint8_t start, uint8_t end,uint8_t *dt )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	603a      	str	r2, [r7, #0]
 8003eca:	71fb      	strb	r3, [r7, #7]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	71bb      	strb	r3, [r7, #6]
	uint8_t		sum = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]
	uint8_t		i;

	for( i=start; i<end; i++){
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	73bb      	strb	r3, [r7, #14]
 8003ed8:	e009      	b.n	8003eee <Get_command_chksum+0x2e>
		sum += dt[i];
 8003eda:	7bbb      	ldrb	r3, [r7, #14]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	73fb      	strb	r3, [r7, #15]
	for( i=start; i<end; i++){
 8003ee8:	7bbb      	ldrb	r3, [r7, #14]
 8003eea:	3301      	adds	r3, #1
 8003eec:	73bb      	strb	r3, [r7, #14]
 8003eee:	7bba      	ldrb	r2, [r7, #14]
 8003ef0:	79bb      	ldrb	r3, [r7, #6]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d3f1      	bcc.n	8003eda <Get_command_chksum+0x1a>
		//SKprintf("%02x ", dt[i]);
	}
	//SKprintf(" sum=%02x\r\n",sum);

	return sum;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <Send_rx485_cmd_message>:
//==============================================================================
//
//==============================================================================

RETURN_STATUS Send_rx485_cmd_message( CMD_MSG	 *com_msg )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	RETURN_STATUS	status = RET_TRUE;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73bb      	strb	r3, [r7, #14]
	uint8_t		*pt;

	//-------------------------------------------------------
	// Command buffer Clesr
	//-------------------------------------------------------
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	e006      	b.n	8003f24 <Send_rx485_cmd_message+0x20>
		Cmd_mesg[i] = 0;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	4a45      	ldr	r2, [pc, #276]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	3301      	adds	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b21      	cmp	r3, #33	; 0x21
 8003f28:	d9f5      	bls.n	8003f16 <Send_rx485_cmd_message+0x12>
	}

	//-------------------------------------------------------
	// START Text
	//-------------------------------------------------------
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
 8003f2e:	e00a      	b.n	8003f46 <Send_rx485_cmd_message+0x42>
		j = COM_START_TXT_00 + i ;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	737b      	strb	r3, [r7, #13]
		Cmd_mesg[j] = com_start_text[i];
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	7b7b      	ldrb	r3, [r7, #13]
 8003f38:	493e      	ldr	r1, [pc, #248]	; (8004034 <Send_rx485_cmd_message+0x130>)
 8003f3a:	5c89      	ldrb	r1, [r1, r2]
 8003f3c:	4a3c      	ldr	r2, [pc, #240]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f3e:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	3301      	adds	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d9f1      	bls.n	8003f30 <Send_rx485_cmd_message+0x2c>
	}

	//-------------------------------------------------------
	// 通信カウンタ
	//-------------------------------------------------------
	com_counter ++;
 8003f4c:	4b3a      	ldr	r3, [pc, #232]	; (8004038 <Send_rx485_cmd_message+0x134>)
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	3301      	adds	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	4b38      	ldr	r3, [pc, #224]	; (8004038 <Send_rx485_cmd_message+0x134>)
 8003f56:	801a      	strh	r2, [r3, #0]
	Cmd_mesg[COM_COUNTER_L] = (uint8_t)com_counter;
 8003f58:	4b37      	ldr	r3, [pc, #220]	; (8004038 <Send_rx485_cmd_message+0x134>)
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4b34      	ldr	r3, [pc, #208]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f60:	719a      	strb	r2, [r3, #6]
	Cmd_mesg[COM_COUNTER_H] = (uint8_t)(com_counter >> 8);
 8003f62:	4b35      	ldr	r3, [pc, #212]	; (8004038 <Send_rx485_cmd_message+0x134>)
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	4b30      	ldr	r3, [pc, #192]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f6e:	71da      	strb	r2, [r3, #7]

	//-------------------------------------------------------
	// アドレス
	//-------------------------------------------------------
	Cmd_mesg[COM_ADDRESS_ID] = '#';
 8003f70:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f72:	2223      	movs	r2, #35	; 0x23
 8003f74:	721a      	strb	r2, [r3, #8]
	Cmd_mesg[COM_ADDRESS_DIST] = com_msg->address;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	799a      	ldrb	r2, [r3, #6]
 8003f7a:	4b2d      	ldr	r3, [pc, #180]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f7c:	725a      	strb	r2, [r3, #9]
	Cmd_mesg[COM_ADDRESS_SORC] =  MY_RS485_ADDRESS;
 8003f7e:	4b2c      	ldr	r3, [pc, #176]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	729a      	strb	r2, [r3, #10]

	//-------------------------------------------------------
	// コマンド
	//-------------------------------------------------------
	Cmd_mesg[COM_COMMAND_ID] = '*';
 8003f84:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f86:	222a      	movs	r2, #42	; 0x2a
 8003f88:	731a      	strb	r2, [r3, #12]
	Cmd_mesg[COM_COMMAND] = com_msg->command;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	789a      	ldrb	r2, [r3, #2]
 8003f8e:	4b28      	ldr	r3, [pc, #160]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f90:	735a      	strb	r2, [r3, #13]

	switch(com_msg->command){
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	789b      	ldrb	r3, [r3, #2]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d815      	bhi.n	8003fc8 <Send_rx485_cmd_message+0xc4>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <Send_rx485_cmd_message+0xa0>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fc9 	.word	0x08003fc9
 8003fac:	08003fb5 	.word	0x08003fb5
 8003fb0:	08003fbf 	.word	0x08003fbf
	case RS485_CMD_STATUS:
		break;
	case RS485_CMD_VERSION:
		break;
	case RS485_CMD_MESUR:
		Cmd_mesg[COM_SENS_CTRL] = com_msg->sub1;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	79da      	ldrb	r2, [r3, #7]
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003fba:	73da      	strb	r2, [r3, #15]
		break;
 8003fbc:	e005      	b.n	8003fca <Send_rx485_cmd_message+0xc6>
	case RS485_CMD_MESUR_DATA:
		Cmd_mesg[COM_DATA_KIND ] = com_msg->sub1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	79da      	ldrb	r2, [r3, #7]
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003fc4:	73da      	strb	r2, [r3, #15]
		break;
 8003fc6:	e000      	b.n	8003fca <Send_rx485_cmd_message+0xc6>
	default:
		break;
 8003fc8:	bf00      	nop
	}

	//-------------------------------------------------------
	// チェックサム計算
	//-------------------------------------------------------
	Cmd_mesg[COM_CHKSUM_ID] = '$';
 8003fca:	4b19      	ldr	r3, [pc, #100]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003fcc:	2224      	movs	r2, #36	; 0x24
 8003fce:	769a      	strb	r2, [r3, #26]
	Cmd_mesg[COM_CHKSUM] = Get_command_chksum(COM_COUNTER_L, COM_CHKSUM_ID, Cmd_mesg);
 8003fd0:	4a17      	ldr	r2, [pc, #92]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003fd2:	211a      	movs	r1, #26
 8003fd4:	2006      	movs	r0, #6
 8003fd6:	f7ff ff73 	bl	8003ec0 <Get_command_chksum>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b14      	ldr	r3, [pc, #80]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003fe0:	76da      	strb	r2, [r3, #27]

	//-------------------------------------------------------
	// END Text
	//-------------------------------------------------------
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	e00b      	b.n	8004000 <Send_rx485_cmd_message+0xfc>
			j = COM_END_TXT_00 + i ;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	331c      	adds	r3, #28
 8003fec:	737b      	strb	r3, [r7, #13]
			Cmd_mesg[j] = message_end_text[i];
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	7b7b      	ldrb	r3, [r7, #13]
 8003ff2:	4912      	ldr	r1, [pc, #72]	; (800403c <Send_rx485_cmd_message+0x138>)
 8003ff4:	5c89      	ldrb	r1, [r1, r2]
 8003ff6:	4a0e      	ldr	r2, [pc, #56]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003ff8:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b05      	cmp	r3, #5
 8004004:	d9f0      	bls.n	8003fe8 <Send_rx485_cmd_message+0xe4>
#endif //__COM_LOG_DISPLAY

	//-------------------------------------------------------
	// コマンド送信
	//-------------------------------------------------------
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RS485_TX);
 8004006:	2201      	movs	r2, #1
 8004008:	2120      	movs	r1, #32
 800400a:	480d      	ldr	r0, [pc, #52]	; (8004040 <Send_rx485_cmd_message+0x13c>)
 800400c:	f008 f98a 	bl	800c324 <HAL_GPIO_WritePin>
	status = Send_rs485((uint8_t *)Cmd_mesg, COM_TABLE_MAX );
 8004010:	2122      	movs	r1, #34	; 0x22
 8004012:	4807      	ldr	r0, [pc, #28]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8004014:	f000 f848 	bl	80040a8 <Send_rs485>
 8004018:	4603      	mov	r3, r0
 800401a:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RS485_RX);
 800401c:	2200      	movs	r2, #0
 800401e:	2120      	movs	r1, #32
 8004020:	4807      	ldr	r0, [pc, #28]	; (8004040 <Send_rx485_cmd_message+0x13c>)
 8004022:	f008 f97f 	bl	800c324 <HAL_GPIO_WritePin>


	return status;
 8004026:	7bbb      	ldrb	r3, [r7, #14]

}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20001e98 	.word	0x20001e98
 8004034:	0801a5c8 	.word	0x0801a5c8
 8004038:	20001ee0 	.word	0x20001ee0
 800403c:	0801a5d0 	.word	0x0801a5d0
 8004040:	40020000 	.word	0x40020000

08004044 <Get_huart>:
//==============================================================================
//
//==============================================================================

UART_HandleTypeDef * Get_huart(SK_UART sel)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
	return UartList[sel].huart;
 800404e:	79fa      	ldrb	r2, [r7, #7]
 8004050:	4906      	ldr	r1, [pc, #24]	; (800406c <Get_huart+0x28>)
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	440b      	add	r3, r1
 800405c:	330c      	adds	r3, #12
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	0801a5d8 	.word	0x0801a5d8

08004070 <Get_uart_port>:
//==============================================================================
//
//==============================================================================

SK_UART	Get_uart_port(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	SK_UART	rtn;

	if( UartList[0].huart == huart){
 8004078:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <Get_uart_port+0x30>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4293      	cmp	r3, r2
 800407e:	d102      	bne.n	8004086 <Get_uart_port+0x16>
		rtn = SK_UART1_RS485 ;
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	e005      	b.n	8004092 <Get_uart_port+0x22>
	}
	else if( UartList[1].huart == huart){
 8004086:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <Get_uart_port+0x34>)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <Get_uart_port+0x22>
		rtn = SK_UART2_DEBUG;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
	}

	return rtn;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20002308 	.word	0x20002308
 80040a4:	2000234c 	.word	0x2000234c

080040a8 <Send_rs485>:
//==============================================================================
//
//==============================================================================
RETURN_STATUS Send_rs485(uint8_t *pData, uint16_t Size)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
	RETURN_STATUS status = RET_TRUE;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef s;

	//SKprintf("Send_rs485() size=%d\r\n",Size);
	s= HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, pData, Size, HAL_MAX_DELAY);
 80040b8:	480f      	ldr	r0, [pc, #60]	; (80040f8 <Send_rs485+0x50>)
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	f00c fc18 	bl	80108f6 <HAL_UART_Transmit>
 80040c6:	4603      	mov	r3, r0
 80040c8:	73bb      	strb	r3, [r7, #14]

	switch(s){
 80040ca:	7bbb      	ldrb	r3, [r7, #14]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00d      	beq.n	80040ec <Send_rs485+0x44>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	db0c      	blt.n	80040ee <Send_rs485+0x46>
 80040d4:	3b01      	subs	r3, #1
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d809      	bhi.n	80040ee <Send_rs485+0x46>
	case HAL_OK:
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		status = RET_FALSE;
 80040da:	2300      	movs	r3, #0
 80040dc:	73fb      	strb	r3, [r7, #15]
		SKprintf("ERROR %s RS485 TRANSMIT = %d\r\n",UartList[SK_UART1_RS485].name, s);
 80040de:	7bbb      	ldrb	r3, [r7, #14]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4906      	ldr	r1, [pc, #24]	; (80040fc <Send_rs485+0x54>)
 80040e4:	4806      	ldr	r0, [pc, #24]	; (8004100 <Send_rs485+0x58>)
 80040e6:	f000 f8a5 	bl	8004234 <SKprintf>
		break;
 80040ea:	e000      	b.n	80040ee <Send_rs485+0x46>
		break;
 80040ec:	bf00      	nop
	}

	return status;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]

}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20002308 	.word	0x20002308
 80040fc:	0801a5d9 	.word	0x0801a5d9
 8004100:	08018bd4 	.word	0x08018bd4

08004104 <uart_Data_init>:

//==============================================================================
//
//==============================================================================
void uart_Data_init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
	SKprintf("uart_Data_init()\r\n");
 8004108:	4811      	ldr	r0, [pc, #68]	; (8004150 <uart_Data_init+0x4c>)
 800410a:	f000 f893 	bl	8004234 <SKprintf>
	Set_logInfo2("uart_Data_init()");
 800410e:	4811      	ldr	r0, [pc, #68]	; (8004154 <uart_Data_init+0x50>)
 8004110:	f7fe f95a 	bl	80023c8 <Set_logInfo2>

	uart[SK_UART1_RS485].rcv_wpt = 0;
 8004114:	4b10      	ldr	r3, [pc, #64]	; (8004158 <uart_Data_init+0x54>)
 8004116:	2200      	movs	r2, #0
 8004118:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	uart[SK_UART1_RS485].rcv_rpt = 0;
 800411c:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <uart_Data_init+0x54>)
 800411e:	2200      	movs	r2, #0
 8004120:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	uart[SK_UART1_RS485].rcvnum = 0;
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <uart_Data_init+0x54>)
 8004126:	2200      	movs	r2, #0
 8004128:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	uart[SK_UART2_DEBUG].rcv_wpt = 0;
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <uart_Data_init+0x54>)
 800412e:	2200      	movs	r2, #0
 8004130:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	uart[SK_UART2_DEBUG].rcv_rpt = 0;
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <uart_Data_init+0x54>)
 8004136:	2200      	movs	r2, #0
 8004138:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	uart[SK_UART2_DEBUG].rcvnum = 0;
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <uart_Data_init+0x54>)
 800413e:	2200      	movs	r2, #0
 8004140:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

	esc.ptr = 0;
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <uart_Data_init+0x58>)
 8004146:	2200      	movs	r2, #0
 8004148:	729a      	strb	r2, [r3, #10]
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	08018bf4 	.word	0x08018bf4
 8004154:	08018c08 	.word	0x08018c08
 8004158:	20001d78 	.word	0x20001d78
 800415c:	20001ee4 	.word	0x20001ee4

08004160 <uart_Rcv_init>:
//	huart2: デバックモニター用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
void uart_Rcv_init(SK_UART sel)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef s;

	//SKprintf("uart_Rcv_init(%d)\r\n",sel);
	//Set_logInfo("uart_Rcv_init()");
	s= HAL_UART_Receive_IT(Get_huart(sel), &uart[sel].rcv_dt[0], 1);
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff ff69 	bl	8004044 <Get_huart>
 8004172:	79fa      	ldrb	r2, [r7, #7]
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <uart_Rcv_init+0x48>)
 800417e:	4413      	add	r3, r2
 8004180:	2201      	movs	r2, #1
 8004182:	4619      	mov	r1, r3
 8004184:	f00c fc49 	bl	8010a1a <HAL_UART_Receive_IT>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]

	switch(s){
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <uart_Rcv_init+0x3e>
 8004192:	2b00      	cmp	r3, #0
 8004194:	db04      	blt.n	80041a0 <uart_Rcv_init+0x40>
 8004196:	3b01      	subs	r3, #1
 8004198:	2b02      	cmp	r3, #2
 800419a:	d801      	bhi.n	80041a0 <uart_Rcv_init+0x40>
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		//SKprintf("ERROR %s RECIVE = %d\r\n",UartList[sel].name, s);
		break;
 800419c:	e000      	b.n	80041a0 <uart_Rcv_init+0x40>
		break;
 800419e:	bf00      	nop
	}
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20001d78 	.word	0x20001d78

080041ac <SKprintf_uart1>:
//	huart1： RS485用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
int	SKprintf_uart1 (const char *string, ...)
{
 80041ac:	b40f      	push	{r0, r1, r2, r3}
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );
 80041b4:	bf00      	nop
 80041b6:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <SKprintf_uart1+0x7c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1fb      	bne.n	80041b6 <SKprintf_uart1+0xa>

//	buffer = (char *)pvPortMalloc(CHARA_MAX);
	buffer = Skprintf_buf;
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <SKprintf_uart1+0x80>)
 80041c0:	60bb      	str	r3, [r7, #8]


	if( buffer != NULL ){
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d023      	beq.n	8004210 <SKprintf_uart1+0x64>

		Sem_Printf = 1;
 80041c8:	4b17      	ldr	r3, [pc, #92]	; (8004228 <SKprintf_uart1+0x7c>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
 80041ce:	f107 031c 	add.w	r3, r7, #28
 80041d2:	607b      	str	r3, [r7, #4]
		vsprintf(buffer, string, ap);
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	68b8      	ldr	r0, [r7, #8]
 80041da:	f011 fa65 	bl	80156a8 <vsiprintf>
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e008      	b.n	80041f6 <SKprintf_uart1+0x4a>
			if(buffer[i] == '\0'){
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4413      	add	r3, r2
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d006      	beq.n	80041fe <SKprintf_uart1+0x52>
		for(i=0; i<CHARA_MAX; i++){
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3301      	adds	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2bff      	cmp	r3, #255	; 0xff
 80041fa:	ddf3      	ble.n	80041e4 <SKprintf_uart1+0x38>
 80041fc:	e000      	b.n	8004200 <SKprintf_uart1+0x54>
				break;
 80041fe:	bf00      	nop
			}
		}
		HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, buffer, i, HAL_MAX_DELAY);
 8004200:	480b      	ldr	r0, [pc, #44]	; (8004230 <SKprintf_uart1+0x84>)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	b29a      	uxth	r2, r3
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	f00c fb73 	bl	80108f6 <HAL_UART_Transmit>

	}

	//vPortFree(buffer);

	Sem_Printf = 0;
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <SKprintf_uart1+0x7c>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]

}
 8004216:	bf00      	nop
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004222:	b004      	add	sp, #16
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20001efc 	.word	0x20001efc
 800422c:	20001f10 	.word	0x20001f10
 8004230:	20002308 	.word	0x20002308

08004234 <SKprintf>:
// 総和を求める関数（値は int 型を想定）
// n は、渡す引数の数、それ以降は計算する値です。
//==============================================================================

int	SKprintf (const char *string, ...)
{
 8004234:	b40f      	push	{r0, r1, r2, r3}
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );
 800423c:	bf00      	nop
 800423e:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <SKprintf+0x7c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1fb      	bne.n	800423e <SKprintf+0xa>

//	buffer = (char *)pvPortMalloc(CHARA_MAX);
	buffer = Skprintf_buf;
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <SKprintf+0x80>)
 8004248:	60bb      	str	r3, [r7, #8]

	if( buffer != NULL ){
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d023      	beq.n	8004298 <SKprintf+0x64>

		Sem_Printf = 1;
 8004250:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <SKprintf+0x7c>)
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
 8004256:	f107 031c 	add.w	r3, r7, #28
 800425a:	607b      	str	r3, [r7, #4]
		vsprintf(buffer, string, ap);
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	69b9      	ldr	r1, [r7, #24]
 8004260:	68b8      	ldr	r0, [r7, #8]
 8004262:	f011 fa21 	bl	80156a8 <vsiprintf>
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e008      	b.n	800427e <SKprintf+0x4a>
			if(buffer[i] == '\0'){
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	4413      	add	r3, r2
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d006      	beq.n	8004286 <SKprintf+0x52>
		for(i=0; i<CHARA_MAX; i++){
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2bff      	cmp	r3, #255	; 0xff
 8004282:	ddf3      	ble.n	800426c <SKprintf+0x38>
 8004284:	e000      	b.n	8004288 <SKprintf+0x54>
				break;
 8004286:	bf00      	nop
			}
		}
		HAL_UART_Transmit(UartList[SK_UART2_DEBUG].huart, buffer, i, HAL_MAX_DELAY);
 8004288:	480b      	ldr	r0, [pc, #44]	; (80042b8 <SKprintf+0x84>)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	b29a      	uxth	r2, r3
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	f00c fb2f 	bl	80108f6 <HAL_UART_Transmit>

	}

//	vPortFree(buffer);

	Sem_Printf = 0;
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <SKprintf+0x7c>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

}
 800429e:	bf00      	nop
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042aa:	b004      	add	sp, #16
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20001efc 	.word	0x20001efc
 80042b4:	20001f10 	.word	0x20001f10
 80042b8:	2000234c 	.word	0x2000234c

080042bc <getch>:
//==============================================================================
//
//
//==============================================================================
int getch(SK_UART id)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
	int rtn = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]

	if( uart[SK_UART2_DEBUG].rcvnum  > 0 ){
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <getch+0x2c>)
 80042cc:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <getch+0x20>

		//SKprintf("DATA RECIVED \r\n");
		rtn = Get_rcv_data(SK_UART2_DEBUG);
 80042d4:	2001      	movs	r0, #1
 80042d6:	f7fe ffc7 	bl	8003268 <Get_rcv_data>
 80042da:	60f8      	str	r0, [r7, #12]
	}

	return rtn;
 80042dc:	68fb      	ldr	r3, [r7, #12]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20001d78 	.word	0x20001d78

080042ec <vl53_init>:
//==============================================================================
//
//==============================================================================

void vl53_init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0

	VL53L0X_Error	Status = VL53L0X_ERROR_NONE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	71fb      	strb	r3, [r7, #7]


	Dev->I2cHandle = &hi2c1;
 80042f6:	4b87      	ldr	r3, [pc, #540]	; (8004514 <vl53_init+0x228>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a87      	ldr	r2, [pc, #540]	; (8004518 <vl53_init+0x22c>)
 80042fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = 0x52;
 8004300:	4b84      	ldr	r3, [pc, #528]	; (8004514 <vl53_init+0x228>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2252      	movs	r2, #82	; 0x52
 8004306:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	//
	// VL53L0X init for Single Measurement
	//

	while(1){
		Status = VL53L0X_WaitDeviceBooted( Dev );
 800430a:	4b82      	ldr	r3, [pc, #520]	; (8004514 <vl53_init+0x228>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f001 fc66 	bl	8005be0 <VL53L0X_WaitDeviceBooted>
 8004314:	4603      	mov	r3, r0
 8004316:	71fb      	strb	r3, [r7, #7]

		if(Status != VL53L0X_ERROR_NONE){
 8004318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d006      	beq.n	800432e <vl53_init+0x42>
			SKprintf("Error :VL53L0X_WaitDeviceBooted() %d\r\n", Status);
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	4619      	mov	r1, r3
 8004326:	487d      	ldr	r0, [pc, #500]	; (800451c <vl53_init+0x230>)
 8004328:	f7ff ff84 	bl	8004234 <SKprintf>
			break;
 800432c:	e0ed      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_DataInit( Dev );
 800432e:	4b79      	ldr	r3, [pc, #484]	; (8004514 <vl53_init+0x228>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f001 f92a 	bl	800558c <VL53L0X_DataInit>
 8004338:	4603      	mov	r3, r0
 800433a:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 800433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d006      	beq.n	8004352 <vl53_init+0x66>
			SKprintf("Error :VL53L0X_DataInit() %d\r\n", Status);
 8004344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004348:	4619      	mov	r1, r3
 800434a:	4875      	ldr	r0, [pc, #468]	; (8004520 <vl53_init+0x234>)
 800434c:	f7ff ff72 	bl	8004234 <SKprintf>
			break;
 8004350:	e0db      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_StaticInit( Dev );
 8004352:	4b70      	ldr	r3, [pc, #448]	; (8004514 <vl53_init+0x228>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f001 fac0 	bl	80058dc <VL53L0X_StaticInit>
 800435c:	4603      	mov	r3, r0
 800435e:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 8004360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d006      	beq.n	8004376 <vl53_init+0x8a>
			SKprintf("Error :VL53L0X_StaticInit() %d\r\n", Status);
 8004368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436c:	4619      	mov	r1, r3
 800436e:	486d      	ldr	r0, [pc, #436]	; (8004524 <vl53_init+0x238>)
 8004370:	f7ff ff60 	bl	8004234 <SKprintf>
			break;
 8004374:	e0c9      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8004376:	4b67      	ldr	r3, [pc, #412]	; (8004514 <vl53_init+0x228>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a6b      	ldr	r2, [pc, #428]	; (8004528 <vl53_init+0x23c>)
 800437c:	496b      	ldr	r1, [pc, #428]	; (800452c <vl53_init+0x240>)
 800437e:	4618      	mov	r0, r3
 8004380:	f002 f9c4 	bl	800670c <VL53L0X_PerformRefCalibration>
 8004384:	4603      	mov	r3, r0
 8004386:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 8004388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d006      	beq.n	800439e <vl53_init+0xb2>
			SKprintf("Error :VL53L0X_PerformRefCalibration() %d\r\n", Status);
 8004390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004394:	4619      	mov	r1, r3
 8004396:	4866      	ldr	r0, [pc, #408]	; (8004530 <vl53_init+0x244>)
 8004398:	f7ff ff4c 	bl	8004234 <SKprintf>
			break;
 800439c:	e0b5      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 800439e:	4b5d      	ldr	r3, [pc, #372]	; (8004514 <vl53_init+0x228>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a64      	ldr	r2, [pc, #400]	; (8004534 <vl53_init+0x248>)
 80043a4:	4964      	ldr	r1, [pc, #400]	; (8004538 <vl53_init+0x24c>)
 80043a6:	4618      	mov	r0, r3
 80043a8:	f002 feef 	bl	800718a <VL53L0X_PerformRefSpadManagement>
 80043ac:	4603      	mov	r3, r0
 80043ae:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 80043b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d006      	beq.n	80043c6 <vl53_init+0xda>
			SKprintf("Error :VL53L0X_PerformRefSpadManagement() %d\r\n", Status);
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	4619      	mov	r1, r3
 80043be:	485f      	ldr	r0, [pc, #380]	; (800453c <vl53_init+0x250>)
 80043c0:	f7ff ff38 	bl	8004234 <SKprintf>
			break;
 80043c4:	e0a1      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80043c6:	4b53      	ldr	r3, [pc, #332]	; (8004514 <vl53_init+0x228>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fca5 	bl	8005d1c <VL53L0X_SetDeviceMode>
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]

		}

		if(Status != VL53L0X_ERROR_NONE){
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <vl53_init+0x100>
			SKprintf("Error :VL53L0X_SetDeviceMode() %d\r\n", Status);
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	4619      	mov	r1, r3
 80043e4:	4856      	ldr	r0, [pc, #344]	; (8004540 <vl53_init+0x254>)
 80043e6:	f7ff ff25 	bl	8004234 <SKprintf>
			break;
 80043ea:	e08e      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			// Enable/Disable Sigma and Signal check
			Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80043ec:	4b49      	ldr	r3, [pc, #292]	; (8004514 <vl53_init+0x228>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2201      	movs	r2, #1
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 ff0d 	bl	8006214 <VL53L0X_SetLimitCheckEnable>
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 80043fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d006      	beq.n	8004414 <vl53_init+0x128>
			SKprintf("Error :VL53L0X_SetLimitCheckEnable() %d\r\n", Status);
 8004406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440a:	4619      	mov	r1, r3
 800440c:	484d      	ldr	r0, [pc, #308]	; (8004544 <vl53_init+0x258>)
 800440e:	f7ff ff11 	bl	8004234 <SKprintf>
			break;
 8004412:	e07a      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8004414:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <vl53_init+0x228>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f001 fef9 	bl	8006214 <VL53L0X_SetLimitCheckEnable>
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d006      	beq.n	800443c <vl53_init+0x150>
			SKprintf("Error :VL53L0X_SetLimitCheckEnable() %d\r\n", Status);
 800442e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004432:	4619      	mov	r1, r3
 8004434:	4843      	ldr	r0, [pc, #268]	; (8004544 <vl53_init+0x258>)
 8004436:	f7ff fefd 	bl	8004234 <SKprintf>
			break;
 800443a:	e066      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <vl53_init+0x228>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f641 1299 	movw	r2, #6553	; 0x1999
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f001 ff94 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 800444c:	4603      	mov	r3, r0
 800444e:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <vl53_init+0x17a>
			SKprintf("Error :VL53L0X_SetLimitCheckValue() %d\r\n", Status);
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	4619      	mov	r1, r3
 800445e:	483a      	ldr	r0, [pc, #232]	; (8004548 <vl53_init+0x25c>)
 8004460:	f7ff fee8 	bl	8004234 <SKprintf>
			break;
 8004464:	e051      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8004466:	4b2b      	ldr	r3, [pc, #172]	; (8004514 <vl53_init+0x228>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f001 ff7f 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d006      	beq.n	8004490 <vl53_init+0x1a4>
			SKprintf("Error :VL53L0X_SetLimitCheckValue() %d\r\n", Status);
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	4619      	mov	r1, r3
 8004488:	482f      	ldr	r0, [pc, #188]	; (8004548 <vl53_init+0x25c>)
 800448a:	f7ff fed3 	bl	8004234 <SKprintf>
			break;
 800448e:	e03c      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8004490:	4b20      	ldr	r3, [pc, #128]	; (8004514 <vl53_init+0x228>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8004498:	4618      	mov	r0, r3
 800449a:	f001 fc9d 	bl	8005dd8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d006      	beq.n	80044b8 <vl53_init+0x1cc>
			SKprintf("Error :VL53L0X_SetMeasurementTimingBudgetMicroSeconds() %d\r\n", Status);
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	4619      	mov	r1, r3
 80044b0:	4826      	ldr	r0, [pc, #152]	; (800454c <vl53_init+0x260>)
 80044b2:	f7ff febf 	bl	8004234 <SKprintf>
			break;
 80044b6:	e028      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80044b8:	4b16      	ldr	r3, [pc, #88]	; (8004514 <vl53_init+0x228>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2212      	movs	r2, #18
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fcaf 	bl	8005e24 <VL53L0X_SetVcselPulsePeriod>
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <vl53_init+0x1f4>
			SKprintf("Error :VL53L0X_SetVcselPulsePeriod() %d\r\n", Status);
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	4619      	mov	r1, r3
 80044d8:	481d      	ldr	r0, [pc, #116]	; (8004550 <vl53_init+0x264>)
 80044da:	f7ff feab 	bl	8004234 <SKprintf>
			break;
 80044de:	e014      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <vl53_init+0x228>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	220e      	movs	r2, #14
 80044e6:	2101      	movs	r1, #1
 80044e8:	4618      	mov	r0, r3
 80044ea:	f001 fc9b 	bl	8005e24 <VL53L0X_SetVcselPulsePeriod>
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <vl53_init+0x21c>
			SKprintf("Error :VL53L0X_SetVcselPulsePeriod() %d\r\n", Status);
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	4619      	mov	r1, r3
 8004500:	4813      	ldr	r0, [pc, #76]	; (8004550 <vl53_init+0x264>)
 8004502:	f7ff fe97 	bl	8004234 <SKprintf>
			break;
 8004506:	e000      	b.n	800450a <vl53_init+0x21e>
		}

		break;
 8004508:	bf00      	nop
	}
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000050 	.word	0x20000050
 8004518:	20002204 	.word	0x20002204
 800451c:	08018c1c 	.word	0x08018c1c
 8004520:	08018c44 	.word	0x08018c44
 8004524:	08018c64 	.word	0x08018c64
 8004528:	20002016 	.word	0x20002016
 800452c:	20002015 	.word	0x20002015
 8004530:	08018c88 	.word	0x08018c88
 8004534:	20002014 	.word	0x20002014
 8004538:	20002010 	.word	0x20002010
 800453c:	08018cb4 	.word	0x08018cb4
 8004540:	08018ce4 	.word	0x08018ce4
 8004544:	08018d08 	.word	0x08018d08
 8004548:	08018d34 	.word	0x08018d34
 800454c:	08018d60 	.word	0x08018d60
 8004550:	08018da0 	.word	0x08018da0

08004554 <print_pal_error>:
//==============================================================================
//
//==============================================================================
void print_pal_error(VL53L0X_Error Status){
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
    char buf[VL53L0X_MAX_STRING_LENGTH];

    if( Status != 0 ){
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00f      	beq.n	8004586 <print_pal_error+0x32>
    VL53L0X_GetPalErrorString(Status, buf);
 8004566:	f107 0208 	add.w	r2, r7, #8
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 ffe2 	bl	800553a <VL53L0X_GetPalErrorString>
    SKprintf("API Status: %i : %s\r\n", Status, buf);
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	f107 0208 	add.w	r2, r7, #8
 800457e:	4619      	mov	r1, r3
 8004580:	4803      	ldr	r0, [pc, #12]	; (8004590 <print_pal_error+0x3c>)
 8004582:	f7ff fe57 	bl	8004234 <SKprintf>

    }
}
 8004586:	bf00      	nop
 8004588:	3728      	adds	r7, #40	; 0x28
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	08018dcc 	.word	0x08018dcc

08004594 <vl53_main>:
//==============================================================================
//
//==============================================================================
void vl53_main(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
vl53l0x_Racing_test(RASING_MODE_SINGLE_HS);
vl53l0x_Racing_test(RASING_MODE_SINGLE_LR);
vl53l0x_Racing_test(RASING_MODE_CONTINUE);
#endif

}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <vl53_mesure_new_proc>:
//==============================================================================
//
//==============================================================================
void vl53_mesure_new_proc(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	71bb      	strb	r3, [r7, #6]
	FixPoint1616_t LimitCheckCurrent;
	uint8_t	i;

	for(i=0; i<10; i++){
 80045ae:	2300      	movs	r3, #0
 80045b0:	71fb      	strb	r3, [r7, #7]
 80045b2:	e03c      	b.n	800462e <vl53_mesure_new_proc+0x8a>
		Set_logInfo2("VL53 START");
 80045b4:	4822      	ldr	r0, [pc, #136]	; (8004640 <vl53_mesure_new_proc+0x9c>)
 80045b6:	f7fd ff07 	bl	80023c8 <Set_logInfo2>
		Status = VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80045ba:	4b22      	ldr	r3, [pc, #136]	; (8004644 <vl53_mesure_new_proc+0xa0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4922      	ldr	r1, [pc, #136]	; (8004648 <vl53_mesure_new_proc+0xa4>)
 80045c0:	4618      	mov	r0, r3
 80045c2:	f002 fb8d 	bl	8006ce0 <VL53L0X_PerformSingleRangingMeasurement>
 80045c6:	4603      	mov	r3, r0
 80045c8:	71bb      	strb	r3, [r7, #6]
		Set_logInfo2("VL53 END");
 80045ca:	4820      	ldr	r0, [pc, #128]	; (800464c <vl53_mesure_new_proc+0xa8>)
 80045cc:	f7fd fefc 	bl	80023c8 <Set_logInfo2>

		if(RangingData.RangeStatus == 0){
 80045d0:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <vl53_mesure_new_proc+0xa4>)
 80045d2:	7e1b      	ldrb	r3, [r3, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <vl53_mesure_new_proc+0x40>
			SKprintf("Measured distance: %i ", RangingData.RangeMilliMeter);
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <vl53_mesure_new_proc+0xa4>)
 80045da:	891b      	ldrh	r3, [r3, #8]
 80045dc:	4619      	mov	r1, r3
 80045de:	481c      	ldr	r0, [pc, #112]	; (8004650 <vl53_mesure_new_proc+0xac>)
 80045e0:	f7ff fe28 	bl	8004234 <SKprintf>
		}

		print_pal_error(Status);
 80045e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ffb3 	bl	8004554 <print_pal_error>
		print_range_status(&RangingData);
 80045ee:	4816      	ldr	r0, [pc, #88]	; (8004648 <vl53_mesure_new_proc+0xa4>)
 80045f0:	f000 f874 	bl	80046dc <print_range_status>
		VL53L0X_GetLimitCheckCurrent(Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, &LimitCheckCurrent);
 80045f4:	4b13      	ldr	r3, [pc, #76]	; (8004644 <vl53_mesure_new_proc+0xa0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	463a      	mov	r2, r7
 80045fa:	2103      	movs	r1, #3
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 ffa9 	bl	8006554 <VL53L0X_GetLimitCheckCurrent>
		SKprintf(",RANGE IGNORE THRESHOLD: %f\r\n", (float)LimitCheckCurrent/65536.0);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460c:	ee17 0a90 	vmov	r0, s15
 8004610:	f7fb ffb2 	bl	8000578 <__aeabi_f2d>
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <vl53_mesure_new_proc+0xb0>)
 800461a:	f7fc f92f 	bl	800087c <__aeabi_ddiv>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	480d      	ldr	r0, [pc, #52]	; (8004658 <vl53_mesure_new_proc+0xb4>)
 8004624:	f7ff fe06 	bl	8004234 <SKprintf>
	for(i=0; i<10; i++){
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	3301      	adds	r3, #1
 800462c:	71fb      	strb	r3, [r7, #7]
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	2b09      	cmp	r3, #9
 8004632:	d9bf      	bls.n	80045b4 <vl53_mesure_new_proc+0x10>
	}
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	08018de4 	.word	0x08018de4
 8004644:	20000050 	.word	0x20000050
 8004648:	20002018 	.word	0x20002018
 800464c:	08018df0 	.word	0x08018df0
 8004650:	08018dfc 	.word	0x08018dfc
 8004654:	40f00000 	.word	0x40f00000
 8004658:	08018e14 	.word	0x08018e14

0800465c <vl53_LogDisp>:
//==============================================================================
//
//==============================================================================
void vl53_LogDisp(char *string,int8_t status)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
#ifdef ___VL53_LOG_DISP
    SKprintf("%s ++++++++++++++++++++++++++++++ STATUS = %d\r\n",string, status);
#endif
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <WaitStopCompleted>:

//==============================================================================
//
//==============================================================================
VL53L0X_Error WaitStopCompleted(VL53L0X_DEV Dev) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800467c:	2300      	movs	r3, #0
 800467e:	75fb      	strb	r3, [r7, #23]
    uint32_t StopCompleted=0;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
    uint32_t LoopNb;

    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 8004684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d120      	bne.n	80046ce <WaitStopCompleted+0x5a>
        LoopNb = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
        do {
            Status = VL53L0X_GetStopCompletedStatus(Dev, &StopCompleted);
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f002 fcac 	bl	8006ff4 <VL53L0X_GetStopCompletedStatus>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]
            if ((StopCompleted == 0x00) || Status != VL53L0X_ERROR_NONE) {
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <WaitStopCompleted+0x4e>
 80046a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <WaitStopCompleted+0x4e>
                break;
            }
            LoopNb = LoopNb + 1;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	3301      	adds	r3, #1
 80046b2:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f006 fbe5 	bl	800ae84 <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80046c0:	d3e6      	bcc.n	8004690 <WaitStopCompleted+0x1c>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80046c8:	d301      	bcc.n	80046ce <WaitStopCompleted+0x5a>
            Status = VL53L0X_ERROR_TIME_OUT;
 80046ca:	23f9      	movs	r3, #249	; 0xf9
 80046cc:	75fb      	strb	r3, [r7, #23]
        }

    }

    return Status;
 80046ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <print_range_status>:
//==============================================================================
//
//==============================================================================

void print_range_status(VL53L0X_RangingMeasurementData_t* pRangingMeasurementData)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	; 0x30
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

    /*
     * New Range Status: data is valid when pRangingMeasurementData->RangeStatus = 0
     */

    RangeStatus = pRangingMeasurementData->RangeStatus;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7e1b      	ldrb	r3, [r3, #24]
 80046e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    VL53L0X_GetRangeStatusString(RangeStatus, buf);
 80046ec:	f107 020c 	add.w	r2, r7, #12
 80046f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 ff0a 	bl	8005510 <VL53L0X_GetRangeStatusString>
    SKprintf(" Range Status: %i : %s ", RangeStatus, buf);
 80046fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004700:	f107 020c 	add.w	r2, r7, #12
 8004704:	4619      	mov	r1, r3
 8004706:	4803      	ldr	r0, [pc, #12]	; (8004714 <print_range_status+0x38>)
 8004708:	f7ff fd94 	bl	8004234 <SKprintf>

}
 800470c:	bf00      	nop
 800470e:	3730      	adds	r7, #48	; 0x30
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	08018e34 	.word	0x08018e34

08004718 <WaitMeasurementDataReady>:

//==============================================================================
//
//==============================================================================

VL53L0X_Error WaitMeasurementDataReady(VL53L0X_DEV Dev) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
    uint8_t NewDatReady=0;
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]
    uint32_t LoopNb;

    vl53_LogDisp("WaitMeasurementDataReady() START", Status);
 8004728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800472c:	4619      	mov	r1, r3
 800472e:	481a      	ldr	r0, [pc, #104]	; (8004798 <WaitMeasurementDataReady+0x80>)
 8004730:	f7ff ff94 	bl	800465c <vl53_LogDisp>
    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 8004734:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d120      	bne.n	800477e <WaitMeasurementDataReady+0x66>
        LoopNb = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
             * パラメーター：
             * デバイスハンドル
             * 測定データ準備完了へのポインタ。
             *   0=データの準備ができていない、1=データの準備ができている
             */
            Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDatReady);
 8004740:	f107 030f 	add.w	r3, r7, #15
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f002 f966 	bl	8006a18 <VL53L0X_GetMeasurementDataReady>
 800474c:	4603      	mov	r3, r0
 800474e:	75fb      	strb	r3, [r7, #23]
            if ((NewDatReady == 0x01) || Status != VL53L0X_ERROR_NONE) {
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d00d      	beq.n	8004772 <WaitMeasurementDataReady+0x5a>
 8004756:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <WaitMeasurementDataReady+0x5a>
                break;
            }
            LoopNb = LoopNb + 1;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	3301      	adds	r3, #1
 8004762:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f006 fb8d 	bl	800ae84 <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004770:	d3e6      	bcc.n	8004740 <WaitMeasurementDataReady+0x28>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004778:	d301      	bcc.n	800477e <WaitMeasurementDataReady+0x66>
            Status = VL53L0X_ERROR_TIME_OUT;
 800477a:	23f9      	movs	r3, #249	; 0xf9
 800477c:	75fb      	strb	r3, [r7, #23]
        }
    }

    vl53_LogDisp("WaitMeasurementDataReady() END", Status);
 800477e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004782:	4619      	mov	r1, r3
 8004784:	4805      	ldr	r0, [pc, #20]	; (800479c <WaitMeasurementDataReady+0x84>)
 8004786:	f7ff ff69 	bl	800465c <vl53_LogDisp>
    return Status;
 800478a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	08018e4c 	.word	0x08018e4c
 800479c:	08018e70 	.word	0x08018e70

080047a0 <SK_RangingTest>:
//       3 SINGLE RACING LR
//       4 CONTINUE RASING
//
//==============================================================================
VL53L0X_Error SK_RangingTest(VL53L0X_Dev_t *pMyDevice, RASING_MODE sel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b094      	sub	sp, #80	; 0x50
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    VL53L0X_RangingMeasurementData_t    RangingMeasurementData;
    VL53L0X_RangingMeasurementData_t   *pRangingMeasurementData    = &RangingMeasurementData;
 80047b2:	f107 0318 	add.w	r3, r7, #24
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
     * <VL53L0X_StaticInit()>
     * 基本的なデバイスの初期化 (最終的にはパッチのロード) を実行します。
     * この関数は、VL53L0X_State を VL53L0X_STATE_WAIT_STATICINIT から VL53L0X_STATE_IDLE に変更します。
     * この段階では、すべてのデフォルト設定が適用されます。
     */
    if(Status == VL53L0X_ERROR_NONE)
 80047b8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <SK_RangingTest+0x3c>
    {
        SKprintf ("Call of VL53L0X_StaticInit\r\n");
 80047c0:	48b4      	ldr	r0, [pc, #720]	; (8004a94 <SK_RangingTest+0x2f4>)
 80047c2:	f7ff fd37 	bl	8004234 <SKprintf>
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f001 f888 	bl	80058dc <VL53L0X_StaticInit>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        print_pal_error(Status);
 80047d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff febc 	bl	8004554 <print_pal_error>
    }


    if(Status == VL53L0X_ERROR_NONE)
 80047dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d112      	bne.n	800480a <SK_RangingTest+0x6a>
    {
        SKprintf ("Call of VL53L0X_PerformRefCalibration\r\n");
 80047e4:	48ac      	ldr	r0, [pc, #688]	; (8004a98 <SK_RangingTest+0x2f8>)
 80047e6:	f7ff fd25 	bl	8004234 <SKprintf>
        Status = VL53L0X_PerformRefCalibration(pMyDevice, &VhvSettings, &PhaseCal); // Device Initialization
 80047ea:	f107 020d 	add.w	r2, r7, #13
 80047ee:	f107 030e 	add.w	r3, r7, #14
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f001 ff89 	bl	800670c <VL53L0X_PerformRefCalibration>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        print_pal_error(Status);
 8004800:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fea5 	bl	8004554 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 800480a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800480e:	2b00      	cmp	r3, #0
 8004810:	d112      	bne.n	8004838 <SK_RangingTest+0x98>
    {
        SKprintf ("Call of VL53L0X_PerformRefSpadManagement\r\n");
 8004812:	48a2      	ldr	r0, [pc, #648]	; (8004a9c <SK_RangingTest+0x2fc>)
 8004814:	f7ff fd0e 	bl	8004234 <SKprintf>
        Status = VL53L0X_PerformRefSpadManagement(pMyDevice, &refSpadCount, &isApertureSpads); // Device Initialization
 8004818:	f107 020f 	add.w	r2, r7, #15
 800481c:	f107 0310 	add.w	r3, r7, #16
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f002 fcb1 	bl	800718a <VL53L0X_PerformRefSpadManagement>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        print_pal_error(Status);
 800482e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fe8e 	bl	8004554 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8004838:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800483c:	2b00      	cmp	r3, #0
 800483e:	d119      	bne.n	8004874 <SK_RangingTest+0xd4>
    {
        SKprintf ("Call of VL53L0X_SetDeviceMode\r\n");
 8004840:	4897      	ldr	r0, [pc, #604]	; (8004aa0 <SK_RangingTest+0x300>)
 8004842:	f7ff fcf7 	bl	8004234 <SKprintf>
        if(sel == RASING_MODE_CONTINUE ){
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	2b04      	cmp	r3, #4
 800484a:	d107      	bne.n	800485c <SK_RangingTest+0xbc>
            Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING); // Setup in single ranging mode
 800484c:	2101      	movs	r1, #1
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 fa64 	bl	8005d1c <VL53L0X_SetDeviceMode>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800485a:	e006      	b.n	800486a <SK_RangingTest+0xca>
        }
        else{
            Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800485c:	2100      	movs	r1, #0
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f001 fa5c 	bl	8005d1c <VL53L0X_SetDeviceMode>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }

        print_pal_error(Status);
 800486a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fe70 	bl	8004554 <print_pal_error>
            //Status = VL53L0X_SetSequenceStepEnable(pMyDevice,VL53L0X_SEQUENCESTEP_DSS, 1);
        }
    }


    if(sel == RASING_MODE_CONTINUE ){
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2b04      	cmp	r3, #4
 8004878:	f040 8093 	bne.w	80049a2 <SK_RangingTest+0x202>
        if(Status == VL53L0X_ERROR_NONE){
 800487c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10d      	bne.n	80048a0 <SK_RangingTest+0x100>
             * デバイスの測定を開始します。
             * 開始される測定は、VL53L0X_SetParameters() で設定されたデバイスパラメータに依存します。
             * これはノンブロッキング関数です。
             * この関数は、VL53L0X_State を VL53L0X_STATE_IDLE から VL53L0X_STATE_RUNNING に変更します。
             */
            SKprintf ("Call of VL53L0X_StartMeasurement\r\n");
 8004884:	4887      	ldr	r0, [pc, #540]	; (8004aa4 <SK_RangingTest+0x304>)
 8004886:	f7ff fcd5 	bl	8004234 <SKprintf>
            Status = VL53L0X_StartMeasurement(pMyDevice);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f001 ffba 	bl	8006804 <VL53L0X_StartMeasurement>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            print_pal_error(Status);
 8004896:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fe5a 	bl	8004554 <print_pal_error>
        }

        if(Status == VL53L0X_ERROR_NONE){
 80048a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d155      	bne.n	8004954 <SK_RangingTest+0x1b4>
            uint32_t measurement;
            uint32_t no_of_measurements = 32;
 80048a8:	2320      	movs	r3, #32
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38

            uint16_t* pResults = (uint16_t*)malloc(sizeof(uint16_t) * no_of_measurements);
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4618      	mov	r0, r3
 80048b2:	f010 f8e9 	bl	8014a88 <malloc>
 80048b6:	4603      	mov	r3, r0
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34

            for(measurement=0; measurement<no_of_measurements; measurement++){
 80048ba:	2300      	movs	r3, #0
 80048bc:	643b      	str	r3, [r7, #64]	; 0x40
 80048be:	e028      	b.n	8004912 <SK_RangingTest+0x172>

                Status = WaitMeasurementDataReady(pMyDevice);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff29 	bl	8004718 <WaitMeasurementDataReady>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

                if(Status == VL53L0X_ERROR_NONE){
 80048cc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d123      	bne.n	800491c <SK_RangingTest+0x17c>
                     * 警告：
                     * USER はデータを取得する前に VL53L0X_GetNumberOfROIZones() に
                     * 注意する必要があります。 PAL は、測定関数で使用される
                     * 対応するデータ構造に NumberOfROIZones を掛けた値を埋めます。
                     */
                    Status = VL53L0X_GetRangingMeasurementData(pMyDevice, pRangingMeasurementData);
 80048d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f002 f8de 	bl	8006a98 <VL53L0X_GetRangingMeasurementData>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

                    *(pResults + measurement) = pRangingMeasurementData->RangeMilliMeter;
 80048e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048e8:	4413      	add	r3, r2
 80048ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ec:	8912      	ldrh	r2, [r2, #8]
 80048ee:	801a      	strh	r2, [r3, #0]
                    SKprintf("In loop measurement %d: %d\r\n", measurement, pRangingMeasurementData->RangeMilliMeter);
 80048f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f2:	891b      	ldrh	r3, [r3, #8]
 80048f4:	461a      	mov	r2, r3
 80048f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048f8:	486b      	ldr	r0, [pc, #428]	; (8004aa8 <SK_RangingTest+0x308>)
 80048fa:	f7ff fc9b 	bl	8004234 <SKprintf>
                    /*
                     * <VL53L0X_ClearInterruptMask()>
                     * 指定されたシステム割り込み条件をクリアします。
                     * 指定された割り込みをクリアします。
                     */
                    VL53L0X_ClearInterruptMask(pMyDevice, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80048fe:	2104      	movs	r1, #4
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f002 fbe0 	bl	80070c6 <VL53L0X_ClearInterruptMask>
                    VL53L0X_PollingDelay(pMyDevice);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f006 fabc 	bl	800ae84 <VL53L0X_PollingDelay>
            for(measurement=0; measurement<no_of_measurements; measurement++){
 800490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490e:	3301      	adds	r3, #1
 8004910:	643b      	str	r3, [r7, #64]	; 0x40
 8004912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	429a      	cmp	r2, r3
 8004918:	d3d2      	bcc.n	80048c0 <SK_RangingTest+0x120>
 800491a:	e000      	b.n	800491e <SK_RangingTest+0x17e>
                }
                else {
                    break;
 800491c:	bf00      	nop
                }
            }

            if(Status == VL53L0X_ERROR_NONE){
 800491e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004922:	2b00      	cmp	r3, #0
 8004924:	d113      	bne.n	800494e <SK_RangingTest+0x1ae>
                for(measurement=0; measurement<no_of_measurements; measurement++){
 8004926:	2300      	movs	r3, #0
 8004928:	643b      	str	r3, [r7, #64]	; 0x40
 800492a:	e00c      	b.n	8004946 <SK_RangingTest+0x1a6>
                    SKprintf("measurement %d: %d\r\n", measurement, *(pResults + measurement));
 800492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800493a:	485c      	ldr	r0, [pc, #368]	; (8004aac <SK_RangingTest+0x30c>)
 800493c:	f7ff fc7a 	bl	8004234 <SKprintf>
                for(measurement=0; measurement<no_of_measurements; measurement++){
 8004940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004942:	3301      	adds	r3, #1
 8004944:	643b      	str	r3, [r7, #64]	; 0x40
 8004946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	429a      	cmp	r2, r3
 800494c:	d3ee      	bcc.n	800492c <SK_RangingTest+0x18c>
                    //SKprintf("measurement %d: %d:%d\r\n", measurement, *(pResults + measurement),pMyDevice->Data.LastRangeMeasure.RangeMilliMeter);
                }
            }

            free(pResults);
 800494e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004950:	f010 f8a2 	bl	8014a98 <free>
        }

        if(Status == VL53L0X_ERROR_NONE){
 8004954:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004958:	2b00      	cmp	r3, #0
 800495a:	d108      	bne.n	800496e <SK_RangingTest+0x1ce>
             * 電流測定の終了時にデバイスをスタンバイモードに設定します
             * シングルモードでは、測定終了時にデバイスが自動的にスタンバイモードに
             * 戻るため、必要ありません。 この関数は、VL53L0X_State を
             * VL53L0X_STATE_RUNNING から VL53L0X_STATE_IDLE に変更します。
             */
            SKprintf ("Call of VL53L0X_StopMeasurement\r\n");
 800495c:	4854      	ldr	r0, [pc, #336]	; (8004ab0 <SK_RangingTest+0x310>)
 800495e:	f7ff fc69 	bl	8004234 <SKprintf>
            Status = VL53L0X_StopMeasurement(pMyDevice);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f002 f810 	bl	8006988 <VL53L0X_StopMeasurement>
 8004968:	4603      	mov	r3, r0
 800496a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }

        if(Status == VL53L0X_ERROR_NONE){
 800496e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004972:	2b00      	cmp	r3, #0
 8004974:	d108      	bne.n	8004988 <SK_RangingTest+0x1e8>
            SKprintf ("Wait Stop to be competed\r\n");
 8004976:	484f      	ldr	r0, [pc, #316]	; (8004ab4 <SK_RangingTest+0x314>)
 8004978:	f7ff fc5c 	bl	8004234 <SKprintf>
            Status = WaitStopCompleted(pMyDevice);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fe79 	bl	8004674 <WaitStopCompleted>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }

        if(Status == VL53L0X_ERROR_NONE){
 8004988:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800498c:	2b00      	cmp	r3, #0
 800498e:	f040 817d 	bne.w	8004c8c <SK_RangingTest+0x4ec>
            /*
             * <VL53L0X_ClearInterruptMask()>
             * 指定されたシステム割り込み条件をクリアします。
             * 指定された割り込みをクリアします。
             */
            Status = VL53L0X_ClearInterruptMask(pMyDevice,VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8004992:	2104      	movs	r1, #4
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f002 fb96 	bl	80070c6 <VL53L0X_ClearInterruptMask>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80049a0:	e174      	b.n	8004c8c <SK_RangingTest+0x4ec>
         * 機能の説明
         * この機能は、特定の制限チェックを有効/無効にします。
         * 制限チェックは LimitCheckId で識別されます。
         */

        if (Status == VL53L0X_ERROR_NONE) {
 80049a2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <SK_RangingTest+0x21a>
            Status = VL53L0X_SetLimitCheckEnable(pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80049aa:	2201      	movs	r2, #1
 80049ac:	2100      	movs	r1, #0
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 fc30 	bl	8006214 <VL53L0X_SetLimitCheckEnable>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }

        if (Status == VL53L0X_ERROR_NONE) {
 80049ba:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d107      	bne.n	80049d2 <SK_RangingTest+0x232>
            Status = VL53L0X_SetLimitCheckEnable(pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80049c2:	2201      	movs	r2, #1
 80049c4:	2101      	movs	r1, #1
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f001 fc24 	bl	8006214 <VL53L0X_SetLimitCheckEnable>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }

        if (Status == VL53L0X_ERROR_NONE) {
 80049d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <SK_RangingTest+0x250>
            if(sel == RASING_MODE_SINGLE){
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d107      	bne.n	80049f0 <SK_RangingTest+0x250>
                Status = VL53L0X_SetLimitCheckEnable(pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 1);
 80049e0:	2201      	movs	r2, #1
 80049e2:	2103      	movs	r1, #3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 fc15 	bl	8006214 <VL53L0X_SetLimitCheckEnable>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
         * 特定の制限チェック値を設定します。
         * 機能の説明
         * この関数は、特定の制限チェック値を設定します。
         * 制限チェックは LimitCheckId で識別されます。
         */
        switch(sel){
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d87b      	bhi.n	8004aee <SK_RangingTest+0x34e>
 80049f6:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <SK_RangingTest+0x25c>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a5f 	.word	0x08004a5f
 8004a08:	08004ab9 	.word	0x08004ab9
        case RASING_MODE_SINGLE:
            if (Status == VL53L0X_ERROR_NONE) {
 8004a0c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d16e      	bne.n	8004af2 <SK_RangingTest+0x352>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, (FixPoint1616_t)(1.5*0.023*65536));
 8004a14:	f640 02d4 	movw	r2, #2260	; 0x8d4
 8004a18:	2103      	movs	r1, #3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f001 fcaa 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
             break;
 8004a26:	e064      	b.n	8004af2 <SK_RangingTest+0x352>
        case RASING_MODE_SINGLE_HA:
            if (Status == VL53L0X_ERROR_NONE) {
 8004a28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d108      	bne.n	8004a42 <SK_RangingTest+0x2a2>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.25*65536));
 8004a30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a34:	2101      	movs	r1, #1
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f001 fc9c 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            if (Status == VL53L0X_ERROR_NONE) {
 8004a42:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d155      	bne.n	8004af6 <SK_RangingTest+0x356>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(18*65536));
 8004a4a:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f001 fc8f 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            break;
 8004a5c:	e04b      	b.n	8004af6 <SK_RangingTest+0x356>
        case RASING_MODE_SINGLE_HS:
            if (Status == VL53L0X_ERROR_NONE) {
 8004a5e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <SK_RangingTest+0x2d8>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.25*65536));
 8004a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f001 fc81 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            if (Status == VL53L0X_ERROR_NONE) {
 8004a78:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d13c      	bne.n	8004afa <SK_RangingTest+0x35a>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(32*65536));
 8004a80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a84:	2100      	movs	r1, #0
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 fc74 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }

            break;
 8004a92:	e032      	b.n	8004afa <SK_RangingTest+0x35a>
 8004a94:	08018e90 	.word	0x08018e90
 8004a98:	08018eb0 	.word	0x08018eb0
 8004a9c:	08018ed8 	.word	0x08018ed8
 8004aa0:	08018f04 	.word	0x08018f04
 8004aa4:	08018f24 	.word	0x08018f24
 8004aa8:	08018f48 	.word	0x08018f48
 8004aac:	08018f68 	.word	0x08018f68
 8004ab0:	08018f80 	.word	0x08018f80
 8004ab4:	08018fa4 	.word	0x08018fa4
        case RASING_MODE_SINGLE_LR:
            if (Status == VL53L0X_ERROR_NONE) {
 8004ab8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d108      	bne.n	8004ad2 <SK_RangingTest+0x332>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8004ac0:	f641 1299 	movw	r2, #6553	; 0x1999
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f001 fc54 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            if (Status == VL53L0X_ERROR_NONE) {
 8004ad2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d111      	bne.n	8004afe <SK_RangingTest+0x35e>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8004ada:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f001 fc47 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }

            break;
 8004aec:	e007      	b.n	8004afe <SK_RangingTest+0x35e>
        default:
            break;
 8004aee:	bf00      	nop
 8004af0:	e006      	b.n	8004b00 <SK_RangingTest+0x360>
             break;
 8004af2:	bf00      	nop
 8004af4:	e004      	b.n	8004b00 <SK_RangingTest+0x360>
            break;
 8004af6:	bf00      	nop
 8004af8:	e002      	b.n	8004b00 <SK_RangingTest+0x360>
            break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <SK_RangingTest+0x360>
            break;
 8004afe:	bf00      	nop
         * レンジング タイミング バジェットをマイクロ秒単位で設定します。
         * 機能の説明
         * 現在のモード (レンジング、ヒストグラム、ASL ...) のフルレンジング シーケンスを
         * 実行するためにユーザーがデバイスに許可する最大時間を定義します。
         */
        switch(sel){
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d830      	bhi.n	8004b68 <SK_RangingTest+0x3c8>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <SK_RangingTest+0x36c>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b69 	.word	0x08004b69
 8004b10:	08004b1d 	.word	0x08004b1d
 8004b14:	08004b35 	.word	0x08004b35
 8004b18:	08004b4f 	.word	0x08004b4f
        case RASING_MODE_SINGLE:
             break;
        case RASING_MODE_SINGLE_HA:
            if (Status == VL53L0X_ERROR_NONE) {
 8004b1c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d123      	bne.n	8004b6c <SK_RangingTest+0x3cc>
                Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 200000);
 8004b24:	495c      	ldr	r1, [pc, #368]	; (8004c98 <SK_RangingTest+0x4f8>)
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f001 f956 	bl	8005dd8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            break;
 8004b32:	e01b      	b.n	8004b6c <SK_RangingTest+0x3cc>
        case RASING_MODE_SINGLE_HS:
            if (Status == VL53L0X_ERROR_NONE) {
 8004b34:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d119      	bne.n	8004b70 <SK_RangingTest+0x3d0>
                Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 30000);
 8004b3c:	f247 5130 	movw	r1, #30000	; 0x7530
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f001 f949 	bl	8005dd8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            break;
 8004b4c:	e010      	b.n	8004b70 <SK_RangingTest+0x3d0>
       case RASING_MODE_SINGLE_LR:
            if (Status == VL53L0X_ERROR_NONE) {
 8004b4e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10e      	bne.n	8004b74 <SK_RangingTest+0x3d4>
                Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 33000);
 8004b56:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f001 f93c 	bl	8005dd8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            break;
 8004b66:	e005      	b.n	8004b74 <SK_RangingTest+0x3d4>
        default:
            break;
 8004b68:	bf00      	nop
 8004b6a:	e004      	b.n	8004b76 <SK_RangingTest+0x3d6>
            break;
 8004b6c:	bf00      	nop
 8004b6e:	e002      	b.n	8004b76 <SK_RangingTest+0x3d6>
            break;
 8004b70:	bf00      	nop
 8004b72:	e000      	b.n	8004b76 <SK_RangingTest+0x3d6>
            break;
 8004b74:	bf00      	nop
         * < VL53L0X_SetVcselPulsePeriod() >
         * VCSEL パルス周期を設定します。
         * 機能の説明
         * この関数は、指定された周期タイプの VCSEL パルス周期を取得します。
         */
        switch(sel){
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d824      	bhi.n	8004bc6 <SK_RangingTest+0x426>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <SK_RangingTest+0x3e4>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004bc7 	.word	0x08004bc7
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bc7 	.word	0x08004bc7
 8004b90:	08004b95 	.word	0x08004b95
        case RASING_MODE_SINGLE_HA:
            break;
        case RASING_MODE_SINGLE_HS:
            break;
       case RASING_MODE_SINGLE_LR:
            if (Status == VL53L0X_ERROR_NONE) {
 8004b94:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d107      	bne.n	8004bac <SK_RangingTest+0x40c>
                Status = VL53L0X_SetVcselPulsePeriod(pMyDevice, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8004b9c:	2212      	movs	r2, #18
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f001 f93f 	bl	8005e24 <VL53L0X_SetVcselPulsePeriod>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            if (Status == VL53L0X_ERROR_NONE) {
 8004bac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <SK_RangingTest+0x42a>
                Status = VL53L0X_SetVcselPulsePeriod(pMyDevice, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8004bb4:	220e      	movs	r2, #14
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 f933 	bl	8005e24 <VL53L0X_SetVcselPulsePeriod>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            break;
 8004bc4:	e001      	b.n	8004bca <SK_RangingTest+0x42a>
        default:
            break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <SK_RangingTest+0x42c>
            break;
 8004bca:	bf00      	nop
        }

        if(sel==RASING_MODE_SINGLE_LR){
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d102      	bne.n	8004bd8 <SK_RangingTest+0x438>
            max = 50;
 8004bd2:	2332      	movs	r3, #50	; 0x32
 8004bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd6:	e001      	b.n	8004bdc <SK_RangingTest+0x43c>
        }
        else{
            max = 10;
 8004bd8:	230a      	movs	r3, #10
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
        }


		SKprintf("001 Range MilliMeter= %d(%d)\r\n",RangingMeasurementData.RangeMilliMeter,pMyDevice->Data.LastRangeMeasure.RangeMilliMeter);
 8004bdc:	8c3b      	ldrh	r3, [r7, #32]
 8004bde:	4619      	mov	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004be6:	461a      	mov	r2, r3
 8004be8:	482c      	ldr	r0, [pc, #176]	; (8004c9c <SK_RangingTest+0x4fc>)
 8004bea:	f7ff fb23 	bl	8004234 <SKprintf>



        if(Status == VL53L0X_ERROR_NONE){
 8004bee:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d14a      	bne.n	8004c8c <SK_RangingTest+0x4ec>
            for( i=0; i<max; i++ ){
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bfa:	e041      	b.n	8004c80 <SK_RangingTest+0x4e0>
                 * この機能はデバイスへのアクセスです
                 * この関数はデバイス モードを VL53L0X_DEVICEMODE_SINGLE_RANGING に変更します。
                 *
                 */
                //SKprintf ("Call of VL53L0X_PerformSingleRangingMeasurement\r\n");
                Status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &RangingMeasurementData);
 8004bfc:	f107 0318 	add.w	r3, r7, #24
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f002 f86c 	bl	8006ce0 <VL53L0X_PerformSingleRangingMeasurement>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                SKprintf("002 Range MilliMeter = %d(%d),",RangingMeasurementData.RangeMilliMeter,pMyDevice->Data.LastRangeMeasure.RangeMilliMeter);
 8004c0e:	8c3b      	ldrh	r3, [r7, #32]
 8004c10:	4619      	mov	r1, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4821      	ldr	r0, [pc, #132]	; (8004ca0 <SK_RangingTest+0x500>)
 8004c1c:	f7ff fb0a 	bl	8004234 <SKprintf>

                print_pal_error(Status);
 8004c20:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fc95 	bl	8004554 <print_pal_error>
                print_range_status(&RangingMeasurementData);
 8004c2a:	f107 0318 	add.w	r3, r7, #24
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fd54 	bl	80046dc <print_range_status>
                 * 最新の値を取得するには、事前にレンジングを実行する必要があります。
                 * 報告される値は、LimitCheckId で識別される制限チェックにリンクされます。
                 * ノート：
                 * この機能はデバイスへのアクセスです
                 */
                switch(sel){
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d81a      	bhi.n	8004c70 <SK_RangingTest+0x4d0>
                case RASING_MODE_SINGLE:
                case RASING_MODE_SINGLE_HA:
                case RASING_MODE_SINGLE_HS:
                    VL53L0X_GetLimitCheckCurrent(pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, &LimitCheckCurrent);
 8004c3a:	f107 0314 	add.w	r3, r7, #20
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2103      	movs	r1, #3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f001 fc86 	bl	8006554 <VL53L0X_GetLimitCheckCurrent>
                    SKprintf(",RANGE IGNORE THRESHOLD: %f\r\n", (float)LimitCheckCurrent/65536.0);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c52:	ee17 0a90 	vmov	r0, s15
 8004c56:	f7fb fc8f 	bl	8000578 <__aeabi_f2d>
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <SK_RangingTest+0x504>)
 8004c60:	f7fb fe0c 	bl	800087c <__aeabi_ddiv>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	480f      	ldr	r0, [pc, #60]	; (8004ca8 <SK_RangingTest+0x508>)
 8004c6a:	f7ff fae3 	bl	8004234 <SKprintf>
                    break;
 8004c6e:	e000      	b.n	8004c72 <SK_RangingTest+0x4d2>
               case RASING_MODE_SINGLE_LR:
                default:
                    break;
 8004c70:	bf00      	nop
                }

				//SKprintf("003 Range MilliMeter = %d(%d)\r\n",RangingMeasurementData.RangeMilliMeter,pMyDevice->Data.LastRangeMeasure.RangeMilliMeter) ;


                if (Status != VL53L0X_ERROR_NONE){
 8004c72:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d107      	bne.n	8004c8a <SK_RangingTest+0x4ea>
            for( i=0; i<max; i++ ){
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c84:	429a      	cmp	r2, r3
 8004c86:	dbb9      	blt.n	8004bfc <SK_RangingTest+0x45c>
 8004c88:	e000      	b.n	8004c8c <SK_RangingTest+0x4ec>
                    break;
 8004c8a:	bf00      	nop

        }
    }


    return Status;
 8004c8c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f

}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3750      	adds	r7, #80	; 0x50
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	00030d40 	.word	0x00030d40
 8004c9c:	08018fc0 	.word	0x08018fc0
 8004ca0:	08018fe0 	.word	0x08018fe0
 8004ca4:	40f00000 	.word	0x40f00000
 8004ca8:	08018e14 	.word	0x08018e14

08004cac <vl53l0x_Racing_test>:
//       2 SINGLE RACING HS
//       3 SINGLE RACING LR
//
//==============================================================================
void vl53l0x_Racing_test(RASING_MODE sel)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b0a9      	sub	sp, #164	; 0xa4
 8004cb0:	af04      	add	r7, sp, #16
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	71fb      	strb	r3, [r7, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
//    VL53L0X_Dev_t MyDevice;
    VL53L0X_Dev_t *pMyDevice = &MyDevice;
 8004cbc:	4b6a      	ldr	r3, [pc, #424]	; (8004e68 <vl53l0x_Racing_test+0x1bc>)
 8004cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    VL53L0X_Version_t                   Version;
    VL53L0X_Version_t                  *pVersion   = &Version;
 8004cc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    VL53L0X_DeviceInfo_t                DeviceInfo;

    int32_t status_int;
    int32_t init_done = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int NecleoComStatus = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    int NecleoAutoCom = 1;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	67bb      	str	r3, [r7, #120]	; 0x78


    MyDevice.I2cHandle = &hi2c1;
 8004cd8:	4b63      	ldr	r3, [pc, #396]	; (8004e68 <vl53l0x_Racing_test+0x1bc>)
 8004cda:	4a64      	ldr	r2, [pc, #400]	; (8004e6c <vl53l0x_Racing_test+0x1c0>)
 8004cdc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    MyDevice.I2cDevAddr = 0x52;
 8004ce0:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <vl53l0x_Racing_test+0x1bc>)
 8004ce2:	2252      	movs	r2, #82	; 0x52
 8004ce4:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

    if(sel == RASING_MODE_CONTINUE){
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d103      	bne.n	8004cf6 <vl53l0x_Racing_test+0x4a>
        SKprintf ("VL53L0X PAL Continuous Ranging example\r\n");
 8004cee:	4860      	ldr	r0, [pc, #384]	; (8004e70 <vl53l0x_Racing_test+0x1c4>)
 8004cf0:	f7ff faa0 	bl	8004234 <SKprintf>
 8004cf4:	e002      	b.n	8004cfc <vl53l0x_Racing_test+0x50>
    }
    else{
        SKprintf ("VL53L0X API Simple Ranging example\r\n\n");
 8004cf6:	485f      	ldr	r0, [pc, #380]	; (8004e74 <vl53l0x_Racing_test+0x1c8>)
 8004cf8:	f7ff fa9c 	bl	8004234 <SKprintf>
    }

    pMyDevice->I2cDevAddr      = 0x52;
 8004cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d00:	2252      	movs	r2, #82	; 0x52
 8004d02:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

    /*
     *  Get the version of the VL53L0X API running in the firmware
     */

    if(Status == VL53L0X_ERROR_NONE){
 8004d06:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d136      	bne.n	8004d7c <vl53l0x_Racing_test+0xd0>
        status_int = VL53L0X_GetVersion(pVersion);
 8004d0e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004d12:	f000 fbcf 	bl	80054b4 <VL53L0X_GetVersion>
 8004d16:	4603      	mov	r3, r0
 8004d18:	677b      	str	r3, [r7, #116]	; 0x74
        if (status_int != 0){
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <vl53l0x_Racing_test+0x7c>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004d20:	23ec      	movs	r3, #236	; 0xec
 8004d22:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004d26:	e029      	b.n	8004d7c <vl53l0x_Racing_test+0xd0>
        }
        else{
            //  Verify the version of the VL53L0X API running in the firmware
            if( pVersion->major != VERSION_REQUIRED_MAJOR ||
 8004d28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d2c:	791b      	ldrb	r3, [r3, #4]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d109      	bne.n	8004d46 <vl53l0x_Racing_test+0x9a>
                pVersion->minor != VERSION_REQUIRED_MINOR ||
 8004d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d36:	795b      	ldrb	r3, [r3, #5]
            if( pVersion->major != VERSION_REQUIRED_MAJOR ||
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <vl53l0x_Racing_test+0x9a>
                pVersion->build != VERSION_REQUIRED_BUILD )
 8004d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d40:	799b      	ldrb	r3, [r3, #6]
                pVersion->minor != VERSION_REQUIRED_MINOR ||
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d01a      	beq.n	8004d7c <vl53l0x_Racing_test+0xd0>
            {
                SKprintf("VL53L0X API Version Error: Your firmware has %d.%d.%d (revision %d). This example requires %d.%d.%d.\r\n",
                    pVersion->major, pVersion->minor, pVersion->build, pVersion->revision,
 8004d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d4a:	791b      	ldrb	r3, [r3, #4]
                SKprintf("VL53L0X API Version Error: Your firmware has %d.%d.%d (revision %d). This example requires %d.%d.%d.\r\n",
 8004d4c:	4619      	mov	r1, r3
                    pVersion->major, pVersion->minor, pVersion->build, pVersion->revision,
 8004d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d52:	795b      	ldrb	r3, [r3, #5]
                SKprintf("VL53L0X API Version Error: Your firmware has %d.%d.%d (revision %d). This example requires %d.%d.%d.\r\n",
 8004d54:	4618      	mov	r0, r3
                    pVersion->major, pVersion->minor, pVersion->build, pVersion->revision,
 8004d56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d5a:	799b      	ldrb	r3, [r3, #6]
                SKprintf("VL53L0X API Version Error: Your firmware has %d.%d.%d (revision %d). This example requires %d.%d.%d.\r\n",
 8004d5c:	461c      	mov	r4, r3
 8004d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2204      	movs	r2, #4
 8004d66:	9203      	str	r2, [sp, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	9202      	str	r2, [sp, #8]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	9201      	str	r2, [sp, #4]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	4623      	mov	r3, r4
 8004d74:	4602      	mov	r2, r0
 8004d76:	4840      	ldr	r0, [pc, #256]	; (8004e78 <vl53l0x_Racing_test+0x1cc>)
 8004d78:	f7ff fa5c 	bl	8004234 <SKprintf>
     * VL53L0X_SetOffsetCalibrationData() を使用して、適切なオフセットキャリブレーションの保存と
     * 復元を独自に行う必要があります。
     * この関数は VL53L0X_State を変更します。
     * VL53L0X_STATE_POWERDOWN から VL53L0X_STATE_WAIT_STATICINIT まで。
     */
    if(Status == VL53L0X_ERROR_NONE){
 8004d7c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <vl53l0x_Racing_test+0xf4>
        SKprintf ("Call of VL53L0X_DataInit\r\n");
 8004d84:	483d      	ldr	r0, [pc, #244]	; (8004e7c <vl53l0x_Racing_test+0x1d0>)
 8004d86:	f7ff fa55 	bl	8004234 <SKprintf>
        Status = VL53L0X_DataInit(&MyDevice); // Data initialization
 8004d8a:	4837      	ldr	r0, [pc, #220]	; (8004e68 <vl53l0x_Racing_test+0x1bc>)
 8004d8c:	f000 fbfe 	bl	800558c <VL53L0X_DataInit>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        print_pal_error(Status);
 8004d96:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff fbda 	bl	8004554 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE){
 8004da0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d148      	bne.n	8004e3a <vl53l0x_Racing_test+0x18e>
        Status = VL53L0X_GetDeviceInfo(&MyDevice, &DeviceInfo);
 8004da8:	f107 0308 	add.w	r3, r7, #8
 8004dac:	4619      	mov	r1, r3
 8004dae:	482e      	ldr	r0, [pc, #184]	; (8004e68 <vl53l0x_Racing_test+0x1bc>)
 8004db0:	f000 fb9b 	bl	80054ea <VL53L0X_GetDeviceInfo>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

        if(Status == VL53L0X_ERROR_NONE){
 8004dba:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d136      	bne.n	8004e30 <vl53l0x_Racing_test+0x184>
            SKprintf("VL53L0X_GetDeviceInfo:\r\n");
 8004dc2:	482f      	ldr	r0, [pc, #188]	; (8004e80 <vl53l0x_Racing_test+0x1d4>)
 8004dc4:	f7ff fa36 	bl	8004234 <SKprintf>
            SKprintf("Device Name : %s\r\n", DeviceInfo.Name);
 8004dc8:	f107 0308 	add.w	r3, r7, #8
 8004dcc:	4619      	mov	r1, r3
 8004dce:	482d      	ldr	r0, [pc, #180]	; (8004e84 <vl53l0x_Racing_test+0x1d8>)
 8004dd0:	f7ff fa30 	bl	8004234 <SKprintf>
            SKprintf("Device Type : %s\r\n", DeviceInfo.Type);
 8004dd4:	f107 0308 	add.w	r3, r7, #8
 8004dd8:	3320      	adds	r3, #32
 8004dda:	4619      	mov	r1, r3
 8004ddc:	482a      	ldr	r0, [pc, #168]	; (8004e88 <vl53l0x_Racing_test+0x1dc>)
 8004dde:	f7ff fa29 	bl	8004234 <SKprintf>
            SKprintf("Device ID : %s\r\n", DeviceInfo.ProductId);
 8004de2:	f107 0308 	add.w	r3, r7, #8
 8004de6:	3340      	adds	r3, #64	; 0x40
 8004de8:	4619      	mov	r1, r3
 8004dea:	4828      	ldr	r0, [pc, #160]	; (8004e8c <vl53l0x_Racing_test+0x1e0>)
 8004dec:	f7ff fa22 	bl	8004234 <SKprintf>
            SKprintf("ProductRevisionMajor : %d\r\n", DeviceInfo.ProductRevisionMajor);
 8004df0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8004df4:	4619      	mov	r1, r3
 8004df6:	4826      	ldr	r0, [pc, #152]	; (8004e90 <vl53l0x_Racing_test+0x1e4>)
 8004df8:	f7ff fa1c 	bl	8004234 <SKprintf>
            SKprintf("ProductRevisionMinor : %d\r\n", DeviceInfo.ProductRevisionMinor);
 8004dfc:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004e00:	4619      	mov	r1, r3
 8004e02:	4824      	ldr	r0, [pc, #144]	; (8004e94 <vl53l0x_Racing_test+0x1e8>)
 8004e04:	f7ff fa16 	bl	8004234 <SKprintf>

            if ((DeviceInfo.ProductRevisionMinor != 1) && (DeviceInfo.ProductRevisionMinor != 1)) {
 8004e08:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d00f      	beq.n	8004e30 <vl53l0x_Racing_test+0x184>
 8004e10:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d00b      	beq.n	8004e30 <vl53l0x_Racing_test+0x184>
            	SKprintf("Error expected cut 1.1 but found cut %d.%d\r\n",DeviceInfo.ProductRevisionMajor, DeviceInfo.ProductRevisionMinor);
 8004e18:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004e22:	461a      	mov	r2, r3
 8004e24:	481c      	ldr	r0, [pc, #112]	; (8004e98 <vl53l0x_Racing_test+0x1ec>)
 8004e26:	f7ff fa05 	bl	8004234 <SKprintf>
                Status = VL53L0X_ERROR_NOT_SUPPORTED;
 8004e2a:	23fb      	movs	r3, #251	; 0xfb
 8004e2c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
        }
        print_pal_error(Status);
 8004e30:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fb8d 	bl	8004554 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE){
 8004e3a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d108      	bne.n	8004e54 <vl53l0x_Racing_test+0x1a8>
        Status = SK_RangingTest( pMyDevice,sel);
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	4619      	mov	r1, r3
 8004e46:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004e4a:	f7ff fca9 	bl	80047a0 <SK_RangingTest>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    print_pal_error(Status);
 8004e54:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff fb7b 	bl	8004554 <print_pal_error>
}
 8004e5e:	bf00      	nop
 8004e60:	3794      	adds	r7, #148	; 0x94
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd90      	pop	{r4, r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20002034 	.word	0x20002034
 8004e6c:	20002204 	.word	0x20002204
 8004e70:	08019000 	.word	0x08019000
 8004e74:	0801902c 	.word	0x0801902c
 8004e78:	08019054 	.word	0x08019054
 8004e7c:	080190bc 	.word	0x080190bc
 8004e80:	080190d8 	.word	0x080190d8
 8004e84:	080190f4 	.word	0x080190f4
 8004e88:	08019108 	.word	0x08019108
 8004e8c:	0801911c 	.word	0x0801911c
 8004e90:	08019130 	.word	0x08019130
 8004e94:	0801914c 	.word	0x0801914c
 8004e98:	08019168 	.word	0x08019168

08004e9c <vl53data_disp>:

//==============================================================================
//
//==============================================================================
void vl53data_disp(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
    int i;

    SKprintf("Part2PartOffsetNVMMicroMeter = %d\r\n", 	MyDevice.Data.Part2PartOffsetNVMMicroMeter	);
 8004ea2:	4b70      	ldr	r3, [pc, #448]	; (8005064 <vl53data_disp+0x1c8>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	486f      	ldr	r0, [pc, #444]	; (8005068 <vl53data_disp+0x1cc>)
 8004eaa:	f7ff f9c3 	bl	8004234 <SKprintf>
    SKprintf("Part2PartOffsetAdjustmentNVMMicroMeter = %d\r\n",	MyDevice.Data.Part2PartOffsetAdjustmentNVMMicroMeter	);
 8004eae:	4b6d      	ldr	r3, [pc, #436]	; (8005064 <vl53data_disp+0x1c8>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	486d      	ldr	r0, [pc, #436]	; (800506c <vl53data_disp+0x1d0>)
 8004eb6:	f7ff f9bd 	bl	8004234 <SKprintf>
    SKprintf("VL53L0X_DeviceParameters_t\r\n");
 8004eba:	486d      	ldr	r0, [pc, #436]	; (8005070 <vl53data_disp+0x1d4>)
 8004ebc:	f7ff f9ba 	bl	8004234 <SKprintf>
    SKprintf("  DeviceMode = 0x%x\r\n",	MyDevice.Data.CurrentParameters.DeviceMode	);
 8004ec0:	4b68      	ldr	r3, [pc, #416]	; (8005064 <vl53data_disp+0x1c8>)
 8004ec2:	7c1b      	ldrb	r3, [r3, #16]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	486b      	ldr	r0, [pc, #428]	; (8005074 <vl53data_disp+0x1d8>)
 8004ec8:	f7ff f9b4 	bl	8004234 <SKprintf>
    SKprintf("  HistogramMode = 0x%x\r\n",	MyDevice.Data.CurrentParameters.HistogramMode	);
 8004ecc:	4b65      	ldr	r3, [pc, #404]	; (8005064 <vl53data_disp+0x1c8>)
 8004ece:	7c5b      	ldrb	r3, [r3, #17]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4869      	ldr	r0, [pc, #420]	; (8005078 <vl53data_disp+0x1dc>)
 8004ed4:	f7ff f9ae 	bl	8004234 <SKprintf>
    SKprintf("  MeasurementTimingBudgetMicroSeconds = 0x%u\r\n",	MyDevice.Data.CurrentParameters.MeasurementTimingBudgetMicroSeconds	);
 8004ed8:	4b62      	ldr	r3, [pc, #392]	; (8005064 <vl53data_disp+0x1c8>)
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	4619      	mov	r1, r3
 8004ede:	4867      	ldr	r0, [pc, #412]	; (800507c <vl53data_disp+0x1e0>)
 8004ee0:	f7ff f9a8 	bl	8004234 <SKprintf>
    SKprintf("  InterMeasurementPeriodMilliSeconds = 0x%u\r\n",	MyDevice.Data.CurrentParameters.InterMeasurementPeriodMilliSeconds	);
 8004ee4:	4b5f      	ldr	r3, [pc, #380]	; (8005064 <vl53data_disp+0x1c8>)
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4865      	ldr	r0, [pc, #404]	; (8005080 <vl53data_disp+0x1e4>)
 8004eec:	f7ff f9a2 	bl	8004234 <SKprintf>
    SKprintf("  XTalkCompensationEnable = 0x%x\r\n",	MyDevice.Data.CurrentParameters.XTalkCompensationEnable	);
 8004ef0:	4b5c      	ldr	r3, [pc, #368]	; (8005064 <vl53data_disp+0x1c8>)
 8004ef2:	7f1b      	ldrb	r3, [r3, #28]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4863      	ldr	r0, [pc, #396]	; (8005084 <vl53data_disp+0x1e8>)
 8004ef8:	f7ff f99c 	bl	8004234 <SKprintf>
    SKprintf("  XTalkCompensationRangeMilliMeter = 0x%x\r\n",	MyDevice.Data.CurrentParameters.XTalkCompensationRangeMilliMeter	);
 8004efc:	4b59      	ldr	r3, [pc, #356]	; (8005064 <vl53data_disp+0x1c8>)
 8004efe:	8bdb      	ldrh	r3, [r3, #30]
 8004f00:	4619      	mov	r1, r3
 8004f02:	4861      	ldr	r0, [pc, #388]	; (8005088 <vl53data_disp+0x1ec>)
 8004f04:	f7ff f996 	bl	8004234 <SKprintf>
    SKprintf("  XTalkCompensationRateMegaCps = 0x%u\r\n",	MyDevice.Data.CurrentParameters.XTalkCompensationRateMegaCps	);
 8004f08:	4b56      	ldr	r3, [pc, #344]	; (8005064 <vl53data_disp+0x1c8>)
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	485f      	ldr	r0, [pc, #380]	; (800508c <vl53data_disp+0x1f0>)
 8004f10:	f7ff f990 	bl	8004234 <SKprintf>
    SKprintf("  RangeOffsetMicroMeters = %d\r\n",	MyDevice.Data.CurrentParameters.RangeOffsetMicroMeters	);
 8004f14:	4b53      	ldr	r3, [pc, #332]	; (8005064 <vl53data_disp+0x1c8>)
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	4619      	mov	r1, r3
 8004f1a:	485d      	ldr	r0, [pc, #372]	; (8005090 <vl53data_disp+0x1f4>)
 8004f1c:	f7ff f98a 	bl	8004234 <SKprintf>

    //SKprintf("  LimitChecksEnable[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS] = 0x%x\r\n",	MyDevice.Data.CurrentParameters.LimitChecksEnable[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS]	);
    SKprintf("  LimitChecksEnable[] = ");
 8004f20:	485c      	ldr	r0, [pc, #368]	; (8005094 <vl53data_disp+0x1f8>)
 8004f22:	f7ff f987 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	e00b      	b.n	8004f44 <vl53data_disp+0xa8>
        SKprintf("0x%02x,",	MyDevice.Data.CurrentParameters.LimitChecksEnable[i]	);
 8004f2c:	4a4d      	ldr	r2, [pc, #308]	; (8005064 <vl53data_disp+0x1c8>)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	3328      	adds	r3, #40	; 0x28
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	4619      	mov	r1, r3
 8004f38:	4857      	ldr	r0, [pc, #348]	; (8005098 <vl53data_disp+0x1fc>)
 8004f3a:	f7ff f97b 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3301      	adds	r3, #1
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b05      	cmp	r3, #5
 8004f48:	ddf0      	ble.n	8004f2c <vl53data_disp+0x90>
    }
    SKprintf("\r\n");
 8004f4a:	4854      	ldr	r0, [pc, #336]	; (800509c <vl53data_disp+0x200>)
 8004f4c:	f7ff f972 	bl	8004234 <SKprintf>


    //SKprintf("  LimitChecksStatus[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS] = 0x%x\r\n",	MyDevice.Data.CurrentParameters.LimitChecksStatus[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS]	);
    SKprintf("  LimitChecksStatus[] = ");
 8004f50:	4853      	ldr	r0, [pc, #332]	; (80050a0 <vl53data_disp+0x204>)
 8004f52:	f7ff f96f 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004f56:	2300      	movs	r3, #0
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	e00b      	b.n	8004f74 <vl53data_disp+0xd8>
        SKprintf("0x%02x,",	MyDevice.Data.CurrentParameters.LimitChecksStatus[i]	);
 8004f5c:	4a41      	ldr	r2, [pc, #260]	; (8005064 <vl53data_disp+0x1c8>)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	332e      	adds	r3, #46	; 0x2e
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	4619      	mov	r1, r3
 8004f68:	484b      	ldr	r0, [pc, #300]	; (8005098 <vl53data_disp+0x1fc>)
 8004f6a:	f7ff f963 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3301      	adds	r3, #1
 8004f72:	607b      	str	r3, [r7, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	ddf0      	ble.n	8004f5c <vl53data_disp+0xc0>
    }
    SKprintf("\r\n");
 8004f7a:	4848      	ldr	r0, [pc, #288]	; (800509c <vl53data_disp+0x200>)
 8004f7c:	f7ff f95a 	bl	8004234 <SKprintf>

    //SKprintf("  LimitChecksValue[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS] = 0x%u\r\n",	MyDevice.Data.CurrentParameters.LimitChecksValue[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS]	);
    SKprintf("  LimitChecksValue[] = ");
 8004f80:	4848      	ldr	r0, [pc, #288]	; (80050a4 <vl53data_disp+0x208>)
 8004f82:	f7ff f957 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004f86:	2300      	movs	r3, #0
 8004f88:	607b      	str	r3, [r7, #4]
 8004f8a:	e00c      	b.n	8004fa6 <vl53data_disp+0x10a>
        SKprintf("0x%u,",	MyDevice.Data.CurrentParameters.LimitChecksValue[i]	);
 8004f8c:	4a35      	ldr	r2, [pc, #212]	; (8005064 <vl53data_disp+0x1c8>)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	330c      	adds	r3, #12
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4843      	ldr	r0, [pc, #268]	; (80050a8 <vl53data_disp+0x20c>)
 8004f9c:	f7ff f94a 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	ddef      	ble.n	8004f8c <vl53data_disp+0xf0>
    }
    SKprintf("\r\n");
 8004fac:	483b      	ldr	r0, [pc, #236]	; (800509c <vl53data_disp+0x200>)
 8004fae:	f7ff f941 	bl	8004234 <SKprintf>
    SKprintf("  dmax_mm[] = ");
    for(i=0; i<VL53L0X_DMAX_LUT_SIZE; i++){
        SKprintf("0x%u,", MyDevice.Data.CurrentParameters.dmax_lut.dmax_mm[i]	);
    }
#endif
    SKprintf("\r\n");
 8004fb2:	483a      	ldr	r0, [pc, #232]	; (800509c <vl53data_disp+0x200>)
 8004fb4:	f7ff f93e 	bl	8004234 <SKprintf>

    SKprintf("  WrapAroundCheckEnable = 0x%x\r\n",	MyDevice.Data.CurrentParameters.WrapAroundCheckEnable	);
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <vl53data_disp+0x1c8>)
 8004fba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	483a      	ldr	r0, [pc, #232]	; (80050ac <vl53data_disp+0x210>)
 8004fc2:	f7ff f937 	bl	8004234 <SKprintf>
    SKprintf("VL53L0X_RangingMeasurementData_t\r\n");
 8004fc6:	483a      	ldr	r0, [pc, #232]	; (80050b0 <vl53data_disp+0x214>)
 8004fc8:	f7ff f934 	bl	8004234 <SKprintf>
    SKprintf("  TimeStamp = 0x%u\r\n",	MyDevice.Data.LastRangeMeasure.TimeStamp	);
 8004fcc:	4b25      	ldr	r3, [pc, #148]	; (8005064 <vl53data_disp+0x1c8>)
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4838      	ldr	r0, [pc, #224]	; (80050b4 <vl53data_disp+0x218>)
 8004fd4:	f7ff f92e 	bl	8004234 <SKprintf>
    SKprintf("  MeasurementTimeUsec = 0x%u\r\n",	MyDevice.Data.LastRangeMeasure.MeasurementTimeUsec	);
 8004fd8:	4b22      	ldr	r3, [pc, #136]	; (8005064 <vl53data_disp+0x1c8>)
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4836      	ldr	r0, [pc, #216]	; (80050b8 <vl53data_disp+0x21c>)
 8004fe0:	f7ff f928 	bl	8004234 <SKprintf>
    SKprintf("  RangeMilliMeter = %d mm\r\n",	MyDevice.Data.LastRangeMeasure.RangeMilliMeter	);
 8004fe4:	4b1f      	ldr	r3, [pc, #124]	; (8005064 <vl53data_disp+0x1c8>)
 8004fe6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fea:	4619      	mov	r1, r3
 8004fec:	4833      	ldr	r0, [pc, #204]	; (80050bc <vl53data_disp+0x220>)
 8004fee:	f7ff f921 	bl	8004234 <SKprintf>
    SKprintf("  RangeDMaxMilliMeter = %d mm\r\n",	MyDevice.Data.LastRangeMeasure.RangeDMaxMilliMeter	);
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <vl53data_disp+0x1c8>)
 8004ff4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4831      	ldr	r0, [pc, #196]	; (80050c0 <vl53data_disp+0x224>)
 8004ffc:	f7ff f91a 	bl	8004234 <SKprintf>
    SKprintf("  SignalRateRtnMegaCps = %d\r\n",	MyDevice.Data.LastRangeMeasure.SignalRateRtnMegaCps	);
 8005000:	4b18      	ldr	r3, [pc, #96]	; (8005064 <vl53data_disp+0x1c8>)
 8005002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005004:	4619      	mov	r1, r3
 8005006:	482f      	ldr	r0, [pc, #188]	; (80050c4 <vl53data_disp+0x228>)
 8005008:	f7ff f914 	bl	8004234 <SKprintf>
    SKprintf("  AmbientRateRtnMegaCps = %d\r\n",	MyDevice.Data.LastRangeMeasure.AmbientRateRtnMegaCps	);
 800500c:	4b15      	ldr	r3, [pc, #84]	; (8005064 <vl53data_disp+0x1c8>)
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	4619      	mov	r1, r3
 8005012:	482d      	ldr	r0, [pc, #180]	; (80050c8 <vl53data_disp+0x22c>)
 8005014:	f7ff f90e 	bl	8004234 <SKprintf>
    SKprintf("  EffectiveSpadRtnCount = %d\r\n",	MyDevice.Data.LastRangeMeasure.EffectiveSpadRtnCount	);
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <vl53data_disp+0x1c8>)
 800501a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800501e:	4619      	mov	r1, r3
 8005020:	482a      	ldr	r0, [pc, #168]	; (80050cc <vl53data_disp+0x230>)
 8005022:	f7ff f907 	bl	8004234 <SKprintf>
    SKprintf("  ZoneId = 0x%x\r\n",	MyDevice.Data.LastRangeMeasure.ZoneId	);
 8005026:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <vl53data_disp+0x1c8>)
 8005028:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800502c:	4619      	mov	r1, r3
 800502e:	4828      	ldr	r0, [pc, #160]	; (80050d0 <vl53data_disp+0x234>)
 8005030:	f7ff f900 	bl	8004234 <SKprintf>
    SKprintf("  RangeFractionalPart = 0x%x\r\n",	MyDevice.Data.LastRangeMeasure.RangeFractionalPart	);
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <vl53data_disp+0x1c8>)
 8005036:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800503a:	4619      	mov	r1, r3
 800503c:	4825      	ldr	r0, [pc, #148]	; (80050d4 <vl53data_disp+0x238>)
 800503e:	f7ff f8f9 	bl	8004234 <SKprintf>
    SKprintf("  RangeStatus = 0x%x\r\n",	MyDevice.Data.LastRangeMeasure.RangeStatus	);
 8005042:	4b08      	ldr	r3, [pc, #32]	; (8005064 <vl53data_disp+0x1c8>)
 8005044:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005048:	4619      	mov	r1, r3
 800504a:	4823      	ldr	r0, [pc, #140]	; (80050d8 <vl53data_disp+0x23c>)
 800504c:	f7ff f8f2 	bl	8004234 <SKprintf>

    SKprintf("VL53L0X_HistogramMeasurementData_t\r\n");
 8005050:	4822      	ldr	r0, [pc, #136]	; (80050dc <vl53data_disp+0x240>)
 8005052:	f7ff f8ef 	bl	8004234 <SKprintf>
    //SKprintf("  HistogramData[VL53L0X_HISTOGRAM_BUFFER_SIZE] = 0x%u\r\n",	MyDevice.Data.LastHistogramMeasure.HistogramData[VL53L0X_HISTOGRAM_BUFFER_SIZE]	);
    SKprintf("  HistogramData[] = ");
 8005056:	4822      	ldr	r0, [pc, #136]	; (80050e0 <vl53data_disp+0x244>)
 8005058:	f7ff f8ec 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_HISTOGRAM_BUFFER_SIZE; i++){
 800505c:	2300      	movs	r3, #0
 800505e:	607b      	str	r3, [r7, #4]
 8005060:	e06a      	b.n	8005138 <vl53data_disp+0x29c>
 8005062:	bf00      	nop
 8005064:	20002034 	.word	0x20002034
 8005068:	08019198 	.word	0x08019198
 800506c:	080191bc 	.word	0x080191bc
 8005070:	080191ec 	.word	0x080191ec
 8005074:	0801920c 	.word	0x0801920c
 8005078:	08019224 	.word	0x08019224
 800507c:	08019240 	.word	0x08019240
 8005080:	08019270 	.word	0x08019270
 8005084:	080192a0 	.word	0x080192a0
 8005088:	080192c4 	.word	0x080192c4
 800508c:	080192f0 	.word	0x080192f0
 8005090:	08019318 	.word	0x08019318
 8005094:	08019338 	.word	0x08019338
 8005098:	08019354 	.word	0x08019354
 800509c:	0801935c 	.word	0x0801935c
 80050a0:	08019360 	.word	0x08019360
 80050a4:	0801937c 	.word	0x0801937c
 80050a8:	08019394 	.word	0x08019394
 80050ac:	0801939c 	.word	0x0801939c
 80050b0:	080193c0 	.word	0x080193c0
 80050b4:	080193e4 	.word	0x080193e4
 80050b8:	080193fc 	.word	0x080193fc
 80050bc:	0801941c 	.word	0x0801941c
 80050c0:	08019438 	.word	0x08019438
 80050c4:	08019458 	.word	0x08019458
 80050c8:	08019478 	.word	0x08019478
 80050cc:	08019498 	.word	0x08019498
 80050d0:	080194b8 	.word	0x080194b8
 80050d4:	080194cc 	.word	0x080194cc
 80050d8:	080194ec 	.word	0x080194ec
 80050dc:	08019504 	.word	0x08019504
 80050e0:	0801952c 	.word	0x0801952c
        SKprintf("0x%u,", MyDevice.Data.LastHistogramMeasure.HistogramData[i]	);
 80050e4:	4a7c      	ldr	r2, [pc, #496]	; (80052d8 <vl53data_disp+0x43c>)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	331a      	adds	r3, #26
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4619      	mov	r1, r3
 80050f2:	487a      	ldr	r0, [pc, #488]	; (80052dc <vl53data_disp+0x440>)
 80050f4:	f7ff f89e 	bl	8004234 <SKprintf>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b17      	cmp	r3, #23
 80050fc:	bf8c      	ite	hi
 80050fe:	2201      	movhi	r2, #1
 8005100:	2200      	movls	r2, #0
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	2a00      	cmp	r2, #0
 8005106:	d114      	bne.n	8005132 <vl53data_disp+0x296>
 8005108:	2201      	movs	r2, #1
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8005112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf14      	ite	ne
 800511a:	2301      	movne	r3, #1
 800511c:	2300      	moveq	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d006      	beq.n	8005132 <vl53data_disp+0x296>
        switch(i){
            case 7:
            case 15:
            case 23:
                SKprintf("\r\n");
 8005124:	486e      	ldr	r0, [pc, #440]	; (80052e0 <vl53data_disp+0x444>)
 8005126:	f7ff f885 	bl	8004234 <SKprintf>
                SKprintf("                  = ");
 800512a:	486e      	ldr	r0, [pc, #440]	; (80052e4 <vl53data_disp+0x448>)
 800512c:	f7ff f882 	bl	8004234 <SKprintf>
                break;
 8005130:	bf00      	nop
    for(i=0; i<VL53L0X_HISTOGRAM_BUFFER_SIZE; i++){
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3301      	adds	r3, #1
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b17      	cmp	r3, #23
 800513c:	ddd2      	ble.n	80050e4 <vl53data_disp+0x248>
        }
    }
    SKprintf("\r\n");
 800513e:	4868      	ldr	r0, [pc, #416]	; (80052e0 <vl53data_disp+0x444>)
 8005140:	f7ff f878 	bl	8004234 <SKprintf>



    SKprintf("  FirstBin = 0x%x\r\n",	MyDevice.Data.LastHistogramMeasure.FirstBin	);
 8005144:	4b64      	ldr	r3, [pc, #400]	; (80052d8 <vl53data_disp+0x43c>)
 8005146:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800514a:	4619      	mov	r1, r3
 800514c:	4866      	ldr	r0, [pc, #408]	; (80052e8 <vl53data_disp+0x44c>)
 800514e:	f7ff f871 	bl	8004234 <SKprintf>
    SKprintf("  BufferSize = 0x%x\r\n",	MyDevice.Data.LastHistogramMeasure.BufferSize	);
 8005152:	4b61      	ldr	r3, [pc, #388]	; (80052d8 <vl53data_disp+0x43c>)
 8005154:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8005158:	4619      	mov	r1, r3
 800515a:	4864      	ldr	r0, [pc, #400]	; (80052ec <vl53data_disp+0x450>)
 800515c:	f7ff f86a 	bl	8004234 <SKprintf>
    SKprintf("  NumberOfBins = 0x%x\r\n",	MyDevice.Data.LastHistogramMeasure.NumberOfBins	);
 8005160:	4b5d      	ldr	r3, [pc, #372]	; (80052d8 <vl53data_disp+0x43c>)
 8005162:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8005166:	4619      	mov	r1, r3
 8005168:	4861      	ldr	r0, [pc, #388]	; (80052f0 <vl53data_disp+0x454>)
 800516a:	f7ff f863 	bl	8004234 <SKprintf>
    SKprintf("  ErrorStatus = 0x%x\r\n",	MyDevice.Data.LastHistogramMeasure.ErrorStatus	);
 800516e:	4b5a      	ldr	r3, [pc, #360]	; (80052d8 <vl53data_disp+0x43c>)
 8005170:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8005174:	4619      	mov	r1, r3
 8005176:	485f      	ldr	r0, [pc, #380]	; (80052f4 <vl53data_disp+0x458>)
 8005178:	f7ff f85c 	bl	8004234 <SKprintf>

    SKprintf("VL53L0X_DeviceSpecificParameters_t\r\n");
 800517c:	485e      	ldr	r0, [pc, #376]	; (80052f8 <vl53data_disp+0x45c>)
 800517e:	f7ff f859 	bl	8004234 <SKprintf>
    SKprintf("  OscFrequencyMHz  = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.OscFrequencyMHz 	);
 8005182:	4b55      	ldr	r3, [pc, #340]	; (80052d8 <vl53data_disp+0x43c>)
 8005184:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005188:	4619      	mov	r1, r3
 800518a:	485c      	ldr	r0, [pc, #368]	; (80052fc <vl53data_disp+0x460>)
 800518c:	f7ff f852 	bl	8004234 <SKprintf>
    SKprintf("  LastEncodedTimeout  = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.LastEncodedTimeout 	);
 8005190:	4b51      	ldr	r3, [pc, #324]	; (80052d8 <vl53data_disp+0x43c>)
 8005192:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8005196:	4619      	mov	r1, r3
 8005198:	4859      	ldr	r0, [pc, #356]	; (8005300 <vl53data_disp+0x464>)
 800519a:	f7ff f84b 	bl	8004234 <SKprintf>
    SKprintf("  Pin0GpioFunctionality = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.Pin0GpioFunctionality	);
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <vl53data_disp+0x43c>)
 80051a0:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80051a4:	4619      	mov	r1, r3
 80051a6:	4857      	ldr	r0, [pc, #348]	; (8005304 <vl53data_disp+0x468>)
 80051a8:	f7ff f844 	bl	8004234 <SKprintf>
    SKprintf("  FinalRangeTimeoutMicroSecs = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.FinalRangeTimeoutMicroSecs	);
 80051ac:	4b4a      	ldr	r3, [pc, #296]	; (80052d8 <vl53data_disp+0x43c>)
 80051ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80051b2:	4619      	mov	r1, r3
 80051b4:	4854      	ldr	r0, [pc, #336]	; (8005308 <vl53data_disp+0x46c>)
 80051b6:	f7ff f83d 	bl	8004234 <SKprintf>
    SKprintf("  FinalRangeVcselPulsePeriod = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.FinalRangeVcselPulsePeriod	);
 80051ba:	4b47      	ldr	r3, [pc, #284]	; (80052d8 <vl53data_disp+0x43c>)
 80051bc:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80051c0:	4619      	mov	r1, r3
 80051c2:	4852      	ldr	r0, [pc, #328]	; (800530c <vl53data_disp+0x470>)
 80051c4:	f7ff f836 	bl	8004234 <SKprintf>
    SKprintf("  PreRangeTimeoutMicroSecs = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.PreRangeTimeoutMicroSecs	);
 80051c8:	4b43      	ldr	r3, [pc, #268]	; (80052d8 <vl53data_disp+0x43c>)
 80051ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051ce:	4619      	mov	r1, r3
 80051d0:	484f      	ldr	r0, [pc, #316]	; (8005310 <vl53data_disp+0x474>)
 80051d2:	f7ff f82f 	bl	8004234 <SKprintf>
    SKprintf("  PreRangeVcselPulsePeriod = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.PreRangeVcselPulsePeriod	);
 80051d6:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <vl53data_disp+0x43c>)
 80051d8:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80051dc:	4619      	mov	r1, r3
 80051de:	484d      	ldr	r0, [pc, #308]	; (8005314 <vl53data_disp+0x478>)
 80051e0:	f7ff f828 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstRefArray = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.SigmaEstRefArray	);
 80051e4:	4b3c      	ldr	r3, [pc, #240]	; (80052d8 <vl53data_disp+0x43c>)
 80051e6:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 80051ea:	4619      	mov	r1, r3
 80051ec:	484a      	ldr	r0, [pc, #296]	; (8005318 <vl53data_disp+0x47c>)
 80051ee:	f7ff f821 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstEffPulseWidth = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.SigmaEstEffPulseWidth	);
 80051f2:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <vl53data_disp+0x43c>)
 80051f4:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80051f8:	4619      	mov	r1, r3
 80051fa:	4848      	ldr	r0, [pc, #288]	; (800531c <vl53data_disp+0x480>)
 80051fc:	f7ff f81a 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstEffAmbWidth = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.SigmaEstEffAmbWidth	);
 8005200:	4b35      	ldr	r3, [pc, #212]	; (80052d8 <vl53data_disp+0x43c>)
 8005202:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8005206:	4619      	mov	r1, r3
 8005208:	4845      	ldr	r0, [pc, #276]	; (8005320 <vl53data_disp+0x484>)
 800520a:	f7ff f813 	bl	8004234 <SKprintf>
    SKprintf("  ReadDataFromDeviceDone = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.ReadDataFromDeviceDone	);
 800520e:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <vl53data_disp+0x43c>)
 8005210:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005214:	4619      	mov	r1, r3
 8005216:	4843      	ldr	r0, [pc, #268]	; (8005324 <vl53data_disp+0x488>)
 8005218:	f7ff f80c 	bl	8004234 <SKprintf>
    SKprintf("  ModuleId = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.ModuleId	);
 800521c:	4b2e      	ldr	r3, [pc, #184]	; (80052d8 <vl53data_disp+0x43c>)
 800521e:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8005222:	4619      	mov	r1, r3
 8005224:	4840      	ldr	r0, [pc, #256]	; (8005328 <vl53data_disp+0x48c>)
 8005226:	f7ff f805 	bl	8004234 <SKprintf>
    SKprintf("  Revision = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.Revision	);
 800522a:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <vl53data_disp+0x43c>)
 800522c:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8005230:	4619      	mov	r1, r3
 8005232:	483e      	ldr	r0, [pc, #248]	; (800532c <vl53data_disp+0x490>)
 8005234:	f7fe fffe 	bl	8004234 <SKprintf>
    SKprintf("  ProductId[VL53L0X_MAX_STRING_LENGTH] = %s\r\n",	&MyDevice.Data.DeviceSpecificParameters.ProductId[0]	);
 8005238:	493d      	ldr	r1, [pc, #244]	; (8005330 <vl53data_disp+0x494>)
 800523a:	483e      	ldr	r0, [pc, #248]	; (8005334 <vl53data_disp+0x498>)
 800523c:	f7fe fffa 	bl	8004234 <SKprintf>
    SKprintf("  ReferenceSpadCount = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.ReferenceSpadCount	);
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <vl53data_disp+0x43c>)
 8005242:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8005246:	4619      	mov	r1, r3
 8005248:	483b      	ldr	r0, [pc, #236]	; (8005338 <vl53data_disp+0x49c>)
 800524a:	f7fe fff3 	bl	8004234 <SKprintf>
    SKprintf("  ReferenceSpadType = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.ReferenceSpadType	);
 800524e:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <vl53data_disp+0x43c>)
 8005250:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005254:	4619      	mov	r1, r3
 8005256:	4839      	ldr	r0, [pc, #228]	; (800533c <vl53data_disp+0x4a0>)
 8005258:	f7fe ffec 	bl	8004234 <SKprintf>
    SKprintf("  RefSpadsInitialised = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.RefSpadsInitialised	);
 800525c:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <vl53data_disp+0x43c>)
 800525e:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8005262:	4619      	mov	r1, r3
 8005264:	4836      	ldr	r0, [pc, #216]	; (8005340 <vl53data_disp+0x4a4>)
 8005266:	f7fe ffe5 	bl	8004234 <SKprintf>
    SKprintf("  PartUIDUpper = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.PartUIDUpper	);
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <vl53data_disp+0x43c>)
 800526c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005270:	4619      	mov	r1, r3
 8005272:	4834      	ldr	r0, [pc, #208]	; (8005344 <vl53data_disp+0x4a8>)
 8005274:	f7fe ffde 	bl	8004234 <SKprintf>
    SKprintf("  PartUIDLower = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.PartUIDLower	);
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <vl53data_disp+0x43c>)
 800527a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800527e:	4619      	mov	r1, r3
 8005280:	4831      	ldr	r0, [pc, #196]	; (8005348 <vl53data_disp+0x4ac>)
 8005282:	f7fe ffd7 	bl	8004234 <SKprintf>
    SKprintf("  SignalRateMeasFixed400mm = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.SignalRateMeasFixed400mm	);
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <vl53data_disp+0x43c>)
 8005288:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800528c:	4619      	mov	r1, r3
 800528e:	482f      	ldr	r0, [pc, #188]	; (800534c <vl53data_disp+0x4b0>)
 8005290:	f7fe ffd0 	bl	8004234 <SKprintf>

    SKprintf("VL53L0X_SpadData_t\r\n");
 8005294:	482e      	ldr	r0, [pc, #184]	; (8005350 <vl53data_disp+0x4b4>)
 8005296:	f7fe ffcd 	bl	8004234 <SKprintf>
//    SKprintf("  RefSpadEnables = 0x%x\r\n",	MyDevice.Data.SpadData.RefSpadEnables[VL53L0X_REF_SPAD_BUFFER_SIZE]	);
    SKprintf("  RefSpadEnables[] = ");
 800529a:	482e      	ldr	r0, [pc, #184]	; (8005354 <vl53data_disp+0x4b8>)
 800529c:	f7fe ffca 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_REF_SPAD_BUFFER_SIZE; i++){
 80052a0:	2300      	movs	r3, #0
 80052a2:	607b      	str	r3, [r7, #4]
 80052a4:	e00c      	b.n	80052c0 <vl53data_disp+0x424>
        SKprintf("0x%02x,",	MyDevice.Data.SpadData.RefSpadEnables[i]	);
 80052a6:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <vl53data_disp+0x43c>)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	4619      	mov	r1, r3
 80052b4:	4828      	ldr	r0, [pc, #160]	; (8005358 <vl53data_disp+0x4bc>)
 80052b6:	f7fe ffbd 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_REF_SPAD_BUFFER_SIZE; i++){
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3301      	adds	r3, #1
 80052be:	607b      	str	r3, [r7, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	ddef      	ble.n	80052a6 <vl53data_disp+0x40a>
    }
    SKprintf("\r\n");
 80052c6:	4806      	ldr	r0, [pc, #24]	; (80052e0 <vl53data_disp+0x444>)
 80052c8:	f7fe ffb4 	bl	8004234 <SKprintf>

    //    SKprintf("  RefGoodSpadMap = 0x%x\r\n",	MyDevice.Data.SpadData.RefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE]	);

    SKprintf("  RefGoodSpadMap[] = ");
 80052cc:	4823      	ldr	r0, [pc, #140]	; (800535c <vl53data_disp+0x4c0>)
 80052ce:	f7fe ffb1 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_REF_SPAD_BUFFER_SIZE; i++){
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	e050      	b.n	800537a <vl53data_disp+0x4de>
 80052d8:	20002034 	.word	0x20002034
 80052dc:	08019394 	.word	0x08019394
 80052e0:	0801935c 	.word	0x0801935c
 80052e4:	08019544 	.word	0x08019544
 80052e8:	0801955c 	.word	0x0801955c
 80052ec:	08019570 	.word	0x08019570
 80052f0:	08019588 	.word	0x08019588
 80052f4:	080195a0 	.word	0x080195a0
 80052f8:	080195b8 	.word	0x080195b8
 80052fc:	080195e0 	.word	0x080195e0
 8005300:	080195fc 	.word	0x080195fc
 8005304:	0801961c 	.word	0x0801961c
 8005308:	08019640 	.word	0x08019640
 800530c:	08019668 	.word	0x08019668
 8005310:	08019690 	.word	0x08019690
 8005314:	080196b4 	.word	0x080196b4
 8005318:	080196d8 	.word	0x080196d8
 800531c:	080196f4 	.word	0x080196f4
 8005320:	08019718 	.word	0x08019718
 8005324:	08019738 	.word	0x08019738
 8005328:	0801975c 	.word	0x0801975c
 800532c:	08019770 	.word	0x08019770
 8005330:	20002127 	.word	0x20002127
 8005334:	08019784 	.word	0x08019784
 8005338:	080197b4 	.word	0x080197b4
 800533c:	080197d4 	.word	0x080197d4
 8005340:	080197f4 	.word	0x080197f4
 8005344:	08019814 	.word	0x08019814
 8005348:	0801982c 	.word	0x0801982c
 800534c:	08019844 	.word	0x08019844
 8005350:	08019868 	.word	0x08019868
 8005354:	08019880 	.word	0x08019880
 8005358:	08019354 	.word	0x08019354
 800535c:	08019898 	.word	0x08019898
        SKprintf("0x%02x,",	MyDevice.Data.SpadData.RefGoodSpadMap[i]	);
 8005360:	4a41      	ldr	r2, [pc, #260]	; (8005468 <vl53data_disp+0x5cc>)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4413      	add	r3, r2
 8005366:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	4619      	mov	r1, r3
 800536e:	483f      	ldr	r0, [pc, #252]	; (800546c <vl53data_disp+0x5d0>)
 8005370:	f7fe ff60 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_REF_SPAD_BUFFER_SIZE; i++){
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3301      	adds	r3, #1
 8005378:	607b      	str	r3, [r7, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b05      	cmp	r3, #5
 800537e:	ddef      	ble.n	8005360 <vl53data_disp+0x4c4>
    }
    SKprintf("\r\n");
 8005380:	483b      	ldr	r0, [pc, #236]	; (8005470 <vl53data_disp+0x5d4>)
 8005382:	f7fe ff57 	bl	8004234 <SKprintf>


    SKprintf("ETC.\r\n");
 8005386:	483b      	ldr	r0, [pc, #236]	; (8005474 <vl53data_disp+0x5d8>)
 8005388:	f7fe ff54 	bl	8004234 <SKprintf>
    SKprintf("  SequenceConfig = 0x%x\r\n",	MyDevice.Data.SequenceConfig	);
 800538c:	4b36      	ldr	r3, [pc, #216]	; (8005468 <vl53data_disp+0x5cc>)
 800538e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005392:	4619      	mov	r1, r3
 8005394:	4838      	ldr	r0, [pc, #224]	; (8005478 <vl53data_disp+0x5dc>)
 8005396:	f7fe ff4d 	bl	8004234 <SKprintf>
    SKprintf("  RangeFractionalEnable = 0x%x\r\n",	MyDevice.Data.RangeFractionalEnable	);
 800539a:	4b33      	ldr	r3, [pc, #204]	; (8005468 <vl53data_disp+0x5cc>)
 800539c:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80053a0:	4619      	mov	r1, r3
 80053a2:	4836      	ldr	r0, [pc, #216]	; (800547c <vl53data_disp+0x5e0>)
 80053a4:	f7fe ff46 	bl	8004234 <SKprintf>
    SKprintf("  PalState = 0x%x\r\n",	MyDevice.Data.PalState	);
 80053a8:	4b2f      	ldr	r3, [pc, #188]	; (8005468 <vl53data_disp+0x5cc>)
 80053aa:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80053ae:	4619      	mov	r1, r3
 80053b0:	4833      	ldr	r0, [pc, #204]	; (8005480 <vl53data_disp+0x5e4>)
 80053b2:	f7fe ff3f 	bl	8004234 <SKprintf>
    SKprintf("  PowerMode = 0x%x\r\n",	MyDevice.Data.PowerMode	);
 80053b6:	4b2c      	ldr	r3, [pc, #176]	; (8005468 <vl53data_disp+0x5cc>)
 80053b8:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 80053bc:	4619      	mov	r1, r3
 80053be:	4831      	ldr	r0, [pc, #196]	; (8005484 <vl53data_disp+0x5e8>)
 80053c0:	f7fe ff38 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstRefArray = 0x%x\r\n",	MyDevice.Data.SigmaEstRefArray	);
 80053c4:	4b28      	ldr	r3, [pc, #160]	; (8005468 <vl53data_disp+0x5cc>)
 80053c6:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 80053ca:	4619      	mov	r1, r3
 80053cc:	482e      	ldr	r0, [pc, #184]	; (8005488 <vl53data_disp+0x5ec>)
 80053ce:	f7fe ff31 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstEffPulseWidth = 0x%x\r\n",	MyDevice.Data.SigmaEstEffPulseWidth	);
 80053d2:	4b25      	ldr	r3, [pc, #148]	; (8005468 <vl53data_disp+0x5cc>)
 80053d4:	f8b3 3136 	ldrh.w	r3, [r3, #310]	; 0x136
 80053d8:	4619      	mov	r1, r3
 80053da:	482c      	ldr	r0, [pc, #176]	; (800548c <vl53data_disp+0x5f0>)
 80053dc:	f7fe ff2a 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstEffAmbWidth = 0x%x\r\n",	MyDevice.Data.SigmaEstEffAmbWidth	);
 80053e0:	4b21      	ldr	r3, [pc, #132]	; (8005468 <vl53data_disp+0x5cc>)
 80053e2:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 80053e6:	4619      	mov	r1, r3
 80053e8:	4829      	ldr	r0, [pc, #164]	; (8005490 <vl53data_disp+0x5f4>)
 80053ea:	f7fe ff23 	bl	8004234 <SKprintf>
    SKprintf("  StopVariable = 0x%x\r\n",	MyDevice.Data.StopVariable	);
 80053ee:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <vl53data_disp+0x5cc>)
 80053f0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80053f4:	4619      	mov	r1, r3
 80053f6:	4827      	ldr	r0, [pc, #156]	; (8005494 <vl53data_disp+0x5f8>)
 80053f8:	f7fe ff1c 	bl	8004234 <SKprintf>
    SKprintf("  targetRefRate = 0x%x\r\n",	MyDevice.Data.targetRefRate	);
 80053fc:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <vl53data_disp+0x5cc>)
 80053fe:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8005402:	4619      	mov	r1, r3
 8005404:	4824      	ldr	r0, [pc, #144]	; (8005498 <vl53data_disp+0x5fc>)
 8005406:	f7fe ff15 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstimate = 0x%u\r\n",	MyDevice.Data.SigmaEstimate	);
 800540a:	4b17      	ldr	r3, [pc, #92]	; (8005468 <vl53data_disp+0x5cc>)
 800540c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005410:	4619      	mov	r1, r3
 8005412:	4822      	ldr	r0, [pc, #136]	; (800549c <vl53data_disp+0x600>)
 8005414:	f7fe ff0e 	bl	8004234 <SKprintf>
    SKprintf("  SignalEstimate = 0x%u\r\n",	MyDevice.Data.SignalEstimate	);
 8005418:	4b13      	ldr	r3, [pc, #76]	; (8005468 <vl53data_disp+0x5cc>)
 800541a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800541e:	4619      	mov	r1, r3
 8005420:	481f      	ldr	r0, [pc, #124]	; (80054a0 <vl53data_disp+0x604>)
 8005422:	f7fe ff07 	bl	8004234 <SKprintf>
    SKprintf("  LastSignalRefMcps = 0x%u\r\n",	MyDevice.Data.LastSignalRefMcps	);
 8005426:	4b10      	ldr	r3, [pc, #64]	; (8005468 <vl53data_disp+0x5cc>)
 8005428:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800542c:	4619      	mov	r1, r3
 800542e:	481d      	ldr	r0, [pc, #116]	; (80054a4 <vl53data_disp+0x608>)
 8005430:	f7fe ff00 	bl	8004234 <SKprintf>
//    SKprintf("  *pTuningSettingsPointer = 0x%x\r\n",	MyDevice.Data.*pTuningSettingsPointer	);
    SKprintf("  UseInternalTuningSettings = 0x%x\r\n",	MyDevice.Data.UseInternalTuningSettings	);
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <vl53data_disp+0x5cc>)
 8005436:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800543a:	4619      	mov	r1, r3
 800543c:	481a      	ldr	r0, [pc, #104]	; (80054a8 <vl53data_disp+0x60c>)
 800543e:	f7fe fef9 	bl	8004234 <SKprintf>
    SKprintf("  LinearityCorrectiveGain = 0x%x\r\n",	MyDevice.Data.LinearityCorrectiveGain	);
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <vl53data_disp+0x5cc>)
 8005444:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005448:	4619      	mov	r1, r3
 800544a:	4818      	ldr	r0, [pc, #96]	; (80054ac <vl53data_disp+0x610>)
 800544c:	f7fe fef2 	bl	8004234 <SKprintf>

    SKprintf("  I2cDevAddr = 0x%x\r\n",	MyDevice.I2cDevAddr	);
 8005450:	4b05      	ldr	r3, [pc, #20]	; (8005468 <vl53data_disp+0x5cc>)
 8005452:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005456:	4619      	mov	r1, r3
 8005458:	4815      	ldr	r0, [pc, #84]	; (80054b0 <vl53data_disp+0x614>)
 800545a:	f7fe feeb 	bl	8004234 <SKprintf>
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20002034 	.word	0x20002034
 800546c:	08019354 	.word	0x08019354
 8005470:	0801935c 	.word	0x0801935c
 8005474:	080198b0 	.word	0x080198b0
 8005478:	080198b8 	.word	0x080198b8
 800547c:	080198d4 	.word	0x080198d4
 8005480:	080198f8 	.word	0x080198f8
 8005484:	0801990c 	.word	0x0801990c
 8005488:	080196d8 	.word	0x080196d8
 800548c:	080196f4 	.word	0x080196f4
 8005490:	08019718 	.word	0x08019718
 8005494:	08019924 	.word	0x08019924
 8005498:	0801993c 	.word	0x0801993c
 800549c:	08019958 	.word	0x08019958
 80054a0:	08019974 	.word	0x08019974
 80054a4:	08019990 	.word	0x08019990
 80054a8:	080199b0 	.word	0x080199b0
 80054ac:	080199d8 	.word	0x080199d8
 80054b0:	080199fc 	.word	0x080199fc

080054b4 <VL53L0X_GetVersion>:
#endif

/* Group PAL General Functions */

VL53L0X_Error VL53L0X_GetVersion(VL53L0X_Version_t *pVersion)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054bc:	2300      	movs	r3, #0
 80054be:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	pVersion->major = VL53L0X_IMPLEMENTATION_VER_MAJOR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	711a      	strb	r2, [r3, #4]
	pVersion->minor = VL53L0X_IMPLEMENTATION_VER_MINOR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	715a      	strb	r2, [r3, #5]
	pVersion->build = VL53L0X_IMPLEMENTATION_VER_SUB;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	719a      	strb	r2, [r3, #6]

	pVersion->revision = VL53L0X_IMPLEMENTATION_VER_REVISION;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f241 22d7 	movw	r2, #4823	; 0x12d7
 80054d8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80054da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f005 f804 	bl	800a508 <VL53L0X_get_device_info>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <VL53L0X_GetRangeStatusString>:
	return Status;
}

VL53L0X_Error VL53L0X_GetRangeStatusString(uint8_t RangeStatus,
	char *pRangeStatusString)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	6039      	str	r1, [r7, #0]
 800551a:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800551c:	2300      	movs	r3, #0
 800551e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_range_status_string(RangeStatus,
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f005 f873 	bl	800a610 <VL53L0X_get_range_status_string>
 800552a:	4603      	mov	r3, r0
 800552c:	73fb      	strb	r3, [r7, #15]
		pRangeStatusString);

	LOG_FUNCTION_END(Status);
	return Status;
 800552e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <VL53L0X_GetPalErrorString>:

VL53L0X_Error VL53L0X_GetPalErrorString(VL53L0X_Error PalErrorCode,
	char *pPalErrorString)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	4603      	mov	r3, r0
 8005542:	6039      	str	r1, [r7, #0]
 8005544:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_pal_error_string(PalErrorCode, pPalErrorString);
 800554a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f005 f8d7 	bl	800a704 <VL53L0X_get_pal_error_string>
 8005556:	4603      	mov	r3, r0
 8005558:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800555a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005570:	2300      	movs	r3, #0
 8005572:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f001 fe1c 	bl	80071b4 <VL53L0X_get_offset_calibration_data_micro_meter>
 800557c:	4603      	mov	r3, r0
 800557e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005580:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800558c:	b5b0      	push	{r4, r5, r7, lr}
 800558e:	b096      	sub	sp, #88	; 0x58
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005594:	2300      	movs	r3, #0
 8005596:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	int i;
	uint8_t StopVariable;

	LOG_FUNCTION_START("");

SKprintf("VL53L0X_DataInit()\r\n");
 800559a:	48c1      	ldr	r0, [pc, #772]	; (80058a0 <VL53L0X_DataInit+0x314>)
 800559c:	f7fe fe4a 	bl	8004234 <SKprintf>
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE){
 80055a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10d      	bne.n	80055c4 <VL53L0X_DataInit+0x38>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80055a8:	2200      	movs	r2, #0
 80055aa:	2188      	movs	r1, #136	; 0x88
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f005 fb49 	bl	800ac44 <VL53L0X_WrByte>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		SKprintf(" status=%d\r\n",Status);
 80055b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055bc:	4619      	mov	r1, r3
 80055be:	48b9      	ldr	r0, [pc, #740]	; (80058a4 <VL53L0X_DataInit+0x318>)
 80055c0:	f7fe fe38 	bl	8004234 <SKprintf>
	}
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055d2:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80055dc:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4ab1      	ldr	r2, [pc, #708]	; (80058a8 <VL53L0X_DataInit+0x31c>)
 80055e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4ab0      	ldr	r2, [pc, #704]	; (80058ac <VL53L0X_DataInit+0x320>)
 80055ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80055f6:	f107 0310 	add.w	r3, r7, #16
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fafd 	bl	8005bfc <VL53L0X_GetDeviceParameters>
 8005602:	4603      	mov	r3, r0
 8005604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


	if (Status == VL53L0X_ERROR_NONE) {
 8005608:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800560c:	2b00      	cmp	r3, #0
 800560e:	d115      	bne.n	800563c <VL53L0X_DataInit+0xb0>
		/* initialize PAL values */
		SKprintf("VL53L0X_DataInit()001\r\n");
 8005610:	48a7      	ldr	r0, [pc, #668]	; (80058b0 <VL53L0X_DataInit+0x324>)
 8005612:	f7fe fe0f 	bl	8004234 <SKprintf>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005616:	2300      	movs	r3, #0
 8005618:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800561a:	2300      	movs	r3, #0
 800561c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f103 0410 	add.w	r4, r3, #16
 8005624:	f107 0510 	add.w	r5, r7, #16
 8005628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800562a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800562c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800562e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005634:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005638:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2264      	movs	r2, #100	; 0x64
 8005640:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f44f 7261 	mov.w	r2, #900	; 0x384
 800564a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005654:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800565e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800566a:	2201      	movs	r2, #1
 800566c:	2180      	movs	r1, #128	; 0x80
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f005 fae8 	bl	800ac44 <VL53L0X_WrByte>
 8005674:	4603      	mov	r3, r0
 8005676:	461a      	mov	r2, r3
 8005678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800567c:	4313      	orrs	r3, r2
 800567e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005682:	2201      	movs	r2, #1
 8005684:	21ff      	movs	r1, #255	; 0xff
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f005 fadc 	bl	800ac44 <VL53L0X_WrByte>
 800568c:	4603      	mov	r3, r0
 800568e:	461a      	mov	r2, r3
 8005690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005694:	4313      	orrs	r3, r2
 8005696:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800569a:	2200      	movs	r2, #0
 800569c:	2100      	movs	r1, #0
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f005 fad0 	bl	800ac44 <VL53L0X_WrByte>
 80056a4:	4603      	mov	r3, r0
 80056a6:	461a      	mov	r2, r3
 80056a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80056b2:	f107 030f 	add.w	r3, r7, #15
 80056b6:	461a      	mov	r2, r3
 80056b8:	2191      	movs	r1, #145	; 0x91
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f005 fb44 	bl	800ad48 <VL53L0X_RdByte>
 80056c0:	4603      	mov	r3, r0
 80056c2:	461a      	mov	r2, r3
 80056c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80056d6:	2201      	movs	r2, #1
 80056d8:	2100      	movs	r1, #0
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f005 fab2 	bl	800ac44 <VL53L0X_WrByte>
 80056e0:	4603      	mov	r3, r0
 80056e2:	461a      	mov	r2, r3
 80056e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80056ee:	2200      	movs	r2, #0
 80056f0:	21ff      	movs	r1, #255	; 0xff
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f005 faa6 	bl	800ac44 <VL53L0X_WrByte>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005700:	4313      	orrs	r3, r2
 8005702:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005706:	2200      	movs	r2, #0
 8005708:	2180      	movs	r1, #128	; 0x80
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f005 fa9a 	bl	800ac44 <VL53L0X_WrByte>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005718:	4313      	orrs	r3, r2
 800571a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800571e:	2300      	movs	r3, #0
 8005720:	653b      	str	r3, [r7, #80]	; 0x50
 8005722:	e014      	b.n	800574e <VL53L0X_DataInit+0x1c2>
		if (Status == VL53L0X_ERROR_NONE)
 8005724:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005728:	2b00      	cmp	r3, #0
 800572a:	d114      	bne.n	8005756 <VL53L0X_DataInit+0x1ca>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800572c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572e:	b29b      	uxth	r3, r3
 8005730:	2201      	movs	r2, #1
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fd6d 	bl	8006214 <VL53L0X_SetLimitCheckEnable>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005742:	4313      	orrs	r3, r2
 8005744:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574a:	3301      	adds	r3, #1
 800574c:	653b      	str	r3, [r7, #80]	; 0x50
 800574e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005750:	2b05      	cmp	r3, #5
 8005752:	dde7      	ble.n	8005724 <VL53L0X_DataInit+0x198>
 8005754:	e000      	b.n	8005758 <VL53L0X_DataInit+0x1cc>
		else
			break;
 8005756:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE){
 8005758:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <VL53L0X_DataInit+0x1ea>
		SKprintf("VL53L0X_DataInit()002\r\n");
 8005760:	4854      	ldr	r0, [pc, #336]	; (80058b4 <VL53L0X_DataInit+0x328>)
 8005762:	f7fe fd67 	bl	8004234 <SKprintf>
		Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);
 8005766:	2200      	movs	r2, #0
 8005768:	2102      	movs	r1, #2
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fd52 	bl	8006214 <VL53L0X_SetLimitCheckEnable>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	if (Status == VL53L0X_ERROR_NONE){
 8005776:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <VL53L0X_DataInit+0x208>
		SKprintf("VL53L0X_DataInit()003\r\n");
 800577e:	484e      	ldr	r0, [pc, #312]	; (80058b8 <VL53L0X_DataInit+0x32c>)
 8005780:	f7fe fd58 	bl	8004234 <SKprintf>
		Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);
 8005784:	2200      	movs	r2, #0
 8005786:	2103      	movs	r1, #3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fd43 	bl	8006214 <VL53L0X_SetLimitCheckEnable>
 800578e:	4603      	mov	r3, r0
 8005790:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	if (Status == VL53L0X_ERROR_NONE){
 8005794:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10a      	bne.n	80057b2 <VL53L0X_DataInit+0x226>
		SKprintf("VL53L0X_DataInit()004\r\n");
 800579c:	4847      	ldr	r0, [pc, #284]	; (80058bc <VL53L0X_DataInit+0x330>)
 800579e:	f7fe fd49 	bl	8004234 <SKprintf>
		Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);
 80057a2:	2200      	movs	r2, #0
 80057a4:	2104      	movs	r1, #4
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fd34 	bl	8006214 <VL53L0X_SetLimitCheckEnable>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	if (Status == VL53L0X_ERROR_NONE){
 80057b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <VL53L0X_DataInit+0x244>
		SKprintf("VL53L0X_DataInit()005\r\n");
 80057ba:	4841      	ldr	r0, [pc, #260]	; (80058c0 <VL53L0X_DataInit+0x334>)
 80057bc:	f7fe fd3a 	bl	8004234 <SKprintf>
		Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);
 80057c0:	2200      	movs	r2, #0
 80057c2:	2105      	movs	r1, #5
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fd25 	bl	8006214 <VL53L0X_SetLimitCheckEnable>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80057d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <VL53L0X_DataInit+0x264>
		SKprintf("VL53L0X_DataInit()006\r\n");
 80057d8:	483a      	ldr	r0, [pc, #232]	; (80058c4 <VL53L0X_DataInit+0x338>)
 80057da:	f7fe fd2b 	bl	8004234 <SKprintf>
		Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(18 * 65536));
 80057de:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80057e2:	2100      	movs	r1, #0
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fdc5 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80057f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <VL53L0X_DataInit+0x284>
		SKprintf("VL53L0X_DataInit()007\r\n");
 80057f8:	4833      	ldr	r0, [pc, #204]	; (80058c8 <VL53L0X_DataInit+0x33c>)
 80057fa:	f7fe fd1b 	bl	8004234 <SKprintf>
		Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(25 * 65536 / 100));
 80057fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005802:	2101      	movs	r1, #1
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fdb5 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 800580a:	4603      	mov	r3, r0
 800580c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005810:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10b      	bne.n	8005830 <VL53L0X_DataInit+0x2a4>
		SKprintf("VL53L0X_DataInit()008\r\n");
 8005818:	482c      	ldr	r0, [pc, #176]	; (80058cc <VL53L0X_DataInit+0x340>)
 800581a:	f7fe fd0b 	bl	8004234 <SKprintf>
		Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, (FixPoint1616_t)(35 * 65536));
 800581e:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005822:	2102      	movs	r1, #2
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fda5 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 800582a:	4603      	mov	r3, r0
 800582c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005830:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <VL53L0X_DataInit+0x2c2>
		SKprintf("VL53L0X_DataInit()009\r\n");
 8005838:	4825      	ldr	r0, [pc, #148]	; (80058d0 <VL53L0X_DataInit+0x344>)
 800583a:	f7fe fcfb 	bl	8004234 <SKprintf>
		Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, (FixPoint1616_t)(0 * 65536));
 800583e:	2200      	movs	r2, #0
 8005840:	2103      	movs	r1, #3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fd96 	bl	8006374 <VL53L0X_SetLimitCheckValue>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800584e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005852:	2b00      	cmp	r3, #0
 8005854:	d112      	bne.n	800587c <VL53L0X_DataInit+0x2f0>

		SKprintf("VL53L0X_DataInit()010\r\n");
 8005856:	481f      	ldr	r0, [pc, #124]	; (80058d4 <VL53L0X_DataInit+0x348>)
 8005858:	f7fe fcec 	bl	8004234 <SKprintf>
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	22ff      	movs	r2, #255	; 0xff
 8005860:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8005864:	22ff      	movs	r2, #255	; 0xff
 8005866:	2101      	movs	r1, #1
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f005 f9eb 	bl	800ac44 <VL53L0X_WrByte>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE){
 800587c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <VL53L0X_DataInit+0x306>
		SKprintf("VL53L0X_DataInit()012\r\n");
 8005884:	4814      	ldr	r0, [pc, #80]	; (80058d8 <VL53L0X_DataInit+0x34c>)
 8005886:	f7fe fcd5 	bl	8004234 <SKprintf>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005892:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005896:	4618      	mov	r0, r3
 8005898:	3758      	adds	r7, #88	; 0x58
 800589a:	46bd      	mov	sp, r7
 800589c:	bdb0      	pop	{r4, r5, r7, pc}
 800589e:	bf00      	nop
 80058a0:	08019a14 	.word	0x08019a14
 80058a4:	08019a2c 	.word	0x08019a2c
 80058a8:	00016b85 	.word	0x00016b85
 80058ac:	000970a4 	.word	0x000970a4
 80058b0:	08019a3c 	.word	0x08019a3c
 80058b4:	08019a54 	.word	0x08019a54
 80058b8:	08019a6c 	.word	0x08019a6c
 80058bc:	08019a84 	.word	0x08019a84
 80058c0:	08019a9c 	.word	0x08019a9c
 80058c4:	08019ab4 	.word	0x08019ab4
 80058c8:	08019acc 	.word	0x08019acc
 80058cc:	08019ae4 	.word	0x08019ae4
 80058d0:	08019afc 	.word	0x08019afc
 80058d4:	08019b14 	.word	0x08019b14
 80058d8:	08019b2c 	.word	0x08019b2c

080058dc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80058dc:	b5b0      	push	{r4, r5, r7, lr}
 80058de:	b09e      	sub	sp, #120	; 0x78
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058e4:	2300      	movs	r3, #0
 80058e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80058ea:	f107 031c 	add.w	r3, r7, #28
 80058ee:	2240      	movs	r2, #64	; 0x40
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f00f f8e6 	bl	8014ac4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005918:	2101      	movs	r1, #1
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f002 fba1 	bl	8008062 <VL53L0X_get_info_from_device>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800592c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800593c:	2b01      	cmp	r3, #1
 800593e:	d80d      	bhi.n	800595c <VL53L0X_StaticInit+0x80>
 8005940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005944:	2b01      	cmp	r3, #1
 8005946:	d102      	bne.n	800594e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800594a:	2b20      	cmp	r3, #32
 800594c:	d806      	bhi.n	800595c <VL53L0X_StaticInit+0x80>
 800594e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10e      	bne.n	8005974 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005958:	2b0c      	cmp	r3, #12
 800595a:	d90b      	bls.n	8005974 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800595c:	f107 0218 	add.w	r2, r7, #24
 8005960:	f107 0314 	add.w	r3, r7, #20
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 fe20 	bl	80075ac <VL53L0X_perform_ref_spad_management>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005972:	e009      	b.n	8005988 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005978:	461a      	mov	r2, r3
 800597a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f002 f821 	bl	80079c4 <VL53L0X_set_reference_spads>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005988:	4b94      	ldr	r3, [pc, #592]	; (8005bdc <VL53L0X_StaticInit+0x300>)
 800598a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800598c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10f      	bne.n	80059b4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800599a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800599e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80059ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ae:	e001      	b.n	80059b4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80059b0:	4b8a      	ldr	r3, [pc, #552]	; (8005bdc <VL53L0X_StaticInit+0x300>)
 80059b2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80059b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80059bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f003 fef4 	bl	80097ac <VL53L0X_load_tuning_settings>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80059ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80059d2:	2300      	movs	r3, #0
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2304      	movs	r3, #4
 80059d8:	2200      	movs	r2, #0
 80059da:	2100      	movs	r1, #0
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 f9af 	bl	8006d40 <VL53L0X_SetGpioConfig>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80059e8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d121      	bne.n	8005a34 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80059f0:	2201      	movs	r2, #1
 80059f2:	21ff      	movs	r1, #255	; 0xff
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f005 f925 	bl	800ac44 <VL53L0X_WrByte>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005a00:	f107 031a 	add.w	r3, r7, #26
 8005a04:	461a      	mov	r2, r3
 8005a06:	2184      	movs	r1, #132	; 0x84
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f005 f9c7 	bl	800ad9c <VL53L0X_RdWord>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	461a      	mov	r2, r3
 8005a12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	21ff      	movs	r1, #255	; 0xff
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f005 f90f 	bl	800ac44 <VL53L0X_WrByte>
 8005a26:	4603      	mov	r3, r0
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a34:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d105      	bne.n	8005a48 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005a3c:	8b7b      	ldrh	r3, [r7, #26]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	461a      	mov	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005a48:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d108      	bne.n	8005a62 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005a50:	f107 031c 	add.w	r3, r7, #28
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8d0 	bl	8005bfc <VL53L0X_GetDeviceParameters>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8005a62:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d110      	bne.n	8005a8c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005a6a:	f107 0319 	add.w	r3, r7, #25
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f992 	bl	8005d9a <VL53L0X_GetFractionEnable>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8005a7c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005a84:	7e7a      	ldrb	r2, [r7, #25]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005a8c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10e      	bne.n	8005ab2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f103 0410 	add.w	r4, r3, #16
 8005a9a:	f107 051c 	add.w	r5, r7, #28
 8005a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005aaa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005aae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8005ab2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d111      	bne.n	8005ade <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8005aba:	f107 0319 	add.w	r3, r7, #25
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f005 f940 	bl	800ad48 <VL53L0X_RdByte>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8005ace:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005ad6:	7e7a      	ldrb	r2, [r7, #25]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8005ade:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d107      	bne.n	8005af6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f9ca 	bl	8005e84 <VL53L0X_SetSequenceStepEnable>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005af6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005afe:	2200      	movs	r2, #0
 8005b00:	2102      	movs	r1, #2
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f9be 	bl	8005e84 <VL53L0X_SetSequenceStepEnable>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8005b0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005b1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005b26:	f107 0313 	add.w	r3, r7, #19
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f990 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005b42:	7cfa      	ldrb	r2, [r7, #19]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005b4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005b52:	f107 0313 	add.w	r3, r7, #19
 8005b56:	461a      	mov	r2, r3
 8005b58:	2101      	movs	r1, #1
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f97a 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005b6e:	7cfa      	ldrb	r2, [r7, #19]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005b76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8005b7e:	f107 030c 	add.w	r3, r7, #12
 8005b82:	461a      	mov	r2, r3
 8005b84:	2103      	movs	r1, #3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f002 ffec 	bl	8008b64 <get_sequence_step_timeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005ba2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8005baa:	f107 030c 	add.w	r3, r7, #12
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2104      	movs	r1, #4
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f002 ffd6 	bl	8008b64 <get_sequence_step_timeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005bbe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005bce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3770      	adds	r7, #112	; 0x70
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000054 	.word	0x20000054

08005be0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8005be8:	239d      	movs	r3, #157	; 0x9d
 8005bea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8005bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f8b0 	bl	8005d74 <VL53L0X_GetDeviceMode>
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d107      	bne.n	8005c30 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fa78 	bl	800611c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d107      	bne.n	8005c56 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	3310      	adds	r3, #16
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 faae 	bl	80061ae <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d107      	bne.n	8005c6e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	3314      	adds	r3, #20
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fc7e 	bl	8005566 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d134      	bne.n	8005ce0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005c76:	2300      	movs	r3, #0
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	e02a      	b.n	8005cd2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d12a      	bne.n	8005cda <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	b299      	uxth	r1, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	4413      	add	r3, r2
 8005c92:	3304      	adds	r3, #4
 8005c94:	461a      	mov	r2, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fbce 	bl	8006438 <VL53L0X_GetLimitCheckValue>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d117      	bne.n	8005cde <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	b299      	uxth	r1, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	3318      	adds	r3, #24
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	4413      	add	r3, r2
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fb35 	bl	800632c <VL53L0X_GetLimitCheckEnable>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60bb      	str	r3, [r7, #8]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b05      	cmp	r3, #5
 8005cd6:	ddd1      	ble.n	8005c7c <VL53L0X_GetDeviceParameters+0x80>
 8005cd8:	e002      	b.n	8005ce0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005cde:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d107      	bne.n	8005cf8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	333c      	adds	r3, #60	; 0x3c
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fca6 	bl	8006640 <VL53L0X_GetWrapAroundCheckEnable>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d107      	bne.n	8005d10 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f879 	bl	8005dfe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	2b15      	cmp	r3, #21
 8005d30:	bf8c      	ite	hi
 8005d32:	2201      	movhi	r2, #1
 8005d34:	2200      	movls	r2, #0
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	2a00      	cmp	r2, #0
 8005d3a:	d10e      	bne.n	8005d5a <VL53L0X_SetDeviceMode+0x3e>
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	409a      	lsls	r2, r3
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <VL53L0X_SetDeviceMode+0x54>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf14      	ite	ne
 8005d48:	2301      	movne	r3, #1
 8005d4a:	2300      	moveq	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	741a      	strb	r2, [r3, #16]
		break;
 8005d58:	e001      	b.n	8005d5e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005d5a:	23f8      	movs	r3, #248	; 0xf8
 8005d5c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	0030000b 	.word	0x0030000b

08005d74 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	7c1a      	ldrb	r2, [r3, #16]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	2109      	movs	r1, #9
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f004 ffcb 	bl	800ad48 <VL53L0X_RdByte>
 8005db2:	4603      	mov	r3, r0
 8005db4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f003 fb4e 	bl	800948a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f003 fc1b 	bl	800964a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
 8005e30:	4613      	mov	r3, r2
 8005e32:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005e38:	78ba      	ldrb	r2, [r7, #2]
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f003 f863 	bl	8008f0a <VL53L0X_set_vcsel_pulse_period>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005e66:	7afb      	ldrb	r3, [r7, #11]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f003 fad5 	bl	800941c <VL53L0X_get_vcsel_pulse_period>
 8005e72:	4603      	mov	r3, r0
 8005e74:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
 8005e90:	4613      	mov	r3, r2
 8005e92:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e94:	2300      	movs	r3, #0
 8005e96:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005ea0:	f107 030f 	add.w	r3, r7, #15
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f004 ff4d 	bl	800ad48 <VL53L0X_RdByte>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d15a      	bne.n	8005f74 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8005ebe:	78bb      	ldrb	r3, [r7, #2]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d12b      	bne.n	8005f1c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d825      	bhi.n	8005f16 <VL53L0X_SetSequenceStepEnable+0x92>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ee5 	.word	0x08005ee5
 8005ed4:	08005eef 	.word	0x08005eef
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005f03 	.word	0x08005f03
 8005ee0:	08005f0d 	.word	0x08005f0d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005ee4:	7dbb      	ldrb	r3, [r7, #22]
 8005ee6:	f043 0310 	orr.w	r3, r3, #16
 8005eea:	75bb      	strb	r3, [r7, #22]
				break;
 8005eec:	e043      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005eee:	7dbb      	ldrb	r3, [r7, #22]
 8005ef0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005ef4:	75bb      	strb	r3, [r7, #22]
				break;
 8005ef6:	e03e      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8005ef8:	7dbb      	ldrb	r3, [r7, #22]
 8005efa:	f043 0304 	orr.w	r3, r3, #4
 8005efe:	75bb      	strb	r3, [r7, #22]
				break;
 8005f00:	e039      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005f02:	7dbb      	ldrb	r3, [r7, #22]
 8005f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f08:	75bb      	strb	r3, [r7, #22]
				break;
 8005f0a:	e034      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005f0c:	7dbb      	ldrb	r3, [r7, #22]
 8005f0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f12:	75bb      	strb	r3, [r7, #22]
				break;
 8005f14:	e02f      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f16:	23fc      	movs	r3, #252	; 0xfc
 8005f18:	75fb      	strb	r3, [r7, #23]
 8005f1a:	e02c      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d825      	bhi.n	8005f6e <VL53L0X_SetSequenceStepEnable+0xea>
 8005f22:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f3d 	.word	0x08005f3d
 8005f2c:	08005f47 	.word	0x08005f47
 8005f30:	08005f51 	.word	0x08005f51
 8005f34:	08005f5b 	.word	0x08005f5b
 8005f38:	08005f65 	.word	0x08005f65
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005f3c:	7dbb      	ldrb	r3, [r7, #22]
 8005f3e:	f023 0310 	bic.w	r3, r3, #16
 8005f42:	75bb      	strb	r3, [r7, #22]
				break;
 8005f44:	e017      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8005f46:	7dbb      	ldrb	r3, [r7, #22]
 8005f48:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005f4c:	75bb      	strb	r3, [r7, #22]
				break;
 8005f4e:	e012      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005f50:	7dbb      	ldrb	r3, [r7, #22]
 8005f52:	f023 0304 	bic.w	r3, r3, #4
 8005f56:	75bb      	strb	r3, [r7, #22]
				break;
 8005f58:	e00d      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8005f5a:	7dbb      	ldrb	r3, [r7, #22]
 8005f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f60:	75bb      	strb	r3, [r7, #22]
				break;
 8005f62:	e008      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005f64:	7dbb      	ldrb	r3, [r7, #22]
 8005f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f6a:	75bb      	strb	r3, [r7, #22]
				break;
 8005f6c:	e003      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f6e:	23fc      	movs	r3, #252	; 0xfc
 8005f70:	75fb      	strb	r3, [r7, #23]
 8005f72:	e000      	b.n	8005f76 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8005f74:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	7dba      	ldrb	r2, [r7, #22]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d01e      	beq.n	8005fbc <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8005f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d107      	bne.n	8005f96 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8005f86:	7dbb      	ldrb	r3, [r7, #22]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f004 fe59 	bl	800ac44 <VL53L0X_WrByte>
 8005f92:	4603      	mov	r3, r0
 8005f94:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7dba      	ldrb	r2, [r7, #22]
 8005fa2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005fb4:	6939      	ldr	r1, [r7, #16]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff ff0e 	bl	8005dd8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	607b      	str	r3, [r7, #4]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	72fb      	strb	r3, [r7, #11]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005fe4:	7afb      	ldrb	r3, [r7, #11]
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d836      	bhi.n	8006058 <sequence_step_enabled+0x90>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <sequence_step_enabled+0x28>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006005 	.word	0x08006005
 8005ff4:	08006017 	.word	0x08006017
 8005ff8:	08006029 	.word	0x08006029
 8005ffc:	0800603b 	.word	0x0800603b
 8006000:	0800604d 	.word	0x0800604d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006004:	7abb      	ldrb	r3, [r7, #10]
 8006006:	111b      	asrs	r3, r3, #4
 8006008:	b2db      	uxtb	r3, r3
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	b2da      	uxtb	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	701a      	strb	r2, [r3, #0]
		break;
 8006014:	e022      	b.n	800605c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006016:	7abb      	ldrb	r3, [r7, #10]
 8006018:	10db      	asrs	r3, r3, #3
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	701a      	strb	r2, [r3, #0]
		break;
 8006026:	e019      	b.n	800605c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006028:	7abb      	ldrb	r3, [r7, #10]
 800602a:	109b      	asrs	r3, r3, #2
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	b2da      	uxtb	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	701a      	strb	r2, [r3, #0]
		break;
 8006038:	e010      	b.n	800605c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800603a:	7abb      	ldrb	r3, [r7, #10]
 800603c:	119b      	asrs	r3, r3, #6
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	b2da      	uxtb	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	701a      	strb	r2, [r3, #0]
		break;
 800604a:	e007      	b.n	800605c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800604c:	7abb      	ldrb	r3, [r7, #10]
 800604e:	09db      	lsrs	r3, r3, #7
 8006050:	b2da      	uxtb	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	701a      	strb	r2, [r3, #0]
		break;
 8006056:	e001      	b.n	800605c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006058:	23fc      	movs	r3, #252	; 0xfc
 800605a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800605c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006060:	4618      	mov	r0, r3
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006076:	2300      	movs	r3, #0
 8006078:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800607e:	f107 030e 	add.w	r3, r7, #14
 8006082:	461a      	mov	r2, r3
 8006084:	2101      	movs	r1, #1
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f004 fe5e 	bl	800ad48 <VL53L0X_RdByte>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d107      	bne.n	80060a8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006098:	7bba      	ldrb	r2, [r7, #14]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2100      	movs	r1, #0
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ff92 	bl	8005fc8 <sequence_step_enabled>
 80060a4:	4603      	mov	r3, r0
 80060a6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80060a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d108      	bne.n	80060c2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80060b0:	7bba      	ldrb	r2, [r7, #14]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	3302      	adds	r3, #2
 80060b6:	2101      	movs	r1, #1
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff ff85 	bl	8005fc8 <sequence_step_enabled>
 80060be:	4603      	mov	r3, r0
 80060c0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80060c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d108      	bne.n	80060dc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80060ca:	7bba      	ldrb	r2, [r7, #14]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	3301      	adds	r3, #1
 80060d0:	2102      	movs	r1, #2
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff ff78 	bl	8005fc8 <sequence_step_enabled>
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80060dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d108      	bne.n	80060f6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80060e4:	7bba      	ldrb	r2, [r7, #14]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	3303      	adds	r3, #3
 80060ea:	2103      	movs	r1, #3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff ff6b 	bl	8005fc8 <sequence_step_enabled>
 80060f2:	4603      	mov	r3, r0
 80060f4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80060f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d108      	bne.n	8006110 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80060fe:	7bba      	ldrb	r2, [r7, #14]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	3304      	adds	r3, #4
 8006104:	2104      	movs	r1, #4
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff ff5e 	bl	8005fc8 <sequence_step_enabled>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006110:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800612a:	f107 030c 	add.w	r3, r7, #12
 800612e:	461a      	mov	r2, r3
 8006130:	21f8      	movs	r1, #248	; 0xf8
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f004 fe32 	bl	800ad9c <VL53L0X_RdWord>
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800613c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d108      	bne.n	8006156 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	461a      	mov	r2, r3
 800614a:	2104      	movs	r1, #4
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f004 fe5d 	bl	800ae0c <VL53L0X_RdDWord>
 8006152:	4603      	mov	r3, r0
 8006154:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10c      	bne.n	8006178 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800615e:	89bb      	ldrh	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	89ba      	ldrh	r2, [r7, #12]
 8006168:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006178:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7f1b      	ldrb	r3, [r3, #28]
 8006196:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	7bba      	ldrb	r2, [r7, #14]
 800619c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800619e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80061bc:	f107 030e 	add.w	r3, r7, #14
 80061c0:	461a      	mov	r2, r3
 80061c2:	2120      	movs	r1, #32
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f004 fde9 	bl	800ad9c <VL53L0X_RdWord>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80061ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d118      	bne.n	8006208 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80061d6:	89fb      	ldrh	r3, [r7, #14]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	771a      	strb	r2, [r3, #28]
 80061ee:	e00b      	b.n	8006208 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80061f0:	89fb      	ldrh	r3, [r7, #14]
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006208:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	807b      	strh	r3, [r7, #2]
 8006220:	4613      	mov	r3, r2
 8006222:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006224:	2300      	movs	r3, #0
 8006226:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006234:	887b      	ldrh	r3, [r7, #2]
 8006236:	2b05      	cmp	r3, #5
 8006238:	d902      	bls.n	8006240 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800623a:	23fc      	movs	r3, #252	; 0xfc
 800623c:	75fb      	strb	r3, [r7, #23]
 800623e:	e05b      	b.n	80062f8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006240:	787b      	ldrb	r3, [r7, #1]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800624e:	2301      	movs	r3, #1
 8006250:	73bb      	strb	r3, [r7, #14]
 8006252:	e00a      	b.n	800626a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006254:	887b      	ldrh	r3, [r7, #2]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	330c      	adds	r3, #12
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006266:	2301      	movs	r3, #1
 8006268:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800626a:	887b      	ldrh	r3, [r7, #2]
 800626c:	2b05      	cmp	r3, #5
 800626e:	d841      	bhi.n	80062f4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <VL53L0X_SetLimitCheckEnable+0x64>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	08006291 	.word	0x08006291
 800627c:	0800629b 	.word	0x0800629b
 8006280:	080062b1 	.word	0x080062b1
 8006284:	080062bb 	.word	0x080062bb
 8006288:	080062c5 	.word	0x080062c5
 800628c:	080062dd 	.word	0x080062dd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	7bfa      	ldrb	r2, [r7, #15]
 8006294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006298:	e02e      	b.n	80062f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	2144      	movs	r1, #68	; 0x44
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f004 fcf1 	bl	800ac8c <VL53L0X_WrWord>
 80062aa:	4603      	mov	r3, r0
 80062ac:	75fb      	strb	r3, [r7, #23]

			break;
 80062ae:	e023      	b.n	80062f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	7bfa      	ldrb	r2, [r7, #15]
 80062b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80062b8:	e01e      	b.n	80062f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	7bfa      	ldrb	r2, [r7, #15]
 80062be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80062c2:	e019      	b.n	80062f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80062ca:	7b7b      	ldrb	r3, [r7, #13]
 80062cc:	22fe      	movs	r2, #254	; 0xfe
 80062ce:	2160      	movs	r1, #96	; 0x60
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f004 fd05 	bl	800ace0 <VL53L0X_UpdateByte>
 80062d6:	4603      	mov	r3, r0
 80062d8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80062da:	e00d      	b.n	80062f8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80062e2:	7b7b      	ldrb	r3, [r7, #13]
 80062e4:	22ef      	movs	r2, #239	; 0xef
 80062e6:	2160      	movs	r1, #96	; 0x60
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f004 fcf9 	bl	800ace0 <VL53L0X_UpdateByte>
 80062ee:	4603      	mov	r3, r0
 80062f0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80062f2:	e001      	b.n	80062f8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80062f4:	23fc      	movs	r3, #252	; 0xfc
 80062f6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10f      	bne.n	8006320 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006300:	787b      	ldrb	r3, [r7, #1]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006306:	887b      	ldrh	r3, [r7, #2]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4413      	add	r3, r2
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006312:	e005      	b.n	8006320 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006314:	887b      	ldrh	r3, [r7, #2]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006320:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	460b      	mov	r3, r1
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800633a:	2300      	movs	r3, #0
 800633c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800633e:	897b      	ldrh	r3, [r7, #10]
 8006340:	2b05      	cmp	r3, #5
 8006342:	d905      	bls.n	8006350 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006344:	23fc      	movs	r3, #252	; 0xfc
 8006346:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e008      	b.n	8006362 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006350:	897b      	ldrh	r3, [r7, #10]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4413      	add	r3, r2
 8006356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800635a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	7dba      	ldrb	r2, [r7, #22]
 8006360:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006366:	4618      	mov	r0, r3
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
	...

08006374 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	460b      	mov	r3, r1
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006382:	2300      	movs	r3, #0
 8006384:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006386:	897b      	ldrh	r3, [r7, #10]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006390:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006392:	7dbb      	ldrb	r3, [r7, #22]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d107      	bne.n	80063a8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006398:	897b      	ldrh	r3, [r7, #10]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	330c      	adds	r3, #12
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	e040      	b.n	800642a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80063a8:	897b      	ldrh	r3, [r7, #10]
 80063aa:	2b05      	cmp	r3, #5
 80063ac:	d830      	bhi.n	8006410 <VL53L0X_SetLimitCheckValue+0x9c>
 80063ae:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <VL53L0X_SetLimitCheckValue+0x40>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063cd 	.word	0x080063cd
 80063b8:	080063d5 	.word	0x080063d5
 80063bc:	080063eb 	.word	0x080063eb
 80063c0:	080063f3 	.word	0x080063f3
 80063c4:	080063fb 	.word	0x080063fb
 80063c8:	080063fb 	.word	0x080063fb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80063d2:	e01f      	b.n	8006414 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80063d8:	b29b      	uxth	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	2144      	movs	r1, #68	; 0x44
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f004 fc54 	bl	800ac8c <VL53L0X_WrWord>
 80063e4:	4603      	mov	r3, r0
 80063e6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80063e8:	e014      	b.n	8006414 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80063f0:	e010      	b.n	8006414 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80063f8:	e00c      	b.n	8006414 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80063fe:	b29b      	uxth	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	2164      	movs	r1, #100	; 0x64
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f004 fc41 	bl	800ac8c <VL53L0X_WrWord>
 800640a:	4603      	mov	r3, r0
 800640c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800640e:	e001      	b.n	8006414 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006410:	23fc      	movs	r3, #252	; 0xfc
 8006412:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006414:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800641c:	897b      	ldrh	r3, [r7, #10]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	330c      	adds	r3, #12
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800642a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop

08006438 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	460b      	mov	r3, r1
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006446:	2300      	movs	r3, #0
 8006448:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800644e:	897b      	ldrh	r3, [r7, #10]
 8006450:	2b05      	cmp	r3, #5
 8006452:	d847      	bhi.n	80064e4 <VL53L0X_GetLimitCheckValue+0xac>
 8006454:	a201      	add	r2, pc, #4	; (adr r2, 800645c <VL53L0X_GetLimitCheckValue+0x24>)
 8006456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645a:	bf00      	nop
 800645c:	08006475 	.word	0x08006475
 8006460:	08006481 	.word	0x08006481
 8006464:	080064a7 	.word	0x080064a7
 8006468:	080064b3 	.word	0x080064b3
 800646c:	080064bf 	.word	0x080064bf
 8006470:	080064bf 	.word	0x080064bf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006478:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	77bb      	strb	r3, [r7, #30]
		break;
 800647e:	e033      	b.n	80064e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006480:	f107 0316 	add.w	r3, r7, #22
 8006484:	461a      	mov	r2, r3
 8006486:	2144      	movs	r1, #68	; 0x44
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f004 fc87 	bl	800ad9c <VL53L0X_RdWord>
 800648e:	4603      	mov	r3, r0
 8006490:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006492:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800649a:	8afb      	ldrh	r3, [r7, #22]
 800649c:	025b      	lsls	r3, r3, #9
 800649e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80064a0:	2301      	movs	r3, #1
 80064a2:	77bb      	strb	r3, [r7, #30]
		break;
 80064a4:	e020      	b.n	80064e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	77bb      	strb	r3, [r7, #30]
		break;
 80064b0:	e01a      	b.n	80064e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	77bb      	strb	r3, [r7, #30]
		break;
 80064bc:	e014      	b.n	80064e8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80064be:	f107 0316 	add.w	r3, r7, #22
 80064c2:	461a      	mov	r2, r3
 80064c4:	2164      	movs	r1, #100	; 0x64
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f004 fc68 	bl	800ad9c <VL53L0X_RdWord>
 80064cc:	4603      	mov	r3, r0
 80064ce:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80064d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80064d8:	8afb      	ldrh	r3, [r7, #22]
 80064da:	025b      	lsls	r3, r3, #9
 80064dc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	77bb      	strb	r3, [r7, #30]
		break;
 80064e2:	e001      	b.n	80064e8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064e4:	23fc      	movs	r3, #252	; 0xfc
 80064e6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d12a      	bne.n	8006546 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80064f0:	7fbb      	ldrb	r3, [r7, #30]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d124      	bne.n	8006540 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d110      	bne.n	800651e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80064fc:	897b      	ldrh	r3, [r7, #10]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	330c      	adds	r3, #12
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006510:	897b      	ldrh	r3, [r7, #10]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800651c:	e013      	b.n	8006546 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006524:	897b      	ldrh	r3, [r7, #10]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	330c      	adds	r3, #12
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006532:	897b      	ldrh	r3, [r7, #10]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800653e:	e002      	b.n	8006546 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006546:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop

08006554 <VL53L0X_GetLimitCheckCurrent>:

VL53L0X_Error VL53L0X_GetLimitCheckCurrent(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckCurrent)
{
 8006554:	b4b0      	push	{r4, r5, r7}
 8006556:	b08d      	sub	sp, #52	; 0x34
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	460b      	mov	r3, r1
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006562:	2300      	movs	r3, #0
 8006564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006568:	897b      	ldrh	r3, [r7, #10]
 800656a:	2b05      	cmp	r3, #5
 800656c:	d903      	bls.n	8006576 <VL53L0X_GetLimitCheckCurrent+0x22>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800656e:	23fc      	movs	r3, #252	; 0xfc
 8006570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006574:	e05d      	b.n	8006632 <VL53L0X_GetLimitCheckCurrent+0xde>
	} else {
		switch (LimitCheckId) {
 8006576:	897b      	ldrh	r3, [r7, #10]
 8006578:	2b05      	cmp	r3, #5
 800657a:	d857      	bhi.n	800662c <VL53L0X_GetLimitCheckCurrent+0xd8>
 800657c:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <VL53L0X_GetLimitCheckCurrent+0x30>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	0800659d 	.word	0x0800659d
 8006588:	080065a9 	.word	0x080065a9
 800658c:	080065c7 	.word	0x080065c7
 8006590:	080065d3 	.word	0x080065d3
 8006594:	080065f1 	.word	0x080065f1
 8006598:	0800660f 	.word	0x0800660f
		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev, SigmaEstimate);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]

			break;
 80065a6:	e044      	b.n	8006632 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f107 0410 	add.w	r4, r7, #16
 80065ae:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80065b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80065ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 80065be:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	601a      	str	r2, [r3, #0]

			break;
 80065c4:	e035      	b.n	8006632 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev,
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	601a      	str	r2, [r3, #0]
				LastSignalRefMcps);

			break;
 80065d0:	e02f      	b.n	8006632 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f107 0410 	add.w	r4, r7, #16
 80065d8:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80065dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80065e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 80065e8:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	601a      	str	r2, [r3, #0]

			break;
 80065ee:	e020      	b.n	8006632 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f107 0410 	add.w	r4, r7, #16
 80065f6:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80065fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8006606:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	601a      	str	r2, [r3, #0]

			break;
 800660c:	e011      	b.n	8006632 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f107 0410 	add.w	r4, r7, #16
 8006614:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8006618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800661a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800661c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8006624:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	601a      	str	r2, [r3, #0]

			break;
 800662a:	e002      	b.n	8006632 <VL53L0X_GetLimitCheckCurrent+0xde>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800662c:	23fc      	movs	r3, #252	; 0xfc
 800662e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006632:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f

}
 8006636:	4618      	mov	r0, r3
 8006638:	3734      	adds	r7, #52	; 0x34
 800663a:	46bd      	mov	sp, r7
 800663c:	bcb0      	pop	{r4, r5, r7}
 800663e:	4770      	bx	lr

08006640 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800664e:	f107 030e 	add.w	r3, r7, #14
 8006652:	461a      	mov	r2, r3
 8006654:	2101      	movs	r1, #1
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f004 fb76 	bl	800ad48 <VL53L0X_RdByte>
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10e      	bne.n	8006686 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006668:	7bba      	ldrb	r2, [r7, #14]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	b25b      	sxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	da03      	bge.n	8006680 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2201      	movs	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e002      	b.n	8006686 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781a      	ldrb	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006698:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80066b0:	f107 030e 	add.w	r3, r7, #14
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff fb5c 	bl	8005d74 <VL53L0X_GetDeviceMode>
 80066bc:	4603      	mov	r3, r0
 80066be:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80066c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d107      	bne.n	80066d8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d104      	bne.n	80066d8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f898 	bl	8006804 <VL53L0X_StartMeasurement>
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80066d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d104      	bne.n	80066ea <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fbf1 	bl	8007ec8 <VL53L0X_measurement_poll_for_completion>
 80066e6:	4603      	mov	r3, r0
 80066e8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80066ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d103      	bne.n	8006700 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2203      	movs	r2, #3
 80066fc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006700:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006718:	2300      	movs	r3, #0
 800671a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800671c:	2301      	movs	r3, #1
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f001 fb93 	bl	8007e4e <VL53L0X_perform_ref_calibration>
 8006728:	4603      	mov	r3, r0
 800672a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800672c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006744:	2300      	movs	r3, #0
 8006746:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800674e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006750:	7dbb      	ldrb	r3, [r7, #22]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d005      	beq.n	8006762 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006756:	7dbb      	ldrb	r3, [r7, #22]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d002      	beq.n	8006762 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800675c:	7dbb      	ldrb	r3, [r7, #22]
 800675e:	2b03      	cmp	r3, #3
 8006760:	d147      	bne.n	80067f2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006762:	f107 030c 	add.w	r3, r7, #12
 8006766:	f107 0210 	add.w	r2, r7, #16
 800676a:	2101      	movs	r1, #1
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fc0b 	bl	8006f88 <VL53L0X_GetInterruptThresholds>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800677c:	d803      	bhi.n	8006786 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800677e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006780:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006784:	d935      	bls.n	80067f2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d131      	bne.n	80067f2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d006      	beq.n	80067a2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006794:	491a      	ldr	r1, [pc, #104]	; (8006800 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f003 f808 	bl	80097ac <VL53L0X_load_tuning_settings>
 800679c:	4603      	mov	r3, r0
 800679e:	75fb      	strb	r3, [r7, #23]
 80067a0:	e027      	b.n	80067f2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80067a2:	2204      	movs	r2, #4
 80067a4:	21ff      	movs	r1, #255	; 0xff
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f004 fa4c 	bl	800ac44 <VL53L0X_WrByte>
 80067ac:	4603      	mov	r3, r0
 80067ae:	461a      	mov	r2, r3
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80067b6:	2200      	movs	r2, #0
 80067b8:	2170      	movs	r1, #112	; 0x70
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f004 fa42 	bl	800ac44 <VL53L0X_WrByte>
 80067c0:	4603      	mov	r3, r0
 80067c2:	461a      	mov	r2, r3
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067ca:	2200      	movs	r2, #0
 80067cc:	21ff      	movs	r1, #255	; 0xff
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f004 fa38 	bl	800ac44 <VL53L0X_WrByte>
 80067d4:	4603      	mov	r3, r0
 80067d6:	461a      	mov	r2, r3
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	4313      	orrs	r3, r2
 80067dc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80067de:	2200      	movs	r2, #0
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f004 fa2e 	bl	800ac44 <VL53L0X_WrByte>
 80067e8:	4603      	mov	r3, r0
 80067ea:	461a      	mov	r2, r3
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80067f2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000148 	.word	0x20000148

08006804 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800680c:	2300      	movs	r3, #0
 800680e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006810:	2301      	movs	r3, #1
 8006812:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006814:	f107 030e 	add.w	r3, r7, #14
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff faaa 	bl	8005d74 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006820:	2201      	movs	r2, #1
 8006822:	2180      	movs	r1, #128	; 0x80
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f004 fa0d 	bl	800ac44 <VL53L0X_WrByte>
 800682a:	4603      	mov	r3, r0
 800682c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800682e:	2201      	movs	r2, #1
 8006830:	21ff      	movs	r1, #255	; 0xff
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f004 fa06 	bl	800ac44 <VL53L0X_WrByte>
 8006838:	4603      	mov	r3, r0
 800683a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800683c:	2200      	movs	r2, #0
 800683e:	2100      	movs	r1, #0
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f004 f9ff 	bl	800ac44 <VL53L0X_WrByte>
 8006846:	4603      	mov	r3, r0
 8006848:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006850:	461a      	mov	r2, r3
 8006852:	2191      	movs	r1, #145	; 0x91
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f004 f9f5 	bl	800ac44 <VL53L0X_WrByte>
 800685a:	4603      	mov	r3, r0
 800685c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800685e:	2201      	movs	r2, #1
 8006860:	2100      	movs	r1, #0
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f004 f9ee 	bl	800ac44 <VL53L0X_WrByte>
 8006868:	4603      	mov	r3, r0
 800686a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800686c:	2200      	movs	r2, #0
 800686e:	21ff      	movs	r1, #255	; 0xff
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f004 f9e7 	bl	800ac44 <VL53L0X_WrByte>
 8006876:	4603      	mov	r3, r0
 8006878:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800687a:	2200      	movs	r2, #0
 800687c:	2180      	movs	r1, #128	; 0x80
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f004 f9e0 	bl	800ac44 <VL53L0X_WrByte>
 8006884:	4603      	mov	r3, r0
 8006886:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b03      	cmp	r3, #3
 800688c:	d054      	beq.n	8006938 <VL53L0X_StartMeasurement+0x134>
 800688e:	2b03      	cmp	r3, #3
 8006890:	dc6c      	bgt.n	800696c <VL53L0X_StartMeasurement+0x168>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <VL53L0X_StartMeasurement+0x98>
 8006896:	2b01      	cmp	r3, #1
 8006898:	d034      	beq.n	8006904 <VL53L0X_StartMeasurement+0x100>
 800689a:	e067      	b.n	800696c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800689c:	2201      	movs	r2, #1
 800689e:	2100      	movs	r1, #0
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f004 f9cf 	bl	800ac44 <VL53L0X_WrByte>
 80068a6:	4603      	mov	r3, r0
 80068a8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80068ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d15d      	bne.n	8006972 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80068c0:	f107 030d 	add.w	r3, r7, #13
 80068c4:	461a      	mov	r2, r3
 80068c6:	2100      	movs	r1, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f004 fa3d 	bl	800ad48 <VL53L0X_RdByte>
 80068ce:	4603      	mov	r3, r0
 80068d0:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	3301      	adds	r3, #1
 80068d6:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80068d8:	7b7a      	ldrb	r2, [r7, #13]
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	4013      	ands	r3, r2
 80068de:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80068e0:	7bfa      	ldrb	r2, [r7, #15]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d107      	bne.n	80068f6 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80068e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d103      	bne.n	80068f6 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80068f4:	d3e1      	bcc.n	80068ba <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80068fc:	d339      	bcc.n	8006972 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80068fe:	23f9      	movs	r3, #249	; 0xf9
 8006900:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006902:	e036      	b.n	8006972 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800690c:	2101      	movs	r1, #1
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff ff12 	bl	8006738 <VL53L0X_CheckAndLoadInterruptSettings>
 8006914:	4603      	mov	r3, r0
 8006916:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006918:	2202      	movs	r2, #2
 800691a:	2100      	movs	r1, #0
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f004 f991 	bl	800ac44 <VL53L0X_WrByte>
 8006922:	4603      	mov	r3, r0
 8006924:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006926:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d123      	bne.n	8006976 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2204      	movs	r2, #4
 8006932:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006936:	e01e      	b.n	8006976 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006938:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d105      	bne.n	800694c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006940:	2101      	movs	r1, #1
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff fef8 	bl	8006738 <VL53L0X_CheckAndLoadInterruptSettings>
 8006948:	4603      	mov	r3, r0
 800694a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800694c:	2204      	movs	r2, #4
 800694e:	2100      	movs	r1, #0
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f004 f977 	bl	800ac44 <VL53L0X_WrByte>
 8006956:	4603      	mov	r3, r0
 8006958:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800695a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10b      	bne.n	800697a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2204      	movs	r2, #4
 8006966:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800696a:	e006      	b.n	800697a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800696c:	23f8      	movs	r3, #248	; 0xf8
 800696e:	75fb      	strb	r3, [r7, #23]
 8006970:	e004      	b.n	800697c <VL53L0X_StartMeasurement+0x178>
		break;
 8006972:	bf00      	nop
 8006974:	e002      	b.n	800697c <VL53L0X_StartMeasurement+0x178>
		break;
 8006976:	bf00      	nop
 8006978:	e000      	b.n	800697c <VL53L0X_StartMeasurement+0x178>
		break;
 800697a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800697c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <VL53L0X_StopMeasurement>:

VL53L0X_Error VL53L0X_StopMeasurement(VL53L0X_DEV Dev)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006994:	2200      	movs	r2, #0
 8006996:	2100      	movs	r1, #0
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f004 f953 	bl	800ac44 <VL53L0X_WrByte>
 800699e:	4603      	mov	r3, r0
 80069a0:	73fb      	strb	r3, [r7, #15]
	VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT);

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80069a2:	2201      	movs	r2, #1
 80069a4:	21ff      	movs	r1, #255	; 0xff
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f004 f94c 	bl	800ac44 <VL53L0X_WrByte>
 80069ac:	4603      	mov	r3, r0
 80069ae:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80069b0:	2200      	movs	r2, #0
 80069b2:	2100      	movs	r1, #0
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f004 f945 	bl	800ac44 <VL53L0X_WrByte>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x91, 0x00);
 80069be:	2200      	movs	r2, #0
 80069c0:	2191      	movs	r1, #145	; 0x91
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f004 f93e 	bl	800ac44 <VL53L0X_WrByte>
 80069c8:	4603      	mov	r3, r0
 80069ca:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80069cc:	2201      	movs	r2, #1
 80069ce:	2100      	movs	r1, #0
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f004 f937 	bl	800ac44 <VL53L0X_WrByte>
 80069d6:	4603      	mov	r3, r0
 80069d8:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80069da:	2200      	movs	r2, #0
 80069dc:	21ff      	movs	r1, #255	; 0xff
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f004 f930 	bl	800ac44 <VL53L0X_WrByte>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 80069e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <VL53L0X_StopMeasurement+0x70>
		/* Set PAL State to Idle */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2203      	movs	r2, #3
 80069f4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	/* Check if need to apply interrupt settings */
	if (Status == VL53L0X_ERROR_NONE)
 80069f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d105      	bne.n	8006a0c <VL53L0X_StopMeasurement+0x84>
		Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 0);
 8006a00:	2100      	movs	r1, #0
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff fe98 	bl	8006738 <VL53L0X_CheckAndLoadInterruptSettings>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <VL53L0X_GetMeasurementDataReady>:

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006a2c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d112      	bne.n	8006a5a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006a34:	f107 0308 	add.w	r3, r7, #8
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fb83 	bl	8007146 <VL53L0X_GetInterruptMaskStatus>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d103      	bne.n	8006a52 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e01c      	b.n	8006a8c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	e018      	b.n	8006a8c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006a5a:	f107 030d 	add.w	r3, r7, #13
 8006a5e:	461a      	mov	r2, r3
 8006a60:	2114      	movs	r1, #20
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f004 f970 	bl	800ad48 <VL53L0X_RdByte>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8006a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006a74:	7b7b      	ldrb	r3, [r7, #13]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2201      	movs	r2, #1
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	e002      	b.n	8006a8c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006a98:	b5b0      	push	{r4, r5, r7, lr}
 8006a9a:	b096      	sub	sp, #88	; 0x58
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006aa8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006aac:	230c      	movs	r3, #12
 8006aae:	2114      	movs	r1, #20
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f004 f89b 	bl	800abec <VL53L0X_ReadMulti>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006abc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f040 80d1 	bne.w	8006c68 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006ad2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006aee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	021b      	lsls	r3, r3, #8
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4413      	add	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	025b      	lsls	r3, r3, #9
 8006b04:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b0a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006b0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006b22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b26:	025b      	lsls	r3, r3, #9
 8006b28:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006b2e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	4413      	add	r3, r2
 8006b40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006b4a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006b4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8006b5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006b66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b6c:	d046      	beq.n	8006bfc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006b6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006b70:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006b74:	fb02 f303 	mul.w	r3, r2, r3
 8006b78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006b7c:	4a57      	ldr	r2, [pc, #348]	; (8006cdc <VL53L0X_GetRangingMeasurementData+0x244>)
 8006b7e:	fb82 1203 	smull	r1, r2, r2, r3
 8006b82:	1192      	asrs	r2, r2, #6
 8006b84:	17db      	asrs	r3, r3, #31
 8006b86:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006b88:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	7f1b      	ldrb	r3, [r3, #28]
 8006b96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8006b9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d02c      	beq.n	8006bfc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006ba2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ba4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006ba8:	fb02 f303 	mul.w	r3, r2, r3
 8006bac:	121a      	asrs	r2, r3, #8
					<= 0) {
 8006bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d10d      	bne.n	8006bd0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8006bb4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8006bbc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006bc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006bc4:	e016      	b.n	8006bf4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8006bc6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006bca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006bce:	e011      	b.n	8006bf4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006bd0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bd6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006bda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006bdc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8006be4:	121b      	asrs	r3, r3, #8
 8006be6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bea:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006bec:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006bf0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8006bf4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006bf8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006bfc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00d      	beq.n	8006c20 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8006c04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006c08:	089b      	lsrs	r3, r3, #2
 8006c0a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006c10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	019b      	lsls	r3, r3, #6
 8006c18:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	75da      	strb	r2, [r3, #23]
 8006c1e:	e006      	b.n	8006c2e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006c26:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006c2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006c32:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006c36:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f003 fa4f 	bl	800a0e8 <VL53L0X_get_pal_range_status>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8006c58:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d103      	bne.n	8006c68 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006c60:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c68:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d12f      	bne.n	8006cd0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f107 040c 	add.w	r4, r7, #12
 8006c76:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8006c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c82:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8006c8a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8006c98:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006c9e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006ca4:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8006caa:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006cb0:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8006cb6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006cc0:	f107 050c 	add.w	r5, r7, #12
 8006cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006ccc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cd0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3750      	adds	r7, #80	; 0x50
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bdb0      	pop	{r4, r5, r7, pc}
 8006cdc:	10624dd3 	.word	0x10624dd3

08006ce0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006cee:	2100      	movs	r1, #0
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff f813 	bl	8005d1c <VL53L0X_SetDeviceMode>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fcce 	bl	80066a4 <VL53L0X_PerformSingleMeasurement>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff febe 	bl	8006a98 <VL53L0X_GetRangingMeasurementData>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006d28:	2100      	movs	r1, #0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9cb 	bl	80070c6 <VL53L0X_ClearInterruptMask>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	4608      	mov	r0, r1
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	70fb      	strb	r3, [r7, #3]
 8006d52:	460b      	mov	r3, r1
 8006d54:	70bb      	strb	r3, [r7, #2]
 8006d56:	4613      	mov	r3, r2
 8006d58:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006d5e:	78fb      	ldrb	r3, [r7, #3]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006d64:	23f6      	movs	r3, #246	; 0xf6
 8006d66:	73fb      	strb	r3, [r7, #15]
 8006d68:	e107      	b.n	8006f7a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006d6a:	78bb      	ldrb	r3, [r7, #2]
 8006d6c:	2b14      	cmp	r3, #20
 8006d6e:	d110      	bne.n	8006d92 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006d70:	7e3b      	ldrb	r3, [r7, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d102      	bne.n	8006d7c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006d76:	2310      	movs	r3, #16
 8006d78:	73bb      	strb	r3, [r7, #14]
 8006d7a:	e001      	b.n	8006d80 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	461a      	mov	r2, r3
 8006d84:	2184      	movs	r1, #132	; 0x84
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f003 ff5c 	bl	800ac44 <VL53L0X_WrByte>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73fb      	strb	r3, [r7, #15]
 8006d90:	e0f3      	b.n	8006f7a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006d92:	78bb      	ldrb	r3, [r7, #2]
 8006d94:	2b15      	cmp	r3, #21
 8006d96:	f040 8097 	bne.w	8006ec8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	21ff      	movs	r1, #255	; 0xff
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f003 ff50 	bl	800ac44 <VL53L0X_WrByte>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006dae:	2200      	movs	r2, #0
 8006db0:	2100      	movs	r1, #0
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f003 ff46 	bl	800ac44 <VL53L0X_WrByte>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	21ff      	movs	r1, #255	; 0xff
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f003 ff3c 	bl	800ac44 <VL53L0X_WrByte>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	461a      	mov	r2, r3
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	2180      	movs	r1, #128	; 0x80
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f003 ff32 	bl	800ac44 <VL53L0X_WrByte>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006dea:	2202      	movs	r2, #2
 8006dec:	2185      	movs	r1, #133	; 0x85
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f003 ff28 	bl	800ac44 <VL53L0X_WrByte>
 8006df4:	4603      	mov	r3, r0
 8006df6:	461a      	mov	r2, r3
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006dfe:	2204      	movs	r2, #4
 8006e00:	21ff      	movs	r1, #255	; 0xff
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f003 ff1e 	bl	800ac44 <VL53L0X_WrByte>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006e12:	2200      	movs	r2, #0
 8006e14:	21cd      	movs	r1, #205	; 0xcd
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f003 ff14 	bl	800ac44 <VL53L0X_WrByte>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006e26:	2211      	movs	r2, #17
 8006e28:	21cc      	movs	r1, #204	; 0xcc
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f003 ff0a 	bl	800ac44 <VL53L0X_WrByte>
 8006e30:	4603      	mov	r3, r0
 8006e32:	461a      	mov	r2, r3
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006e3a:	2207      	movs	r2, #7
 8006e3c:	21ff      	movs	r1, #255	; 0xff
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f003 ff00 	bl	800ac44 <VL53L0X_WrByte>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006e4e:	2200      	movs	r2, #0
 8006e50:	21be      	movs	r1, #190	; 0xbe
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f003 fef6 	bl	800ac44 <VL53L0X_WrByte>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006e62:	2206      	movs	r2, #6
 8006e64:	21ff      	movs	r1, #255	; 0xff
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f003 feec 	bl	800ac44 <VL53L0X_WrByte>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	461a      	mov	r2, r3
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8006e76:	2209      	movs	r2, #9
 8006e78:	21cc      	movs	r1, #204	; 0xcc
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f003 fee2 	bl	800ac44 <VL53L0X_WrByte>
 8006e80:	4603      	mov	r3, r0
 8006e82:	461a      	mov	r2, r3
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	21ff      	movs	r1, #255	; 0xff
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f003 fed8 	bl	800ac44 <VL53L0X_WrByte>
 8006e94:	4603      	mov	r3, r0
 8006e96:	461a      	mov	r2, r3
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	21ff      	movs	r1, #255	; 0xff
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f003 fece 	bl	800ac44 <VL53L0X_WrByte>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	461a      	mov	r2, r3
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f003 fec4 	bl	800ac44 <VL53L0X_WrByte>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	73fb      	strb	r3, [r7, #15]
 8006ec6:	e058      	b.n	8006f7a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d121      	bne.n	8006f14 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8006ed0:	787b      	ldrb	r3, [r7, #1]
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d81b      	bhi.n	8006f0e <VL53L0X_SetGpioConfig+0x1ce>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <VL53L0X_SetGpioConfig+0x19c>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006ef1 	.word	0x08006ef1
 8006ee0:	08006ef7 	.word	0x08006ef7
 8006ee4:	08006efd 	.word	0x08006efd
 8006ee8:	08006f03 	.word	0x08006f03
 8006eec:	08006f09 	.word	0x08006f09
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73bb      	strb	r3, [r7, #14]
				break;
 8006ef4:	e00f      	b.n	8006f16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	73bb      	strb	r3, [r7, #14]
				break;
 8006efa:	e00c      	b.n	8006f16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8006efc:	2302      	movs	r3, #2
 8006efe:	73bb      	strb	r3, [r7, #14]
				break;
 8006f00:	e009      	b.n	8006f16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8006f02:	2303      	movs	r3, #3
 8006f04:	73bb      	strb	r3, [r7, #14]
				break;
 8006f06:	e006      	b.n	8006f16 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006f08:	2304      	movs	r3, #4
 8006f0a:	73bb      	strb	r3, [r7, #14]
				break;
 8006f0c:	e003      	b.n	8006f16 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8006f0e:	23f5      	movs	r3, #245	; 0xf5
 8006f10:	73fb      	strb	r3, [r7, #15]
 8006f12:	e000      	b.n	8006f16 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8006f14:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8006f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d107      	bne.n	8006f2e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	461a      	mov	r2, r3
 8006f22:	210a      	movs	r1, #10
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f003 fe8d 	bl	800ac44 <VL53L0X_WrByte>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10f      	bne.n	8006f56 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006f36:	7e3b      	ldrb	r3, [r7, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73bb      	strb	r3, [r7, #14]
 8006f40:	e001      	b.n	8006f46 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8006f42:	2310      	movs	r3, #16
 8006f44:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	22ef      	movs	r2, #239	; 0xef
 8006f4a:	2184      	movs	r1, #132	; 0x84
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f003 fec7 	bl	800ace0 <VL53L0X_UpdateByte>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8006f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d103      	bne.n	8006f66 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	787a      	ldrb	r2, [r7, #1]
 8006f62:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8006f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006f6e:	2100      	movs	r1, #0
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f8a8 	bl	80070c6 <VL53L0X_ClearInterruptMask>
 8006f76:	4603      	mov	r3, r0
 8006f78:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop

08006f88 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	607a      	str	r2, [r7, #4]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	460b      	mov	r3, r1
 8006f96:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006f9c:	f107 0314 	add.w	r3, r7, #20
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	210e      	movs	r1, #14
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f003 fef9 	bl	800ad9c <VL53L0X_RdWord>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006fae:	8abb      	ldrh	r3, [r7, #20]
 8006fb0:	045b      	lsls	r3, r3, #17
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <VL53L0X_GetInterruptThresholds+0x68>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10f      	bne.n	8006fe4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8006fc4:	f107 0314 	add.w	r3, r7, #20
 8006fc8:	461a      	mov	r2, r3
 8006fca:	210c      	movs	r1, #12
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f003 fee5 	bl	800ad9c <VL53L0X_RdWord>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006fd6:	8abb      	ldrh	r3, [r7, #20]
 8006fd8:	045b      	lsls	r3, r3, #17
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <VL53L0X_GetInterruptThresholds+0x68>)
 8006fde:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	1ffe0000 	.word	0x1ffe0000

08006ff4 <VL53L0X_GetStopCompletedStatus>:

VL53L0X_Error VL53L0X_GetStopCompletedStatus(VL53L0X_DEV Dev,
	uint32_t *pStopStatus)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007006:	2201      	movs	r2, #1
 8007008:	21ff      	movs	r1, #255	; 0xff
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f003 fe1a 	bl	800ac44 <VL53L0X_WrByte>
 8007010:	4603      	mov	r3, r0
 8007012:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d108      	bne.n	800702e <VL53L0X_GetStopCompletedStatus+0x3a>
		Status = VL53L0X_RdByte(Dev, 0x04, &Byte);
 800701c:	f107 030e 	add.w	r3, r7, #14
 8007020:	461a      	mov	r2, r3
 8007022:	2104      	movs	r1, #4
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f003 fe8f 	bl	800ad48 <VL53L0X_RdByte>
 800702a:	4603      	mov	r3, r0
 800702c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800702e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <VL53L0X_GetStopCompletedStatus+0x50>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x0);
 8007036:	2200      	movs	r2, #0
 8007038:	21ff      	movs	r1, #255	; 0xff
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f003 fe02 	bl	800ac44 <VL53L0X_WrByte>
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]

	*pStopStatus = Byte;
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	461a      	mov	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	601a      	str	r2, [r3, #0]

	if (Byte == 0) {
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d133      	bne.n	80070ba <VL53L0X_GetStopCompletedStatus+0xc6>
		Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007052:	2201      	movs	r2, #1
 8007054:	2180      	movs	r1, #128	; 0x80
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f003 fdf4 	bl	800ac44 <VL53L0X_WrByte>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007060:	2201      	movs	r2, #1
 8007062:	21ff      	movs	r1, #255	; 0xff
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f003 fded 	bl	800ac44 <VL53L0X_WrByte>
 800706a:	4603      	mov	r3, r0
 800706c:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800706e:	2200      	movs	r2, #0
 8007070:	2100      	movs	r1, #0
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f003 fde6 	bl	800ac44 <VL53L0X_WrByte>
 8007078:	4603      	mov	r3, r0
 800707a:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x91,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007082:	461a      	mov	r2, r3
 8007084:	2191      	movs	r1, #145	; 0x91
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f003 fddc 	bl	800ac44 <VL53L0X_WrByte>
 800708c:	4603      	mov	r3, r0
 800708e:	73fb      	strb	r3, [r7, #15]
			PALDevDataGet(Dev, StopVariable));
		Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007090:	2201      	movs	r2, #1
 8007092:	2100      	movs	r1, #0
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f003 fdd5 	bl	800ac44 <VL53L0X_WrByte>
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800709e:	2200      	movs	r2, #0
 80070a0:	21ff      	movs	r1, #255	; 0xff
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f003 fdce 	bl	800ac44 <VL53L0X_WrByte>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80070ac:	2200      	movs	r2, #0
 80070ae:	2180      	movs	r1, #128	; 0x80
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f003 fdc7 	bl	800ac44 <VL53L0X_WrByte>
 80070b6:	4603      	mov	r3, r0
 80070b8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80070ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <VL53L0X_ClearInterruptMask>:

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80070d8:	2201      	movs	r2, #1
 80070da:	210b      	movs	r1, #11
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f003 fdb1 	bl	800ac44 <VL53L0X_WrByte>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80070e6:	2200      	movs	r2, #0
 80070e8:	210b      	movs	r1, #11
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f003 fdaa 	bl	800ac44 <VL53L0X_WrByte>
 80070f0:	4603      	mov	r3, r0
 80070f2:	461a      	mov	r2, r3
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80070fa:	f107 030d 	add.w	r3, r7, #13
 80070fe:	461a      	mov	r2, r3
 8007100:	2113      	movs	r1, #19
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f003 fe20 	bl	800ad48 <VL53L0X_RdByte>
 8007108:	4603      	mov	r3, r0
 800710a:	461a      	mov	r2, r3
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	4313      	orrs	r3, r2
 8007110:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	3301      	adds	r3, #1
 8007116:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007118:	7b7b      	ldrb	r3, [r7, #13]
 800711a:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800711e:	2b00      	cmp	r3, #0
 8007120:	d006      	beq.n	8007130 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d803      	bhi.n	8007130 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0d3      	beq.n	80070d8 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007136:	23f4      	movs	r3, #244	; 0xf4
 8007138:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800713a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007150:	2300      	movs	r3, #0
 8007152:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007154:	f107 030e 	add.w	r3, r7, #14
 8007158:	461a      	mov	r2, r3
 800715a:	2113      	movs	r1, #19
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f003 fdf3 	bl	800ad48 <VL53L0X_RdByte>
 8007162:	4603      	mov	r3, r0
 8007164:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	f003 0207 	and.w	r2, r3, #7
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	f003 0318 	and.w	r3, r3, #24
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800717a:	23fa      	movs	r3, #250	; 0xfa
 800717c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800717e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b086      	sub	sp, #24
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 fa04 	bl	80075ac <VL53L0X_perform_ref_spad_management>
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80071a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80071c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80071c6:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80071c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071cc:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	461a      	mov	r2, r3
 80071d4:	2128      	movs	r1, #40	; 0x28
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f003 fde0 	bl	800ad9c <VL53L0X_RdWord>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80071e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d11e      	bne.n	8007226 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80071e8:	893b      	ldrh	r3, [r7, #8]
 80071ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80071f2:	893b      	ldrh	r3, [r7, #8]
 80071f4:	461a      	mov	r2, r3
 80071f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	dd0b      	ble.n	8007216 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80071fe:	893a      	ldrh	r2, [r7, #8]
 8007200:	897b      	ldrh	r3, [r7, #10]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	b29b      	uxth	r3, r3
 8007206:	b21b      	sxth	r3, r3
 8007208:	461a      	mov	r2, r3
					* 250;
 800720a:	23fa      	movs	r3, #250	; 0xfa
 800720c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	e007      	b.n	8007226 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007216:	893b      	ldrh	r3, [r7, #8]
 8007218:	b21b      	sxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	23fa      	movs	r3, #250	; 0xfa
 800721e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007232:	b480      	push	{r7}
 8007234:	b08b      	sub	sp, #44	; 0x2c
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007240:	2308      	movs	r3, #8
 8007242:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f04f 32ff 	mov.w	r2, #4294967295
 800724e:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	fbb2 f3f3 	udiv	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007262:	69b9      	ldr	r1, [r7, #24]
 8007264:	fb01 f202 	mul.w	r2, r1, r2
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
 8007270:	e030      	b.n	80072d4 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	4413      	add	r3, r2
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	429a      	cmp	r2, r3
 8007286:	d11e      	bne.n	80072c6 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007288:	7ffa      	ldrb	r2, [r7, #31]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	fa42 f303 	asr.w	r3, r2, r3
 8007290:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007296:	e016      	b.n	80072c6 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007298:	7ffb      	ldrb	r3, [r7, #31]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00b      	beq.n	80072ba <get_next_good_spad+0x88>
				success = 1;
 80072a2:	2301      	movs	r3, #1
 80072a4:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	fb03 f202 	mul.w	r2, r3, r2
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	4413      	add	r3, r2
 80072b2:	461a      	mov	r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	601a      	str	r2, [r3, #0]
				break;
 80072b8:	e009      	b.n	80072ce <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80072ba:	7ffb      	ldrb	r3, [r7, #31]
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	3301      	adds	r3, #1
 80072c4:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80072c6:	6a3a      	ldr	r2, [r7, #32]
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d3e4      	bcc.n	8007298 <get_next_good_spad+0x66>
				coarseIndex++) {
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	3301      	adds	r3, #1
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80072d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d202      	bcs.n	80072e2 <get_next_good_spad+0xb0>
 80072dc:	7fbb      	ldrb	r3, [r7, #30]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0c7      	beq.n	8007272 <get_next_good_spad+0x40>
		}
	}
}
 80072e2:	bf00      	nop
 80072e4:	372c      	adds	r7, #44	; 0x2c
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	099b      	lsrs	r3, r3, #6
 8007300:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007302:	4a07      	ldr	r2, [pc, #28]	; (8007320 <is_aperture+0x30>)
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <is_aperture+0x22>
		isAperture = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007312:	7bfb      	ldrb	r3, [r7, #15]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	20000300 	.word	0x20000300

08007324 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007324:	b480      	push	{r7}
 8007326:	b089      	sub	sp, #36	; 0x24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007330:	2300      	movs	r3, #0
 8007332:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007334:	2308      	movs	r3, #8
 8007336:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	fbb3 f2f2 	udiv	r2, r3, r2
 800734a:	69b9      	ldr	r1, [r7, #24]
 800734c:	fb01 f202 	mul.w	r2, r1, r2
 8007350:	1a9b      	subs	r3, r3, r2
 8007352:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	429a      	cmp	r2, r3
 800735a:	d302      	bcc.n	8007362 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800735c:	23ce      	movs	r3, #206	; 0xce
 800735e:	77fb      	strb	r3, [r7, #31]
 8007360:	e010      	b.n	8007384 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	4413      	add	r3, r2
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	b25a      	sxtb	r2, r3
 800736c:	2101      	movs	r1, #1
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	fa01 f303 	lsl.w	r3, r1, r3
 8007374:	b25b      	sxtb	r3, r3
 8007376:	4313      	orrs	r3, r2
 8007378:	b259      	sxtb	r1, r3
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	4413      	add	r3, r2
 8007380:	b2ca      	uxtb	r2, r1
 8007382:	701a      	strb	r2, [r3, #0]

	return status;
 8007384:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3724      	adds	r7, #36	; 0x24
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800739e:	2306      	movs	r3, #6
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	21b0      	movs	r1, #176	; 0xb0
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f003 fbf1 	bl	800ab8c <VL53L0X_WriteMulti>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80073ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80073c4:	2306      	movs	r3, #6
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	21b0      	movs	r1, #176	; 0xb0
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f003 fc0e 	bl	800abec <VL53L0X_ReadMulti>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80073d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08c      	sub	sp, #48	; 0x30
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	460b      	mov	r3, r1
 80073ee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80073f0:	2300      	movs	r3, #0
 80073f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80073f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80073fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073fc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80073fe:	2300      	movs	r3, #0
 8007400:	62bb      	str	r3, [r7, #40]	; 0x28
 8007402:	e02b      	b.n	800745c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007404:	f107 031c 	add.w	r3, r7, #28
 8007408:	6a3a      	ldr	r2, [r7, #32]
 800740a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff ff10 	bl	8007232 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d103      	bne.n	8007422 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800741a:	23ce      	movs	r3, #206	; 0xce
 800741c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007420:	e020      	b.n	8007464 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	461a      	mov	r2, r3
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	4413      	add	r3, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff ff60 	bl	80072f0 <is_aperture>
 8007430:	4603      	mov	r3, r0
 8007432:	461a      	mov	r2, r3
 8007434:	7afb      	ldrb	r3, [r7, #11]
 8007436:	4293      	cmp	r3, r2
 8007438:	d003      	beq.n	8007442 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800743a:	23ce      	movs	r3, #206	; 0xce
 800743c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007440:	e010      	b.n	8007464 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007446:	6a3a      	ldr	r2, [r7, #32]
 8007448:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800744a:	6838      	ldr	r0, [r7, #0]
 800744c:	f7ff ff6a 	bl	8007324 <enable_spad_bit>
		currentSpad++;
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	3301      	adds	r3, #1
 8007454:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	3301      	adds	r3, #1
 800745a:	62bb      	str	r3, [r7, #40]	; 0x28
 800745c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800745e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007460:	429a      	cmp	r2, r3
 8007462:	d3cf      	bcc.n	8007404 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007466:	6a3a      	ldr	r2, [r7, #32]
 8007468:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800746a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff ff8d 	bl	8007394 <set_ref_spad_map>
 800747a:	4603      	mov	r3, r0
 800747c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007480:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007484:	2b00      	cmp	r3, #0
 8007486:	d121      	bne.n	80074cc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007488:	f107 0314 	add.w	r3, r7, #20
 800748c:	4619      	mov	r1, r3
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff ff93 	bl	80073ba <get_ref_spad_map>
 8007494:	4603      	mov	r3, r0
 8007496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800749e:	e011      	b.n	80074c4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	4413      	add	r3, r2
 80074a6:	781a      	ldrb	r2, [r3, #0]
 80074a8:	f107 0114 	add.w	r1, r7, #20
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	440b      	add	r3, r1
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d003      	beq.n	80074be <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80074b6:	23ce      	movs	r3, #206	; 0xce
 80074b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80074bc:	e006      	b.n	80074cc <enable_ref_spads+0xec>
			}
			i++;
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	3301      	adds	r3, #1
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80074c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3e9      	bcc.n	80074a0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80074cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3730      	adds	r7, #48	; 0x30
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	; 0x28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80074f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80074f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d107      	bne.n	8007510 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007500:	22c0      	movs	r2, #192	; 0xc0
 8007502:	2101      	movs	r1, #1
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f003 fb9d 	bl	800ac44 <VL53L0X_WrByte>
 800750a:	4603      	mov	r3, r0
 800750c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007510:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007514:	2b00      	cmp	r3, #0
 8007516:	d108      	bne.n	800752a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007518:	f107 0308 	add.w	r3, r7, #8
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7ff fbde 	bl	8006ce0 <VL53L0X_PerformSingleRangingMeasurement>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800752a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800752e:	2b00      	cmp	r3, #0
 8007530:	d107      	bne.n	8007542 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007532:	2201      	movs	r2, #1
 8007534:	21ff      	movs	r1, #255	; 0xff
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f003 fb84 	bl	800ac44 <VL53L0X_WrByte>
 800753c:	4603      	mov	r3, r0
 800753e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007542:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007546:	2b00      	cmp	r3, #0
 8007548:	d107      	bne.n	800755a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	21b6      	movs	r1, #182	; 0xb6
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f003 fc24 	bl	800ad9c <VL53L0X_RdWord>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800755a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800755e:	2b00      	cmp	r3, #0
 8007560:	d107      	bne.n	8007572 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007562:	2200      	movs	r2, #0
 8007564:	21ff      	movs	r1, #255	; 0xff
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f003 fb6c 	bl	800ac44 <VL53L0X_WrByte>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007572:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007576:	2b00      	cmp	r3, #0
 8007578:	d112      	bne.n	80075a0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800757a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800757e:	461a      	mov	r2, r3
 8007580:	2101      	movs	r1, #1
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f003 fb5e 	bl	800ac44 <VL53L0X_WrByte>
 8007588:	4603      	mov	r3, r0
 800758a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800758e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007592:	2b00      	cmp	r3, #0
 8007594:	d104      	bne.n	80075a0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800759c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80075a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3728      	adds	r7, #40	; 0x28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80075ac:	b590      	push	{r4, r7, lr}
 80075ae:	b09d      	sub	sp, #116	; 0x74
 80075b0:	af06      	add	r7, sp, #24
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80075be:	23b4      	movs	r3, #180	; 0xb4
 80075c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80075c4:	2303      	movs	r3, #3
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80075c8:	232c      	movs	r3, #44	; 0x2c
 80075ca:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80075d8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80075dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80075e6:	2306      	movs	r3, #6
 80075e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8007610:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007612:	2300      	movs	r3, #0
 8007614:	64bb      	str	r3, [r7, #72]	; 0x48
 8007616:	e009      	b.n	800762c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800761c:	4413      	add	r3, r2
 800761e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007628:	3301      	adds	r3, #1
 800762a:	64bb      	str	r3, [r7, #72]	; 0x48
 800762c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	429a      	cmp	r2, r3
 8007632:	d3f1      	bcc.n	8007618 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007634:	2201      	movs	r2, #1
 8007636:	21ff      	movs	r1, #255	; 0xff
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f003 fb03 	bl	800ac44 <VL53L0X_WrByte>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007644:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007648:	2b00      	cmp	r3, #0
 800764a:	d107      	bne.n	800765c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800764c:	2200      	movs	r2, #0
 800764e:	214f      	movs	r1, #79	; 0x4f
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f003 faf7 	bl	800ac44 <VL53L0X_WrByte>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800765c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007660:	2b00      	cmp	r3, #0
 8007662:	d107      	bne.n	8007674 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007664:	222c      	movs	r2, #44	; 0x2c
 8007666:	214e      	movs	r1, #78	; 0x4e
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f003 faeb 	bl	800ac44 <VL53L0X_WrByte>
 800766e:	4603      	mov	r3, r0
 8007670:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007674:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007678:	2b00      	cmp	r3, #0
 800767a:	d107      	bne.n	800768c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800767c:	2200      	movs	r2, #0
 800767e:	21ff      	movs	r1, #255	; 0xff
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f003 fadf 	bl	800ac44 <VL53L0X_WrByte>
 8007686:	4603      	mov	r3, r0
 8007688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800768c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007694:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007698:	461a      	mov	r2, r3
 800769a:	21b6      	movs	r1, #182	; 0xb6
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f003 fad1 	bl	800ac44 <VL53L0X_WrByte>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80076a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d107      	bne.n	80076c0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80076b0:	2200      	movs	r2, #0
 80076b2:	2180      	movs	r1, #128	; 0x80
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f003 fac5 	bl	800ac44 <VL53L0X_WrByte>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80076c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80076c8:	f107 0210 	add.w	r2, r7, #16
 80076cc:	f107 0111 	add.w	r1, r7, #17
 80076d0:	2300      	movs	r3, #0
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 fbbb 	bl	8007e4e <VL53L0X_perform_ref_calibration>
 80076d8:	4603      	mov	r3, r0
 80076da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80076de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d121      	bne.n	800772a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80076ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ec:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80076f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007702:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007706:	f107 0218 	add.w	r2, r7, #24
 800770a:	9204      	str	r2, [sp, #16]
 800770c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800770e:	9203      	str	r2, [sp, #12]
 8007710:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007712:	9202      	str	r2, [sp, #8]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	4623      	mov	r3, r4
 800771c:	4602      	mov	r2, r0
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f7ff fe5e 	bl	80073e0 <enable_ref_spads>
 8007724:	4603      	mov	r3, r0
 8007726:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800772a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800772e:	2b00      	cmp	r3, #0
 8007730:	d174      	bne.n	800781c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007736:	f107 0312 	add.w	r3, r7, #18
 800773a:	4619      	mov	r1, r3
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f7ff fecb 	bl	80074d8 <perform_ref_signal_measurement>
 8007742:	4603      	mov	r3, r0
 8007744:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007748:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800774c:	2b00      	cmp	r3, #0
 800774e:	d161      	bne.n	8007814 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007750:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007752:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007754:	429a      	cmp	r2, r3
 8007756:	d25d      	bcs.n	8007814 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007758:	2300      	movs	r3, #0
 800775a:	64bb      	str	r3, [r7, #72]	; 0x48
 800775c:	e009      	b.n	8007772 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007762:	4413      	add	r3, r2
 8007764:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800776c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800776e:	3301      	adds	r3, #1
 8007770:	64bb      	str	r3, [r7, #72]	; 0x48
 8007772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	429a      	cmp	r2, r3
 8007778:	d3f1      	bcc.n	800775e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800777a:	e002      	b.n	8007782 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800777c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800777e:	3301      	adds	r3, #1
 8007780:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007782:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007788:	4413      	add	r3, r2
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fdb0 	bl	80072f0 <is_aperture>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d103      	bne.n	800779e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007796:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	429a      	cmp	r2, r3
 800779c:	d3ee      	bcc.n	800777c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800779e:	2301      	movs	r3, #1
 80077a0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80077a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80077b2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80077b6:	f107 0218 	add.w	r2, r7, #24
 80077ba:	9204      	str	r2, [sp, #16]
 80077bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077be:	9203      	str	r2, [sp, #12]
 80077c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077c2:	9202      	str	r2, [sp, #8]
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	4623      	mov	r3, r4
 80077cc:	4602      	mov	r2, r0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7ff fe06 	bl	80073e0 <enable_ref_spads>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80077da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d11b      	bne.n	800781a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80077e6:	f107 0312 	add.w	r3, r7, #18
 80077ea:	4619      	mov	r1, r3
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f7ff fe73 	bl	80074d8 <perform_ref_signal_measurement>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80077f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10c      	bne.n	800781a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007800:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007802:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007804:	429a      	cmp	r2, r3
 8007806:	d208      	bcs.n	800781a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007808:	2301      	movs	r3, #1
 800780a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007810:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007812:	e002      	b.n	800781a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007818:	e000      	b.n	800781c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800781a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800781c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007820:	2b00      	cmp	r3, #0
 8007822:	f040 80af 	bne.w	8007984 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007826:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007828:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800782a:	429a      	cmp	r2, r3
 800782c:	f240 80aa 	bls.w	8007984 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007840:	f107 031c 	add.w	r3, r7, #28
 8007844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007846:	4618      	mov	r0, r3
 8007848:	f00d f92e 	bl	8014aa8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800784c:	8a7b      	ldrh	r3, [r7, #18]
 800784e:	461a      	mov	r2, r3
 8007850:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	bfb8      	it	lt
 8007858:	425b      	neglt	r3, r3
 800785a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007862:	e086      	b.n	8007972 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800786a:	f107 0314 	add.w	r3, r7, #20
 800786e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007872:	f7ff fcde 	bl	8007232 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787c:	d103      	bne.n	8007886 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800787e:	23ce      	movs	r3, #206	; 0xce
 8007880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007884:	e07e      	b.n	8007984 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007886:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4413      	add	r3, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fd2e 	bl	80072f0 <is_aperture>
 8007894:	4603      	mov	r3, r0
 8007896:	461a      	mov	r2, r3
 8007898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789a:	4293      	cmp	r3, r2
 800789c:	d003      	beq.n	80078a6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80078a4:	e06e      	b.n	8007984 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80078a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a8:	3301      	adds	r3, #1
 80078aa:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80078b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff fd32 	bl	8007324 <enable_spad_bit>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80078c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10c      	bne.n	80078e8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80078ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d0:	3301      	adds	r3, #1
 80078d2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80078da:	4619      	mov	r1, r3
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f7ff fd59 	bl	8007394 <set_ref_spad_map>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80078e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d146      	bne.n	800797e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80078f0:	f107 0312 	add.w	r3, r7, #18
 80078f4:	4619      	mov	r1, r3
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff fdee 	bl	80074d8 <perform_ref_signal_measurement>
 80078fc:	4603      	mov	r3, r0
 80078fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007902:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007906:	2b00      	cmp	r3, #0
 8007908:	d13b      	bne.n	8007982 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800790a:	8a7b      	ldrh	r3, [r7, #18]
 800790c:	461a      	mov	r2, r3
 800790e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	bfb8      	it	lt
 8007916:	425b      	neglt	r3, r3
 8007918:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800791a:	8a7b      	ldrh	r3, [r7, #18]
 800791c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800791e:	429a      	cmp	r2, r3
 8007920:	d21c      	bcs.n	800795c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007926:	429a      	cmp	r2, r3
 8007928:	d914      	bls.n	8007954 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800792a:	f107 031c 	add.w	r3, r7, #28
 800792e:	4619      	mov	r1, r3
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff fd2f 	bl	8007394 <set_ref_spad_map>
 8007936:	4603      	mov	r3, r0
 8007938:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007942:	f107 011c 	add.w	r1, r7, #28
 8007946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007948:	4618      	mov	r0, r3
 800794a:	f00d f8ad 	bl	8014aa8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800794e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007950:	3b01      	subs	r3, #1
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795a:	e00a      	b.n	8007972 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007966:	f107 031c 	add.w	r3, r7, #28
 800796a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800796c:	4618      	mov	r0, r3
 800796e:	f00d f89b 	bl	8014aa8 <memcpy>
		while (!complete) {
 8007972:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007976:	2b00      	cmp	r3, #0
 8007978:	f43f af74 	beq.w	8007864 <VL53L0X_perform_ref_spad_management+0x2b8>
 800797c:	e002      	b.n	8007984 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800797e:	bf00      	nop
 8007980:	e000      	b.n	8007984 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007982:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007984:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007988:	2b00      	cmp	r3, #0
 800798a:	d115      	bne.n	80079b8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007990:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007998:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	781a      	ldrb	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80079b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80079bc:	4618      	mov	r0, r3
 80079be:	375c      	adds	r7, #92	; 0x5c
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd90      	pop	{r4, r7, pc}

080079c4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80079c4:	b590      	push	{r4, r7, lr}
 80079c6:	b093      	sub	sp, #76	; 0x4c
 80079c8:	af06      	add	r7, sp, #24
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80079dc:	23b4      	movs	r3, #180	; 0xb4
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80079e2:	2306      	movs	r3, #6
 80079e4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80079e6:	232c      	movs	r3, #44	; 0x2c
 80079e8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80079ea:	2201      	movs	r2, #1
 80079ec:	21ff      	movs	r1, #255	; 0xff
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f003 f928 	bl	800ac44 <VL53L0X_WrByte>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80079fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d107      	bne.n	8007a12 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007a02:	2200      	movs	r2, #0
 8007a04:	214f      	movs	r1, #79	; 0x4f
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f003 f91c 	bl	800ac44 <VL53L0X_WrByte>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007a12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d107      	bne.n	8007a2a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007a1a:	222c      	movs	r2, #44	; 0x2c
 8007a1c:	214e      	movs	r1, #78	; 0x4e
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f003 f910 	bl	800ac44 <VL53L0X_WrByte>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007a2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d107      	bne.n	8007a42 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a32:	2200      	movs	r2, #0
 8007a34:	21ff      	movs	r1, #255	; 0xff
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f003 f904 	bl	800ac44 <VL53L0X_WrByte>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007a42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d109      	bne.n	8007a5e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a4e:	461a      	mov	r2, r3
 8007a50:	21b6      	movs	r1, #182	; 0xb6
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f003 f8f6 	bl	800ac44 <VL53L0X_WrByte>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007a5e:	2300      	movs	r3, #0
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
 8007a62:	e009      	b.n	8007a78 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007a6e:	2200      	movs	r2, #0
 8007a70:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	3301      	adds	r3, #1
 8007a76:	627b      	str	r3, [r7, #36]	; 0x24
 8007a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d3f1      	bcc.n	8007a64 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d011      	beq.n	8007aaa <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007a86:	e002      	b.n	8007a8e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007a8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	4413      	add	r3, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff fc2a 	bl	80072f0 <is_aperture>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <VL53L0X_set_reference_spads+0xe6>
 8007aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d3ee      	bcc.n	8007a88 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aba:	79f9      	ldrb	r1, [r7, #7]
 8007abc:	f107 0214 	add.w	r2, r7, #20
 8007ac0:	9204      	str	r2, [sp, #16]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	9203      	str	r2, [sp, #12]
 8007ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac8:	9202      	str	r2, [sp, #8]
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	4623      	mov	r3, r4
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff fc83 	bl	80073e0 <enable_ref_spads>
 8007ada:	4603      	mov	r3, r0
 8007adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007ae0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10c      	bne.n	8007b02 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	79fa      	ldrb	r2, [r7, #7]
 8007afe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007b02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3734      	adds	r7, #52	; 0x34
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd90      	pop	{r4, r7, pc}

08007b0e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10a      	bne.n	8007b3c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007b26:	78fb      	ldrb	r3, [r7, #3]
 8007b28:	f043 0301 	orr.w	r3, r3, #1
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	2100      	movs	r1, #0
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f003 f886 	bl	800ac44 <VL53L0X_WrByte>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f9bf 	bl	8007ec8 <VL53L0X_measurement_poll_for_completion>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d105      	bne.n	8007b62 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007b56:	2100      	movs	r1, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff fab4 	bl	80070c6 <VL53L0X_ClearInterruptMask>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f003 f868 	bl	800ac44 <VL53L0X_WrByte>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	461a      	mov	r2, r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	70fb      	strb	r3, [r7, #3]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70bb      	strb	r3, [r7, #2]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	21ff      	movs	r1, #255	; 0xff
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f003 f84a 	bl	800ac44 <VL53L0X_WrByte>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f003 f840 	bl	800ac44 <VL53L0X_WrByte>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007bce:	2200      	movs	r2, #0
 8007bd0:	21ff      	movs	r1, #255	; 0xff
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f003 f836 	bl	800ac44 <VL53L0X_WrByte>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	461a      	mov	r2, r3
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01e      	beq.n	8007c26 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007be8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d009      	beq.n	8007c04 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	21cb      	movs	r1, #203	; 0xcb
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f003 f8a7 	bl	800ad48 <VL53L0X_RdByte>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007c04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d02a      	beq.n	8007c62 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007c0c:	f107 030e 	add.w	r3, r7, #14
 8007c10:	461a      	mov	r2, r3
 8007c12:	21ee      	movs	r1, #238	; 0xee
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f003 f897 	bl	800ad48 <VL53L0X_RdByte>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	73fb      	strb	r3, [r7, #15]
 8007c24:	e01d      	b.n	8007c62 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007c26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007c2e:	78bb      	ldrb	r3, [r7, #2]
 8007c30:	461a      	mov	r2, r3
 8007c32:	21cb      	movs	r1, #203	; 0xcb
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f003 f805 	bl	800ac44 <VL53L0X_WrByte>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007c44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00a      	beq.n	8007c62 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007c4c:	787b      	ldrb	r3, [r7, #1]
 8007c4e:	2280      	movs	r2, #128	; 0x80
 8007c50:	21ee      	movs	r1, #238	; 0xee
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f003 f844 	bl	800ace0 <VL53L0X_UpdateByte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007c62:	2201      	movs	r2, #1
 8007c64:	21ff      	movs	r1, #255	; 0xff
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f002 ffec 	bl	800ac44 <VL53L0X_WrByte>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007c76:	2201      	movs	r2, #1
 8007c78:	2100      	movs	r1, #0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f002 ffe2 	bl	800ac44 <VL53L0X_WrByte>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	21ff      	movs	r1, #255	; 0xff
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f002 ffd8 	bl	800ac44 <VL53L0X_WrByte>
 8007c94:	4603      	mov	r3, r0
 8007c96:	461a      	mov	r2, r3
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	f023 0310 	bic.w	r3, r3, #16
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	701a      	strb	r2, [r3, #0]

	return Status;
 8007caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b08a      	sub	sp, #40	; 0x28
 8007cba:	af04      	add	r7, sp, #16
 8007cbc:	60f8      	str	r0, [r7, #12]
 8007cbe:	60b9      	str	r1, [r7, #8]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	71fb      	strb	r3, [r7, #7]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007ce0:	79bb      	ldrb	r3, [r7, #6]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007cec:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007cee:	2201      	movs	r2, #1
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f002 ffa6 	bl	800ac44 <VL53L0X_WrByte>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007cfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d105      	bne.n	8007d10 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007d04:	2140      	movs	r1, #64	; 0x40
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff ff01 	bl	8007b0e <VL53L0X_perform_single_ref_calibration>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d115      	bne.n	8007d44 <VL53L0X_perform_vhv_calibration+0x8e>
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d112      	bne.n	8007d44 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007d1e:	7d39      	ldrb	r1, [r7, #20]
 8007d20:	7d7a      	ldrb	r2, [r7, #21]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9303      	str	r3, [sp, #12]
 8007d26:	2301      	movs	r3, #1
 8007d28:	9302      	str	r3, [sp, #8]
 8007d2a:	f107 0313 	add.w	r3, r7, #19
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	460b      	mov	r3, r1
 8007d36:	2101      	movs	r1, #1
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff ff23 	bl	8007b84 <VL53L0X_ref_calibration_io>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]
 8007d42:	e002      	b.n	8007d4a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d112      	bne.n	8007d78 <VL53L0X_perform_vhv_calibration+0xc2>
 8007d52:	79bb      	ldrb	r3, [r7, #6]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00f      	beq.n	8007d78 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007d58:	7dbb      	ldrb	r3, [r7, #22]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f002 ff70 	bl	800ac44 <VL53L0X_WrByte>
 8007d64:	4603      	mov	r3, r0
 8007d66:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d103      	bne.n	8007d78 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	7dba      	ldrb	r2, [r7, #22]
 8007d74:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08a      	sub	sp, #40	; 0x28
 8007d88:	af04      	add	r7, sp, #16
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	4611      	mov	r1, r2
 8007d90:	461a      	mov	r2, r3
 8007d92:	460b      	mov	r3, r1
 8007d94:	71fb      	strb	r3, [r7, #7]
 8007d96:	4613      	mov	r3, r2
 8007d98:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007daa:	79bb      	ldrb	r3, [r7, #6]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007db6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007db8:	2202      	movs	r2, #2
 8007dba:	2101      	movs	r1, #1
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f002 ff41 	bl	800ac44 <VL53L0X_WrByte>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007dc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d105      	bne.n	8007dda <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8007dce:	2100      	movs	r1, #0
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff fe9c 	bl	8007b0e <VL53L0X_perform_single_ref_calibration>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d115      	bne.n	8007e0e <VL53L0X_perform_phase_calibration+0x8a>
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d112      	bne.n	8007e0e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007de8:	7d39      	ldrb	r1, [r7, #20]
 8007dea:	7d7a      	ldrb	r2, [r7, #21]
 8007dec:	2301      	movs	r3, #1
 8007dee:	9303      	str	r3, [sp, #12]
 8007df0:	2300      	movs	r3, #0
 8007df2:	9302      	str	r3, [sp, #8]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	f107 0313 	add.w	r3, r7, #19
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	2101      	movs	r1, #1
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff febe 	bl	8007b84 <VL53L0X_ref_calibration_io>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	75fb      	strb	r3, [r7, #23]
 8007e0c:	e002      	b.n	8007e14 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2200      	movs	r2, #0
 8007e12:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d112      	bne.n	8007e42 <VL53L0X_perform_phase_calibration+0xbe>
 8007e1c:	79bb      	ldrb	r3, [r7, #6]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00f      	beq.n	8007e42 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007e22:	7dbb      	ldrb	r3, [r7, #22]
 8007e24:	461a      	mov	r2, r3
 8007e26:	2101      	movs	r1, #1
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f002 ff0b 	bl	800ac44 <VL53L0X_WrByte>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	7dba      	ldrb	r2, [r7, #22]
 8007e3e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007e42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b086      	sub	sp, #24
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
 8007e5a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007e6a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007e6c:	78fa      	ldrb	r2, [r7, #3]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7ff ff1f 	bl	8007cb6 <VL53L0X_perform_vhv_calibration>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d107      	bne.n	8007e94 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007e84:	78fa      	ldrb	r2, [r7, #3]
 8007e86:	2300      	movs	r3, #0
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7ff ff7a 	bl	8007d84 <VL53L0X_perform_phase_calibration>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10f      	bne.n	8007ebc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007e9c:	7dbb      	ldrb	r3, [r7, #22]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f002 fece 	bl	800ac44 <VL53L0X_WrByte>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d103      	bne.n	8007ebc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	7dba      	ldrb	r2, [r7, #22]
 8007eb8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007ebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007edc:	f107 030f 	add.w	r3, r7, #15
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7fe fd98 	bl	8006a18 <VL53L0X_GetMeasurementDataReady>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007eec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d110      	bne.n	8007f16 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d00f      	beq.n	8007f1a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	3301      	adds	r3, #1
 8007efe:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007f06:	d302      	bcc.n	8007f0e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007f08:	23f9      	movs	r3, #249	; 0xf9
 8007f0a:	75fb      	strb	r3, [r7, #23]
			break;
 8007f0c:	e006      	b.n	8007f1c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f002 ffb8 	bl	800ae84 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007f14:	e7e2      	b.n	8007edc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007f16:	bf00      	nop
 8007f18:	e000      	b.n	8007f1c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007f1a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007f1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	005b      	lsls	r3, r3, #1
 8007f3e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	4603      	mov	r3, r0
 8007f56:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	085b      	lsrs	r3, r3, #1
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	3b01      	subs	r3, #1
 8007f64:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007f80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f84:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8007f86:	e002      	b.n	8007f8e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	089b      	lsrs	r3, r3, #2
 8007f8c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d8f8      	bhi.n	8007f88 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8007f96:	e017      	b.n	8007fc8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d30b      	bcc.n	8007fbc <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	4413      	add	r3, r2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	085b      	lsrs	r3, r3, #1
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
 8007fba:	e002      	b.n	8007fc2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	089b      	lsrs	r3, r3, #2
 8007fc6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e4      	bne.n	8007f98 <VL53L0X_isqrt+0x24>
	}

	return res;
 8007fce:	68fb      	ldr	r3, [r7, #12]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2183      	movs	r1, #131	; 0x83
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f002 fe29 	bl	800ac44 <VL53L0X_WrByte>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8007ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d11e      	bne.n	8008042 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008008:	f107 030f 	add.w	r3, r7, #15
 800800c:	461a      	mov	r2, r3
 800800e:	2183      	movs	r1, #131	; 0x83
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f002 fe99 	bl	800ad48 <VL53L0X_RdByte>
 8008016:	4603      	mov	r3, r0
 8008018:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <VL53L0X_device_read_strobe+0x5a>
 8008020:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	3301      	adds	r3, #1
 800802c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008034:	d3e8      	bcc.n	8008008 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800803c:	d301      	bcc.n	8008042 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800803e:	23f9      	movs	r3, #249	; 0xf9
 8008040:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008042:	2201      	movs	r2, #1
 8008044:	2183      	movs	r1, #131	; 0x83
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f002 fdfc 	bl	800ac44 <VL53L0X_WrByte>
 800804c:	4603      	mov	r3, r0
 800804e:	461a      	mov	r2, r3
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	4313      	orrs	r3, r2
 8008054:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008056:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b098      	sub	sp, #96	; 0x60
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800806e:	2300      	movs	r3, #0
 8008070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008092:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008096:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80080aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80080ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80080b2:	2b07      	cmp	r3, #7
 80080b4:	f000 8408 	beq.w	80088c8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80080b8:	2201      	movs	r2, #1
 80080ba:	2180      	movs	r1, #128	; 0x80
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f002 fdc1 	bl	800ac44 <VL53L0X_WrByte>
 80080c2:	4603      	mov	r3, r0
 80080c4:	461a      	mov	r2, r3
 80080c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080ca:	4313      	orrs	r3, r2
 80080cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80080d0:	2201      	movs	r2, #1
 80080d2:	21ff      	movs	r1, #255	; 0xff
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f002 fdb5 	bl	800ac44 <VL53L0X_WrByte>
 80080da:	4603      	mov	r3, r0
 80080dc:	461a      	mov	r2, r3
 80080de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080e2:	4313      	orrs	r3, r2
 80080e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80080e8:	2200      	movs	r2, #0
 80080ea:	2100      	movs	r1, #0
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f002 fda9 	bl	800ac44 <VL53L0X_WrByte>
 80080f2:	4603      	mov	r3, r0
 80080f4:	461a      	mov	r2, r3
 80080f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080fa:	4313      	orrs	r3, r2
 80080fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008100:	2206      	movs	r2, #6
 8008102:	21ff      	movs	r1, #255	; 0xff
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f002 fd9d 	bl	800ac44 <VL53L0X_WrByte>
 800810a:	4603      	mov	r3, r0
 800810c:	461a      	mov	r2, r3
 800810e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008112:	4313      	orrs	r3, r2
 8008114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008118:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800811c:	461a      	mov	r2, r3
 800811e:	2183      	movs	r1, #131	; 0x83
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f002 fe11 	bl	800ad48 <VL53L0X_RdByte>
 8008126:	4603      	mov	r3, r0
 8008128:	461a      	mov	r2, r3
 800812a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800812e:	4313      	orrs	r3, r2
 8008130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008134:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008138:	f043 0304 	orr.w	r3, r3, #4
 800813c:	b2db      	uxtb	r3, r3
 800813e:	461a      	mov	r2, r3
 8008140:	2183      	movs	r1, #131	; 0x83
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f002 fd7e 	bl	800ac44 <VL53L0X_WrByte>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008150:	4313      	orrs	r3, r2
 8008152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008156:	2207      	movs	r2, #7
 8008158:	21ff      	movs	r1, #255	; 0xff
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f002 fd72 	bl	800ac44 <VL53L0X_WrByte>
 8008160:	4603      	mov	r3, r0
 8008162:	461a      	mov	r2, r3
 8008164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008168:	4313      	orrs	r3, r2
 800816a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800816e:	2201      	movs	r2, #1
 8008170:	2181      	movs	r1, #129	; 0x81
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f002 fd66 	bl	800ac44 <VL53L0X_WrByte>
 8008178:	4603      	mov	r3, r0
 800817a:	461a      	mov	r2, r3
 800817c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008180:	4313      	orrs	r3, r2
 8008182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f002 fe7c 	bl	800ae84 <VL53L0X_PollingDelay>
 800818c:	4603      	mov	r3, r0
 800818e:	461a      	mov	r2, r3
 8008190:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008194:	4313      	orrs	r3, r2
 8008196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800819a:	2201      	movs	r2, #1
 800819c:	2180      	movs	r1, #128	; 0x80
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f002 fd50 	bl	800ac44 <VL53L0X_WrByte>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ac:	4313      	orrs	r3, r2
 80081ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80081b2:	78fb      	ldrb	r3, [r7, #3]
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 8098 	beq.w	80082ee <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80081be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80081c2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f040 8091 	bne.w	80082ee <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80081cc:	226b      	movs	r2, #107	; 0x6b
 80081ce:	2194      	movs	r1, #148	; 0x94
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f002 fd37 	bl	800ac44 <VL53L0X_WrByte>
 80081d6:	4603      	mov	r3, r0
 80081d8:	461a      	mov	r2, r3
 80081da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081de:	4313      	orrs	r3, r2
 80081e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fef9 	bl	8007fdc <VL53L0X_device_read_strobe>
 80081ea:	4603      	mov	r3, r0
 80081ec:	461a      	mov	r2, r3
 80081ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081f2:	4313      	orrs	r3, r2
 80081f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80081f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081fc:	461a      	mov	r2, r3
 80081fe:	2190      	movs	r1, #144	; 0x90
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f002 fe03 	bl	800ae0c <VL53L0X_RdDWord>
 8008206:	4603      	mov	r3, r0
 8008208:	461a      	mov	r2, r3
 800820a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800820e:	4313      	orrs	r3, r2
 8008210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	0a1b      	lsrs	r3, r3, #8
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	0bdb      	lsrs	r3, r3, #15
 8008226:	b2db      	uxtb	r3, r3
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008230:	2224      	movs	r2, #36	; 0x24
 8008232:	2194      	movs	r1, #148	; 0x94
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f002 fd05 	bl	800ac44 <VL53L0X_WrByte>
 800823a:	4603      	mov	r3, r0
 800823c:	461a      	mov	r2, r3
 800823e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008242:	4313      	orrs	r3, r2
 8008244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff fec7 	bl	8007fdc <VL53L0X_device_read_strobe>
 800824e:	4603      	mov	r3, r0
 8008250:	461a      	mov	r2, r3
 8008252:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008256:	4313      	orrs	r3, r2
 8008258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800825c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008260:	461a      	mov	r2, r3
 8008262:	2190      	movs	r1, #144	; 0x90
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f002 fdd1 	bl	800ae0c <VL53L0X_RdDWord>
 800826a:	4603      	mov	r3, r0
 800826c:	461a      	mov	r2, r3
 800826e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008272:	4313      	orrs	r3, r2
 8008274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	0e1b      	lsrs	r3, r3, #24
 800827c:	b2db      	uxtb	r3, r3
 800827e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	0c1b      	lsrs	r3, r3, #16
 8008284:	b2db      	uxtb	r3, r3
 8008286:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	b2db      	uxtb	r3, r3
 800828e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	b2db      	uxtb	r3, r3
 8008294:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008296:	2225      	movs	r2, #37	; 0x25
 8008298:	2194      	movs	r1, #148	; 0x94
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f002 fcd2 	bl	800ac44 <VL53L0X_WrByte>
 80082a0:	4603      	mov	r3, r0
 80082a2:	461a      	mov	r2, r3
 80082a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082a8:	4313      	orrs	r3, r2
 80082aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fe94 	bl	8007fdc <VL53L0X_device_read_strobe>
 80082b4:	4603      	mov	r3, r0
 80082b6:	461a      	mov	r2, r3
 80082b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082bc:	4313      	orrs	r3, r2
 80082be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80082c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082c6:	461a      	mov	r2, r3
 80082c8:	2190      	movs	r1, #144	; 0x90
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f002 fd9e 	bl	800ae0c <VL53L0X_RdDWord>
 80082d0:	4603      	mov	r3, r0
 80082d2:	461a      	mov	r2, r3
 80082d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082d8:	4313      	orrs	r3, r2
 80082da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	0e1b      	lsrs	r3, r3, #24
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	0c1b      	lsrs	r3, r3, #16
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 8189 	beq.w	800860c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80082fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082fe:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008302:	2b00      	cmp	r3, #0
 8008304:	f040 8182 	bne.w	800860c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008308:	2202      	movs	r2, #2
 800830a:	2194      	movs	r1, #148	; 0x94
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f002 fc99 	bl	800ac44 <VL53L0X_WrByte>
 8008312:	4603      	mov	r3, r0
 8008314:	461a      	mov	r2, r3
 8008316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800831a:	4313      	orrs	r3, r2
 800831c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff fe5b 	bl	8007fdc <VL53L0X_device_read_strobe>
 8008326:	4603      	mov	r3, r0
 8008328:	461a      	mov	r2, r3
 800832a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800832e:	4313      	orrs	r3, r2
 8008330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008334:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008338:	461a      	mov	r2, r3
 800833a:	2190      	movs	r1, #144	; 0x90
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f002 fd03 	bl	800ad48 <VL53L0X_RdByte>
 8008342:	4603      	mov	r3, r0
 8008344:	461a      	mov	r2, r3
 8008346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800834a:	4313      	orrs	r3, r2
 800834c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008350:	227b      	movs	r2, #123	; 0x7b
 8008352:	2194      	movs	r1, #148	; 0x94
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f002 fc75 	bl	800ac44 <VL53L0X_WrByte>
 800835a:	4603      	mov	r3, r0
 800835c:	461a      	mov	r2, r3
 800835e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008362:	4313      	orrs	r3, r2
 8008364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff fe37 	bl	8007fdc <VL53L0X_device_read_strobe>
 800836e:	4603      	mov	r3, r0
 8008370:	461a      	mov	r2, r3
 8008372:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008376:	4313      	orrs	r3, r2
 8008378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800837c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008380:	461a      	mov	r2, r3
 8008382:	2190      	movs	r1, #144	; 0x90
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f002 fcdf 	bl	800ad48 <VL53L0X_RdByte>
 800838a:	4603      	mov	r3, r0
 800838c:	461a      	mov	r2, r3
 800838e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008392:	4313      	orrs	r3, r2
 8008394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008398:	2277      	movs	r2, #119	; 0x77
 800839a:	2194      	movs	r1, #148	; 0x94
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f002 fc51 	bl	800ac44 <VL53L0X_WrByte>
 80083a2:	4603      	mov	r3, r0
 80083a4:	461a      	mov	r2, r3
 80083a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff fe13 	bl	8007fdc <VL53L0X_device_read_strobe>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083be:	4313      	orrs	r3, r2
 80083c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80083c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083c8:	461a      	mov	r2, r3
 80083ca:	2190      	movs	r1, #144	; 0x90
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f002 fd1d 	bl	800ae0c <VL53L0X_RdDWord>
 80083d2:	4603      	mov	r3, r0
 80083d4:	461a      	mov	r2, r3
 80083d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083da:	4313      	orrs	r3, r2
 80083dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	0e5b      	lsrs	r3, r3, #25
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80083ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f0:	0c9b      	lsrs	r3, r3, #18
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	0adb      	lsrs	r3, r3, #11
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008406:	b2db      	uxtb	r3, r3
 8008408:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	091b      	lsrs	r3, r3, #4
 800840e:	b2db      	uxtb	r3, r3
 8008410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008414:	b2db      	uxtb	r3, r3
 8008416:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	b2db      	uxtb	r3, r3
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	b2db      	uxtb	r3, r3
 8008420:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008424:	b2db      	uxtb	r3, r3
 8008426:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800842a:	2278      	movs	r2, #120	; 0x78
 800842c:	2194      	movs	r1, #148	; 0x94
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f002 fc08 	bl	800ac44 <VL53L0X_WrByte>
 8008434:	4603      	mov	r3, r0
 8008436:	461a      	mov	r2, r3
 8008438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800843c:	4313      	orrs	r3, r2
 800843e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fdca 	bl	8007fdc <VL53L0X_device_read_strobe>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008450:	4313      	orrs	r3, r2
 8008452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800845a:	461a      	mov	r2, r3
 800845c:	2190      	movs	r1, #144	; 0x90
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f002 fcd4 	bl	800ae0c <VL53L0X_RdDWord>
 8008464:	4603      	mov	r3, r0
 8008466:	461a      	mov	r2, r3
 8008468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800846c:	4313      	orrs	r3, r2
 800846e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	0f5b      	lsrs	r3, r3, #29
 8008476:	b2db      	uxtb	r3, r3
 8008478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800847c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800847e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008482:	4413      	add	r3, r2
 8008484:	b2db      	uxtb	r3, r3
 8008486:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	0d9b      	lsrs	r3, r3, #22
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008492:	b2db      	uxtb	r3, r3
 8008494:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	0bdb      	lsrs	r3, r3, #15
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80084a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a6:	0a1b      	lsrs	r3, r3, #8
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	085b      	lsrs	r3, r3, #1
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	019b      	lsls	r3, r3, #6
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80084d2:	2279      	movs	r2, #121	; 0x79
 80084d4:	2194      	movs	r1, #148	; 0x94
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f002 fbb4 	bl	800ac44 <VL53L0X_WrByte>
 80084dc:	4603      	mov	r3, r0
 80084de:	461a      	mov	r2, r3
 80084e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084e4:	4313      	orrs	r3, r2
 80084e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7ff fd76 	bl	8007fdc <VL53L0X_device_read_strobe>
 80084f0:	4603      	mov	r3, r0
 80084f2:	461a      	mov	r2, r3
 80084f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084f8:	4313      	orrs	r3, r2
 80084fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80084fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008502:	461a      	mov	r2, r3
 8008504:	2190      	movs	r1, #144	; 0x90
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f002 fc80 	bl	800ae0c <VL53L0X_RdDWord>
 800850c:	4603      	mov	r3, r0
 800850e:	461a      	mov	r2, r3
 8008510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008514:	4313      	orrs	r3, r2
 8008516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	0e9b      	lsrs	r3, r3, #26
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008524:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008526:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800852a:	4413      	add	r3, r2
 800852c:	b2db      	uxtb	r3, r3
 800852e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	0cdb      	lsrs	r3, r3, #19
 8008534:	b2db      	uxtb	r3, r3
 8008536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800853a:	b2db      	uxtb	r3, r3
 800853c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	0b1b      	lsrs	r3, r3, #12
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008548:	b2db      	uxtb	r3, r3
 800854a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	095b      	lsrs	r3, r3, #5
 8008550:	b2db      	uxtb	r3, r3
 8008552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008556:	b2db      	uxtb	r3, r3
 8008558:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	b2db      	uxtb	r3, r3
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	b2db      	uxtb	r3, r3
 8008562:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800856c:	227a      	movs	r2, #122	; 0x7a
 800856e:	2194      	movs	r1, #148	; 0x94
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f002 fb67 	bl	800ac44 <VL53L0X_WrByte>
 8008576:	4603      	mov	r3, r0
 8008578:	461a      	mov	r2, r3
 800857a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800857e:	4313      	orrs	r3, r2
 8008580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7ff fd29 	bl	8007fdc <VL53L0X_device_read_strobe>
 800858a:	4603      	mov	r3, r0
 800858c:	461a      	mov	r2, r3
 800858e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008592:	4313      	orrs	r3, r2
 8008594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800859c:	461a      	mov	r2, r3
 800859e:	2190      	movs	r1, #144	; 0x90
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f002 fc33 	bl	800ae0c <VL53L0X_RdDWord>
 80085a6:	4603      	mov	r3, r0
 80085a8:	461a      	mov	r2, r3
 80085aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085ae:	4313      	orrs	r3, r2
 80085b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	0f9b      	lsrs	r3, r3, #30
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085be:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80085c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085c4:	4413      	add	r3, r2
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	0ddb      	lsrs	r3, r3, #23
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	0c1b      	lsrs	r3, r3, #16
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	0a5b      	lsrs	r3, r3, #9
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	089b      	lsrs	r3, r3, #2
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008600:	b2db      	uxtb	r3, r3
 8008602:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008606:	2300      	movs	r3, #0
 8008608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 80f1 	beq.w	80087fa <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008618:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800861c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008620:	2b00      	cmp	r3, #0
 8008622:	f040 80ea 	bne.w	80087fa <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008626:	227b      	movs	r2, #123	; 0x7b
 8008628:	2194      	movs	r1, #148	; 0x94
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f002 fb0a 	bl	800ac44 <VL53L0X_WrByte>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008638:	4313      	orrs	r3, r2
 800863a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff fccc 	bl	8007fdc <VL53L0X_device_read_strobe>
 8008644:	4603      	mov	r3, r0
 8008646:	461a      	mov	r2, r3
 8008648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800864c:	4313      	orrs	r3, r2
 800864e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008656:	461a      	mov	r2, r3
 8008658:	2190      	movs	r1, #144	; 0x90
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f002 fbd6 	bl	800ae0c <VL53L0X_RdDWord>
 8008660:	4603      	mov	r3, r0
 8008662:	461a      	mov	r2, r3
 8008664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008668:	4313      	orrs	r3, r2
 800866a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800866e:	227c      	movs	r2, #124	; 0x7c
 8008670:	2194      	movs	r1, #148	; 0x94
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f002 fae6 	bl	800ac44 <VL53L0X_WrByte>
 8008678:	4603      	mov	r3, r0
 800867a:	461a      	mov	r2, r3
 800867c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008680:	4313      	orrs	r3, r2
 8008682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7ff fca8 	bl	8007fdc <VL53L0X_device_read_strobe>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008694:	4313      	orrs	r3, r2
 8008696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800869a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869e:	461a      	mov	r2, r3
 80086a0:	2190      	movs	r1, #144	; 0x90
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f002 fbb2 	bl	800ae0c <VL53L0X_RdDWord>
 80086a8:	4603      	mov	r3, r0
 80086aa:	461a      	mov	r2, r3
 80086ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086b0:	4313      	orrs	r3, r2
 80086b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80086b6:	2273      	movs	r2, #115	; 0x73
 80086b8:	2194      	movs	r1, #148	; 0x94
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f002 fac2 	bl	800ac44 <VL53L0X_WrByte>
 80086c0:	4603      	mov	r3, r0
 80086c2:	461a      	mov	r2, r3
 80086c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086c8:	4313      	orrs	r3, r2
 80086ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7ff fc84 	bl	8007fdc <VL53L0X_device_read_strobe>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086dc:	4313      	orrs	r3, r2
 80086de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80086e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086e6:	461a      	mov	r2, r3
 80086e8:	2190      	movs	r1, #144	; 0x90
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f002 fb8e 	bl	800ae0c <VL53L0X_RdDWord>
 80086f0:	4603      	mov	r3, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086f8:	4313      	orrs	r3, r2
 80086fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008702:	b29b      	uxth	r3, r3
 8008704:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008706:	2274      	movs	r2, #116	; 0x74
 8008708:	2194      	movs	r1, #148	; 0x94
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f002 fa9a 	bl	800ac44 <VL53L0X_WrByte>
 8008710:	4603      	mov	r3, r0
 8008712:	461a      	mov	r2, r3
 8008714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008718:	4313      	orrs	r3, r2
 800871a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7ff fc5c 	bl	8007fdc <VL53L0X_device_read_strobe>
 8008724:	4603      	mov	r3, r0
 8008726:	461a      	mov	r2, r3
 8008728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800872c:	4313      	orrs	r3, r2
 800872e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008736:	461a      	mov	r2, r3
 8008738:	2190      	movs	r1, #144	; 0x90
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f002 fb66 	bl	800ae0c <VL53L0X_RdDWord>
 8008740:	4603      	mov	r3, r0
 8008742:	461a      	mov	r2, r3
 8008744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008748:	4313      	orrs	r3, r2
 800874a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008752:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008754:	4313      	orrs	r3, r2
 8008756:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008758:	2275      	movs	r2, #117	; 0x75
 800875a:	2194      	movs	r1, #148	; 0x94
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f002 fa71 	bl	800ac44 <VL53L0X_WrByte>
 8008762:	4603      	mov	r3, r0
 8008764:	461a      	mov	r2, r3
 8008766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800876a:	4313      	orrs	r3, r2
 800876c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff fc33 	bl	8007fdc <VL53L0X_device_read_strobe>
 8008776:	4603      	mov	r3, r0
 8008778:	461a      	mov	r2, r3
 800877a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800877e:	4313      	orrs	r3, r2
 8008780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008788:	461a      	mov	r2, r3
 800878a:	2190      	movs	r1, #144	; 0x90
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f002 fb3d 	bl	800ae0c <VL53L0X_RdDWord>
 8008792:	4603      	mov	r3, r0
 8008794:	461a      	mov	r2, r3
 8008796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800879a:	4313      	orrs	r3, r2
 800879c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80087a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80087a8:	2276      	movs	r2, #118	; 0x76
 80087aa:	2194      	movs	r1, #148	; 0x94
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f002 fa49 	bl	800ac44 <VL53L0X_WrByte>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461a      	mov	r2, r3
 80087b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff fc0b 	bl	8007fdc <VL53L0X_device_read_strobe>
 80087c6:	4603      	mov	r3, r0
 80087c8:	461a      	mov	r2, r3
 80087ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087ce:	4313      	orrs	r3, r2
 80087d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80087d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087d8:	461a      	mov	r2, r3
 80087da:	2190      	movs	r1, #144	; 0x90
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f002 fb15 	bl	800ae0c <VL53L0X_RdDWord>
 80087e2:	4603      	mov	r3, r0
 80087e4:	461a      	mov	r2, r3
 80087e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087ea:	4313      	orrs	r3, r2
 80087ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80087f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80087f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087f6:	4313      	orrs	r3, r2
 80087f8:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80087fa:	2200      	movs	r2, #0
 80087fc:	2181      	movs	r1, #129	; 0x81
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f002 fa20 	bl	800ac44 <VL53L0X_WrByte>
 8008804:	4603      	mov	r3, r0
 8008806:	461a      	mov	r2, r3
 8008808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800880c:	4313      	orrs	r3, r2
 800880e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008812:	2206      	movs	r2, #6
 8008814:	21ff      	movs	r1, #255	; 0xff
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f002 fa14 	bl	800ac44 <VL53L0X_WrByte>
 800881c:	4603      	mov	r3, r0
 800881e:	461a      	mov	r2, r3
 8008820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008824:	4313      	orrs	r3, r2
 8008826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800882a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800882e:	461a      	mov	r2, r3
 8008830:	2183      	movs	r1, #131	; 0x83
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f002 fa88 	bl	800ad48 <VL53L0X_RdByte>
 8008838:	4603      	mov	r3, r0
 800883a:	461a      	mov	r2, r3
 800883c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008840:	4313      	orrs	r3, r2
 8008842:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008846:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800884a:	f023 0304 	bic.w	r3, r3, #4
 800884e:	b2db      	uxtb	r3, r3
 8008850:	461a      	mov	r2, r3
 8008852:	2183      	movs	r1, #131	; 0x83
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f002 f9f5 	bl	800ac44 <VL53L0X_WrByte>
 800885a:	4603      	mov	r3, r0
 800885c:	461a      	mov	r2, r3
 800885e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008862:	4313      	orrs	r3, r2
 8008864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008868:	2201      	movs	r2, #1
 800886a:	21ff      	movs	r1, #255	; 0xff
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f002 f9e9 	bl	800ac44 <VL53L0X_WrByte>
 8008872:	4603      	mov	r3, r0
 8008874:	461a      	mov	r2, r3
 8008876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800887a:	4313      	orrs	r3, r2
 800887c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008880:	2201      	movs	r2, #1
 8008882:	2100      	movs	r1, #0
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f002 f9dd 	bl	800ac44 <VL53L0X_WrByte>
 800888a:	4603      	mov	r3, r0
 800888c:	461a      	mov	r2, r3
 800888e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008892:	4313      	orrs	r3, r2
 8008894:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008898:	2200      	movs	r2, #0
 800889a:	21ff      	movs	r1, #255	; 0xff
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f002 f9d1 	bl	800ac44 <VL53L0X_WrByte>
 80088a2:	4603      	mov	r3, r0
 80088a4:	461a      	mov	r2, r3
 80088a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80088b0:	2200      	movs	r2, #0
 80088b2:	2180      	movs	r1, #128	; 0x80
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f002 f9c5 	bl	800ac44 <VL53L0X_WrByte>
 80088ba:	4603      	mov	r3, r0
 80088bc:	461a      	mov	r2, r3
 80088be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088c2:	4313      	orrs	r3, r2
 80088c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80088c8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f040 808f 	bne.w	80089f0 <VL53L0X_get_info_from_device+0x98e>
 80088d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088d6:	2b07      	cmp	r3, #7
 80088d8:	f000 808a 	beq.w	80089f0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d024      	beq.n	8008930 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80088e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088ea:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d11e      	bne.n	8008930 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80088f8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008902:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008906:	2300      	movs	r3, #0
 8008908:	64fb      	str	r3, [r7, #76]	; 0x4c
 800890a:	e00e      	b.n	800892a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800890c:	f107 0208 	add.w	r2, r7, #8
 8008910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008912:	4413      	add	r3, r2
 8008914:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891a:	4413      	add	r3, r2
 800891c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008920:	460a      	mov	r2, r1
 8008922:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008926:	3301      	adds	r3, #1
 8008928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800892a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892c:	2b05      	cmp	r3, #5
 800892e:	dded      	ble.n	800890c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d018      	beq.n	800896c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800893a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800893e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008942:	2b00      	cmp	r3, #0
 8008944:	d112      	bne.n	800896c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008946:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008950:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	33f3      	adds	r3, #243	; 0xf3
 800895e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008960:	f107 0310 	add.w	r3, r7, #16
 8008964:	4619      	mov	r1, r3
 8008966:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008968:	f00c fe7f 	bl	801566a <strcpy>

		}

		if (((option & 4) == 4) &&
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	f003 0304 	and.w	r3, r3, #4
 8008972:	2b00      	cmp	r3, #0
 8008974:	d030      	beq.n	80089d8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008976:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800897a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800897e:	2b00      	cmp	r3, #0
 8008980:	d12a      	bne.n	80089d8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800898a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008994:	025b      	lsls	r3, r3, #9
 8008996:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800899c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80089a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d011      	beq.n	80089d0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80089ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80089b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089ba:	fb02 f303 	mul.w	r3, r2, r3
 80089be:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80089c0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80089c4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80089c8:	425b      	negs	r3, r3
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80089d0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80089d8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	4313      	orrs	r3, r2
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80089e6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089f0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3760      	adds	r7, #96	; 0x60
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008a08:	f240 6277 	movw	r2, #1655	; 0x677
 8008a0c:	f04f 0300 	mov.w	r3, #0
 8008a10:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008a14:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008a18:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	fb02 f303 	mul.w	r3, r2, r3
 8008a28:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	371c      	adds	r7, #28
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d017      	beq.n	8008a82 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008a58:	e005      	b.n	8008a66 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	085b      	lsrs	r3, r3, #1
 8008a5e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008a60:	89fb      	ldrh	r3, [r7, #14]
 8008a62:	3301      	adds	r3, #1
 8008a64:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1f4      	bne.n	8008a5a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008a70:	89fb      	ldrh	r3, [r7, #14]
 8008a72:	021b      	lsls	r3, r3, #8
 8008a74:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008a7e:	4413      	add	r3, r2
 8008a80:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008a82:	8afb      	ldrh	r3, [r7, #22]

}
 8008a84:	4618      	mov	r0, r3
 8008a86:	371c      	adds	r7, #28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008aa2:	88fa      	ldrh	r2, [r7, #6]
 8008aa4:	0a12      	lsrs	r2, r2, #8
 8008aa6:	b292      	uxth	r2, r2
 8008aa8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008aaa:	3301      	adds	r3, #1
 8008aac:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008aae:	68fb      	ldr	r3, [r7, #12]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f7ff ff92 	bl	80089fc <VL53L0X_calc_macro_period_ps>
 8008ad8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ae0:	4a0a      	ldr	r2, [pc, #40]	; (8008b0c <VL53L0X_calc_timeout_mclks+0x50>)
 8008ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae6:	099b      	lsrs	r3, r3, #6
 8008ae8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008af0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	085b      	lsrs	r3, r3, #1
 8008af8:	441a      	add	r2, r3
	timeout_period_mclks =
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008b02:	69fb      	ldr	r3, [r7, #28]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	10624dd3 	.word	0x10624dd3

08008b10 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	807b      	strh	r3, [r7, #2]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008b24:	787b      	ldrb	r3, [r7, #1]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7ff ff67 	bl	80089fc <VL53L0X_calc_macro_period_ps>
 8008b2e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008b36:	4a0a      	ldr	r2, [pc, #40]	; (8008b60 <VL53L0X_calc_timeout_us+0x50>)
 8008b38:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3c:	099b      	lsrs	r3, r3, #6
 8008b3e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008b40:	887b      	ldrh	r3, [r7, #2]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	fb02 f303 	mul.w	r3, r2, r3
 8008b48:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8008b4c:	4a04      	ldr	r2, [pc, #16]	; (8008b60 <VL53L0X_calc_timeout_us+0x50>)
 8008b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b52:	099b      	lsrs	r3, r3, #6
 8008b54:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008b56:	697b      	ldr	r3, [r7, #20]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	10624dd3 	.word	0x10624dd3

08008b64 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08c      	sub	sp, #48	; 0x30
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b72:	2300      	movs	r3, #0
 8008b74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008b8a:	7afb      	ldrb	r3, [r7, #11]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <get_sequence_step_timeout+0x38>
 8008b90:	7afb      	ldrb	r3, [r7, #11]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d002      	beq.n	8008b9c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008b96:	7afb      	ldrb	r3, [r7, #11]
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d128      	bne.n	8008bee <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008b9c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7fd f955 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8008baa:	4603      	mov	r3, r0
 8008bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008bb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d109      	bne.n	8008bcc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008bb8:	f107 0320 	add.w	r3, r7, #32
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	2146      	movs	r1, #70	; 0x46
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f002 f8c1 	bl	800ad48 <VL53L0X_RdByte>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8008bcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff ff5c 	bl	8008a90 <VL53L0X_decode_timeout>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008bdc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008be0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008be2:	4619      	mov	r1, r3
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff ff93 	bl	8008b10 <VL53L0X_calc_timeout_us>
 8008bea:	62b8      	str	r0, [r7, #40]	; 0x28
 8008bec:	e092      	b.n	8008d14 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008bee:	7afb      	ldrb	r3, [r7, #11]
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d135      	bne.n	8008c60 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008bf4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f7fd f929 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8008c02:	4603      	mov	r3, r0
 8008c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008c08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f040 8081 	bne.w	8008d14 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008c12:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008c16:	461a      	mov	r2, r3
 8008c18:	2100      	movs	r1, #0
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7fd f91a 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008c26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d109      	bne.n	8008c42 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008c2e:	f107 031e 	add.w	r3, r7, #30
 8008c32:	461a      	mov	r2, r3
 8008c34:	2151      	movs	r1, #81	; 0x51
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f002 f8b0 	bl	800ad9c <VL53L0X_RdWord>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008c42:	8bfb      	ldrh	r3, [r7, #30]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff ff23 	bl	8008a90 <VL53L0X_decode_timeout>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008c4e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008c52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c54:	4619      	mov	r1, r3
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7ff ff5a 	bl	8008b10 <VL53L0X_calc_timeout_us>
 8008c5c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008c5e:	e059      	b.n	8008d14 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008c60:	7afb      	ldrb	r3, [r7, #11]
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d156      	bne.n	8008d14 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008c66:	f107 0314 	add.w	r3, r7, #20
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f7fd f9fd 	bl	800606c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01d      	beq.n	8008cb8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008c7c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008c80:	461a      	mov	r2, r3
 8008c82:	2100      	movs	r1, #0
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7fd f8e5 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8008c90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10f      	bne.n	8008cb8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8008c98:	f107 031e 	add.w	r3, r7, #30
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	2151      	movs	r1, #81	; 0x51
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f002 f87b 	bl	800ad9c <VL53L0X_RdWord>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008cac:	8bfb      	ldrh	r3, [r7, #30]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff feee 	bl	8008a90 <VL53L0X_decode_timeout>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008cb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008cc0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f7fd f8c3 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008cd4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10f      	bne.n	8008cfc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8008cdc:	f107 031c 	add.w	r3, r7, #28
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2171      	movs	r1, #113	; 0x71
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f002 f859 	bl	800ad9c <VL53L0X_RdWord>
 8008cea:	4603      	mov	r3, r0
 8008cec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008cf0:	8bbb      	ldrh	r3, [r7, #28]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff fecc 	bl	8008a90 <VL53L0X_decode_timeout>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8008cfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008cfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008d04:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7ff feff 	bl	8008b10 <VL53L0X_calc_timeout_us>
 8008d12:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d18:	601a      	str	r2, [r3, #0]

	return Status;
 8008d1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3730      	adds	r7, #48	; 0x30
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b08a      	sub	sp, #40	; 0x28
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d34:	2300      	movs	r3, #0
 8008d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008d3a:	7afb      	ldrb	r3, [r7, #11]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <set_sequence_step_timeout+0x26>
 8008d40:	7afb      	ldrb	r3, [r7, #11]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d002      	beq.n	8008d4c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008d46:	7afb      	ldrb	r3, [r7, #11]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d138      	bne.n	8008dbe <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d4c:	f107 031b 	add.w	r3, r7, #27
 8008d50:	461a      	mov	r2, r3
 8008d52:	2100      	movs	r1, #0
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f7fd f87d 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d11a      	bne.n	8008d9e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008d68:	7efb      	ldrb	r3, [r7, #27]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	6879      	ldr	r1, [r7, #4]
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff fea4 	bl	8008abc <VL53L0X_calc_timeout_mclks>
 8008d74:	4603      	mov	r3, r0
 8008d76:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008d78:	8bbb      	ldrh	r3, [r7, #28]
 8008d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d7e:	d903      	bls.n	8008d88 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8008d80:	23ff      	movs	r3, #255	; 0xff
 8008d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d86:	e004      	b.n	8008d92 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008d88:	8bbb      	ldrh	r3, [r7, #28]
 8008d8a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008d9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f040 80ab 	bne.w	8008efe <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8008da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dac:	461a      	mov	r2, r3
 8008dae:	2146      	movs	r1, #70	; 0x46
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f001 ff47 	bl	800ac44 <VL53L0X_WrByte>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8008dbc:	e09f      	b.n	8008efe <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d135      	bne.n	8008e30 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008dc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d11b      	bne.n	8008e04 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008dcc:	f107 031b 	add.w	r3, r7, #27
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7fd f83d 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008de0:	7efb      	ldrb	r3, [r7, #27]
 8008de2:	461a      	mov	r2, r3
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff fe68 	bl	8008abc <VL53L0X_calc_timeout_mclks>
 8008dec:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8008dee:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff fe20 	bl	8008a38 <VL53L0X_encode_timeout>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008dfc:	8b3a      	ldrh	r2, [r7, #24]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008e04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d108      	bne.n	8008e1e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008e0c:	8b3b      	ldrh	r3, [r7, #24]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	2151      	movs	r1, #81	; 0x51
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f001 ff3a 	bl	800ac8c <VL53L0X_WrWord>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008e1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d16b      	bne.n	8008efe <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008e2e:	e066      	b.n	8008efe <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	d160      	bne.n	8008ef8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008e36:	f107 0310 	add.w	r3, r7, #16
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f7fd f915 	bl	800606c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008e46:	7cfb      	ldrb	r3, [r7, #19]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d01d      	beq.n	8008e88 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008e4c:	f107 031b 	add.w	r3, r7, #27
 8008e50:	461a      	mov	r2, r3
 8008e52:	2100      	movs	r1, #0
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f7fc fffd 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008e60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10f      	bne.n	8008e88 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008e68:	f107 0318 	add.w	r3, r7, #24
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	2151      	movs	r1, #81	; 0x51
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f001 ff93 	bl	800ad9c <VL53L0X_RdWord>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008e7c:	8b3b      	ldrh	r3, [r7, #24]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff fe06 	bl	8008a90 <VL53L0X_decode_timeout>
 8008e84:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8008e86:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d109      	bne.n	8008ea4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008e90:	f107 031b 	add.w	r3, r7, #27
 8008e94:	461a      	mov	r2, r3
 8008e96:	2101      	movs	r1, #1
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7fc ffdb 	bl	8005e54 <VL53L0X_GetVcselPulsePeriod>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008ea4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d128      	bne.n	8008efe <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008eac:	7efb      	ldrb	r3, [r7, #27]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	6879      	ldr	r1, [r7, #4]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fe02 	bl	8008abc <VL53L0X_calc_timeout_mclks>
 8008eb8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8008eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ebc:	6a3a      	ldr	r2, [r7, #32]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8008ec2:	6a38      	ldr	r0, [r7, #32]
 8008ec4:	f7ff fdb8 	bl	8008a38 <VL53L0X_encode_timeout>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8008ecc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d108      	bne.n	8008ee6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008ed4:	8bfb      	ldrh	r3, [r7, #30]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	2171      	movs	r1, #113	; 0x71
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f001 fed6 	bl	800ac8c <VL53L0X_WrWord>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008ee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d107      	bne.n	8008efe <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008ef6:	e002      	b.n	8008efe <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ef8:	23fc      	movs	r3, #252	; 0xfc
 8008efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8008efe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3728      	adds	r7, #40	; 0x28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b08a      	sub	sp, #40	; 0x28
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	460b      	mov	r3, r1
 8008f14:	70fb      	strb	r3, [r7, #3]
 8008f16:	4613      	mov	r3, r2
 8008f18:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8008f20:	230c      	movs	r3, #12
 8008f22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8008f26:	2312      	movs	r3, #18
 8008f28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8008f2c:	2308      	movs	r3, #8
 8008f2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8008f32:	230e      	movs	r3, #14
 8008f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8008f3c:	78bb      	ldrb	r3, [r7, #2]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008f48:	23fc      	movs	r3, #252	; 0xfc
 8008f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f4e:	e020      	b.n	8008f92 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10d      	bne.n	8008f72 <VL53L0X_set_vcsel_pulse_period+0x68>
 8008f56:	78ba      	ldrb	r2, [r7, #2]
 8008f58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d304      	bcc.n	8008f6a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8008f60:	78ba      	ldrb	r2, [r7, #2]
 8008f62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d903      	bls.n	8008f72 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008f6a:	23fc      	movs	r3, #252	; 0xfc
 8008f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f70:	e00f      	b.n	8008f92 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8008f72:	78fb      	ldrb	r3, [r7, #3]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d10c      	bne.n	8008f92 <VL53L0X_set_vcsel_pulse_period+0x88>
 8008f78:	78ba      	ldrb	r2, [r7, #2]
 8008f7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d304      	bcc.n	8008f8c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8008f82:	78ba      	ldrb	r2, [r7, #2]
 8008f84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d902      	bls.n	8008f92 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008f8c:	23fc      	movs	r3, #252	; 0xfc
 8008f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8008f92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8008f9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f9e:	e239      	b.n	8009414 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d150      	bne.n	8009048 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8008fa6:	78bb      	ldrb	r3, [r7, #2]
 8008fa8:	2b0c      	cmp	r3, #12
 8008faa:	d110      	bne.n	8008fce <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8008fac:	2218      	movs	r2, #24
 8008fae:	2157      	movs	r1, #87	; 0x57
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 fe47 	bl	800ac44 <VL53L0X_WrByte>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	2156      	movs	r1, #86	; 0x56
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 fe3f 	bl	800ac44 <VL53L0X_WrByte>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fcc:	e17f      	b.n	80092ce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008fce:	78bb      	ldrb	r3, [r7, #2]
 8008fd0:	2b0e      	cmp	r3, #14
 8008fd2:	d110      	bne.n	8008ff6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8008fd4:	2230      	movs	r2, #48	; 0x30
 8008fd6:	2157      	movs	r1, #87	; 0x57
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 fe33 	bl	800ac44 <VL53L0X_WrByte>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	2156      	movs	r1, #86	; 0x56
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 fe2b 	bl	800ac44 <VL53L0X_WrByte>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ff4:	e16b      	b.n	80092ce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8008ff6:	78bb      	ldrb	r3, [r7, #2]
 8008ff8:	2b10      	cmp	r3, #16
 8008ffa:	d110      	bne.n	800901e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8008ffc:	2240      	movs	r2, #64	; 0x40
 8008ffe:	2157      	movs	r1, #87	; 0x57
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f001 fe1f 	bl	800ac44 <VL53L0X_WrByte>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800900c:	2208      	movs	r2, #8
 800900e:	2156      	movs	r1, #86	; 0x56
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 fe17 	bl	800ac44 <VL53L0X_WrByte>
 8009016:	4603      	mov	r3, r0
 8009018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800901c:	e157      	b.n	80092ce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800901e:	78bb      	ldrb	r3, [r7, #2]
 8009020:	2b12      	cmp	r3, #18
 8009022:	f040 8154 	bne.w	80092ce <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009026:	2250      	movs	r2, #80	; 0x50
 8009028:	2157      	movs	r1, #87	; 0x57
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 fe0a 	bl	800ac44 <VL53L0X_WrByte>
 8009030:	4603      	mov	r3, r0
 8009032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009036:	2208      	movs	r2, #8
 8009038:	2156      	movs	r1, #86	; 0x56
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 fe02 	bl	800ac44 <VL53L0X_WrByte>
 8009040:	4603      	mov	r3, r0
 8009042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009046:	e142      	b.n	80092ce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	2b01      	cmp	r3, #1
 800904c:	f040 813f 	bne.w	80092ce <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009050:	78bb      	ldrb	r3, [r7, #2]
 8009052:	2b08      	cmp	r3, #8
 8009054:	d14c      	bne.n	80090f0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009056:	2210      	movs	r2, #16
 8009058:	2148      	movs	r1, #72	; 0x48
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f001 fdf2 	bl	800ac44 <VL53L0X_WrByte>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009066:	2208      	movs	r2, #8
 8009068:	2147      	movs	r1, #71	; 0x47
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f001 fdea 	bl	800ac44 <VL53L0X_WrByte>
 8009070:	4603      	mov	r3, r0
 8009072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009076:	2202      	movs	r2, #2
 8009078:	2132      	movs	r1, #50	; 0x32
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f001 fde2 	bl	800ac44 <VL53L0X_WrByte>
 8009080:	4603      	mov	r3, r0
 8009082:	461a      	mov	r2, r3
 8009084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009088:	4313      	orrs	r3, r2
 800908a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800908e:	220c      	movs	r2, #12
 8009090:	2130      	movs	r1, #48	; 0x30
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 fdd6 	bl	800ac44 <VL53L0X_WrByte>
 8009098:	4603      	mov	r3, r0
 800909a:	461a      	mov	r2, r3
 800909c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090a0:	4313      	orrs	r3, r2
 80090a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80090a6:	2201      	movs	r2, #1
 80090a8:	21ff      	movs	r1, #255	; 0xff
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 fdca 	bl	800ac44 <VL53L0X_WrByte>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090b8:	4313      	orrs	r3, r2
 80090ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80090be:	2230      	movs	r2, #48	; 0x30
 80090c0:	2130      	movs	r1, #48	; 0x30
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 fdbe 	bl	800ac44 <VL53L0X_WrByte>
 80090c8:	4603      	mov	r3, r0
 80090ca:	461a      	mov	r2, r3
 80090cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090d0:	4313      	orrs	r3, r2
 80090d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80090d6:	2200      	movs	r2, #0
 80090d8:	21ff      	movs	r1, #255	; 0xff
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 fdb2 	bl	800ac44 <VL53L0X_WrByte>
 80090e0:	4603      	mov	r3, r0
 80090e2:	461a      	mov	r2, r3
 80090e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090e8:	4313      	orrs	r3, r2
 80090ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090ee:	e0ee      	b.n	80092ce <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80090f0:	78bb      	ldrb	r3, [r7, #2]
 80090f2:	2b0a      	cmp	r3, #10
 80090f4:	d14c      	bne.n	8009190 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80090f6:	2228      	movs	r2, #40	; 0x28
 80090f8:	2148      	movs	r1, #72	; 0x48
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 fda2 	bl	800ac44 <VL53L0X_WrByte>
 8009100:	4603      	mov	r3, r0
 8009102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009106:	2208      	movs	r2, #8
 8009108:	2147      	movs	r1, #71	; 0x47
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 fd9a 	bl	800ac44 <VL53L0X_WrByte>
 8009110:	4603      	mov	r3, r0
 8009112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009116:	2203      	movs	r2, #3
 8009118:	2132      	movs	r1, #50	; 0x32
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 fd92 	bl	800ac44 <VL53L0X_WrByte>
 8009120:	4603      	mov	r3, r0
 8009122:	461a      	mov	r2, r3
 8009124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009128:	4313      	orrs	r3, r2
 800912a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800912e:	2209      	movs	r2, #9
 8009130:	2130      	movs	r1, #48	; 0x30
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 fd86 	bl	800ac44 <VL53L0X_WrByte>
 8009138:	4603      	mov	r3, r0
 800913a:	461a      	mov	r2, r3
 800913c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009140:	4313      	orrs	r3, r2
 8009142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009146:	2201      	movs	r2, #1
 8009148:	21ff      	movs	r1, #255	; 0xff
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 fd7a 	bl	800ac44 <VL53L0X_WrByte>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009158:	4313      	orrs	r3, r2
 800915a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800915e:	2220      	movs	r2, #32
 8009160:	2130      	movs	r1, #48	; 0x30
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 fd6e 	bl	800ac44 <VL53L0X_WrByte>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009170:	4313      	orrs	r3, r2
 8009172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009176:	2200      	movs	r2, #0
 8009178:	21ff      	movs	r1, #255	; 0xff
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 fd62 	bl	800ac44 <VL53L0X_WrByte>
 8009180:	4603      	mov	r3, r0
 8009182:	461a      	mov	r2, r3
 8009184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009188:	4313      	orrs	r3, r2
 800918a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800918e:	e09e      	b.n	80092ce <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009190:	78bb      	ldrb	r3, [r7, #2]
 8009192:	2b0c      	cmp	r3, #12
 8009194:	d14c      	bne.n	8009230 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009196:	2238      	movs	r2, #56	; 0x38
 8009198:	2148      	movs	r1, #72	; 0x48
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 fd52 	bl	800ac44 <VL53L0X_WrByte>
 80091a0:	4603      	mov	r3, r0
 80091a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80091a6:	2208      	movs	r2, #8
 80091a8:	2147      	movs	r1, #71	; 0x47
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f001 fd4a 	bl	800ac44 <VL53L0X_WrByte>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80091b6:	2203      	movs	r2, #3
 80091b8:	2132      	movs	r1, #50	; 0x32
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f001 fd42 	bl	800ac44 <VL53L0X_WrByte>
 80091c0:	4603      	mov	r3, r0
 80091c2:	461a      	mov	r2, r3
 80091c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091c8:	4313      	orrs	r3, r2
 80091ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80091ce:	2208      	movs	r2, #8
 80091d0:	2130      	movs	r1, #48	; 0x30
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 fd36 	bl	800ac44 <VL53L0X_WrByte>
 80091d8:	4603      	mov	r3, r0
 80091da:	461a      	mov	r2, r3
 80091dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091e0:	4313      	orrs	r3, r2
 80091e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80091e6:	2201      	movs	r2, #1
 80091e8:	21ff      	movs	r1, #255	; 0xff
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 fd2a 	bl	800ac44 <VL53L0X_WrByte>
 80091f0:	4603      	mov	r3, r0
 80091f2:	461a      	mov	r2, r3
 80091f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80091fe:	2220      	movs	r2, #32
 8009200:	2130      	movs	r1, #48	; 0x30
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 fd1e 	bl	800ac44 <VL53L0X_WrByte>
 8009208:	4603      	mov	r3, r0
 800920a:	461a      	mov	r2, r3
 800920c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009210:	4313      	orrs	r3, r2
 8009212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009216:	2200      	movs	r2, #0
 8009218:	21ff      	movs	r1, #255	; 0xff
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 fd12 	bl	800ac44 <VL53L0X_WrByte>
 8009220:	4603      	mov	r3, r0
 8009222:	461a      	mov	r2, r3
 8009224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009228:	4313      	orrs	r3, r2
 800922a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800922e:	e04e      	b.n	80092ce <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009230:	78bb      	ldrb	r3, [r7, #2]
 8009232:	2b0e      	cmp	r3, #14
 8009234:	d14b      	bne.n	80092ce <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009236:	2248      	movs	r2, #72	; 0x48
 8009238:	2148      	movs	r1, #72	; 0x48
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 fd02 	bl	800ac44 <VL53L0X_WrByte>
 8009240:	4603      	mov	r3, r0
 8009242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009246:	2208      	movs	r2, #8
 8009248:	2147      	movs	r1, #71	; 0x47
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 fcfa 	bl	800ac44 <VL53L0X_WrByte>
 8009250:	4603      	mov	r3, r0
 8009252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009256:	2203      	movs	r2, #3
 8009258:	2132      	movs	r1, #50	; 0x32
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f001 fcf2 	bl	800ac44 <VL53L0X_WrByte>
 8009260:	4603      	mov	r3, r0
 8009262:	461a      	mov	r2, r3
 8009264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009268:	4313      	orrs	r3, r2
 800926a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800926e:	2207      	movs	r2, #7
 8009270:	2130      	movs	r1, #48	; 0x30
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 fce6 	bl	800ac44 <VL53L0X_WrByte>
 8009278:	4603      	mov	r3, r0
 800927a:	461a      	mov	r2, r3
 800927c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009280:	4313      	orrs	r3, r2
 8009282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009286:	2201      	movs	r2, #1
 8009288:	21ff      	movs	r1, #255	; 0xff
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f001 fcda 	bl	800ac44 <VL53L0X_WrByte>
 8009290:	4603      	mov	r3, r0
 8009292:	461a      	mov	r2, r3
 8009294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009298:	4313      	orrs	r3, r2
 800929a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800929e:	2220      	movs	r2, #32
 80092a0:	2130      	movs	r1, #48	; 0x30
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 fcce 	bl	800ac44 <VL53L0X_WrByte>
 80092a8:	4603      	mov	r3, r0
 80092aa:	461a      	mov	r2, r3
 80092ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092b0:	4313      	orrs	r3, r2
 80092b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80092b6:	2200      	movs	r2, #0
 80092b8:	21ff      	movs	r1, #255	; 0xff
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f001 fcc2 	bl	800ac44 <VL53L0X_WrByte>
 80092c0:	4603      	mov	r3, r0
 80092c2:	461a      	mov	r2, r3
 80092c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092c8:	4313      	orrs	r3, r2
 80092ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80092ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d17f      	bne.n	80093d6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80092d6:	78bb      	ldrb	r3, [r7, #2]
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe fe38 	bl	8007f4e <VL53L0X_encode_vcsel_period>
 80092de:	4603      	mov	r3, r0
 80092e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d045      	beq.n	800937a <VL53L0X_set_vcsel_pulse_period+0x470>
 80092ee:	e06e      	b.n	80093ce <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80092f0:	f107 0314 	add.w	r3, r7, #20
 80092f4:	461a      	mov	r2, r3
 80092f6:	2103      	movs	r1, #3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7ff fc33 	bl	8008b64 <get_sequence_step_timeout>
 80092fe:	4603      	mov	r3, r0
 8009300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009304:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009308:	2b00      	cmp	r3, #0
 800930a:	d109      	bne.n	8009320 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800930c:	f107 0310 	add.w	r3, r7, #16
 8009310:	461a      	mov	r2, r3
 8009312:	2102      	movs	r1, #2
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff fc25 	bl	8008b64 <get_sequence_step_timeout>
 800931a:	4603      	mov	r3, r0
 800931c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009324:	2b00      	cmp	r3, #0
 8009326:	d109      	bne.n	800933c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009328:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800932c:	461a      	mov	r2, r3
 800932e:	2150      	movs	r1, #80	; 0x50
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 fc87 	bl	800ac44 <VL53L0X_WrByte>
 8009336:	4603      	mov	r3, r0
 8009338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800933c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009340:	2b00      	cmp	r3, #0
 8009342:	d108      	bne.n	8009356 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	461a      	mov	r2, r3
 8009348:	2103      	movs	r1, #3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff fceb 	bl	8008d26 <set_sequence_step_timeout>
 8009350:	4603      	mov	r3, r0
 8009352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009356:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800935a:	2b00      	cmp	r3, #0
 800935c:	d108      	bne.n	8009370 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	461a      	mov	r2, r3
 8009362:	2102      	movs	r1, #2
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7ff fcde 	bl	8008d26 <set_sequence_step_timeout>
 800936a:	4603      	mov	r3, r0
 800936c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	78ba      	ldrb	r2, [r7, #2]
 8009374:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009378:	e02e      	b.n	80093d8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800937a:	f107 0318 	add.w	r3, r7, #24
 800937e:	461a      	mov	r2, r3
 8009380:	2104      	movs	r1, #4
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff fbee 	bl	8008b64 <get_sequence_step_timeout>
 8009388:	4603      	mov	r3, r0
 800938a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800938e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009392:	2b00      	cmp	r3, #0
 8009394:	d109      	bne.n	80093aa <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009396:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800939a:	461a      	mov	r2, r3
 800939c:	2170      	movs	r1, #112	; 0x70
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 fc50 	bl	800ac44 <VL53L0X_WrByte>
 80093a4:	4603      	mov	r3, r0
 80093a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80093aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d108      	bne.n	80093c4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	461a      	mov	r2, r3
 80093b6:	2104      	movs	r1, #4
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff fcb4 	bl	8008d26 <set_sequence_step_timeout>
 80093be:	4603      	mov	r3, r0
 80093c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	78ba      	ldrb	r2, [r7, #2]
 80093c8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80093cc:	e004      	b.n	80093d8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80093ce:	23fc      	movs	r3, #252	; 0xfc
 80093d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093d4:	e000      	b.n	80093d8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80093d6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80093d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80093e6:	69f9      	ldr	r1, [r7, #28]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7fc fcf5 	bl	8005dd8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80093f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d109      	bne.n	8009410 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80093fc:	f107 010f 	add.w	r1, r7, #15
 8009400:	2301      	movs	r3, #1
 8009402:	2200      	movs	r2, #0
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7fe fcbd 	bl	8007d84 <VL53L0X_perform_phase_calibration>
 800940a:	4603      	mov	r3, r0
 800940c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009410:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009414:	4618      	mov	r0, r3
 8009416:	3728      	adds	r7, #40	; 0x28
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	460b      	mov	r3, r1
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
 800942c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009434:	2b01      	cmp	r3, #1
 8009436:	d00a      	beq.n	800944e <VL53L0X_get_vcsel_pulse_period+0x32>
 8009438:	e013      	b.n	8009462 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800943a:	f107 0316 	add.w	r3, r7, #22
 800943e:	461a      	mov	r2, r3
 8009440:	2150      	movs	r1, #80	; 0x50
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f001 fc80 	bl	800ad48 <VL53L0X_RdByte>
 8009448:	4603      	mov	r3, r0
 800944a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800944c:	e00b      	b.n	8009466 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800944e:	f107 0316 	add.w	r3, r7, #22
 8009452:	461a      	mov	r2, r3
 8009454:	2170      	movs	r1, #112	; 0x70
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f001 fc76 	bl	800ad48 <VL53L0X_RdByte>
 800945c:	4603      	mov	r3, r0
 800945e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009460:	e001      	b.n	8009466 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009462:	23fc      	movs	r3, #252	; 0xfc
 8009464:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009466:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d107      	bne.n	800947e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800946e:	7dbb      	ldrb	r3, [r7, #22]
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fd59 	bl	8007f28 <VL53L0X_decode_vcsel_period>
 8009476:	4603      	mov	r3, r0
 8009478:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	701a      	strb	r2, [r3, #0]

	return Status;
 800947e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b092      	sub	sp, #72	; 0x48
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009494:	2300      	movs	r3, #0
 8009496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800949a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800949e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80094a0:	f240 7376 	movw	r3, #1910	; 0x776
 80094a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80094a6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80094aa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80094ac:	f44f 7325 	mov.w	r3, #660	; 0x294
 80094b0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80094b2:	f240 234e 	movw	r3, #590	; 0x24e
 80094b6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80094b8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80094be:	f44f 7325 	mov.w	r3, #660	; 0x294
 80094c2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80094c4:	f240 2326 	movw	r3, #550	; 0x226
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80094ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80094d2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d205      	bcs.n	80094ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80094e0:	23fc      	movs	r3, #252	; 0xfc
 80094e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80094e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80094ea:	e0aa      	b.n	8009642 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80094ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80094f8:	f107 0314 	add.w	r3, r7, #20
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7fc fdb4 	bl	800606c <VL53L0X_GetSequenceStepEnables>
 8009504:	4603      	mov	r3, r0
 8009506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800950a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800950e:	2b00      	cmp	r3, #0
 8009510:	d15b      	bne.n	80095ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009512:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009514:	2b00      	cmp	r3, #0
 8009516:	d105      	bne.n	8009524 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009518:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800951a:	2b00      	cmp	r3, #0
 800951c:	d102      	bne.n	8009524 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800951e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009520:	2b00      	cmp	r3, #0
 8009522:	d052      	beq.n	80095ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009524:	f107 0310 	add.w	r3, r7, #16
 8009528:	461a      	mov	r2, r3
 800952a:	2102      	movs	r1, #2
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7ff fb19 	bl	8008b64 <get_sequence_step_timeout>
 8009532:	4603      	mov	r3, r0
 8009534:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009538:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009540:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009544:	e07d      	b.n	8009642 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009546:	7d3b      	ldrb	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00f      	beq.n	800956c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800954c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800954e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009550:	4413      	add	r3, r2
 8009552:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009554:	69fa      	ldr	r2, [r7, #28]
 8009556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009558:	429a      	cmp	r2, r3
 800955a:	d204      	bcs.n	8009566 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800955c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	643b      	str	r3, [r7, #64]	; 0x40
 8009564:	e002      	b.n	800956c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009566:	23fc      	movs	r3, #252	; 0xfc
 8009568:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800956c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009574:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009578:	e063      	b.n	8009642 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800957a:	7dbb      	ldrb	r3, [r7, #22]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d011      	beq.n	80095a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009584:	4413      	add	r3, r2
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800958e:	429a      	cmp	r2, r3
 8009590:	d204      	bcs.n	800959c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	643b      	str	r3, [r7, #64]	; 0x40
 800959a:	e016      	b.n	80095ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800959c:	23fc      	movs	r3, #252	; 0xfc
 800959e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80095a2:	e012      	b.n	80095ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80095a4:	7d7b      	ldrb	r3, [r7, #21]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00f      	beq.n	80095ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095ae:	4413      	add	r3, r2
 80095b0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80095b2:	69fa      	ldr	r2, [r7, #28]
 80095b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d204      	bcs.n	80095c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80095ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	643b      	str	r3, [r7, #64]	; 0x40
 80095c2:	e002      	b.n	80095ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80095c4:	23fc      	movs	r3, #252	; 0xfc
 80095c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80095ca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80095d2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80095d6:	e034      	b.n	8009642 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d019      	beq.n	8009612 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80095de:	f107 030c 	add.w	r3, r7, #12
 80095e2:	461a      	mov	r2, r3
 80095e4:	2103      	movs	r1, #3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff fabc 	bl	8008b64 <get_sequence_step_timeout>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095f6:	4413      	add	r3, r2
 80095f8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095fe:	429a      	cmp	r2, r3
 8009600:	d204      	bcs.n	800960c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	643b      	str	r3, [r7, #64]	; 0x40
 800960a:	e002      	b.n	8009612 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800960c:	23fc      	movs	r3, #252	; 0xfc
 800960e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009612:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009616:	2b00      	cmp	r3, #0
 8009618:	d111      	bne.n	800963e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800961a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00e      	beq.n	800963e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800962a:	2104      	movs	r1, #4
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff fb7a 	bl	8008d26 <set_sequence_step_timeout>
 8009632:	4603      	mov	r3, r0
 8009634:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800963e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009642:	4618      	mov	r0, r3
 8009644:	3748      	adds	r7, #72	; 0x48
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b090      	sub	sp, #64	; 0x40
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009654:	2300      	movs	r3, #0
 8009656:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800965a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800965e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009660:	f240 7376 	movw	r3, #1910	; 0x776
 8009664:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009666:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800966a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800966c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009670:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009672:	f240 234e 	movw	r3, #590	; 0x24e
 8009676:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009678:	f240 23b2 	movw	r3, #690	; 0x2b2
 800967c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800967e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009682:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009684:	f240 2326 	movw	r3, #550	; 0x226
 8009688:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800968a:	2300      	movs	r3, #0
 800968c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800968e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009692:	441a      	add	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009698:	f107 0318 	add.w	r3, r7, #24
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7fc fce4 	bl	800606c <VL53L0X_GetSequenceStepEnables>
 80096a4:	4603      	mov	r3, r0
 80096a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80096aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80096b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096b6:	e075      	b.n	80097a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80096b8:	7e3b      	ldrb	r3, [r7, #24]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d105      	bne.n	80096ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80096be:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d102      	bne.n	80096ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80096c4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d030      	beq.n	800972c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80096ca:	f107 0310 	add.w	r3, r7, #16
 80096ce:	461a      	mov	r2, r3
 80096d0:	2102      	movs	r1, #2
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fa46 	bl	8008b64 <get_sequence_step_timeout>
 80096d8:	4603      	mov	r3, r0
 80096da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80096de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d122      	bne.n	800972c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80096e6:	7e3b      	ldrb	r3, [r7, #24]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d007      	beq.n	80096fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80096f0:	6939      	ldr	r1, [r7, #16]
 80096f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80096f6:	441a      	add	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80096fc:	7ebb      	ldrb	r3, [r7, #26]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d009      	beq.n	8009716 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009706:	6939      	ldr	r1, [r7, #16]
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	440b      	add	r3, r1
 800970c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800970e:	441a      	add	r2, r3
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	e00a      	b.n	800972c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009716:	7e7b      	ldrb	r3, [r7, #25]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d007      	beq.n	800972c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009720:	6939      	ldr	r1, [r7, #16]
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009726:	441a      	add	r2, r3
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800972c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009730:	2b00      	cmp	r3, #0
 8009732:	d114      	bne.n	800975e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009734:	7efb      	ldrb	r3, [r7, #27]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d011      	beq.n	800975e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800973a:	f107 030c 	add.w	r3, r7, #12
 800973e:	461a      	mov	r2, r3
 8009740:	2103      	movs	r1, #3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff fa0e 	bl	8008b64 <get_sequence_step_timeout>
 8009748:	4603      	mov	r3, r0
 800974a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009752:	68f9      	ldr	r1, [r7, #12]
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009758:	441a      	add	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800975e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009762:	2b00      	cmp	r3, #0
 8009764:	d114      	bne.n	8009790 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009766:	7f3b      	ldrb	r3, [r7, #28]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d011      	beq.n	8009790 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800976c:	f107 0314 	add.w	r3, r7, #20
 8009770:	461a      	mov	r2, r3
 8009772:	2104      	movs	r1, #4
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff f9f5 	bl	8008b64 <get_sequence_step_timeout>
 800977a:	4603      	mov	r3, r0
 800977c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009784:	6979      	ldr	r1, [r7, #20]
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800978a:	441a      	add	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009790:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009794:	2b00      	cmp	r3, #0
 8009796:	d103      	bne.n	80097a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80097a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3740      	adds	r7, #64	; 0x40
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097b6:	2300      	movs	r3, #0
 80097b8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80097be:	e0c6      	b.n	800994e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	4413      	add	r3, r2
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	74fb      	strb	r3, [r7, #19]
		Index++;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	3301      	adds	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80097d0:	7cfb      	ldrb	r3, [r7, #19]
 80097d2:	2bff      	cmp	r3, #255	; 0xff
 80097d4:	f040 808d 	bne.w	80098f2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4413      	add	r3, r2
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	747b      	strb	r3, [r7, #17]
			Index++;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	3301      	adds	r3, #1
 80097e6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80097e8:	7c7b      	ldrb	r3, [r7, #17]
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d87e      	bhi.n	80098ec <VL53L0X_load_tuning_settings+0x140>
 80097ee:	a201      	add	r2, pc, #4	; (adr r2, 80097f4 <VL53L0X_load_tuning_settings+0x48>)
 80097f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f4:	08009805 	.word	0x08009805
 80097f8:	0800983f 	.word	0x0800983f
 80097fc:	08009879 	.word	0x08009879
 8009800:	080098b3 	.word	0x080098b3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	4413      	add	r3, r2
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	743b      	strb	r3, [r7, #16]
				Index++;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	3301      	adds	r3, #1
 8009812:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4413      	add	r3, r2
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	3301      	adds	r3, #1
 8009822:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009824:	7c3b      	ldrb	r3, [r7, #16]
 8009826:	b29b      	uxth	r3, r3
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	b29a      	uxth	r2, r3
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	b29b      	uxth	r3, r3
 8009830:	4413      	add	r3, r2
 8009832:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	89ba      	ldrh	r2, [r7, #12]
 8009838:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800983c:	e087      	b.n	800994e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	4413      	add	r3, r2
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	743b      	strb	r3, [r7, #16]
				Index++;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	3301      	adds	r3, #1
 800984c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	4413      	add	r3, r2
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	3301      	adds	r3, #1
 800985c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800985e:	7c3b      	ldrb	r3, [r7, #16]
 8009860:	b29b      	uxth	r3, r3
 8009862:	021b      	lsls	r3, r3, #8
 8009864:	b29a      	uxth	r2, r3
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	b29b      	uxth	r3, r3
 800986a:	4413      	add	r3, r2
 800986c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	89ba      	ldrh	r2, [r7, #12]
 8009872:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009876:	e06a      	b.n	800994e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	4413      	add	r3, r2
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	743b      	strb	r3, [r7, #16]
				Index++;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	3301      	adds	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	4413      	add	r3, r2
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	3301      	adds	r3, #1
 8009896:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009898:	7c3b      	ldrb	r3, [r7, #16]
 800989a:	b29b      	uxth	r3, r3
 800989c:	021b      	lsls	r3, r3, #8
 800989e:	b29a      	uxth	r2, r3
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	4413      	add	r3, r2
 80098a6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	89ba      	ldrh	r2, [r7, #12]
 80098ac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80098b0:	e04d      	b.n	800994e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	4413      	add	r3, r2
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	743b      	strb	r3, [r7, #16]
				Index++;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	3301      	adds	r3, #1
 80098c0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	4413      	add	r3, r2
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	73fb      	strb	r3, [r7, #15]
				Index++;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	3301      	adds	r3, #1
 80098d0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80098d2:	7c3b      	ldrb	r3, [r7, #16]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	021b      	lsls	r3, r3, #8
 80098d8:	b29a      	uxth	r2, r3
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	4413      	add	r3, r2
 80098e0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	89ba      	ldrh	r2, [r7, #12]
 80098e6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80098ea:	e030      	b.n	800994e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80098ec:	23fc      	movs	r3, #252	; 0xfc
 80098ee:	77fb      	strb	r3, [r7, #31]
 80098f0:	e02d      	b.n	800994e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80098f2:	7cfb      	ldrb	r3, [r7, #19]
 80098f4:	2b04      	cmp	r3, #4
 80098f6:	d828      	bhi.n	800994a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	4413      	add	r3, r2
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	3301      	adds	r3, #1
 8009906:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009908:	2300      	movs	r3, #0
 800990a:	61bb      	str	r3, [r7, #24]
 800990c:	e00f      	b.n	800992e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	4413      	add	r3, r2
 8009914:	7819      	ldrb	r1, [r3, #0]
 8009916:	f107 0208 	add.w	r2, r7, #8
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	4413      	add	r3, r2
 800991e:	460a      	mov	r2, r1
 8009920:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	3301      	adds	r3, #1
 8009926:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	3301      	adds	r3, #1
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	7cfb      	ldrb	r3, [r7, #19]
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	429a      	cmp	r2, r3
 8009934:	dbeb      	blt.n	800990e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009936:	7cfb      	ldrb	r3, [r7, #19]
 8009938:	f107 0208 	add.w	r2, r7, #8
 800993c:	7cb9      	ldrb	r1, [r7, #18]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 f924 	bl	800ab8c <VL53L0X_WriteMulti>
 8009944:	4603      	mov	r3, r0
 8009946:	77fb      	strb	r3, [r7, #31]
 8009948:	e001      	b.n	800994e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800994a:	23fc      	movs	r3, #252	; 0xfc
 800994c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	4413      	add	r3, r2
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d004      	beq.n	8009964 <VL53L0X_load_tuning_settings+0x1b8>
 800995a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800995e:	2b00      	cmp	r3, #0
 8009960:	f43f af2e 	beq.w	80097c0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009964:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3720      	adds	r7, #32
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800997c:	2300      	movs	r3, #0
 800997e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009986:	f107 0313 	add.w	r3, r7, #19
 800998a:	4619      	mov	r1, r3
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7fc fbf9 	bl	8006184 <VL53L0X_GetXTalkCompensationEnable>
 8009992:	4603      	mov	r3, r0
 8009994:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009996:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d111      	bne.n	80099c2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800999e:	7cfb      	ldrb	r3, [r7, #19]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00e      	beq.n	80099c2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	8a9b      	ldrh	r3, [r3, #20]
 80099ae:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	fb02 f303 	mul.w	r3, r2, r3
 80099b6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	3380      	adds	r3, #128	; 0x80
 80099bc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80099c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b086      	sub	sp, #24
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099da:	2300      	movs	r3, #0
 80099dc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80099e6:	f107 0310 	add.w	r3, r7, #16
 80099ea:	461a      	mov	r2, r3
 80099ec:	68b9      	ldr	r1, [r7, #8]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f7ff ffbe 	bl	8009970 <VL53L0X_get_total_xtalk_rate>
 80099f4:	4603      	mov	r3, r0
 80099f6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80099f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d105      	bne.n	8009a0c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	441a      	add	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	601a      	str	r2, [r3, #0]

	return Status;
 8009a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b09a      	sub	sp, #104	; 0x68
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009a26:	2312      	movs	r3, #18
 8009a28:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009a2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a2e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009a30:	2342      	movs	r3, #66	; 0x42
 8009a32:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009a34:	2306      	movs	r3, #6
 8009a36:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009a38:	2307      	movs	r3, #7
 8009a3a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009a48:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009a50:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8009a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a56:	fb02 f303 	mul.w	r3, r2, r3
 8009a5a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a5e:	3380      	adds	r3, #128	; 0x80
 8009a60:	0a1b      	lsrs	r3, r3, #8
 8009a62:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a68:	fb02 f303 	mul.w	r3, r2, r3
 8009a6c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01a      	beq.n	8009aae <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	029b      	lsls	r3, r3, #10
 8009a7c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8009a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a84:	4413      	add	r3, r2
 8009a86:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009a88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a90:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8009a92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8009a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a9e:	fb03 f303 	mul.w	r3, r3, r3
 8009aa2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8009aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009aaa:	0c1b      	lsrs	r3, r3, #16
 8009aac:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ab2:	fb02 f303 	mul.w	r3, r2, r3
 8009ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8009ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009abe:	0c1b      	lsrs	r3, r3, #16
 8009ac0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	fb03 f303 	mul.w	r3, r3, r3
 8009ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8009aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009acc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009ad0:	0c1b      	lsrs	r3, r3, #16
 8009ad2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad6:	085a      	lsrs	r2, r3, #1
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	441a      	add	r2, r3
 8009adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ae8:	fb02 f303 	mul.w	r3, r2, r3
 8009aec:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8009aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af4:	d302      	bcc.n	8009afc <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8009af6:	4b54      	ldr	r3, [pc, #336]	; (8009c48 <VL53L0X_calc_dmax+0x230>)
 8009af8:	663b      	str	r3, [r7, #96]	; 0x60
 8009afa:	e015      	b.n	8009b28 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009afe:	085a      	lsrs	r2, r3, #1
 8009b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b02:	441a      	add	r2, r3
 8009b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b0a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8009b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b10:	fb02 f303 	mul.w	r3, r2, r3
 8009b14:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009b1c:	0c1b      	lsrs	r3, r3, #16
 8009b1e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8009b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b22:	fb03 f303 	mul.w	r3, r3, r3
 8009b26:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b2a:	039b      	lsls	r3, r3, #14
 8009b2c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009b30:	4a46      	ldr	r2, [pc, #280]	; (8009c4c <VL53L0X_calc_dmax+0x234>)
 8009b32:	fba2 2303 	umull	r2, r3, r2, r3
 8009b36:	099b      	lsrs	r3, r3, #6
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	fb03 f303 	mul.w	r3, r3, r3
 8009b40:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8009b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b44:	fb03 f303 	mul.w	r3, r3, r3
 8009b48:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	091b      	lsrs	r3, r3, #4
 8009b50:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8009b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8009b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	4413      	add	r3, r2
 8009b62:	011b      	lsls	r3, r3, #4
 8009b64:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009b6c:	0b9b      	lsrs	r3, r3, #14
 8009b6e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8009b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b74:	4413      	add	r3, r2
 8009b76:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8009b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b7a:	085b      	lsrs	r3, r3, #1
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	4413      	add	r3, r2
 8009b80:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b8a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	039b      	lsls	r3, r3, #14
 8009b90:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	085b      	lsrs	r3, r3, #1
 8009b96:	69ba      	ldr	r2, [r7, #24]
 8009b98:	4413      	add	r3, r2
 8009b9a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009baa:	fb02 f303 	mul.w	r3, r2, r3
 8009bae:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009bb6:	4a25      	ldr	r2, [pc, #148]	; (8009c4c <VL53L0X_calc_dmax+0x234>)
 8009bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bbc:	099b      	lsrs	r3, r3, #6
 8009bbe:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	011b      	lsls	r3, r3, #4
 8009bc4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009bcc:	4a1f      	ldr	r2, [pc, #124]	; (8009c4c <VL53L0X_calc_dmax+0x234>)
 8009bce:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd2:	099b      	lsrs	r3, r3, #6
 8009bd4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8009bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bd8:	3380      	adds	r3, #128	; 0x80
 8009bda:	0a1b      	lsrs	r3, r3, #8
 8009bdc:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d008      	beq.n	8009bf6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	085a      	lsrs	r2, r3, #1
 8009be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bea:	441a      	add	r2, r3
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bf4:	e001      	b.n	8009bfa <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8009bfa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009bfc:	f7fe f9ba 	bl	8007f74 <VL53L0X_isqrt>
 8009c00:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d008      	beq.n	8009c1a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	085a      	lsrs	r2, r3, #1
 8009c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0e:	441a      	add	r2, r3
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c18:	e001      	b.n	8009c1e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8009c1e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009c20:	f7fe f9a8 	bl	8007f74 <VL53L0X_isqrt>
 8009c24:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009c26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d902      	bls.n	8009c3a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8009c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c38:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009c3a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3768      	adds	r7, #104	; 0x68
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	fff00000 	.word	0xfff00000
 8009c4c:	10624dd3 	.word	0x10624dd3

08009c50 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b0b4      	sub	sp, #208	; 0xd0
 8009c54:	af04      	add	r7, sp, #16
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8009c5e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009c66:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8009c6e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8009c72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009c76:	f241 235c 	movw	r3, #4700	; 0x125c
 8009c7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8009c7e:	4b9e      	ldr	r3, [pc, #632]	; (8009ef8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8009c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009c84:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009c88:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8009c8a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8009c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c96:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8009c98:	4b98      	ldr	r3, [pc, #608]	; (8009efc <VL53L0X_calc_sigma_estimate+0x2ac>)
 8009c9a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8009c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ca0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8009ca2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8009ca8:	f240 6377 	movw	r3, #1655	; 0x677
 8009cac:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cc2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8009cc6:	0c1b      	lsrs	r3, r3, #16
 8009cc8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8009cd0:	f107 0310 	add.w	r3, r7, #16
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	68b9      	ldr	r1, [r7, #8]
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f7ff fe78 	bl	80099ce <VL53L0X_get_total_signal_rate>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009ce4:	f107 0314 	add.w	r3, r7, #20
 8009ce8:	461a      	mov	r2, r3
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff fe3f 	bl	8009970 <VL53L0X_get_total_xtalk_rate>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cfe:	fb02 f303 	mul.w	r3, r2, r3
 8009d02:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009d0a:	0c1b      	lsrs	r3, r3, #16
 8009d0c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d14:	fb02 f303 	mul.w	r3, r2, r3
 8009d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009d1c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d902      	bls.n	8009d2c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8009d2c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d168      	bne.n	8009e06 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009d44:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009d48:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f7fe feb2 	bl	8008abc <VL53L0X_calc_timeout_mclks>
 8009d58:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009d6a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009d6e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009d72:	461a      	mov	r2, r3
 8009d74:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f7fe fe9f 	bl	8008abc <VL53L0X_calc_timeout_mclks>
 8009d7e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8009d80:	2303      	movs	r3, #3
 8009d82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8009d86:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009d8a:	2b08      	cmp	r3, #8
 8009d8c:	d102      	bne.n	8009d94 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8009d8e:	2302      	movs	r3, #2
 8009d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8009d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d98:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8009d9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009d9e:	fb02 f303 	mul.w	r3, r2, r3
 8009da2:	02db      	lsls	r3, r3, #11
 8009da4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009dac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009db0:	4a53      	ldr	r2, [pc, #332]	; (8009f00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009db2:	fba2 2303 	umull	r2, r3, r2, r3
 8009db6:	099b      	lsrs	r3, r3, #6
 8009db8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8009dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009dc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009dc2:	fb02 f303 	mul.w	r3, r2, r3
 8009dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009dce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009dd2:	4a4b      	ldr	r2, [pc, #300]	; (8009f00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd8:	099b      	lsrs	r3, r3, #6
 8009dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	3380      	adds	r3, #128	; 0x80
 8009de2:	0a1b      	lsrs	r3, r3, #8
 8009de4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009dec:	fb02 f303 	mul.w	r3, r2, r3
 8009df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009df4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009df8:	3380      	adds	r3, #128	; 0x80
 8009dfa:	0a1b      	lsrs	r3, r3, #8
 8009dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	021b      	lsls	r3, r3, #8
 8009e04:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009e06:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8009e0e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009e12:	e15e      	b.n	800a0d2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8009e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10c      	bne.n	8009e34 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e20:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e28:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	e14c      	b.n	800a0ce <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009e34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e46:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e4a:	041a      	lsls	r2, r3, #16
 8009e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009e56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d902      	bls.n	8009e66 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009e66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009e6a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009e6e:	fb02 f303 	mul.w	r3, r2, r3
 8009e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009e76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	4413      	add	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe f876 	bl	8007f74 <VL53L0X_isqrt>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	891b      	ldrh	r3, [r3, #8]
 8009e92:	461a      	mov	r2, r3
 8009e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e96:	fb02 f303 	mul.w	r3, r2, r3
 8009e9a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e9e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009ea0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ea4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009ea6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009ea8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009eac:	4a14      	ldr	r2, [pc, #80]	; (8009f00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009eae:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb2:	099b      	lsrs	r3, r3, #6
 8009eb4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eb8:	041b      	lsls	r3, r3, #16
 8009eba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ebe:	4a10      	ldr	r2, [pc, #64]	; (8009f00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec4:	099b      	lsrs	r3, r3, #6
 8009ec6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eca:	021b      	lsls	r3, r3, #8
 8009ecc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8009ece:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfb8      	it	lt
 8009eda:	425b      	neglt	r3, r3
 8009edc:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8009ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee0:	021b      	lsls	r3, r3, #8
 8009ee2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	7e1b      	ldrb	r3, [r3, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00b      	beq.n	8009f04 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8009eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ef4:	e033      	b.n	8009f5e <VL53L0X_calc_sigma_estimate+0x30e>
 8009ef6:	bf00      	nop
 8009ef8:	028f87ae 	.word	0x028f87ae
 8009efc:	0006999a 	.word	0x0006999a
 8009f00:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009f04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8009f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f14:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f1c:	fb02 f303 	mul.w	r3, r2, r3
 8009f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009f24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f2a:	4413      	add	r3, r2
 8009f2c:	0c1b      	lsrs	r3, r3, #16
 8009f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8009f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f36:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8009f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f42:	085b      	lsrs	r3, r3, #1
 8009f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f4c:	fb03 f303 	mul.w	r3, r3, r3
 8009f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f58:	0b9b      	lsrs	r3, r3, #14
 8009f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8009f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f64:	fb02 f303 	mul.w	r3, r2, r3
 8009f68:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009f70:	0c1b      	lsrs	r3, r3, #16
 8009f72:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8009f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f76:	fb03 f303 	mul.w	r3, r3, r3
 8009f7a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8009f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f80:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8009f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8e:	fb03 f303 	mul.w	r3, r3, r3
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8009f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f98:	4413      	add	r3, r2
 8009f9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8009f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9e:	f7fd ffe9 	bl	8007f74 <VL53L0X_isqrt>
 8009fa2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa6:	041b      	lsls	r3, r3, #16
 8009fa8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	3332      	adds	r3, #50	; 0x32
 8009fae:	4a4b      	ldr	r2, [pc, #300]	; (800a0dc <VL53L0X_calc_sigma_estimate+0x48c>)
 8009fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb4:	095a      	lsrs	r2, r3, #5
 8009fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8009fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009fc4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009fc8:	fb02 f303 	mul.w	r3, r2, r3
 8009fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009fd4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009fd8:	3308      	adds	r3, #8
 8009fda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8009fde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009fe2:	4a3f      	ldr	r2, [pc, #252]	; (800a0e0 <VL53L0X_calc_sigma_estimate+0x490>)
 8009fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe8:	0b5b      	lsrs	r3, r3, #13
 8009fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8009fee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ff2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d902      	bls.n	8009ffe <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009ff8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ffa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8009ffe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a002:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a006:	4413      	add	r3, r2
 800a008:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a00c:	4a35      	ldr	r2, [pc, #212]	; (800a0e4 <VL53L0X_calc_sigma_estimate+0x494>)
 800a00e:	fba2 2303 	umull	r2, r3, r2, r3
 800a012:	099b      	lsrs	r3, r3, #6
 800a014:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a01a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a01e:	441a      	add	r2, r3
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	fbb2 f3f3 	udiv	r3, r2, r3
 800a026:	4618      	mov	r0, r3
 800a028:	f7fd ffa4 	bl	8007f74 <VL53L0X_isqrt>
 800a02c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	021b      	lsls	r3, r3, #8
 800a032:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a03a:	4a2a      	ldr	r2, [pc, #168]	; (800a0e4 <VL53L0X_calc_sigma_estimate+0x494>)
 800a03c:	fba2 2303 	umull	r2, r3, r2, r3
 800a040:	099b      	lsrs	r3, r3, #6
 800a042:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a048:	fb03 f303 	mul.w	r3, r3, r3
 800a04c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	fb03 f303 	mul.w	r3, r3, r3
 800a054:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	4413      	add	r3, r2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fd ff89 	bl	8007f74 <VL53L0X_isqrt>
 800a062:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a06a:	fb02 f303 	mul.w	r3, r2, r3
 800a06e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a074:	2b00      	cmp	r3, #0
 800a076:	d009      	beq.n	800a08c <VL53L0X_calc_sigma_estimate+0x43c>
 800a078:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <VL53L0X_calc_sigma_estimate+0x43c>
 800a080:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a088:	429a      	cmp	r2, r3
 800a08a:	d903      	bls.n	800a094 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a08c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a090:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a09a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800a0a6:	6939      	ldr	r1, [r7, #16]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	9303      	str	r3, [sp, #12]
 800a0ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a0b0:	9302      	str	r3, [sp, #8]
 800a0b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f7ff fca8 	bl	8009a18 <VL53L0X_calc_dmax>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0ce:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	37c0      	adds	r7, #192	; 0xc0
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	51eb851f 	.word	0x51eb851f
 800a0e0:	d1b71759 	.word	0xd1b71759
 800a0e4:	10624dd3 	.word	0x10624dd3

0800a0e8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b090      	sub	sp, #64	; 0x40
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	607a      	str	r2, [r7, #4]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	72fb      	strb	r3, [r7, #11]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a102:	2300      	movs	r3, #0
 800a104:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a11a:	2300      	movs	r3, #0
 800a11c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a132:	2300      	movs	r3, #0
 800a134:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a13a:	7afb      	ldrb	r3, [r7, #11]
 800a13c:	10db      	asrs	r3, r3, #3
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	f003 030f 	and.w	r3, r3, #15
 800a144:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a148:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d017      	beq.n	800a180 <VL53L0X_get_pal_range_status+0x98>
 800a150:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a154:	2b05      	cmp	r3, #5
 800a156:	d013      	beq.n	800a180 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a158:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a15c:	2b07      	cmp	r3, #7
 800a15e:	d00f      	beq.n	800a180 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a160:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a164:	2b0c      	cmp	r3, #12
 800a166:	d00b      	beq.n	800a180 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a168:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a16c:	2b0d      	cmp	r3, #13
 800a16e:	d007      	beq.n	800a180 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a170:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a174:	2b0e      	cmp	r3, #14
 800a176:	d003      	beq.n	800a180 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a178:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a17c:	2b0f      	cmp	r3, #15
 800a17e:	d103      	bne.n	800a188 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a180:	2301      	movs	r3, #1
 800a182:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a186:	e002      	b.n	800a18e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a18e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a192:	2b00      	cmp	r3, #0
 800a194:	d109      	bne.n	800a1aa <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a196:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a19a:	461a      	mov	r2, r3
 800a19c:	2100      	movs	r1, #0
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7fc f8c4 	bl	800632c <VL53L0X_GetLimitCheckEnable>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a1aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d02e      	beq.n	800a210 <VL53L0X_get_pal_range_status+0x128>
 800a1b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d12a      	bne.n	800a210 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a1ba:	f107 0310 	add.w	r3, r7, #16
 800a1be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a1c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f7ff fd43 	bl	8009c50 <VL53L0X_calc_sigma_estimate>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a1d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d103      	bne.n	800a1e0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1de:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a1e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d113      	bne.n	800a210 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a1e8:	f107 0320 	add.w	r3, r7, #32
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f7fc f921 	bl	8006438 <VL53L0X_GetLimitCheckValue>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d006      	beq.n	800a210 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800a202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a204:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a206:	429a      	cmp	r2, r3
 800a208:	d902      	bls.n	800a210 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a20a:	2301      	movs	r3, #1
 800a20c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a210:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a214:	2b00      	cmp	r3, #0
 800a216:	d109      	bne.n	800a22c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a218:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a21c:	461a      	mov	r2, r3
 800a21e:	2102      	movs	r1, #2
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f7fc f883 	bl	800632c <VL53L0X_GetLimitCheckEnable>
 800a226:	4603      	mov	r3, r0
 800a228:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a22c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a230:	2b00      	cmp	r3, #0
 800a232:	d044      	beq.n	800a2be <VL53L0X_get_pal_range_status+0x1d6>
 800a234:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d140      	bne.n	800a2be <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a23c:	f107 031c 	add.w	r3, r7, #28
 800a240:	461a      	mov	r2, r3
 800a242:	2102      	movs	r1, #2
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7fc f8f7 	bl	8006438 <VL53L0X_GetLimitCheckValue>
 800a24a:	4603      	mov	r3, r0
 800a24c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a250:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a254:	2b00      	cmp	r3, #0
 800a256:	d107      	bne.n	800a268 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a258:	2201      	movs	r2, #1
 800a25a:	21ff      	movs	r1, #255	; 0xff
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 fcf1 	bl	800ac44 <VL53L0X_WrByte>
 800a262:	4603      	mov	r3, r0
 800a264:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a268:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d109      	bne.n	800a284 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800a270:	f107 0316 	add.w	r3, r7, #22
 800a274:	461a      	mov	r2, r3
 800a276:	21b6      	movs	r1, #182	; 0xb6
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 fd8f 	bl	800ad9c <VL53L0X_RdWord>
 800a27e:	4603      	mov	r3, r0
 800a280:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a284:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d107      	bne.n	800a29c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a28c:	2200      	movs	r2, #0
 800a28e:	21ff      	movs	r1, #255	; 0xff
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f000 fcd7 	bl	800ac44 <VL53L0X_WrByte>
 800a296:	4603      	mov	r3, r0
 800a298:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a29c:	8afb      	ldrh	r3, [r7, #22]
 800a29e:	025b      	lsls	r3, r3, #9
 800a2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2a6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d006      	beq.n	800a2be <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a2b0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a2b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d902      	bls.n	800a2be <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a2be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d109      	bne.n	800a2da <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a2c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	2103      	movs	r1, #3
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f7fc f82c 	bl	800632c <VL53L0X_GetLimitCheckEnable>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a2da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d023      	beq.n	800a32a <VL53L0X_get_pal_range_status+0x242>
 800a2e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d11f      	bne.n	800a32a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a2ea:	893b      	ldrh	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d102      	bne.n	800a2f6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a2f4:	e005      	b.n	800a302 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	021a      	lsls	r2, r3, #8
 800a2fa:	893b      	ldrh	r3, [r7, #8]
 800a2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a300:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a302:	f107 0318 	add.w	r3, r7, #24
 800a306:	461a      	mov	r2, r3
 800a308:	2103      	movs	r1, #3
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7fc f894 	bl	8006438 <VL53L0X_GetLimitCheckValue>
 800a310:	4603      	mov	r3, r0
 800a312:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d006      	beq.n	800a32a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a31c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a31e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a320:	429a      	cmp	r2, r3
 800a322:	d202      	bcs.n	800a32a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a324:	2301      	movs	r3, #1
 800a326:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a32a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d14a      	bne.n	800a3c8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a332:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a336:	2b01      	cmp	r3, #1
 800a338:	d103      	bne.n	800a342 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a33c:	22ff      	movs	r2, #255	; 0xff
 800a33e:	701a      	strb	r2, [r3, #0]
 800a340:	e042      	b.n	800a3c8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a342:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a346:	2b01      	cmp	r3, #1
 800a348:	d007      	beq.n	800a35a <VL53L0X_get_pal_range_status+0x272>
 800a34a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d003      	beq.n	800a35a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a352:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a356:	2b03      	cmp	r3, #3
 800a358:	d103      	bne.n	800a362 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a35a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a35c:	2205      	movs	r2, #5
 800a35e:	701a      	strb	r2, [r3, #0]
 800a360:	e032      	b.n	800a3c8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a362:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a366:	2b06      	cmp	r3, #6
 800a368:	d003      	beq.n	800a372 <VL53L0X_get_pal_range_status+0x28a>
 800a36a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d103      	bne.n	800a37a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a374:	2204      	movs	r2, #4
 800a376:	701a      	strb	r2, [r3, #0]
 800a378:	e026      	b.n	800a3c8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a37a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a37e:	2b08      	cmp	r3, #8
 800a380:	d007      	beq.n	800a392 <VL53L0X_get_pal_range_status+0x2aa>
 800a382:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a386:	2b0a      	cmp	r3, #10
 800a388:	d003      	beq.n	800a392 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a38a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d103      	bne.n	800a39a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a394:	2203      	movs	r2, #3
 800a396:	701a      	strb	r2, [r3, #0]
 800a398:	e016      	b.n	800a3c8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a39a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a39e:	2b04      	cmp	r3, #4
 800a3a0:	d003      	beq.n	800a3aa <VL53L0X_get_pal_range_status+0x2c2>
 800a3a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d103      	bne.n	800a3b2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	701a      	strb	r2, [r3, #0]
 800a3b0:	e00a      	b.n	800a3c8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a3b2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d103      	bne.n	800a3c2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3bc:	2201      	movs	r2, #1
 800a3be:	701a      	strb	r2, [r3, #0]
 800a3c0:	e002      	b.n	800a3c8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a3c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d102      	bne.n	800a3d6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a3d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a3d6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a3da:	461a      	mov	r2, r3
 800a3dc:	2101      	movs	r1, #1
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f7fb ffa4 	bl	800632c <VL53L0X_GetLimitCheckEnable>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a3ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d14f      	bne.n	800a492 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a3f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d003      	beq.n	800a402 <VL53L0X_get_pal_range_status+0x31a>
 800a3fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d103      	bne.n	800a40a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a402:	2301      	movs	r3, #1
 800a404:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a408:	e002      	b.n	800a410 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a416:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a41a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a41e:	2b04      	cmp	r3, #4
 800a420:	d003      	beq.n	800a42a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a422:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a426:	2b00      	cmp	r3, #0
 800a428:	d103      	bne.n	800a432 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a42a:	2301      	movs	r3, #1
 800a42c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a430:	e002      	b.n	800a438 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a43e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a442:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <VL53L0X_get_pal_range_status+0x36a>
 800a44a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d103      	bne.n	800a45a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a452:	2301      	movs	r3, #1
 800a454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a458:	e002      	b.n	800a460 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a466:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a46a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <VL53L0X_get_pal_range_status+0x392>
 800a472:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a476:	2b01      	cmp	r3, #1
 800a478:	d103      	bne.n	800a482 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a47a:	2301      	movs	r3, #1
 800a47c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a480:	e002      	b.n	800a488 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a482:	2300      	movs	r3, #0
 800a484:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a48e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a492:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a496:	4618      	mov	r0, r3
 800a498:	3740      	adds	r7, #64	; 0x40
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b086      	sub	sp, #24
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800a4ae:	2102      	movs	r1, #2
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f7fd fdd6 	bl	8008062 <VL53L0X_get_info_from_device>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800a4ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d11c      	bne.n	800a4fc <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800a4c8:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800a4ca:	7dbb      	ldrb	r3, [r7, #22]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d107      	bne.n	800a4e0 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3340      	adds	r3, #64	; 0x40
 800a4da:	2200      	movs	r2, #0
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	e00d      	b.n	800a4fc <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	33f3      	adds	r3, #243	; 0xf3
 800a4ee:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	3340      	adds	r3, #64	; 0x40
 800a4f4:	6939      	ldr	r1, [r7, #16]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f00b f8b7 	bl	801566a <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a4fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800a508:	b5b0      	push	{r4, r5, r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a512:	2300      	movs	r3, #0
 800a514:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800a516:	f107 030d 	add.w	r3, r7, #13
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	4619      	mov	r1, r3
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7ff ffbd 	bl	800a49e <VL53L0X_check_part_used>
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800a528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d13b      	bne.n	800a5a8 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800a530:	7b7b      	ldrb	r3, [r7, #13]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d108      	bne.n	800a548 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	4a30      	ldr	r2, [pc, #192]	; (800a5fc <VL53L0X_get_device_info+0xf4>)
 800a53a:	461c      	mov	r4, r3
 800a53c:	4613      	mov	r3, r2
 800a53e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a540:	6020      	str	r0, [r4, #0]
 800a542:	6061      	str	r1, [r4, #4]
 800a544:	60a2      	str	r2, [r4, #8]
 800a546:	e027      	b.n	800a598 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800a548:	7b7b      	ldrb	r3, [r7, #13]
 800a54a:	2b22      	cmp	r3, #34	; 0x22
 800a54c:	d80b      	bhi.n	800a566 <VL53L0X_get_device_info+0x5e>
 800a54e:	7b7b      	ldrb	r3, [r7, #13]
 800a550:	2b20      	cmp	r3, #32
 800a552:	d008      	beq.n	800a566 <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	4a2a      	ldr	r2, [pc, #168]	; (800a600 <VL53L0X_get_device_info+0xf8>)
 800a558:	461c      	mov	r4, r3
 800a55a:	4613      	mov	r3, r2
 800a55c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a55e:	6020      	str	r0, [r4, #0]
 800a560:	6061      	str	r1, [r4, #4]
 800a562:	60a2      	str	r2, [r4, #8]
 800a564:	e018      	b.n	800a598 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800a566:	7b7b      	ldrb	r3, [r7, #13]
 800a568:	2b26      	cmp	r3, #38	; 0x26
 800a56a:	d808      	bhi.n	800a57e <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	4a25      	ldr	r2, [pc, #148]	; (800a604 <VL53L0X_get_device_info+0xfc>)
 800a570:	461c      	mov	r4, r3
 800a572:	4613      	mov	r3, r2
 800a574:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a576:	6020      	str	r0, [r4, #0]
 800a578:	6061      	str	r1, [r4, #4]
 800a57a:	60a2      	str	r2, [r4, #8]
 800a57c:	e00c      	b.n	800a598 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	4a21      	ldr	r2, [pc, #132]	; (800a608 <VL53L0X_get_device_info+0x100>)
 800a582:	461d      	mov	r5, r3
 800a584:	4614      	mov	r4, r2
 800a586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a588:	6028      	str	r0, [r5, #0]
 800a58a:	6069      	str	r1, [r5, #4]
 800a58c:	60aa      	str	r2, [r5, #8]
 800a58e:	60eb      	str	r3, [r5, #12]
 800a590:	6820      	ldr	r0, [r4, #0]
 800a592:	6128      	str	r0, [r5, #16]
 800a594:	7923      	ldrb	r3, [r4, #4]
 800a596:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	3320      	adds	r3, #32
 800a59c:	491b      	ldr	r1, [pc, #108]	; (800a60c <VL53L0X_get_device_info+0x104>)
 800a59e:	461a      	mov	r2, r3
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	cb03      	ldmia	r3!, {r0, r1}
 800a5a4:	6010      	str	r0, [r2, #0]
 800a5a6:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a5a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d108      	bne.n	800a5c2 <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	3360      	adds	r3, #96	; 0x60
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	21c0      	movs	r1, #192	; 0xc0
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fbc5 	bl	800ad48 <VL53L0X_RdByte>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d112      	bne.n	800a5f0 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800a5ca:	f107 030e 	add.w	r3, r7, #14
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	21c2      	movs	r1, #194	; 0xc2
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fbb8 	bl	800ad48 <VL53L0X_RdByte>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	091b      	lsrs	r3, r3, #4
 800a5e8:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800a5f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bdb0      	pop	{r4, r5, r7, pc}
 800a5fc:	08019b44 	.word	0x08019b44
 800a600:	08019b50 	.word	0x08019b50
 800a604:	08019b5c 	.word	0x08019b5c
 800a608:	08019b68 	.word	0x08019b68
 800a60c:	08019b80 	.word	0x08019b80

0800a610 <VL53L0X_get_range_status_string>:
	return Status;
}

VL53L0X_Error VL53L0X_get_range_status_string(uint8_t RangeStatus,
		char *pRangeStatusString)
{
 800a610:	b490      	push	{r4, r7}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	6039      	str	r1, [r7, #0]
 800a61a:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (RangeStatus) {
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	2b05      	cmp	r3, #5
 800a624:	d850      	bhi.n	800a6c8 <VL53L0X_get_range_status_string+0xb8>
 800a626:	a201      	add	r2, pc, #4	; (adr r2, 800a62c <VL53L0X_get_range_status_string+0x1c>)
 800a628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62c:	0800a645 	.word	0x0800a645
 800a630:	0800a657 	.word	0x0800a657
 800a634:	0800a66f 	.word	0x0800a66f
 800a638:	0800a681 	.word	0x0800a681
 800a63c:	0800a69b 	.word	0x0800a69b
 800a640:	0800a6b3 	.word	0x0800a6b3
	case 0:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	4a28      	ldr	r2, [pc, #160]	; (800a6e8 <VL53L0X_get_range_status_string+0xd8>)
 800a648:	461c      	mov	r4, r3
 800a64a:	4613      	mov	r3, r2
 800a64c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a64e:	6020      	str	r0, [r4, #0]
 800a650:	6061      	str	r1, [r4, #4]
 800a652:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_RANGEVALID);
	break;
 800a654:	e041      	b.n	800a6da <VL53L0X_get_range_status_string+0xca>
	case 1:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	4924      	ldr	r1, [pc, #144]	; (800a6ec <VL53L0X_get_range_status_string+0xdc>)
 800a65a:	461a      	mov	r2, r3
 800a65c:	460b      	mov	r3, r1
 800a65e:	cb03      	ldmia	r3!, {r0, r1}
 800a660:	6010      	str	r0, [r2, #0]
 800a662:	6051      	str	r1, [r2, #4]
 800a664:	8819      	ldrh	r1, [r3, #0]
 800a666:	789b      	ldrb	r3, [r3, #2]
 800a668:	8111      	strh	r1, [r2, #8]
 800a66a:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_SIGMA);
	break;
 800a66c:	e035      	b.n	800a6da <VL53L0X_get_range_status_string+0xca>
	case 2:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	4a1f      	ldr	r2, [pc, #124]	; (800a6f0 <VL53L0X_get_range_status_string+0xe0>)
 800a672:	461c      	mov	r4, r3
 800a674:	4613      	mov	r3, r2
 800a676:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a678:	6020      	str	r0, [r4, #0]
 800a67a:	6061      	str	r1, [r4, #4]
 800a67c:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_SIGNAL);
	break;
 800a67e:	e02c      	b.n	800a6da <VL53L0X_get_range_status_string+0xca>
	case 3:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	4a1c      	ldr	r2, [pc, #112]	; (800a6f4 <VL53L0X_get_range_status_string+0xe4>)
 800a684:	461c      	mov	r4, r3
 800a686:	4613      	mov	r3, r2
 800a688:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a68a:	6020      	str	r0, [r4, #0]
 800a68c:	6061      	str	r1, [r4, #4]
 800a68e:	60a2      	str	r2, [r4, #8]
 800a690:	881a      	ldrh	r2, [r3, #0]
 800a692:	789b      	ldrb	r3, [r3, #2]
 800a694:	81a2      	strh	r2, [r4, #12]
 800a696:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_RANGESTATUS_MINRANGE);
	break;
 800a698:	e01f      	b.n	800a6da <VL53L0X_get_range_status_string+0xca>
	case 4:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	4916      	ldr	r1, [pc, #88]	; (800a6f8 <VL53L0X_get_range_status_string+0xe8>)
 800a69e:	461a      	mov	r2, r3
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	cb03      	ldmia	r3!, {r0, r1}
 800a6a4:	6010      	str	r0, [r2, #0]
 800a6a6:	6051      	str	r1, [r2, #4]
 800a6a8:	8819      	ldrh	r1, [r3, #0]
 800a6aa:	789b      	ldrb	r3, [r3, #2]
 800a6ac:	8111      	strh	r1, [r2, #8]
 800a6ae:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_PHASE);
	break;
 800a6b0:	e013      	b.n	800a6da <VL53L0X_get_range_status_string+0xca>
	case 5:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	4a11      	ldr	r2, [pc, #68]	; (800a6fc <VL53L0X_get_range_status_string+0xec>)
 800a6b6:	461c      	mov	r4, r3
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a6bc:	6020      	str	r0, [r4, #0]
 800a6be:	6061      	str	r1, [r4, #4]
 800a6c0:	60a2      	str	r2, [r4, #8]
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	81a3      	strh	r3, [r4, #12]
			VL53L0X_STRING_RANGESTATUS_HW);
	break;
 800a6c6:	e008      	b.n	800a6da <VL53L0X_get_range_status_string+0xca>

	default: /**/
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	490d      	ldr	r1, [pc, #52]	; (800a700 <VL53L0X_get_range_status_string+0xf0>)
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	cb03      	ldmia	r3!, {r0, r1}
 800a6d2:	6010      	str	r0, [r2, #0]
 800a6d4:	6051      	str	r1, [r2, #4]
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	8113      	strh	r3, [r2, #8]
				VL53L0X_STRING_RANGESTATUS_NONE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a6da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bc90      	pop	{r4, r7}
 800a6e6:	4770      	bx	lr
 800a6e8:	08019cf0 	.word	0x08019cf0
 800a6ec:	08019cfc 	.word	0x08019cfc
 800a6f0:	08019d08 	.word	0x08019d08
 800a6f4:	08019d14 	.word	0x08019d14
 800a6f8:	08019d24 	.word	0x08019d24
 800a6fc:	08019d30 	.word	0x08019d30
 800a700:	08019b88 	.word	0x08019b88

0800a704 <VL53L0X_get_pal_error_string>:

VL53L0X_Error VL53L0X_get_pal_error_string(VL53L0X_Error PalErrorCode,
		char *pPalErrorString)
{
 800a704:	b4b0      	push	{r4, r5, r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	6039      	str	r1, [r7, #0]
 800a70e:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a710:	2300      	movs	r3, #0
 800a712:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (PalErrorCode) {
 800a714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a718:	3363      	adds	r3, #99	; 0x63
 800a71a:	2b63      	cmp	r3, #99	; 0x63
 800a71c:	f200 81b9 	bhi.w	800aa92 <VL53L0X_get_pal_error_string+0x38e>
 800a720:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <VL53L0X_get_pal_error_string+0x24>)
 800a722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a726:	bf00      	nop
 800a728:	0800aa77 	.word	0x0800aa77
 800a72c:	0800aa93 	.word	0x0800aa93
 800a730:	0800aa93 	.word	0x0800aa93
 800a734:	0800aa93 	.word	0x0800aa93
 800a738:	0800aa93 	.word	0x0800aa93
 800a73c:	0800aa93 	.word	0x0800aa93
 800a740:	0800aa93 	.word	0x0800aa93
 800a744:	0800aa93 	.word	0x0800aa93
 800a748:	0800aa93 	.word	0x0800aa93
 800a74c:	0800aa93 	.word	0x0800aa93
 800a750:	0800aa93 	.word	0x0800aa93
 800a754:	0800aa93 	.word	0x0800aa93
 800a758:	0800aa93 	.word	0x0800aa93
 800a75c:	0800aa93 	.word	0x0800aa93
 800a760:	0800aa93 	.word	0x0800aa93
 800a764:	0800aa93 	.word	0x0800aa93
 800a768:	0800aa93 	.word	0x0800aa93
 800a76c:	0800aa93 	.word	0x0800aa93
 800a770:	0800aa93 	.word	0x0800aa93
 800a774:	0800aa93 	.word	0x0800aa93
 800a778:	0800aa93 	.word	0x0800aa93
 800a77c:	0800aa93 	.word	0x0800aa93
 800a780:	0800aa93 	.word	0x0800aa93
 800a784:	0800aa93 	.word	0x0800aa93
 800a788:	0800aa93 	.word	0x0800aa93
 800a78c:	0800aa93 	.word	0x0800aa93
 800a790:	0800aa93 	.word	0x0800aa93
 800a794:	0800aa93 	.word	0x0800aa93
 800a798:	0800aa93 	.word	0x0800aa93
 800a79c:	0800aa93 	.word	0x0800aa93
 800a7a0:	0800aa93 	.word	0x0800aa93
 800a7a4:	0800aa93 	.word	0x0800aa93
 800a7a8:	0800aa93 	.word	0x0800aa93
 800a7ac:	0800aa93 	.word	0x0800aa93
 800a7b0:	0800aa93 	.word	0x0800aa93
 800a7b4:	0800aa93 	.word	0x0800aa93
 800a7b8:	0800aa93 	.word	0x0800aa93
 800a7bc:	0800aa93 	.word	0x0800aa93
 800a7c0:	0800aa93 	.word	0x0800aa93
 800a7c4:	0800aa93 	.word	0x0800aa93
 800a7c8:	0800aa93 	.word	0x0800aa93
 800a7cc:	0800aa93 	.word	0x0800aa93
 800a7d0:	0800aa93 	.word	0x0800aa93
 800a7d4:	0800aa93 	.word	0x0800aa93
 800a7d8:	0800aa93 	.word	0x0800aa93
 800a7dc:	0800aa93 	.word	0x0800aa93
 800a7e0:	0800aa93 	.word	0x0800aa93
 800a7e4:	0800aa93 	.word	0x0800aa93
 800a7e8:	0800aa93 	.word	0x0800aa93
 800a7ec:	0800aa59 	.word	0x0800aa59
 800a7f0:	0800aa93 	.word	0x0800aa93
 800a7f4:	0800aa93 	.word	0x0800aa93
 800a7f8:	0800aa93 	.word	0x0800aa93
 800a7fc:	0800aa93 	.word	0x0800aa93
 800a800:	0800aa93 	.word	0x0800aa93
 800a804:	0800aa93 	.word	0x0800aa93
 800a808:	0800aa93 	.word	0x0800aa93
 800a80c:	0800aa93 	.word	0x0800aa93
 800a810:	0800aa93 	.word	0x0800aa93
 800a814:	0800aa37 	.word	0x0800aa37
 800a818:	0800aa93 	.word	0x0800aa93
 800a81c:	0800aa93 	.word	0x0800aa93
 800a820:	0800aa93 	.word	0x0800aa93
 800a824:	0800aa93 	.word	0x0800aa93
 800a828:	0800aa93 	.word	0x0800aa93
 800a82c:	0800aa93 	.word	0x0800aa93
 800a830:	0800aa93 	.word	0x0800aa93
 800a834:	0800aa93 	.word	0x0800aa93
 800a838:	0800aa93 	.word	0x0800aa93
 800a83c:	0800aa1b 	.word	0x0800aa1b
 800a840:	0800aa93 	.word	0x0800aa93
 800a844:	0800aa93 	.word	0x0800aa93
 800a848:	0800aa93 	.word	0x0800aa93
 800a84c:	0800aa93 	.word	0x0800aa93
 800a850:	0800aa93 	.word	0x0800aa93
 800a854:	0800aa93 	.word	0x0800aa93
 800a858:	0800aa93 	.word	0x0800aa93
 800a85c:	0800aa93 	.word	0x0800aa93
 800a860:	0800aa93 	.word	0x0800aa93
 800a864:	0800aa01 	.word	0x0800aa01
 800a868:	0800aa93 	.word	0x0800aa93
 800a86c:	0800aa93 	.word	0x0800aa93
 800a870:	0800aa93 	.word	0x0800aa93
 800a874:	0800aa93 	.word	0x0800aa93
 800a878:	0800aa93 	.word	0x0800aa93
 800a87c:	0800aa93 	.word	0x0800aa93
 800a880:	0800aa93 	.word	0x0800aa93
 800a884:	0800a94d 	.word	0x0800a94d
 800a888:	0800a9e3 	.word	0x0800a9e3
 800a88c:	0800a9cb 	.word	0x0800a9cb
 800a890:	0800a9b3 	.word	0x0800a9b3
 800a894:	0800a995 	.word	0x0800a995
 800a898:	0800a97b 	.word	0x0800a97b
 800a89c:	0800a969 	.word	0x0800a969
 800a8a0:	0800a935 	.word	0x0800a935
 800a8a4:	0800a917 	.word	0x0800a917
 800a8a8:	0800a903 	.word	0x0800a903
 800a8ac:	0800a8eb 	.word	0x0800a8eb
 800a8b0:	0800a8cd 	.word	0x0800a8cd
 800a8b4:	0800a8b9 	.word	0x0800a8b9
	case VL53L0X_ERROR_NONE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	4980      	ldr	r1, [pc, #512]	; (800aabc <VL53L0X_get_pal_error_string+0x3b8>)
 800a8bc:	461a      	mov	r2, r3
 800a8be:	460b      	mov	r3, r1
 800a8c0:	cb03      	ldmia	r3!, {r0, r1}
 800a8c2:	6010      	str	r0, [r2, #0]
 800a8c4:	6051      	str	r1, [r2, #4]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	7213      	strb	r3, [r2, #8]
			VL53L0X_STRING_ERROR_NONE);
	break;
 800a8ca:	e0f0      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CALIBRATION_WARNING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	4a7c      	ldr	r2, [pc, #496]	; (800aac0 <VL53L0X_get_pal_error_string+0x3bc>)
 800a8d0:	461d      	mov	r5, r3
 800a8d2:	4614      	mov	r4, r2
 800a8d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a8d6:	6028      	str	r0, [r5, #0]
 800a8d8:	6069      	str	r1, [r5, #4]
 800a8da:	60aa      	str	r2, [r5, #8]
 800a8dc:	60eb      	str	r3, [r5, #12]
 800a8de:	cc03      	ldmia	r4!, {r0, r1}
 800a8e0:	6128      	str	r0, [r5, #16]
 800a8e2:	6169      	str	r1, [r5, #20]
 800a8e4:	8823      	ldrh	r3, [r4, #0]
 800a8e6:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_CALIBRATION_WARNING);
	break;
 800a8e8:	e0e1      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MIN_CLIPPED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	4a75      	ldr	r2, [pc, #468]	; (800aac4 <VL53L0X_get_pal_error_string+0x3c0>)
 800a8ee:	461d      	mov	r5, r3
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a8f4:	6028      	str	r0, [r5, #0]
 800a8f6:	6069      	str	r1, [r5, #4]
 800a8f8:	60aa      	str	r2, [r5, #8]
 800a8fa:	60eb      	str	r3, [r5, #12]
 800a8fc:	8823      	ldrh	r3, [r4, #0]
 800a8fe:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_MIN_CLIPPED);
	break;
 800a900:	e0d5      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_UNDEFINED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	4a70      	ldr	r2, [pc, #448]	; (800aac8 <VL53L0X_get_pal_error_string+0x3c4>)
 800a906:	461c      	mov	r4, r3
 800a908:	4615      	mov	r5, r2
 800a90a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a90c:	6020      	str	r0, [r4, #0]
 800a90e:	6061      	str	r1, [r4, #4]
 800a910:	60a2      	str	r2, [r4, #8]
 800a912:	60e3      	str	r3, [r4, #12]
			VL53L0X_STRING_ERROR_UNDEFINED);
	break;
 800a914:	e0cb      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_PARAMS:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	4a6c      	ldr	r2, [pc, #432]	; (800aacc <VL53L0X_get_pal_error_string+0x3c8>)
 800a91a:	461d      	mov	r5, r3
 800a91c:	4614      	mov	r4, r2
 800a91e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a920:	6028      	str	r0, [r5, #0]
 800a922:	6069      	str	r1, [r5, #4]
 800a924:	60aa      	str	r2, [r5, #8]
 800a926:	60eb      	str	r3, [r5, #12]
 800a928:	cc03      	ldmia	r4!, {r0, r1}
 800a92a:	6128      	str	r0, [r5, #16]
 800a92c:	6169      	str	r1, [r5, #20]
 800a92e:	7823      	ldrb	r3, [r4, #0]
 800a930:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_INVALID_PARAMS);
	break;
 800a932:	e0bc      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	4a66      	ldr	r2, [pc, #408]	; (800aad0 <VL53L0X_get_pal_error_string+0x3cc>)
 800a938:	461d      	mov	r5, r3
 800a93a:	4614      	mov	r4, r2
 800a93c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a93e:	6028      	str	r0, [r5, #0]
 800a940:	6069      	str	r1, [r5, #4]
 800a942:	60aa      	str	r2, [r5, #8]
 800a944:	60eb      	str	r3, [r5, #12]
 800a946:	6820      	ldr	r0, [r4, #0]
 800a948:	6128      	str	r0, [r5, #16]
			VL53L0X_STRING_ERROR_NOT_SUPPORTED);
	break;
 800a94a:	e0b0      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INTERRUPT_NOT_CLEARED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	4a61      	ldr	r2, [pc, #388]	; (800aad4 <VL53L0X_get_pal_error_string+0x3d0>)
 800a950:	461d      	mov	r5, r3
 800a952:	4614      	mov	r4, r2
 800a954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a956:	6028      	str	r0, [r5, #0]
 800a958:	6069      	str	r1, [r5, #4]
 800a95a:	60aa      	str	r2, [r5, #8]
 800a95c:	60eb      	str	r3, [r5, #12]
 800a95e:	6820      	ldr	r0, [r4, #0]
 800a960:	6128      	str	r0, [r5, #16]
 800a962:	88a3      	ldrh	r3, [r4, #4]
 800a964:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INTERRUPT_NOT_CLEARED);
	break;
 800a966:	e0a2      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_RANGE_ERROR:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	4a5b      	ldr	r2, [pc, #364]	; (800aad8 <VL53L0X_get_pal_error_string+0x3d4>)
 800a96c:	461c      	mov	r4, r3
 800a96e:	4613      	mov	r3, r2
 800a970:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a972:	6020      	str	r0, [r4, #0]
 800a974:	6061      	str	r1, [r4, #4]
 800a976:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_ERROR_RANGE_ERROR);
	break;
 800a978:	e099      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_TIME_OUT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	4a57      	ldr	r2, [pc, #348]	; (800aadc <VL53L0X_get_pal_error_string+0x3d8>)
 800a97e:	461c      	mov	r4, r3
 800a980:	4613      	mov	r3, r2
 800a982:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a984:	6020      	str	r0, [r4, #0]
 800a986:	6061      	str	r1, [r4, #4]
 800a988:	60a2      	str	r2, [r4, #8]
 800a98a:	881a      	ldrh	r2, [r3, #0]
 800a98c:	789b      	ldrb	r3, [r3, #2]
 800a98e:	81a2      	strh	r2, [r4, #12]
 800a990:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_ERROR_TIME_OUT);
	break;
 800a992:	e08c      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MODE_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	4a52      	ldr	r2, [pc, #328]	; (800aae0 <VL53L0X_get_pal_error_string+0x3dc>)
 800a998:	461d      	mov	r5, r3
 800a99a:	4614      	mov	r4, r2
 800a99c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a99e:	6028      	str	r0, [r5, #0]
 800a9a0:	6069      	str	r1, [r5, #4]
 800a9a2:	60aa      	str	r2, [r5, #8]
 800a9a4:	60eb      	str	r3, [r5, #12]
 800a9a6:	cc03      	ldmia	r4!, {r0, r1}
 800a9a8:	6128      	str	r0, [r5, #16]
 800a9aa:	6169      	str	r1, [r5, #20]
 800a9ac:	7823      	ldrb	r3, [r4, #0]
 800a9ae:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_MODE_NOT_SUPPORTED);
	break;
 800a9b0:	e07d      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_BUFFER_TOO_SMALL:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	4a4b      	ldr	r2, [pc, #300]	; (800aae4 <VL53L0X_get_pal_error_string+0x3e0>)
 800a9b6:	461d      	mov	r5, r3
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9bc:	6028      	str	r0, [r5, #0]
 800a9be:	6069      	str	r1, [r5, #4]
 800a9c0:	60aa      	str	r2, [r5, #8]
 800a9c2:	60eb      	str	r3, [r5, #12]
 800a9c4:	7823      	ldrb	r3, [r4, #0]
 800a9c6:	742b      	strb	r3, [r5, #16]
			VL53L0X_STRING_ERROR_BUFFER_TOO_SMALL);
	break;
 800a9c8:	e071      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_NOT_EXISTING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	4a46      	ldr	r2, [pc, #280]	; (800aae8 <VL53L0X_get_pal_error_string+0x3e4>)
 800a9ce:	461d      	mov	r5, r3
 800a9d0:	4614      	mov	r4, r2
 800a9d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9d4:	6028      	str	r0, [r5, #0]
 800a9d6:	6069      	str	r1, [r5, #4]
 800a9d8:	60aa      	str	r2, [r5, #8]
 800a9da:	60eb      	str	r3, [r5, #12]
 800a9dc:	8823      	ldrh	r3, [r4, #0]
 800a9de:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_GPIO_NOT_EXISTING);
	break;
 800a9e0:	e065      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	4a41      	ldr	r2, [pc, #260]	; (800aaec <VL53L0X_get_pal_error_string+0x3e8>)
 800a9e6:	461d      	mov	r5, r3
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9ec:	6028      	str	r0, [r5, #0]
 800a9ee:	6069      	str	r1, [r5, #4]
 800a9f0:	60aa      	str	r2, [r5, #8]
 800a9f2:	60eb      	str	r3, [r5, #12]
 800a9f4:	cc03      	ldmia	r4!, {r0, r1}
 800a9f6:	6128      	str	r0, [r5, #16]
 800a9f8:	6169      	str	r1, [r5, #20]
 800a9fa:	7823      	ldrb	r3, [r4, #0]
 800a9fc:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED);
	break;
 800a9fe:	e056      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CONTROL_INTERFACE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	4a3b      	ldr	r2, [pc, #236]	; (800aaf0 <VL53L0X_get_pal_error_string+0x3ec>)
 800aa04:	461d      	mov	r5, r3
 800aa06:	4614      	mov	r4, r2
 800aa08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa0a:	6028      	str	r0, [r5, #0]
 800aa0c:	6069      	str	r1, [r5, #4]
 800aa0e:	60aa      	str	r2, [r5, #8]
 800aa10:	60eb      	str	r3, [r5, #12]
 800aa12:	cc03      	ldmia	r4!, {r0, r1}
 800aa14:	6128      	str	r0, [r5, #16]
 800aa16:	6169      	str	r1, [r5, #20]
			VL53L0X_STRING_ERROR_CONTROL_INTERFACE);
	break;
 800aa18:	e049      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_COMMAND:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	4a35      	ldr	r2, [pc, #212]	; (800aaf4 <VL53L0X_get_pal_error_string+0x3f0>)
 800aa1e:	461d      	mov	r5, r3
 800aa20:	4614      	mov	r4, r2
 800aa22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa24:	6028      	str	r0, [r5, #0]
 800aa26:	6069      	str	r1, [r5, #4]
 800aa28:	60aa      	str	r2, [r5, #8]
 800aa2a:	60eb      	str	r3, [r5, #12]
 800aa2c:	6820      	ldr	r0, [r4, #0]
 800aa2e:	6128      	str	r0, [r5, #16]
 800aa30:	88a3      	ldrh	r3, [r4, #4]
 800aa32:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INVALID_COMMAND);
	break;
 800aa34:	e03b      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_DIVISION_BY_ZERO:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	4a2f      	ldr	r2, [pc, #188]	; (800aaf8 <VL53L0X_get_pal_error_string+0x3f4>)
 800aa3a:	461c      	mov	r4, r3
 800aa3c:	4615      	mov	r5, r2
 800aa3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa40:	6020      	str	r0, [r4, #0]
 800aa42:	6061      	str	r1, [r4, #4]
 800aa44:	60a2      	str	r2, [r4, #8]
 800aa46:	60e3      	str	r3, [r4, #12]
 800aa48:	6828      	ldr	r0, [r5, #0]
 800aa4a:	6120      	str	r0, [r4, #16]
 800aa4c:	88ab      	ldrh	r3, [r5, #4]
 800aa4e:	79aa      	ldrb	r2, [r5, #6]
 800aa50:	82a3      	strh	r3, [r4, #20]
 800aa52:	4613      	mov	r3, r2
 800aa54:	75a3      	strb	r3, [r4, #22]
			VL53L0X_STRING_ERROR_DIVISION_BY_ZERO);
	break;
 800aa56:	e02a      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_REF_SPAD_INIT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	4a28      	ldr	r2, [pc, #160]	; (800aafc <VL53L0X_get_pal_error_string+0x3f8>)
 800aa5c:	461d      	mov	r5, r3
 800aa5e:	4614      	mov	r4, r2
 800aa60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa62:	6028      	str	r0, [r5, #0]
 800aa64:	6069      	str	r1, [r5, #4]
 800aa66:	60aa      	str	r2, [r5, #8]
 800aa68:	60eb      	str	r3, [r5, #12]
 800aa6a:	cc03      	ldmia	r4!, {r0, r1}
 800aa6c:	6128      	str	r0, [r5, #16]
 800aa6e:	6169      	str	r1, [r5, #20]
 800aa70:	8823      	ldrh	r3, [r4, #0]
 800aa72:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_REF_SPAD_INIT);
	break;
 800aa74:	e01b      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_IMPLEMENTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	4a21      	ldr	r2, [pc, #132]	; (800ab00 <VL53L0X_get_pal_error_string+0x3fc>)
 800aa7a:	461d      	mov	r5, r3
 800aa7c:	4614      	mov	r4, r2
 800aa7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa80:	6028      	str	r0, [r5, #0]
 800aa82:	6069      	str	r1, [r5, #4]
 800aa84:	60aa      	str	r2, [r5, #8]
 800aa86:	60eb      	str	r3, [r5, #12]
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	6128      	str	r0, [r5, #16]
 800aa8c:	88a3      	ldrh	r3, [r4, #4]
 800aa8e:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_NOT_IMPLEMENTED);
	break;
 800aa90:	e00d      	b.n	800aaae <VL53L0X_get_pal_error_string+0x3aa>

	default:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	4a1b      	ldr	r2, [pc, #108]	; (800ab04 <VL53L0X_get_pal_error_string+0x400>)
 800aa96:	461d      	mov	r5, r3
 800aa98:	4614      	mov	r4, r2
 800aa9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa9c:	6028      	str	r0, [r5, #0]
 800aa9e:	6069      	str	r1, [r5, #4]
 800aaa0:	60aa      	str	r2, [r5, #8]
 800aaa2:	60eb      	str	r3, [r5, #12]
 800aaa4:	8823      	ldrh	r3, [r4, #0]
 800aaa6:	78a2      	ldrb	r2, [r4, #2]
 800aaa8:	822b      	strh	r3, [r5, #16]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	74ab      	strb	r3, [r5, #18]
				VL53L0X_STRING_UNKNOW_ERROR_CODE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aaae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bcb0      	pop	{r4, r5, r7}
 800aaba:	4770      	bx	lr
 800aabc:	08019d40 	.word	0x08019d40
 800aac0:	08019d4c 	.word	0x08019d4c
 800aac4:	08019d68 	.word	0x08019d68
 800aac8:	08019d7c 	.word	0x08019d7c
 800aacc:	08019d8c 	.word	0x08019d8c
 800aad0:	08019da8 	.word	0x08019da8
 800aad4:	08019dbc 	.word	0x08019dbc
 800aad8:	08019dd4 	.word	0x08019dd4
 800aadc:	08019de0 	.word	0x08019de0
 800aae0:	08019df0 	.word	0x08019df0
 800aae4:	08019e0c 	.word	0x08019e0c
 800aae8:	08019e20 	.word	0x08019e20
 800aaec:	08019e34 	.word	0x08019e34
 800aaf0:	08019e50 	.word	0x08019e50
 800aaf4:	08019e68 	.word	0x08019e68
 800aaf8:	08019e80 	.word	0x08019e80
 800aafc:	08019e98 	.word	0x08019e98
 800ab00:	08019eb4 	.word	0x08019eb4
 800ab04:	08019cdc 	.word	0x08019cdc

0800ab08 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af02      	add	r7, sp, #8
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	330a      	adds	r3, #10
 800ab18:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ab26:	b299      	uxth	r1, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	4613      	mov	r3, r2
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	f001 fd54 	bl	800c5e0 <HAL_I2C_Master_Transmit>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ab3c:	693b      	ldr	r3, [r7, #16]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b088      	sub	sp, #32
 800ab4a:	af02      	add	r7, sp, #8
 800ab4c:	60f8      	str	r0, [r7, #12]
 800ab4e:	60b9      	str	r1, [r7, #8]
 800ab50:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	330a      	adds	r3, #10
 800ab56:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ab64:	f043 0301 	orr.w	r3, r3, #1
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	b299      	uxth	r1, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	4613      	mov	r3, r2
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	f001 fe30 	bl	800c7dc <HAL_I2C_Master_Receive>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ab80:	693b      	ldr	r3, [r7, #16]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	607a      	str	r2, [r7, #4]
 800ab96:	603b      	str	r3, [r7, #0]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b3f      	cmp	r3, #63	; 0x3f
 800aba4:	d902      	bls.n	800abac <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800aba6:	f06f 0303 	mvn.w	r3, #3
 800abaa:	e016      	b.n	800abda <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800abac:	4a0d      	ldr	r2, [pc, #52]	; (800abe4 <VL53L0X_WriteMulti+0x58>)
 800abae:	7afb      	ldrb	r3, [r7, #11]
 800abb0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	6879      	ldr	r1, [r7, #4]
 800abb6:	480c      	ldr	r0, [pc, #48]	; (800abe8 <VL53L0X_WriteMulti+0x5c>)
 800abb8:	f009 ff76 	bl	8014aa8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	3301      	adds	r3, #1
 800abc0:	461a      	mov	r2, r3
 800abc2:	4908      	ldr	r1, [pc, #32]	; (800abe4 <VL53L0X_WriteMulti+0x58>)
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f7ff ff9f 	bl	800ab08 <_I2CWrite>
 800abca:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800abd2:	23ec      	movs	r3, #236	; 0xec
 800abd4:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800abd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3718      	adds	r7, #24
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	200021c4 	.word	0x200021c4
 800abe8:	200021c5 	.word	0x200021c5

0800abec <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800abec:	b580      	push	{r7, lr}
 800abee:	b086      	sub	sp, #24
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	607a      	str	r2, [r7, #4]
 800abf6:	603b      	str	r3, [r7, #0]
 800abf8:	460b      	mov	r3, r1
 800abfa:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abfc:	2300      	movs	r3, #0
 800abfe:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ac00:	f107 030b 	add.w	r3, r7, #11
 800ac04:	2201      	movs	r2, #1
 800ac06:	4619      	mov	r1, r3
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f7ff ff7d 	bl	800ab08 <_I2CWrite>
 800ac0e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac16:	23ec      	movs	r3, #236	; 0xec
 800ac18:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ac1a:	e00c      	b.n	800ac36 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f7ff ff90 	bl	800ab46 <_I2CRead>
 800ac26:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d002      	beq.n	800ac34 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac2e:	23ec      	movs	r3, #236	; 0xec
 800ac30:	75fb      	strb	r3, [r7, #23]
 800ac32:	e000      	b.n	800ac36 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ac34:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ac36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
	...

0800ac44 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	70fb      	strb	r3, [r7, #3]
 800ac50:	4613      	mov	r3, r2
 800ac52:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac54:	2300      	movs	r3, #0
 800ac56:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ac58:	4a0b      	ldr	r2, [pc, #44]	; (800ac88 <VL53L0X_WrByte+0x44>)
 800ac5a:	78fb      	ldrb	r3, [r7, #3]
 800ac5c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ac5e:	4a0a      	ldr	r2, [pc, #40]	; (800ac88 <VL53L0X_WrByte+0x44>)
 800ac60:	78bb      	ldrb	r3, [r7, #2]
 800ac62:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ac64:	2202      	movs	r2, #2
 800ac66:	4908      	ldr	r1, [pc, #32]	; (800ac88 <VL53L0X_WrByte+0x44>)
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff ff4d 	bl	800ab08 <_I2CWrite>
 800ac6e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac76:	23ec      	movs	r3, #236	; 0xec
 800ac78:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ac7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	200021c4 	.word	0x200021c4

0800ac8c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	460b      	mov	r3, r1
 800ac96:	70fb      	strb	r3, [r7, #3]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800aca0:	4a0e      	ldr	r2, [pc, #56]	; (800acdc <VL53L0X_WrWord+0x50>)
 800aca2:	78fb      	ldrb	r3, [r7, #3]
 800aca4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800aca6:	883b      	ldrh	r3, [r7, #0]
 800aca8:	0a1b      	lsrs	r3, r3, #8
 800acaa:	b29b      	uxth	r3, r3
 800acac:	b2da      	uxtb	r2, r3
 800acae:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <VL53L0X_WrWord+0x50>)
 800acb0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800acb2:	883b      	ldrh	r3, [r7, #0]
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	4b09      	ldr	r3, [pc, #36]	; (800acdc <VL53L0X_WrWord+0x50>)
 800acb8:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800acba:	2203      	movs	r2, #3
 800acbc:	4907      	ldr	r1, [pc, #28]	; (800acdc <VL53L0X_WrWord+0x50>)
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7ff ff22 	bl	800ab08 <_I2CWrite>
 800acc4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800accc:	23ec      	movs	r3, #236	; 0xec
 800acce:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800acd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	200021c4 	.word	0x200021c4

0800ace0 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	4608      	mov	r0, r1
 800acea:	4611      	mov	r1, r2
 800acec:	461a      	mov	r2, r3
 800acee:	4603      	mov	r3, r0
 800acf0:	70fb      	strb	r3, [r7, #3]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70bb      	strb	r3, [r7, #2]
 800acf6:	4613      	mov	r3, r2
 800acf8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800acfe:	f107 020e 	add.w	r2, r7, #14
 800ad02:	78fb      	ldrb	r3, [r7, #3]
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f81e 	bl	800ad48 <VL53L0X_RdByte>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ad10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d110      	bne.n	800ad3a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ad18:	7bba      	ldrb	r2, [r7, #14]
 800ad1a:	78bb      	ldrb	r3, [r7, #2]
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	787b      	ldrb	r3, [r7, #1]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ad28:	7bba      	ldrb	r2, [r7, #14]
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff ff88 	bl	800ac44 <VL53L0X_WrByte>
 800ad34:	4603      	mov	r3, r0
 800ad36:	73fb      	strb	r3, [r7, #15]
 800ad38:	e000      	b.n	800ad3c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ad3a:	bf00      	nop
done:
    return Status;
 800ad3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	460b      	mov	r3, r1
 800ad52:	607a      	str	r2, [r7, #4]
 800ad54:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad56:	2300      	movs	r3, #0
 800ad58:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ad5a:	f107 030b 	add.w	r3, r7, #11
 800ad5e:	2201      	movs	r2, #1
 800ad60:	4619      	mov	r1, r3
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f7ff fed0 	bl	800ab08 <_I2CWrite>
 800ad68:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad70:	23ec      	movs	r3, #236	; 0xec
 800ad72:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ad74:	e00c      	b.n	800ad90 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ad76:	2201      	movs	r2, #1
 800ad78:	6879      	ldr	r1, [r7, #4]
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7ff fee3 	bl	800ab46 <_I2CRead>
 800ad80:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad88:	23ec      	movs	r3, #236	; 0xec
 800ad8a:	75fb      	strb	r3, [r7, #23]
 800ad8c:	e000      	b.n	800ad90 <VL53L0X_RdByte+0x48>
    }
done:
 800ad8e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ad90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	460b      	mov	r3, r1
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adaa:	2300      	movs	r3, #0
 800adac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800adae:	f107 030b 	add.w	r3, r7, #11
 800adb2:	2201      	movs	r2, #1
 800adb4:	4619      	mov	r1, r3
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f7ff fea6 	bl	800ab08 <_I2CWrite>
 800adbc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800adc4:	23ec      	movs	r3, #236	; 0xec
 800adc6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800adc8:	e017      	b.n	800adfa <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800adca:	2202      	movs	r2, #2
 800adcc:	490e      	ldr	r1, [pc, #56]	; (800ae08 <VL53L0X_RdWord+0x6c>)
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f7ff feb9 	bl	800ab46 <_I2CRead>
 800add4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d002      	beq.n	800ade2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800addc:	23ec      	movs	r3, #236	; 0xec
 800adde:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ade0:	e00b      	b.n	800adfa <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ade2:	4b09      	ldr	r3, [pc, #36]	; (800ae08 <VL53L0X_RdWord+0x6c>)
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	021b      	lsls	r3, r3, #8
 800adea:	b29a      	uxth	r2, r3
 800adec:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <VL53L0X_RdWord+0x6c>)
 800adee:	785b      	ldrb	r3, [r3, #1]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	4413      	add	r3, r2
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800adfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3718      	adds	r7, #24
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	200021c4 	.word	0x200021c4

0800ae0c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	460b      	mov	r3, r1
 800ae16:	607a      	str	r2, [r7, #4]
 800ae18:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ae1e:	f107 030b 	add.w	r3, r7, #11
 800ae22:	2201      	movs	r2, #1
 800ae24:	4619      	mov	r1, r3
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f7ff fe6e 	bl	800ab08 <_I2CWrite>
 800ae2c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae34:	23ec      	movs	r3, #236	; 0xec
 800ae36:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ae38:	e01b      	b.n	800ae72 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ae3a:	2204      	movs	r2, #4
 800ae3c:	4910      	ldr	r1, [pc, #64]	; (800ae80 <VL53L0X_RdDWord+0x74>)
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7ff fe81 	bl	800ab46 <_I2CRead>
 800ae44:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae4c:	23ec      	movs	r3, #236	; 0xec
 800ae4e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ae50:	e00f      	b.n	800ae72 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ae52:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <VL53L0X_RdDWord+0x74>)
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	061a      	lsls	r2, r3, #24
 800ae58:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <VL53L0X_RdDWord+0x74>)
 800ae5a:	785b      	ldrb	r3, [r3, #1]
 800ae5c:	041b      	lsls	r3, r3, #16
 800ae5e:	441a      	add	r2, r3
 800ae60:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <VL53L0X_RdDWord+0x74>)
 800ae62:	789b      	ldrb	r3, [r3, #2]
 800ae64:	021b      	lsls	r3, r3, #8
 800ae66:	4413      	add	r3, r2
 800ae68:	4a05      	ldr	r2, [pc, #20]	; (800ae80 <VL53L0X_RdDWord+0x74>)
 800ae6a:	78d2      	ldrb	r2, [r2, #3]
 800ae6c:	441a      	add	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800ae72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	200021c4 	.word	0x200021c4

0800ae84 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ae90:	2002      	movs	r0, #2
 800ae92:	f000 ff1d 	bl	800bcd0 <HAL_Delay>
    return status;
 800ae96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
	...

0800aea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800aea8:	f000 fed0 	bl	800bc4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aeac:	f000 f86a 	bl	800af84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800aeb0:	f000 fa9c 	bl	800b3ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800aeb4:	f000 fa70 	bl	800b398 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800aeb8:	f000 f900 	bl	800b0bc <MX_RTC_Init>
  MX_TIM1_Init();
 800aebc:	f000 f9a0 	bl	800b200 <MX_TIM1_Init>
  MX_TIM2_Init();
 800aec0:	f000 f9f2 	bl	800b2a8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800aec4:	f000 fa3e 	bl	800b344 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800aec8:	f000 f8ca 	bl	800b060 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  LogInfo_clear();
 800aecc:	f7f7 fc9c 	bl	8002808 <LogInfo_clear>
  user_init();		// SK ADDSKprint
 800aed0:	f7f7 ff88 	bl	8002de4 <user_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800aed4:	f006 fd7e 	bl	80119d4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(void *), &myQueue01_attributes);
 800aed8:	4a1a      	ldr	r2, [pc, #104]	; (800af44 <main+0xa0>)
 800aeda:	2104      	movs	r1, #4
 800aedc:	2010      	movs	r0, #16
 800aede:	f006 fe70 	bl	8011bc2 <osMessageQueueNew>
 800aee2:	4603      	mov	r3, r0
 800aee4:	4a18      	ldr	r2, [pc, #96]	; (800af48 <main+0xa4>)
 800aee6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(void *), &myQueue02_attributes);
 800aee8:	4a18      	ldr	r2, [pc, #96]	; (800af4c <main+0xa8>)
 800aeea:	2104      	movs	r1, #4
 800aeec:	2010      	movs	r0, #16
 800aeee:	f006 fe68 	bl	8011bc2 <osMessageQueueNew>
 800aef2:	4603      	mov	r3, r0
 800aef4:	4a16      	ldr	r2, [pc, #88]	; (800af50 <main+0xac>)
 800aef6:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (16, sizeof(void *), &myQueue03_attributes);
 800aef8:	4a16      	ldr	r2, [pc, #88]	; (800af54 <main+0xb0>)
 800aefa:	2104      	movs	r1, #4
 800aefc:	2010      	movs	r0, #16
 800aefe:	f006 fe60 	bl	8011bc2 <osMessageQueueNew>
 800af02:	4603      	mov	r3, r0
 800af04:	4a14      	ldr	r2, [pc, #80]	; (800af58 <main+0xb4>)
 800af06:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_main */
  Task_mainHandle = osThreadNew(StartDefaultTask, NULL, &Task_main_attributes);
 800af08:	4a14      	ldr	r2, [pc, #80]	; (800af5c <main+0xb8>)
 800af0a:	2100      	movs	r1, #0
 800af0c:	4814      	ldr	r0, [pc, #80]	; (800af60 <main+0xbc>)
 800af0e:	f006 fdab 	bl	8011a68 <osThreadNew>
 800af12:	4603      	mov	r3, r0
 800af14:	4a13      	ldr	r2, [pc, #76]	; (800af64 <main+0xc0>)
 800af16:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub1 */
  Task_sub1Handle = osThreadNew(StartTask02, NULL, &Task_sub1_attributes);
 800af18:	4a13      	ldr	r2, [pc, #76]	; (800af68 <main+0xc4>)
 800af1a:	2100      	movs	r1, #0
 800af1c:	4813      	ldr	r0, [pc, #76]	; (800af6c <main+0xc8>)
 800af1e:	f006 fda3 	bl	8011a68 <osThreadNew>
 800af22:	4603      	mov	r3, r0
 800af24:	4a12      	ldr	r2, [pc, #72]	; (800af70 <main+0xcc>)
 800af26:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub2 */
  Task_sub2Handle = osThreadNew(StartTask03, NULL, &Task_sub2_attributes);
 800af28:	4a12      	ldr	r2, [pc, #72]	; (800af74 <main+0xd0>)
 800af2a:	2100      	movs	r1, #0
 800af2c:	4812      	ldr	r0, [pc, #72]	; (800af78 <main+0xd4>)
 800af2e:	f006 fd9b 	bl	8011a68 <osThreadNew>
 800af32:	4603      	mov	r3, r0
 800af34:	4a11      	ldr	r2, [pc, #68]	; (800af7c <main+0xd8>)
 800af36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  SKprintf("osKernelStart()\r\n");
 800af38:	4811      	ldr	r0, [pc, #68]	; (800af80 <main+0xdc>)
 800af3a:	f7f9 f97b 	bl	8004234 <SKprintf>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800af3e:	f006 fd6d 	bl	8011a1c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800af42:	e7fe      	b.n	800af42 <main+0x9e>
 800af44:	0801a674 	.word	0x0801a674
 800af48:	2000239c 	.word	0x2000239c
 800af4c:	0801a68c 	.word	0x0801a68c
 800af50:	200023a0 	.word	0x200023a0
 800af54:	0801a6a4 	.word	0x0801a6a4
 800af58:	200023a4 	.word	0x200023a4
 800af5c:	0801a608 	.word	0x0801a608
 800af60:	0800b4f1 	.word	0x0800b4f1
 800af64:	20002390 	.word	0x20002390
 800af68:	0801a62c 	.word	0x0801a62c
 800af6c:	0800b511 	.word	0x0800b511
 800af70:	20002394 	.word	0x20002394
 800af74:	0801a650 	.word	0x0801a650
 800af78:	0800b539 	.word	0x0800b539
 800af7c:	20002398 	.word	0x20002398
 800af80:	0801a030 	.word	0x0801a030

0800af84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b094      	sub	sp, #80	; 0x50
 800af88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800af8a:	f107 0320 	add.w	r3, r7, #32
 800af8e:	2230      	movs	r2, #48	; 0x30
 800af90:	2100      	movs	r1, #0
 800af92:	4618      	mov	r0, r3
 800af94:	f009 fd96 	bl	8014ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800af98:	f107 030c 	add.w	r3, r7, #12
 800af9c:	2200      	movs	r2, #0
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	605a      	str	r2, [r3, #4]
 800afa2:	609a      	str	r2, [r3, #8]
 800afa4:	60da      	str	r2, [r3, #12]
 800afa6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800afa8:	2300      	movs	r3, #0
 800afaa:	60bb      	str	r3, [r7, #8]
 800afac:	4b2a      	ldr	r3, [pc, #168]	; (800b058 <SystemClock_Config+0xd4>)
 800afae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb0:	4a29      	ldr	r2, [pc, #164]	; (800b058 <SystemClock_Config+0xd4>)
 800afb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afb6:	6413      	str	r3, [r2, #64]	; 0x40
 800afb8:	4b27      	ldr	r3, [pc, #156]	; (800b058 <SystemClock_Config+0xd4>)
 800afba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afc0:	60bb      	str	r3, [r7, #8]
 800afc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800afc4:	2300      	movs	r3, #0
 800afc6:	607b      	str	r3, [r7, #4]
 800afc8:	4b24      	ldr	r3, [pc, #144]	; (800b05c <SystemClock_Config+0xd8>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800afd0:	4a22      	ldr	r2, [pc, #136]	; (800b05c <SystemClock_Config+0xd8>)
 800afd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	4b20      	ldr	r3, [pc, #128]	; (800b05c <SystemClock_Config+0xd8>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800afe0:	607b      	str	r3, [r7, #4]
 800afe2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800afe4:	2306      	movs	r3, #6
 800afe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800afe8:	2301      	movs	r3, #1
 800afea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800afec:	2301      	movs	r3, #1
 800afee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800aff0:	2310      	movs	r3, #16
 800aff2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aff4:	2302      	movs	r3, #2
 800aff6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800aff8:	2300      	movs	r3, #0
 800affa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800affc:	2310      	movs	r3, #16
 800affe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800b000:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800b004:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800b006:	2304      	movs	r3, #4
 800b008:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800b00a:	2307      	movs	r3, #7
 800b00c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b00e:	f107 0320 	add.w	r3, r7, #32
 800b012:	4618      	mov	r0, r3
 800b014:	f003 fe10 	bl	800ec38 <HAL_RCC_OscConfig>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800b01e:	f000 fab1 	bl	800b584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b022:	230f      	movs	r3, #15
 800b024:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b026:	2302      	movs	r3, #2
 800b028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b02a:	2300      	movs	r3, #0
 800b02c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b02e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b034:	2300      	movs	r3, #0
 800b036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b038:	f107 030c 	add.w	r3, r7, #12
 800b03c:	2102      	movs	r1, #2
 800b03e:	4618      	mov	r0, r3
 800b040:	f004 f872 	bl	800f128 <HAL_RCC_ClockConfig>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800b04a:	f000 fa9b 	bl	800b584 <Error_Handler>
  }
}
 800b04e:	bf00      	nop
 800b050:	3750      	adds	r7, #80	; 0x50
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	40023800 	.word	0x40023800
 800b05c:	40007000 	.word	0x40007000

0800b060 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800b064:	4b12      	ldr	r3, [pc, #72]	; (800b0b0 <MX_I2C1_Init+0x50>)
 800b066:	4a13      	ldr	r2, [pc, #76]	; (800b0b4 <MX_I2C1_Init+0x54>)
 800b068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800b06a:	4b11      	ldr	r3, [pc, #68]	; (800b0b0 <MX_I2C1_Init+0x50>)
 800b06c:	4a12      	ldr	r2, [pc, #72]	; (800b0b8 <MX_I2C1_Init+0x58>)
 800b06e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b070:	4b0f      	ldr	r3, [pc, #60]	; (800b0b0 <MX_I2C1_Init+0x50>)
 800b072:	2200      	movs	r2, #0
 800b074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b076:	4b0e      	ldr	r3, [pc, #56]	; (800b0b0 <MX_I2C1_Init+0x50>)
 800b078:	2200      	movs	r2, #0
 800b07a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b07c:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <MX_I2C1_Init+0x50>)
 800b07e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <MX_I2C1_Init+0x50>)
 800b086:	2200      	movs	r2, #0
 800b088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <MX_I2C1_Init+0x50>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b090:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <MX_I2C1_Init+0x50>)
 800b092:	2200      	movs	r2, #0
 800b094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b096:	4b06      	ldr	r3, [pc, #24]	; (800b0b0 <MX_I2C1_Init+0x50>)
 800b098:	2200      	movs	r2, #0
 800b09a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b09c:	4804      	ldr	r0, [pc, #16]	; (800b0b0 <MX_I2C1_Init+0x50>)
 800b09e:	f001 f95b 	bl	800c358 <HAL_I2C_Init>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800b0a8:	f000 fa6c 	bl	800b584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800b0ac:	bf00      	nop
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	20002204 	.word	0x20002204
 800b0b4:	40005400 	.word	0x40005400
 800b0b8:	00061a80 	.word	0x00061a80

0800b0bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b08c      	sub	sp, #48	; 0x30
 800b0c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800b0c2:	f107 031c 	add.w	r3, r7, #28
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	605a      	str	r2, [r3, #4]
 800b0cc:	609a      	str	r2, [r3, #8]
 800b0ce:	60da      	str	r2, [r3, #12]
 800b0d0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	61bb      	str	r3, [r7, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800b0d6:	4b48      	ldr	r3, [pc, #288]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b0d8:	4a48      	ldr	r2, [pc, #288]	; (800b1fc <MX_RTC_Init+0x140>)
 800b0da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b0dc:	4b46      	ldr	r3, [pc, #280]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b0de:	2200      	movs	r2, #0
 800b0e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b0e2:	4b45      	ldr	r3, [pc, #276]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b0e4:	227f      	movs	r2, #127	; 0x7f
 800b0e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b0e8:	4b43      	ldr	r3, [pc, #268]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b0ea:	22ff      	movs	r2, #255	; 0xff
 800b0ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b0ee:	4b42      	ldr	r3, [pc, #264]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b0f4:	4b40      	ldr	r3, [pc, #256]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b0fa:	4b3f      	ldr	r3, [pc, #252]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b100:	483d      	ldr	r0, [pc, #244]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b102:	f004 fb51 	bl	800f7a8 <HAL_RTC_Init>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 800b10c:	f000 fa3a 	bl	800b584 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800b110:	2300      	movs	r3, #0
 800b112:	773b      	strb	r3, [r7, #28]
  sTime.Minutes = 0x0;
 800b114:	2300      	movs	r3, #0
 800b116:	777b      	strb	r3, [r7, #29]
  sTime.Seconds = 0x0;
 800b118:	2300      	movs	r3, #0
 800b11a:	77bb      	strb	r3, [r7, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b11c:	2300      	movs	r3, #0
 800b11e:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b120:	2300      	movs	r3, #0
 800b122:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800b124:	f107 031c 	add.w	r3, r7, #28
 800b128:	2201      	movs	r2, #1
 800b12a:	4619      	mov	r1, r3
 800b12c:	4832      	ldr	r0, [pc, #200]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b12e:	f004 fbb1 	bl	800f894 <HAL_RTC_SetTime>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <MX_RTC_Init+0x80>
  {
    Error_Handler();
 800b138:	f000 fa24 	bl	800b584 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800b13c:	2301      	movs	r3, #1
 800b13e:	763b      	strb	r3, [r7, #24]
  sDate.Month = RTC_MONTH_JANUARY;
 800b140:	2301      	movs	r3, #1
 800b142:	767b      	strb	r3, [r7, #25]
  sDate.Date = 0x1;
 800b144:	2301      	movs	r3, #1
 800b146:	76bb      	strb	r3, [r7, #26]
  sDate.Year = 0x0;
 800b148:	2300      	movs	r3, #0
 800b14a:	76fb      	strb	r3, [r7, #27]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800b14c:	f107 0318 	add.w	r3, r7, #24
 800b150:	2201      	movs	r2, #1
 800b152:	4619      	mov	r1, r3
 800b154:	4828      	ldr	r0, [pc, #160]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b156:	f004 fc95 	bl	800fa84 <HAL_RTC_SetDate>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800b160:	f000 fa10 	bl	800b584 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800b164:	2204      	movs	r2, #4
 800b166:	2100      	movs	r1, #0
 800b168:	4823      	ldr	r0, [pc, #140]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b16a:	f004 fe1b 	bl	800fda4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800b174:	f000 fa06 	bl	800b584 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#define MAGIC_NO 0x12a5			// SK ADD

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != MAGIC_NO)
 800b178:	2100      	movs	r1, #0
 800b17a:	481f      	ldr	r0, [pc, #124]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b17c:	f004 ff10 	bl	800ffa0 <HAL_RTCEx_BKUPRead>
 800b180:	4603      	mov	r3, r0
 800b182:	f241 22a5 	movw	r2, #4773	; 0x12a5
 800b186:	4293      	cmp	r3, r2
 800b188:	d032      	beq.n	800b1f0 <MX_RTC_Init+0x134>
  {
    RTC_TimeTypeDef sTime = {0};
 800b18a:	1d3b      	adds	r3, r7, #4
 800b18c:	2200      	movs	r2, #0
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	605a      	str	r2, [r3, #4]
 800b192:	609a      	str	r2, [r3, #8]
 800b194:	60da      	str	r2, [r3, #12]
 800b196:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 800b198:	2300      	movs	r3, #0
 800b19a:	603b      	str	r3, [r7, #0]

    sTime.Hours = 1;
 800b19c:	2301      	movs	r3, #1
 800b19e:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	71bb      	strb	r3, [r7, #6]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800b1a8:	1d3b      	adds	r3, r7, #4
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4812      	ldr	r0, [pc, #72]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b1b0:	f004 fb70 	bl	800f894 <HAL_RTC_SetTime>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <MX_RTC_Init+0x102>
    {
      Error_Handler();
 800b1ba:	f000 f9e3 	bl	800b584 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	707b      	strb	r3, [r7, #1]
    sDate.Date = 1;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 20;
 800b1ca:	2314      	movs	r3, #20
 800b1cc:	70fb      	strb	r3, [r7, #3]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4808      	ldr	r0, [pc, #32]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b1d6:	f004 fc55 	bl	800fa84 <HAL_RTC_SetDate>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <MX_RTC_Init+0x128>
    {
      Error_Handler();
 800b1e0:	f000 f9d0 	bl	800b584 <Error_Handler>

    }
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, MAGIC_NO);
 800b1e4:	f241 22a5 	movw	r2, #4773	; 0x12a5
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	4803      	ldr	r0, [pc, #12]	; (800b1f8 <MX_RTC_Init+0x13c>)
 800b1ec:	f004 febe 	bl	800ff6c <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 800b1f0:	bf00      	nop
 800b1f2:	3730      	adds	r7, #48	; 0x30
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20002258 	.word	0x20002258
 800b1fc:	40002800 	.word	0x40002800

0800b200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b206:	f107 0308 	add.w	r3, r7, #8
 800b20a:	2200      	movs	r2, #0
 800b20c:	601a      	str	r2, [r3, #0]
 800b20e:	605a      	str	r2, [r3, #4]
 800b210:	609a      	str	r2, [r3, #8]
 800b212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b214:	463b      	mov	r3, r7
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b21c:	4b20      	ldr	r3, [pc, #128]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b21e:	4a21      	ldr	r2, [pc, #132]	; (800b2a4 <MX_TIM1_Init+0xa4>)
 800b220:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800b222:	4b1f      	ldr	r3, [pc, #124]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b224:	f640 729f 	movw	r2, #3999	; 0xf9f
 800b228:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b22a:	4b1d      	ldr	r3, [pc, #116]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 800b230:	4b1b      	ldr	r3, [pc, #108]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b232:	f245 2207 	movw	r2, #20999	; 0x5207
 800b236:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b238:	4b19      	ldr	r3, [pc, #100]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b23e:	4b18      	ldr	r3, [pc, #96]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b240:	2200      	movs	r2, #0
 800b242:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b244:	4b16      	ldr	r3, [pc, #88]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b246:	2200      	movs	r2, #0
 800b248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b24a:	4815      	ldr	r0, [pc, #84]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b24c:	f004 fec0 	bl	800ffd0 <HAL_TIM_Base_Init>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800b256:	f000 f995 	bl	800b584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b25a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b25e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b260:	f107 0308 	add.w	r3, r7, #8
 800b264:	4619      	mov	r1, r3
 800b266:	480e      	ldr	r0, [pc, #56]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b268:	f005 f86c 	bl	8010344 <HAL_TIM_ConfigClockSource>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800b272:	f000 f987 	bl	800b584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b276:	2300      	movs	r3, #0
 800b278:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b27a:	2300      	movs	r3, #0
 800b27c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b27e:	463b      	mov	r3, r7
 800b280:	4619      	mov	r1, r3
 800b282:	4807      	ldr	r0, [pc, #28]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b284:	f005 fa68 	bl	8010758 <HAL_TIMEx_MasterConfigSynchronization>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800b28e:	f000 f979 	bl	800b584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);    // SK ADD
 800b292:	4803      	ldr	r0, [pc, #12]	; (800b2a0 <MX_TIM1_Init+0xa0>)
 800b294:	f004 feec 	bl	8010070 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 800b298:	bf00      	nop
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	20002278 	.word	0x20002278
 800b2a4:	40010000 	.word	0x40010000

0800b2a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b086      	sub	sp, #24
 800b2ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b2ae:	f107 0308 	add.w	r3, r7, #8
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	605a      	str	r2, [r3, #4]
 800b2b8:	609a      	str	r2, [r3, #8]
 800b2ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b2bc:	463b      	mov	r3, r7
 800b2be:	2200      	movs	r2, #0
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b2c4:	4b1e      	ldr	r3, [pc, #120]	; (800b340 <MX_TIM2_Init+0x98>)
 800b2c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b2ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 800b2cc:	4b1c      	ldr	r3, [pc, #112]	; (800b340 <MX_TIM2_Init+0x98>)
 800b2ce:	2203      	movs	r2, #3
 800b2d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2d2:	4b1b      	ldr	r3, [pc, #108]	; (800b340 <MX_TIM2_Init+0x98>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 209;
 800b2d8:	4b19      	ldr	r3, [pc, #100]	; (800b340 <MX_TIM2_Init+0x98>)
 800b2da:	22d1      	movs	r2, #209	; 0xd1
 800b2dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b2de:	4b18      	ldr	r3, [pc, #96]	; (800b340 <MX_TIM2_Init+0x98>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b2e4:	4b16      	ldr	r3, [pc, #88]	; (800b340 <MX_TIM2_Init+0x98>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b2ea:	4815      	ldr	r0, [pc, #84]	; (800b340 <MX_TIM2_Init+0x98>)
 800b2ec:	f004 fe70 	bl	800ffd0 <HAL_TIM_Base_Init>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800b2f6:	f000 f945 	bl	800b584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b2fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b300:	f107 0308 	add.w	r3, r7, #8
 800b304:	4619      	mov	r1, r3
 800b306:	480e      	ldr	r0, [pc, #56]	; (800b340 <MX_TIM2_Init+0x98>)
 800b308:	f005 f81c 	bl	8010344 <HAL_TIM_ConfigClockSource>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800b312:	f000 f937 	bl	800b584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b316:	2300      	movs	r3, #0
 800b318:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b31a:	2300      	movs	r3, #0
 800b31c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b31e:	463b      	mov	r3, r7
 800b320:	4619      	mov	r1, r3
 800b322:	4807      	ldr	r0, [pc, #28]	; (800b340 <MX_TIM2_Init+0x98>)
 800b324:	f005 fa18 	bl	8010758 <HAL_TIMEx_MasterConfigSynchronization>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d001      	beq.n	800b332 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800b32e:	f000 f929 	bl	800b584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);    // SK ADD
 800b332:	4803      	ldr	r0, [pc, #12]	; (800b340 <MX_TIM2_Init+0x98>)
 800b334:	f004 fe9c 	bl	8010070 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 800b338:	bf00      	nop
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	200022c0 	.word	0x200022c0

0800b344 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b348:	4b11      	ldr	r3, [pc, #68]	; (800b390 <MX_USART1_UART_Init+0x4c>)
 800b34a:	4a12      	ldr	r2, [pc, #72]	; (800b394 <MX_USART1_UART_Init+0x50>)
 800b34c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800b34e:	4b10      	ldr	r3, [pc, #64]	; (800b390 <MX_USART1_UART_Init+0x4c>)
 800b350:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800b354:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b356:	4b0e      	ldr	r3, [pc, #56]	; (800b390 <MX_USART1_UART_Init+0x4c>)
 800b358:	2200      	movs	r2, #0
 800b35a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b35c:	4b0c      	ldr	r3, [pc, #48]	; (800b390 <MX_USART1_UART_Init+0x4c>)
 800b35e:	2200      	movs	r2, #0
 800b360:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b362:	4b0b      	ldr	r3, [pc, #44]	; (800b390 <MX_USART1_UART_Init+0x4c>)
 800b364:	2200      	movs	r2, #0
 800b366:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b368:	4b09      	ldr	r3, [pc, #36]	; (800b390 <MX_USART1_UART_Init+0x4c>)
 800b36a:	220c      	movs	r2, #12
 800b36c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b36e:	4b08      	ldr	r3, [pc, #32]	; (800b390 <MX_USART1_UART_Init+0x4c>)
 800b370:	2200      	movs	r2, #0
 800b372:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b374:	4b06      	ldr	r3, [pc, #24]	; (800b390 <MX_USART1_UART_Init+0x4c>)
 800b376:	2200      	movs	r2, #0
 800b378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b37a:	4805      	ldr	r0, [pc, #20]	; (800b390 <MX_USART1_UART_Init+0x4c>)
 800b37c:	f005 fa6e 	bl	801085c <HAL_UART_Init>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b386:	f000 f8fd 	bl	800b584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b38a:	bf00      	nop
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20002308 	.word	0x20002308
 800b394:	40011000 	.word	0x40011000

0800b398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b39c:	4b11      	ldr	r3, [pc, #68]	; (800b3e4 <MX_USART2_UART_Init+0x4c>)
 800b39e:	4a12      	ldr	r2, [pc, #72]	; (800b3e8 <MX_USART2_UART_Init+0x50>)
 800b3a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b3a2:	4b10      	ldr	r3, [pc, #64]	; (800b3e4 <MX_USART2_UART_Init+0x4c>)
 800b3a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b3a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b3aa:	4b0e      	ldr	r3, [pc, #56]	; (800b3e4 <MX_USART2_UART_Init+0x4c>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b3b0:	4b0c      	ldr	r3, [pc, #48]	; (800b3e4 <MX_USART2_UART_Init+0x4c>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b3b6:	4b0b      	ldr	r3, [pc, #44]	; (800b3e4 <MX_USART2_UART_Init+0x4c>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b3bc:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <MX_USART2_UART_Init+0x4c>)
 800b3be:	220c      	movs	r2, #12
 800b3c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b3c2:	4b08      	ldr	r3, [pc, #32]	; (800b3e4 <MX_USART2_UART_Init+0x4c>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b3c8:	4b06      	ldr	r3, [pc, #24]	; (800b3e4 <MX_USART2_UART_Init+0x4c>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b3ce:	4805      	ldr	r0, [pc, #20]	; (800b3e4 <MX_USART2_UART_Init+0x4c>)
 800b3d0:	f005 fa44 	bl	801085c <HAL_UART_Init>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800b3da:	f000 f8d3 	bl	800b584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b3de:	bf00      	nop
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	2000234c 	.word	0x2000234c
 800b3e8:	40004400 	.word	0x40004400

0800b3ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b08a      	sub	sp, #40	; 0x28
 800b3f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3f2:	f107 0314 	add.w	r3, r7, #20
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	605a      	str	r2, [r3, #4]
 800b3fc:	609a      	str	r2, [r3, #8]
 800b3fe:	60da      	str	r2, [r3, #12]
 800b400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b402:	2300      	movs	r3, #0
 800b404:	613b      	str	r3, [r7, #16]
 800b406:	4b37      	ldr	r3, [pc, #220]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40a:	4a36      	ldr	r2, [pc, #216]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b40c:	f043 0304 	orr.w	r3, r3, #4
 800b410:	6313      	str	r3, [r2, #48]	; 0x30
 800b412:	4b34      	ldr	r3, [pc, #208]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b416:	f003 0304 	and.w	r3, r3, #4
 800b41a:	613b      	str	r3, [r7, #16]
 800b41c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	4b30      	ldr	r3, [pc, #192]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b426:	4a2f      	ldr	r2, [pc, #188]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b42c:	6313      	str	r3, [r2, #48]	; 0x30
 800b42e:	4b2d      	ldr	r3, [pc, #180]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b43a:	2300      	movs	r3, #0
 800b43c:	60bb      	str	r3, [r7, #8]
 800b43e:	4b29      	ldr	r3, [pc, #164]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b442:	4a28      	ldr	r2, [pc, #160]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b444:	f043 0301 	orr.w	r3, r3, #1
 800b448:	6313      	str	r3, [r2, #48]	; 0x30
 800b44a:	4b26      	ldr	r3, [pc, #152]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	60bb      	str	r3, [r7, #8]
 800b454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b456:	2300      	movs	r3, #0
 800b458:	607b      	str	r3, [r7, #4]
 800b45a:	4b22      	ldr	r3, [pc, #136]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45e:	4a21      	ldr	r2, [pc, #132]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b460:	f043 0302 	orr.w	r3, r3, #2
 800b464:	6313      	str	r3, [r2, #48]	; 0x30
 800b466:	4b1f      	ldr	r3, [pc, #124]	; (800b4e4 <MX_GPIO_Init+0xf8>)
 800b468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46a:	f003 0302 	and.w	r3, r3, #2
 800b46e:	607b      	str	r3, [r7, #4]
 800b470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIM1_PLS_GPIO_Port, TIM1_PLS_Pin, GPIO_PIN_RESET);
 800b472:	2200      	movs	r2, #0
 800b474:	2104      	movs	r1, #4
 800b476:	481c      	ldr	r0, [pc, #112]	; (800b4e8 <MX_GPIO_Init+0xfc>)
 800b478:	f000 ff54 	bl	800c324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800b47c:	2200      	movs	r2, #0
 800b47e:	2120      	movs	r1, #32
 800b480:	481a      	ldr	r0, [pc, #104]	; (800b4ec <MX_GPIO_Init+0x100>)
 800b482:	f000 ff4f 	bl	800c324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800b486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b48a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b48c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800b490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b492:	2300      	movs	r3, #0
 800b494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800b496:	f107 0314 	add.w	r3, r7, #20
 800b49a:	4619      	mov	r1, r3
 800b49c:	4812      	ldr	r0, [pc, #72]	; (800b4e8 <MX_GPIO_Init+0xfc>)
 800b49e:	f000 fdbd 	bl	800c01c <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM1_PLS_Pin */
  GPIO_InitStruct.Pin = TIM1_PLS_Pin;
 800b4a2:	2304      	movs	r3, #4
 800b4a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIM1_PLS_GPIO_Port, &GPIO_InitStruct);
 800b4b2:	f107 0314 	add.w	r3, r7, #20
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	480b      	ldr	r0, [pc, #44]	; (800b4e8 <MX_GPIO_Init+0xfc>)
 800b4ba:	f000 fdaf 	bl	800c01c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800b4be:	2320      	movs	r3, #32
 800b4c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800b4ce:	f107 0314 	add.w	r3, r7, #20
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4805      	ldr	r0, [pc, #20]	; (800b4ec <MX_GPIO_Init+0x100>)
 800b4d6:	f000 fda1 	bl	800c01c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800b4da:	bf00      	nop
 800b4dc:	3728      	adds	r7, #40	; 0x28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	40023800 	.word	0x40023800
 800b4e8:	40020800 	.word	0x40020800
 800b4ec:	40020000 	.word	0x40020000

0800b4f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	task_chk_init();
 800b4f8:	f7f7 f9c2 	bl	8002880 <task_chk_init>
  /* Infinite loop */
  for(;;)
  {
//	  rtc_display();
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  task_stack_chk();
 800b4fc:	f7f7 faa6 	bl	8002a4c <task_stack_chk>
	  vl53_main();
 800b500:	f7f9 f848 	bl	8004594 <vl53_main>

    osDelay(1000);
 800b504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b508:	f006 fb40 	bl	8011b8c <osDelay>
	  task_stack_chk();
 800b50c:	e7f6      	b.n	800b4fc <StartDefaultTask+0xc>
	...

0800b510 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	 SKprintf("task2 start()\r\n");
 800b518:	4805      	ldr	r0, [pc, #20]	; (800b530 <StartTask02+0x20>)
 800b51a:	f7f8 fe8b 	bl	8004234 <SKprintf>




	 SKprintf("task2 loop()\r\n");
 800b51e:	4805      	ldr	r0, [pc, #20]	; (800b534 <StartTask02+0x24>)
 800b520:	f7f8 fe88 	bl	8004234 <SKprintf>
  /* Infinite loop */
  for(;;)
  {
	  //task_stack_chk();
	  debu_main();
 800b524:	f7f5 fcda 	bl	8000edc <debu_main>
	  TimerEventCtrl();
 800b528:	f7f7 fd24 	bl	8002f74 <TimerEventCtrl>
  {
 800b52c:	e7fa      	b.n	800b524 <StartTask02+0x14>
 800b52e:	bf00      	nop
 800b530:	0801a044 	.word	0x0801a044
 800b534:	0801a054 	.word	0x0801a054

0800b538 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
__weak void StartTask03(void *argument)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
    osDelay(100);
 800b540:	2064      	movs	r0, #100	; 0x64
 800b542:	f006 fb23 	bl	8011b8c <osDelay>
    //char c[2];

	//SKprintf_uart1("===================\r\n");
	SKprintf_uart1("=== UART1 START ===\r\n");
 800b546:	4805      	ldr	r0, [pc, #20]	; (800b55c <StartTask03+0x24>)
 800b548:	f7f8 fe30 	bl	80041ac <SKprintf_uart1>
	//SKprintf_uart1("===================\r\n");
	tasuk3_init();
 800b54c:	f7f7 fdd4 	bl	80030f8 <tasuk3_init>

	/* Infinite loop */

	for(;;)
	{
		rs485_com_task();
 800b550:	f7f7 ffe0 	bl	8003514 <rs485_com_task>
		osDelay(100);
 800b554:	2064      	movs	r0, #100	; 0x64
 800b556:	f006 fb19 	bl	8011b8c <osDelay>
		rs485_com_task();
 800b55a:	e7f9      	b.n	800b550 <StartTask03+0x18>
 800b55c:	0801a064 	.word	0x0801a064

0800b560 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a04      	ldr	r2, [pc, #16]	; (800b580 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d101      	bne.n	800b576 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b572:	f000 fb8d 	bl	800bc90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	40014400 	.word	0x40014400

0800b584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b584:	b480      	push	{r7}
 800b586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b588:	b672      	cpsid	i
}
 800b58a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b58c:	e7fe      	b.n	800b58c <Error_Handler+0x8>
	...

0800b590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b596:	2300      	movs	r3, #0
 800b598:	607b      	str	r3, [r7, #4]
 800b59a:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <HAL_MspInit+0x54>)
 800b59c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b59e:	4a11      	ldr	r2, [pc, #68]	; (800b5e4 <HAL_MspInit+0x54>)
 800b5a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b5a4:	6453      	str	r3, [r2, #68]	; 0x44
 800b5a6:	4b0f      	ldr	r3, [pc, #60]	; (800b5e4 <HAL_MspInit+0x54>)
 800b5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5ae:	607b      	str	r3, [r7, #4]
 800b5b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	603b      	str	r3, [r7, #0]
 800b5b6:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <HAL_MspInit+0x54>)
 800b5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ba:	4a0a      	ldr	r2, [pc, #40]	; (800b5e4 <HAL_MspInit+0x54>)
 800b5bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5c0:	6413      	str	r3, [r2, #64]	; 0x40
 800b5c2:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <HAL_MspInit+0x54>)
 800b5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ca:	603b      	str	r3, [r7, #0]
 800b5cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	210f      	movs	r1, #15
 800b5d2:	f06f 0001 	mvn.w	r0, #1
 800b5d6:	f000 fc57 	bl	800be88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b5da:	bf00      	nop
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	40023800 	.word	0x40023800

0800b5e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08a      	sub	sp, #40	; 0x28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5f0:	f107 0314 	add.w	r3, r7, #20
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	601a      	str	r2, [r3, #0]
 800b5f8:	605a      	str	r2, [r3, #4]
 800b5fa:	609a      	str	r2, [r3, #8]
 800b5fc:	60da      	str	r2, [r3, #12]
 800b5fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a21      	ldr	r2, [pc, #132]	; (800b68c <HAL_I2C_MspInit+0xa4>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d13b      	bne.n	800b682 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b60a:	2300      	movs	r3, #0
 800b60c:	613b      	str	r3, [r7, #16]
 800b60e:	4b20      	ldr	r3, [pc, #128]	; (800b690 <HAL_I2C_MspInit+0xa8>)
 800b610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b612:	4a1f      	ldr	r2, [pc, #124]	; (800b690 <HAL_I2C_MspInit+0xa8>)
 800b614:	f043 0302 	orr.w	r3, r3, #2
 800b618:	6313      	str	r3, [r2, #48]	; 0x30
 800b61a:	4b1d      	ldr	r3, [pc, #116]	; (800b690 <HAL_I2C_MspInit+0xa8>)
 800b61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	613b      	str	r3, [r7, #16]
 800b624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b626:	23c0      	movs	r3, #192	; 0xc0
 800b628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b62a:	2312      	movs	r3, #18
 800b62c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b62e:	2300      	movs	r3, #0
 800b630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b632:	2303      	movs	r3, #3
 800b634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b636:	2304      	movs	r3, #4
 800b638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b63a:	f107 0314 	add.w	r3, r7, #20
 800b63e:	4619      	mov	r1, r3
 800b640:	4814      	ldr	r0, [pc, #80]	; (800b694 <HAL_I2C_MspInit+0xac>)
 800b642:	f000 fceb 	bl	800c01c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b646:	2300      	movs	r3, #0
 800b648:	60fb      	str	r3, [r7, #12]
 800b64a:	4b11      	ldr	r3, [pc, #68]	; (800b690 <HAL_I2C_MspInit+0xa8>)
 800b64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64e:	4a10      	ldr	r2, [pc, #64]	; (800b690 <HAL_I2C_MspInit+0xa8>)
 800b650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b654:	6413      	str	r3, [r2, #64]	; 0x40
 800b656:	4b0e      	ldr	r3, [pc, #56]	; (800b690 <HAL_I2C_MspInit+0xa8>)
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800b662:	2200      	movs	r2, #0
 800b664:	2105      	movs	r1, #5
 800b666:	201f      	movs	r0, #31
 800b668:	f000 fc0e 	bl	800be88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b66c:	201f      	movs	r0, #31
 800b66e:	f000 fc27 	bl	800bec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800b672:	2200      	movs	r2, #0
 800b674:	2105      	movs	r1, #5
 800b676:	2020      	movs	r0, #32
 800b678:	f000 fc06 	bl	800be88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800b67c:	2020      	movs	r0, #32
 800b67e:	f000 fc1f 	bl	800bec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800b682:	bf00      	nop
 800b684:	3728      	adds	r7, #40	; 0x28
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	40005400 	.word	0x40005400
 800b690:	40023800 	.word	0x40023800
 800b694:	40020400 	.word	0x40020400

0800b698 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b088      	sub	sp, #32
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b6a0:	f107 030c 	add.w	r3, r7, #12
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	605a      	str	r2, [r3, #4]
 800b6aa:	609a      	str	r2, [r3, #8]
 800b6ac:	60da      	str	r2, [r3, #12]
 800b6ae:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a10      	ldr	r2, [pc, #64]	; (800b6f8 <HAL_RTC_MspInit+0x60>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d119      	bne.n	800b6ee <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b6be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6c2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b6c4:	f107 030c 	add.w	r3, r7, #12
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f003 ff7f 	bl	800f5cc <HAL_RCCEx_PeriphCLKConfig>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d001      	beq.n	800b6d8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800b6d4:	f7ff ff56 	bl	800b584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b6d8:	4b08      	ldr	r3, [pc, #32]	; (800b6fc <HAL_RTC_MspInit+0x64>)
 800b6da:	2201      	movs	r2, #1
 800b6dc:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2105      	movs	r1, #5
 800b6e2:	2003      	movs	r0, #3
 800b6e4:	f000 fbd0 	bl	800be88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800b6e8:	2003      	movs	r0, #3
 800b6ea:	f000 fbe9 	bl	800bec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b6ee:	bf00      	nop
 800b6f0:	3720      	adds	r7, #32
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	40002800 	.word	0x40002800
 800b6fc:	42470e3c 	.word	0x42470e3c

0800b700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a1c      	ldr	r2, [pc, #112]	; (800b780 <HAL_TIM_Base_MspInit+0x80>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d116      	bne.n	800b740 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b712:	2300      	movs	r3, #0
 800b714:	60fb      	str	r3, [r7, #12]
 800b716:	4b1b      	ldr	r3, [pc, #108]	; (800b784 <HAL_TIM_Base_MspInit+0x84>)
 800b718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b71a:	4a1a      	ldr	r2, [pc, #104]	; (800b784 <HAL_TIM_Base_MspInit+0x84>)
 800b71c:	f043 0301 	orr.w	r3, r3, #1
 800b720:	6453      	str	r3, [r2, #68]	; 0x44
 800b722:	4b18      	ldr	r3, [pc, #96]	; (800b784 <HAL_TIM_Base_MspInit+0x84>)
 800b724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800b72e:	2200      	movs	r2, #0
 800b730:	210f      	movs	r1, #15
 800b732:	2019      	movs	r0, #25
 800b734:	f000 fba8 	bl	800be88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800b738:	2019      	movs	r0, #25
 800b73a:	f000 fbc1 	bl	800bec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b73e:	e01a      	b.n	800b776 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b748:	d115      	bne.n	800b776 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b74a:	2300      	movs	r3, #0
 800b74c:	60bb      	str	r3, [r7, #8]
 800b74e:	4b0d      	ldr	r3, [pc, #52]	; (800b784 <HAL_TIM_Base_MspInit+0x84>)
 800b750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b752:	4a0c      	ldr	r2, [pc, #48]	; (800b784 <HAL_TIM_Base_MspInit+0x84>)
 800b754:	f043 0301 	orr.w	r3, r3, #1
 800b758:	6413      	str	r3, [r2, #64]	; 0x40
 800b75a:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <HAL_TIM_Base_MspInit+0x84>)
 800b75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	60bb      	str	r3, [r7, #8]
 800b764:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800b766:	2200      	movs	r2, #0
 800b768:	2105      	movs	r1, #5
 800b76a:	201c      	movs	r0, #28
 800b76c:	f000 fb8c 	bl	800be88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b770:	201c      	movs	r0, #28
 800b772:	f000 fba5 	bl	800bec0 <HAL_NVIC_EnableIRQ>
}
 800b776:	bf00      	nop
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	40010000 	.word	0x40010000
 800b784:	40023800 	.word	0x40023800

0800b788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08c      	sub	sp, #48	; 0x30
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b790:	f107 031c 	add.w	r3, r7, #28
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	605a      	str	r2, [r3, #4]
 800b79a:	609a      	str	r2, [r3, #8]
 800b79c:	60da      	str	r2, [r3, #12]
 800b79e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a3a      	ldr	r2, [pc, #232]	; (800b890 <HAL_UART_MspInit+0x108>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d135      	bne.n	800b816 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	61bb      	str	r3, [r7, #24]
 800b7ae:	4b39      	ldr	r3, [pc, #228]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b2:	4a38      	ldr	r2, [pc, #224]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b7b4:	f043 0310 	orr.w	r3, r3, #16
 800b7b8:	6453      	str	r3, [r2, #68]	; 0x44
 800b7ba:	4b36      	ldr	r3, [pc, #216]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7be:	f003 0310 	and.w	r3, r3, #16
 800b7c2:	61bb      	str	r3, [r7, #24]
 800b7c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	617b      	str	r3, [r7, #20]
 800b7ca:	4b32      	ldr	r3, [pc, #200]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ce:	4a31      	ldr	r2, [pc, #196]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b7d0:	f043 0301 	orr.w	r3, r3, #1
 800b7d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b7d6:	4b2f      	ldr	r3, [pc, #188]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b7e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b7e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b7f4:	2307      	movs	r3, #7
 800b7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7f8:	f107 031c 	add.w	r3, r7, #28
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4826      	ldr	r0, [pc, #152]	; (800b898 <HAL_UART_MspInit+0x110>)
 800b800:	f000 fc0c 	bl	800c01c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800b804:	2200      	movs	r2, #0
 800b806:	2105      	movs	r1, #5
 800b808:	2025      	movs	r0, #37	; 0x25
 800b80a:	f000 fb3d 	bl	800be88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b80e:	2025      	movs	r0, #37	; 0x25
 800b810:	f000 fb56 	bl	800bec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800b814:	e038      	b.n	800b888 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a20      	ldr	r2, [pc, #128]	; (800b89c <HAL_UART_MspInit+0x114>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d133      	bne.n	800b888 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b820:	2300      	movs	r3, #0
 800b822:	613b      	str	r3, [r7, #16]
 800b824:	4b1b      	ldr	r3, [pc, #108]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b828:	4a1a      	ldr	r2, [pc, #104]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b82a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b82e:	6413      	str	r3, [r2, #64]	; 0x40
 800b830:	4b18      	ldr	r3, [pc, #96]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b838:	613b      	str	r3, [r7, #16]
 800b83a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b83c:	2300      	movs	r3, #0
 800b83e:	60fb      	str	r3, [r7, #12]
 800b840:	4b14      	ldr	r3, [pc, #80]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b844:	4a13      	ldr	r2, [pc, #76]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b846:	f043 0301 	orr.w	r3, r3, #1
 800b84a:	6313      	str	r3, [r2, #48]	; 0x30
 800b84c:	4b11      	ldr	r3, [pc, #68]	; (800b894 <HAL_UART_MspInit+0x10c>)
 800b84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800b858:	230c      	movs	r3, #12
 800b85a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b85c:	2302      	movs	r3, #2
 800b85e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b860:	2300      	movs	r3, #0
 800b862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b864:	2300      	movs	r3, #0
 800b866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b868:	2307      	movs	r3, #7
 800b86a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b86c:	f107 031c 	add.w	r3, r7, #28
 800b870:	4619      	mov	r1, r3
 800b872:	4809      	ldr	r0, [pc, #36]	; (800b898 <HAL_UART_MspInit+0x110>)
 800b874:	f000 fbd2 	bl	800c01c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800b878:	2200      	movs	r2, #0
 800b87a:	2105      	movs	r1, #5
 800b87c:	2026      	movs	r0, #38	; 0x26
 800b87e:	f000 fb03 	bl	800be88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b882:	2026      	movs	r0, #38	; 0x26
 800b884:	f000 fb1c 	bl	800bec0 <HAL_NVIC_EnableIRQ>
}
 800b888:	bf00      	nop
 800b88a:	3730      	adds	r7, #48	; 0x30
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	40011000 	.word	0x40011000
 800b894:	40023800 	.word	0x40023800
 800b898:	40020000 	.word	0x40020000
 800b89c:	40004400 	.word	0x40004400

0800b8a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08c      	sub	sp, #48	; 0x30
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	60bb      	str	r3, [r7, #8]
 800b8b4:	4b2e      	ldr	r3, [pc, #184]	; (800b970 <HAL_InitTick+0xd0>)
 800b8b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8b8:	4a2d      	ldr	r2, [pc, #180]	; (800b970 <HAL_InitTick+0xd0>)
 800b8ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8be:	6453      	str	r3, [r2, #68]	; 0x44
 800b8c0:	4b2b      	ldr	r3, [pc, #172]	; (800b970 <HAL_InitTick+0xd0>)
 800b8c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8c8:	60bb      	str	r3, [r7, #8]
 800b8ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b8cc:	f107 020c 	add.w	r2, r7, #12
 800b8d0:	f107 0310 	add.w	r3, r7, #16
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f003 fe46 	bl	800f568 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800b8dc:	f003 fe30 	bl	800f540 <HAL_RCC_GetPCLK2Freq>
 800b8e0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	4a23      	ldr	r2, [pc, #140]	; (800b974 <HAL_InitTick+0xd4>)
 800b8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ea:	0c9b      	lsrs	r3, r3, #18
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800b8f0:	4b21      	ldr	r3, [pc, #132]	; (800b978 <HAL_InitTick+0xd8>)
 800b8f2:	4a22      	ldr	r2, [pc, #136]	; (800b97c <HAL_InitTick+0xdc>)
 800b8f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800b8f6:	4b20      	ldr	r3, [pc, #128]	; (800b978 <HAL_InitTick+0xd8>)
 800b8f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b8fc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800b8fe:	4a1e      	ldr	r2, [pc, #120]	; (800b978 <HAL_InitTick+0xd8>)
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800b904:	4b1c      	ldr	r3, [pc, #112]	; (800b978 <HAL_InitTick+0xd8>)
 800b906:	2200      	movs	r2, #0
 800b908:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b90a:	4b1b      	ldr	r3, [pc, #108]	; (800b978 <HAL_InitTick+0xd8>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b910:	4b19      	ldr	r3, [pc, #100]	; (800b978 <HAL_InitTick+0xd8>)
 800b912:	2200      	movs	r2, #0
 800b914:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800b916:	4818      	ldr	r0, [pc, #96]	; (800b978 <HAL_InitTick+0xd8>)
 800b918:	f004 fb5a 	bl	800ffd0 <HAL_TIM_Base_Init>
 800b91c:	4603      	mov	r3, r0
 800b91e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800b922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b926:	2b00      	cmp	r3, #0
 800b928:	d11b      	bne.n	800b962 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800b92a:	4813      	ldr	r0, [pc, #76]	; (800b978 <HAL_InitTick+0xd8>)
 800b92c:	f004 fba0 	bl	8010070 <HAL_TIM_Base_Start_IT>
 800b930:	4603      	mov	r3, r0
 800b932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800b936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d111      	bne.n	800b962 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800b93e:	2019      	movs	r0, #25
 800b940:	f000 fabe 	bl	800bec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b0f      	cmp	r3, #15
 800b948:	d808      	bhi.n	800b95c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800b94a:	2200      	movs	r2, #0
 800b94c:	6879      	ldr	r1, [r7, #4]
 800b94e:	2019      	movs	r0, #25
 800b950:	f000 fa9a 	bl	800be88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b954:	4a0a      	ldr	r2, [pc, #40]	; (800b980 <HAL_InitTick+0xe0>)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	e002      	b.n	800b962 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800b962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b966:	4618      	mov	r0, r3
 800b968:	3730      	adds	r7, #48	; 0x30
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	40023800 	.word	0x40023800
 800b974:	431bde83 	.word	0x431bde83
 800b978:	200023a8 	.word	0x200023a8
 800b97c:	40014400 	.word	0x40014400
 800b980:	20000314 	.word	0x20000314

0800b984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b988:	e7fe      	b.n	800b988 <NMI_Handler+0x4>

0800b98a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b98a:	b480      	push	{r7}
 800b98c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b98e:	e7fe      	b.n	800b98e <HardFault_Handler+0x4>

0800b990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b990:	b480      	push	{r7}
 800b992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b994:	e7fe      	b.n	800b994 <MemManage_Handler+0x4>

0800b996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b996:	b480      	push	{r7}
 800b998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b99a:	e7fe      	b.n	800b99a <BusFault_Handler+0x4>

0800b99c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b9a0:	e7fe      	b.n	800b9a0 <UsageFault_Handler+0x4>

0800b9a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b9a6:	bf00      	nop
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800b9b4:	4802      	ldr	r0, [pc, #8]	; (800b9c0 <RTC_WKUP_IRQHandler+0x10>)
 800b9b6:	f004 fab5 	bl	800ff24 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800b9ba:	bf00      	nop
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20002258 	.word	0x20002258

0800b9c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b9c8:	4803      	ldr	r0, [pc, #12]	; (800b9d8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800b9ca:	f004 fbb3 	bl	8010134 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800b9ce:	4803      	ldr	r0, [pc, #12]	; (800b9dc <TIM1_UP_TIM10_IRQHandler+0x18>)
 800b9d0:	f004 fbb0 	bl	8010134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//  usr_isr_tim1_up();	// SK ADD
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800b9d4:	bf00      	nop
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	20002278 	.word	0x20002278
 800b9dc:	200023a8 	.word	0x200023a8

0800b9e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b9e4:	4803      	ldr	r0, [pc, #12]	; (800b9f4 <TIM2_IRQHandler+0x14>)
 800b9e6:	f004 fba5 	bl	8010134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  usr_isr_tim1_up();	// SK ADD
 800b9ea:	f7f6 fa15 	bl	8001e18 <usr_isr_tim1_up>

  /* USER CODE END TIM2_IRQn 1 */
}
 800b9ee:	bf00      	nop
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	200022c0 	.word	0x200022c0

0800b9f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800b9fc:	4802      	ldr	r0, [pc, #8]	; (800ba08 <I2C1_EV_IRQHandler+0x10>)
 800b9fe:	f001 f913 	bl	800cc28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800ba02:	bf00      	nop
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20002204 	.word	0x20002204

0800ba0c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800ba10:	4802      	ldr	r0, [pc, #8]	; (800ba1c <I2C1_ER_IRQHandler+0x10>)
 800ba12:	f001 fa7a 	bl	800cf0a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800ba16:	bf00      	nop
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	20002204 	.word	0x20002204

0800ba20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ba24:	4802      	ldr	r0, [pc, #8]	; (800ba30 <USART1_IRQHandler+0x10>)
 800ba26:	f005 f829 	bl	8010a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ba2a:	bf00      	nop
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	20002308 	.word	0x20002308

0800ba34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ba38:	4802      	ldr	r0, [pc, #8]	; (800ba44 <USART2_IRQHandler+0x10>)
 800ba3a:	f005 f81f 	bl	8010a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ba3e:	bf00      	nop
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	2000234c 	.word	0x2000234c

0800ba48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	af00      	add	r7, sp, #0
  return 1;
 800ba4c:	2301      	movs	r3, #1
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <_kill>:

int _kill(int pid, int sig)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800ba62:	f008 ffdf 	bl	8014a24 <__errno>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2216      	movs	r2, #22
 800ba6a:	601a      	str	r2, [r3, #0]
  return -1;
 800ba6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <_exit>:

void _exit (int status)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ba80:	f04f 31ff 	mov.w	r1, #4294967295
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff ffe7 	bl	800ba58 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ba8a:	e7fe      	b.n	800ba8a <_exit+0x12>

0800ba8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba98:	2300      	movs	r3, #0
 800ba9a:	617b      	str	r3, [r7, #20]
 800ba9c:	e00a      	b.n	800bab4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ba9e:	f3af 8000 	nop.w
 800baa2:	4601      	mov	r1, r0
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	1c5a      	adds	r2, r3, #1
 800baa8:	60ba      	str	r2, [r7, #8]
 800baaa:	b2ca      	uxtb	r2, r1
 800baac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	3301      	adds	r3, #1
 800bab2:	617b      	str	r3, [r7, #20]
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	429a      	cmp	r2, r3
 800baba:	dbf0      	blt.n	800ba9e <_read+0x12>
  }

  return len;
 800babc:	687b      	ldr	r3, [r7, #4]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3718      	adds	r7, #24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b086      	sub	sp, #24
 800baca:	af00      	add	r7, sp, #0
 800bacc:	60f8      	str	r0, [r7, #12]
 800bace:	60b9      	str	r1, [r7, #8]
 800bad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bad2:	2300      	movs	r3, #0
 800bad4:	617b      	str	r3, [r7, #20]
 800bad6:	e009      	b.n	800baec <_write+0x26>
  {
    __io_putchar(*ptr++);
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	1c5a      	adds	r2, r3, #1
 800badc:	60ba      	str	r2, [r7, #8]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	3301      	adds	r3, #1
 800baea:	617b      	str	r3, [r7, #20]
 800baec:	697a      	ldr	r2, [r7, #20]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	dbf1      	blt.n	800bad8 <_write+0x12>
  }
  return len;
 800baf4:	687b      	ldr	r3, [r7, #4]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <_close>:

int _close(int file)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b083      	sub	sp, #12
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800bb06:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bb26:	605a      	str	r2, [r3, #4]
  return 0;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	370c      	adds	r7, #12
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <_isatty>:

int _isatty(int file)
{
 800bb36:	b480      	push	{r7}
 800bb38:	b083      	sub	sp, #12
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800bb3e:	2301      	movs	r3, #1
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
	...

0800bb68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bb70:	4a14      	ldr	r2, [pc, #80]	; (800bbc4 <_sbrk+0x5c>)
 800bb72:	4b15      	ldr	r3, [pc, #84]	; (800bbc8 <_sbrk+0x60>)
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bb7c:	4b13      	ldr	r3, [pc, #76]	; (800bbcc <_sbrk+0x64>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d102      	bne.n	800bb8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bb84:	4b11      	ldr	r3, [pc, #68]	; (800bbcc <_sbrk+0x64>)
 800bb86:	4a12      	ldr	r2, [pc, #72]	; (800bbd0 <_sbrk+0x68>)
 800bb88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bb8a:	4b10      	ldr	r3, [pc, #64]	; (800bbcc <_sbrk+0x64>)
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4413      	add	r3, r2
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d207      	bcs.n	800bba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bb98:	f008 ff44 	bl	8014a24 <__errno>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	220c      	movs	r2, #12
 800bba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bba2:	f04f 33ff 	mov.w	r3, #4294967295
 800bba6:	e009      	b.n	800bbbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bba8:	4b08      	ldr	r3, [pc, #32]	; (800bbcc <_sbrk+0x64>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bbae:	4b07      	ldr	r3, [pc, #28]	; (800bbcc <_sbrk+0x64>)
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	4a05      	ldr	r2, [pc, #20]	; (800bbcc <_sbrk+0x64>)
 800bbb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bbba:	68fb      	ldr	r3, [r7, #12]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3718      	adds	r7, #24
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	20018000 	.word	0x20018000
 800bbc8:	00000400 	.word	0x00000400
 800bbcc:	200023f0 	.word	0x200023f0
 800bbd0:	20006d58 	.word	0x20006d58

0800bbd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bbd8:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <SystemInit+0x20>)
 800bbda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbde:	4a05      	ldr	r2, [pc, #20]	; (800bbf4 <SystemInit+0x20>)
 800bbe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800bbe8:	bf00      	nop
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	e000ed00 	.word	0xe000ed00

0800bbf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800bbf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bc30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800bbfc:	480d      	ldr	r0, [pc, #52]	; (800bc34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800bbfe:	490e      	ldr	r1, [pc, #56]	; (800bc38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800bc00:	4a0e      	ldr	r2, [pc, #56]	; (800bc3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800bc02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bc04:	e002      	b.n	800bc0c <LoopCopyDataInit>

0800bc06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bc06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bc08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bc0a:	3304      	adds	r3, #4

0800bc0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bc0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bc0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bc10:	d3f9      	bcc.n	800bc06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bc12:	4a0b      	ldr	r2, [pc, #44]	; (800bc40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800bc14:	4c0b      	ldr	r4, [pc, #44]	; (800bc44 <LoopFillZerobss+0x26>)
  movs r3, #0
 800bc16:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bc18:	e001      	b.n	800bc1e <LoopFillZerobss>

0800bc1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bc1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bc1c:	3204      	adds	r2, #4

0800bc1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bc1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bc20:	d3fb      	bcc.n	800bc1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800bc22:	f7ff ffd7 	bl	800bbd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bc26:	f008 ff03 	bl	8014a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bc2a:	f7ff f93b 	bl	800aea4 <main>
  bx  lr    
 800bc2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800bc30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800bc34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bc38:	200004f0 	.word	0x200004f0
  ldr r2, =_sidata
 800bc3c:	0801aad8 	.word	0x0801aad8
  ldr r2, =_sbss
 800bc40:	200004f0 	.word	0x200004f0
  ldr r4, =_ebss
 800bc44:	20006d58 	.word	0x20006d58

0800bc48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bc48:	e7fe      	b.n	800bc48 <ADC_IRQHandler>
	...

0800bc4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bc50:	4b0e      	ldr	r3, [pc, #56]	; (800bc8c <HAL_Init+0x40>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a0d      	ldr	r2, [pc, #52]	; (800bc8c <HAL_Init+0x40>)
 800bc56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bc5c:	4b0b      	ldr	r3, [pc, #44]	; (800bc8c <HAL_Init+0x40>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a0a      	ldr	r2, [pc, #40]	; (800bc8c <HAL_Init+0x40>)
 800bc62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bc66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bc68:	4b08      	ldr	r3, [pc, #32]	; (800bc8c <HAL_Init+0x40>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a07      	ldr	r2, [pc, #28]	; (800bc8c <HAL_Init+0x40>)
 800bc6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bc74:	2003      	movs	r0, #3
 800bc76:	f000 f8fc 	bl	800be72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bc7a:	200f      	movs	r0, #15
 800bc7c:	f7ff fe10 	bl	800b8a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bc80:	f7ff fc86 	bl	800b590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	40023c00 	.word	0x40023c00

0800bc90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bc90:	b480      	push	{r7}
 800bc92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bc94:	4b06      	ldr	r3, [pc, #24]	; (800bcb0 <HAL_IncTick+0x20>)
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	4b06      	ldr	r3, [pc, #24]	; (800bcb4 <HAL_IncTick+0x24>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4413      	add	r3, r2
 800bca0:	4a04      	ldr	r2, [pc, #16]	; (800bcb4 <HAL_IncTick+0x24>)
 800bca2:	6013      	str	r3, [r2, #0]
}
 800bca4:	bf00      	nop
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	20000318 	.word	0x20000318
 800bcb4:	200023f4 	.word	0x200023f4

0800bcb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
  return uwTick;
 800bcbc:	4b03      	ldr	r3, [pc, #12]	; (800bccc <HAL_GetTick+0x14>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	200023f4 	.word	0x200023f4

0800bcd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bcd8:	f7ff ffee 	bl	800bcb8 <HAL_GetTick>
 800bcdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce8:	d005      	beq.n	800bcf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bcea:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <HAL_Delay+0x44>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bcf6:	bf00      	nop
 800bcf8:	f7ff ffde 	bl	800bcb8 <HAL_GetTick>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d8f7      	bhi.n	800bcf8 <HAL_Delay+0x28>
  {
  }
}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20000318 	.word	0x20000318

0800bd18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f003 0307 	and.w	r3, r3, #7
 800bd26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bd28:	4b0c      	ldr	r3, [pc, #48]	; (800bd5c <__NVIC_SetPriorityGrouping+0x44>)
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bd34:	4013      	ands	r3, r2
 800bd36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bd40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bd44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bd4a:	4a04      	ldr	r2, [pc, #16]	; (800bd5c <__NVIC_SetPriorityGrouping+0x44>)
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	60d3      	str	r3, [r2, #12]
}
 800bd50:	bf00      	nop
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	e000ed00 	.word	0xe000ed00

0800bd60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bd60:	b480      	push	{r7}
 800bd62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bd64:	4b04      	ldr	r3, [pc, #16]	; (800bd78 <__NVIC_GetPriorityGrouping+0x18>)
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	0a1b      	lsrs	r3, r3, #8
 800bd6a:	f003 0307 	and.w	r3, r3, #7
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	e000ed00 	.word	0xe000ed00

0800bd7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	db0b      	blt.n	800bda6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bd8e:	79fb      	ldrb	r3, [r7, #7]
 800bd90:	f003 021f 	and.w	r2, r3, #31
 800bd94:	4907      	ldr	r1, [pc, #28]	; (800bdb4 <__NVIC_EnableIRQ+0x38>)
 800bd96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd9a:	095b      	lsrs	r3, r3, #5
 800bd9c:	2001      	movs	r0, #1
 800bd9e:	fa00 f202 	lsl.w	r2, r0, r2
 800bda2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bda6:	bf00      	nop
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	e000e100 	.word	0xe000e100

0800bdb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	6039      	str	r1, [r7, #0]
 800bdc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	db0a      	blt.n	800bde2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	490c      	ldr	r1, [pc, #48]	; (800be04 <__NVIC_SetPriority+0x4c>)
 800bdd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdd6:	0112      	lsls	r2, r2, #4
 800bdd8:	b2d2      	uxtb	r2, r2
 800bdda:	440b      	add	r3, r1
 800bddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bde0:	e00a      	b.n	800bdf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	b2da      	uxtb	r2, r3
 800bde6:	4908      	ldr	r1, [pc, #32]	; (800be08 <__NVIC_SetPriority+0x50>)
 800bde8:	79fb      	ldrb	r3, [r7, #7]
 800bdea:	f003 030f 	and.w	r3, r3, #15
 800bdee:	3b04      	subs	r3, #4
 800bdf0:	0112      	lsls	r2, r2, #4
 800bdf2:	b2d2      	uxtb	r2, r2
 800bdf4:	440b      	add	r3, r1
 800bdf6:	761a      	strb	r2, [r3, #24]
}
 800bdf8:	bf00      	nop
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr
 800be04:	e000e100 	.word	0xe000e100
 800be08:	e000ed00 	.word	0xe000ed00

0800be0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b089      	sub	sp, #36	; 0x24
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f003 0307 	and.w	r3, r3, #7
 800be1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	f1c3 0307 	rsb	r3, r3, #7
 800be26:	2b04      	cmp	r3, #4
 800be28:	bf28      	it	cs
 800be2a:	2304      	movcs	r3, #4
 800be2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	3304      	adds	r3, #4
 800be32:	2b06      	cmp	r3, #6
 800be34:	d902      	bls.n	800be3c <NVIC_EncodePriority+0x30>
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	3b03      	subs	r3, #3
 800be3a:	e000      	b.n	800be3e <NVIC_EncodePriority+0x32>
 800be3c:	2300      	movs	r3, #0
 800be3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be40:	f04f 32ff 	mov.w	r2, #4294967295
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	fa02 f303 	lsl.w	r3, r2, r3
 800be4a:	43da      	mvns	r2, r3
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	401a      	ands	r2, r3
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800be54:	f04f 31ff 	mov.w	r1, #4294967295
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	fa01 f303 	lsl.w	r3, r1, r3
 800be5e:	43d9      	mvns	r1, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be64:	4313      	orrs	r3, r2
         );
}
 800be66:	4618      	mov	r0, r3
 800be68:	3724      	adds	r7, #36	; 0x24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b082      	sub	sp, #8
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7ff ff4c 	bl	800bd18 <__NVIC_SetPriorityGrouping>
}
 800be80:	bf00      	nop
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	4603      	mov	r3, r0
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
 800be94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800be96:	2300      	movs	r3, #0
 800be98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800be9a:	f7ff ff61 	bl	800bd60 <__NVIC_GetPriorityGrouping>
 800be9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	68b9      	ldr	r1, [r7, #8]
 800bea4:	6978      	ldr	r0, [r7, #20]
 800bea6:	f7ff ffb1 	bl	800be0c <NVIC_EncodePriority>
 800beaa:	4602      	mov	r2, r0
 800beac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beb0:	4611      	mov	r1, r2
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff ff80 	bl	800bdb8 <__NVIC_SetPriority>
}
 800beb8:	bf00      	nop
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800beca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff ff54 	bl	800bd7c <__NVIC_EnableIRQ>
}
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bee8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800beea:	f7ff fee5 	bl	800bcb8 <HAL_GetTick>
 800beee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d008      	beq.n	800bf0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2280      	movs	r2, #128	; 0x80
 800bf00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e052      	b.n	800bfb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f022 0216 	bic.w	r2, r2, #22
 800bf1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	695a      	ldr	r2, [r3, #20]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d103      	bne.n	800bf3e <HAL_DMA_Abort+0x62>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d007      	beq.n	800bf4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f022 0208 	bic.w	r2, r2, #8
 800bf4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f022 0201 	bic.w	r2, r2, #1
 800bf5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bf5e:	e013      	b.n	800bf88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bf60:	f7ff feaa 	bl	800bcb8 <HAL_GetTick>
 800bf64:	4602      	mov	r2, r0
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	2b05      	cmp	r3, #5
 800bf6c:	d90c      	bls.n	800bf88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2220      	movs	r2, #32
 800bf72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2203      	movs	r2, #3
 800bf78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e015      	b.n	800bfb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f003 0301 	and.w	r3, r3, #1
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1e4      	bne.n	800bf60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf9a:	223f      	movs	r2, #63	; 0x3f
 800bf9c:	409a      	lsls	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d004      	beq.n	800bfda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2280      	movs	r2, #128	; 0x80
 800bfd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e00c      	b.n	800bff4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2205      	movs	r2, #5
 800bfde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f022 0201 	bic.w	r2, r2, #1
 800bff0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c00e:	b2db      	uxtb	r3, r3
}
 800c010:	4618      	mov	r0, r3
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b089      	sub	sp, #36	; 0x24
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c026:	2300      	movs	r3, #0
 800c028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c02e:	2300      	movs	r3, #0
 800c030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c032:	2300      	movs	r3, #0
 800c034:	61fb      	str	r3, [r7, #28]
 800c036:	e159      	b.n	800c2ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c038:	2201      	movs	r2, #1
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	fa02 f303 	lsl.w	r3, r2, r3
 800c040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	4013      	ands	r3, r2
 800c04a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c04c:	693a      	ldr	r2, [r7, #16]
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	429a      	cmp	r2, r3
 800c052:	f040 8148 	bne.w	800c2e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f003 0303 	and.w	r3, r3, #3
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d005      	beq.n	800c06e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d130      	bne.n	800c0d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	005b      	lsls	r3, r3, #1
 800c078:	2203      	movs	r2, #3
 800c07a:	fa02 f303 	lsl.w	r3, r2, r3
 800c07e:	43db      	mvns	r3, r3
 800c080:	69ba      	ldr	r2, [r7, #24]
 800c082:	4013      	ands	r3, r2
 800c084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	68da      	ldr	r2, [r3, #12]
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	005b      	lsls	r3, r3, #1
 800c08e:	fa02 f303 	lsl.w	r3, r2, r3
 800c092:	69ba      	ldr	r2, [r7, #24]
 800c094:	4313      	orrs	r3, r2
 800c096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	69ba      	ldr	r2, [r7, #24]
 800c09c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ac:	43db      	mvns	r3, r3
 800c0ae:	69ba      	ldr	r2, [r7, #24]
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	091b      	lsrs	r3, r3, #4
 800c0ba:	f003 0201 	and.w	r2, r3, #1
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c4:	69ba      	ldr	r2, [r7, #24]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	69ba      	ldr	r2, [r7, #24]
 800c0ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	f003 0303 	and.w	r3, r3, #3
 800c0d8:	2b03      	cmp	r3, #3
 800c0da:	d017      	beq.n	800c10c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	2203      	movs	r2, #3
 800c0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ec:	43db      	mvns	r3, r3
 800c0ee:	69ba      	ldr	r2, [r7, #24]
 800c0f0:	4013      	ands	r3, r2
 800c0f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	689a      	ldr	r2, [r3, #8]
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	005b      	lsls	r3, r3, #1
 800c0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c100:	69ba      	ldr	r2, [r7, #24]
 800c102:	4313      	orrs	r3, r2
 800c104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	69ba      	ldr	r2, [r7, #24]
 800c10a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	f003 0303 	and.w	r3, r3, #3
 800c114:	2b02      	cmp	r3, #2
 800c116:	d123      	bne.n	800c160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	08da      	lsrs	r2, r3, #3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	3208      	adds	r2, #8
 800c120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	f003 0307 	and.w	r3, r3, #7
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	220f      	movs	r2, #15
 800c130:	fa02 f303 	lsl.w	r3, r2, r3
 800c134:	43db      	mvns	r3, r3
 800c136:	69ba      	ldr	r2, [r7, #24]
 800c138:	4013      	ands	r3, r2
 800c13a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	691a      	ldr	r2, [r3, #16]
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	fa02 f303 	lsl.w	r3, r2, r3
 800c14c:	69ba      	ldr	r2, [r7, #24]
 800c14e:	4313      	orrs	r3, r2
 800c150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	08da      	lsrs	r2, r3, #3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	3208      	adds	r2, #8
 800c15a:	69b9      	ldr	r1, [r7, #24]
 800c15c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	005b      	lsls	r3, r3, #1
 800c16a:	2203      	movs	r2, #3
 800c16c:	fa02 f303 	lsl.w	r3, r2, r3
 800c170:	43db      	mvns	r3, r3
 800c172:	69ba      	ldr	r2, [r7, #24]
 800c174:	4013      	ands	r3, r2
 800c176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	f003 0203 	and.w	r2, r3, #3
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	fa02 f303 	lsl.w	r3, r2, r3
 800c188:	69ba      	ldr	r2, [r7, #24]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f000 80a2 	beq.w	800c2e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	4b57      	ldr	r3, [pc, #348]	; (800c304 <HAL_GPIO_Init+0x2e8>)
 800c1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1aa:	4a56      	ldr	r2, [pc, #344]	; (800c304 <HAL_GPIO_Init+0x2e8>)
 800c1ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1b0:	6453      	str	r3, [r2, #68]	; 0x44
 800c1b2:	4b54      	ldr	r3, [pc, #336]	; (800c304 <HAL_GPIO_Init+0x2e8>)
 800c1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1ba:	60fb      	str	r3, [r7, #12]
 800c1bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c1be:	4a52      	ldr	r2, [pc, #328]	; (800c308 <HAL_GPIO_Init+0x2ec>)
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	089b      	lsrs	r3, r3, #2
 800c1c4:	3302      	adds	r3, #2
 800c1c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	f003 0303 	and.w	r3, r3, #3
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	220f      	movs	r2, #15
 800c1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1da:	43db      	mvns	r3, r3
 800c1dc:	69ba      	ldr	r2, [r7, #24]
 800c1de:	4013      	ands	r3, r2
 800c1e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4a49      	ldr	r2, [pc, #292]	; (800c30c <HAL_GPIO_Init+0x2f0>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d019      	beq.n	800c21e <HAL_GPIO_Init+0x202>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4a48      	ldr	r2, [pc, #288]	; (800c310 <HAL_GPIO_Init+0x2f4>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d013      	beq.n	800c21a <HAL_GPIO_Init+0x1fe>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4a47      	ldr	r2, [pc, #284]	; (800c314 <HAL_GPIO_Init+0x2f8>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d00d      	beq.n	800c216 <HAL_GPIO_Init+0x1fa>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4a46      	ldr	r2, [pc, #280]	; (800c318 <HAL_GPIO_Init+0x2fc>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d007      	beq.n	800c212 <HAL_GPIO_Init+0x1f6>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a45      	ldr	r2, [pc, #276]	; (800c31c <HAL_GPIO_Init+0x300>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d101      	bne.n	800c20e <HAL_GPIO_Init+0x1f2>
 800c20a:	2304      	movs	r3, #4
 800c20c:	e008      	b.n	800c220 <HAL_GPIO_Init+0x204>
 800c20e:	2307      	movs	r3, #7
 800c210:	e006      	b.n	800c220 <HAL_GPIO_Init+0x204>
 800c212:	2303      	movs	r3, #3
 800c214:	e004      	b.n	800c220 <HAL_GPIO_Init+0x204>
 800c216:	2302      	movs	r3, #2
 800c218:	e002      	b.n	800c220 <HAL_GPIO_Init+0x204>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e000      	b.n	800c220 <HAL_GPIO_Init+0x204>
 800c21e:	2300      	movs	r3, #0
 800c220:	69fa      	ldr	r2, [r7, #28]
 800c222:	f002 0203 	and.w	r2, r2, #3
 800c226:	0092      	lsls	r2, r2, #2
 800c228:	4093      	lsls	r3, r2
 800c22a:	69ba      	ldr	r2, [r7, #24]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c230:	4935      	ldr	r1, [pc, #212]	; (800c308 <HAL_GPIO_Init+0x2ec>)
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	089b      	lsrs	r3, r3, #2
 800c236:	3302      	adds	r3, #2
 800c238:	69ba      	ldr	r2, [r7, #24]
 800c23a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c23e:	4b38      	ldr	r3, [pc, #224]	; (800c320 <HAL_GPIO_Init+0x304>)
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	43db      	mvns	r3, r3
 800c248:	69ba      	ldr	r2, [r7, #24]
 800c24a:	4013      	ands	r3, r2
 800c24c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c256:	2b00      	cmp	r3, #0
 800c258:	d003      	beq.n	800c262 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800c25a:	69ba      	ldr	r2, [r7, #24]
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	4313      	orrs	r3, r2
 800c260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c262:	4a2f      	ldr	r2, [pc, #188]	; (800c320 <HAL_GPIO_Init+0x304>)
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c268:	4b2d      	ldr	r3, [pc, #180]	; (800c320 <HAL_GPIO_Init+0x304>)
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	43db      	mvns	r3, r3
 800c272:	69ba      	ldr	r2, [r7, #24]
 800c274:	4013      	ands	r3, r2
 800c276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c280:	2b00      	cmp	r3, #0
 800c282:	d003      	beq.n	800c28c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800c284:	69ba      	ldr	r2, [r7, #24]
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	4313      	orrs	r3, r2
 800c28a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c28c:	4a24      	ldr	r2, [pc, #144]	; (800c320 <HAL_GPIO_Init+0x304>)
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c292:	4b23      	ldr	r3, [pc, #140]	; (800c320 <HAL_GPIO_Init+0x304>)
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	43db      	mvns	r3, r3
 800c29c:	69ba      	ldr	r2, [r7, #24]
 800c29e:	4013      	ands	r3, r2
 800c2a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800c2ae:	69ba      	ldr	r2, [r7, #24]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c2b6:	4a1a      	ldr	r2, [pc, #104]	; (800c320 <HAL_GPIO_Init+0x304>)
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c2bc:	4b18      	ldr	r3, [pc, #96]	; (800c320 <HAL_GPIO_Init+0x304>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	43db      	mvns	r3, r3
 800c2c6:	69ba      	ldr	r2, [r7, #24]
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d003      	beq.n	800c2e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800c2d8:	69ba      	ldr	r2, [r7, #24]
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c2e0:	4a0f      	ldr	r2, [pc, #60]	; (800c320 <HAL_GPIO_Init+0x304>)
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	61fb      	str	r3, [r7, #28]
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	2b0f      	cmp	r3, #15
 800c2f0:	f67f aea2 	bls.w	800c038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c2f4:	bf00      	nop
 800c2f6:	bf00      	nop
 800c2f8:	3724      	adds	r7, #36	; 0x24
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	40023800 	.word	0x40023800
 800c308:	40013800 	.word	0x40013800
 800c30c:	40020000 	.word	0x40020000
 800c310:	40020400 	.word	0x40020400
 800c314:	40020800 	.word	0x40020800
 800c318:	40020c00 	.word	0x40020c00
 800c31c:	40021000 	.word	0x40021000
 800c320:	40013c00 	.word	0x40013c00

0800c324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	807b      	strh	r3, [r7, #2]
 800c330:	4613      	mov	r3, r2
 800c332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c334:	787b      	ldrb	r3, [r7, #1]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d003      	beq.n	800c342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c33a:	887a      	ldrh	r2, [r7, #2]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c340:	e003      	b.n	800c34a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c342:	887b      	ldrh	r3, [r7, #2]
 800c344:	041a      	lsls	r2, r3, #16
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	619a      	str	r2, [r3, #24]
}
 800c34a:	bf00      	nop
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
	...

0800c358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e12b      	b.n	800c5c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c370:	b2db      	uxtb	r3, r3
 800c372:	2b00      	cmp	r3, #0
 800c374:	d106      	bne.n	800c384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f7ff f932 	bl	800b5e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2224      	movs	r2, #36	; 0x24
 800c388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f022 0201 	bic.w	r2, r2, #1
 800c39a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c3aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c3ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c3bc:	f003 f8ac 	bl	800f518 <HAL_RCC_GetPCLK1Freq>
 800c3c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	4a81      	ldr	r2, [pc, #516]	; (800c5cc <HAL_I2C_Init+0x274>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d807      	bhi.n	800c3dc <HAL_I2C_Init+0x84>
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4a80      	ldr	r2, [pc, #512]	; (800c5d0 <HAL_I2C_Init+0x278>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	bf94      	ite	ls
 800c3d4:	2301      	movls	r3, #1
 800c3d6:	2300      	movhi	r3, #0
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	e006      	b.n	800c3ea <HAL_I2C_Init+0x92>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	4a7d      	ldr	r2, [pc, #500]	; (800c5d4 <HAL_I2C_Init+0x27c>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	bf94      	ite	ls
 800c3e4:	2301      	movls	r3, #1
 800c3e6:	2300      	movhi	r3, #0
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d001      	beq.n	800c3f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e0e7      	b.n	800c5c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	4a78      	ldr	r2, [pc, #480]	; (800c5d8 <HAL_I2C_Init+0x280>)
 800c3f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3fa:	0c9b      	lsrs	r3, r3, #18
 800c3fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	430a      	orrs	r2, r1
 800c410:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6a1b      	ldr	r3, [r3, #32]
 800c418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	4a6a      	ldr	r2, [pc, #424]	; (800c5cc <HAL_I2C_Init+0x274>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d802      	bhi.n	800c42c <HAL_I2C_Init+0xd4>
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	3301      	adds	r3, #1
 800c42a:	e009      	b.n	800c440 <HAL_I2C_Init+0xe8>
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c432:	fb02 f303 	mul.w	r3, r2, r3
 800c436:	4a69      	ldr	r2, [pc, #420]	; (800c5dc <HAL_I2C_Init+0x284>)
 800c438:	fba2 2303 	umull	r2, r3, r2, r3
 800c43c:	099b      	lsrs	r3, r3, #6
 800c43e:	3301      	adds	r3, #1
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	6812      	ldr	r2, [r2, #0]
 800c444:	430b      	orrs	r3, r1
 800c446:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	69db      	ldr	r3, [r3, #28]
 800c44e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c452:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	495c      	ldr	r1, [pc, #368]	; (800c5cc <HAL_I2C_Init+0x274>)
 800c45c:	428b      	cmp	r3, r1
 800c45e:	d819      	bhi.n	800c494 <HAL_I2C_Init+0x13c>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	1e59      	subs	r1, r3, #1
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c46e:	1c59      	adds	r1, r3, #1
 800c470:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c474:	400b      	ands	r3, r1
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00a      	beq.n	800c490 <HAL_I2C_Init+0x138>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	1e59      	subs	r1, r3, #1
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	005b      	lsls	r3, r3, #1
 800c484:	fbb1 f3f3 	udiv	r3, r1, r3
 800c488:	3301      	adds	r3, #1
 800c48a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c48e:	e051      	b.n	800c534 <HAL_I2C_Init+0x1dc>
 800c490:	2304      	movs	r3, #4
 800c492:	e04f      	b.n	800c534 <HAL_I2C_Init+0x1dc>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d111      	bne.n	800c4c0 <HAL_I2C_Init+0x168>
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	1e58      	subs	r0, r3, #1
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6859      	ldr	r1, [r3, #4]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	005b      	lsls	r3, r3, #1
 800c4a8:	440b      	add	r3, r1
 800c4aa:	fbb0 f3f3 	udiv	r3, r0, r3
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	bf0c      	ite	eq
 800c4b8:	2301      	moveq	r3, #1
 800c4ba:	2300      	movne	r3, #0
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	e012      	b.n	800c4e6 <HAL_I2C_Init+0x18e>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	1e58      	subs	r0, r3, #1
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6859      	ldr	r1, [r3, #4]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	440b      	add	r3, r1
 800c4ce:	0099      	lsls	r1, r3, #2
 800c4d0:	440b      	add	r3, r1
 800c4d2:	fbb0 f3f3 	udiv	r3, r0, r3
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	bf0c      	ite	eq
 800c4e0:	2301      	moveq	r3, #1
 800c4e2:	2300      	movne	r3, #0
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <HAL_I2C_Init+0x196>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e022      	b.n	800c534 <HAL_I2C_Init+0x1dc>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10e      	bne.n	800c514 <HAL_I2C_Init+0x1bc>
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	1e58      	subs	r0, r3, #1
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6859      	ldr	r1, [r3, #4]
 800c4fe:	460b      	mov	r3, r1
 800c500:	005b      	lsls	r3, r3, #1
 800c502:	440b      	add	r3, r1
 800c504:	fbb0 f3f3 	udiv	r3, r0, r3
 800c508:	3301      	adds	r3, #1
 800c50a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c50e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c512:	e00f      	b.n	800c534 <HAL_I2C_Init+0x1dc>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	1e58      	subs	r0, r3, #1
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6859      	ldr	r1, [r3, #4]
 800c51c:	460b      	mov	r3, r1
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	440b      	add	r3, r1
 800c522:	0099      	lsls	r1, r3, #2
 800c524:	440b      	add	r3, r1
 800c526:	fbb0 f3f3 	udiv	r3, r0, r3
 800c52a:	3301      	adds	r3, #1
 800c52c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	6809      	ldr	r1, [r1, #0]
 800c538:	4313      	orrs	r3, r2
 800c53a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	69da      	ldr	r2, [r3, #28]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a1b      	ldr	r3, [r3, #32]
 800c54e:	431a      	orrs	r2, r3
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	430a      	orrs	r2, r1
 800c556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c562:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	6911      	ldr	r1, [r2, #16]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	68d2      	ldr	r2, [r2, #12]
 800c56e:	4311      	orrs	r1, r2
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	6812      	ldr	r2, [r2, #0]
 800c574:	430b      	orrs	r3, r1
 800c576:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	695a      	ldr	r2, [r3, #20]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	699b      	ldr	r3, [r3, #24]
 800c58a:	431a      	orrs	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	430a      	orrs	r2, r1
 800c592:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f042 0201 	orr.w	r2, r2, #1
 800c5a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2220      	movs	r2, #32
 800c5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	000186a0 	.word	0x000186a0
 800c5d0:	001e847f 	.word	0x001e847f
 800c5d4:	003d08ff 	.word	0x003d08ff
 800c5d8:	431bde83 	.word	0x431bde83
 800c5dc:	10624dd3 	.word	0x10624dd3

0800c5e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af02      	add	r7, sp, #8
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	607a      	str	r2, [r7, #4]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	817b      	strh	r3, [r7, #10]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c5f4:	f7ff fb60 	bl	800bcb8 <HAL_GetTick>
 800c5f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b20      	cmp	r3, #32
 800c604:	f040 80e0 	bne.w	800c7c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	2319      	movs	r3, #25
 800c60e:	2201      	movs	r2, #1
 800c610:	4970      	ldr	r1, [pc, #448]	; (800c7d4 <HAL_I2C_Master_Transmit+0x1f4>)
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f002 f8e6 	bl	800e7e4 <I2C_WaitOnFlagUntilTimeout>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d001      	beq.n	800c622 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c61e:	2302      	movs	r3, #2
 800c620:	e0d3      	b.n	800c7ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d101      	bne.n	800c630 <HAL_I2C_Master_Transmit+0x50>
 800c62c:	2302      	movs	r3, #2
 800c62e:	e0cc      	b.n	800c7ca <HAL_I2C_Master_Transmit+0x1ea>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	2b01      	cmp	r3, #1
 800c644:	d007      	beq.n	800c656 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f042 0201 	orr.w	r2, r2, #1
 800c654:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c664:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2221      	movs	r2, #33	; 0x21
 800c66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2210      	movs	r2, #16
 800c672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2200      	movs	r2, #0
 800c67a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	893a      	ldrh	r2, [r7, #8]
 800c686:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	4a50      	ldr	r2, [pc, #320]	; (800c7d8 <HAL_I2C_Master_Transmit+0x1f8>)
 800c696:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c698:	8979      	ldrh	r1, [r7, #10]
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	6a3a      	ldr	r2, [r7, #32]
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f001 fea8 	bl	800e3f4 <I2C_MasterRequestWrite>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e08d      	b.n	800c7ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	613b      	str	r3, [r7, #16]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	613b      	str	r3, [r7, #16]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	613b      	str	r3, [r7, #16]
 800c6c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c6c4:	e066      	b.n	800c794 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	6a39      	ldr	r1, [r7, #32]
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	f002 f960 	bl	800e990 <I2C_WaitOnTXEFlagUntilTimeout>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00d      	beq.n	800c6f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6da:	2b04      	cmp	r3, #4
 800c6dc:	d107      	bne.n	800c6ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e06b      	b.n	800c7ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f6:	781a      	ldrb	r2, [r3, #0]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c702:	1c5a      	adds	r2, r3, #1
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	3b01      	subs	r3, #1
 800c710:	b29a      	uxth	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c71a:	3b01      	subs	r3, #1
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	695b      	ldr	r3, [r3, #20]
 800c728:	f003 0304 	and.w	r3, r3, #4
 800c72c:	2b04      	cmp	r3, #4
 800c72e:	d11b      	bne.n	800c768 <HAL_I2C_Master_Transmit+0x188>
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c734:	2b00      	cmp	r3, #0
 800c736:	d017      	beq.n	800c768 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73c:	781a      	ldrb	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c748:	1c5a      	adds	r2, r3, #1
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c752:	b29b      	uxth	r3, r3
 800c754:	3b01      	subs	r3, #1
 800c756:	b29a      	uxth	r2, r3
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c760:	3b01      	subs	r3, #1
 800c762:	b29a      	uxth	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c768:	697a      	ldr	r2, [r7, #20]
 800c76a:	6a39      	ldr	r1, [r7, #32]
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f002 f950 	bl	800ea12 <I2C_WaitOnBTFFlagUntilTimeout>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00d      	beq.n	800c794 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d107      	bne.n	800c790 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c78e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c790:	2301      	movs	r3, #1
 800c792:	e01a      	b.n	800c7ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d194      	bne.n	800c6c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2220      	movs	r2, #32
 800c7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	e000      	b.n	800c7ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c7c8:	2302      	movs	r3, #2
  }
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3718      	adds	r7, #24
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	00100002 	.word	0x00100002
 800c7d8:	ffff0000 	.word	0xffff0000

0800c7dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b08c      	sub	sp, #48	; 0x30
 800c7e0:	af02      	add	r7, sp, #8
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	607a      	str	r2, [r7, #4]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	817b      	strh	r3, [r7, #10]
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c7f0:	f7ff fa62 	bl	800bcb8 <HAL_GetTick>
 800c7f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	2b20      	cmp	r3, #32
 800c800:	f040 820b 	bne.w	800cc1a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	2319      	movs	r3, #25
 800c80a:	2201      	movs	r2, #1
 800c80c:	497c      	ldr	r1, [pc, #496]	; (800ca00 <HAL_I2C_Master_Receive+0x224>)
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f001 ffe8 	bl	800e7e4 <I2C_WaitOnFlagUntilTimeout>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800c81a:	2302      	movs	r3, #2
 800c81c:	e1fe      	b.n	800cc1c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c824:	2b01      	cmp	r3, #1
 800c826:	d101      	bne.n	800c82c <HAL_I2C_Master_Receive+0x50>
 800c828:	2302      	movs	r3, #2
 800c82a:	e1f7      	b.n	800cc1c <HAL_I2C_Master_Receive+0x440>
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d007      	beq.n	800c852 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f042 0201 	orr.w	r2, r2, #1
 800c850:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c860:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2222      	movs	r2, #34	; 0x22
 800c866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2210      	movs	r2, #16
 800c86e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2200      	movs	r2, #0
 800c876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	893a      	ldrh	r2, [r7, #8]
 800c882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c888:	b29a      	uxth	r2, r3
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4a5c      	ldr	r2, [pc, #368]	; (800ca04 <HAL_I2C_Master_Receive+0x228>)
 800c892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c894:	8979      	ldrh	r1, [r7, #10]
 800c896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f001 fe2c 	bl	800e4f8 <I2C_MasterRequestRead>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e1b8      	b.n	800cc1c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d113      	bne.n	800c8da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	623b      	str	r3, [r7, #32]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	623b      	str	r3, [r7, #32]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	699b      	ldr	r3, [r3, #24]
 800c8c4:	623b      	str	r3, [r7, #32]
 800c8c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8d6:	601a      	str	r2, [r3, #0]
 800c8d8:	e18c      	b.n	800cbf4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d11b      	bne.n	800c91a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	61fb      	str	r3, [r7, #28]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	61fb      	str	r3, [r7, #28]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	61fb      	str	r3, [r7, #28]
 800c906:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	e16c      	b.n	800cbf4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d11b      	bne.n	800c95a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c930:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c942:	2300      	movs	r3, #0
 800c944:	61bb      	str	r3, [r7, #24]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	695b      	ldr	r3, [r3, #20]
 800c94c:	61bb      	str	r3, [r7, #24]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	699b      	ldr	r3, [r3, #24]
 800c954:	61bb      	str	r3, [r7, #24]
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	e14c      	b.n	800cbf4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c96a:	2300      	movs	r3, #0
 800c96c:	617b      	str	r3, [r7, #20]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	617b      	str	r3, [r7, #20]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	617b      	str	r3, [r7, #20]
 800c97e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c980:	e138      	b.n	800cbf4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c986:	2b03      	cmp	r3, #3
 800c988:	f200 80f1 	bhi.w	800cb6e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c990:	2b01      	cmp	r3, #1
 800c992:	d123      	bne.n	800c9dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f002 f8ad 	bl	800eaf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d001      	beq.n	800c9a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e139      	b.n	800cc1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	691a      	ldr	r2, [r3, #16]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b2:	b2d2      	uxtb	r2, r2
 800c9b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c9da:	e10b      	b.n	800cbf4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	d14e      	bne.n	800ca82 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	4906      	ldr	r1, [pc, #24]	; (800ca08 <HAL_I2C_Master_Receive+0x22c>)
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f001 fef8 	bl	800e7e4 <I2C_WaitOnFlagUntilTimeout>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d008      	beq.n	800ca0c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e10e      	b.n	800cc1c <HAL_I2C_Master_Receive+0x440>
 800c9fe:	bf00      	nop
 800ca00:	00100002 	.word	0x00100002
 800ca04:	ffff0000 	.word	0xffff0000
 800ca08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	691a      	ldr	r2, [r3, #16]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca26:	b2d2      	uxtb	r2, r2
 800ca28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2e:	1c5a      	adds	r2, r3, #1
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	3b01      	subs	r3, #1
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	691a      	ldr	r2, [r3, #16]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca58:	b2d2      	uxtb	r2, r2
 800ca5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca60:	1c5a      	adds	r2, r3, #1
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ca80:	e0b8      	b.n	800cbf4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ca82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca84:	9300      	str	r3, [sp, #0]
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	2200      	movs	r2, #0
 800ca8a:	4966      	ldr	r1, [pc, #408]	; (800cc24 <HAL_I2C_Master_Receive+0x448>)
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f001 fea9 	bl	800e7e4 <I2C_WaitOnFlagUntilTimeout>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d001      	beq.n	800ca9c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e0bf      	b.n	800cc1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800caaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	691a      	ldr	r2, [r3, #16]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab6:	b2d2      	uxtb	r2, r2
 800cab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cac8:	3b01      	subs	r3, #1
 800caca:	b29a      	uxth	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	3b01      	subs	r3, #1
 800cad8:	b29a      	uxth	r2, r3
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae4:	2200      	movs	r2, #0
 800cae6:	494f      	ldr	r1, [pc, #316]	; (800cc24 <HAL_I2C_Master_Receive+0x448>)
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f001 fe7b 	bl	800e7e4 <I2C_WaitOnFlagUntilTimeout>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	e091      	b.n	800cc1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	691a      	ldr	r2, [r3, #16]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb12:	b2d2      	uxtb	r2, r2
 800cb14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1a:	1c5a      	adds	r2, r3, #1
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb24:	3b01      	subs	r3, #1
 800cb26:	b29a      	uxth	r2, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	3b01      	subs	r3, #1
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	691a      	ldr	r2, [r3, #16]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb44:	b2d2      	uxtb	r2, r2
 800cb46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4c:	1c5a      	adds	r2, r3, #1
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb56:	3b01      	subs	r3, #1
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	3b01      	subs	r3, #1
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cb6c:	e042      	b.n	800cbf4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cb6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb72:	68f8      	ldr	r0, [r7, #12]
 800cb74:	f001 ffc0 	bl	800eaf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e04c      	b.n	800cc1c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	691a      	ldr	r2, [r3, #16]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8c:	b2d2      	uxtb	r2, r2
 800cb8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb94:	1c5a      	adds	r2, r3, #1
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	3b01      	subs	r3, #1
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	695b      	ldr	r3, [r3, #20]
 800cbba:	f003 0304 	and.w	r3, r3, #4
 800cbbe:	2b04      	cmp	r3, #4
 800cbc0:	d118      	bne.n	800cbf4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	691a      	ldr	r2, [r3, #16]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbcc:	b2d2      	uxtb	r2, r2
 800cbce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd4:	1c5a      	adds	r2, r3, #1
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	3b01      	subs	r3, #1
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	f47f aec2 	bne.w	800c982 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2220      	movs	r2, #32
 800cc02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cc16:	2300      	movs	r3, #0
 800cc18:	e000      	b.n	800cc1c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800cc1a:	2302      	movs	r3, #2
  }
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3728      	adds	r7, #40	; 0x28
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	00010004 	.word	0x00010004

0800cc28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b088      	sub	sp, #32
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800cc30:	2300      	movs	r3, #0
 800cc32:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc40:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc48:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc50:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800cc52:	7bfb      	ldrb	r3, [r7, #15]
 800cc54:	2b10      	cmp	r3, #16
 800cc56:	d003      	beq.n	800cc60 <HAL_I2C_EV_IRQHandler+0x38>
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	2b40      	cmp	r3, #64	; 0x40
 800cc5c:	f040 80c1 	bne.w	800cde2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	695b      	ldr	r3, [r3, #20]
 800cc6e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10d      	bne.n	800cc96 <HAL_I2C_EV_IRQHandler+0x6e>
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800cc80:	d003      	beq.n	800cc8a <HAL_I2C_EV_IRQHandler+0x62>
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800cc88:	d101      	bne.n	800cc8e <HAL_I2C_EV_IRQHandler+0x66>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <HAL_I2C_EV_IRQHandler+0x68>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	f000 8132 	beq.w	800cefa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	f003 0301 	and.w	r3, r3, #1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00c      	beq.n	800ccba <HAL_I2C_EV_IRQHandler+0x92>
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	0a5b      	lsrs	r3, r3, #9
 800cca4:	f003 0301 	and.w	r3, r3, #1
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d006      	beq.n	800ccba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f001 ffa8 	bl	800ec02 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fd83 	bl	800d7be <I2C_Master_SB>
 800ccb8:	e092      	b.n	800cde0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	08db      	lsrs	r3, r3, #3
 800ccbe:	f003 0301 	and.w	r3, r3, #1
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d009      	beq.n	800ccda <HAL_I2C_EV_IRQHandler+0xb2>
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	0a5b      	lsrs	r3, r3, #9
 800ccca:	f003 0301 	and.w	r3, r3, #1
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d003      	beq.n	800ccda <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fdf9 	bl	800d8ca <I2C_Master_ADD10>
 800ccd8:	e082      	b.n	800cde0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	085b      	lsrs	r3, r3, #1
 800ccde:	f003 0301 	and.w	r3, r3, #1
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d009      	beq.n	800ccfa <HAL_I2C_EV_IRQHandler+0xd2>
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	0a5b      	lsrs	r3, r3, #9
 800ccea:	f003 0301 	and.w	r3, r3, #1
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fe13 	bl	800d91e <I2C_Master_ADDR>
 800ccf8:	e072      	b.n	800cde0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	089b      	lsrs	r3, r3, #2
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d03b      	beq.n	800cd7e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd14:	f000 80f3 	beq.w	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	09db      	lsrs	r3, r3, #7
 800cd1c:	f003 0301 	and.w	r3, r3, #1
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00f      	beq.n	800cd44 <HAL_I2C_EV_IRQHandler+0x11c>
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	0a9b      	lsrs	r3, r3, #10
 800cd28:	f003 0301 	and.w	r3, r3, #1
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d009      	beq.n	800cd44 <HAL_I2C_EV_IRQHandler+0x11c>
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	089b      	lsrs	r3, r3, #2
 800cd34:	f003 0301 	and.w	r3, r3, #1
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d103      	bne.n	800cd44 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f9f3 	bl	800d128 <I2C_MasterTransmit_TXE>
 800cd42:	e04d      	b.n	800cde0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	089b      	lsrs	r3, r3, #2
 800cd48:	f003 0301 	and.w	r3, r3, #1
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f000 80d6 	beq.w	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	0a5b      	lsrs	r3, r3, #9
 800cd56:	f003 0301 	and.w	r3, r3, #1
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f000 80cf 	beq.w	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800cd60:	7bbb      	ldrb	r3, [r7, #14]
 800cd62:	2b21      	cmp	r3, #33	; 0x21
 800cd64:	d103      	bne.n	800cd6e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fa7a 	bl	800d260 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cd6c:	e0c7      	b.n	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	2b40      	cmp	r3, #64	; 0x40
 800cd72:	f040 80c4 	bne.w	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 fae8 	bl	800d34c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cd7c:	e0bf      	b.n	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd8c:	f000 80b7 	beq.w	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	099b      	lsrs	r3, r3, #6
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00f      	beq.n	800cdbc <HAL_I2C_EV_IRQHandler+0x194>
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	0a9b      	lsrs	r3, r3, #10
 800cda0:	f003 0301 	and.w	r3, r3, #1
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d009      	beq.n	800cdbc <HAL_I2C_EV_IRQHandler+0x194>
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	089b      	lsrs	r3, r3, #2
 800cdac:	f003 0301 	and.w	r3, r3, #1
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d103      	bne.n	800cdbc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fb5d 	bl	800d474 <I2C_MasterReceive_RXNE>
 800cdba:	e011      	b.n	800cde0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	089b      	lsrs	r3, r3, #2
 800cdc0:	f003 0301 	and.w	r3, r3, #1
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f000 809a 	beq.w	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	0a5b      	lsrs	r3, r3, #9
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f000 8093 	beq.w	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fc06 	bl	800d5ea <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cdde:	e08e      	b.n	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
 800cde0:	e08d      	b.n	800cefe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d004      	beq.n	800cdf4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	695b      	ldr	r3, [r3, #20]
 800cdf0:	61fb      	str	r3, [r7, #28]
 800cdf2:	e007      	b.n	800ce04 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	699b      	ldr	r3, [r3, #24]
 800cdfa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	085b      	lsrs	r3, r3, #1
 800ce08:	f003 0301 	and.w	r3, r3, #1
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d012      	beq.n	800ce36 <HAL_I2C_EV_IRQHandler+0x20e>
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	0a5b      	lsrs	r3, r3, #9
 800ce14:	f003 0301 	and.w	r3, r3, #1
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00c      	beq.n	800ce36 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d003      	beq.n	800ce2c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	699b      	ldr	r3, [r3, #24]
 800ce2a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800ce2c:	69b9      	ldr	r1, [r7, #24]
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 ffc4 	bl	800ddbc <I2C_Slave_ADDR>
 800ce34:	e066      	b.n	800cf04 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	091b      	lsrs	r3, r3, #4
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d009      	beq.n	800ce56 <HAL_I2C_EV_IRQHandler+0x22e>
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	0a5b      	lsrs	r3, r3, #9
 800ce46:	f003 0301 	and.w	r3, r3, #1
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d003      	beq.n	800ce56 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fffe 	bl	800de50 <I2C_Slave_STOPF>
 800ce54:	e056      	b.n	800cf04 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ce56:	7bbb      	ldrb	r3, [r7, #14]
 800ce58:	2b21      	cmp	r3, #33	; 0x21
 800ce5a:	d002      	beq.n	800ce62 <HAL_I2C_EV_IRQHandler+0x23a>
 800ce5c:	7bbb      	ldrb	r3, [r7, #14]
 800ce5e:	2b29      	cmp	r3, #41	; 0x29
 800ce60:	d125      	bne.n	800ceae <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	09db      	lsrs	r3, r3, #7
 800ce66:	f003 0301 	and.w	r3, r3, #1
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00f      	beq.n	800ce8e <HAL_I2C_EV_IRQHandler+0x266>
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	0a9b      	lsrs	r3, r3, #10
 800ce72:	f003 0301 	and.w	r3, r3, #1
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d009      	beq.n	800ce8e <HAL_I2C_EV_IRQHandler+0x266>
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	089b      	lsrs	r3, r3, #2
 800ce7e:	f003 0301 	and.w	r3, r3, #1
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d103      	bne.n	800ce8e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 feda 	bl	800dc40 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ce8c:	e039      	b.n	800cf02 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	089b      	lsrs	r3, r3, #2
 800ce92:	f003 0301 	and.w	r3, r3, #1
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d033      	beq.n	800cf02 <HAL_I2C_EV_IRQHandler+0x2da>
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	0a5b      	lsrs	r3, r3, #9
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d02d      	beq.n	800cf02 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 ff07 	bl	800dcba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ceac:	e029      	b.n	800cf02 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	099b      	lsrs	r3, r3, #6
 800ceb2:	f003 0301 	and.w	r3, r3, #1
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00f      	beq.n	800ceda <HAL_I2C_EV_IRQHandler+0x2b2>
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	0a9b      	lsrs	r3, r3, #10
 800cebe:	f003 0301 	and.w	r3, r3, #1
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d009      	beq.n	800ceda <HAL_I2C_EV_IRQHandler+0x2b2>
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	089b      	lsrs	r3, r3, #2
 800ceca:	f003 0301 	and.w	r3, r3, #1
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d103      	bne.n	800ceda <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 ff12 	bl	800dcfc <I2C_SlaveReceive_RXNE>
 800ced8:	e014      	b.n	800cf04 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	089b      	lsrs	r3, r3, #2
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00e      	beq.n	800cf04 <HAL_I2C_EV_IRQHandler+0x2dc>
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	0a5b      	lsrs	r3, r3, #9
 800ceea:	f003 0301 	and.w	r3, r3, #1
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d008      	beq.n	800cf04 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 ff40 	bl	800dd78 <I2C_SlaveReceive_BTF>
 800cef8:	e004      	b.n	800cf04 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800cefa:	bf00      	nop
 800cefc:	e002      	b.n	800cf04 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cefe:	bf00      	nop
 800cf00:	e000      	b.n	800cf04 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cf02:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800cf04:	3720      	adds	r7, #32
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b08a      	sub	sp, #40	; 0x28
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	695b      	ldr	r3, [r3, #20]
 800cf18:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800cf22:	2300      	movs	r3, #0
 800cf24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf2c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	0a1b      	lsrs	r3, r3, #8
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d00e      	beq.n	800cf58 <HAL_I2C_ER_IRQHandler+0x4e>
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	0a1b      	lsrs	r3, r3, #8
 800cf3e:	f003 0301 	and.w	r3, r3, #1
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d008      	beq.n	800cf58 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800cf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf48:	f043 0301 	orr.w	r3, r3, #1
 800cf4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cf56:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800cf58:	6a3b      	ldr	r3, [r7, #32]
 800cf5a:	0a5b      	lsrs	r3, r3, #9
 800cf5c:	f003 0301 	and.w	r3, r3, #1
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00e      	beq.n	800cf82 <HAL_I2C_ER_IRQHandler+0x78>
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	0a1b      	lsrs	r3, r3, #8
 800cf68:	f003 0301 	and.w	r3, r3, #1
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d008      	beq.n	800cf82 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	f043 0302 	orr.w	r3, r3, #2
 800cf76:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800cf80:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800cf82:	6a3b      	ldr	r3, [r7, #32]
 800cf84:	0a9b      	lsrs	r3, r3, #10
 800cf86:	f003 0301 	and.w	r3, r3, #1
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d03f      	beq.n	800d00e <HAL_I2C_ER_IRQHandler+0x104>
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	0a1b      	lsrs	r3, r3, #8
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d039      	beq.n	800d00e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800cf9a:	7efb      	ldrb	r3, [r7, #27]
 800cf9c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfb2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800cfb4:	7ebb      	ldrb	r3, [r7, #26]
 800cfb6:	2b20      	cmp	r3, #32
 800cfb8:	d112      	bne.n	800cfe0 <HAL_I2C_ER_IRQHandler+0xd6>
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10f      	bne.n	800cfe0 <HAL_I2C_ER_IRQHandler+0xd6>
 800cfc0:	7cfb      	ldrb	r3, [r7, #19]
 800cfc2:	2b21      	cmp	r3, #33	; 0x21
 800cfc4:	d008      	beq.n	800cfd8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800cfc6:	7cfb      	ldrb	r3, [r7, #19]
 800cfc8:	2b29      	cmp	r3, #41	; 0x29
 800cfca:	d005      	beq.n	800cfd8 <HAL_I2C_ER_IRQHandler+0xce>
 800cfcc:	7cfb      	ldrb	r3, [r7, #19]
 800cfce:	2b28      	cmp	r3, #40	; 0x28
 800cfd0:	d106      	bne.n	800cfe0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2b21      	cmp	r3, #33	; 0x21
 800cfd6:	d103      	bne.n	800cfe0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f001 f869 	bl	800e0b0 <I2C_Slave_AF>
 800cfde:	e016      	b.n	800d00e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cfe8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	f043 0304 	orr.w	r3, r3, #4
 800cff0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800cff2:	7efb      	ldrb	r3, [r7, #27]
 800cff4:	2b10      	cmp	r3, #16
 800cff6:	d002      	beq.n	800cffe <HAL_I2C_ER_IRQHandler+0xf4>
 800cff8:	7efb      	ldrb	r3, [r7, #27]
 800cffa:	2b40      	cmp	r3, #64	; 0x40
 800cffc:	d107      	bne.n	800d00e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d00c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d00e:	6a3b      	ldr	r3, [r7, #32]
 800d010:	0adb      	lsrs	r3, r3, #11
 800d012:	f003 0301 	and.w	r3, r3, #1
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00e      	beq.n	800d038 <HAL_I2C_ER_IRQHandler+0x12e>
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	0a1b      	lsrs	r3, r3, #8
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	2b00      	cmp	r3, #0
 800d024:	d008      	beq.n	800d038 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d028:	f043 0308 	orr.w	r3, r3, #8
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800d036:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d008      	beq.n	800d050 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	431a      	orrs	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f001 f8a0 	bl	800e190 <I2C_ITError>
  }
}
 800d050:	bf00      	nop
 800d052:	3728      	adds	r7, #40	; 0x28
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800d074:	bf00      	nop
 800d076:	370c      	adds	r7, #12
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d088:	bf00      	nop
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d09c:	bf00      	nop
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	70fb      	strb	r3, [r7, #3]
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d0b8:	bf00      	nop
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800d0cc:	bf00      	nop
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d0e0:	bf00      	nop
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b083      	sub	sp, #12
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d0f4:	bf00      	nop
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d108:	bf00      	nop
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d136:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d13e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d144:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d150      	bne.n	800d1f0 <I2C_MasterTransmit_TXE+0xc8>
 800d14e:	7bfb      	ldrb	r3, [r7, #15]
 800d150:	2b21      	cmp	r3, #33	; 0x21
 800d152:	d14d      	bne.n	800d1f0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	2b08      	cmp	r3, #8
 800d158:	d01d      	beq.n	800d196 <I2C_MasterTransmit_TXE+0x6e>
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	2b20      	cmp	r3, #32
 800d15e:	d01a      	beq.n	800d196 <I2C_MasterTransmit_TXE+0x6e>
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d166:	d016      	beq.n	800d196 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d176:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2211      	movs	r2, #17
 800d17c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2220      	movs	r2, #32
 800d18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7ff ff62 	bl	800d058 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d194:	e060      	b.n	800d258 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d1a4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1b4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2220      	movs	r2, #32
 800d1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b40      	cmp	r3, #64	; 0x40
 800d1ce:	d107      	bne.n	800d1e0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7ff ff7d 	bl	800d0d8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d1de:	e03b      	b.n	800d258 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f7ff ff35 	bl	800d058 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d1ee:	e033      	b.n	800d258 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
 800d1f2:	2b21      	cmp	r3, #33	; 0x21
 800d1f4:	d005      	beq.n	800d202 <I2C_MasterTransmit_TXE+0xda>
 800d1f6:	7bbb      	ldrb	r3, [r7, #14]
 800d1f8:	2b40      	cmp	r3, #64	; 0x40
 800d1fa:	d12d      	bne.n	800d258 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800d1fc:	7bfb      	ldrb	r3, [r7, #15]
 800d1fe:	2b22      	cmp	r3, #34	; 0x22
 800d200:	d12a      	bne.n	800d258 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d206:	b29b      	uxth	r3, r3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d108      	bne.n	800d21e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	685a      	ldr	r2, [r3, #4]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d21a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d21c:	e01c      	b.n	800d258 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d224:	b2db      	uxtb	r3, r3
 800d226:	2b40      	cmp	r3, #64	; 0x40
 800d228:	d103      	bne.n	800d232 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f88e 	bl	800d34c <I2C_MemoryTransmit_TXE_BTF>
}
 800d230:	e012      	b.n	800d258 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d236:	781a      	ldrb	r2, [r3, #0]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	3b01      	subs	r3, #1
 800d250:	b29a      	uxth	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d256:	e7ff      	b.n	800d258 <I2C_MasterTransmit_TXE+0x130>
 800d258:	bf00      	nop
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d274:	b2db      	uxtb	r3, r3
 800d276:	2b21      	cmp	r3, #33	; 0x21
 800d278:	d164      	bne.n	800d344 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d27e:	b29b      	uxth	r3, r3
 800d280:	2b00      	cmp	r3, #0
 800d282:	d012      	beq.n	800d2aa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d288:	781a      	ldrb	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d294:	1c5a      	adds	r2, r3, #1
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800d2a8:	e04c      	b.n	800d344 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b08      	cmp	r3, #8
 800d2ae:	d01d      	beq.n	800d2ec <I2C_MasterTransmit_BTF+0x8c>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2b20      	cmp	r3, #32
 800d2b4:	d01a      	beq.n	800d2ec <I2C_MasterTransmit_BTF+0x8c>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d2bc:	d016      	beq.n	800d2ec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d2cc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2211      	movs	r2, #17
 800d2d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2220      	movs	r2, #32
 800d2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff feb7 	bl	800d058 <HAL_I2C_MasterTxCpltCallback>
}
 800d2ea:	e02b      	b.n	800d344 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685a      	ldr	r2, [r3, #4]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d2fa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d30a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2220      	movs	r2, #32
 800d316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d320:	b2db      	uxtb	r3, r3
 800d322:	2b40      	cmp	r3, #64	; 0x40
 800d324:	d107      	bne.n	800d336 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7ff fed2 	bl	800d0d8 <HAL_I2C_MemTxCpltCallback>
}
 800d334:	e006      	b.n	800d344 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff fe8a 	bl	800d058 <HAL_I2C_MasterTxCpltCallback>
}
 800d344:	bf00      	nop
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d35a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d360:	2b00      	cmp	r3, #0
 800d362:	d11d      	bne.n	800d3a0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d10b      	bne.n	800d384 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d370:	b2da      	uxtb	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d37c:	1c9a      	adds	r2, r3, #2
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800d382:	e073      	b.n	800d46c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d388:	b29b      	uxth	r3, r3
 800d38a:	121b      	asrs	r3, r3, #8
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d398:	1c5a      	adds	r2, r3, #1
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d39e:	e065      	b.n	800d46c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d10b      	bne.n	800d3c0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3b8:	1c5a      	adds	r2, r3, #1
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d3be:	e055      	b.n	800d46c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d151      	bne.n	800d46c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ca:	2b22      	cmp	r3, #34	; 0x22
 800d3cc:	d10d      	bne.n	800d3ea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3dc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3e2:	1c5a      	adds	r2, r3, #1
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d3e8:	e040      	b.n	800d46c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d015      	beq.n	800d420 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
 800d3f6:	2b21      	cmp	r3, #33	; 0x21
 800d3f8:	d112      	bne.n	800d420 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fe:	781a      	ldrb	r2, [r3, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40a:	1c5a      	adds	r2, r3, #1
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d414:	b29b      	uxth	r3, r3
 800d416:	3b01      	subs	r3, #1
 800d418:	b29a      	uxth	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d41e:	e025      	b.n	800d46c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d424:	b29b      	uxth	r3, r3
 800d426:	2b00      	cmp	r3, #0
 800d428:	d120      	bne.n	800d46c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
 800d42c:	2b21      	cmp	r3, #33	; 0x21
 800d42e:	d11d      	bne.n	800d46c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d43e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d44e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2220      	movs	r2, #32
 800d45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7ff fe36 	bl	800d0d8 <HAL_I2C_MemTxCpltCallback>
}
 800d46c:	bf00      	nop
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d482:	b2db      	uxtb	r3, r3
 800d484:	2b22      	cmp	r3, #34	; 0x22
 800d486:	f040 80ac 	bne.w	800d5e2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d48e:	b29b      	uxth	r3, r3
 800d490:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2b03      	cmp	r3, #3
 800d496:	d921      	bls.n	800d4dc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	691a      	ldr	r2, [r3, #16]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a2:	b2d2      	uxtb	r2, r2
 800d4a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	f040 808c 	bne.w	800d5e2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	685a      	ldr	r2, [r3, #4]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4d8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800d4da:	e082      	b.n	800d5e2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d075      	beq.n	800d5d0 <I2C_MasterReceive_RXNE+0x15c>
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d002      	beq.n	800d4f0 <I2C_MasterReceive_RXNE+0x7c>
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d16f      	bne.n	800d5d0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f001 facf 	bl	800ea94 <I2C_WaitOnSTOPRequestThroughIT>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d142      	bne.n	800d582 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d50a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	685a      	ldr	r2, [r3, #4]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d51a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	691a      	ldr	r2, [r3, #16]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d526:	b2d2      	uxtb	r2, r2
 800d528:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52e:	1c5a      	adds	r2, r3, #1
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d538:	b29b      	uxth	r3, r3
 800d53a:	3b01      	subs	r3, #1
 800d53c:	b29a      	uxth	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2220      	movs	r2, #32
 800d546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b40      	cmp	r3, #64	; 0x40
 800d554:	d10a      	bne.n	800d56c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff fdc1 	bl	800d0ec <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d56a:	e03a      	b.n	800d5e2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2212      	movs	r2, #18
 800d578:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7ff fd76 	bl	800d06c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d580:	e02f      	b.n	800d5e2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	685a      	ldr	r2, [r3, #4]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d590:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	691a      	ldr	r2, [r3, #16]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59c:	b2d2      	uxtb	r2, r2
 800d59e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a4:	1c5a      	adds	r2, r3, #1
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2220      	movs	r2, #32
 800d5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7ff fd99 	bl	800d100 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d5ce:	e008      	b.n	800d5e2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	685a      	ldr	r2, [r3, #4]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5de:	605a      	str	r2, [r3, #4]
}
 800d5e0:	e7ff      	b.n	800d5e2 <I2C_MasterReceive_RXNE+0x16e>
 800d5e2:	bf00      	nop
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	2b04      	cmp	r3, #4
 800d600:	d11b      	bne.n	800d63a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	685a      	ldr	r2, [r3, #4]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d610:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	691a      	ldr	r2, [r3, #16]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61c:	b2d2      	uxtb	r2, r2
 800d61e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d62e:	b29b      	uxth	r3, r3
 800d630:	3b01      	subs	r3, #1
 800d632:	b29a      	uxth	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d638:	e0bd      	b.n	800d7b6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d63e:	b29b      	uxth	r3, r3
 800d640:	2b03      	cmp	r3, #3
 800d642:	d129      	bne.n	800d698 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	685a      	ldr	r2, [r3, #4]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d652:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b04      	cmp	r3, #4
 800d658:	d00a      	beq.n	800d670 <I2C_MasterReceive_BTF+0x86>
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	d007      	beq.n	800d670 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d66e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	691a      	ldr	r2, [r3, #16]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67a:	b2d2      	uxtb	r2, r2
 800d67c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d682:	1c5a      	adds	r2, r3, #1
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	3b01      	subs	r3, #1
 800d690:	b29a      	uxth	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d696:	e08e      	b.n	800d7b6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	d176      	bne.n	800d790 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d002      	beq.n	800d6ae <I2C_MasterReceive_BTF+0xc4>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2b10      	cmp	r3, #16
 800d6ac:	d108      	bne.n	800d6c0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	e019      	b.n	800d6f4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2b04      	cmp	r3, #4
 800d6c4:	d002      	beq.n	800d6cc <I2C_MasterReceive_BTF+0xe2>
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d108      	bne.n	800d6de <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	e00a      	b.n	800d6f4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2b10      	cmp	r3, #16
 800d6e2:	d007      	beq.n	800d6f4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	691a      	ldr	r2, [r3, #16]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fe:	b2d2      	uxtb	r2, r2
 800d700:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d710:	b29b      	uxth	r3, r3
 800d712:	3b01      	subs	r3, #1
 800d714:	b29a      	uxth	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	691a      	ldr	r2, [r3, #16]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d724:	b2d2      	uxtb	r2, r2
 800d726:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72c:	1c5a      	adds	r2, r3, #1
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d736:	b29b      	uxth	r3, r3
 800d738:	3b01      	subs	r3, #1
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d74e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2220      	movs	r2, #32
 800d754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	2b40      	cmp	r3, #64	; 0x40
 800d762:	d10a      	bne.n	800d77a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f7ff fcba 	bl	800d0ec <HAL_I2C_MemRxCpltCallback>
}
 800d778:	e01d      	b.n	800d7b6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2212      	movs	r2, #18
 800d786:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7ff fc6f 	bl	800d06c <HAL_I2C_MasterRxCpltCallback>
}
 800d78e:	e012      	b.n	800d7b6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	691a      	ldr	r2, [r3, #16]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79a:	b2d2      	uxtb	r2, r2
 800d79c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a2:	1c5a      	adds	r2, r3, #1
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d7b6:	bf00      	nop
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800d7be:	b480      	push	{r7}
 800d7c0:	b083      	sub	sp, #12
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	2b40      	cmp	r3, #64	; 0x40
 800d7d0:	d117      	bne.n	800d802 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d109      	bne.n	800d7ee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d7ea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800d7ec:	e067      	b.n	800d8be <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	f043 0301 	orr.w	r3, r3, #1
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	611a      	str	r2, [r3, #16]
}
 800d800:	e05d      	b.n	800d8be <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	691b      	ldr	r3, [r3, #16]
 800d806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d80a:	d133      	bne.n	800d874 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d812:	b2db      	uxtb	r3, r3
 800d814:	2b21      	cmp	r3, #33	; 0x21
 800d816:	d109      	bne.n	800d82c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	461a      	mov	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d828:	611a      	str	r2, [r3, #16]
 800d82a:	e008      	b.n	800d83e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d830:	b2db      	uxtb	r3, r3
 800d832:	f043 0301 	orr.w	r3, r3, #1
 800d836:	b2da      	uxtb	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d842:	2b00      	cmp	r3, #0
 800d844:	d004      	beq.n	800d850 <I2C_Master_SB+0x92>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d108      	bne.n	800d862 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d854:	2b00      	cmp	r3, #0
 800d856:	d032      	beq.n	800d8be <I2C_Master_SB+0x100>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d02d      	beq.n	800d8be <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	685a      	ldr	r2, [r3, #4]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d870:	605a      	str	r2, [r3, #4]
}
 800d872:	e024      	b.n	800d8be <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10e      	bne.n	800d89a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d880:	b29b      	uxth	r3, r3
 800d882:	11db      	asrs	r3, r3, #7
 800d884:	b2db      	uxtb	r3, r3
 800d886:	f003 0306 	and.w	r3, r3, #6
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	f063 030f 	orn	r3, r3, #15
 800d890:	b2da      	uxtb	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	611a      	str	r2, [r3, #16]
}
 800d898:	e011      	b.n	800d8be <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d10d      	bne.n	800d8be <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	11db      	asrs	r3, r3, #7
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	f003 0306 	and.w	r3, r3, #6
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	f063 030e 	orn	r3, r3, #14
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	611a      	str	r2, [r3, #16]
}
 800d8be:	bf00      	nop
 800d8c0:	370c      	adds	r7, #12
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr

0800d8ca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	b083      	sub	sp, #12
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d004      	beq.n	800d8f0 <I2C_Master_ADD10+0x26>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d108      	bne.n	800d902 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d00c      	beq.n	800d912 <I2C_Master_ADD10+0x48>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d007      	beq.n	800d912 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	685a      	ldr	r2, [r3, #4]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d910:	605a      	str	r2, [r3, #4]
  }
}
 800d912:	bf00      	nop
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800d91e:	b480      	push	{r7}
 800d920:	b091      	sub	sp, #68	; 0x44
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d92c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d934:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d93a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d942:	b2db      	uxtb	r3, r3
 800d944:	2b22      	cmp	r3, #34	; 0x22
 800d946:	f040 8169 	bne.w	800dc1c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10f      	bne.n	800d972 <I2C_Master_ADDR+0x54>
 800d952:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d956:	2b40      	cmp	r3, #64	; 0x40
 800d958:	d10b      	bne.n	800d972 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d95a:	2300      	movs	r3, #0
 800d95c:	633b      	str	r3, [r7, #48]	; 0x30
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	695b      	ldr	r3, [r3, #20]
 800d964:	633b      	str	r3, [r7, #48]	; 0x30
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	699b      	ldr	r3, [r3, #24]
 800d96c:	633b      	str	r3, [r7, #48]	; 0x30
 800d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d970:	e160      	b.n	800dc34 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d976:	2b00      	cmp	r3, #0
 800d978:	d11d      	bne.n	800d9b6 <I2C_Master_ADDR+0x98>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d982:	d118      	bne.n	800d9b6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d984:	2300      	movs	r3, #0
 800d986:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	695b      	ldr	r3, [r3, #20]
 800d98e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	699b      	ldr	r3, [r3, #24]
 800d996:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9a8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9ae:	1c5a      	adds	r2, r3, #1
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	651a      	str	r2, [r3, #80]	; 0x50
 800d9b4:	e13e      	b.n	800dc34 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d113      	bne.n	800d9e8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	699b      	ldr	r3, [r3, #24]
 800d9d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9e4:	601a      	str	r2, [r3, #0]
 800d9e6:	e115      	b.n	800dc14 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	f040 808a 	bne.w	800db08 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800d9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d9fa:	d137      	bne.n	800da6c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da0a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da1a:	d113      	bne.n	800da44 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da2a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da2c:	2300      	movs	r3, #0
 800da2e:	627b      	str	r3, [r7, #36]	; 0x24
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	695b      	ldr	r3, [r3, #20]
 800da36:	627b      	str	r3, [r7, #36]	; 0x24
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	699b      	ldr	r3, [r3, #24]
 800da3e:	627b      	str	r3, [r7, #36]	; 0x24
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	e0e7      	b.n	800dc14 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da44:	2300      	movs	r3, #0
 800da46:	623b      	str	r3, [r7, #32]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	695b      	ldr	r3, [r3, #20]
 800da4e:	623b      	str	r3, [r7, #32]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	699b      	ldr	r3, [r3, #24]
 800da56:	623b      	str	r3, [r7, #32]
 800da58:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	e0d3      	b.n	800dc14 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800da6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6e:	2b08      	cmp	r3, #8
 800da70:	d02e      	beq.n	800dad0 <I2C_Master_ADDR+0x1b2>
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	2b20      	cmp	r3, #32
 800da76:	d02b      	beq.n	800dad0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800da78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da7a:	2b12      	cmp	r3, #18
 800da7c:	d102      	bne.n	800da84 <I2C_Master_ADDR+0x166>
 800da7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da80:	2b01      	cmp	r3, #1
 800da82:	d125      	bne.n	800dad0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800da84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da86:	2b04      	cmp	r3, #4
 800da88:	d00e      	beq.n	800daa8 <I2C_Master_ADDR+0x18a>
 800da8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d00b      	beq.n	800daa8 <I2C_Master_ADDR+0x18a>
 800da90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da92:	2b10      	cmp	r3, #16
 800da94:	d008      	beq.n	800daa8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	e007      	b.n	800dab8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dab6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dab8:	2300      	movs	r3, #0
 800daba:	61fb      	str	r3, [r7, #28]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	695b      	ldr	r3, [r3, #20]
 800dac2:	61fb      	str	r3, [r7, #28]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	61fb      	str	r3, [r7, #28]
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	e0a1      	b.n	800dc14 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dade:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dae0:	2300      	movs	r3, #0
 800dae2:	61bb      	str	r3, [r7, #24]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	695b      	ldr	r3, [r3, #20]
 800daea:	61bb      	str	r3, [r7, #24]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	699b      	ldr	r3, [r3, #24]
 800daf2:	61bb      	str	r3, [r7, #24]
 800daf4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	e085      	b.n	800dc14 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	2b02      	cmp	r3, #2
 800db10:	d14d      	bne.n	800dbae <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800db12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db14:	2b04      	cmp	r3, #4
 800db16:	d016      	beq.n	800db46 <I2C_Master_ADDR+0x228>
 800db18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d013      	beq.n	800db46 <I2C_Master_ADDR+0x228>
 800db1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db20:	2b10      	cmp	r3, #16
 800db22:	d010      	beq.n	800db46 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db32:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db42:	601a      	str	r2, [r3, #0]
 800db44:	e007      	b.n	800db56 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db54:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db64:	d117      	bne.n	800db96 <I2C_Master_ADDR+0x278>
 800db66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800db6c:	d00b      	beq.n	800db86 <I2C_Master_ADDR+0x268>
 800db6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db70:	2b01      	cmp	r3, #1
 800db72:	d008      	beq.n	800db86 <I2C_Master_ADDR+0x268>
 800db74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db76:	2b08      	cmp	r3, #8
 800db78:	d005      	beq.n	800db86 <I2C_Master_ADDR+0x268>
 800db7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7c:	2b10      	cmp	r3, #16
 800db7e:	d002      	beq.n	800db86 <I2C_Master_ADDR+0x268>
 800db80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db82:	2b20      	cmp	r3, #32
 800db84:	d107      	bne.n	800db96 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db96:	2300      	movs	r3, #0
 800db98:	617b      	str	r3, [r7, #20]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	695b      	ldr	r3, [r3, #20]
 800dba0:	617b      	str	r3, [r7, #20]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	617b      	str	r3, [r7, #20]
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	e032      	b.n	800dc14 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dbbc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbcc:	d117      	bne.n	800dbfe <I2C_Master_ADDR+0x2e0>
 800dbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dbd4:	d00b      	beq.n	800dbee <I2C_Master_ADDR+0x2d0>
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d008      	beq.n	800dbee <I2C_Master_ADDR+0x2d0>
 800dbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbde:	2b08      	cmp	r3, #8
 800dbe0:	d005      	beq.n	800dbee <I2C_Master_ADDR+0x2d0>
 800dbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe4:	2b10      	cmp	r3, #16
 800dbe6:	d002      	beq.n	800dbee <I2C_Master_ADDR+0x2d0>
 800dbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbea:	2b20      	cmp	r3, #32
 800dbec:	d107      	bne.n	800dbfe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	685a      	ldr	r2, [r3, #4]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dbfc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbfe:	2300      	movs	r3, #0
 800dc00:	613b      	str	r3, [r7, #16]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	695b      	ldr	r3, [r3, #20]
 800dc08:	613b      	str	r3, [r7, #16]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	613b      	str	r3, [r7, #16]
 800dc12:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2200      	movs	r2, #0
 800dc18:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800dc1a:	e00b      	b.n	800dc34 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	695b      	ldr	r3, [r3, #20]
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	699b      	ldr	r3, [r3, #24]
 800dc2e:	60fb      	str	r3, [r7, #12]
 800dc30:	68fb      	ldr	r3, [r7, #12]
}
 800dc32:	e7ff      	b.n	800dc34 <I2C_Master_ADDR+0x316>
 800dc34:	bf00      	nop
 800dc36:	3744      	adds	r7, #68	; 0x44
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d02b      	beq.n	800dcb2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5e:	781a      	ldrb	r2, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	3b01      	subs	r3, #1
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d114      	bne.n	800dcb2 <I2C_SlaveTransmit_TXE+0x72>
 800dc88:	7bfb      	ldrb	r3, [r7, #15]
 800dc8a:	2b29      	cmp	r3, #41	; 0x29
 800dc8c:	d111      	bne.n	800dcb2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2221      	movs	r2, #33	; 0x21
 800dca2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2228      	movs	r2, #40	; 0x28
 800dca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f7ff f9e7 	bl	800d080 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800dcb2:	bf00      	nop
 800dcb4:	3710      	adds	r7, #16
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b083      	sub	sp, #12
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d011      	beq.n	800dcf0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd0:	781a      	ldrb	r2, [r3, #0]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcdc:	1c5a      	adds	r2, r3, #1
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	3b01      	subs	r3, #1
 800dcea:	b29a      	uxth	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800dcf0:	bf00      	nop
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d02c      	beq.n	800dd70 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	691a      	ldr	r2, [r3, #16]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd20:	b2d2      	uxtb	r2, r2
 800dd22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	3b01      	subs	r3, #1
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d114      	bne.n	800dd70 <I2C_SlaveReceive_RXNE+0x74>
 800dd46:	7bfb      	ldrb	r3, [r7, #15]
 800dd48:	2b2a      	cmp	r3, #42	; 0x2a
 800dd4a:	d111      	bne.n	800dd70 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	685a      	ldr	r2, [r3, #4]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd5a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2222      	movs	r2, #34	; 0x22
 800dd60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2228      	movs	r2, #40	; 0x28
 800dd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7ff f992 	bl	800d094 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800dd70:	bf00      	nop
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d012      	beq.n	800ddb0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	691a      	ldr	r2, [r3, #16]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd94:	b2d2      	uxtb	r2, r2
 800dd96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9c:	1c5a      	adds	r2, r3, #1
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	3b01      	subs	r3, #1
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ddd6:	2b28      	cmp	r3, #40	; 0x28
 800ddd8:	d127      	bne.n	800de2a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dde8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	089b      	lsrs	r3, r3, #2
 800ddee:	f003 0301 	and.w	r3, r3, #1
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d101      	bne.n	800ddfa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	09db      	lsrs	r3, r3, #7
 800ddfe:	f003 0301 	and.w	r3, r3, #1
 800de02:	2b00      	cmp	r3, #0
 800de04:	d103      	bne.n	800de0e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	81bb      	strh	r3, [r7, #12]
 800de0c:	e002      	b.n	800de14 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	699b      	ldr	r3, [r3, #24]
 800de12:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800de1c:	89ba      	ldrh	r2, [r7, #12]
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	4619      	mov	r1, r3
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f7ff f940 	bl	800d0a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800de28:	e00e      	b.n	800de48 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de2a:	2300      	movs	r3, #0
 800de2c:	60bb      	str	r3, [r7, #8]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	695b      	ldr	r3, [r3, #20]
 800de34:	60bb      	str	r3, [r7, #8]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	60bb      	str	r3, [r7, #8]
 800de3e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800de48:	bf00      	nop
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de5e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	685a      	ldr	r2, [r3, #4]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800de6e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800de70:	2300      	movs	r3, #0
 800de72:	60bb      	str	r3, [r7, #8]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	60bb      	str	r3, [r7, #8]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f042 0201 	orr.w	r2, r2, #1
 800de8a:	601a      	str	r2, [r3, #0]
 800de8c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de9c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800deac:	d172      	bne.n	800df94 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800deae:	7bfb      	ldrb	r3, [r7, #15]
 800deb0:	2b22      	cmp	r3, #34	; 0x22
 800deb2:	d002      	beq.n	800deba <I2C_Slave_STOPF+0x6a>
 800deb4:	7bfb      	ldrb	r3, [r7, #15]
 800deb6:	2b2a      	cmp	r3, #42	; 0x2a
 800deb8:	d135      	bne.n	800df26 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800decc:	b29b      	uxth	r3, r3
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d005      	beq.n	800dede <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ded6:	f043 0204 	orr.w	r2, r3, #4
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	685a      	ldr	r2, [r3, #4]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800deec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	4618      	mov	r0, r3
 800def4:	f7fe f884 	bl	800c000 <HAL_DMA_GetState>
 800def8:	4603      	mov	r3, r0
 800defa:	2b01      	cmp	r3, #1
 800defc:	d049      	beq.n	800df92 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df02:	4a69      	ldr	r2, [pc, #420]	; (800e0a8 <I2C_Slave_STOPF+0x258>)
 800df04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7fe f856 	bl	800bfbc <HAL_DMA_Abort_IT>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d03d      	beq.n	800df92 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800df20:	4610      	mov	r0, r2
 800df22:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800df24:	e035      	b.n	800df92 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	b29a      	uxth	r2, r3
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df38:	b29b      	uxth	r3, r3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d005      	beq.n	800df4a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df42:	f043 0204 	orr.w	r2, r3, #4
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	685a      	ldr	r2, [r3, #4]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fe f84e 	bl	800c000 <HAL_DMA_GetState>
 800df64:	4603      	mov	r3, r0
 800df66:	2b01      	cmp	r3, #1
 800df68:	d014      	beq.n	800df94 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6e:	4a4e      	ldr	r2, [pc, #312]	; (800e0a8 <I2C_Slave_STOPF+0x258>)
 800df70:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df76:	4618      	mov	r0, r3
 800df78:	f7fe f820 	bl	800bfbc <HAL_DMA_Abort_IT>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d008      	beq.n	800df94 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800df8c:	4610      	mov	r0, r2
 800df8e:	4798      	blx	r3
 800df90:	e000      	b.n	800df94 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800df92:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df98:	b29b      	uxth	r3, r3
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d03e      	beq.n	800e01c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	695b      	ldr	r3, [r3, #20]
 800dfa4:	f003 0304 	and.w	r3, r3, #4
 800dfa8:	2b04      	cmp	r3, #4
 800dfaa:	d112      	bne.n	800dfd2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	691a      	ldr	r2, [r3, #16]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb6:	b2d2      	uxtb	r2, r2
 800dfb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbe:	1c5a      	adds	r2, r3, #1
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	695b      	ldr	r3, [r3, #20]
 800dfd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfdc:	2b40      	cmp	r3, #64	; 0x40
 800dfde:	d112      	bne.n	800e006 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	691a      	ldr	r2, [r3, #16]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfea:	b2d2      	uxtb	r2, r2
 800dfec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	3b01      	subs	r3, #1
 800e000:	b29a      	uxth	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d005      	beq.n	800e01c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e014:	f043 0204 	orr.w	r2, r3, #4
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e020:	2b00      	cmp	r3, #0
 800e022:	d003      	beq.n	800e02c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f8b3 	bl	800e190 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800e02a:	e039      	b.n	800e0a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e02c:	7bfb      	ldrb	r3, [r7, #15]
 800e02e:	2b2a      	cmp	r3, #42	; 0x2a
 800e030:	d109      	bne.n	800e046 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2200      	movs	r2, #0
 800e036:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2228      	movs	r2, #40	; 0x28
 800e03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7ff f827 	bl	800d094 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	2b28      	cmp	r3, #40	; 0x28
 800e050:	d111      	bne.n	800e076 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4a15      	ldr	r2, [pc, #84]	; (800e0ac <I2C_Slave_STOPF+0x25c>)
 800e056:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2220      	movs	r2, #32
 800e062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2200      	movs	r2, #0
 800e06a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f7ff f828 	bl	800d0c4 <HAL_I2C_ListenCpltCallback>
}
 800e074:	e014      	b.n	800e0a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e07a:	2b22      	cmp	r3, #34	; 0x22
 800e07c:	d002      	beq.n	800e084 <I2C_Slave_STOPF+0x234>
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
 800e080:	2b22      	cmp	r3, #34	; 0x22
 800e082:	d10d      	bne.n	800e0a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2220      	movs	r2, #32
 800e08e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7fe fffa 	bl	800d094 <HAL_I2C_SlaveRxCpltCallback>
}
 800e0a0:	bf00      	nop
 800e0a2:	3710      	adds	r7, #16
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	0800e695 	.word	0x0800e695
 800e0ac:	ffff0000 	.word	0xffff0000

0800e0b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2b08      	cmp	r3, #8
 800e0ca:	d002      	beq.n	800e0d2 <I2C_Slave_AF+0x22>
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	2b20      	cmp	r3, #32
 800e0d0:	d129      	bne.n	800e126 <I2C_Slave_AF+0x76>
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
 800e0d4:	2b28      	cmp	r3, #40	; 0x28
 800e0d6:	d126      	bne.n	800e126 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4a2c      	ldr	r2, [pc, #176]	; (800e18c <I2C_Slave_AF+0xdc>)
 800e0dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	685a      	ldr	r2, [r3, #4]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e0ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e0f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e106:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2220      	movs	r2, #32
 800e112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7fe ffd0 	bl	800d0c4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e124:	e02e      	b.n	800e184 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e126:	7bfb      	ldrb	r3, [r7, #15]
 800e128:	2b21      	cmp	r3, #33	; 0x21
 800e12a:	d126      	bne.n	800e17a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a17      	ldr	r2, [pc, #92]	; (800e18c <I2C_Slave_AF+0xdc>)
 800e130:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2221      	movs	r2, #33	; 0x21
 800e136:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2220      	movs	r2, #32
 800e13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2200      	movs	r2, #0
 800e144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	685a      	ldr	r2, [r3, #4]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e156:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e160:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e170:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7fe ff84 	bl	800d080 <HAL_I2C_SlaveTxCpltCallback>
}
 800e178:	e004      	b.n	800e184 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e182:	615a      	str	r2, [r3, #20]
}
 800e184:	bf00      	nop
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	ffff0000 	.word	0xffff0000

0800e190 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e19e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e1a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e1a8:	7bbb      	ldrb	r3, [r7, #14]
 800e1aa:	2b10      	cmp	r3, #16
 800e1ac:	d002      	beq.n	800e1b4 <I2C_ITError+0x24>
 800e1ae:	7bbb      	ldrb	r3, [r7, #14]
 800e1b0:	2b40      	cmp	r3, #64	; 0x40
 800e1b2:	d10a      	bne.n	800e1ca <I2C_ITError+0x3a>
 800e1b4:	7bfb      	ldrb	r3, [r7, #15]
 800e1b6:	2b22      	cmp	r3, #34	; 0x22
 800e1b8:	d107      	bne.n	800e1ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e1ca:	7bfb      	ldrb	r3, [r7, #15]
 800e1cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e1d0:	2b28      	cmp	r3, #40	; 0x28
 800e1d2:	d107      	bne.n	800e1e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2228      	movs	r2, #40	; 0x28
 800e1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e1e2:	e015      	b.n	800e210 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1f2:	d00a      	beq.n	800e20a <I2C_ITError+0x7a>
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
 800e1f6:	2b60      	cmp	r3, #96	; 0x60
 800e1f8:	d007      	beq.n	800e20a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2220      	movs	r2, #32
 800e1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2200      	movs	r2, #0
 800e206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2200      	movs	r2, #0
 800e20e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e21a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e21e:	d162      	bne.n	800e2e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	685a      	ldr	r2, [r3, #4]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e22e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d020      	beq.n	800e280 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e242:	4a6a      	ldr	r2, [pc, #424]	; (800e3ec <I2C_ITError+0x25c>)
 800e244:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fd feb6 	bl	800bfbc <HAL_DMA_Abort_IT>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	f000 8089 	beq.w	800e36a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f022 0201 	bic.w	r2, r2, #1
 800e266:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2220      	movs	r2, #32
 800e26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e27a:	4610      	mov	r0, r2
 800e27c:	4798      	blx	r3
 800e27e:	e074      	b.n	800e36a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e284:	4a59      	ldr	r2, [pc, #356]	; (800e3ec <I2C_ITError+0x25c>)
 800e286:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fd fe95 	bl	800bfbc <HAL_DMA_Abort_IT>
 800e292:	4603      	mov	r3, r0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d068      	beq.n	800e36a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a2:	2b40      	cmp	r3, #64	; 0x40
 800e2a4:	d10b      	bne.n	800e2be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	691a      	ldr	r2, [r3, #16]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b0:	b2d2      	uxtb	r2, r2
 800e2b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b8:	1c5a      	adds	r2, r3, #1
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f022 0201 	bic.w	r2, r2, #1
 800e2cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2220      	movs	r2, #32
 800e2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e2e0:	4610      	mov	r0, r2
 800e2e2:	4798      	blx	r3
 800e2e4:	e041      	b.n	800e36a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	2b60      	cmp	r3, #96	; 0x60
 800e2f0:	d125      	bne.n	800e33e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2220      	movs	r2, #32
 800e2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e30a:	2b40      	cmp	r3, #64	; 0x40
 800e30c:	d10b      	bne.n	800e326 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	691a      	ldr	r2, [r3, #16]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e318:	b2d2      	uxtb	r2, r2
 800e31a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e320:	1c5a      	adds	r2, r3, #1
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f022 0201 	bic.w	r2, r2, #1
 800e334:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7fe feec 	bl	800d114 <HAL_I2C_AbortCpltCallback>
 800e33c:	e015      	b.n	800e36a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	695b      	ldr	r3, [r3, #20]
 800e344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e348:	2b40      	cmp	r3, #64	; 0x40
 800e34a:	d10b      	bne.n	800e364 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	691a      	ldr	r2, [r3, #16]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e356:	b2d2      	uxtb	r2, r2
 800e358:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7fe fecb 	bl	800d100 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e36e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	f003 0301 	and.w	r3, r3, #1
 800e376:	2b00      	cmp	r3, #0
 800e378:	d10e      	bne.n	800e398 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e380:	2b00      	cmp	r3, #0
 800e382:	d109      	bne.n	800e398 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d104      	bne.n	800e398 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e394:	2b00      	cmp	r3, #0
 800e396:	d007      	beq.n	800e3a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	685a      	ldr	r2, [r3, #4]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e3a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b4:	f003 0304 	and.w	r3, r3, #4
 800e3b8:	2b04      	cmp	r3, #4
 800e3ba:	d113      	bne.n	800e3e4 <I2C_ITError+0x254>
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
 800e3be:	2b28      	cmp	r3, #40	; 0x28
 800e3c0:	d110      	bne.n	800e3e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	4a0a      	ldr	r2, [pc, #40]	; (800e3f0 <I2C_ITError+0x260>)
 800e3c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2220      	movs	r2, #32
 800e3d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f7fe fe70 	bl	800d0c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e3e4:	bf00      	nop
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	0800e695 	.word	0x0800e695
 800e3f0:	ffff0000 	.word	0xffff0000

0800e3f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af02      	add	r7, sp, #8
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	607a      	str	r2, [r7, #4]
 800e3fe:	603b      	str	r3, [r7, #0]
 800e400:	460b      	mov	r3, r1
 800e402:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e408:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	2b08      	cmp	r3, #8
 800e40e:	d006      	beq.n	800e41e <I2C_MasterRequestWrite+0x2a>
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d003      	beq.n	800e41e <I2C_MasterRequestWrite+0x2a>
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e41c:	d108      	bne.n	800e430 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e42c:	601a      	str	r2, [r3, #0]
 800e42e:	e00b      	b.n	800e448 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e434:	2b12      	cmp	r3, #18
 800e436:	d107      	bne.n	800e448 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e446:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	f000 f9c5 	bl	800e7e4 <I2C_WaitOnFlagUntilTimeout>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d00d      	beq.n	800e47c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e46a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e46e:	d103      	bne.n	800e478 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e476:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e478:	2303      	movs	r3, #3
 800e47a:	e035      	b.n	800e4e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e484:	d108      	bne.n	800e498 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e486:	897b      	ldrh	r3, [r7, #10]
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	461a      	mov	r2, r3
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e494:	611a      	str	r2, [r3, #16]
 800e496:	e01b      	b.n	800e4d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e498:	897b      	ldrh	r3, [r7, #10]
 800e49a:	11db      	asrs	r3, r3, #7
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	f003 0306 	and.w	r3, r3, #6
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	f063 030f 	orn	r3, r3, #15
 800e4a8:	b2da      	uxtb	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	490e      	ldr	r1, [pc, #56]	; (800e4f0 <I2C_MasterRequestWrite+0xfc>)
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f000 f9eb 	bl	800e892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e010      	b.n	800e4e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e4c6:	897b      	ldrh	r3, [r7, #10]
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	4907      	ldr	r1, [pc, #28]	; (800e4f4 <I2C_MasterRequestWrite+0x100>)
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f000 f9db 	bl	800e892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e000      	b.n	800e4e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	00010008 	.word	0x00010008
 800e4f4:	00010002 	.word	0x00010002

0800e4f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b088      	sub	sp, #32
 800e4fc:	af02      	add	r7, sp, #8
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	607a      	str	r2, [r7, #4]
 800e502:	603b      	str	r3, [r7, #0]
 800e504:	460b      	mov	r3, r1
 800e506:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e50c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e51c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	2b08      	cmp	r3, #8
 800e522:	d006      	beq.n	800e532 <I2C_MasterRequestRead+0x3a>
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d003      	beq.n	800e532 <I2C_MasterRequestRead+0x3a>
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e530:	d108      	bne.n	800e544 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e540:	601a      	str	r2, [r3, #0]
 800e542:	e00b      	b.n	800e55c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e548:	2b11      	cmp	r3, #17
 800e54a:	d107      	bne.n	800e55c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e55a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f000 f93b 	bl	800e7e4 <I2C_WaitOnFlagUntilTimeout>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d00d      	beq.n	800e590 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e582:	d103      	bne.n	800e58c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e58a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e58c:	2303      	movs	r3, #3
 800e58e:	e079      	b.n	800e684 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	691b      	ldr	r3, [r3, #16]
 800e594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e598:	d108      	bne.n	800e5ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e59a:	897b      	ldrh	r3, [r7, #10]
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	f043 0301 	orr.w	r3, r3, #1
 800e5a2:	b2da      	uxtb	r2, r3
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	611a      	str	r2, [r3, #16]
 800e5aa:	e05f      	b.n	800e66c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e5ac:	897b      	ldrh	r3, [r7, #10]
 800e5ae:	11db      	asrs	r3, r3, #7
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	f003 0306 	and.w	r3, r3, #6
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	f063 030f 	orn	r3, r3, #15
 800e5bc:	b2da      	uxtb	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	4930      	ldr	r1, [pc, #192]	; (800e68c <I2C_MasterRequestRead+0x194>)
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f000 f961 	bl	800e892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e054      	b.n	800e684 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e5da:	897b      	ldrh	r3, [r7, #10]
 800e5dc:	b2da      	uxtb	r2, r3
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	4929      	ldr	r1, [pc, #164]	; (800e690 <I2C_MasterRequestRead+0x198>)
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f000 f951 	bl	800e892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d001      	beq.n	800e5fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e044      	b.n	800e684 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	613b      	str	r3, [r7, #16]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	695b      	ldr	r3, [r3, #20]
 800e604:	613b      	str	r3, [r7, #16]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	699b      	ldr	r3, [r3, #24]
 800e60c:	613b      	str	r3, [r7, #16]
 800e60e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e61e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f000 f8d9 	bl	800e7e4 <I2C_WaitOnFlagUntilTimeout>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00d      	beq.n	800e654 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e646:	d103      	bne.n	800e650 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e64e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e650:	2303      	movs	r3, #3
 800e652:	e017      	b.n	800e684 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e654:	897b      	ldrh	r3, [r7, #10]
 800e656:	11db      	asrs	r3, r3, #7
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	f003 0306 	and.w	r3, r3, #6
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	f063 030e 	orn	r3, r3, #14
 800e664:	b2da      	uxtb	r2, r3
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	4907      	ldr	r1, [pc, #28]	; (800e690 <I2C_MasterRequestRead+0x198>)
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f000 f90d 	bl	800e892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d001      	beq.n	800e682 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e67e:	2301      	movs	r3, #1
 800e680:	e000      	b.n	800e684 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	00010008 	.word	0x00010008
 800e690:	00010002 	.word	0x00010002

0800e694 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b086      	sub	sp, #24
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e69c:	2300      	movs	r3, #0
 800e69e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e6ae:	4b4b      	ldr	r3, [pc, #300]	; (800e7dc <I2C_DMAAbort+0x148>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	08db      	lsrs	r3, r3, #3
 800e6b4:	4a4a      	ldr	r2, [pc, #296]	; (800e7e0 <I2C_DMAAbort+0x14c>)
 800e6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ba:	0a1a      	lsrs	r2, r3, #8
 800e6bc:	4613      	mov	r3, r2
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	00da      	lsls	r2, r3, #3
 800e6c4:	1ad3      	subs	r3, r2, r3
 800e6c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d106      	bne.n	800e6dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d2:	f043 0220 	orr.w	r2, r3, #32
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800e6da:	e00a      	b.n	800e6f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6f0:	d0ea      	beq.n	800e6c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d003      	beq.n	800e702 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6fe:	2200      	movs	r2, #0
 800e700:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e706:	2b00      	cmp	r3, #0
 800e708:	d003      	beq.n	800e712 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e70e:	2200      	movs	r2, #0
 800e710:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e720:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	2200      	movs	r2, #0
 800e726:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d003      	beq.n	800e738 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e734:	2200      	movs	r2, #0
 800e736:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d003      	beq.n	800e748 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e744:	2200      	movs	r2, #0
 800e746:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f022 0201 	bic.w	r2, r2, #1
 800e756:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	2b60      	cmp	r3, #96	; 0x60
 800e762:	d10e      	bne.n	800e782 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	2220      	movs	r2, #32
 800e768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	2200      	movs	r2, #0
 800e770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	2200      	movs	r2, #0
 800e778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e77a:	6978      	ldr	r0, [r7, #20]
 800e77c:	f7fe fcca 	bl	800d114 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e780:	e027      	b.n	800e7d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e782:	7cfb      	ldrb	r3, [r7, #19]
 800e784:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e788:	2b28      	cmp	r3, #40	; 0x28
 800e78a:	d117      	bne.n	800e7bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f042 0201 	orr.w	r2, r2, #1
 800e79a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e7aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	2228      	movs	r2, #40	; 0x28
 800e7b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e7ba:	e007      	b.n	800e7cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	2220      	movs	r2, #32
 800e7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e7cc:	6978      	ldr	r0, [r7, #20]
 800e7ce:	f7fe fc97 	bl	800d100 <HAL_I2C_ErrorCallback>
}
 800e7d2:	bf00      	nop
 800e7d4:	3718      	adds	r7, #24
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	20000310 	.word	0x20000310
 800e7e0:	14f8b589 	.word	0x14f8b589

0800e7e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	603b      	str	r3, [r7, #0]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e7f4:	e025      	b.n	800e842 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7fc:	d021      	beq.n	800e842 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7fe:	f7fd fa5b 	bl	800bcb8 <HAL_GetTick>
 800e802:	4602      	mov	r2, r0
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	1ad3      	subs	r3, r2, r3
 800e808:	683a      	ldr	r2, [r7, #0]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d302      	bcc.n	800e814 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d116      	bne.n	800e842 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2200      	movs	r2, #0
 800e818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2220      	movs	r2, #32
 800e81e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e82e:	f043 0220 	orr.w	r2, r3, #32
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2200      	movs	r2, #0
 800e83a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e83e:	2301      	movs	r3, #1
 800e840:	e023      	b.n	800e88a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	0c1b      	lsrs	r3, r3, #16
 800e846:	b2db      	uxtb	r3, r3
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d10d      	bne.n	800e868 <I2C_WaitOnFlagUntilTimeout+0x84>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	695b      	ldr	r3, [r3, #20]
 800e852:	43da      	mvns	r2, r3
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	4013      	ands	r3, r2
 800e858:	b29b      	uxth	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	bf0c      	ite	eq
 800e85e:	2301      	moveq	r3, #1
 800e860:	2300      	movne	r3, #0
 800e862:	b2db      	uxtb	r3, r3
 800e864:	461a      	mov	r2, r3
 800e866:	e00c      	b.n	800e882 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	699b      	ldr	r3, [r3, #24]
 800e86e:	43da      	mvns	r2, r3
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	4013      	ands	r3, r2
 800e874:	b29b      	uxth	r3, r3
 800e876:	2b00      	cmp	r3, #0
 800e878:	bf0c      	ite	eq
 800e87a:	2301      	moveq	r3, #1
 800e87c:	2300      	movne	r3, #0
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	461a      	mov	r2, r3
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	429a      	cmp	r2, r3
 800e886:	d0b6      	beq.n	800e7f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e888:	2300      	movs	r3, #0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b084      	sub	sp, #16
 800e896:	af00      	add	r7, sp, #0
 800e898:	60f8      	str	r0, [r7, #12]
 800e89a:	60b9      	str	r1, [r7, #8]
 800e89c:	607a      	str	r2, [r7, #4]
 800e89e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e8a0:	e051      	b.n	800e946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	695b      	ldr	r3, [r3, #20]
 800e8a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8b0:	d123      	bne.n	800e8fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e8ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2220      	movs	r2, #32
 800e8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e6:	f043 0204 	orr.w	r2, r3, #4
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e046      	b.n	800e988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e900:	d021      	beq.n	800e946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e902:	f7fd f9d9 	bl	800bcb8 <HAL_GetTick>
 800e906:	4602      	mov	r2, r0
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d302      	bcc.n	800e918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d116      	bne.n	800e946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2200      	movs	r2, #0
 800e91c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2220      	movs	r2, #32
 800e922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e932:	f043 0220 	orr.w	r2, r3, #32
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	e020      	b.n	800e988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	0c1b      	lsrs	r3, r3, #16
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d10c      	bne.n	800e96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	43da      	mvns	r2, r3
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	4013      	ands	r3, r2
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	bf14      	ite	ne
 800e962:	2301      	movne	r3, #1
 800e964:	2300      	moveq	r3, #0
 800e966:	b2db      	uxtb	r3, r3
 800e968:	e00b      	b.n	800e982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	699b      	ldr	r3, [r3, #24]
 800e970:	43da      	mvns	r2, r3
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	4013      	ands	r3, r2
 800e976:	b29b      	uxth	r3, r3
 800e978:	2b00      	cmp	r3, #0
 800e97a:	bf14      	ite	ne
 800e97c:	2301      	movne	r3, #1
 800e97e:	2300      	moveq	r3, #0
 800e980:	b2db      	uxtb	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	d18d      	bne.n	800e8a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e986:	2300      	movs	r3, #0
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3710      	adds	r7, #16
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e99c:	e02d      	b.n	800e9fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f000 f900 	bl	800eba4 <I2C_IsAcknowledgeFailed>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d001      	beq.n	800e9ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e02d      	b.n	800ea0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b4:	d021      	beq.n	800e9fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9b6:	f7fd f97f 	bl	800bcb8 <HAL_GetTick>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d302      	bcc.n	800e9cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d116      	bne.n	800e9fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2220      	movs	r2, #32
 800e9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9e6:	f043 0220 	orr.w	r2, r3, #32
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e007      	b.n	800ea0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	695b      	ldr	r3, [r3, #20]
 800ea00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea04:	2b80      	cmp	r3, #128	; 0x80
 800ea06:	d1ca      	bne.n	800e99e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3710      	adds	r7, #16
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b084      	sub	sp, #16
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	60f8      	str	r0, [r7, #12]
 800ea1a:	60b9      	str	r1, [r7, #8]
 800ea1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ea1e:	e02d      	b.n	800ea7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f000 f8bf 	bl	800eba4 <I2C_IsAcknowledgeFailed>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e02d      	b.n	800ea8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea36:	d021      	beq.n	800ea7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea38:	f7fd f93e 	bl	800bcb8 <HAL_GetTick>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	1ad3      	subs	r3, r2, r3
 800ea42:	68ba      	ldr	r2, [r7, #8]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d302      	bcc.n	800ea4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d116      	bne.n	800ea7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2220      	movs	r2, #32
 800ea58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea68:	f043 0220 	orr.w	r2, r3, #32
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e007      	b.n	800ea8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	f003 0304 	and.w	r3, r3, #4
 800ea86:	2b04      	cmp	r3, #4
 800ea88:	d1ca      	bne.n	800ea20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ea8a:	2300      	movs	r3, #0
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3710      	adds	r7, #16
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800eaa0:	4b13      	ldr	r3, [pc, #76]	; (800eaf0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	08db      	lsrs	r3, r3, #3
 800eaa6:	4a13      	ldr	r2, [pc, #76]	; (800eaf4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800eaa8:	fba2 2303 	umull	r2, r3, r2, r3
 800eaac:	0a1a      	lsrs	r2, r3, #8
 800eaae:	4613      	mov	r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	4413      	add	r3, r2
 800eab4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d107      	bne.n	800ead2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac6:	f043 0220 	orr.w	r2, r3, #32
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800eace:	2301      	movs	r3, #1
 800ead0:	e008      	b.n	800eae4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eadc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eae0:	d0e9      	beq.n	800eab6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	20000310 	.word	0x20000310
 800eaf4:	14f8b589 	.word	0x14f8b589

0800eaf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800eb04:	e042      	b.n	800eb8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	695b      	ldr	r3, [r3, #20]
 800eb0c:	f003 0310 	and.w	r3, r3, #16
 800eb10:	2b10      	cmp	r3, #16
 800eb12:	d119      	bne.n	800eb48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f06f 0210 	mvn.w	r2, #16
 800eb1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2220      	movs	r2, #32
 800eb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eb44:	2301      	movs	r3, #1
 800eb46:	e029      	b.n	800eb9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb48:	f7fd f8b6 	bl	800bcb8 <HAL_GetTick>
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	68ba      	ldr	r2, [r7, #8]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d302      	bcc.n	800eb5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d116      	bne.n	800eb8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2200      	movs	r2, #0
 800eb62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2220      	movs	r2, #32
 800eb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb78:	f043 0220 	orr.w	r2, r3, #32
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e007      	b.n	800eb9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	695b      	ldr	r3, [r3, #20]
 800eb92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb96:	2b40      	cmp	r3, #64	; 0x40
 800eb98:	d1b5      	bne.n	800eb06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	695b      	ldr	r3, [r3, #20]
 800ebb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebba:	d11b      	bne.n	800ebf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ebc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2220      	movs	r2, #32
 800ebd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe0:	f043 0204 	orr.w	r2, r3, #4
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	e000      	b.n	800ebf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ebf4:	2300      	movs	r3, #0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	370c      	adds	r7, #12
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr

0800ec02 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ec02:	b480      	push	{r7}
 800ec04:	b083      	sub	sp, #12
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ec12:	d103      	bne.n	800ec1c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ec1a:	e007      	b.n	800ec2c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ec24:	d102      	bne.n	800ec2c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2208      	movs	r2, #8
 800ec2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ec2c:	bf00      	nop
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b086      	sub	sp, #24
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d101      	bne.n	800ec4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ec46:	2301      	movs	r3, #1
 800ec48:	e267      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f003 0301 	and.w	r3, r3, #1
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d075      	beq.n	800ed42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ec56:	4b88      	ldr	r3, [pc, #544]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ec58:	689b      	ldr	r3, [r3, #8]
 800ec5a:	f003 030c 	and.w	r3, r3, #12
 800ec5e:	2b04      	cmp	r3, #4
 800ec60:	d00c      	beq.n	800ec7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ec62:	4b85      	ldr	r3, [pc, #532]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ec6a:	2b08      	cmp	r3, #8
 800ec6c:	d112      	bne.n	800ec94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ec6e:	4b82      	ldr	r3, [pc, #520]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec7a:	d10b      	bne.n	800ec94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ec7c:	4b7e      	ldr	r3, [pc, #504]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d05b      	beq.n	800ed40 <HAL_RCC_OscConfig+0x108>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d157      	bne.n	800ed40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ec90:	2301      	movs	r3, #1
 800ec92:	e242      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec9c:	d106      	bne.n	800ecac <HAL_RCC_OscConfig+0x74>
 800ec9e:	4b76      	ldr	r3, [pc, #472]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a75      	ldr	r2, [pc, #468]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800eca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eca8:	6013      	str	r3, [r2, #0]
 800ecaa:	e01d      	b.n	800ece8 <HAL_RCC_OscConfig+0xb0>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ecb4:	d10c      	bne.n	800ecd0 <HAL_RCC_OscConfig+0x98>
 800ecb6:	4b70      	ldr	r3, [pc, #448]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4a6f      	ldr	r2, [pc, #444]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	4b6d      	ldr	r3, [pc, #436]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4a6c      	ldr	r2, [pc, #432]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eccc:	6013      	str	r3, [r2, #0]
 800ecce:	e00b      	b.n	800ece8 <HAL_RCC_OscConfig+0xb0>
 800ecd0:	4b69      	ldr	r3, [pc, #420]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a68      	ldr	r2, [pc, #416]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ecda:	6013      	str	r3, [r2, #0]
 800ecdc:	4b66      	ldr	r3, [pc, #408]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a65      	ldr	r2, [pc, #404]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ece2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ece6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d013      	beq.n	800ed18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecf0:	f7fc ffe2 	bl	800bcb8 <HAL_GetTick>
 800ecf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecf6:	e008      	b.n	800ed0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ecf8:	f7fc ffde 	bl	800bcb8 <HAL_GetTick>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	2b64      	cmp	r3, #100	; 0x64
 800ed04:	d901      	bls.n	800ed0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ed06:	2303      	movs	r3, #3
 800ed08:	e207      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed0a:	4b5b      	ldr	r3, [pc, #364]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d0f0      	beq.n	800ecf8 <HAL_RCC_OscConfig+0xc0>
 800ed16:	e014      	b.n	800ed42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed18:	f7fc ffce 	bl	800bcb8 <HAL_GetTick>
 800ed1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ed1e:	e008      	b.n	800ed32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ed20:	f7fc ffca 	bl	800bcb8 <HAL_GetTick>
 800ed24:	4602      	mov	r2, r0
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	2b64      	cmp	r3, #100	; 0x64
 800ed2c:	d901      	bls.n	800ed32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ed2e:	2303      	movs	r3, #3
 800ed30:	e1f3      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ed32:	4b51      	ldr	r3, [pc, #324]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d1f0      	bne.n	800ed20 <HAL_RCC_OscConfig+0xe8>
 800ed3e:	e000      	b.n	800ed42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ed40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f003 0302 	and.w	r3, r3, #2
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d063      	beq.n	800ee16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ed4e:	4b4a      	ldr	r3, [pc, #296]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	f003 030c 	and.w	r3, r3, #12
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00b      	beq.n	800ed72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ed5a:	4b47      	ldr	r3, [pc, #284]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ed62:	2b08      	cmp	r3, #8
 800ed64:	d11c      	bne.n	800eda0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ed66:	4b44      	ldr	r3, [pc, #272]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d116      	bne.n	800eda0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ed72:	4b41      	ldr	r3, [pc, #260]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 0302 	and.w	r3, r3, #2
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d005      	beq.n	800ed8a <HAL_RCC_OscConfig+0x152>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d001      	beq.n	800ed8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ed86:	2301      	movs	r3, #1
 800ed88:	e1c7      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed8a:	4b3b      	ldr	r3, [pc, #236]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	691b      	ldr	r3, [r3, #16]
 800ed96:	00db      	lsls	r3, r3, #3
 800ed98:	4937      	ldr	r1, [pc, #220]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ed9e:	e03a      	b.n	800ee16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d020      	beq.n	800edea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eda8:	4b34      	ldr	r3, [pc, #208]	; (800ee7c <HAL_RCC_OscConfig+0x244>)
 800edaa:	2201      	movs	r2, #1
 800edac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edae:	f7fc ff83 	bl	800bcb8 <HAL_GetTick>
 800edb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800edb4:	e008      	b.n	800edc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800edb6:	f7fc ff7f 	bl	800bcb8 <HAL_GetTick>
 800edba:	4602      	mov	r2, r0
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	1ad3      	subs	r3, r2, r3
 800edc0:	2b02      	cmp	r3, #2
 800edc2:	d901      	bls.n	800edc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800edc4:	2303      	movs	r3, #3
 800edc6:	e1a8      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800edc8:	4b2b      	ldr	r3, [pc, #172]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f003 0302 	and.w	r3, r3, #2
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d0f0      	beq.n	800edb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800edd4:	4b28      	ldr	r3, [pc, #160]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	691b      	ldr	r3, [r3, #16]
 800ede0:	00db      	lsls	r3, r3, #3
 800ede2:	4925      	ldr	r1, [pc, #148]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ede4:	4313      	orrs	r3, r2
 800ede6:	600b      	str	r3, [r1, #0]
 800ede8:	e015      	b.n	800ee16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800edea:	4b24      	ldr	r3, [pc, #144]	; (800ee7c <HAL_RCC_OscConfig+0x244>)
 800edec:	2200      	movs	r2, #0
 800edee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edf0:	f7fc ff62 	bl	800bcb8 <HAL_GetTick>
 800edf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800edf6:	e008      	b.n	800ee0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800edf8:	f7fc ff5e 	bl	800bcb8 <HAL_GetTick>
 800edfc:	4602      	mov	r2, r0
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d901      	bls.n	800ee0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ee06:	2303      	movs	r3, #3
 800ee08:	e187      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ee0a:	4b1b      	ldr	r3, [pc, #108]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f003 0302 	and.w	r3, r3, #2
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1f0      	bne.n	800edf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f003 0308 	and.w	r3, r3, #8
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d036      	beq.n	800ee90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	695b      	ldr	r3, [r3, #20]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d016      	beq.n	800ee58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ee2a:	4b15      	ldr	r3, [pc, #84]	; (800ee80 <HAL_RCC_OscConfig+0x248>)
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee30:	f7fc ff42 	bl	800bcb8 <HAL_GetTick>
 800ee34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ee36:	e008      	b.n	800ee4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ee38:	f7fc ff3e 	bl	800bcb8 <HAL_GetTick>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	1ad3      	subs	r3, r2, r3
 800ee42:	2b02      	cmp	r3, #2
 800ee44:	d901      	bls.n	800ee4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ee46:	2303      	movs	r3, #3
 800ee48:	e167      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ee4a:	4b0b      	ldr	r3, [pc, #44]	; (800ee78 <HAL_RCC_OscConfig+0x240>)
 800ee4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee4e:	f003 0302 	and.w	r3, r3, #2
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d0f0      	beq.n	800ee38 <HAL_RCC_OscConfig+0x200>
 800ee56:	e01b      	b.n	800ee90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ee58:	4b09      	ldr	r3, [pc, #36]	; (800ee80 <HAL_RCC_OscConfig+0x248>)
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ee5e:	f7fc ff2b 	bl	800bcb8 <HAL_GetTick>
 800ee62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ee64:	e00e      	b.n	800ee84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ee66:	f7fc ff27 	bl	800bcb8 <HAL_GetTick>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d907      	bls.n	800ee84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ee74:	2303      	movs	r3, #3
 800ee76:	e150      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
 800ee78:	40023800 	.word	0x40023800
 800ee7c:	42470000 	.word	0x42470000
 800ee80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ee84:	4b88      	ldr	r3, [pc, #544]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ee86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee88:	f003 0302 	and.w	r3, r3, #2
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1ea      	bne.n	800ee66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f003 0304 	and.w	r3, r3, #4
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 8097 	beq.w	800efcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eea2:	4b81      	ldr	r3, [pc, #516]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800eea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d10f      	bne.n	800eece <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eeae:	2300      	movs	r3, #0
 800eeb0:	60bb      	str	r3, [r7, #8]
 800eeb2:	4b7d      	ldr	r3, [pc, #500]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800eeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeb6:	4a7c      	ldr	r2, [pc, #496]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800eeb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eebc:	6413      	str	r3, [r2, #64]	; 0x40
 800eebe:	4b7a      	ldr	r3, [pc, #488]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800eec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eec6:	60bb      	str	r3, [r7, #8]
 800eec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800eeca:	2301      	movs	r3, #1
 800eecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eece:	4b77      	ldr	r3, [pc, #476]	; (800f0ac <HAL_RCC_OscConfig+0x474>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d118      	bne.n	800ef0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eeda:	4b74      	ldr	r3, [pc, #464]	; (800f0ac <HAL_RCC_OscConfig+0x474>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4a73      	ldr	r2, [pc, #460]	; (800f0ac <HAL_RCC_OscConfig+0x474>)
 800eee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eee6:	f7fc fee7 	bl	800bcb8 <HAL_GetTick>
 800eeea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eeec:	e008      	b.n	800ef00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eeee:	f7fc fee3 	bl	800bcb8 <HAL_GetTick>
 800eef2:	4602      	mov	r2, r0
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	1ad3      	subs	r3, r2, r3
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d901      	bls.n	800ef00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800eefc:	2303      	movs	r3, #3
 800eefe:	e10c      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ef00:	4b6a      	ldr	r3, [pc, #424]	; (800f0ac <HAL_RCC_OscConfig+0x474>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d0f0      	beq.n	800eeee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d106      	bne.n	800ef22 <HAL_RCC_OscConfig+0x2ea>
 800ef14:	4b64      	ldr	r3, [pc, #400]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef18:	4a63      	ldr	r2, [pc, #396]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef1a:	f043 0301 	orr.w	r3, r3, #1
 800ef1e:	6713      	str	r3, [r2, #112]	; 0x70
 800ef20:	e01c      	b.n	800ef5c <HAL_RCC_OscConfig+0x324>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	2b05      	cmp	r3, #5
 800ef28:	d10c      	bne.n	800ef44 <HAL_RCC_OscConfig+0x30c>
 800ef2a:	4b5f      	ldr	r3, [pc, #380]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef2e:	4a5e      	ldr	r2, [pc, #376]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef30:	f043 0304 	orr.w	r3, r3, #4
 800ef34:	6713      	str	r3, [r2, #112]	; 0x70
 800ef36:	4b5c      	ldr	r3, [pc, #368]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef3a:	4a5b      	ldr	r2, [pc, #364]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef3c:	f043 0301 	orr.w	r3, r3, #1
 800ef40:	6713      	str	r3, [r2, #112]	; 0x70
 800ef42:	e00b      	b.n	800ef5c <HAL_RCC_OscConfig+0x324>
 800ef44:	4b58      	ldr	r3, [pc, #352]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef48:	4a57      	ldr	r2, [pc, #348]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef4a:	f023 0301 	bic.w	r3, r3, #1
 800ef4e:	6713      	str	r3, [r2, #112]	; 0x70
 800ef50:	4b55      	ldr	r3, [pc, #340]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef54:	4a54      	ldr	r2, [pc, #336]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef56:	f023 0304 	bic.w	r3, r3, #4
 800ef5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	689b      	ldr	r3, [r3, #8]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d015      	beq.n	800ef90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef64:	f7fc fea8 	bl	800bcb8 <HAL_GetTick>
 800ef68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef6a:	e00a      	b.n	800ef82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ef6c:	f7fc fea4 	bl	800bcb8 <HAL_GetTick>
 800ef70:	4602      	mov	r2, r0
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d901      	bls.n	800ef82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ef7e:	2303      	movs	r3, #3
 800ef80:	e0cb      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef82:	4b49      	ldr	r3, [pc, #292]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800ef84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef86:	f003 0302 	and.w	r3, r3, #2
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d0ee      	beq.n	800ef6c <HAL_RCC_OscConfig+0x334>
 800ef8e:	e014      	b.n	800efba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef90:	f7fc fe92 	bl	800bcb8 <HAL_GetTick>
 800ef94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ef96:	e00a      	b.n	800efae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ef98:	f7fc fe8e 	bl	800bcb8 <HAL_GetTick>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	1ad3      	subs	r3, r2, r3
 800efa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d901      	bls.n	800efae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800efaa:	2303      	movs	r3, #3
 800efac:	e0b5      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800efae:	4b3e      	ldr	r3, [pc, #248]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800efb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efb2:	f003 0302 	and.w	r3, r3, #2
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1ee      	bne.n	800ef98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800efba:	7dfb      	ldrb	r3, [r7, #23]
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d105      	bne.n	800efcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800efc0:	4b39      	ldr	r3, [pc, #228]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800efc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efc4:	4a38      	ldr	r2, [pc, #224]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800efc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800efca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	699b      	ldr	r3, [r3, #24]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f000 80a1 	beq.w	800f118 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800efd6:	4b34      	ldr	r3, [pc, #208]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800efd8:	689b      	ldr	r3, [r3, #8]
 800efda:	f003 030c 	and.w	r3, r3, #12
 800efde:	2b08      	cmp	r3, #8
 800efe0:	d05c      	beq.n	800f09c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	699b      	ldr	r3, [r3, #24]
 800efe6:	2b02      	cmp	r3, #2
 800efe8:	d141      	bne.n	800f06e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800efea:	4b31      	ldr	r3, [pc, #196]	; (800f0b0 <HAL_RCC_OscConfig+0x478>)
 800efec:	2200      	movs	r2, #0
 800efee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eff0:	f7fc fe62 	bl	800bcb8 <HAL_GetTick>
 800eff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eff6:	e008      	b.n	800f00a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eff8:	f7fc fe5e 	bl	800bcb8 <HAL_GetTick>
 800effc:	4602      	mov	r2, r0
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	2b02      	cmp	r3, #2
 800f004:	d901      	bls.n	800f00a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f006:	2303      	movs	r3, #3
 800f008:	e087      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f00a:	4b27      	ldr	r3, [pc, #156]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1f0      	bne.n	800eff8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	69da      	ldr	r2, [r3, #28]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6a1b      	ldr	r3, [r3, #32]
 800f01e:	431a      	orrs	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f024:	019b      	lsls	r3, r3, #6
 800f026:	431a      	orrs	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f02c:	085b      	lsrs	r3, r3, #1
 800f02e:	3b01      	subs	r3, #1
 800f030:	041b      	lsls	r3, r3, #16
 800f032:	431a      	orrs	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f038:	061b      	lsls	r3, r3, #24
 800f03a:	491b      	ldr	r1, [pc, #108]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800f03c:	4313      	orrs	r3, r2
 800f03e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f040:	4b1b      	ldr	r3, [pc, #108]	; (800f0b0 <HAL_RCC_OscConfig+0x478>)
 800f042:	2201      	movs	r2, #1
 800f044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f046:	f7fc fe37 	bl	800bcb8 <HAL_GetTick>
 800f04a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f04c:	e008      	b.n	800f060 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f04e:	f7fc fe33 	bl	800bcb8 <HAL_GetTick>
 800f052:	4602      	mov	r2, r0
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d901      	bls.n	800f060 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f05c:	2303      	movs	r3, #3
 800f05e:	e05c      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f060:	4b11      	ldr	r3, [pc, #68]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d0f0      	beq.n	800f04e <HAL_RCC_OscConfig+0x416>
 800f06c:	e054      	b.n	800f118 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f06e:	4b10      	ldr	r3, [pc, #64]	; (800f0b0 <HAL_RCC_OscConfig+0x478>)
 800f070:	2200      	movs	r2, #0
 800f072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f074:	f7fc fe20 	bl	800bcb8 <HAL_GetTick>
 800f078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f07a:	e008      	b.n	800f08e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f07c:	f7fc fe1c 	bl	800bcb8 <HAL_GetTick>
 800f080:	4602      	mov	r2, r0
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	1ad3      	subs	r3, r2, r3
 800f086:	2b02      	cmp	r3, #2
 800f088:	d901      	bls.n	800f08e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f08a:	2303      	movs	r3, #3
 800f08c:	e045      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f08e:	4b06      	ldr	r3, [pc, #24]	; (800f0a8 <HAL_RCC_OscConfig+0x470>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1f0      	bne.n	800f07c <HAL_RCC_OscConfig+0x444>
 800f09a:	e03d      	b.n	800f118 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	699b      	ldr	r3, [r3, #24]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d107      	bne.n	800f0b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e038      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
 800f0a8:	40023800 	.word	0x40023800
 800f0ac:	40007000 	.word	0x40007000
 800f0b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f0b4:	4b1b      	ldr	r3, [pc, #108]	; (800f124 <HAL_RCC_OscConfig+0x4ec>)
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	699b      	ldr	r3, [r3, #24]
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d028      	beq.n	800f114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d121      	bne.n	800f114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d11a      	bne.n	800f114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f0de:	68fa      	ldr	r2, [r7, #12]
 800f0e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f0e4:	4013      	ands	r3, r2
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f0ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d111      	bne.n	800f114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0fa:	085b      	lsrs	r3, r3, #1
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f100:	429a      	cmp	r2, r3
 800f102:	d107      	bne.n	800f114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f110:	429a      	cmp	r2, r3
 800f112:	d001      	beq.n	800f118 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800f114:	2301      	movs	r3, #1
 800f116:	e000      	b.n	800f11a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3718      	adds	r7, #24
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	40023800 	.word	0x40023800

0800f128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d101      	bne.n	800f13c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f138:	2301      	movs	r3, #1
 800f13a:	e0cc      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f13c:	4b68      	ldr	r3, [pc, #416]	; (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f003 0307 	and.w	r3, r3, #7
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	429a      	cmp	r2, r3
 800f148:	d90c      	bls.n	800f164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f14a:	4b65      	ldr	r3, [pc, #404]	; (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f14c:	683a      	ldr	r2, [r7, #0]
 800f14e:	b2d2      	uxtb	r2, r2
 800f150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f152:	4b63      	ldr	r3, [pc, #396]	; (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f003 0307 	and.w	r3, r3, #7
 800f15a:	683a      	ldr	r2, [r7, #0]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d001      	beq.n	800f164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f160:	2301      	movs	r3, #1
 800f162:	e0b8      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f003 0302 	and.w	r3, r3, #2
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d020      	beq.n	800f1b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f003 0304 	and.w	r3, r3, #4
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d005      	beq.n	800f188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f17c:	4b59      	ldr	r3, [pc, #356]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f17e:	689b      	ldr	r3, [r3, #8]
 800f180:	4a58      	ldr	r2, [pc, #352]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f003 0308 	and.w	r3, r3, #8
 800f190:	2b00      	cmp	r3, #0
 800f192:	d005      	beq.n	800f1a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f194:	4b53      	ldr	r3, [pc, #332]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	4a52      	ldr	r2, [pc, #328]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f19a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f19e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f1a0:	4b50      	ldr	r3, [pc, #320]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f1a2:	689b      	ldr	r3, [r3, #8]
 800f1a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	494d      	ldr	r1, [pc, #308]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f003 0301 	and.w	r3, r3, #1
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d044      	beq.n	800f248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d107      	bne.n	800f1d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f1c6:	4b47      	ldr	r3, [pc, #284]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d119      	bne.n	800f206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e07f      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d003      	beq.n	800f1e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f1e2:	2b03      	cmp	r3, #3
 800f1e4:	d107      	bne.n	800f1f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f1e6:	4b3f      	ldr	r3, [pc, #252]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d109      	bne.n	800f206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e06f      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f1f6:	4b3b      	ldr	r3, [pc, #236]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f003 0302 	and.w	r3, r3, #2
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	e067      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f206:	4b37      	ldr	r3, [pc, #220]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f208:	689b      	ldr	r3, [r3, #8]
 800f20a:	f023 0203 	bic.w	r2, r3, #3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	4934      	ldr	r1, [pc, #208]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f214:	4313      	orrs	r3, r2
 800f216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f218:	f7fc fd4e 	bl	800bcb8 <HAL_GetTick>
 800f21c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f21e:	e00a      	b.n	800f236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f220:	f7fc fd4a 	bl	800bcb8 <HAL_GetTick>
 800f224:	4602      	mov	r2, r0
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f22e:	4293      	cmp	r3, r2
 800f230:	d901      	bls.n	800f236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f232:	2303      	movs	r3, #3
 800f234:	e04f      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f236:	4b2b      	ldr	r3, [pc, #172]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	f003 020c 	and.w	r2, r3, #12
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	429a      	cmp	r2, r3
 800f246:	d1eb      	bne.n	800f220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f248:	4b25      	ldr	r3, [pc, #148]	; (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f003 0307 	and.w	r3, r3, #7
 800f250:	683a      	ldr	r2, [r7, #0]
 800f252:	429a      	cmp	r2, r3
 800f254:	d20c      	bcs.n	800f270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f256:	4b22      	ldr	r3, [pc, #136]	; (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f258:	683a      	ldr	r2, [r7, #0]
 800f25a:	b2d2      	uxtb	r2, r2
 800f25c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f25e:	4b20      	ldr	r3, [pc, #128]	; (800f2e0 <HAL_RCC_ClockConfig+0x1b8>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f003 0307 	and.w	r3, r3, #7
 800f266:	683a      	ldr	r2, [r7, #0]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d001      	beq.n	800f270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f26c:	2301      	movs	r3, #1
 800f26e:	e032      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f003 0304 	and.w	r3, r3, #4
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d008      	beq.n	800f28e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f27c:	4b19      	ldr	r3, [pc, #100]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	4916      	ldr	r1, [pc, #88]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f28a:	4313      	orrs	r3, r2
 800f28c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f003 0308 	and.w	r3, r3, #8
 800f296:	2b00      	cmp	r3, #0
 800f298:	d009      	beq.n	800f2ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f29a:	4b12      	ldr	r3, [pc, #72]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	00db      	lsls	r3, r3, #3
 800f2a8:	490e      	ldr	r1, [pc, #56]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f2ae:	f000 f821 	bl	800f2f4 <HAL_RCC_GetSysClockFreq>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	4b0b      	ldr	r3, [pc, #44]	; (800f2e4 <HAL_RCC_ClockConfig+0x1bc>)
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	091b      	lsrs	r3, r3, #4
 800f2ba:	f003 030f 	and.w	r3, r3, #15
 800f2be:	490a      	ldr	r1, [pc, #40]	; (800f2e8 <HAL_RCC_ClockConfig+0x1c0>)
 800f2c0:	5ccb      	ldrb	r3, [r1, r3]
 800f2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2c6:	4a09      	ldr	r2, [pc, #36]	; (800f2ec <HAL_RCC_ClockConfig+0x1c4>)
 800f2c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f2ca:	4b09      	ldr	r3, [pc, #36]	; (800f2f0 <HAL_RCC_ClockConfig+0x1c8>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fc fae6 	bl	800b8a0 <HAL_InitTick>

  return HAL_OK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	40023c00 	.word	0x40023c00
 800f2e4:	40023800 	.word	0x40023800
 800f2e8:	0801a6bc 	.word	0x0801a6bc
 800f2ec:	20000310 	.word	0x20000310
 800f2f0:	20000314 	.word	0x20000314

0800f2f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f2f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2f8:	b094      	sub	sp, #80	; 0x50
 800f2fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	647b      	str	r3, [r7, #68]	; 0x44
 800f300:	2300      	movs	r3, #0
 800f302:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f304:	2300      	movs	r3, #0
 800f306:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800f308:	2300      	movs	r3, #0
 800f30a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f30c:	4b79      	ldr	r3, [pc, #484]	; (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f30e:	689b      	ldr	r3, [r3, #8]
 800f310:	f003 030c 	and.w	r3, r3, #12
 800f314:	2b08      	cmp	r3, #8
 800f316:	d00d      	beq.n	800f334 <HAL_RCC_GetSysClockFreq+0x40>
 800f318:	2b08      	cmp	r3, #8
 800f31a:	f200 80e1 	bhi.w	800f4e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d002      	beq.n	800f328 <HAL_RCC_GetSysClockFreq+0x34>
 800f322:	2b04      	cmp	r3, #4
 800f324:	d003      	beq.n	800f32e <HAL_RCC_GetSysClockFreq+0x3a>
 800f326:	e0db      	b.n	800f4e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f328:	4b73      	ldr	r3, [pc, #460]	; (800f4f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800f32a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800f32c:	e0db      	b.n	800f4e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f32e:	4b73      	ldr	r3, [pc, #460]	; (800f4fc <HAL_RCC_GetSysClockFreq+0x208>)
 800f330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800f332:	e0d8      	b.n	800f4e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f334:	4b6f      	ldr	r3, [pc, #444]	; (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f33c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f33e:	4b6d      	ldr	r3, [pc, #436]	; (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f346:	2b00      	cmp	r3, #0
 800f348:	d063      	beq.n	800f412 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f34a:	4b6a      	ldr	r3, [pc, #424]	; (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	099b      	lsrs	r3, r3, #6
 800f350:	2200      	movs	r2, #0
 800f352:	63bb      	str	r3, [r7, #56]	; 0x38
 800f354:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f35c:	633b      	str	r3, [r7, #48]	; 0x30
 800f35e:	2300      	movs	r3, #0
 800f360:	637b      	str	r3, [r7, #52]	; 0x34
 800f362:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800f366:	4622      	mov	r2, r4
 800f368:	462b      	mov	r3, r5
 800f36a:	f04f 0000 	mov.w	r0, #0
 800f36e:	f04f 0100 	mov.w	r1, #0
 800f372:	0159      	lsls	r1, r3, #5
 800f374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f378:	0150      	lsls	r0, r2, #5
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	4621      	mov	r1, r4
 800f380:	1a51      	subs	r1, r2, r1
 800f382:	6139      	str	r1, [r7, #16]
 800f384:	4629      	mov	r1, r5
 800f386:	eb63 0301 	sbc.w	r3, r3, r1
 800f38a:	617b      	str	r3, [r7, #20]
 800f38c:	f04f 0200 	mov.w	r2, #0
 800f390:	f04f 0300 	mov.w	r3, #0
 800f394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f398:	4659      	mov	r1, fp
 800f39a:	018b      	lsls	r3, r1, #6
 800f39c:	4651      	mov	r1, sl
 800f39e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f3a2:	4651      	mov	r1, sl
 800f3a4:	018a      	lsls	r2, r1, #6
 800f3a6:	4651      	mov	r1, sl
 800f3a8:	ebb2 0801 	subs.w	r8, r2, r1
 800f3ac:	4659      	mov	r1, fp
 800f3ae:	eb63 0901 	sbc.w	r9, r3, r1
 800f3b2:	f04f 0200 	mov.w	r2, #0
 800f3b6:	f04f 0300 	mov.w	r3, #0
 800f3ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f3be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f3c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f3c6:	4690      	mov	r8, r2
 800f3c8:	4699      	mov	r9, r3
 800f3ca:	4623      	mov	r3, r4
 800f3cc:	eb18 0303 	adds.w	r3, r8, r3
 800f3d0:	60bb      	str	r3, [r7, #8]
 800f3d2:	462b      	mov	r3, r5
 800f3d4:	eb49 0303 	adc.w	r3, r9, r3
 800f3d8:	60fb      	str	r3, [r7, #12]
 800f3da:	f04f 0200 	mov.w	r2, #0
 800f3de:	f04f 0300 	mov.w	r3, #0
 800f3e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	024b      	lsls	r3, r1, #9
 800f3ea:	4621      	mov	r1, r4
 800f3ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f3f0:	4621      	mov	r1, r4
 800f3f2:	024a      	lsls	r2, r1, #9
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f400:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f404:	f7f1 fbe8 	bl	8000bd8 <__aeabi_uldivmod>
 800f408:	4602      	mov	r2, r0
 800f40a:	460b      	mov	r3, r1
 800f40c:	4613      	mov	r3, r2
 800f40e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f410:	e058      	b.n	800f4c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f412:	4b38      	ldr	r3, [pc, #224]	; (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	099b      	lsrs	r3, r3, #6
 800f418:	2200      	movs	r2, #0
 800f41a:	4618      	mov	r0, r3
 800f41c:	4611      	mov	r1, r2
 800f41e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f422:	623b      	str	r3, [r7, #32]
 800f424:	2300      	movs	r3, #0
 800f426:	627b      	str	r3, [r7, #36]	; 0x24
 800f428:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f42c:	4642      	mov	r2, r8
 800f42e:	464b      	mov	r3, r9
 800f430:	f04f 0000 	mov.w	r0, #0
 800f434:	f04f 0100 	mov.w	r1, #0
 800f438:	0159      	lsls	r1, r3, #5
 800f43a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f43e:	0150      	lsls	r0, r2, #5
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	4641      	mov	r1, r8
 800f446:	ebb2 0a01 	subs.w	sl, r2, r1
 800f44a:	4649      	mov	r1, r9
 800f44c:	eb63 0b01 	sbc.w	fp, r3, r1
 800f450:	f04f 0200 	mov.w	r2, #0
 800f454:	f04f 0300 	mov.w	r3, #0
 800f458:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f45c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f460:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f464:	ebb2 040a 	subs.w	r4, r2, sl
 800f468:	eb63 050b 	sbc.w	r5, r3, fp
 800f46c:	f04f 0200 	mov.w	r2, #0
 800f470:	f04f 0300 	mov.w	r3, #0
 800f474:	00eb      	lsls	r3, r5, #3
 800f476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f47a:	00e2      	lsls	r2, r4, #3
 800f47c:	4614      	mov	r4, r2
 800f47e:	461d      	mov	r5, r3
 800f480:	4643      	mov	r3, r8
 800f482:	18e3      	adds	r3, r4, r3
 800f484:	603b      	str	r3, [r7, #0]
 800f486:	464b      	mov	r3, r9
 800f488:	eb45 0303 	adc.w	r3, r5, r3
 800f48c:	607b      	str	r3, [r7, #4]
 800f48e:	f04f 0200 	mov.w	r2, #0
 800f492:	f04f 0300 	mov.w	r3, #0
 800f496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f49a:	4629      	mov	r1, r5
 800f49c:	028b      	lsls	r3, r1, #10
 800f49e:	4621      	mov	r1, r4
 800f4a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	028a      	lsls	r2, r1, #10
 800f4a8:	4610      	mov	r0, r2
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	61bb      	str	r3, [r7, #24]
 800f4b2:	61fa      	str	r2, [r7, #28]
 800f4b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f4b8:	f7f1 fb8e 	bl	8000bd8 <__aeabi_uldivmod>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f4c4:	4b0b      	ldr	r3, [pc, #44]	; (800f4f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	0c1b      	lsrs	r3, r3, #16
 800f4ca:	f003 0303 	and.w	r3, r3, #3
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	005b      	lsls	r3, r3, #1
 800f4d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800f4d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800f4de:	e002      	b.n	800f4e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f4e0:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800f4e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800f4e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3750      	adds	r7, #80	; 0x50
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4f2:	bf00      	nop
 800f4f4:	40023800 	.word	0x40023800
 800f4f8:	00f42400 	.word	0x00f42400
 800f4fc:	007a1200 	.word	0x007a1200

0800f500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f500:	b480      	push	{r7}
 800f502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f504:	4b03      	ldr	r3, [pc, #12]	; (800f514 <HAL_RCC_GetHCLKFreq+0x14>)
 800f506:	681b      	ldr	r3, [r3, #0]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	20000310 	.word	0x20000310

0800f518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f51c:	f7ff fff0 	bl	800f500 <HAL_RCC_GetHCLKFreq>
 800f520:	4602      	mov	r2, r0
 800f522:	4b05      	ldr	r3, [pc, #20]	; (800f538 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f524:	689b      	ldr	r3, [r3, #8]
 800f526:	0a9b      	lsrs	r3, r3, #10
 800f528:	f003 0307 	and.w	r3, r3, #7
 800f52c:	4903      	ldr	r1, [pc, #12]	; (800f53c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f52e:	5ccb      	ldrb	r3, [r1, r3]
 800f530:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f534:	4618      	mov	r0, r3
 800f536:	bd80      	pop	{r7, pc}
 800f538:	40023800 	.word	0x40023800
 800f53c:	0801a6cc 	.word	0x0801a6cc

0800f540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f544:	f7ff ffdc 	bl	800f500 <HAL_RCC_GetHCLKFreq>
 800f548:	4602      	mov	r2, r0
 800f54a:	4b05      	ldr	r3, [pc, #20]	; (800f560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	0b5b      	lsrs	r3, r3, #13
 800f550:	f003 0307 	and.w	r3, r3, #7
 800f554:	4903      	ldr	r1, [pc, #12]	; (800f564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f556:	5ccb      	ldrb	r3, [r1, r3]
 800f558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	40023800 	.word	0x40023800
 800f564:	0801a6cc 	.word	0x0801a6cc

0800f568 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	220f      	movs	r2, #15
 800f576:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f578:	4b12      	ldr	r3, [pc, #72]	; (800f5c4 <HAL_RCC_GetClockConfig+0x5c>)
 800f57a:	689b      	ldr	r3, [r3, #8]
 800f57c:	f003 0203 	and.w	r2, r3, #3
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f584:	4b0f      	ldr	r3, [pc, #60]	; (800f5c4 <HAL_RCC_GetClockConfig+0x5c>)
 800f586:	689b      	ldr	r3, [r3, #8]
 800f588:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f590:	4b0c      	ldr	r3, [pc, #48]	; (800f5c4 <HAL_RCC_GetClockConfig+0x5c>)
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f59c:	4b09      	ldr	r3, [pc, #36]	; (800f5c4 <HAL_RCC_GetClockConfig+0x5c>)
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	08db      	lsrs	r3, r3, #3
 800f5a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f5aa:	4b07      	ldr	r3, [pc, #28]	; (800f5c8 <HAL_RCC_GetClockConfig+0x60>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f003 0207 	and.w	r2, r3, #7
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	601a      	str	r2, [r3, #0]
}
 800f5b6:	bf00      	nop
 800f5b8:	370c      	adds	r7, #12
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	40023800 	.word	0x40023800
 800f5c8:	40023c00 	.word	0x40023c00

0800f5cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f003 0301 	and.w	r3, r3, #1
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d105      	bne.n	800f5f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d035      	beq.n	800f660 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f5f4:	4b67      	ldr	r3, [pc, #412]	; (800f794 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f5fa:	f7fc fb5d 	bl	800bcb8 <HAL_GetTick>
 800f5fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f600:	e008      	b.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800f602:	f7fc fb59 	bl	800bcb8 <HAL_GetTick>
 800f606:	4602      	mov	r2, r0
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	2b02      	cmp	r3, #2
 800f60e:	d901      	bls.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f610:	2303      	movs	r3, #3
 800f612:	e0ba      	b.n	800f78a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f614:	4b60      	ldr	r3, [pc, #384]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d1f0      	bne.n	800f602 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	019a      	lsls	r2, r3, #6
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	689b      	ldr	r3, [r3, #8]
 800f62a:	071b      	lsls	r3, r3, #28
 800f62c:	495a      	ldr	r1, [pc, #360]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f62e:	4313      	orrs	r3, r2
 800f630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f634:	4b57      	ldr	r3, [pc, #348]	; (800f794 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800f636:	2201      	movs	r2, #1
 800f638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f63a:	f7fc fb3d 	bl	800bcb8 <HAL_GetTick>
 800f63e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f640:	e008      	b.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800f642:	f7fc fb39 	bl	800bcb8 <HAL_GetTick>
 800f646:	4602      	mov	r2, r0
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	2b02      	cmp	r3, #2
 800f64e:	d901      	bls.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f650:	2303      	movs	r3, #3
 800f652:	e09a      	b.n	800f78a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f654:	4b50      	ldr	r3, [pc, #320]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d0f0      	beq.n	800f642 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f003 0302 	and.w	r3, r3, #2
 800f668:	2b00      	cmp	r3, #0
 800f66a:	f000 8083 	beq.w	800f774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f66e:	2300      	movs	r3, #0
 800f670:	60fb      	str	r3, [r7, #12]
 800f672:	4b49      	ldr	r3, [pc, #292]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f676:	4a48      	ldr	r2, [pc, #288]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f67c:	6413      	str	r3, [r2, #64]	; 0x40
 800f67e:	4b46      	ldr	r3, [pc, #280]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f686:	60fb      	str	r3, [r7, #12]
 800f688:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800f68a:	4b44      	ldr	r3, [pc, #272]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a43      	ldr	r2, [pc, #268]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f694:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f696:	f7fc fb0f 	bl	800bcb8 <HAL_GetTick>
 800f69a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f69c:	e008      	b.n	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f69e:	f7fc fb0b 	bl	800bcb8 <HAL_GetTick>
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	1ad3      	subs	r3, r2, r3
 800f6a8:	2b02      	cmp	r3, #2
 800f6aa:	d901      	bls.n	800f6b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800f6ac:	2303      	movs	r3, #3
 800f6ae:	e06c      	b.n	800f78a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f6b0:	4b3a      	ldr	r3, [pc, #232]	; (800f79c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d0f0      	beq.n	800f69e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f6bc:	4b36      	ldr	r3, [pc, #216]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f6c6:	693b      	ldr	r3, [r7, #16]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d02f      	beq.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f6d4:	693a      	ldr	r2, [r7, #16]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d028      	beq.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f6da:	4b2f      	ldr	r3, [pc, #188]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f6e4:	4b2e      	ldr	r3, [pc, #184]	; (800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f6ea:	4b2d      	ldr	r3, [pc, #180]	; (800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800f6f0:	4a29      	ldr	r2, [pc, #164]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f6f6:	4b28      	ldr	r3, [pc, #160]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6fa:	f003 0301 	and.w	r3, r3, #1
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d114      	bne.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800f702:	f7fc fad9 	bl	800bcb8 <HAL_GetTick>
 800f706:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f708:	e00a      	b.n	800f720 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f70a:	f7fc fad5 	bl	800bcb8 <HAL_GetTick>
 800f70e:	4602      	mov	r2, r0
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	1ad3      	subs	r3, r2, r3
 800f714:	f241 3288 	movw	r2, #5000	; 0x1388
 800f718:	4293      	cmp	r3, r2
 800f71a:	d901      	bls.n	800f720 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800f71c:	2303      	movs	r3, #3
 800f71e:	e034      	b.n	800f78a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f720:	4b1d      	ldr	r3, [pc, #116]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f724:	f003 0302 	and.w	r3, r3, #2
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d0ee      	beq.n	800f70a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f738:	d10d      	bne.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800f73a:	4b17      	ldr	r3, [pc, #92]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f73c:	689b      	ldr	r3, [r3, #8]
 800f73e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f74a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f74e:	4912      	ldr	r1, [pc, #72]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f750:	4313      	orrs	r3, r2
 800f752:	608b      	str	r3, [r1, #8]
 800f754:	e005      	b.n	800f762 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800f756:	4b10      	ldr	r3, [pc, #64]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	4a0f      	ldr	r2, [pc, #60]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f75c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f760:	6093      	str	r3, [r2, #8]
 800f762:	4b0d      	ldr	r3, [pc, #52]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f76e:	490a      	ldr	r1, [pc, #40]	; (800f798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f770:	4313      	orrs	r3, r2
 800f772:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f003 0308 	and.w	r3, r3, #8
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d003      	beq.n	800f788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	7c1a      	ldrb	r2, [r3, #16]
 800f784:	4b07      	ldr	r3, [pc, #28]	; (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800f786:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800f788:	2300      	movs	r3, #0
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3718      	adds	r7, #24
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	42470068 	.word	0x42470068
 800f798:	40023800 	.word	0x40023800
 800f79c:	40007000 	.word	0x40007000
 800f7a0:	42470e40 	.word	0x42470e40
 800f7a4:	424711e0 	.word	0x424711e0

0800f7a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d101      	bne.n	800f7be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	e066      	b.n	800f88c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	7f5b      	ldrb	r3, [r3, #29]
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d105      	bne.n	800f7d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f7fb ff62 	bl	800b698 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2202      	movs	r2, #2
 800f7d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	22ca      	movs	r2, #202	; 0xca
 800f7e0:	625a      	str	r2, [r3, #36]	; 0x24
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2253      	movs	r2, #83	; 0x53
 800f7e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 fa45 	bl	800fc7a <RTC_EnterInitMode>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d12c      	bne.n	800f854 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	6812      	ldr	r2, [r2, #0]
 800f804:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f80c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	6899      	ldr	r1, [r3, #8]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	685a      	ldr	r2, [r3, #4]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	691b      	ldr	r3, [r3, #16]
 800f81c:	431a      	orrs	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	695b      	ldr	r3, [r3, #20]
 800f822:	431a      	orrs	r2, r3
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	430a      	orrs	r2, r1
 800f82a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	68d2      	ldr	r2, [r2, #12]
 800f834:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6919      	ldr	r1, [r3, #16]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	041a      	lsls	r2, r3, #16
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	430a      	orrs	r2, r1
 800f848:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 fa4c 	bl	800fce8 <RTC_ExitInitMode>
 800f850:	4603      	mov	r3, r0
 800f852:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800f854:	7bfb      	ldrb	r3, [r7, #15]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d113      	bne.n	800f882 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f868:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	699a      	ldr	r2, [r3, #24]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	430a      	orrs	r2, r1
 800f87a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2201      	movs	r2, #1
 800f880:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	22ff      	movs	r2, #255	; 0xff
 800f888:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800f88a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f894:	b590      	push	{r4, r7, lr}
 800f896:	b087      	sub	sp, #28
 800f898:	af00      	add	r7, sp, #0
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	7f1b      	ldrb	r3, [r3, #28]
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d101      	bne.n	800f8b0 <HAL_RTC_SetTime+0x1c>
 800f8ac:	2302      	movs	r3, #2
 800f8ae:	e087      	b.n	800f9c0 <HAL_RTC_SetTime+0x12c>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2202      	movs	r2, #2
 800f8ba:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d126      	bne.n	800f910 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d102      	bne.n	800f8d6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f000 fa29 	bl	800fd32 <RTC_ByteToBcd2>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	785b      	ldrb	r3, [r3, #1]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f000 fa22 	bl	800fd32 <RTC_ByteToBcd2>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f8f2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	789b      	ldrb	r3, [r3, #2]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f000 fa1a 	bl	800fd32 <RTC_ByteToBcd2>
 800f8fe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f900:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	78db      	ldrb	r3, [r3, #3]
 800f908:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f90a:	4313      	orrs	r3, r2
 800f90c:	617b      	str	r3, [r7, #20]
 800f90e:	e018      	b.n	800f942 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d102      	bne.n	800f924 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	2200      	movs	r2, #0
 800f922:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	785b      	ldrb	r3, [r3, #1]
 800f92e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800f930:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800f932:	68ba      	ldr	r2, [r7, #8]
 800f934:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800f936:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	78db      	ldrb	r3, [r3, #3]
 800f93c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800f93e:	4313      	orrs	r3, r2
 800f940:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	22ca      	movs	r2, #202	; 0xca
 800f948:	625a      	str	r2, [r3, #36]	; 0x24
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2253      	movs	r2, #83	; 0x53
 800f950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f000 f991 	bl	800fc7a <RTC_EnterInitMode>
 800f958:	4603      	mov	r3, r0
 800f95a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800f95c:	7cfb      	ldrb	r3, [r7, #19]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d120      	bne.n	800f9a4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f96c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f970:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	689a      	ldr	r2, [r3, #8]
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f980:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	6899      	ldr	r1, [r3, #8]
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	68da      	ldr	r2, [r3, #12]
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	691b      	ldr	r3, [r3, #16]
 800f990:	431a      	orrs	r2, r3
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	430a      	orrs	r2, r1
 800f998:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f99a:	68f8      	ldr	r0, [r7, #12]
 800f99c:	f000 f9a4 	bl	800fce8 <RTC_ExitInitMode>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800f9a4:	7cfb      	ldrb	r3, [r7, #19]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d102      	bne.n	800f9b0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	22ff      	movs	r2, #255	; 0xff
 800f9b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	771a      	strb	r2, [r3, #28]

  return status;
 800f9be:	7cfb      	ldrb	r3, [r7, #19]
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	371c      	adds	r7, #28
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd90      	pop	{r4, r7, pc}

0800f9c8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	691b      	ldr	r3, [r3, #16]
 800f9e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800f9fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f9fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	0c1b      	lsrs	r3, r3, #16
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa0a:	b2da      	uxtb	r2, r3
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	0a1b      	lsrs	r3, r3, #8
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa1a:	b2da      	uxtb	r2, r3
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa28:	b2da      	uxtb	r2, r3
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	0d9b      	lsrs	r3, r3, #22
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	f003 0301 	and.w	r3, r3, #1
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d11a      	bne.n	800fa7a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f000 f98f 	bl	800fd6c <RTC_Bcd2ToByte>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	461a      	mov	r2, r3
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	785b      	ldrb	r3, [r3, #1]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f000 f986 	bl	800fd6c <RTC_Bcd2ToByte>
 800fa60:	4603      	mov	r3, r0
 800fa62:	461a      	mov	r2, r3
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	789b      	ldrb	r3, [r3, #2]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f000 f97d 	bl	800fd6c <RTC_Bcd2ToByte>
 800fa72:	4603      	mov	r3, r0
 800fa74:	461a      	mov	r2, r3
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3718      	adds	r7, #24
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800fa84:	b590      	push	{r4, r7, lr}
 800fa86:	b087      	sub	sp, #28
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800fa90:	2300      	movs	r3, #0
 800fa92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	7f1b      	ldrb	r3, [r3, #28]
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d101      	bne.n	800faa0 <HAL_RTC_SetDate+0x1c>
 800fa9c:	2302      	movs	r3, #2
 800fa9e:	e071      	b.n	800fb84 <HAL_RTC_SetDate+0x100>
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2201      	movs	r2, #1
 800faa4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2202      	movs	r2, #2
 800faaa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d10e      	bne.n	800fad0 <HAL_RTC_SetDate+0x4c>
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	785b      	ldrb	r3, [r3, #1]
 800fab6:	f003 0310 	and.w	r3, r3, #16
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d008      	beq.n	800fad0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	785b      	ldrb	r3, [r3, #1]
 800fac2:	f023 0310 	bic.w	r3, r3, #16
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	330a      	adds	r3, #10
 800faca:	b2da      	uxtb	r2, r3
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d11c      	bne.n	800fb10 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	78db      	ldrb	r3, [r3, #3]
 800fada:	4618      	mov	r0, r3
 800fadc:	f000 f929 	bl	800fd32 <RTC_ByteToBcd2>
 800fae0:	4603      	mov	r3, r0
 800fae2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	785b      	ldrb	r3, [r3, #1]
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f922 	bl	800fd32 <RTC_ByteToBcd2>
 800faee:	4603      	mov	r3, r0
 800faf0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800faf2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	789b      	ldrb	r3, [r3, #2]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f000 f91a 	bl	800fd32 <RTC_ByteToBcd2>
 800fafe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800fb00:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	617b      	str	r3, [r7, #20]
 800fb0e:	e00e      	b.n	800fb2e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	78db      	ldrb	r3, [r3, #3]
 800fb14:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	785b      	ldrb	r3, [r3, #1]
 800fb1a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800fb1c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800fb1e:	68ba      	ldr	r2, [r7, #8]
 800fb20:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800fb22:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	22ca      	movs	r2, #202	; 0xca
 800fb34:	625a      	str	r2, [r3, #36]	; 0x24
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2253      	movs	r2, #83	; 0x53
 800fb3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800fb3e:	68f8      	ldr	r0, [r7, #12]
 800fb40:	f000 f89b 	bl	800fc7a <RTC_EnterInitMode>
 800fb44:	4603      	mov	r3, r0
 800fb46:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800fb48:	7cfb      	ldrb	r3, [r7, #19]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d10c      	bne.n	800fb68 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fb58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fb5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f000 f8c2 	bl	800fce8 <RTC_ExitInitMode>
 800fb64:	4603      	mov	r3, r0
 800fb66:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800fb68:	7cfb      	ldrb	r3, [r7, #19]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d102      	bne.n	800fb74 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2201      	movs	r2, #1
 800fb72:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	22ff      	movs	r2, #255	; 0xff
 800fb7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	771a      	strb	r2, [r3, #28]

  return status;
 800fb82:	7cfb      	ldrb	r3, [r7, #19]
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	371c      	adds	r7, #28
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd90      	pop	{r4, r7, pc}

0800fb8c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b086      	sub	sp, #24
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fba6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fbaa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	0c1b      	lsrs	r3, r3, #16
 800fbb0:	b2da      	uxtb	r2, r3
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	0a1b      	lsrs	r3, r3, #8
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	f003 031f 	and.w	r3, r3, #31
 800fbc0:	b2da      	uxtb	r2, r3
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbce:	b2da      	uxtb	r2, r3
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	0b5b      	lsrs	r3, r3, #13
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	f003 0307 	and.w	r3, r3, #7
 800fbde:	b2da      	uxtb	r2, r3
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d11a      	bne.n	800fc20 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	78db      	ldrb	r3, [r3, #3]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f000 f8bc 	bl	800fd6c <RTC_Bcd2ToByte>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	785b      	ldrb	r3, [r3, #1]
 800fc00:	4618      	mov	r0, r3
 800fc02:	f000 f8b3 	bl	800fd6c <RTC_Bcd2ToByte>
 800fc06:	4603      	mov	r3, r0
 800fc08:	461a      	mov	r2, r3
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	789b      	ldrb	r3, [r3, #2]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f000 f8aa 	bl	800fd6c <RTC_Bcd2ToByte>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800fc20:	2300      	movs	r3, #0
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3718      	adds	r7, #24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}

0800fc2a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b084      	sub	sp, #16
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fc32:	2300      	movs	r3, #0
 800fc34:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	68da      	ldr	r2, [r3, #12]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800fc44:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800fc46:	f7fc f837 	bl	800bcb8 <HAL_GetTick>
 800fc4a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fc4c:	e009      	b.n	800fc62 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fc4e:	f7fc f833 	bl	800bcb8 <HAL_GetTick>
 800fc52:	4602      	mov	r2, r0
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	1ad3      	subs	r3, r2, r3
 800fc58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fc5c:	d901      	bls.n	800fc62 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800fc5e:	2303      	movs	r3, #3
 800fc60:	e007      	b.n	800fc72 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	f003 0320 	and.w	r3, r3, #32
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d0ee      	beq.n	800fc4e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800fc70:	2300      	movs	r3, #0
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}

0800fc7a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800fc7a:	b580      	push	{r7, lr}
 800fc7c:	b084      	sub	sp, #16
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fc82:	2300      	movs	r3, #0
 800fc84:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800fc86:	2300      	movs	r3, #0
 800fc88:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d122      	bne.n	800fcde <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	68da      	ldr	r2, [r3, #12]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fca6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800fca8:	f7fc f806 	bl	800bcb8 <HAL_GetTick>
 800fcac:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800fcae:	e00c      	b.n	800fcca <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fcb0:	f7fc f802 	bl	800bcb8 <HAL_GetTick>
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fcbe:	d904      	bls.n	800fcca <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2204      	movs	r2, #4
 800fcc4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d102      	bne.n	800fcde <RTC_EnterInitMode+0x64>
 800fcd8:	7bfb      	ldrb	r3, [r7, #15]
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d1e8      	bne.n	800fcb0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800fcde:	7bfb      	ldrb	r3, [r7, #15]
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3710      	adds	r7, #16
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	68da      	ldr	r2, [r3, #12]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fd02:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	689b      	ldr	r3, [r3, #8]
 800fd0a:	f003 0320 	and.w	r3, r3, #32
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d10a      	bne.n	800fd28 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f7ff ff89 	bl	800fc2a <HAL_RTC_WaitForSynchro>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d004      	beq.n	800fd28 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2204      	movs	r2, #4
 800fd22:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800fd24:	2301      	movs	r3, #1
 800fd26:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800fd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3710      	adds	r7, #16
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800fd32:	b480      	push	{r7}
 800fd34:	b085      	sub	sp, #20
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	4603      	mov	r3, r0
 800fd3a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800fd40:	e005      	b.n	800fd4e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800fd42:	7bfb      	ldrb	r3, [r7, #15]
 800fd44:	3301      	adds	r3, #1
 800fd46:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800fd48:	79fb      	ldrb	r3, [r7, #7]
 800fd4a:	3b0a      	subs	r3, #10
 800fd4c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800fd4e:	79fb      	ldrb	r3, [r7, #7]
 800fd50:	2b09      	cmp	r3, #9
 800fd52:	d8f6      	bhi.n	800fd42 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
 800fd56:	011b      	lsls	r3, r3, #4
 800fd58:	b2da      	uxtb	r2, r3
 800fd5a:	79fb      	ldrb	r3, [r7, #7]
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	b2db      	uxtb	r3, r3
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3714      	adds	r7, #20
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b085      	sub	sp, #20
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800fd76:	2300      	movs	r3, #0
 800fd78:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800fd7a:	79fb      	ldrb	r3, [r7, #7]
 800fd7c:	091b      	lsrs	r3, r3, #4
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	461a      	mov	r2, r3
 800fd82:	0092      	lsls	r2, r2, #2
 800fd84:	4413      	add	r3, r2
 800fd86:	005b      	lsls	r3, r3, #1
 800fd88:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800fd8a:	79fb      	ldrb	r3, [r7, #7]
 800fd8c:	f003 030f 	and.w	r3, r3, #15
 800fd90:	b2da      	uxtb	r2, r3
 800fd92:	7bfb      	ldrb	r3, [r7, #15]
 800fd94:	4413      	add	r3, r2
 800fd96:	b2db      	uxtb	r3, r3
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3714      	adds	r7, #20
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b087      	sub	sp, #28
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800fdb0:	4b59      	ldr	r3, [pc, #356]	; (800ff18 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4a59      	ldr	r2, [pc, #356]	; (800ff1c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800fdb6:	fba2 2303 	umull	r2, r3, r2, r3
 800fdba:	0adb      	lsrs	r3, r3, #11
 800fdbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fdc0:	fb02 f303 	mul.w	r3, r2, r3
 800fdc4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	7f1b      	ldrb	r3, [r3, #28]
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d101      	bne.n	800fdd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800fdce:	2302      	movs	r3, #2
 800fdd0:	e09b      	b.n	800ff0a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2202      	movs	r2, #2
 800fddc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	22ca      	movs	r2, #202	; 0xca
 800fde4:	625a      	str	r2, [r3, #36]	; 0x24
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2253      	movs	r2, #83	; 0x53
 800fdec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d017      	beq.n	800fe2c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	1e5a      	subs	r2, r3, #1
 800fe00:	617a      	str	r2, [r7, #20]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10b      	bne.n	800fe1e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	22ff      	movs	r2, #255	; 0xff
 800fe0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2203      	movs	r2, #3
 800fe12:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800fe1a:	2303      	movs	r3, #3
 800fe1c:	e075      	b.n	800ff0a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	f003 0304 	and.w	r3, r3, #4
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d1e7      	bne.n	800fdfc <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	689a      	ldr	r2, [r3, #8]
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe3a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	b2da      	uxtb	r2, r3
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800fe4c:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800fe4e:	4b32      	ldr	r3, [pc, #200]	; (800ff18 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4a32      	ldr	r2, [pc, #200]	; (800ff1c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800fe54:	fba2 2303 	umull	r2, r3, r2, r3
 800fe58:	0adb      	lsrs	r3, r3, #11
 800fe5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fe5e:	fb02 f303 	mul.w	r3, r2, r3
 800fe62:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	1e5a      	subs	r2, r3, #1
 800fe68:	617a      	str	r2, [r7, #20]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d10b      	bne.n	800fe86 <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	22ff      	movs	r2, #255	; 0xff
 800fe74:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	2203      	movs	r2, #3
 800fe7a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800fe82:	2303      	movs	r3, #3
 800fe84:	e041      	b.n	800ff0a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	68db      	ldr	r3, [r3, #12]
 800fe8c:	f003 0304 	and.w	r3, r3, #4
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d0e7      	beq.n	800fe64 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	689a      	ldr	r2, [r3, #8]
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f022 0207 	bic.w	r2, r2, #7
 800fea2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	6899      	ldr	r1, [r3, #8]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	430a      	orrs	r2, r1
 800feb2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800febc:	4b18      	ldr	r3, [pc, #96]	; (800ff20 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4a17      	ldr	r2, [pc, #92]	; (800ff20 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800fec2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fec6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800fec8:	4b15      	ldr	r3, [pc, #84]	; (800ff20 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	4a14      	ldr	r2, [pc, #80]	; (800ff20 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800fece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fed2:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	689a      	ldr	r2, [r3, #8]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fee2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	689a      	ldr	r2, [r3, #8]
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fef2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	22ff      	movs	r2, #255	; 0xff
 800fefa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2201      	movs	r2, #1
 800ff00:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2200      	movs	r2, #0
 800ff06:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ff08:	2300      	movs	r3, #0
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	371c      	adds	r7, #28
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop
 800ff18:	20000310 	.word	0x20000310
 800ff1c:	10624dd3 	.word	0x10624dd3
 800ff20:	40013c00 	.word	0x40013c00

0800ff24 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00b      	beq.n	800ff52 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f7f1 ff0e 	bl	8001d5c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	b2da      	uxtb	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800ff50:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800ff52:	4b05      	ldr	r3, [pc, #20]	; (800ff68 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800ff54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800ff58:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	775a      	strb	r2, [r3, #29]
}
 800ff60:	bf00      	nop
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	40013c00 	.word	0x40013c00

0800ff6c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b087      	sub	sp, #28
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	3350      	adds	r3, #80	; 0x50
 800ff82:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	697a      	ldr	r2, [r7, #20]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	601a      	str	r2, [r3, #0]
}
 800ff94:	bf00      	nop
 800ff96:	371c      	adds	r7, #28
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr

0800ffa0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b085      	sub	sp, #20
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	3350      	adds	r3, #80	; 0x50
 800ffb4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	68fa      	ldr	r2, [r7, #12]
 800ffbc:	4413      	add	r3, r2
 800ffbe:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3714      	adds	r7, #20
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d101      	bne.n	800ffe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e041      	b.n	8010066 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d106      	bne.n	800fffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f7fb fb82 	bl	800b700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2202      	movs	r2, #2
 8010000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681a      	ldr	r2, [r3, #0]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	3304      	adds	r3, #4
 801000c:	4619      	mov	r1, r3
 801000e:	4610      	mov	r0, r2
 8010010:	f000 fa88 	bl	8010524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2201      	movs	r2, #1
 8010018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2201      	movs	r2, #1
 8010020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2201      	movs	r2, #1
 8010028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2201      	movs	r2, #1
 8010030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2201      	movs	r2, #1
 8010038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2201      	movs	r2, #1
 8010040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2201      	movs	r2, #1
 8010048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2201      	movs	r2, #1
 8010050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2201      	movs	r2, #1
 8010058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2201      	movs	r2, #1
 8010060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
	...

08010070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010070:	b480      	push	{r7}
 8010072:	b085      	sub	sp, #20
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801007e:	b2db      	uxtb	r3, r3
 8010080:	2b01      	cmp	r3, #1
 8010082:	d001      	beq.n	8010088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010084:	2301      	movs	r3, #1
 8010086:	e044      	b.n	8010112 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2202      	movs	r2, #2
 801008c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	68da      	ldr	r2, [r3, #12]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f042 0201 	orr.w	r2, r2, #1
 801009e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a1e      	ldr	r2, [pc, #120]	; (8010120 <HAL_TIM_Base_Start_IT+0xb0>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d018      	beq.n	80100dc <HAL_TIM_Base_Start_IT+0x6c>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100b2:	d013      	beq.n	80100dc <HAL_TIM_Base_Start_IT+0x6c>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4a1a      	ldr	r2, [pc, #104]	; (8010124 <HAL_TIM_Base_Start_IT+0xb4>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d00e      	beq.n	80100dc <HAL_TIM_Base_Start_IT+0x6c>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a19      	ldr	r2, [pc, #100]	; (8010128 <HAL_TIM_Base_Start_IT+0xb8>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d009      	beq.n	80100dc <HAL_TIM_Base_Start_IT+0x6c>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4a17      	ldr	r2, [pc, #92]	; (801012c <HAL_TIM_Base_Start_IT+0xbc>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d004      	beq.n	80100dc <HAL_TIM_Base_Start_IT+0x6c>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4a16      	ldr	r2, [pc, #88]	; (8010130 <HAL_TIM_Base_Start_IT+0xc0>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d111      	bne.n	8010100 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	689b      	ldr	r3, [r3, #8]
 80100e2:	f003 0307 	and.w	r3, r3, #7
 80100e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2b06      	cmp	r3, #6
 80100ec:	d010      	beq.n	8010110 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f042 0201 	orr.w	r2, r2, #1
 80100fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80100fe:	e007      	b.n	8010110 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f042 0201 	orr.w	r2, r2, #1
 801010e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010110:	2300      	movs	r3, #0
}
 8010112:	4618      	mov	r0, r3
 8010114:	3714      	adds	r7, #20
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr
 801011e:	bf00      	nop
 8010120:	40010000 	.word	0x40010000
 8010124:	40000400 	.word	0x40000400
 8010128:	40000800 	.word	0x40000800
 801012c:	40000c00 	.word	0x40000c00
 8010130:	40014000 	.word	0x40014000

08010134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	f003 0302 	and.w	r3, r3, #2
 8010146:	2b02      	cmp	r3, #2
 8010148:	d122      	bne.n	8010190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	68db      	ldr	r3, [r3, #12]
 8010150:	f003 0302 	and.w	r3, r3, #2
 8010154:	2b02      	cmp	r3, #2
 8010156:	d11b      	bne.n	8010190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f06f 0202 	mvn.w	r2, #2
 8010160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2201      	movs	r2, #1
 8010166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	699b      	ldr	r3, [r3, #24]
 801016e:	f003 0303 	and.w	r3, r3, #3
 8010172:	2b00      	cmp	r3, #0
 8010174:	d003      	beq.n	801017e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 f9b5 	bl	80104e6 <HAL_TIM_IC_CaptureCallback>
 801017c:	e005      	b.n	801018a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 f9a7 	bl	80104d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 f9b8 	bl	80104fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2200      	movs	r2, #0
 801018e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	691b      	ldr	r3, [r3, #16]
 8010196:	f003 0304 	and.w	r3, r3, #4
 801019a:	2b04      	cmp	r3, #4
 801019c:	d122      	bne.n	80101e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	68db      	ldr	r3, [r3, #12]
 80101a4:	f003 0304 	and.w	r3, r3, #4
 80101a8:	2b04      	cmp	r3, #4
 80101aa:	d11b      	bne.n	80101e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f06f 0204 	mvn.w	r2, #4
 80101b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2202      	movs	r2, #2
 80101ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	699b      	ldr	r3, [r3, #24]
 80101c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d003      	beq.n	80101d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 f98b 	bl	80104e6 <HAL_TIM_IC_CaptureCallback>
 80101d0:	e005      	b.n	80101de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 f97d 	bl	80104d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 f98e 	bl	80104fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2200      	movs	r2, #0
 80101e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	691b      	ldr	r3, [r3, #16]
 80101ea:	f003 0308 	and.w	r3, r3, #8
 80101ee:	2b08      	cmp	r3, #8
 80101f0:	d122      	bne.n	8010238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	68db      	ldr	r3, [r3, #12]
 80101f8:	f003 0308 	and.w	r3, r3, #8
 80101fc:	2b08      	cmp	r3, #8
 80101fe:	d11b      	bne.n	8010238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f06f 0208 	mvn.w	r2, #8
 8010208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2204      	movs	r2, #4
 801020e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	69db      	ldr	r3, [r3, #28]
 8010216:	f003 0303 	and.w	r3, r3, #3
 801021a:	2b00      	cmp	r3, #0
 801021c:	d003      	beq.n	8010226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 f961 	bl	80104e6 <HAL_TIM_IC_CaptureCallback>
 8010224:	e005      	b.n	8010232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 f953 	bl	80104d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f000 f964 	bl	80104fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2200      	movs	r2, #0
 8010236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	691b      	ldr	r3, [r3, #16]
 801023e:	f003 0310 	and.w	r3, r3, #16
 8010242:	2b10      	cmp	r3, #16
 8010244:	d122      	bne.n	801028c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	68db      	ldr	r3, [r3, #12]
 801024c:	f003 0310 	and.w	r3, r3, #16
 8010250:	2b10      	cmp	r3, #16
 8010252:	d11b      	bne.n	801028c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f06f 0210 	mvn.w	r2, #16
 801025c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2208      	movs	r2, #8
 8010262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	69db      	ldr	r3, [r3, #28]
 801026a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801026e:	2b00      	cmp	r3, #0
 8010270:	d003      	beq.n	801027a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 f937 	bl	80104e6 <HAL_TIM_IC_CaptureCallback>
 8010278:	e005      	b.n	8010286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 f929 	bl	80104d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f000 f93a 	bl	80104fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	691b      	ldr	r3, [r3, #16]
 8010292:	f003 0301 	and.w	r3, r3, #1
 8010296:	2b01      	cmp	r3, #1
 8010298:	d10e      	bne.n	80102b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	f003 0301 	and.w	r3, r3, #1
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d107      	bne.n	80102b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f06f 0201 	mvn.w	r2, #1
 80102b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f7fb f954 	bl	800b560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	691b      	ldr	r3, [r3, #16]
 80102be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102c2:	2b80      	cmp	r3, #128	; 0x80
 80102c4:	d10e      	bne.n	80102e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102d0:	2b80      	cmp	r3, #128	; 0x80
 80102d2:	d107      	bne.n	80102e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80102dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 fab2 	bl	8010848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	691b      	ldr	r3, [r3, #16]
 80102ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102ee:	2b40      	cmp	r3, #64	; 0x40
 80102f0:	d10e      	bne.n	8010310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102fc:	2b40      	cmp	r3, #64	; 0x40
 80102fe:	d107      	bne.n	8010310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 f8ff 	bl	801050e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	691b      	ldr	r3, [r3, #16]
 8010316:	f003 0320 	and.w	r3, r3, #32
 801031a:	2b20      	cmp	r3, #32
 801031c:	d10e      	bne.n	801033c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	f003 0320 	and.w	r3, r3, #32
 8010328:	2b20      	cmp	r3, #32
 801032a:	d107      	bne.n	801033c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f06f 0220 	mvn.w	r2, #32
 8010334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 fa7c 	bl	8010834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801033c:	bf00      	nop
 801033e:	3708      	adds	r7, #8
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801034e:	2300      	movs	r3, #0
 8010350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010358:	2b01      	cmp	r3, #1
 801035a:	d101      	bne.n	8010360 <HAL_TIM_ConfigClockSource+0x1c>
 801035c:	2302      	movs	r3, #2
 801035e:	e0b4      	b.n	80104ca <HAL_TIM_ConfigClockSource+0x186>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2201      	movs	r2, #1
 8010364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2202      	movs	r2, #2
 801036c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801037e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	68ba      	ldr	r2, [r7, #8]
 801038e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010398:	d03e      	beq.n	8010418 <HAL_TIM_ConfigClockSource+0xd4>
 801039a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801039e:	f200 8087 	bhi.w	80104b0 <HAL_TIM_ConfigClockSource+0x16c>
 80103a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103a6:	f000 8086 	beq.w	80104b6 <HAL_TIM_ConfigClockSource+0x172>
 80103aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103ae:	d87f      	bhi.n	80104b0 <HAL_TIM_ConfigClockSource+0x16c>
 80103b0:	2b70      	cmp	r3, #112	; 0x70
 80103b2:	d01a      	beq.n	80103ea <HAL_TIM_ConfigClockSource+0xa6>
 80103b4:	2b70      	cmp	r3, #112	; 0x70
 80103b6:	d87b      	bhi.n	80104b0 <HAL_TIM_ConfigClockSource+0x16c>
 80103b8:	2b60      	cmp	r3, #96	; 0x60
 80103ba:	d050      	beq.n	801045e <HAL_TIM_ConfigClockSource+0x11a>
 80103bc:	2b60      	cmp	r3, #96	; 0x60
 80103be:	d877      	bhi.n	80104b0 <HAL_TIM_ConfigClockSource+0x16c>
 80103c0:	2b50      	cmp	r3, #80	; 0x50
 80103c2:	d03c      	beq.n	801043e <HAL_TIM_ConfigClockSource+0xfa>
 80103c4:	2b50      	cmp	r3, #80	; 0x50
 80103c6:	d873      	bhi.n	80104b0 <HAL_TIM_ConfigClockSource+0x16c>
 80103c8:	2b40      	cmp	r3, #64	; 0x40
 80103ca:	d058      	beq.n	801047e <HAL_TIM_ConfigClockSource+0x13a>
 80103cc:	2b40      	cmp	r3, #64	; 0x40
 80103ce:	d86f      	bhi.n	80104b0 <HAL_TIM_ConfigClockSource+0x16c>
 80103d0:	2b30      	cmp	r3, #48	; 0x30
 80103d2:	d064      	beq.n	801049e <HAL_TIM_ConfigClockSource+0x15a>
 80103d4:	2b30      	cmp	r3, #48	; 0x30
 80103d6:	d86b      	bhi.n	80104b0 <HAL_TIM_ConfigClockSource+0x16c>
 80103d8:	2b20      	cmp	r3, #32
 80103da:	d060      	beq.n	801049e <HAL_TIM_ConfigClockSource+0x15a>
 80103dc:	2b20      	cmp	r3, #32
 80103de:	d867      	bhi.n	80104b0 <HAL_TIM_ConfigClockSource+0x16c>
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d05c      	beq.n	801049e <HAL_TIM_ConfigClockSource+0x15a>
 80103e4:	2b10      	cmp	r3, #16
 80103e6:	d05a      	beq.n	801049e <HAL_TIM_ConfigClockSource+0x15a>
 80103e8:	e062      	b.n	80104b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6818      	ldr	r0, [r3, #0]
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	6899      	ldr	r1, [r3, #8]
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	685a      	ldr	r2, [r3, #4]
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	68db      	ldr	r3, [r3, #12]
 80103fa:	f000 f98d 	bl	8010718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801040c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	68ba      	ldr	r2, [r7, #8]
 8010414:	609a      	str	r2, [r3, #8]
      break;
 8010416:	e04f      	b.n	80104b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6818      	ldr	r0, [r3, #0]
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	6899      	ldr	r1, [r3, #8]
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	685a      	ldr	r2, [r3, #4]
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	f000 f976 	bl	8010718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	689a      	ldr	r2, [r3, #8]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801043a:	609a      	str	r2, [r3, #8]
      break;
 801043c:	e03c      	b.n	80104b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6818      	ldr	r0, [r3, #0]
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	6859      	ldr	r1, [r3, #4]
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	68db      	ldr	r3, [r3, #12]
 801044a:	461a      	mov	r2, r3
 801044c:	f000 f8ea 	bl	8010624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2150      	movs	r1, #80	; 0x50
 8010456:	4618      	mov	r0, r3
 8010458:	f000 f943 	bl	80106e2 <TIM_ITRx_SetConfig>
      break;
 801045c:	e02c      	b.n	80104b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6818      	ldr	r0, [r3, #0]
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	6859      	ldr	r1, [r3, #4]
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	68db      	ldr	r3, [r3, #12]
 801046a:	461a      	mov	r2, r3
 801046c:	f000 f909 	bl	8010682 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2160      	movs	r1, #96	; 0x60
 8010476:	4618      	mov	r0, r3
 8010478:	f000 f933 	bl	80106e2 <TIM_ITRx_SetConfig>
      break;
 801047c:	e01c      	b.n	80104b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6818      	ldr	r0, [r3, #0]
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	6859      	ldr	r1, [r3, #4]
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	461a      	mov	r2, r3
 801048c:	f000 f8ca 	bl	8010624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2140      	movs	r1, #64	; 0x40
 8010496:	4618      	mov	r0, r3
 8010498:	f000 f923 	bl	80106e2 <TIM_ITRx_SetConfig>
      break;
 801049c:	e00c      	b.n	80104b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4619      	mov	r1, r3
 80104a8:	4610      	mov	r0, r2
 80104aa:	f000 f91a 	bl	80106e2 <TIM_ITRx_SetConfig>
      break;
 80104ae:	e003      	b.n	80104b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80104b0:	2301      	movs	r3, #1
 80104b2:	73fb      	strb	r3, [r7, #15]
      break;
 80104b4:	e000      	b.n	80104b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80104b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2201      	movs	r2, #1
 80104bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80104c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3710      	adds	r7, #16
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80104d2:	b480      	push	{r7}
 80104d4:	b083      	sub	sp, #12
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80104da:	bf00      	nop
 80104dc:	370c      	adds	r7, #12
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr

080104e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80104e6:	b480      	push	{r7}
 80104e8:	b083      	sub	sp, #12
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80104ee:	bf00      	nop
 80104f0:	370c      	adds	r7, #12
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr

080104fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80104fa:	b480      	push	{r7}
 80104fc:	b083      	sub	sp, #12
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010502:	bf00      	nop
 8010504:	370c      	adds	r7, #12
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr

0801050e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801050e:	b480      	push	{r7}
 8010510:	b083      	sub	sp, #12
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010516:	bf00      	nop
 8010518:	370c      	adds	r7, #12
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr
	...

08010524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010524:	b480      	push	{r7}
 8010526:	b085      	sub	sp, #20
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4a34      	ldr	r2, [pc, #208]	; (8010608 <TIM_Base_SetConfig+0xe4>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d00f      	beq.n	801055c <TIM_Base_SetConfig+0x38>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010542:	d00b      	beq.n	801055c <TIM_Base_SetConfig+0x38>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	4a31      	ldr	r2, [pc, #196]	; (801060c <TIM_Base_SetConfig+0xe8>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d007      	beq.n	801055c <TIM_Base_SetConfig+0x38>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4a30      	ldr	r2, [pc, #192]	; (8010610 <TIM_Base_SetConfig+0xec>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d003      	beq.n	801055c <TIM_Base_SetConfig+0x38>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4a2f      	ldr	r2, [pc, #188]	; (8010614 <TIM_Base_SetConfig+0xf0>)
 8010558:	4293      	cmp	r3, r2
 801055a:	d108      	bne.n	801056e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	68fa      	ldr	r2, [r7, #12]
 801056a:	4313      	orrs	r3, r2
 801056c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4a25      	ldr	r2, [pc, #148]	; (8010608 <TIM_Base_SetConfig+0xe4>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d01b      	beq.n	80105ae <TIM_Base_SetConfig+0x8a>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801057c:	d017      	beq.n	80105ae <TIM_Base_SetConfig+0x8a>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4a22      	ldr	r2, [pc, #136]	; (801060c <TIM_Base_SetConfig+0xe8>)
 8010582:	4293      	cmp	r3, r2
 8010584:	d013      	beq.n	80105ae <TIM_Base_SetConfig+0x8a>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	4a21      	ldr	r2, [pc, #132]	; (8010610 <TIM_Base_SetConfig+0xec>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d00f      	beq.n	80105ae <TIM_Base_SetConfig+0x8a>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4a20      	ldr	r2, [pc, #128]	; (8010614 <TIM_Base_SetConfig+0xf0>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d00b      	beq.n	80105ae <TIM_Base_SetConfig+0x8a>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	4a1f      	ldr	r2, [pc, #124]	; (8010618 <TIM_Base_SetConfig+0xf4>)
 801059a:	4293      	cmp	r3, r2
 801059c:	d007      	beq.n	80105ae <TIM_Base_SetConfig+0x8a>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	4a1e      	ldr	r2, [pc, #120]	; (801061c <TIM_Base_SetConfig+0xf8>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d003      	beq.n	80105ae <TIM_Base_SetConfig+0x8a>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4a1d      	ldr	r2, [pc, #116]	; (8010620 <TIM_Base_SetConfig+0xfc>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d108      	bne.n	80105c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	68fa      	ldr	r2, [r7, #12]
 80105bc:	4313      	orrs	r3, r2
 80105be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	695b      	ldr	r3, [r3, #20]
 80105ca:	4313      	orrs	r3, r2
 80105cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	68fa      	ldr	r2, [r7, #12]
 80105d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	689a      	ldr	r2, [r3, #8]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	681a      	ldr	r2, [r3, #0]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4a08      	ldr	r2, [pc, #32]	; (8010608 <TIM_Base_SetConfig+0xe4>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d103      	bne.n	80105f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	691a      	ldr	r2, [r3, #16]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2201      	movs	r2, #1
 80105f8:	615a      	str	r2, [r3, #20]
}
 80105fa:	bf00      	nop
 80105fc:	3714      	adds	r7, #20
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop
 8010608:	40010000 	.word	0x40010000
 801060c:	40000400 	.word	0x40000400
 8010610:	40000800 	.word	0x40000800
 8010614:	40000c00 	.word	0x40000c00
 8010618:	40014000 	.word	0x40014000
 801061c:	40014400 	.word	0x40014400
 8010620:	40014800 	.word	0x40014800

08010624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010624:	b480      	push	{r7}
 8010626:	b087      	sub	sp, #28
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6a1b      	ldr	r3, [r3, #32]
 8010634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	6a1b      	ldr	r3, [r3, #32]
 801063a:	f023 0201 	bic.w	r2, r3, #1
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	699b      	ldr	r3, [r3, #24]
 8010646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801064e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	011b      	lsls	r3, r3, #4
 8010654:	693a      	ldr	r2, [r7, #16]
 8010656:	4313      	orrs	r3, r2
 8010658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	f023 030a 	bic.w	r3, r3, #10
 8010660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010662:	697a      	ldr	r2, [r7, #20]
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	4313      	orrs	r3, r2
 8010668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	693a      	ldr	r2, [r7, #16]
 801066e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	697a      	ldr	r2, [r7, #20]
 8010674:	621a      	str	r2, [r3, #32]
}
 8010676:	bf00      	nop
 8010678:	371c      	adds	r7, #28
 801067a:	46bd      	mov	sp, r7
 801067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010680:	4770      	bx	lr

08010682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010682:	b480      	push	{r7}
 8010684:	b087      	sub	sp, #28
 8010686:	af00      	add	r7, sp, #0
 8010688:	60f8      	str	r0, [r7, #12]
 801068a:	60b9      	str	r1, [r7, #8]
 801068c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6a1b      	ldr	r3, [r3, #32]
 8010692:	f023 0210 	bic.w	r2, r3, #16
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6a1b      	ldr	r3, [r3, #32]
 80106a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80106ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	031b      	lsls	r3, r3, #12
 80106b2:	697a      	ldr	r2, [r7, #20]
 80106b4:	4313      	orrs	r3, r2
 80106b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80106be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	011b      	lsls	r3, r3, #4
 80106c4:	693a      	ldr	r2, [r7, #16]
 80106c6:	4313      	orrs	r3, r2
 80106c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	697a      	ldr	r2, [r7, #20]
 80106ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	693a      	ldr	r2, [r7, #16]
 80106d4:	621a      	str	r2, [r3, #32]
}
 80106d6:	bf00      	nop
 80106d8:	371c      	adds	r7, #28
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr

080106e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80106e2:	b480      	push	{r7}
 80106e4:	b085      	sub	sp, #20
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]
 80106ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	689b      	ldr	r3, [r3, #8]
 80106f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80106fa:	683a      	ldr	r2, [r7, #0]
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	4313      	orrs	r3, r2
 8010700:	f043 0307 	orr.w	r3, r3, #7
 8010704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	68fa      	ldr	r2, [r7, #12]
 801070a:	609a      	str	r2, [r3, #8]
}
 801070c:	bf00      	nop
 801070e:	3714      	adds	r7, #20
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr

08010718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010718:	b480      	push	{r7}
 801071a:	b087      	sub	sp, #28
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
 8010724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	689b      	ldr	r3, [r3, #8]
 801072a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	021a      	lsls	r2, r3, #8
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	431a      	orrs	r2, r3
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	4313      	orrs	r3, r2
 8010740:	697a      	ldr	r2, [r7, #20]
 8010742:	4313      	orrs	r3, r2
 8010744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	697a      	ldr	r2, [r7, #20]
 801074a:	609a      	str	r2, [r3, #8]
}
 801074c:	bf00      	nop
 801074e:	371c      	adds	r7, #28
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010758:	b480      	push	{r7}
 801075a:	b085      	sub	sp, #20
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010768:	2b01      	cmp	r3, #1
 801076a:	d101      	bne.n	8010770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801076c:	2302      	movs	r3, #2
 801076e:	e050      	b.n	8010812 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2201      	movs	r2, #1
 8010774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2202      	movs	r2, #2
 801077c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	68fa      	ldr	r2, [r7, #12]
 801079e:	4313      	orrs	r3, r2
 80107a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	4a1c      	ldr	r2, [pc, #112]	; (8010820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d018      	beq.n	80107e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107bc:	d013      	beq.n	80107e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4a18      	ldr	r2, [pc, #96]	; (8010824 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d00e      	beq.n	80107e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	4a16      	ldr	r2, [pc, #88]	; (8010828 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80107ce:	4293      	cmp	r3, r2
 80107d0:	d009      	beq.n	80107e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	4a15      	ldr	r2, [pc, #84]	; (801082c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80107d8:	4293      	cmp	r3, r2
 80107da:	d004      	beq.n	80107e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4a13      	ldr	r2, [pc, #76]	; (8010830 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d10c      	bne.n	8010800 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80107ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	685b      	ldr	r3, [r3, #4]
 80107f2:	68ba      	ldr	r2, [r7, #8]
 80107f4:	4313      	orrs	r3, r2
 80107f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	68ba      	ldr	r2, [r7, #8]
 80107fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2201      	movs	r2, #1
 8010804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010810:	2300      	movs	r3, #0
}
 8010812:	4618      	mov	r0, r3
 8010814:	3714      	adds	r7, #20
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr
 801081e:	bf00      	nop
 8010820:	40010000 	.word	0x40010000
 8010824:	40000400 	.word	0x40000400
 8010828:	40000800 	.word	0x40000800
 801082c:	40000c00 	.word	0x40000c00
 8010830:	40014000 	.word	0x40014000

08010834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801083c:	bf00      	nop
 801083e:	370c      	adds	r7, #12
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr

08010848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010850:	bf00      	nop
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr

0801085c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d101      	bne.n	801086e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801086a:	2301      	movs	r3, #1
 801086c:	e03f      	b.n	80108ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010874:	b2db      	uxtb	r3, r3
 8010876:	2b00      	cmp	r3, #0
 8010878:	d106      	bne.n	8010888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2200      	movs	r2, #0
 801087e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f7fa ff80 	bl	800b788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2224      	movs	r2, #36	; 0x24
 801088c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	68da      	ldr	r2, [r3, #12]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801089e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 fddf 	bl	8011464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	691a      	ldr	r2, [r3, #16]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80108b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	695a      	ldr	r2, [r3, #20]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80108c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	68da      	ldr	r2, [r3, #12]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80108d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2220      	movs	r2, #32
 80108e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2220      	movs	r2, #32
 80108e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3708      	adds	r7, #8
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b08a      	sub	sp, #40	; 0x28
 80108fa:	af02      	add	r7, sp, #8
 80108fc:	60f8      	str	r0, [r7, #12]
 80108fe:	60b9      	str	r1, [r7, #8]
 8010900:	603b      	str	r3, [r7, #0]
 8010902:	4613      	mov	r3, r2
 8010904:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010906:	2300      	movs	r3, #0
 8010908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010910:	b2db      	uxtb	r3, r3
 8010912:	2b20      	cmp	r3, #32
 8010914:	d17c      	bne.n	8010a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <HAL_UART_Transmit+0x2c>
 801091c:	88fb      	ldrh	r3, [r7, #6]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d101      	bne.n	8010926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010922:	2301      	movs	r3, #1
 8010924:	e075      	b.n	8010a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801092c:	2b01      	cmp	r3, #1
 801092e:	d101      	bne.n	8010934 <HAL_UART_Transmit+0x3e>
 8010930:	2302      	movs	r3, #2
 8010932:	e06e      	b.n	8010a12 <HAL_UART_Transmit+0x11c>
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2201      	movs	r2, #1
 8010938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2200      	movs	r2, #0
 8010940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2221      	movs	r2, #33	; 0x21
 8010946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801094a:	f7fb f9b5 	bl	800bcb8 <HAL_GetTick>
 801094e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	88fa      	ldrh	r2, [r7, #6]
 8010954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	88fa      	ldrh	r2, [r7, #6]
 801095a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	689b      	ldr	r3, [r3, #8]
 8010960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010964:	d108      	bne.n	8010978 <HAL_UART_Transmit+0x82>
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	691b      	ldr	r3, [r3, #16]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d104      	bne.n	8010978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801096e:	2300      	movs	r3, #0
 8010970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	61bb      	str	r3, [r7, #24]
 8010976:	e003      	b.n	8010980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801097c:	2300      	movs	r3, #0
 801097e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2200      	movs	r2, #0
 8010984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8010988:	e02a      	b.n	80109e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	9300      	str	r3, [sp, #0]
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	2200      	movs	r2, #0
 8010992:	2180      	movs	r1, #128	; 0x80
 8010994:	68f8      	ldr	r0, [r7, #12]
 8010996:	f000 fb1f 	bl	8010fd8 <UART_WaitOnFlagUntilTimeout>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d001      	beq.n	80109a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80109a0:	2303      	movs	r3, #3
 80109a2:	e036      	b.n	8010a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d10b      	bne.n	80109c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	881b      	ldrh	r3, [r3, #0]
 80109ae:	461a      	mov	r2, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80109b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80109ba:	69bb      	ldr	r3, [r7, #24]
 80109bc:	3302      	adds	r3, #2
 80109be:	61bb      	str	r3, [r7, #24]
 80109c0:	e007      	b.n	80109d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	781a      	ldrb	r2, [r3, #0]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	3301      	adds	r3, #1
 80109d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	3b01      	subs	r3, #1
 80109da:	b29a      	uxth	r2, r3
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1cf      	bne.n	801098a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	9300      	str	r3, [sp, #0]
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	2200      	movs	r2, #0
 80109f2:	2140      	movs	r1, #64	; 0x40
 80109f4:	68f8      	ldr	r0, [r7, #12]
 80109f6:	f000 faef 	bl	8010fd8 <UART_WaitOnFlagUntilTimeout>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d001      	beq.n	8010a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010a00:	2303      	movs	r3, #3
 8010a02:	e006      	b.n	8010a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2220      	movs	r2, #32
 8010a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	e000      	b.n	8010a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010a10:	2302      	movs	r3, #2
  }
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3720      	adds	r7, #32
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}

08010a1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a1a:	b580      	push	{r7, lr}
 8010a1c:	b084      	sub	sp, #16
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	60f8      	str	r0, [r7, #12]
 8010a22:	60b9      	str	r1, [r7, #8]
 8010a24:	4613      	mov	r3, r2
 8010a26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	2b20      	cmp	r3, #32
 8010a32:	d11d      	bne.n	8010a70 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d002      	beq.n	8010a40 <HAL_UART_Receive_IT+0x26>
 8010a3a:	88fb      	ldrh	r3, [r7, #6]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d101      	bne.n	8010a44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010a40:	2301      	movs	r3, #1
 8010a42:	e016      	b.n	8010a72 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d101      	bne.n	8010a52 <HAL_UART_Receive_IT+0x38>
 8010a4e:	2302      	movs	r3, #2
 8010a50:	e00f      	b.n	8010a72 <HAL_UART_Receive_IT+0x58>
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2201      	movs	r2, #1
 8010a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010a60:	88fb      	ldrh	r3, [r7, #6]
 8010a62:	461a      	mov	r2, r3
 8010a64:	68b9      	ldr	r1, [r7, #8]
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f000 fb24 	bl	80110b4 <UART_Start_Receive_IT>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	e000      	b.n	8010a72 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010a70:	2302      	movs	r3, #2
  }
}
 8010a72:	4618      	mov	r0, r3
 8010a74:	3710      	adds	r7, #16
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
	...

08010a7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b0ba      	sub	sp, #232	; 0xe8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	695b      	ldr	r3, [r3, #20]
 8010a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ab2:	f003 030f 	and.w	r3, r3, #15
 8010ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8010aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d10f      	bne.n	8010ae2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ac6:	f003 0320 	and.w	r3, r3, #32
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d009      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x66>
 8010ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ad2:	f003 0320 	and.w	r3, r3, #32
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d003      	beq.n	8010ae2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 fc07 	bl	80112ee <UART_Receive_IT>
      return;
 8010ae0:	e256      	b.n	8010f90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	f000 80de 	beq.w	8010ca8 <HAL_UART_IRQHandler+0x22c>
 8010aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010af0:	f003 0301 	and.w	r3, r3, #1
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d106      	bne.n	8010b06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010afc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f000 80d1 	beq.w	8010ca8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b0a:	f003 0301 	and.w	r3, r3, #1
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d00b      	beq.n	8010b2a <HAL_UART_IRQHandler+0xae>
 8010b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d005      	beq.n	8010b2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b22:	f043 0201 	orr.w	r2, r3, #1
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b2e:	f003 0304 	and.w	r3, r3, #4
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d00b      	beq.n	8010b4e <HAL_UART_IRQHandler+0xd2>
 8010b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b3a:	f003 0301 	and.w	r3, r3, #1
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d005      	beq.n	8010b4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b46:	f043 0202 	orr.w	r2, r3, #2
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b52:	f003 0302 	and.w	r3, r3, #2
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00b      	beq.n	8010b72 <HAL_UART_IRQHandler+0xf6>
 8010b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b5e:	f003 0301 	and.w	r3, r3, #1
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d005      	beq.n	8010b72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b6a:	f043 0204 	orr.w	r2, r3, #4
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b76:	f003 0308 	and.w	r3, r3, #8
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d011      	beq.n	8010ba2 <HAL_UART_IRQHandler+0x126>
 8010b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b82:	f003 0320 	and.w	r3, r3, #32
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d105      	bne.n	8010b96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b8e:	f003 0301 	and.w	r3, r3, #1
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d005      	beq.n	8010ba2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b9a:	f043 0208 	orr.w	r2, r3, #8
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f000 81ed 	beq.w	8010f86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bb0:	f003 0320 	and.w	r3, r3, #32
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d008      	beq.n	8010bca <HAL_UART_IRQHandler+0x14e>
 8010bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bbc:	f003 0320 	and.w	r3, r3, #32
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d002      	beq.n	8010bca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 fb92 	bl	80112ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	695b      	ldr	r3, [r3, #20]
 8010bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bd4:	2b40      	cmp	r3, #64	; 0x40
 8010bd6:	bf0c      	ite	eq
 8010bd8:	2301      	moveq	r3, #1
 8010bda:	2300      	movne	r3, #0
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010be6:	f003 0308 	and.w	r3, r3, #8
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d103      	bne.n	8010bf6 <HAL_UART_IRQHandler+0x17a>
 8010bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d04f      	beq.n	8010c96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 fa9a 	bl	8011130 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	695b      	ldr	r3, [r3, #20]
 8010c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c06:	2b40      	cmp	r3, #64	; 0x40
 8010c08:	d141      	bne.n	8010c8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	3314      	adds	r3, #20
 8010c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c18:	e853 3f00 	ldrex	r3, [r3]
 8010c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	3314      	adds	r3, #20
 8010c32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010c36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010c42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010c46:	e841 2300 	strex	r3, r2, [r1]
 8010c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d1d9      	bne.n	8010c0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d013      	beq.n	8010c86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c62:	4a7d      	ldr	r2, [pc, #500]	; (8010e58 <HAL_UART_IRQHandler+0x3dc>)
 8010c64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fb f9a6 	bl	800bfbc <HAL_DMA_Abort_IT>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d016      	beq.n	8010ca4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010c80:	4610      	mov	r0, r2
 8010c82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c84:	e00e      	b.n	8010ca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 f990 	bl	8010fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c8c:	e00a      	b.n	8010ca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f98c 	bl	8010fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010c94:	e006      	b.n	8010ca4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f000 f988 	bl	8010fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010ca2:	e170      	b.n	8010f86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ca4:	bf00      	nop
    return;
 8010ca6:	e16e      	b.n	8010f86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	f040 814a 	bne.w	8010f46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cb6:	f003 0310 	and.w	r3, r3, #16
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 8143 	beq.w	8010f46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cc4:	f003 0310 	and.w	r3, r3, #16
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f000 813c 	beq.w	8010f46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010cce:	2300      	movs	r3, #0
 8010cd0:	60bb      	str	r3, [r7, #8]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	60bb      	str	r3, [r7, #8]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	60bb      	str	r3, [r7, #8]
 8010ce2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	695b      	ldr	r3, [r3, #20]
 8010cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cee:	2b40      	cmp	r3, #64	; 0x40
 8010cf0:	f040 80b4 	bne.w	8010e5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010d00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f000 8140 	beq.w	8010f8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010d12:	429a      	cmp	r2, r3
 8010d14:	f080 8139 	bcs.w	8010f8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010d1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d24:	69db      	ldr	r3, [r3, #28]
 8010d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d2a:	f000 8088 	beq.w	8010e3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	330c      	adds	r3, #12
 8010d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d3c:	e853 3f00 	ldrex	r3, [r3]
 8010d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	330c      	adds	r3, #12
 8010d56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010d5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010d66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010d6a:	e841 2300 	strex	r3, r2, [r1]
 8010d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d1d9      	bne.n	8010d2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	3314      	adds	r3, #20
 8010d80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d84:	e853 3f00 	ldrex	r3, [r3]
 8010d88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010d8c:	f023 0301 	bic.w	r3, r3, #1
 8010d90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	3314      	adds	r3, #20
 8010d9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010d9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010da2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010da4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010da6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010daa:	e841 2300 	strex	r3, r2, [r1]
 8010dae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d1e1      	bne.n	8010d7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	3314      	adds	r3, #20
 8010dbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010dc0:	e853 3f00 	ldrex	r3, [r3]
 8010dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	3314      	adds	r3, #20
 8010dd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010dda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010ddc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010de0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010de2:	e841 2300 	strex	r3, r2, [r1]
 8010de6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d1e3      	bne.n	8010db6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2220      	movs	r2, #32
 8010df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	330c      	adds	r3, #12
 8010e02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e06:	e853 3f00 	ldrex	r3, [r3]
 8010e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e0e:	f023 0310 	bic.w	r3, r3, #16
 8010e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	330c      	adds	r3, #12
 8010e1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010e20:	65ba      	str	r2, [r7, #88]	; 0x58
 8010e22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e28:	e841 2300 	strex	r3, r2, [r1]
 8010e2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d1e3      	bne.n	8010dfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7fb f84f 	bl	800bedc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 f8b6 	bl	8010fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010e54:	e099      	b.n	8010f8a <HAL_UART_IRQHandler+0x50e>
 8010e56:	bf00      	nop
 8010e58:	080111f7 	.word	0x080111f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	f000 808b 	beq.w	8010f8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f000 8086 	beq.w	8010f8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	330c      	adds	r3, #12
 8010e88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e8c:	e853 3f00 	ldrex	r3, [r3]
 8010e90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010e98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	330c      	adds	r3, #12
 8010ea2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010ea6:	647a      	str	r2, [r7, #68]	; 0x44
 8010ea8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010eac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010eae:	e841 2300 	strex	r3, r2, [r1]
 8010eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d1e3      	bne.n	8010e82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	3314      	adds	r3, #20
 8010ec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec4:	e853 3f00 	ldrex	r3, [r3]
 8010ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8010eca:	6a3b      	ldr	r3, [r7, #32]
 8010ecc:	f023 0301 	bic.w	r3, r3, #1
 8010ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	3314      	adds	r3, #20
 8010eda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010ede:	633a      	str	r2, [r7, #48]	; 0x30
 8010ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ee6:	e841 2300 	strex	r3, r2, [r1]
 8010eea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d1e3      	bne.n	8010eba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2220      	movs	r2, #32
 8010ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2200      	movs	r2, #0
 8010efe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	330c      	adds	r3, #12
 8010f06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	e853 3f00 	ldrex	r3, [r3]
 8010f0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f023 0310 	bic.w	r3, r3, #16
 8010f16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	330c      	adds	r3, #12
 8010f20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010f24:	61fa      	str	r2, [r7, #28]
 8010f26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f28:	69b9      	ldr	r1, [r7, #24]
 8010f2a:	69fa      	ldr	r2, [r7, #28]
 8010f2c:	e841 2300 	strex	r3, r2, [r1]
 8010f30:	617b      	str	r3, [r7, #20]
   return(result);
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1e3      	bne.n	8010f00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010f38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 f83e 	bl	8010fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010f44:	e023      	b.n	8010f8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d009      	beq.n	8010f66 <HAL_UART_IRQHandler+0x4ea>
 8010f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d003      	beq.n	8010f66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 f95d 	bl	801121e <UART_Transmit_IT>
    return;
 8010f64:	e014      	b.n	8010f90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d00e      	beq.n	8010f90 <HAL_UART_IRQHandler+0x514>
 8010f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d008      	beq.n	8010f90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 f99d 	bl	80112be <UART_EndTransmit_IT>
    return;
 8010f84:	e004      	b.n	8010f90 <HAL_UART_IRQHandler+0x514>
    return;
 8010f86:	bf00      	nop
 8010f88:	e002      	b.n	8010f90 <HAL_UART_IRQHandler+0x514>
      return;
 8010f8a:	bf00      	nop
 8010f8c:	e000      	b.n	8010f90 <HAL_UART_IRQHandler+0x514>
      return;
 8010f8e:	bf00      	nop
  }
}
 8010f90:	37e8      	adds	r7, #232	; 0xe8
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
 8010f96:	bf00      	nop

08010f98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b083      	sub	sp, #12
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010fa0:	bf00      	nop
 8010fa2:	370c      	adds	r7, #12
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr

08010fac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010fac:	b480      	push	{r7}
 8010fae:	b083      	sub	sp, #12
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010fb4:	bf00      	nop
 8010fb6:	370c      	adds	r7, #12
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbe:	4770      	bx	lr

08010fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	460b      	mov	r3, r1
 8010fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010fcc:	bf00      	nop
 8010fce:	370c      	adds	r7, #12
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b090      	sub	sp, #64	; 0x40
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	603b      	str	r3, [r7, #0]
 8010fe4:	4613      	mov	r3, r2
 8010fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010fe8:	e050      	b.n	801108c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ff0:	d04c      	beq.n	801108c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d007      	beq.n	8011008 <UART_WaitOnFlagUntilTimeout+0x30>
 8010ff8:	f7fa fe5e 	bl	800bcb8 <HAL_GetTick>
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	1ad3      	subs	r3, r2, r3
 8011002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011004:	429a      	cmp	r2, r3
 8011006:	d241      	bcs.n	801108c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	330c      	adds	r3, #12
 801100e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	e853 3f00 	ldrex	r3, [r3]
 8011016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801101e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	330c      	adds	r3, #12
 8011026:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011028:	637a      	str	r2, [r7, #52]	; 0x34
 801102a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801102c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801102e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011030:	e841 2300 	strex	r3, r2, [r1]
 8011034:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011038:	2b00      	cmp	r3, #0
 801103a:	d1e5      	bne.n	8011008 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	3314      	adds	r3, #20
 8011042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	e853 3f00 	ldrex	r3, [r3]
 801104a:	613b      	str	r3, [r7, #16]
   return(result);
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	f023 0301 	bic.w	r3, r3, #1
 8011052:	63bb      	str	r3, [r7, #56]	; 0x38
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	3314      	adds	r3, #20
 801105a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801105c:	623a      	str	r2, [r7, #32]
 801105e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011060:	69f9      	ldr	r1, [r7, #28]
 8011062:	6a3a      	ldr	r2, [r7, #32]
 8011064:	e841 2300 	strex	r3, r2, [r1]
 8011068:	61bb      	str	r3, [r7, #24]
   return(result);
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d1e5      	bne.n	801103c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2220      	movs	r2, #32
 8011074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	2220      	movs	r2, #32
 801107c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2200      	movs	r2, #0
 8011084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8011088:	2303      	movs	r3, #3
 801108a:	e00f      	b.n	80110ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	4013      	ands	r3, r2
 8011096:	68ba      	ldr	r2, [r7, #8]
 8011098:	429a      	cmp	r2, r3
 801109a:	bf0c      	ite	eq
 801109c:	2301      	moveq	r3, #1
 801109e:	2300      	movne	r3, #0
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	461a      	mov	r2, r3
 80110a4:	79fb      	ldrb	r3, [r7, #7]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d09f      	beq.n	8010fea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80110aa:	2300      	movs	r3, #0
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	3740      	adds	r7, #64	; 0x40
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}

080110b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80110b4:	b480      	push	{r7}
 80110b6:	b085      	sub	sp, #20
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	4613      	mov	r3, r2
 80110c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	68ba      	ldr	r2, [r7, #8]
 80110c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	88fa      	ldrh	r2, [r7, #6]
 80110cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	88fa      	ldrh	r2, [r7, #6]
 80110d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2200      	movs	r2, #0
 80110d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	2222      	movs	r2, #34	; 0x22
 80110de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2200      	movs	r2, #0
 80110e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	691b      	ldr	r3, [r3, #16]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d007      	beq.n	8011102 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	68da      	ldr	r2, [r3, #12]
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011100:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	695a      	ldr	r2, [r3, #20]
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f042 0201 	orr.w	r2, r2, #1
 8011110:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	68da      	ldr	r2, [r3, #12]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	f042 0220 	orr.w	r2, r2, #32
 8011120:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011122:	2300      	movs	r3, #0
}
 8011124:	4618      	mov	r0, r3
 8011126:	3714      	adds	r7, #20
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr

08011130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011130:	b480      	push	{r7}
 8011132:	b095      	sub	sp, #84	; 0x54
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	330c      	adds	r3, #12
 801113e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011142:	e853 3f00 	ldrex	r3, [r3]
 8011146:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801114e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	330c      	adds	r3, #12
 8011156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011158:	643a      	str	r2, [r7, #64]	; 0x40
 801115a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801115c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801115e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011160:	e841 2300 	strex	r3, r2, [r1]
 8011164:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011168:	2b00      	cmp	r3, #0
 801116a:	d1e5      	bne.n	8011138 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	3314      	adds	r3, #20
 8011172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011174:	6a3b      	ldr	r3, [r7, #32]
 8011176:	e853 3f00 	ldrex	r3, [r3]
 801117a:	61fb      	str	r3, [r7, #28]
   return(result);
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	f023 0301 	bic.w	r3, r3, #1
 8011182:	64bb      	str	r3, [r7, #72]	; 0x48
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	3314      	adds	r3, #20
 801118a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801118c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801118e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011194:	e841 2300 	strex	r3, r2, [r1]
 8011198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1e5      	bne.n	801116c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d119      	bne.n	80111dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	330c      	adds	r3, #12
 80111ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	e853 3f00 	ldrex	r3, [r3]
 80111b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	f023 0310 	bic.w	r3, r3, #16
 80111be:	647b      	str	r3, [r7, #68]	; 0x44
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	330c      	adds	r3, #12
 80111c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111c8:	61ba      	str	r2, [r7, #24]
 80111ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111cc:	6979      	ldr	r1, [r7, #20]
 80111ce:	69ba      	ldr	r2, [r7, #24]
 80111d0:	e841 2300 	strex	r3, r2, [r1]
 80111d4:	613b      	str	r3, [r7, #16]
   return(result);
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d1e5      	bne.n	80111a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2220      	movs	r2, #32
 80111e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2200      	movs	r2, #0
 80111e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80111ea:	bf00      	nop
 80111ec:	3754      	adds	r7, #84	; 0x54
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr

080111f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80111f6:	b580      	push	{r7, lr}
 80111f8:	b084      	sub	sp, #16
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011202:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2200      	movs	r2, #0
 801120e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f7ff fecb 	bl	8010fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011216:	bf00      	nop
 8011218:	3710      	adds	r7, #16
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}

0801121e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801121e:	b480      	push	{r7}
 8011220:	b085      	sub	sp, #20
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801122c:	b2db      	uxtb	r3, r3
 801122e:	2b21      	cmp	r3, #33	; 0x21
 8011230:	d13e      	bne.n	80112b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	689b      	ldr	r3, [r3, #8]
 8011236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801123a:	d114      	bne.n	8011266 <UART_Transmit_IT+0x48>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	691b      	ldr	r3, [r3, #16]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d110      	bne.n	8011266 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6a1b      	ldr	r3, [r3, #32]
 8011248:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	881b      	ldrh	r3, [r3, #0]
 801124e:	461a      	mov	r2, r3
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011258:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6a1b      	ldr	r3, [r3, #32]
 801125e:	1c9a      	adds	r2, r3, #2
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	621a      	str	r2, [r3, #32]
 8011264:	e008      	b.n	8011278 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6a1b      	ldr	r3, [r3, #32]
 801126a:	1c59      	adds	r1, r3, #1
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	6211      	str	r1, [r2, #32]
 8011270:	781a      	ldrb	r2, [r3, #0]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801127c:	b29b      	uxth	r3, r3
 801127e:	3b01      	subs	r3, #1
 8011280:	b29b      	uxth	r3, r3
 8011282:	687a      	ldr	r2, [r7, #4]
 8011284:	4619      	mov	r1, r3
 8011286:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011288:	2b00      	cmp	r3, #0
 801128a:	d10f      	bne.n	80112ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	68da      	ldr	r2, [r3, #12]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801129a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	68da      	ldr	r2, [r3, #12]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80112aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80112ac:	2300      	movs	r3, #0
 80112ae:	e000      	b.n	80112b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80112b0:	2302      	movs	r3, #2
  }
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3714      	adds	r7, #20
 80112b6:	46bd      	mov	sp, r7
 80112b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112bc:	4770      	bx	lr

080112be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80112be:	b580      	push	{r7, lr}
 80112c0:	b082      	sub	sp, #8
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	68da      	ldr	r2, [r3, #12]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80112d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2220      	movs	r2, #32
 80112da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f7ff fe5a 	bl	8010f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80112e4:	2300      	movs	r3, #0
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3708      	adds	r7, #8
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}

080112ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b08c      	sub	sp, #48	; 0x30
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	2b22      	cmp	r3, #34	; 0x22
 8011300:	f040 80ab 	bne.w	801145a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	689b      	ldr	r3, [r3, #8]
 8011308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801130c:	d117      	bne.n	801133e <UART_Receive_IT+0x50>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	691b      	ldr	r3, [r3, #16]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d113      	bne.n	801133e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011316:	2300      	movs	r3, #0
 8011318:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801131e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	b29b      	uxth	r3, r3
 8011328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801132c:	b29a      	uxth	r2, r3
 801132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011330:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011336:	1c9a      	adds	r2, r3, #2
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	629a      	str	r2, [r3, #40]	; 0x28
 801133c:	e026      	b.n	801138c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011342:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011344:	2300      	movs	r3, #0
 8011346:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	689b      	ldr	r3, [r3, #8]
 801134c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011350:	d007      	beq.n	8011362 <UART_Receive_IT+0x74>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	689b      	ldr	r3, [r3, #8]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d10a      	bne.n	8011370 <UART_Receive_IT+0x82>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	691b      	ldr	r3, [r3, #16]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d106      	bne.n	8011370 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	b2da      	uxtb	r2, r3
 801136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136c:	701a      	strb	r2, [r3, #0]
 801136e:	e008      	b.n	8011382 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	b2db      	uxtb	r3, r3
 8011378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801137c:	b2da      	uxtb	r2, r3
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011386:	1c5a      	adds	r2, r3, #1
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011390:	b29b      	uxth	r3, r3
 8011392:	3b01      	subs	r3, #1
 8011394:	b29b      	uxth	r3, r3
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	4619      	mov	r1, r3
 801139a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801139c:	2b00      	cmp	r3, #0
 801139e:	d15a      	bne.n	8011456 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	68da      	ldr	r2, [r3, #12]
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f022 0220 	bic.w	r2, r2, #32
 80113ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	68da      	ldr	r2, [r3, #12]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80113be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	695a      	ldr	r2, [r3, #20]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f022 0201 	bic.w	r2, r2, #1
 80113ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2220      	movs	r2, #32
 80113d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d135      	bne.n	801144c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	330c      	adds	r3, #12
 80113ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	e853 3f00 	ldrex	r3, [r3]
 80113f4:	613b      	str	r3, [r7, #16]
   return(result);
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	f023 0310 	bic.w	r3, r3, #16
 80113fc:	627b      	str	r3, [r7, #36]	; 0x24
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	330c      	adds	r3, #12
 8011404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011406:	623a      	str	r2, [r7, #32]
 8011408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140a:	69f9      	ldr	r1, [r7, #28]
 801140c:	6a3a      	ldr	r2, [r7, #32]
 801140e:	e841 2300 	strex	r3, r2, [r1]
 8011412:	61bb      	str	r3, [r7, #24]
   return(result);
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d1e5      	bne.n	80113e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f003 0310 	and.w	r3, r3, #16
 8011424:	2b10      	cmp	r3, #16
 8011426:	d10a      	bne.n	801143e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011428:	2300      	movs	r3, #0
 801142a:	60fb      	str	r3, [r7, #12]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	60fb      	str	r3, [r7, #12]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	60fb      	str	r3, [r7, #12]
 801143c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011442:	4619      	mov	r1, r3
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f7ff fdbb 	bl	8010fc0 <HAL_UARTEx_RxEventCallback>
 801144a:	e002      	b.n	8011452 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f7f1 ff9f 	bl	8003390 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011452:	2300      	movs	r3, #0
 8011454:	e002      	b.n	801145c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011456:	2300      	movs	r3, #0
 8011458:	e000      	b.n	801145c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801145a:	2302      	movs	r3, #2
  }
}
 801145c:	4618      	mov	r0, r3
 801145e:	3730      	adds	r7, #48	; 0x30
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011468:	b0c0      	sub	sp, #256	; 0x100
 801146a:	af00      	add	r7, sp, #0
 801146c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	691b      	ldr	r3, [r3, #16]
 8011478:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801147c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011480:	68d9      	ldr	r1, [r3, #12]
 8011482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	ea40 0301 	orr.w	r3, r0, r1
 801148c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801148e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011492:	689a      	ldr	r2, [r3, #8]
 8011494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011498:	691b      	ldr	r3, [r3, #16]
 801149a:	431a      	orrs	r2, r3
 801149c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114a0:	695b      	ldr	r3, [r3, #20]
 80114a2:	431a      	orrs	r2, r3
 80114a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114a8:	69db      	ldr	r3, [r3, #28]
 80114aa:	4313      	orrs	r3, r2
 80114ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80114b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80114bc:	f021 010c 	bic.w	r1, r1, #12
 80114c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114c4:	681a      	ldr	r2, [r3, #0]
 80114c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80114ca:	430b      	orrs	r3, r1
 80114cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80114ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	695b      	ldr	r3, [r3, #20]
 80114d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80114da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114de:	6999      	ldr	r1, [r3, #24]
 80114e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114e4:	681a      	ldr	r2, [r3, #0]
 80114e6:	ea40 0301 	orr.w	r3, r0, r1
 80114ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80114ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	4b8f      	ldr	r3, [pc, #572]	; (8011730 <UART_SetConfig+0x2cc>)
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d005      	beq.n	8011504 <UART_SetConfig+0xa0>
 80114f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	4b8d      	ldr	r3, [pc, #564]	; (8011734 <UART_SetConfig+0x2d0>)
 8011500:	429a      	cmp	r2, r3
 8011502:	d104      	bne.n	801150e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011504:	f7fe f81c 	bl	800f540 <HAL_RCC_GetPCLK2Freq>
 8011508:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801150c:	e003      	b.n	8011516 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801150e:	f7fe f803 	bl	800f518 <HAL_RCC_GetPCLK1Freq>
 8011512:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801151a:	69db      	ldr	r3, [r3, #28]
 801151c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011520:	f040 810c 	bne.w	801173c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011528:	2200      	movs	r2, #0
 801152a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801152e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8011532:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8011536:	4622      	mov	r2, r4
 8011538:	462b      	mov	r3, r5
 801153a:	1891      	adds	r1, r2, r2
 801153c:	65b9      	str	r1, [r7, #88]	; 0x58
 801153e:	415b      	adcs	r3, r3
 8011540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011542:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011546:	4621      	mov	r1, r4
 8011548:	eb12 0801 	adds.w	r8, r2, r1
 801154c:	4629      	mov	r1, r5
 801154e:	eb43 0901 	adc.w	r9, r3, r1
 8011552:	f04f 0200 	mov.w	r2, #0
 8011556:	f04f 0300 	mov.w	r3, #0
 801155a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801155e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011566:	4690      	mov	r8, r2
 8011568:	4699      	mov	r9, r3
 801156a:	4623      	mov	r3, r4
 801156c:	eb18 0303 	adds.w	r3, r8, r3
 8011570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011574:	462b      	mov	r3, r5
 8011576:	eb49 0303 	adc.w	r3, r9, r3
 801157a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801157e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	2200      	movs	r2, #0
 8011586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801158a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801158e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011592:	460b      	mov	r3, r1
 8011594:	18db      	adds	r3, r3, r3
 8011596:	653b      	str	r3, [r7, #80]	; 0x50
 8011598:	4613      	mov	r3, r2
 801159a:	eb42 0303 	adc.w	r3, r2, r3
 801159e:	657b      	str	r3, [r7, #84]	; 0x54
 80115a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80115a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80115a8:	f7ef fb16 	bl	8000bd8 <__aeabi_uldivmod>
 80115ac:	4602      	mov	r2, r0
 80115ae:	460b      	mov	r3, r1
 80115b0:	4b61      	ldr	r3, [pc, #388]	; (8011738 <UART_SetConfig+0x2d4>)
 80115b2:	fba3 2302 	umull	r2, r3, r3, r2
 80115b6:	095b      	lsrs	r3, r3, #5
 80115b8:	011c      	lsls	r4, r3, #4
 80115ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80115be:	2200      	movs	r2, #0
 80115c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80115c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80115c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80115cc:	4642      	mov	r2, r8
 80115ce:	464b      	mov	r3, r9
 80115d0:	1891      	adds	r1, r2, r2
 80115d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80115d4:	415b      	adcs	r3, r3
 80115d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80115dc:	4641      	mov	r1, r8
 80115de:	eb12 0a01 	adds.w	sl, r2, r1
 80115e2:	4649      	mov	r1, r9
 80115e4:	eb43 0b01 	adc.w	fp, r3, r1
 80115e8:	f04f 0200 	mov.w	r2, #0
 80115ec:	f04f 0300 	mov.w	r3, #0
 80115f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80115f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80115f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80115fc:	4692      	mov	sl, r2
 80115fe:	469b      	mov	fp, r3
 8011600:	4643      	mov	r3, r8
 8011602:	eb1a 0303 	adds.w	r3, sl, r3
 8011606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801160a:	464b      	mov	r3, r9
 801160c:	eb4b 0303 	adc.w	r3, fp, r3
 8011610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011620:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8011624:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8011628:	460b      	mov	r3, r1
 801162a:	18db      	adds	r3, r3, r3
 801162c:	643b      	str	r3, [r7, #64]	; 0x40
 801162e:	4613      	mov	r3, r2
 8011630:	eb42 0303 	adc.w	r3, r2, r3
 8011634:	647b      	str	r3, [r7, #68]	; 0x44
 8011636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801163a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801163e:	f7ef facb 	bl	8000bd8 <__aeabi_uldivmod>
 8011642:	4602      	mov	r2, r0
 8011644:	460b      	mov	r3, r1
 8011646:	4611      	mov	r1, r2
 8011648:	4b3b      	ldr	r3, [pc, #236]	; (8011738 <UART_SetConfig+0x2d4>)
 801164a:	fba3 2301 	umull	r2, r3, r3, r1
 801164e:	095b      	lsrs	r3, r3, #5
 8011650:	2264      	movs	r2, #100	; 0x64
 8011652:	fb02 f303 	mul.w	r3, r2, r3
 8011656:	1acb      	subs	r3, r1, r3
 8011658:	00db      	lsls	r3, r3, #3
 801165a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801165e:	4b36      	ldr	r3, [pc, #216]	; (8011738 <UART_SetConfig+0x2d4>)
 8011660:	fba3 2302 	umull	r2, r3, r3, r2
 8011664:	095b      	lsrs	r3, r3, #5
 8011666:	005b      	lsls	r3, r3, #1
 8011668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801166c:	441c      	add	r4, r3
 801166e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011672:	2200      	movs	r2, #0
 8011674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011678:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801167c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011680:	4642      	mov	r2, r8
 8011682:	464b      	mov	r3, r9
 8011684:	1891      	adds	r1, r2, r2
 8011686:	63b9      	str	r1, [r7, #56]	; 0x38
 8011688:	415b      	adcs	r3, r3
 801168a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801168c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011690:	4641      	mov	r1, r8
 8011692:	1851      	adds	r1, r2, r1
 8011694:	6339      	str	r1, [r7, #48]	; 0x30
 8011696:	4649      	mov	r1, r9
 8011698:	414b      	adcs	r3, r1
 801169a:	637b      	str	r3, [r7, #52]	; 0x34
 801169c:	f04f 0200 	mov.w	r2, #0
 80116a0:	f04f 0300 	mov.w	r3, #0
 80116a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80116a8:	4659      	mov	r1, fp
 80116aa:	00cb      	lsls	r3, r1, #3
 80116ac:	4651      	mov	r1, sl
 80116ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80116b2:	4651      	mov	r1, sl
 80116b4:	00ca      	lsls	r2, r1, #3
 80116b6:	4610      	mov	r0, r2
 80116b8:	4619      	mov	r1, r3
 80116ba:	4603      	mov	r3, r0
 80116bc:	4642      	mov	r2, r8
 80116be:	189b      	adds	r3, r3, r2
 80116c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80116c4:	464b      	mov	r3, r9
 80116c6:	460a      	mov	r2, r1
 80116c8:	eb42 0303 	adc.w	r3, r2, r3
 80116cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80116d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	2200      	movs	r2, #0
 80116d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80116dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80116e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80116e4:	460b      	mov	r3, r1
 80116e6:	18db      	adds	r3, r3, r3
 80116e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80116ea:	4613      	mov	r3, r2
 80116ec:	eb42 0303 	adc.w	r3, r2, r3
 80116f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80116f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80116fa:	f7ef fa6d 	bl	8000bd8 <__aeabi_uldivmod>
 80116fe:	4602      	mov	r2, r0
 8011700:	460b      	mov	r3, r1
 8011702:	4b0d      	ldr	r3, [pc, #52]	; (8011738 <UART_SetConfig+0x2d4>)
 8011704:	fba3 1302 	umull	r1, r3, r3, r2
 8011708:	095b      	lsrs	r3, r3, #5
 801170a:	2164      	movs	r1, #100	; 0x64
 801170c:	fb01 f303 	mul.w	r3, r1, r3
 8011710:	1ad3      	subs	r3, r2, r3
 8011712:	00db      	lsls	r3, r3, #3
 8011714:	3332      	adds	r3, #50	; 0x32
 8011716:	4a08      	ldr	r2, [pc, #32]	; (8011738 <UART_SetConfig+0x2d4>)
 8011718:	fba2 2303 	umull	r2, r3, r2, r3
 801171c:	095b      	lsrs	r3, r3, #5
 801171e:	f003 0207 	and.w	r2, r3, #7
 8011722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4422      	add	r2, r4
 801172a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801172c:	e105      	b.n	801193a <UART_SetConfig+0x4d6>
 801172e:	bf00      	nop
 8011730:	40011000 	.word	0x40011000
 8011734:	40011400 	.word	0x40011400
 8011738:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801173c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011740:	2200      	movs	r2, #0
 8011742:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011746:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801174a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801174e:	4642      	mov	r2, r8
 8011750:	464b      	mov	r3, r9
 8011752:	1891      	adds	r1, r2, r2
 8011754:	6239      	str	r1, [r7, #32]
 8011756:	415b      	adcs	r3, r3
 8011758:	627b      	str	r3, [r7, #36]	; 0x24
 801175a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801175e:	4641      	mov	r1, r8
 8011760:	1854      	adds	r4, r2, r1
 8011762:	4649      	mov	r1, r9
 8011764:	eb43 0501 	adc.w	r5, r3, r1
 8011768:	f04f 0200 	mov.w	r2, #0
 801176c:	f04f 0300 	mov.w	r3, #0
 8011770:	00eb      	lsls	r3, r5, #3
 8011772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011776:	00e2      	lsls	r2, r4, #3
 8011778:	4614      	mov	r4, r2
 801177a:	461d      	mov	r5, r3
 801177c:	4643      	mov	r3, r8
 801177e:	18e3      	adds	r3, r4, r3
 8011780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011784:	464b      	mov	r3, r9
 8011786:	eb45 0303 	adc.w	r3, r5, r3
 801178a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801178e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	2200      	movs	r2, #0
 8011796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801179a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801179e:	f04f 0200 	mov.w	r2, #0
 80117a2:	f04f 0300 	mov.w	r3, #0
 80117a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80117aa:	4629      	mov	r1, r5
 80117ac:	008b      	lsls	r3, r1, #2
 80117ae:	4621      	mov	r1, r4
 80117b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80117b4:	4621      	mov	r1, r4
 80117b6:	008a      	lsls	r2, r1, #2
 80117b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80117bc:	f7ef fa0c 	bl	8000bd8 <__aeabi_uldivmod>
 80117c0:	4602      	mov	r2, r0
 80117c2:	460b      	mov	r3, r1
 80117c4:	4b60      	ldr	r3, [pc, #384]	; (8011948 <UART_SetConfig+0x4e4>)
 80117c6:	fba3 2302 	umull	r2, r3, r3, r2
 80117ca:	095b      	lsrs	r3, r3, #5
 80117cc:	011c      	lsls	r4, r3, #4
 80117ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80117d2:	2200      	movs	r2, #0
 80117d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80117d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80117dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80117e0:	4642      	mov	r2, r8
 80117e2:	464b      	mov	r3, r9
 80117e4:	1891      	adds	r1, r2, r2
 80117e6:	61b9      	str	r1, [r7, #24]
 80117e8:	415b      	adcs	r3, r3
 80117ea:	61fb      	str	r3, [r7, #28]
 80117ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80117f0:	4641      	mov	r1, r8
 80117f2:	1851      	adds	r1, r2, r1
 80117f4:	6139      	str	r1, [r7, #16]
 80117f6:	4649      	mov	r1, r9
 80117f8:	414b      	adcs	r3, r1
 80117fa:	617b      	str	r3, [r7, #20]
 80117fc:	f04f 0200 	mov.w	r2, #0
 8011800:	f04f 0300 	mov.w	r3, #0
 8011804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011808:	4659      	mov	r1, fp
 801180a:	00cb      	lsls	r3, r1, #3
 801180c:	4651      	mov	r1, sl
 801180e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011812:	4651      	mov	r1, sl
 8011814:	00ca      	lsls	r2, r1, #3
 8011816:	4610      	mov	r0, r2
 8011818:	4619      	mov	r1, r3
 801181a:	4603      	mov	r3, r0
 801181c:	4642      	mov	r2, r8
 801181e:	189b      	adds	r3, r3, r2
 8011820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011824:	464b      	mov	r3, r9
 8011826:	460a      	mov	r2, r1
 8011828:	eb42 0303 	adc.w	r3, r2, r3
 801182c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	2200      	movs	r2, #0
 8011838:	67bb      	str	r3, [r7, #120]	; 0x78
 801183a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801183c:	f04f 0200 	mov.w	r2, #0
 8011840:	f04f 0300 	mov.w	r3, #0
 8011844:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011848:	4649      	mov	r1, r9
 801184a:	008b      	lsls	r3, r1, #2
 801184c:	4641      	mov	r1, r8
 801184e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011852:	4641      	mov	r1, r8
 8011854:	008a      	lsls	r2, r1, #2
 8011856:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801185a:	f7ef f9bd 	bl	8000bd8 <__aeabi_uldivmod>
 801185e:	4602      	mov	r2, r0
 8011860:	460b      	mov	r3, r1
 8011862:	4b39      	ldr	r3, [pc, #228]	; (8011948 <UART_SetConfig+0x4e4>)
 8011864:	fba3 1302 	umull	r1, r3, r3, r2
 8011868:	095b      	lsrs	r3, r3, #5
 801186a:	2164      	movs	r1, #100	; 0x64
 801186c:	fb01 f303 	mul.w	r3, r1, r3
 8011870:	1ad3      	subs	r3, r2, r3
 8011872:	011b      	lsls	r3, r3, #4
 8011874:	3332      	adds	r3, #50	; 0x32
 8011876:	4a34      	ldr	r2, [pc, #208]	; (8011948 <UART_SetConfig+0x4e4>)
 8011878:	fba2 2303 	umull	r2, r3, r2, r3
 801187c:	095b      	lsrs	r3, r3, #5
 801187e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011882:	441c      	add	r4, r3
 8011884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011888:	2200      	movs	r2, #0
 801188a:	673b      	str	r3, [r7, #112]	; 0x70
 801188c:	677a      	str	r2, [r7, #116]	; 0x74
 801188e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8011892:	4642      	mov	r2, r8
 8011894:	464b      	mov	r3, r9
 8011896:	1891      	adds	r1, r2, r2
 8011898:	60b9      	str	r1, [r7, #8]
 801189a:	415b      	adcs	r3, r3
 801189c:	60fb      	str	r3, [r7, #12]
 801189e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80118a2:	4641      	mov	r1, r8
 80118a4:	1851      	adds	r1, r2, r1
 80118a6:	6039      	str	r1, [r7, #0]
 80118a8:	4649      	mov	r1, r9
 80118aa:	414b      	adcs	r3, r1
 80118ac:	607b      	str	r3, [r7, #4]
 80118ae:	f04f 0200 	mov.w	r2, #0
 80118b2:	f04f 0300 	mov.w	r3, #0
 80118b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80118ba:	4659      	mov	r1, fp
 80118bc:	00cb      	lsls	r3, r1, #3
 80118be:	4651      	mov	r1, sl
 80118c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80118c4:	4651      	mov	r1, sl
 80118c6:	00ca      	lsls	r2, r1, #3
 80118c8:	4610      	mov	r0, r2
 80118ca:	4619      	mov	r1, r3
 80118cc:	4603      	mov	r3, r0
 80118ce:	4642      	mov	r2, r8
 80118d0:	189b      	adds	r3, r3, r2
 80118d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80118d4:	464b      	mov	r3, r9
 80118d6:	460a      	mov	r2, r1
 80118d8:	eb42 0303 	adc.w	r3, r2, r3
 80118dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80118de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80118e2:	685b      	ldr	r3, [r3, #4]
 80118e4:	2200      	movs	r2, #0
 80118e6:	663b      	str	r3, [r7, #96]	; 0x60
 80118e8:	667a      	str	r2, [r7, #100]	; 0x64
 80118ea:	f04f 0200 	mov.w	r2, #0
 80118ee:	f04f 0300 	mov.w	r3, #0
 80118f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80118f6:	4649      	mov	r1, r9
 80118f8:	008b      	lsls	r3, r1, #2
 80118fa:	4641      	mov	r1, r8
 80118fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011900:	4641      	mov	r1, r8
 8011902:	008a      	lsls	r2, r1, #2
 8011904:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011908:	f7ef f966 	bl	8000bd8 <__aeabi_uldivmod>
 801190c:	4602      	mov	r2, r0
 801190e:	460b      	mov	r3, r1
 8011910:	4b0d      	ldr	r3, [pc, #52]	; (8011948 <UART_SetConfig+0x4e4>)
 8011912:	fba3 1302 	umull	r1, r3, r3, r2
 8011916:	095b      	lsrs	r3, r3, #5
 8011918:	2164      	movs	r1, #100	; 0x64
 801191a:	fb01 f303 	mul.w	r3, r1, r3
 801191e:	1ad3      	subs	r3, r2, r3
 8011920:	011b      	lsls	r3, r3, #4
 8011922:	3332      	adds	r3, #50	; 0x32
 8011924:	4a08      	ldr	r2, [pc, #32]	; (8011948 <UART_SetConfig+0x4e4>)
 8011926:	fba2 2303 	umull	r2, r3, r2, r3
 801192a:	095b      	lsrs	r3, r3, #5
 801192c:	f003 020f 	and.w	r2, r3, #15
 8011930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4422      	add	r2, r4
 8011938:	609a      	str	r2, [r3, #8]
}
 801193a:	bf00      	nop
 801193c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011940:	46bd      	mov	sp, r7
 8011942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011946:	bf00      	nop
 8011948:	51eb851f 	.word	0x51eb851f

0801194c <__NVIC_SetPriority>:
{
 801194c:	b480      	push	{r7}
 801194e:	b083      	sub	sp, #12
 8011950:	af00      	add	r7, sp, #0
 8011952:	4603      	mov	r3, r0
 8011954:	6039      	str	r1, [r7, #0]
 8011956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801195c:	2b00      	cmp	r3, #0
 801195e:	db0a      	blt.n	8011976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	b2da      	uxtb	r2, r3
 8011964:	490c      	ldr	r1, [pc, #48]	; (8011998 <__NVIC_SetPriority+0x4c>)
 8011966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801196a:	0112      	lsls	r2, r2, #4
 801196c:	b2d2      	uxtb	r2, r2
 801196e:	440b      	add	r3, r1
 8011970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011974:	e00a      	b.n	801198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	b2da      	uxtb	r2, r3
 801197a:	4908      	ldr	r1, [pc, #32]	; (801199c <__NVIC_SetPriority+0x50>)
 801197c:	79fb      	ldrb	r3, [r7, #7]
 801197e:	f003 030f 	and.w	r3, r3, #15
 8011982:	3b04      	subs	r3, #4
 8011984:	0112      	lsls	r2, r2, #4
 8011986:	b2d2      	uxtb	r2, r2
 8011988:	440b      	add	r3, r1
 801198a:	761a      	strb	r2, [r3, #24]
}
 801198c:	bf00      	nop
 801198e:	370c      	adds	r7, #12
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr
 8011998:	e000e100 	.word	0xe000e100
 801199c:	e000ed00 	.word	0xe000ed00

080119a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80119a0:	b580      	push	{r7, lr}
 80119a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80119a4:	4b05      	ldr	r3, [pc, #20]	; (80119bc <SysTick_Handler+0x1c>)
 80119a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80119a8:	f001 ffca 	bl	8013940 <xTaskGetSchedulerState>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d001      	beq.n	80119b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80119b2:	f002 fdb1 	bl	8014518 <xPortSysTickHandler>
  }
}
 80119b6:	bf00      	nop
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	e000e010 	.word	0xe000e010

080119c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80119c0:	b580      	push	{r7, lr}
 80119c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80119c4:	2100      	movs	r1, #0
 80119c6:	f06f 0004 	mvn.w	r0, #4
 80119ca:	f7ff ffbf 	bl	801194c <__NVIC_SetPriority>
#endif
}
 80119ce:	bf00      	nop
 80119d0:	bd80      	pop	{r7, pc}
	...

080119d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80119d4:	b480      	push	{r7}
 80119d6:	b083      	sub	sp, #12
 80119d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119da:	f3ef 8305 	mrs	r3, IPSR
 80119de:	603b      	str	r3, [r7, #0]
  return(result);
 80119e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d003      	beq.n	80119ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80119e6:	f06f 0305 	mvn.w	r3, #5
 80119ea:	607b      	str	r3, [r7, #4]
 80119ec:	e00c      	b.n	8011a08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80119ee:	4b0a      	ldr	r3, [pc, #40]	; (8011a18 <osKernelInitialize+0x44>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d105      	bne.n	8011a02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80119f6:	4b08      	ldr	r3, [pc, #32]	; (8011a18 <osKernelInitialize+0x44>)
 80119f8:	2201      	movs	r2, #1
 80119fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80119fc:	2300      	movs	r3, #0
 80119fe:	607b      	str	r3, [r7, #4]
 8011a00:	e002      	b.n	8011a08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011a02:	f04f 33ff 	mov.w	r3, #4294967295
 8011a06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011a08:	687b      	ldr	r3, [r7, #4]
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	370c      	adds	r7, #12
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a14:	4770      	bx	lr
 8011a16:	bf00      	nop
 8011a18:	200023f8 	.word	0x200023f8

08011a1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a22:	f3ef 8305 	mrs	r3, IPSR
 8011a26:	603b      	str	r3, [r7, #0]
  return(result);
 8011a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d003      	beq.n	8011a36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8011a2e:	f06f 0305 	mvn.w	r3, #5
 8011a32:	607b      	str	r3, [r7, #4]
 8011a34:	e010      	b.n	8011a58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011a36:	4b0b      	ldr	r3, [pc, #44]	; (8011a64 <osKernelStart+0x48>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d109      	bne.n	8011a52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011a3e:	f7ff ffbf 	bl	80119c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011a42:	4b08      	ldr	r3, [pc, #32]	; (8011a64 <osKernelStart+0x48>)
 8011a44:	2202      	movs	r2, #2
 8011a46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011a48:	f001 fb32 	bl	80130b0 <vTaskStartScheduler>
      stat = osOK;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	607b      	str	r3, [r7, #4]
 8011a50:	e002      	b.n	8011a58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011a52:	f04f 33ff 	mov.w	r3, #4294967295
 8011a56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011a58:	687b      	ldr	r3, [r7, #4]
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3708      	adds	r7, #8
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}
 8011a62:	bf00      	nop
 8011a64:	200023f8 	.word	0x200023f8

08011a68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b08e      	sub	sp, #56	; 0x38
 8011a6c:	af04      	add	r7, sp, #16
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011a74:	2300      	movs	r3, #0
 8011a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a78:	f3ef 8305 	mrs	r3, IPSR
 8011a7c:	617b      	str	r3, [r7, #20]
  return(result);
 8011a7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d17e      	bne.n	8011b82 <osThreadNew+0x11a>
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d07b      	beq.n	8011b82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011a8a:	2380      	movs	r3, #128	; 0x80
 8011a8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011a8e:	2318      	movs	r3, #24
 8011a90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011a92:	2300      	movs	r3, #0
 8011a94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011a96:	f04f 33ff 	mov.w	r3, #4294967295
 8011a9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d045      	beq.n	8011b2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d002      	beq.n	8011ab0 <osThreadNew+0x48>
        name = attr->name;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	699b      	ldr	r3, [r3, #24]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d002      	beq.n	8011abe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	699b      	ldr	r3, [r3, #24]
 8011abc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d008      	beq.n	8011ad6 <osThreadNew+0x6e>
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	2b38      	cmp	r3, #56	; 0x38
 8011ac8:	d805      	bhi.n	8011ad6 <osThreadNew+0x6e>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	f003 0301 	and.w	r3, r3, #1
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d001      	beq.n	8011ada <osThreadNew+0x72>
        return (NULL);
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	e054      	b.n	8011b84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	695b      	ldr	r3, [r3, #20]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d003      	beq.n	8011aea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	695b      	ldr	r3, [r3, #20]
 8011ae6:	089b      	lsrs	r3, r3, #2
 8011ae8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	689b      	ldr	r3, [r3, #8]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d00e      	beq.n	8011b10 <osThreadNew+0xa8>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	68db      	ldr	r3, [r3, #12]
 8011af6:	2b5b      	cmp	r3, #91	; 0x5b
 8011af8:	d90a      	bls.n	8011b10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d006      	beq.n	8011b10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	695b      	ldr	r3, [r3, #20]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d002      	beq.n	8011b10 <osThreadNew+0xa8>
        mem = 1;
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	61bb      	str	r3, [r7, #24]
 8011b0e:	e010      	b.n	8011b32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	689b      	ldr	r3, [r3, #8]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d10c      	bne.n	8011b32 <osThreadNew+0xca>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	68db      	ldr	r3, [r3, #12]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d108      	bne.n	8011b32 <osThreadNew+0xca>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	691b      	ldr	r3, [r3, #16]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d104      	bne.n	8011b32 <osThreadNew+0xca>
          mem = 0;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	61bb      	str	r3, [r7, #24]
 8011b2c:	e001      	b.n	8011b32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d110      	bne.n	8011b5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011b3c:	687a      	ldr	r2, [r7, #4]
 8011b3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011b40:	9202      	str	r2, [sp, #8]
 8011b42:	9301      	str	r3, [sp, #4]
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	9300      	str	r3, [sp, #0]
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	6a3a      	ldr	r2, [r7, #32]
 8011b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b4e:	68f8      	ldr	r0, [r7, #12]
 8011b50:	f001 f8d8 	bl	8012d04 <xTaskCreateStatic>
 8011b54:	4603      	mov	r3, r0
 8011b56:	613b      	str	r3, [r7, #16]
 8011b58:	e013      	b.n	8011b82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d110      	bne.n	8011b82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011b60:	6a3b      	ldr	r3, [r7, #32]
 8011b62:	b29a      	uxth	r2, r3
 8011b64:	f107 0310 	add.w	r3, r7, #16
 8011b68:	9301      	str	r3, [sp, #4]
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b72:	68f8      	ldr	r0, [r7, #12]
 8011b74:	f001 f923 	bl	8012dbe <xTaskCreate>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	d001      	beq.n	8011b82 <osThreadNew+0x11a>
            hTask = NULL;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011b82:	693b      	ldr	r3, [r7, #16]
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3728      	adds	r7, #40	; 0x28
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b084      	sub	sp, #16
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b94:	f3ef 8305 	mrs	r3, IPSR
 8011b98:	60bb      	str	r3, [r7, #8]
  return(result);
 8011b9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d003      	beq.n	8011ba8 <osDelay+0x1c>
    stat = osErrorISR;
 8011ba0:	f06f 0305 	mvn.w	r3, #5
 8011ba4:	60fb      	str	r3, [r7, #12]
 8011ba6:	e007      	b.n	8011bb8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d002      	beq.n	8011bb8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f001 fa48 	bl	8013048 <vTaskDelay>
    }
  }

  return (stat);
 8011bb8:	68fb      	ldr	r3, [r7, #12]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3710      	adds	r7, #16
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b08a      	sub	sp, #40	; 0x28
 8011bc6:	af02      	add	r7, sp, #8
 8011bc8:	60f8      	str	r0, [r7, #12]
 8011bca:	60b9      	str	r1, [r7, #8]
 8011bcc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bd2:	f3ef 8305 	mrs	r3, IPSR
 8011bd6:	613b      	str	r3, [r7, #16]
  return(result);
 8011bd8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d15f      	bne.n	8011c9e <osMessageQueueNew+0xdc>
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d05c      	beq.n	8011c9e <osMessageQueueNew+0xdc>
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d059      	beq.n	8011c9e <osMessageQueueNew+0xdc>
    mem = -1;
 8011bea:	f04f 33ff 	mov.w	r3, #4294967295
 8011bee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d029      	beq.n	8011c4a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	689b      	ldr	r3, [r3, #8]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d012      	beq.n	8011c24 <osMessageQueueNew+0x62>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	2b4f      	cmp	r3, #79	; 0x4f
 8011c04:	d90e      	bls.n	8011c24 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d00a      	beq.n	8011c24 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	695a      	ldr	r2, [r3, #20]
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	68b9      	ldr	r1, [r7, #8]
 8011c16:	fb01 f303 	mul.w	r3, r1, r3
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d302      	bcc.n	8011c24 <osMessageQueueNew+0x62>
        mem = 1;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	61bb      	str	r3, [r7, #24]
 8011c22:	e014      	b.n	8011c4e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	689b      	ldr	r3, [r3, #8]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d110      	bne.n	8011c4e <osMessageQueueNew+0x8c>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	68db      	ldr	r3, [r3, #12]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d10c      	bne.n	8011c4e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d108      	bne.n	8011c4e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	695b      	ldr	r3, [r3, #20]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d104      	bne.n	8011c4e <osMessageQueueNew+0x8c>
          mem = 0;
 8011c44:	2300      	movs	r3, #0
 8011c46:	61bb      	str	r3, [r7, #24]
 8011c48:	e001      	b.n	8011c4e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011c4e:	69bb      	ldr	r3, [r7, #24]
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	d10b      	bne.n	8011c6c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	691a      	ldr	r2, [r3, #16]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	689b      	ldr	r3, [r3, #8]
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	9100      	str	r1, [sp, #0]
 8011c60:	68b9      	ldr	r1, [r7, #8]
 8011c62:	68f8      	ldr	r0, [r7, #12]
 8011c64:	f000 fab0 	bl	80121c8 <xQueueGenericCreateStatic>
 8011c68:	61f8      	str	r0, [r7, #28]
 8011c6a:	e008      	b.n	8011c7e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011c6c:	69bb      	ldr	r3, [r7, #24]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d105      	bne.n	8011c7e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011c72:	2200      	movs	r2, #0
 8011c74:	68b9      	ldr	r1, [r7, #8]
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	f000 fb1e 	bl	80122b8 <xQueueGenericCreate>
 8011c7c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011c7e:	69fb      	ldr	r3, [r7, #28]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d00c      	beq.n	8011c9e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d003      	beq.n	8011c92 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	617b      	str	r3, [r7, #20]
 8011c90:	e001      	b.n	8011c96 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011c92:	2300      	movs	r3, #0
 8011c94:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011c96:	6979      	ldr	r1, [r7, #20]
 8011c98:	69f8      	ldr	r0, [r7, #28]
 8011c9a:	f000 ffd5 	bl	8012c48 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011c9e:	69fb      	ldr	r3, [r7, #28]
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3720      	adds	r7, #32
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b088      	sub	sp, #32
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	603b      	str	r3, [r7, #0]
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cc0:	f3ef 8305 	mrs	r3, IPSR
 8011cc4:	617b      	str	r3, [r7, #20]
  return(result);
 8011cc6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d028      	beq.n	8011d1e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d005      	beq.n	8011cde <osMessageQueuePut+0x36>
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d002      	beq.n	8011cde <osMessageQueuePut+0x36>
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d003      	beq.n	8011ce6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8011cde:	f06f 0303 	mvn.w	r3, #3
 8011ce2:	61fb      	str	r3, [r7, #28]
 8011ce4:	e038      	b.n	8011d58 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011cea:	f107 0210 	add.w	r2, r7, #16
 8011cee:	2300      	movs	r3, #0
 8011cf0:	68b9      	ldr	r1, [r7, #8]
 8011cf2:	69b8      	ldr	r0, [r7, #24]
 8011cf4:	f000 fc3c 	bl	8012570 <xQueueGenericSendFromISR>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d003      	beq.n	8011d06 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011cfe:	f06f 0302 	mvn.w	r3, #2
 8011d02:	61fb      	str	r3, [r7, #28]
 8011d04:	e028      	b.n	8011d58 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d025      	beq.n	8011d58 <osMessageQueuePut+0xb0>
 8011d0c:	4b15      	ldr	r3, [pc, #84]	; (8011d64 <osMessageQueuePut+0xbc>)
 8011d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d12:	601a      	str	r2, [r3, #0]
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	f3bf 8f6f 	isb	sy
 8011d1c:	e01c      	b.n	8011d58 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011d1e:	69bb      	ldr	r3, [r7, #24]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d002      	beq.n	8011d2a <osMessageQueuePut+0x82>
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d103      	bne.n	8011d32 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8011d2a:	f06f 0303 	mvn.w	r3, #3
 8011d2e:	61fb      	str	r3, [r7, #28]
 8011d30:	e012      	b.n	8011d58 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011d32:	2300      	movs	r3, #0
 8011d34:	683a      	ldr	r2, [r7, #0]
 8011d36:	68b9      	ldr	r1, [r7, #8]
 8011d38:	69b8      	ldr	r0, [r7, #24]
 8011d3a:	f000 fb1b 	bl	8012374 <xQueueGenericSend>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	d009      	beq.n	8011d58 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d003      	beq.n	8011d52 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011d4a:	f06f 0301 	mvn.w	r3, #1
 8011d4e:	61fb      	str	r3, [r7, #28]
 8011d50:	e002      	b.n	8011d58 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011d52:	f06f 0302 	mvn.w	r3, #2
 8011d56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011d58:	69fb      	ldr	r3, [r7, #28]
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3720      	adds	r7, #32
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	e000ed04 	.word	0xe000ed04

08011d68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b088      	sub	sp, #32
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	607a      	str	r2, [r7, #4]
 8011d74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d7e:	f3ef 8305 	mrs	r3, IPSR
 8011d82:	617b      	str	r3, [r7, #20]
  return(result);
 8011d84:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d028      	beq.n	8011ddc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011d8a:	69bb      	ldr	r3, [r7, #24]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d005      	beq.n	8011d9c <osMessageQueueGet+0x34>
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d002      	beq.n	8011d9c <osMessageQueueGet+0x34>
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d003      	beq.n	8011da4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011d9c:	f06f 0303 	mvn.w	r3, #3
 8011da0:	61fb      	str	r3, [r7, #28]
 8011da2:	e037      	b.n	8011e14 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011da4:	2300      	movs	r3, #0
 8011da6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011da8:	f107 0310 	add.w	r3, r7, #16
 8011dac:	461a      	mov	r2, r3
 8011dae:	68b9      	ldr	r1, [r7, #8]
 8011db0:	69b8      	ldr	r0, [r7, #24]
 8011db2:	f000 fd59 	bl	8012868 <xQueueReceiveFromISR>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	d003      	beq.n	8011dc4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011dbc:	f06f 0302 	mvn.w	r3, #2
 8011dc0:	61fb      	str	r3, [r7, #28]
 8011dc2:	e027      	b.n	8011e14 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d024      	beq.n	8011e14 <osMessageQueueGet+0xac>
 8011dca:	4b15      	ldr	r3, [pc, #84]	; (8011e20 <osMessageQueueGet+0xb8>)
 8011dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dd0:	601a      	str	r2, [r3, #0]
 8011dd2:	f3bf 8f4f 	dsb	sy
 8011dd6:	f3bf 8f6f 	isb	sy
 8011dda:	e01b      	b.n	8011e14 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011ddc:	69bb      	ldr	r3, [r7, #24]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d002      	beq.n	8011de8 <osMessageQueueGet+0x80>
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d103      	bne.n	8011df0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011de8:	f06f 0303 	mvn.w	r3, #3
 8011dec:	61fb      	str	r3, [r7, #28]
 8011dee:	e011      	b.n	8011e14 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011df0:	683a      	ldr	r2, [r7, #0]
 8011df2:	68b9      	ldr	r1, [r7, #8]
 8011df4:	69b8      	ldr	r0, [r7, #24]
 8011df6:	f000 fc57 	bl	80126a8 <xQueueReceive>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	d009      	beq.n	8011e14 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d003      	beq.n	8011e0e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011e06:	f06f 0301 	mvn.w	r3, #1
 8011e0a:	61fb      	str	r3, [r7, #28]
 8011e0c:	e002      	b.n	8011e14 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8011e0e:	f06f 0302 	mvn.w	r3, #2
 8011e12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011e14:	69fb      	ldr	r3, [r7, #28]
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3720      	adds	r7, #32
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
 8011e1e:	bf00      	nop
 8011e20:	e000ed04 	.word	0xe000ed04

08011e24 <osMessageQueueGetCapacity>:

uint32_t osMessageQueueGetCapacity (osMessageQueueId_t mq_id) {
 8011e24:	b480      	push	{r7}
 8011e26:	b085      	sub	sp, #20
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	60bb      	str	r3, [r7, #8]
  uint32_t capacity;

  if (mq == NULL) {
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d102      	bne.n	8011e3c <osMessageQueueGetCapacity+0x18>
    capacity = 0U;
 8011e36:	2300      	movs	r3, #0
 8011e38:	60fb      	str	r3, [r7, #12]
 8011e3a:	e002      	b.n	8011e42 <osMessageQueueGetCapacity+0x1e>
  } else {
    /* capacity = pxQueue->uxLength */
    capacity = mq->uxDummy4[1];
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e40:	60fb      	str	r3, [r7, #12]
  }

  return (capacity);
 8011e42:	68fb      	ldr	r3, [r7, #12]
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3714      	adds	r7, #20
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4e:	4770      	bx	lr

08011e50 <osMessageQueueGetMsgSize>:

uint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id) {
 8011e50:	b480      	push	{r7}
 8011e52:	b085      	sub	sp, #20
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	60bb      	str	r3, [r7, #8]
  uint32_t size;

  if (mq == NULL) {
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d102      	bne.n	8011e68 <osMessageQueueGetMsgSize+0x18>
    size = 0U;
 8011e62:	2300      	movs	r3, #0
 8011e64:	60fb      	str	r3, [r7, #12]
 8011e66:	e002      	b.n	8011e6e <osMessageQueueGetMsgSize+0x1e>
  } else {
    /* size = pxQueue->uxItemSize */
    size = mq->uxDummy4[2];
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e6c:	60fb      	str	r3, [r7, #12]
  }

  return (size);
 8011e6e:	68fb      	ldr	r3, [r7, #12]
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3714      	adds	r7, #20
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr

08011e7c <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b086      	sub	sp, #24
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d102      	bne.n	8011e94 <osMessageQueueGetCount+0x18>
    count = 0U;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	617b      	str	r3, [r7, #20]
 8011e92:	e00e      	b.n	8011eb2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e94:	f3ef 8305 	mrs	r3, IPSR
 8011e98:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e9a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d004      	beq.n	8011eaa <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8011ea0:	6938      	ldr	r0, [r7, #16]
 8011ea2:	f000 fda2 	bl	80129ea <uxQueueMessagesWaitingFromISR>
 8011ea6:	6178      	str	r0, [r7, #20]
 8011ea8:	e003      	b.n	8011eb2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8011eaa:	6938      	ldr	r0, [r7, #16]
 8011eac:	f000 fd5c 	bl	8012968 <uxQueueMessagesWaiting>
 8011eb0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8011eb2:	697b      	ldr	r3, [r7, #20]
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3718      	adds	r7, #24
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b08a      	sub	sp, #40	; 0x28
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8011ec8:	6a3b      	ldr	r3, [r7, #32]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d102      	bne.n	8011ed4 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8011ed2:	e023      	b.n	8011f1c <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ed4:	f3ef 8305 	mrs	r3, IPSR
 8011ed8:	61bb      	str	r3, [r7, #24]
  return(result);
 8011eda:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d019      	beq.n	8011f14 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011ee0:	f3ef 8211 	mrs	r2, BASEPRI
 8011ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee8:	f383 8811 	msr	BASEPRI, r3
 8011eec:	f3bf 8f6f 	isb	sy
 8011ef0:	f3bf 8f4f 	dsb	sy
 8011ef4:	613a      	str	r2, [r7, #16]
 8011ef6:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011ef8:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8011efa:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8011efc:	6a3b      	ldr	r3, [r7, #32]
 8011efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011f00:	6a3b      	ldr	r3, [r7, #32]
 8011f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	627b      	str	r3, [r7, #36]	; 0x24
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011f0c:	697b      	ldr	r3, [r7, #20]
 8011f0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011f12:	e003      	b.n	8011f1c <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8011f14:	6a38      	ldr	r0, [r7, #32]
 8011f16:	f000 fd45 	bl	80129a4 <uxQueueSpacesAvailable>
 8011f1a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3728      	adds	r7, #40	; 0x28
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
	...

08011f28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011f28:	b480      	push	{r7}
 8011f2a:	b085      	sub	sp, #20
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	4a07      	ldr	r2, [pc, #28]	; (8011f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8011f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	4a06      	ldr	r2, [pc, #24]	; (8011f58 <vApplicationGetIdleTaskMemory+0x30>)
 8011f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2280      	movs	r2, #128	; 0x80
 8011f44:	601a      	str	r2, [r3, #0]
}
 8011f46:	bf00      	nop
 8011f48:	3714      	adds	r7, #20
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	200023fc 	.word	0x200023fc
 8011f58:	20002458 	.word	0x20002458

08011f5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011f5c:	b480      	push	{r7}
 8011f5e:	b085      	sub	sp, #20
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	4a07      	ldr	r2, [pc, #28]	; (8011f88 <vApplicationGetTimerTaskMemory+0x2c>)
 8011f6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	4a06      	ldr	r2, [pc, #24]	; (8011f8c <vApplicationGetTimerTaskMemory+0x30>)
 8011f72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011f7a:	601a      	str	r2, [r3, #0]
}
 8011f7c:	bf00      	nop
 8011f7e:	3714      	adds	r7, #20
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr
 8011f88:	20002658 	.word	0x20002658
 8011f8c:	200026b4 	.word	0x200026b4

08011f90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f103 0208 	add.w	r2, r3, #8
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	f103 0208 	add.w	r2, r3, #8
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f103 0208 	add.w	r2, r3, #8
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011fc4:	bf00      	nop
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011fde:	bf00      	nop
 8011fe0:	370c      	adds	r7, #12
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe8:	4770      	bx	lr

08011fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011fea:	b480      	push	{r7}
 8011fec:	b085      	sub	sp, #20
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	6078      	str	r0, [r7, #4]
 8011ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	68fa      	ldr	r2, [r7, #12]
 8011ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	689a      	ldr	r2, [r3, #8]
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	683a      	ldr	r2, [r7, #0]
 801200e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	683a      	ldr	r2, [r7, #0]
 8012014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	687a      	ldr	r2, [r7, #4]
 801201a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	1c5a      	adds	r2, r3, #1
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	601a      	str	r2, [r3, #0]
}
 8012026:	bf00      	nop
 8012028:	3714      	adds	r7, #20
 801202a:	46bd      	mov	sp, r7
 801202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012030:	4770      	bx	lr

08012032 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012032:	b480      	push	{r7}
 8012034:	b085      	sub	sp, #20
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
 801203a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012048:	d103      	bne.n	8012052 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	691b      	ldr	r3, [r3, #16]
 801204e:	60fb      	str	r3, [r7, #12]
 8012050:	e00c      	b.n	801206c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	3308      	adds	r3, #8
 8012056:	60fb      	str	r3, [r7, #12]
 8012058:	e002      	b.n	8012060 <vListInsert+0x2e>
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	60fb      	str	r3, [r7, #12]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	68ba      	ldr	r2, [r7, #8]
 8012068:	429a      	cmp	r2, r3
 801206a:	d2f6      	bcs.n	801205a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	685a      	ldr	r2, [r3, #4]
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	683a      	ldr	r2, [r7, #0]
 801207a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	68fa      	ldr	r2, [r7, #12]
 8012080:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	683a      	ldr	r2, [r7, #0]
 8012086:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	1c5a      	adds	r2, r3, #1
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	601a      	str	r2, [r3, #0]
}
 8012098:	bf00      	nop
 801209a:	3714      	adds	r7, #20
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr

080120a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80120a4:	b480      	push	{r7}
 80120a6:	b085      	sub	sp, #20
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	691b      	ldr	r3, [r3, #16]
 80120b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	6892      	ldr	r2, [r2, #8]
 80120ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	689b      	ldr	r3, [r3, #8]
 80120c0:	687a      	ldr	r2, [r7, #4]
 80120c2:	6852      	ldr	r2, [r2, #4]
 80120c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d103      	bne.n	80120d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	689a      	ldr	r2, [r3, #8]
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2200      	movs	r2, #0
 80120dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	1e5a      	subs	r2, r3, #1
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	681b      	ldr	r3, [r3, #0]
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	3714      	adds	r7, #20
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr

080120f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b084      	sub	sp, #16
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d10a      	bne.n	8012122 <xQueueGenericReset+0x2a>
	__asm volatile
 801210c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012110:	f383 8811 	msr	BASEPRI, r3
 8012114:	f3bf 8f6f 	isb	sy
 8012118:	f3bf 8f4f 	dsb	sy
 801211c:	60bb      	str	r3, [r7, #8]
}
 801211e:	bf00      	nop
 8012120:	e7fe      	b.n	8012120 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012122:	f002 f967 	bl	80143f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	681a      	ldr	r2, [r3, #0]
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801212e:	68f9      	ldr	r1, [r7, #12]
 8012130:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012132:	fb01 f303 	mul.w	r3, r1, r3
 8012136:	441a      	add	r2, r3
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	2200      	movs	r2, #0
 8012140:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	681a      	ldr	r2, [r3, #0]
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	681a      	ldr	r2, [r3, #0]
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012152:	3b01      	subs	r3, #1
 8012154:	68f9      	ldr	r1, [r7, #12]
 8012156:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012158:	fb01 f303 	mul.w	r3, r1, r3
 801215c:	441a      	add	r2, r3
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	22ff      	movs	r2, #255	; 0xff
 8012166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	22ff      	movs	r2, #255	; 0xff
 801216e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d114      	bne.n	80121a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	691b      	ldr	r3, [r3, #16]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d01a      	beq.n	80121b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	3310      	adds	r3, #16
 8012184:	4618      	mov	r0, r3
 8012186:	f001 fa1d 	bl	80135c4 <xTaskRemoveFromEventList>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d012      	beq.n	80121b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012190:	4b0c      	ldr	r3, [pc, #48]	; (80121c4 <xQueueGenericReset+0xcc>)
 8012192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012196:	601a      	str	r2, [r3, #0]
 8012198:	f3bf 8f4f 	dsb	sy
 801219c:	f3bf 8f6f 	isb	sy
 80121a0:	e009      	b.n	80121b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	3310      	adds	r3, #16
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7ff fef2 	bl	8011f90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	3324      	adds	r3, #36	; 0x24
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7ff feed 	bl	8011f90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80121b6:	f002 f94d 	bl	8014454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80121ba:	2301      	movs	r3, #1
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3710      	adds	r7, #16
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	e000ed04 	.word	0xe000ed04

080121c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b08e      	sub	sp, #56	; 0x38
 80121cc:	af02      	add	r7, sp, #8
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	607a      	str	r2, [r7, #4]
 80121d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d10a      	bne.n	80121f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80121dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e0:	f383 8811 	msr	BASEPRI, r3
 80121e4:	f3bf 8f6f 	isb	sy
 80121e8:	f3bf 8f4f 	dsb	sy
 80121ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80121ee:	bf00      	nop
 80121f0:	e7fe      	b.n	80121f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d10a      	bne.n	801220e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80121f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121fc:	f383 8811 	msr	BASEPRI, r3
 8012200:	f3bf 8f6f 	isb	sy
 8012204:	f3bf 8f4f 	dsb	sy
 8012208:	627b      	str	r3, [r7, #36]	; 0x24
}
 801220a:	bf00      	nop
 801220c:	e7fe      	b.n	801220c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d002      	beq.n	801221a <xQueueGenericCreateStatic+0x52>
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d001      	beq.n	801221e <xQueueGenericCreateStatic+0x56>
 801221a:	2301      	movs	r3, #1
 801221c:	e000      	b.n	8012220 <xQueueGenericCreateStatic+0x58>
 801221e:	2300      	movs	r3, #0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d10a      	bne.n	801223a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012228:	f383 8811 	msr	BASEPRI, r3
 801222c:	f3bf 8f6f 	isb	sy
 8012230:	f3bf 8f4f 	dsb	sy
 8012234:	623b      	str	r3, [r7, #32]
}
 8012236:	bf00      	nop
 8012238:	e7fe      	b.n	8012238 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d102      	bne.n	8012246 <xQueueGenericCreateStatic+0x7e>
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d101      	bne.n	801224a <xQueueGenericCreateStatic+0x82>
 8012246:	2301      	movs	r3, #1
 8012248:	e000      	b.n	801224c <xQueueGenericCreateStatic+0x84>
 801224a:	2300      	movs	r3, #0
 801224c:	2b00      	cmp	r3, #0
 801224e:	d10a      	bne.n	8012266 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012254:	f383 8811 	msr	BASEPRI, r3
 8012258:	f3bf 8f6f 	isb	sy
 801225c:	f3bf 8f4f 	dsb	sy
 8012260:	61fb      	str	r3, [r7, #28]
}
 8012262:	bf00      	nop
 8012264:	e7fe      	b.n	8012264 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012266:	2350      	movs	r3, #80	; 0x50
 8012268:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	2b50      	cmp	r3, #80	; 0x50
 801226e:	d00a      	beq.n	8012286 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012274:	f383 8811 	msr	BASEPRI, r3
 8012278:	f3bf 8f6f 	isb	sy
 801227c:	f3bf 8f4f 	dsb	sy
 8012280:	61bb      	str	r3, [r7, #24]
}
 8012282:	bf00      	nop
 8012284:	e7fe      	b.n	8012284 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012286:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228e:	2b00      	cmp	r3, #0
 8012290:	d00d      	beq.n	80122ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012294:	2201      	movs	r2, #1
 8012296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801229a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a0:	9300      	str	r3, [sp, #0]
 80122a2:	4613      	mov	r3, r2
 80122a4:	687a      	ldr	r2, [r7, #4]
 80122a6:	68b9      	ldr	r1, [r7, #8]
 80122a8:	68f8      	ldr	r0, [r7, #12]
 80122aa:	f000 f83f 	bl	801232c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80122ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3730      	adds	r7, #48	; 0x30
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}

080122b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b08a      	sub	sp, #40	; 0x28
 80122bc:	af02      	add	r7, sp, #8
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	4613      	mov	r3, r2
 80122c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d10a      	bne.n	80122e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80122cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d0:	f383 8811 	msr	BASEPRI, r3
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	f3bf 8f4f 	dsb	sy
 80122dc:	613b      	str	r3, [r7, #16]
}
 80122de:	bf00      	nop
 80122e0:	e7fe      	b.n	80122e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	68ba      	ldr	r2, [r7, #8]
 80122e6:	fb02 f303 	mul.w	r3, r2, r3
 80122ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80122ec:	69fb      	ldr	r3, [r7, #28]
 80122ee:	3350      	adds	r3, #80	; 0x50
 80122f0:	4618      	mov	r0, r3
 80122f2:	f002 f9a1 	bl	8014638 <pvPortMalloc>
 80122f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80122f8:	69bb      	ldr	r3, [r7, #24]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d011      	beq.n	8012322 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80122fe:	69bb      	ldr	r3, [r7, #24]
 8012300:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	3350      	adds	r3, #80	; 0x50
 8012306:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012308:	69bb      	ldr	r3, [r7, #24]
 801230a:	2200      	movs	r2, #0
 801230c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012310:	79fa      	ldrb	r2, [r7, #7]
 8012312:	69bb      	ldr	r3, [r7, #24]
 8012314:	9300      	str	r3, [sp, #0]
 8012316:	4613      	mov	r3, r2
 8012318:	697a      	ldr	r2, [r7, #20]
 801231a:	68b9      	ldr	r1, [r7, #8]
 801231c:	68f8      	ldr	r0, [r7, #12]
 801231e:	f000 f805 	bl	801232c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012322:	69bb      	ldr	r3, [r7, #24]
	}
 8012324:	4618      	mov	r0, r3
 8012326:	3720      	adds	r7, #32
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b084      	sub	sp, #16
 8012330:	af00      	add	r7, sp, #0
 8012332:	60f8      	str	r0, [r7, #12]
 8012334:	60b9      	str	r1, [r7, #8]
 8012336:	607a      	str	r2, [r7, #4]
 8012338:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d103      	bne.n	8012348 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012340:	69bb      	ldr	r3, [r7, #24]
 8012342:	69ba      	ldr	r2, [r7, #24]
 8012344:	601a      	str	r2, [r3, #0]
 8012346:	e002      	b.n	801234e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	687a      	ldr	r2, [r7, #4]
 801234c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	68fa      	ldr	r2, [r7, #12]
 8012352:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012354:	69bb      	ldr	r3, [r7, #24]
 8012356:	68ba      	ldr	r2, [r7, #8]
 8012358:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801235a:	2101      	movs	r1, #1
 801235c:	69b8      	ldr	r0, [r7, #24]
 801235e:	f7ff fecb 	bl	80120f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	78fa      	ldrb	r2, [r7, #3]
 8012366:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801236a:	bf00      	nop
 801236c:	3710      	adds	r7, #16
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
	...

08012374 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b08e      	sub	sp, #56	; 0x38
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
 8012380:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012382:	2300      	movs	r3, #0
 8012384:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238c:	2b00      	cmp	r3, #0
 801238e:	d10a      	bne.n	80123a6 <xQueueGenericSend+0x32>
	__asm volatile
 8012390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012394:	f383 8811 	msr	BASEPRI, r3
 8012398:	f3bf 8f6f 	isb	sy
 801239c:	f3bf 8f4f 	dsb	sy
 80123a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80123a2:	bf00      	nop
 80123a4:	e7fe      	b.n	80123a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d103      	bne.n	80123b4 <xQueueGenericSend+0x40>
 80123ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d101      	bne.n	80123b8 <xQueueGenericSend+0x44>
 80123b4:	2301      	movs	r3, #1
 80123b6:	e000      	b.n	80123ba <xQueueGenericSend+0x46>
 80123b8:	2300      	movs	r3, #0
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d10a      	bne.n	80123d4 <xQueueGenericSend+0x60>
	__asm volatile
 80123be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c2:	f383 8811 	msr	BASEPRI, r3
 80123c6:	f3bf 8f6f 	isb	sy
 80123ca:	f3bf 8f4f 	dsb	sy
 80123ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80123d0:	bf00      	nop
 80123d2:	e7fe      	b.n	80123d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	2b02      	cmp	r3, #2
 80123d8:	d103      	bne.n	80123e2 <xQueueGenericSend+0x6e>
 80123da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d101      	bne.n	80123e6 <xQueueGenericSend+0x72>
 80123e2:	2301      	movs	r3, #1
 80123e4:	e000      	b.n	80123e8 <xQueueGenericSend+0x74>
 80123e6:	2300      	movs	r3, #0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d10a      	bne.n	8012402 <xQueueGenericSend+0x8e>
	__asm volatile
 80123ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f0:	f383 8811 	msr	BASEPRI, r3
 80123f4:	f3bf 8f6f 	isb	sy
 80123f8:	f3bf 8f4f 	dsb	sy
 80123fc:	623b      	str	r3, [r7, #32]
}
 80123fe:	bf00      	nop
 8012400:	e7fe      	b.n	8012400 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012402:	f001 fa9d 	bl	8013940 <xTaskGetSchedulerState>
 8012406:	4603      	mov	r3, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	d102      	bne.n	8012412 <xQueueGenericSend+0x9e>
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d101      	bne.n	8012416 <xQueueGenericSend+0xa2>
 8012412:	2301      	movs	r3, #1
 8012414:	e000      	b.n	8012418 <xQueueGenericSend+0xa4>
 8012416:	2300      	movs	r3, #0
 8012418:	2b00      	cmp	r3, #0
 801241a:	d10a      	bne.n	8012432 <xQueueGenericSend+0xbe>
	__asm volatile
 801241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012420:	f383 8811 	msr	BASEPRI, r3
 8012424:	f3bf 8f6f 	isb	sy
 8012428:	f3bf 8f4f 	dsb	sy
 801242c:	61fb      	str	r3, [r7, #28]
}
 801242e:	bf00      	nop
 8012430:	e7fe      	b.n	8012430 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012432:	f001 ffdf 	bl	80143f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801243e:	429a      	cmp	r2, r3
 8012440:	d302      	bcc.n	8012448 <xQueueGenericSend+0xd4>
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	2b02      	cmp	r3, #2
 8012446:	d129      	bne.n	801249c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012448:	683a      	ldr	r2, [r7, #0]
 801244a:	68b9      	ldr	r1, [r7, #8]
 801244c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801244e:	f000 faea 	bl	8012a26 <prvCopyDataToQueue>
 8012452:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012458:	2b00      	cmp	r3, #0
 801245a:	d010      	beq.n	801247e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245e:	3324      	adds	r3, #36	; 0x24
 8012460:	4618      	mov	r0, r3
 8012462:	f001 f8af 	bl	80135c4 <xTaskRemoveFromEventList>
 8012466:	4603      	mov	r3, r0
 8012468:	2b00      	cmp	r3, #0
 801246a:	d013      	beq.n	8012494 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801246c:	4b3f      	ldr	r3, [pc, #252]	; (801256c <xQueueGenericSend+0x1f8>)
 801246e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012472:	601a      	str	r2, [r3, #0]
 8012474:	f3bf 8f4f 	dsb	sy
 8012478:	f3bf 8f6f 	isb	sy
 801247c:	e00a      	b.n	8012494 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012480:	2b00      	cmp	r3, #0
 8012482:	d007      	beq.n	8012494 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012484:	4b39      	ldr	r3, [pc, #228]	; (801256c <xQueueGenericSend+0x1f8>)
 8012486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801248a:	601a      	str	r2, [r3, #0]
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012494:	f001 ffde 	bl	8014454 <vPortExitCritical>
				return pdPASS;
 8012498:	2301      	movs	r3, #1
 801249a:	e063      	b.n	8012564 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d103      	bne.n	80124aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80124a2:	f001 ffd7 	bl	8014454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80124a6:	2300      	movs	r3, #0
 80124a8:	e05c      	b.n	8012564 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80124aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d106      	bne.n	80124be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80124b0:	f107 0314 	add.w	r3, r7, #20
 80124b4:	4618      	mov	r0, r3
 80124b6:	f001 f8e9 	bl	801368c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80124ba:	2301      	movs	r3, #1
 80124bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80124be:	f001 ffc9 	bl	8014454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80124c2:	f000 fe5b 	bl	801317c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80124c6:	f001 ff95 	bl	80143f4 <vPortEnterCritical>
 80124ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124d0:	b25b      	sxtb	r3, r3
 80124d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d6:	d103      	bne.n	80124e0 <xQueueGenericSend+0x16c>
 80124d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124da:	2200      	movs	r2, #0
 80124dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80124e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124e6:	b25b      	sxtb	r3, r3
 80124e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124ec:	d103      	bne.n	80124f6 <xQueueGenericSend+0x182>
 80124ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f0:	2200      	movs	r2, #0
 80124f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80124f6:	f001 ffad 	bl	8014454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80124fa:	1d3a      	adds	r2, r7, #4
 80124fc:	f107 0314 	add.w	r3, r7, #20
 8012500:	4611      	mov	r1, r2
 8012502:	4618      	mov	r0, r3
 8012504:	f001 f8d8 	bl	80136b8 <xTaskCheckForTimeOut>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d124      	bne.n	8012558 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801250e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012510:	f000 fb81 	bl	8012c16 <prvIsQueueFull>
 8012514:	4603      	mov	r3, r0
 8012516:	2b00      	cmp	r3, #0
 8012518:	d018      	beq.n	801254c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801251c:	3310      	adds	r3, #16
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	4611      	mov	r1, r2
 8012522:	4618      	mov	r0, r3
 8012524:	f000 fffe 	bl	8013524 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801252a:	f000 fb0c 	bl	8012b46 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801252e:	f000 fe33 	bl	8013198 <xTaskResumeAll>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	f47f af7c 	bne.w	8012432 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801253a:	4b0c      	ldr	r3, [pc, #48]	; (801256c <xQueueGenericSend+0x1f8>)
 801253c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012540:	601a      	str	r2, [r3, #0]
 8012542:	f3bf 8f4f 	dsb	sy
 8012546:	f3bf 8f6f 	isb	sy
 801254a:	e772      	b.n	8012432 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801254c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801254e:	f000 fafa 	bl	8012b46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012552:	f000 fe21 	bl	8013198 <xTaskResumeAll>
 8012556:	e76c      	b.n	8012432 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801255a:	f000 faf4 	bl	8012b46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801255e:	f000 fe1b 	bl	8013198 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012562:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012564:	4618      	mov	r0, r3
 8012566:	3738      	adds	r7, #56	; 0x38
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	e000ed04 	.word	0xe000ed04

08012570 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b090      	sub	sp, #64	; 0x40
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
 801257c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012584:	2b00      	cmp	r3, #0
 8012586:	d10a      	bne.n	801259e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258c:	f383 8811 	msr	BASEPRI, r3
 8012590:	f3bf 8f6f 	isb	sy
 8012594:	f3bf 8f4f 	dsb	sy
 8012598:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801259a:	bf00      	nop
 801259c:	e7fe      	b.n	801259c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d103      	bne.n	80125ac <xQueueGenericSendFromISR+0x3c>
 80125a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d101      	bne.n	80125b0 <xQueueGenericSendFromISR+0x40>
 80125ac:	2301      	movs	r3, #1
 80125ae:	e000      	b.n	80125b2 <xQueueGenericSendFromISR+0x42>
 80125b0:	2300      	movs	r3, #0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d10a      	bne.n	80125cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80125b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ba:	f383 8811 	msr	BASEPRI, r3
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	f3bf 8f4f 	dsb	sy
 80125c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80125c8:	bf00      	nop
 80125ca:	e7fe      	b.n	80125ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	2b02      	cmp	r3, #2
 80125d0:	d103      	bne.n	80125da <xQueueGenericSendFromISR+0x6a>
 80125d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125d6:	2b01      	cmp	r3, #1
 80125d8:	d101      	bne.n	80125de <xQueueGenericSendFromISR+0x6e>
 80125da:	2301      	movs	r3, #1
 80125dc:	e000      	b.n	80125e0 <xQueueGenericSendFromISR+0x70>
 80125de:	2300      	movs	r3, #0
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d10a      	bne.n	80125fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80125e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e8:	f383 8811 	msr	BASEPRI, r3
 80125ec:	f3bf 8f6f 	isb	sy
 80125f0:	f3bf 8f4f 	dsb	sy
 80125f4:	623b      	str	r3, [r7, #32]
}
 80125f6:	bf00      	nop
 80125f8:	e7fe      	b.n	80125f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80125fa:	f001 ffdd 	bl	80145b8 <vPortValidateInterruptPriority>
	__asm volatile
 80125fe:	f3ef 8211 	mrs	r2, BASEPRI
 8012602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012606:	f383 8811 	msr	BASEPRI, r3
 801260a:	f3bf 8f6f 	isb	sy
 801260e:	f3bf 8f4f 	dsb	sy
 8012612:	61fa      	str	r2, [r7, #28]
 8012614:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8012616:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012618:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012622:	429a      	cmp	r2, r3
 8012624:	d302      	bcc.n	801262c <xQueueGenericSendFromISR+0xbc>
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	2b02      	cmp	r3, #2
 801262a:	d12f      	bne.n	801268c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801263a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801263c:	683a      	ldr	r2, [r7, #0]
 801263e:	68b9      	ldr	r1, [r7, #8]
 8012640:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012642:	f000 f9f0 	bl	8012a26 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012646:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801264e:	d112      	bne.n	8012676 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012654:	2b00      	cmp	r3, #0
 8012656:	d016      	beq.n	8012686 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801265a:	3324      	adds	r3, #36	; 0x24
 801265c:	4618      	mov	r0, r3
 801265e:	f000 ffb1 	bl	80135c4 <xTaskRemoveFromEventList>
 8012662:	4603      	mov	r3, r0
 8012664:	2b00      	cmp	r3, #0
 8012666:	d00e      	beq.n	8012686 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d00b      	beq.n	8012686 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2201      	movs	r2, #1
 8012672:	601a      	str	r2, [r3, #0]
 8012674:	e007      	b.n	8012686 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012676:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801267a:	3301      	adds	r3, #1
 801267c:	b2db      	uxtb	r3, r3
 801267e:	b25a      	sxtb	r2, r3
 8012680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012686:	2301      	movs	r3, #1
 8012688:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801268a:	e001      	b.n	8012690 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801268c:	2300      	movs	r3, #0
 801268e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012692:	617b      	str	r3, [r7, #20]
	__asm volatile
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	f383 8811 	msr	BASEPRI, r3
}
 801269a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801269c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3740      	adds	r7, #64	; 0x40
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
	...

080126a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b08c      	sub	sp, #48	; 0x30
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	60b9      	str	r1, [r7, #8]
 80126b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80126b4:	2300      	movs	r3, #0
 80126b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80126bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d10a      	bne.n	80126d8 <xQueueReceive+0x30>
	__asm volatile
 80126c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c6:	f383 8811 	msr	BASEPRI, r3
 80126ca:	f3bf 8f6f 	isb	sy
 80126ce:	f3bf 8f4f 	dsb	sy
 80126d2:	623b      	str	r3, [r7, #32]
}
 80126d4:	bf00      	nop
 80126d6:	e7fe      	b.n	80126d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d103      	bne.n	80126e6 <xQueueReceive+0x3e>
 80126de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d101      	bne.n	80126ea <xQueueReceive+0x42>
 80126e6:	2301      	movs	r3, #1
 80126e8:	e000      	b.n	80126ec <xQueueReceive+0x44>
 80126ea:	2300      	movs	r3, #0
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d10a      	bne.n	8012706 <xQueueReceive+0x5e>
	__asm volatile
 80126f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f4:	f383 8811 	msr	BASEPRI, r3
 80126f8:	f3bf 8f6f 	isb	sy
 80126fc:	f3bf 8f4f 	dsb	sy
 8012700:	61fb      	str	r3, [r7, #28]
}
 8012702:	bf00      	nop
 8012704:	e7fe      	b.n	8012704 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012706:	f001 f91b 	bl	8013940 <xTaskGetSchedulerState>
 801270a:	4603      	mov	r3, r0
 801270c:	2b00      	cmp	r3, #0
 801270e:	d102      	bne.n	8012716 <xQueueReceive+0x6e>
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d101      	bne.n	801271a <xQueueReceive+0x72>
 8012716:	2301      	movs	r3, #1
 8012718:	e000      	b.n	801271c <xQueueReceive+0x74>
 801271a:	2300      	movs	r3, #0
 801271c:	2b00      	cmp	r3, #0
 801271e:	d10a      	bne.n	8012736 <xQueueReceive+0x8e>
	__asm volatile
 8012720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012724:	f383 8811 	msr	BASEPRI, r3
 8012728:	f3bf 8f6f 	isb	sy
 801272c:	f3bf 8f4f 	dsb	sy
 8012730:	61bb      	str	r3, [r7, #24]
}
 8012732:	bf00      	nop
 8012734:	e7fe      	b.n	8012734 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012736:	f001 fe5d 	bl	80143f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801273e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012742:	2b00      	cmp	r3, #0
 8012744:	d01f      	beq.n	8012786 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012746:	68b9      	ldr	r1, [r7, #8]
 8012748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801274a:	f000 f9d6 	bl	8012afa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012750:	1e5a      	subs	r2, r3, #1
 8012752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012754:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012758:	691b      	ldr	r3, [r3, #16]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d00f      	beq.n	801277e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012760:	3310      	adds	r3, #16
 8012762:	4618      	mov	r0, r3
 8012764:	f000 ff2e 	bl	80135c4 <xTaskRemoveFromEventList>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	d007      	beq.n	801277e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801276e:	4b3d      	ldr	r3, [pc, #244]	; (8012864 <xQueueReceive+0x1bc>)
 8012770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012774:	601a      	str	r2, [r3, #0]
 8012776:	f3bf 8f4f 	dsb	sy
 801277a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801277e:	f001 fe69 	bl	8014454 <vPortExitCritical>
				return pdPASS;
 8012782:	2301      	movs	r3, #1
 8012784:	e069      	b.n	801285a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d103      	bne.n	8012794 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801278c:	f001 fe62 	bl	8014454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012790:	2300      	movs	r3, #0
 8012792:	e062      	b.n	801285a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012796:	2b00      	cmp	r3, #0
 8012798:	d106      	bne.n	80127a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801279a:	f107 0310 	add.w	r3, r7, #16
 801279e:	4618      	mov	r0, r3
 80127a0:	f000 ff74 	bl	801368c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80127a4:	2301      	movs	r3, #1
 80127a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80127a8:	f001 fe54 	bl	8014454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80127ac:	f000 fce6 	bl	801317c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80127b0:	f001 fe20 	bl	80143f4 <vPortEnterCritical>
 80127b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127ba:	b25b      	sxtb	r3, r3
 80127bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c0:	d103      	bne.n	80127ca <xQueueReceive+0x122>
 80127c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c4:	2200      	movs	r2, #0
 80127c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127d0:	b25b      	sxtb	r3, r3
 80127d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127d6:	d103      	bne.n	80127e0 <xQueueReceive+0x138>
 80127d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127da:	2200      	movs	r2, #0
 80127dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127e0:	f001 fe38 	bl	8014454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80127e4:	1d3a      	adds	r2, r7, #4
 80127e6:	f107 0310 	add.w	r3, r7, #16
 80127ea:	4611      	mov	r1, r2
 80127ec:	4618      	mov	r0, r3
 80127ee:	f000 ff63 	bl	80136b8 <xTaskCheckForTimeOut>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d123      	bne.n	8012840 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80127f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127fa:	f000 f9f6 	bl	8012bea <prvIsQueueEmpty>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b00      	cmp	r3, #0
 8012802:	d017      	beq.n	8012834 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012806:	3324      	adds	r3, #36	; 0x24
 8012808:	687a      	ldr	r2, [r7, #4]
 801280a:	4611      	mov	r1, r2
 801280c:	4618      	mov	r0, r3
 801280e:	f000 fe89 	bl	8013524 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012814:	f000 f997 	bl	8012b46 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012818:	f000 fcbe 	bl	8013198 <xTaskResumeAll>
 801281c:	4603      	mov	r3, r0
 801281e:	2b00      	cmp	r3, #0
 8012820:	d189      	bne.n	8012736 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012822:	4b10      	ldr	r3, [pc, #64]	; (8012864 <xQueueReceive+0x1bc>)
 8012824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012828:	601a      	str	r2, [r3, #0]
 801282a:	f3bf 8f4f 	dsb	sy
 801282e:	f3bf 8f6f 	isb	sy
 8012832:	e780      	b.n	8012736 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012836:	f000 f986 	bl	8012b46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801283a:	f000 fcad 	bl	8013198 <xTaskResumeAll>
 801283e:	e77a      	b.n	8012736 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012842:	f000 f980 	bl	8012b46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012846:	f000 fca7 	bl	8013198 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801284a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801284c:	f000 f9cd 	bl	8012bea <prvIsQueueEmpty>
 8012850:	4603      	mov	r3, r0
 8012852:	2b00      	cmp	r3, #0
 8012854:	f43f af6f 	beq.w	8012736 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012858:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801285a:	4618      	mov	r0, r3
 801285c:	3730      	adds	r7, #48	; 0x30
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	e000ed04 	.word	0xe000ed04

08012868 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b08e      	sub	sp, #56	; 0x38
 801286c:	af00      	add	r7, sp, #0
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287a:	2b00      	cmp	r3, #0
 801287c:	d10a      	bne.n	8012894 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012882:	f383 8811 	msr	BASEPRI, r3
 8012886:	f3bf 8f6f 	isb	sy
 801288a:	f3bf 8f4f 	dsb	sy
 801288e:	623b      	str	r3, [r7, #32]
}
 8012890:	bf00      	nop
 8012892:	e7fe      	b.n	8012892 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d103      	bne.n	80128a2 <xQueueReceiveFromISR+0x3a>
 801289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d101      	bne.n	80128a6 <xQueueReceiveFromISR+0x3e>
 80128a2:	2301      	movs	r3, #1
 80128a4:	e000      	b.n	80128a8 <xQueueReceiveFromISR+0x40>
 80128a6:	2300      	movs	r3, #0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d10a      	bne.n	80128c2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80128ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b0:	f383 8811 	msr	BASEPRI, r3
 80128b4:	f3bf 8f6f 	isb	sy
 80128b8:	f3bf 8f4f 	dsb	sy
 80128bc:	61fb      	str	r3, [r7, #28]
}
 80128be:	bf00      	nop
 80128c0:	e7fe      	b.n	80128c0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80128c2:	f001 fe79 	bl	80145b8 <vPortValidateInterruptPriority>
	__asm volatile
 80128c6:	f3ef 8211 	mrs	r2, BASEPRI
 80128ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ce:	f383 8811 	msr	BASEPRI, r3
 80128d2:	f3bf 8f6f 	isb	sy
 80128d6:	f3bf 8f4f 	dsb	sy
 80128da:	61ba      	str	r2, [r7, #24]
 80128dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80128de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80128e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80128e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d02f      	beq.n	801294e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80128ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80128f8:	68b9      	ldr	r1, [r7, #8]
 80128fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128fc:	f000 f8fd 	bl	8012afa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012902:	1e5a      	subs	r2, r3, #1
 8012904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012906:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012908:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012910:	d112      	bne.n	8012938 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012914:	691b      	ldr	r3, [r3, #16]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d016      	beq.n	8012948 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291c:	3310      	adds	r3, #16
 801291e:	4618      	mov	r0, r3
 8012920:	f000 fe50 	bl	80135c4 <xTaskRemoveFromEventList>
 8012924:	4603      	mov	r3, r0
 8012926:	2b00      	cmp	r3, #0
 8012928:	d00e      	beq.n	8012948 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d00b      	beq.n	8012948 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2201      	movs	r2, #1
 8012934:	601a      	str	r2, [r3, #0]
 8012936:	e007      	b.n	8012948 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801293c:	3301      	adds	r3, #1
 801293e:	b2db      	uxtb	r3, r3
 8012940:	b25a      	sxtb	r2, r3
 8012942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012948:	2301      	movs	r3, #1
 801294a:	637b      	str	r3, [r7, #52]	; 0x34
 801294c:	e001      	b.n	8012952 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801294e:	2300      	movs	r3, #0
 8012950:	637b      	str	r3, [r7, #52]	; 0x34
 8012952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012954:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	f383 8811 	msr	BASEPRI, r3
}
 801295c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801295e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012960:	4618      	mov	r0, r3
 8012962:	3738      	adds	r7, #56	; 0x38
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d10a      	bne.n	801298c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8012976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297a:	f383 8811 	msr	BASEPRI, r3
 801297e:	f3bf 8f6f 	isb	sy
 8012982:	f3bf 8f4f 	dsb	sy
 8012986:	60bb      	str	r3, [r7, #8]
}
 8012988:	bf00      	nop
 801298a:	e7fe      	b.n	801298a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 801298c:	f001 fd32 	bl	80143f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012994:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8012996:	f001 fd5d 	bl	8014454 <vPortExitCritical>

	return uxReturn;
 801299a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801299c:	4618      	mov	r0, r3
 801299e:	3710      	adds	r7, #16
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b086      	sub	sp, #24
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d10a      	bne.n	80129cc <uxQueueSpacesAvailable+0x28>
	__asm volatile
 80129b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ba:	f383 8811 	msr	BASEPRI, r3
 80129be:	f3bf 8f6f 	isb	sy
 80129c2:	f3bf 8f4f 	dsb	sy
 80129c6:	60fb      	str	r3, [r7, #12]
}
 80129c8:	bf00      	nop
 80129ca:	e7fe      	b.n	80129ca <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80129cc:	f001 fd12 	bl	80143f4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129d8:	1ad3      	subs	r3, r2, r3
 80129da:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80129dc:	f001 fd3a 	bl	8014454 <vPortExitCritical>

	return uxReturn;
 80129e0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80129e2:	4618      	mov	r0, r3
 80129e4:	3718      	adds	r7, #24
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80129ea:	b480      	push	{r7}
 80129ec:	b087      	sub	sp, #28
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d10a      	bne.n	8012a12 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80129fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a00:	f383 8811 	msr	BASEPRI, r3
 8012a04:	f3bf 8f6f 	isb	sy
 8012a08:	f3bf 8f4f 	dsb	sy
 8012a0c:	60fb      	str	r3, [r7, #12]
}
 8012a0e:	bf00      	nop
 8012a10:	e7fe      	b.n	8012a10 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a16:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8012a18:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	371c      	adds	r7, #28
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a24:	4770      	bx	lr

08012a26 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012a26:	b580      	push	{r7, lr}
 8012a28:	b086      	sub	sp, #24
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	60f8      	str	r0, [r7, #12]
 8012a2e:	60b9      	str	r1, [r7, #8]
 8012a30:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012a32:	2300      	movs	r3, #0
 8012a34:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a3a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d10d      	bne.n	8012a60 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d14d      	bne.n	8012ae8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	689b      	ldr	r3, [r3, #8]
 8012a50:	4618      	mov	r0, r3
 8012a52:	f000 ff93 	bl	801397c <xTaskPriorityDisinherit>
 8012a56:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	609a      	str	r2, [r3, #8]
 8012a5e:	e043      	b.n	8012ae8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d119      	bne.n	8012a9a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	6858      	ldr	r0, [r3, #4]
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a6e:	461a      	mov	r2, r3
 8012a70:	68b9      	ldr	r1, [r7, #8]
 8012a72:	f002 f819 	bl	8014aa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	685a      	ldr	r2, [r3, #4]
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7e:	441a      	add	r2, r3
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	685a      	ldr	r2, [r3, #4]
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	689b      	ldr	r3, [r3, #8]
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d32b      	bcc.n	8012ae8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	681a      	ldr	r2, [r3, #0]
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	605a      	str	r2, [r3, #4]
 8012a98:	e026      	b.n	8012ae8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	68d8      	ldr	r0, [r3, #12]
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	68b9      	ldr	r1, [r7, #8]
 8012aa6:	f001 ffff 	bl	8014aa8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	68da      	ldr	r2, [r3, #12]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ab2:	425b      	negs	r3, r3
 8012ab4:	441a      	add	r2, r3
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	68da      	ldr	r2, [r3, #12]
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d207      	bcs.n	8012ad6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	689a      	ldr	r2, [r3, #8]
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ace:	425b      	negs	r3, r3
 8012ad0:	441a      	add	r2, r3
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2b02      	cmp	r3, #2
 8012ada:	d105      	bne.n	8012ae8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d002      	beq.n	8012ae8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	3b01      	subs	r3, #1
 8012ae6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	1c5a      	adds	r2, r3, #1
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012af0:	697b      	ldr	r3, [r7, #20]
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3718      	adds	r7, #24
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}

08012afa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012afa:	b580      	push	{r7, lr}
 8012afc:	b082      	sub	sp, #8
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
 8012b02:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d018      	beq.n	8012b3e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	68da      	ldr	r2, [r3, #12]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b14:	441a      	add	r2, r3
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	68da      	ldr	r2, [r3, #12]
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	689b      	ldr	r3, [r3, #8]
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d303      	bcc.n	8012b2e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681a      	ldr	r2, [r3, #0]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	68d9      	ldr	r1, [r3, #12]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b36:	461a      	mov	r2, r3
 8012b38:	6838      	ldr	r0, [r7, #0]
 8012b3a:	f001 ffb5 	bl	8014aa8 <memcpy>
	}
}
 8012b3e:	bf00      	nop
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}

08012b46 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012b46:	b580      	push	{r7, lr}
 8012b48:	b084      	sub	sp, #16
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012b4e:	f001 fc51 	bl	80143f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b58:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b5a:	e011      	b.n	8012b80 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d012      	beq.n	8012b8a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	3324      	adds	r3, #36	; 0x24
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f000 fd2b 	bl	80135c4 <xTaskRemoveFromEventList>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d001      	beq.n	8012b78 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012b74:	f000 fe02 	bl	801377c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012b78:	7bfb      	ldrb	r3, [r7, #15]
 8012b7a:	3b01      	subs	r3, #1
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	dce9      	bgt.n	8012b5c <prvUnlockQueue+0x16>
 8012b88:	e000      	b.n	8012b8c <prvUnlockQueue+0x46>
					break;
 8012b8a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	22ff      	movs	r2, #255	; 0xff
 8012b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012b94:	f001 fc5e 	bl	8014454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012b98:	f001 fc2c 	bl	80143f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ba2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012ba4:	e011      	b.n	8012bca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	691b      	ldr	r3, [r3, #16]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d012      	beq.n	8012bd4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	3310      	adds	r3, #16
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f000 fd06 	bl	80135c4 <xTaskRemoveFromEventList>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d001      	beq.n	8012bc2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012bbe:	f000 fddd 	bl	801377c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012bc2:	7bbb      	ldrb	r3, [r7, #14]
 8012bc4:	3b01      	subs	r3, #1
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	dce9      	bgt.n	8012ba6 <prvUnlockQueue+0x60>
 8012bd2:	e000      	b.n	8012bd6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012bd4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	22ff      	movs	r2, #255	; 0xff
 8012bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012bde:	f001 fc39 	bl	8014454 <vPortExitCritical>
}
 8012be2:	bf00      	nop
 8012be4:	3710      	adds	r7, #16
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}

08012bea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012bea:	b580      	push	{r7, lr}
 8012bec:	b084      	sub	sp, #16
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012bf2:	f001 fbff 	bl	80143f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d102      	bne.n	8012c04 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012bfe:	2301      	movs	r3, #1
 8012c00:	60fb      	str	r3, [r7, #12]
 8012c02:	e001      	b.n	8012c08 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012c04:	2300      	movs	r3, #0
 8012c06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012c08:	f001 fc24 	bl	8014454 <vPortExitCritical>

	return xReturn;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	3710      	adds	r7, #16
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}

08012c16 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012c16:	b580      	push	{r7, lr}
 8012c18:	b084      	sub	sp, #16
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012c1e:	f001 fbe9 	bl	80143f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d102      	bne.n	8012c34 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012c2e:	2301      	movs	r3, #1
 8012c30:	60fb      	str	r3, [r7, #12]
 8012c32:	e001      	b.n	8012c38 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012c34:	2300      	movs	r3, #0
 8012c36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012c38:	f001 fc0c 	bl	8014454 <vPortExitCritical>

	return xReturn;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3710      	adds	r7, #16
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
	...

08012c48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012c48:	b480      	push	{r7}
 8012c4a:	b085      	sub	sp, #20
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012c52:	2300      	movs	r3, #0
 8012c54:	60fb      	str	r3, [r7, #12]
 8012c56:	e014      	b.n	8012c82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012c58:	4a0f      	ldr	r2, [pc, #60]	; (8012c98 <vQueueAddToRegistry+0x50>)
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d10b      	bne.n	8012c7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012c64:	490c      	ldr	r1, [pc, #48]	; (8012c98 <vQueueAddToRegistry+0x50>)
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	683a      	ldr	r2, [r7, #0]
 8012c6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012c6e:	4a0a      	ldr	r2, [pc, #40]	; (8012c98 <vQueueAddToRegistry+0x50>)
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	00db      	lsls	r3, r3, #3
 8012c74:	4413      	add	r3, r2
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012c7a:	e006      	b.n	8012c8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	3301      	adds	r3, #1
 8012c80:	60fb      	str	r3, [r7, #12]
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	2b07      	cmp	r3, #7
 8012c86:	d9e7      	bls.n	8012c58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012c88:	bf00      	nop
 8012c8a:	bf00      	nop
 8012c8c:	3714      	adds	r7, #20
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c94:	4770      	bx	lr
 8012c96:	bf00      	nop
 8012c98:	20002ab4 	.word	0x20002ab4

08012c9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b086      	sub	sp, #24
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012cac:	f001 fba2 	bl	80143f4 <vPortEnterCritical>
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012cb6:	b25b      	sxtb	r3, r3
 8012cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cbc:	d103      	bne.n	8012cc6 <vQueueWaitForMessageRestricted+0x2a>
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ccc:	b25b      	sxtb	r3, r3
 8012cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cd2:	d103      	bne.n	8012cdc <vQueueWaitForMessageRestricted+0x40>
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012cdc:	f001 fbba 	bl	8014454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d106      	bne.n	8012cf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	3324      	adds	r3, #36	; 0x24
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	68b9      	ldr	r1, [r7, #8]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f000 fc3b 	bl	801356c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012cf6:	6978      	ldr	r0, [r7, #20]
 8012cf8:	f7ff ff25 	bl	8012b46 <prvUnlockQueue>
	}
 8012cfc:	bf00      	nop
 8012cfe:	3718      	adds	r7, #24
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}

08012d04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b08e      	sub	sp, #56	; 0x38
 8012d08:	af04      	add	r7, sp, #16
 8012d0a:	60f8      	str	r0, [r7, #12]
 8012d0c:	60b9      	str	r1, [r7, #8]
 8012d0e:	607a      	str	r2, [r7, #4]
 8012d10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d10a      	bne.n	8012d2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8012d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d1c:	f383 8811 	msr	BASEPRI, r3
 8012d20:	f3bf 8f6f 	isb	sy
 8012d24:	f3bf 8f4f 	dsb	sy
 8012d28:	623b      	str	r3, [r7, #32]
}
 8012d2a:	bf00      	nop
 8012d2c:	e7fe      	b.n	8012d2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d10a      	bne.n	8012d4a <xTaskCreateStatic+0x46>
	__asm volatile
 8012d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d38:	f383 8811 	msr	BASEPRI, r3
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	f3bf 8f4f 	dsb	sy
 8012d44:	61fb      	str	r3, [r7, #28]
}
 8012d46:	bf00      	nop
 8012d48:	e7fe      	b.n	8012d48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012d4a:	235c      	movs	r3, #92	; 0x5c
 8012d4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012d4e:	693b      	ldr	r3, [r7, #16]
 8012d50:	2b5c      	cmp	r3, #92	; 0x5c
 8012d52:	d00a      	beq.n	8012d6a <xTaskCreateStatic+0x66>
	__asm volatile
 8012d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d58:	f383 8811 	msr	BASEPRI, r3
 8012d5c:	f3bf 8f6f 	isb	sy
 8012d60:	f3bf 8f4f 	dsb	sy
 8012d64:	61bb      	str	r3, [r7, #24]
}
 8012d66:	bf00      	nop
 8012d68:	e7fe      	b.n	8012d68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012d6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d01e      	beq.n	8012db0 <xTaskCreateStatic+0xac>
 8012d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d01b      	beq.n	8012db0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d84:	2202      	movs	r2, #2
 8012d86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	9303      	str	r3, [sp, #12]
 8012d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d90:	9302      	str	r3, [sp, #8]
 8012d92:	f107 0314 	add.w	r3, r7, #20
 8012d96:	9301      	str	r3, [sp, #4]
 8012d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9a:	9300      	str	r3, [sp, #0]
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	687a      	ldr	r2, [r7, #4]
 8012da0:	68b9      	ldr	r1, [r7, #8]
 8012da2:	68f8      	ldr	r0, [r7, #12]
 8012da4:	f000 f850 	bl	8012e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012daa:	f000 f8dd 	bl	8012f68 <prvAddNewTaskToReadyList>
 8012dae:	e001      	b.n	8012db4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012db0:	2300      	movs	r3, #0
 8012db2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012db4:	697b      	ldr	r3, [r7, #20]
	}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3728      	adds	r7, #40	; 0x28
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b08c      	sub	sp, #48	; 0x30
 8012dc2:	af04      	add	r7, sp, #16
 8012dc4:	60f8      	str	r0, [r7, #12]
 8012dc6:	60b9      	str	r1, [r7, #8]
 8012dc8:	603b      	str	r3, [r7, #0]
 8012dca:	4613      	mov	r3, r2
 8012dcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012dce:	88fb      	ldrh	r3, [r7, #6]
 8012dd0:	009b      	lsls	r3, r3, #2
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f001 fc30 	bl	8014638 <pvPortMalloc>
 8012dd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d00e      	beq.n	8012dfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012de0:	205c      	movs	r0, #92	; 0x5c
 8012de2:	f001 fc29 	bl	8014638 <pvPortMalloc>
 8012de6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d003      	beq.n	8012df6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012dee:	69fb      	ldr	r3, [r7, #28]
 8012df0:	697a      	ldr	r2, [r7, #20]
 8012df2:	631a      	str	r2, [r3, #48]	; 0x30
 8012df4:	e005      	b.n	8012e02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012df6:	6978      	ldr	r0, [r7, #20]
 8012df8:	f001 fcea 	bl	80147d0 <vPortFree>
 8012dfc:	e001      	b.n	8012e02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012e02:	69fb      	ldr	r3, [r7, #28]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d017      	beq.n	8012e38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012e08:	69fb      	ldr	r3, [r7, #28]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012e10:	88fa      	ldrh	r2, [r7, #6]
 8012e12:	2300      	movs	r3, #0
 8012e14:	9303      	str	r3, [sp, #12]
 8012e16:	69fb      	ldr	r3, [r7, #28]
 8012e18:	9302      	str	r3, [sp, #8]
 8012e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1c:	9301      	str	r3, [sp, #4]
 8012e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e20:	9300      	str	r3, [sp, #0]
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	68b9      	ldr	r1, [r7, #8]
 8012e26:	68f8      	ldr	r0, [r7, #12]
 8012e28:	f000 f80e 	bl	8012e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012e2c:	69f8      	ldr	r0, [r7, #28]
 8012e2e:	f000 f89b 	bl	8012f68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012e32:	2301      	movs	r3, #1
 8012e34:	61bb      	str	r3, [r7, #24]
 8012e36:	e002      	b.n	8012e3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012e38:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012e3e:	69bb      	ldr	r3, [r7, #24]
	}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3720      	adds	r7, #32
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}

08012e48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b088      	sub	sp, #32
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	607a      	str	r2, [r7, #4]
 8012e54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	009b      	lsls	r3, r3, #2
 8012e5e:	461a      	mov	r2, r3
 8012e60:	21a5      	movs	r1, #165	; 0xa5
 8012e62:	f001 fe2f 	bl	8014ac4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012e70:	3b01      	subs	r3, #1
 8012e72:	009b      	lsls	r3, r3, #2
 8012e74:	4413      	add	r3, r2
 8012e76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012e78:	69bb      	ldr	r3, [r7, #24]
 8012e7a:	f023 0307 	bic.w	r3, r3, #7
 8012e7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012e80:	69bb      	ldr	r3, [r7, #24]
 8012e82:	f003 0307 	and.w	r3, r3, #7
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d00a      	beq.n	8012ea0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e8e:	f383 8811 	msr	BASEPRI, r3
 8012e92:	f3bf 8f6f 	isb	sy
 8012e96:	f3bf 8f4f 	dsb	sy
 8012e9a:	617b      	str	r3, [r7, #20]
}
 8012e9c:	bf00      	nop
 8012e9e:	e7fe      	b.n	8012e9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d01f      	beq.n	8012ee6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	61fb      	str	r3, [r7, #28]
 8012eaa:	e012      	b.n	8012ed2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012eac:	68ba      	ldr	r2, [r7, #8]
 8012eae:	69fb      	ldr	r3, [r7, #28]
 8012eb0:	4413      	add	r3, r2
 8012eb2:	7819      	ldrb	r1, [r3, #0]
 8012eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	4413      	add	r3, r2
 8012eba:	3334      	adds	r3, #52	; 0x34
 8012ebc:	460a      	mov	r2, r1
 8012ebe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012ec0:	68ba      	ldr	r2, [r7, #8]
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d006      	beq.n	8012eda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	61fb      	str	r3, [r7, #28]
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	2b0f      	cmp	r3, #15
 8012ed6:	d9e9      	bls.n	8012eac <prvInitialiseNewTask+0x64>
 8012ed8:	e000      	b.n	8012edc <prvInitialiseNewTask+0x94>
			{
				break;
 8012eda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ede:	2200      	movs	r2, #0
 8012ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012ee4:	e003      	b.n	8012eee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee8:	2200      	movs	r2, #0
 8012eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef0:	2b37      	cmp	r3, #55	; 0x37
 8012ef2:	d901      	bls.n	8012ef8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012ef4:	2337      	movs	r3, #55	; 0x37
 8012ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012efc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f06:	2200      	movs	r2, #0
 8012f08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7ff f85e 	bl	8011fd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f16:	3318      	adds	r3, #24
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff f859 	bl	8011fd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f36:	2200      	movs	r2, #0
 8012f38:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012f42:	683a      	ldr	r2, [r7, #0]
 8012f44:	68f9      	ldr	r1, [r7, #12]
 8012f46:	69b8      	ldr	r0, [r7, #24]
 8012f48:	f001 f928 	bl	801419c <pxPortInitialiseStack>
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d002      	beq.n	8012f5e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f5e:	bf00      	nop
 8012f60:	3720      	adds	r7, #32
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
	...

08012f68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012f70:	f001 fa40 	bl	80143f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012f74:	4b2d      	ldr	r3, [pc, #180]	; (801302c <prvAddNewTaskToReadyList+0xc4>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	3301      	adds	r3, #1
 8012f7a:	4a2c      	ldr	r2, [pc, #176]	; (801302c <prvAddNewTaskToReadyList+0xc4>)
 8012f7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012f7e:	4b2c      	ldr	r3, [pc, #176]	; (8013030 <prvAddNewTaskToReadyList+0xc8>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d109      	bne.n	8012f9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012f86:	4a2a      	ldr	r2, [pc, #168]	; (8013030 <prvAddNewTaskToReadyList+0xc8>)
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012f8c:	4b27      	ldr	r3, [pc, #156]	; (801302c <prvAddNewTaskToReadyList+0xc4>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	d110      	bne.n	8012fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012f94:	f000 fc16 	bl	80137c4 <prvInitialiseTaskLists>
 8012f98:	e00d      	b.n	8012fb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012f9a:	4b26      	ldr	r3, [pc, #152]	; (8013034 <prvAddNewTaskToReadyList+0xcc>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d109      	bne.n	8012fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012fa2:	4b23      	ldr	r3, [pc, #140]	; (8013030 <prvAddNewTaskToReadyList+0xc8>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d802      	bhi.n	8012fb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012fb0:	4a1f      	ldr	r2, [pc, #124]	; (8013030 <prvAddNewTaskToReadyList+0xc8>)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012fb6:	4b20      	ldr	r3, [pc, #128]	; (8013038 <prvAddNewTaskToReadyList+0xd0>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	3301      	adds	r3, #1
 8012fbc:	4a1e      	ldr	r2, [pc, #120]	; (8013038 <prvAddNewTaskToReadyList+0xd0>)
 8012fbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012fc0:	4b1d      	ldr	r3, [pc, #116]	; (8013038 <prvAddNewTaskToReadyList+0xd0>)
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fcc:	4b1b      	ldr	r3, [pc, #108]	; (801303c <prvAddNewTaskToReadyList+0xd4>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	429a      	cmp	r2, r3
 8012fd2:	d903      	bls.n	8012fdc <prvAddNewTaskToReadyList+0x74>
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fd8:	4a18      	ldr	r2, [pc, #96]	; (801303c <prvAddNewTaskToReadyList+0xd4>)
 8012fda:	6013      	str	r3, [r2, #0]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fe0:	4613      	mov	r3, r2
 8012fe2:	009b      	lsls	r3, r3, #2
 8012fe4:	4413      	add	r3, r2
 8012fe6:	009b      	lsls	r3, r3, #2
 8012fe8:	4a15      	ldr	r2, [pc, #84]	; (8013040 <prvAddNewTaskToReadyList+0xd8>)
 8012fea:	441a      	add	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	3304      	adds	r3, #4
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	4610      	mov	r0, r2
 8012ff4:	f7fe fff9 	bl	8011fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012ff8:	f001 fa2c 	bl	8014454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012ffc:	4b0d      	ldr	r3, [pc, #52]	; (8013034 <prvAddNewTaskToReadyList+0xcc>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d00e      	beq.n	8013022 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013004:	4b0a      	ldr	r3, [pc, #40]	; (8013030 <prvAddNewTaskToReadyList+0xc8>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801300e:	429a      	cmp	r2, r3
 8013010:	d207      	bcs.n	8013022 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013012:	4b0c      	ldr	r3, [pc, #48]	; (8013044 <prvAddNewTaskToReadyList+0xdc>)
 8013014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013018:	601a      	str	r2, [r3, #0]
 801301a:	f3bf 8f4f 	dsb	sy
 801301e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013022:	bf00      	nop
 8013024:	3708      	adds	r7, #8
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}
 801302a:	bf00      	nop
 801302c:	20002fc8 	.word	0x20002fc8
 8013030:	20002af4 	.word	0x20002af4
 8013034:	20002fd4 	.word	0x20002fd4
 8013038:	20002fe4 	.word	0x20002fe4
 801303c:	20002fd0 	.word	0x20002fd0
 8013040:	20002af8 	.word	0x20002af8
 8013044:	e000ed04 	.word	0xe000ed04

08013048 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013048:	b580      	push	{r7, lr}
 801304a:	b084      	sub	sp, #16
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013050:	2300      	movs	r3, #0
 8013052:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d017      	beq.n	801308a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801305a:	4b13      	ldr	r3, [pc, #76]	; (80130a8 <vTaskDelay+0x60>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d00a      	beq.n	8013078 <vTaskDelay+0x30>
	__asm volatile
 8013062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013066:	f383 8811 	msr	BASEPRI, r3
 801306a:	f3bf 8f6f 	isb	sy
 801306e:	f3bf 8f4f 	dsb	sy
 8013072:	60bb      	str	r3, [r7, #8]
}
 8013074:	bf00      	nop
 8013076:	e7fe      	b.n	8013076 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013078:	f000 f880 	bl	801317c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801307c:	2100      	movs	r1, #0
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f000 fcea 	bl	8013a58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013084:	f000 f888 	bl	8013198 <xTaskResumeAll>
 8013088:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d107      	bne.n	80130a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013090:	4b06      	ldr	r3, [pc, #24]	; (80130ac <vTaskDelay+0x64>)
 8013092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013096:	601a      	str	r2, [r3, #0]
 8013098:	f3bf 8f4f 	dsb	sy
 801309c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80130a0:	bf00      	nop
 80130a2:	3710      	adds	r7, #16
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}
 80130a8:	20002ff0 	.word	0x20002ff0
 80130ac:	e000ed04 	.word	0xe000ed04

080130b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b08a      	sub	sp, #40	; 0x28
 80130b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80130b6:	2300      	movs	r3, #0
 80130b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80130ba:	2300      	movs	r3, #0
 80130bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80130be:	463a      	mov	r2, r7
 80130c0:	1d39      	adds	r1, r7, #4
 80130c2:	f107 0308 	add.w	r3, r7, #8
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7fe ff2e 	bl	8011f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80130cc:	6839      	ldr	r1, [r7, #0]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	68ba      	ldr	r2, [r7, #8]
 80130d2:	9202      	str	r2, [sp, #8]
 80130d4:	9301      	str	r3, [sp, #4]
 80130d6:	2300      	movs	r3, #0
 80130d8:	9300      	str	r3, [sp, #0]
 80130da:	2300      	movs	r3, #0
 80130dc:	460a      	mov	r2, r1
 80130de:	4921      	ldr	r1, [pc, #132]	; (8013164 <vTaskStartScheduler+0xb4>)
 80130e0:	4821      	ldr	r0, [pc, #132]	; (8013168 <vTaskStartScheduler+0xb8>)
 80130e2:	f7ff fe0f 	bl	8012d04 <xTaskCreateStatic>
 80130e6:	4603      	mov	r3, r0
 80130e8:	4a20      	ldr	r2, [pc, #128]	; (801316c <vTaskStartScheduler+0xbc>)
 80130ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80130ec:	4b1f      	ldr	r3, [pc, #124]	; (801316c <vTaskStartScheduler+0xbc>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d002      	beq.n	80130fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80130f4:	2301      	movs	r3, #1
 80130f6:	617b      	str	r3, [r7, #20]
 80130f8:	e001      	b.n	80130fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80130fa:	2300      	movs	r3, #0
 80130fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d102      	bne.n	801310a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013104:	f000 fcfc 	bl	8013b00 <xTimerCreateTimerTask>
 8013108:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801310a:	697b      	ldr	r3, [r7, #20]
 801310c:	2b01      	cmp	r3, #1
 801310e:	d116      	bne.n	801313e <vTaskStartScheduler+0x8e>
	__asm volatile
 8013110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013114:	f383 8811 	msr	BASEPRI, r3
 8013118:	f3bf 8f6f 	isb	sy
 801311c:	f3bf 8f4f 	dsb	sy
 8013120:	613b      	str	r3, [r7, #16]
}
 8013122:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013124:	4b12      	ldr	r3, [pc, #72]	; (8013170 <vTaskStartScheduler+0xc0>)
 8013126:	f04f 32ff 	mov.w	r2, #4294967295
 801312a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801312c:	4b11      	ldr	r3, [pc, #68]	; (8013174 <vTaskStartScheduler+0xc4>)
 801312e:	2201      	movs	r2, #1
 8013130:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013132:	4b11      	ldr	r3, [pc, #68]	; (8013178 <vTaskStartScheduler+0xc8>)
 8013134:	2200      	movs	r2, #0
 8013136:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013138:	f001 f8ba 	bl	80142b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801313c:	e00e      	b.n	801315c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013144:	d10a      	bne.n	801315c <vTaskStartScheduler+0xac>
	__asm volatile
 8013146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801314a:	f383 8811 	msr	BASEPRI, r3
 801314e:	f3bf 8f6f 	isb	sy
 8013152:	f3bf 8f4f 	dsb	sy
 8013156:	60fb      	str	r3, [r7, #12]
}
 8013158:	bf00      	nop
 801315a:	e7fe      	b.n	801315a <vTaskStartScheduler+0xaa>
}
 801315c:	bf00      	nop
 801315e:	3718      	adds	r7, #24
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	0801a07c 	.word	0x0801a07c
 8013168:	08013795 	.word	0x08013795
 801316c:	20002fec 	.word	0x20002fec
 8013170:	20002fe8 	.word	0x20002fe8
 8013174:	20002fd4 	.word	0x20002fd4
 8013178:	20002fcc 	.word	0x20002fcc

0801317c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801317c:	b480      	push	{r7}
 801317e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013180:	4b04      	ldr	r3, [pc, #16]	; (8013194 <vTaskSuspendAll+0x18>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	3301      	adds	r3, #1
 8013186:	4a03      	ldr	r2, [pc, #12]	; (8013194 <vTaskSuspendAll+0x18>)
 8013188:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801318a:	bf00      	nop
 801318c:	46bd      	mov	sp, r7
 801318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013192:	4770      	bx	lr
 8013194:	20002ff0 	.word	0x20002ff0

08013198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801319e:	2300      	movs	r3, #0
 80131a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80131a2:	2300      	movs	r3, #0
 80131a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80131a6:	4b42      	ldr	r3, [pc, #264]	; (80132b0 <xTaskResumeAll+0x118>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d10a      	bne.n	80131c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80131ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b2:	f383 8811 	msr	BASEPRI, r3
 80131b6:	f3bf 8f6f 	isb	sy
 80131ba:	f3bf 8f4f 	dsb	sy
 80131be:	603b      	str	r3, [r7, #0]
}
 80131c0:	bf00      	nop
 80131c2:	e7fe      	b.n	80131c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80131c4:	f001 f916 	bl	80143f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80131c8:	4b39      	ldr	r3, [pc, #228]	; (80132b0 <xTaskResumeAll+0x118>)
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	3b01      	subs	r3, #1
 80131ce:	4a38      	ldr	r2, [pc, #224]	; (80132b0 <xTaskResumeAll+0x118>)
 80131d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131d2:	4b37      	ldr	r3, [pc, #220]	; (80132b0 <xTaskResumeAll+0x118>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d162      	bne.n	80132a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80131da:	4b36      	ldr	r3, [pc, #216]	; (80132b4 <xTaskResumeAll+0x11c>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d05e      	beq.n	80132a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80131e2:	e02f      	b.n	8013244 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131e4:	4b34      	ldr	r3, [pc, #208]	; (80132b8 <xTaskResumeAll+0x120>)
 80131e6:	68db      	ldr	r3, [r3, #12]
 80131e8:	68db      	ldr	r3, [r3, #12]
 80131ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	3318      	adds	r3, #24
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7fe ff57 	bl	80120a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	3304      	adds	r3, #4
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fe ff52 	bl	80120a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013204:	4b2d      	ldr	r3, [pc, #180]	; (80132bc <xTaskResumeAll+0x124>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	429a      	cmp	r2, r3
 801320a:	d903      	bls.n	8013214 <xTaskResumeAll+0x7c>
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013210:	4a2a      	ldr	r2, [pc, #168]	; (80132bc <xTaskResumeAll+0x124>)
 8013212:	6013      	str	r3, [r2, #0]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013218:	4613      	mov	r3, r2
 801321a:	009b      	lsls	r3, r3, #2
 801321c:	4413      	add	r3, r2
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	4a27      	ldr	r2, [pc, #156]	; (80132c0 <xTaskResumeAll+0x128>)
 8013222:	441a      	add	r2, r3
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	3304      	adds	r3, #4
 8013228:	4619      	mov	r1, r3
 801322a:	4610      	mov	r0, r2
 801322c:	f7fe fedd 	bl	8011fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013234:	4b23      	ldr	r3, [pc, #140]	; (80132c4 <xTaskResumeAll+0x12c>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801323a:	429a      	cmp	r2, r3
 801323c:	d302      	bcc.n	8013244 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801323e:	4b22      	ldr	r3, [pc, #136]	; (80132c8 <xTaskResumeAll+0x130>)
 8013240:	2201      	movs	r2, #1
 8013242:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013244:	4b1c      	ldr	r3, [pc, #112]	; (80132b8 <xTaskResumeAll+0x120>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d1cb      	bne.n	80131e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d001      	beq.n	8013256 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013252:	f000 fb55 	bl	8013900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013256:	4b1d      	ldr	r3, [pc, #116]	; (80132cc <xTaskResumeAll+0x134>)
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d010      	beq.n	8013284 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013262:	f000 f847 	bl	80132f4 <xTaskIncrementTick>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d002      	beq.n	8013272 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801326c:	4b16      	ldr	r3, [pc, #88]	; (80132c8 <xTaskResumeAll+0x130>)
 801326e:	2201      	movs	r2, #1
 8013270:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	3b01      	subs	r3, #1
 8013276:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d1f1      	bne.n	8013262 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801327e:	4b13      	ldr	r3, [pc, #76]	; (80132cc <xTaskResumeAll+0x134>)
 8013280:	2200      	movs	r2, #0
 8013282:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013284:	4b10      	ldr	r3, [pc, #64]	; (80132c8 <xTaskResumeAll+0x130>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d009      	beq.n	80132a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801328c:	2301      	movs	r3, #1
 801328e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013290:	4b0f      	ldr	r3, [pc, #60]	; (80132d0 <xTaskResumeAll+0x138>)
 8013292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013296:	601a      	str	r2, [r3, #0]
 8013298:	f3bf 8f4f 	dsb	sy
 801329c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80132a0:	f001 f8d8 	bl	8014454 <vPortExitCritical>

	return xAlreadyYielded;
 80132a4:	68bb      	ldr	r3, [r7, #8]
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3710      	adds	r7, #16
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}
 80132ae:	bf00      	nop
 80132b0:	20002ff0 	.word	0x20002ff0
 80132b4:	20002fc8 	.word	0x20002fc8
 80132b8:	20002f88 	.word	0x20002f88
 80132bc:	20002fd0 	.word	0x20002fd0
 80132c0:	20002af8 	.word	0x20002af8
 80132c4:	20002af4 	.word	0x20002af4
 80132c8:	20002fdc 	.word	0x20002fdc
 80132cc:	20002fd8 	.word	0x20002fd8
 80132d0:	e000ed04 	.word	0xe000ed04

080132d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80132da:	4b05      	ldr	r3, [pc, #20]	; (80132f0 <xTaskGetTickCount+0x1c>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80132e0:	687b      	ldr	r3, [r7, #4]
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	370c      	adds	r7, #12
 80132e6:	46bd      	mov	sp, r7
 80132e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ec:	4770      	bx	lr
 80132ee:	bf00      	nop
 80132f0:	20002fcc 	.word	0x20002fcc

080132f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b086      	sub	sp, #24
 80132f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80132fa:	2300      	movs	r3, #0
 80132fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80132fe:	4b4f      	ldr	r3, [pc, #316]	; (801343c <xTaskIncrementTick+0x148>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	f040 808f 	bne.w	8013426 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013308:	4b4d      	ldr	r3, [pc, #308]	; (8013440 <xTaskIncrementTick+0x14c>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	3301      	adds	r3, #1
 801330e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013310:	4a4b      	ldr	r2, [pc, #300]	; (8013440 <xTaskIncrementTick+0x14c>)
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d120      	bne.n	801335e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801331c:	4b49      	ldr	r3, [pc, #292]	; (8013444 <xTaskIncrementTick+0x150>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d00a      	beq.n	801333c <xTaskIncrementTick+0x48>
	__asm volatile
 8013326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801332a:	f383 8811 	msr	BASEPRI, r3
 801332e:	f3bf 8f6f 	isb	sy
 8013332:	f3bf 8f4f 	dsb	sy
 8013336:	603b      	str	r3, [r7, #0]
}
 8013338:	bf00      	nop
 801333a:	e7fe      	b.n	801333a <xTaskIncrementTick+0x46>
 801333c:	4b41      	ldr	r3, [pc, #260]	; (8013444 <xTaskIncrementTick+0x150>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	60fb      	str	r3, [r7, #12]
 8013342:	4b41      	ldr	r3, [pc, #260]	; (8013448 <xTaskIncrementTick+0x154>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	4a3f      	ldr	r2, [pc, #252]	; (8013444 <xTaskIncrementTick+0x150>)
 8013348:	6013      	str	r3, [r2, #0]
 801334a:	4a3f      	ldr	r2, [pc, #252]	; (8013448 <xTaskIncrementTick+0x154>)
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	6013      	str	r3, [r2, #0]
 8013350:	4b3e      	ldr	r3, [pc, #248]	; (801344c <xTaskIncrementTick+0x158>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	3301      	adds	r3, #1
 8013356:	4a3d      	ldr	r2, [pc, #244]	; (801344c <xTaskIncrementTick+0x158>)
 8013358:	6013      	str	r3, [r2, #0]
 801335a:	f000 fad1 	bl	8013900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801335e:	4b3c      	ldr	r3, [pc, #240]	; (8013450 <xTaskIncrementTick+0x15c>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	693a      	ldr	r2, [r7, #16]
 8013364:	429a      	cmp	r2, r3
 8013366:	d349      	bcc.n	80133fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013368:	4b36      	ldr	r3, [pc, #216]	; (8013444 <xTaskIncrementTick+0x150>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d104      	bne.n	801337c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013372:	4b37      	ldr	r3, [pc, #220]	; (8013450 <xTaskIncrementTick+0x15c>)
 8013374:	f04f 32ff 	mov.w	r2, #4294967295
 8013378:	601a      	str	r2, [r3, #0]
					break;
 801337a:	e03f      	b.n	80133fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801337c:	4b31      	ldr	r3, [pc, #196]	; (8013444 <xTaskIncrementTick+0x150>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013386:	68bb      	ldr	r3, [r7, #8]
 8013388:	685b      	ldr	r3, [r3, #4]
 801338a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801338c:	693a      	ldr	r2, [r7, #16]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	429a      	cmp	r2, r3
 8013392:	d203      	bcs.n	801339c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013394:	4a2e      	ldr	r2, [pc, #184]	; (8013450 <xTaskIncrementTick+0x15c>)
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801339a:	e02f      	b.n	80133fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	3304      	adds	r3, #4
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7fe fe7f 	bl	80120a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d004      	beq.n	80133b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	3318      	adds	r3, #24
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7fe fe76 	bl	80120a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133bc:	4b25      	ldr	r3, [pc, #148]	; (8013454 <xTaskIncrementTick+0x160>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d903      	bls.n	80133cc <xTaskIncrementTick+0xd8>
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133c8:	4a22      	ldr	r2, [pc, #136]	; (8013454 <xTaskIncrementTick+0x160>)
 80133ca:	6013      	str	r3, [r2, #0]
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133d0:	4613      	mov	r3, r2
 80133d2:	009b      	lsls	r3, r3, #2
 80133d4:	4413      	add	r3, r2
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	4a1f      	ldr	r2, [pc, #124]	; (8013458 <xTaskIncrementTick+0x164>)
 80133da:	441a      	add	r2, r3
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	3304      	adds	r3, #4
 80133e0:	4619      	mov	r1, r3
 80133e2:	4610      	mov	r0, r2
 80133e4:	f7fe fe01 	bl	8011fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133ec:	4b1b      	ldr	r3, [pc, #108]	; (801345c <xTaskIncrementTick+0x168>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d3b8      	bcc.n	8013368 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80133f6:	2301      	movs	r3, #1
 80133f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80133fa:	e7b5      	b.n	8013368 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80133fc:	4b17      	ldr	r3, [pc, #92]	; (801345c <xTaskIncrementTick+0x168>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013402:	4915      	ldr	r1, [pc, #84]	; (8013458 <xTaskIncrementTick+0x164>)
 8013404:	4613      	mov	r3, r2
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	4413      	add	r3, r2
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	440b      	add	r3, r1
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2b01      	cmp	r3, #1
 8013412:	d901      	bls.n	8013418 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013414:	2301      	movs	r3, #1
 8013416:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013418:	4b11      	ldr	r3, [pc, #68]	; (8013460 <xTaskIncrementTick+0x16c>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d007      	beq.n	8013430 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013420:	2301      	movs	r3, #1
 8013422:	617b      	str	r3, [r7, #20]
 8013424:	e004      	b.n	8013430 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013426:	4b0f      	ldr	r3, [pc, #60]	; (8013464 <xTaskIncrementTick+0x170>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	3301      	adds	r3, #1
 801342c:	4a0d      	ldr	r2, [pc, #52]	; (8013464 <xTaskIncrementTick+0x170>)
 801342e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013430:	697b      	ldr	r3, [r7, #20]
}
 8013432:	4618      	mov	r0, r3
 8013434:	3718      	adds	r7, #24
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}
 801343a:	bf00      	nop
 801343c:	20002ff0 	.word	0x20002ff0
 8013440:	20002fcc 	.word	0x20002fcc
 8013444:	20002f80 	.word	0x20002f80
 8013448:	20002f84 	.word	0x20002f84
 801344c:	20002fe0 	.word	0x20002fe0
 8013450:	20002fe8 	.word	0x20002fe8
 8013454:	20002fd0 	.word	0x20002fd0
 8013458:	20002af8 	.word	0x20002af8
 801345c:	20002af4 	.word	0x20002af4
 8013460:	20002fdc 	.word	0x20002fdc
 8013464:	20002fd8 	.word	0x20002fd8

08013468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013468:	b480      	push	{r7}
 801346a:	b085      	sub	sp, #20
 801346c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801346e:	4b28      	ldr	r3, [pc, #160]	; (8013510 <vTaskSwitchContext+0xa8>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d003      	beq.n	801347e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013476:	4b27      	ldr	r3, [pc, #156]	; (8013514 <vTaskSwitchContext+0xac>)
 8013478:	2201      	movs	r2, #1
 801347a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801347c:	e041      	b.n	8013502 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801347e:	4b25      	ldr	r3, [pc, #148]	; (8013514 <vTaskSwitchContext+0xac>)
 8013480:	2200      	movs	r2, #0
 8013482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013484:	4b24      	ldr	r3, [pc, #144]	; (8013518 <vTaskSwitchContext+0xb0>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	60fb      	str	r3, [r7, #12]
 801348a:	e010      	b.n	80134ae <vTaskSwitchContext+0x46>
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d10a      	bne.n	80134a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8013492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013496:	f383 8811 	msr	BASEPRI, r3
 801349a:	f3bf 8f6f 	isb	sy
 801349e:	f3bf 8f4f 	dsb	sy
 80134a2:	607b      	str	r3, [r7, #4]
}
 80134a4:	bf00      	nop
 80134a6:	e7fe      	b.n	80134a6 <vTaskSwitchContext+0x3e>
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	3b01      	subs	r3, #1
 80134ac:	60fb      	str	r3, [r7, #12]
 80134ae:	491b      	ldr	r1, [pc, #108]	; (801351c <vTaskSwitchContext+0xb4>)
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	4613      	mov	r3, r2
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	4413      	add	r3, r2
 80134b8:	009b      	lsls	r3, r3, #2
 80134ba:	440b      	add	r3, r1
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d0e4      	beq.n	801348c <vTaskSwitchContext+0x24>
 80134c2:	68fa      	ldr	r2, [r7, #12]
 80134c4:	4613      	mov	r3, r2
 80134c6:	009b      	lsls	r3, r3, #2
 80134c8:	4413      	add	r3, r2
 80134ca:	009b      	lsls	r3, r3, #2
 80134cc:	4a13      	ldr	r2, [pc, #76]	; (801351c <vTaskSwitchContext+0xb4>)
 80134ce:	4413      	add	r3, r2
 80134d0:	60bb      	str	r3, [r7, #8]
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	685a      	ldr	r2, [r3, #4]
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	605a      	str	r2, [r3, #4]
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	685a      	ldr	r2, [r3, #4]
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	3308      	adds	r3, #8
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d104      	bne.n	80134f2 <vTaskSwitchContext+0x8a>
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	685a      	ldr	r2, [r3, #4]
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	605a      	str	r2, [r3, #4]
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	68db      	ldr	r3, [r3, #12]
 80134f8:	4a09      	ldr	r2, [pc, #36]	; (8013520 <vTaskSwitchContext+0xb8>)
 80134fa:	6013      	str	r3, [r2, #0]
 80134fc:	4a06      	ldr	r2, [pc, #24]	; (8013518 <vTaskSwitchContext+0xb0>)
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	6013      	str	r3, [r2, #0]
}
 8013502:	bf00      	nop
 8013504:	3714      	adds	r7, #20
 8013506:	46bd      	mov	sp, r7
 8013508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop
 8013510:	20002ff0 	.word	0x20002ff0
 8013514:	20002fdc 	.word	0x20002fdc
 8013518:	20002fd0 	.word	0x20002fd0
 801351c:	20002af8 	.word	0x20002af8
 8013520:	20002af4 	.word	0x20002af4

08013524 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d10a      	bne.n	801354a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013538:	f383 8811 	msr	BASEPRI, r3
 801353c:	f3bf 8f6f 	isb	sy
 8013540:	f3bf 8f4f 	dsb	sy
 8013544:	60fb      	str	r3, [r7, #12]
}
 8013546:	bf00      	nop
 8013548:	e7fe      	b.n	8013548 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801354a:	4b07      	ldr	r3, [pc, #28]	; (8013568 <vTaskPlaceOnEventList+0x44>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	3318      	adds	r3, #24
 8013550:	4619      	mov	r1, r3
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f7fe fd6d 	bl	8012032 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013558:	2101      	movs	r1, #1
 801355a:	6838      	ldr	r0, [r7, #0]
 801355c:	f000 fa7c 	bl	8013a58 <prvAddCurrentTaskToDelayedList>
}
 8013560:	bf00      	nop
 8013562:	3710      	adds	r7, #16
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}
 8013568:	20002af4 	.word	0x20002af4

0801356c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801356c:	b580      	push	{r7, lr}
 801356e:	b086      	sub	sp, #24
 8013570:	af00      	add	r7, sp, #0
 8013572:	60f8      	str	r0, [r7, #12]
 8013574:	60b9      	str	r1, [r7, #8]
 8013576:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d10a      	bne.n	8013594 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013582:	f383 8811 	msr	BASEPRI, r3
 8013586:	f3bf 8f6f 	isb	sy
 801358a:	f3bf 8f4f 	dsb	sy
 801358e:	617b      	str	r3, [r7, #20]
}
 8013590:	bf00      	nop
 8013592:	e7fe      	b.n	8013592 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013594:	4b0a      	ldr	r3, [pc, #40]	; (80135c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	3318      	adds	r3, #24
 801359a:	4619      	mov	r1, r3
 801359c:	68f8      	ldr	r0, [r7, #12]
 801359e:	f7fe fd24 	bl	8011fea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d002      	beq.n	80135ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80135a8:	f04f 33ff 	mov.w	r3, #4294967295
 80135ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80135ae:	6879      	ldr	r1, [r7, #4]
 80135b0:	68b8      	ldr	r0, [r7, #8]
 80135b2:	f000 fa51 	bl	8013a58 <prvAddCurrentTaskToDelayedList>
	}
 80135b6:	bf00      	nop
 80135b8:	3718      	adds	r7, #24
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	20002af4 	.word	0x20002af4

080135c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b086      	sub	sp, #24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	68db      	ldr	r3, [r3, #12]
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d10a      	bne.n	80135f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80135da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135de:	f383 8811 	msr	BASEPRI, r3
 80135e2:	f3bf 8f6f 	isb	sy
 80135e6:	f3bf 8f4f 	dsb	sy
 80135ea:	60fb      	str	r3, [r7, #12]
}
 80135ec:	bf00      	nop
 80135ee:	e7fe      	b.n	80135ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	3318      	adds	r3, #24
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7fe fd55 	bl	80120a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80135fa:	4b1e      	ldr	r3, [pc, #120]	; (8013674 <xTaskRemoveFromEventList+0xb0>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d11d      	bne.n	801363e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	3304      	adds	r3, #4
 8013606:	4618      	mov	r0, r3
 8013608:	f7fe fd4c 	bl	80120a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013610:	4b19      	ldr	r3, [pc, #100]	; (8013678 <xTaskRemoveFromEventList+0xb4>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	429a      	cmp	r2, r3
 8013616:	d903      	bls.n	8013620 <xTaskRemoveFromEventList+0x5c>
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801361c:	4a16      	ldr	r2, [pc, #88]	; (8013678 <xTaskRemoveFromEventList+0xb4>)
 801361e:	6013      	str	r3, [r2, #0]
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013624:	4613      	mov	r3, r2
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	4413      	add	r3, r2
 801362a:	009b      	lsls	r3, r3, #2
 801362c:	4a13      	ldr	r2, [pc, #76]	; (801367c <xTaskRemoveFromEventList+0xb8>)
 801362e:	441a      	add	r2, r3
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	3304      	adds	r3, #4
 8013634:	4619      	mov	r1, r3
 8013636:	4610      	mov	r0, r2
 8013638:	f7fe fcd7 	bl	8011fea <vListInsertEnd>
 801363c:	e005      	b.n	801364a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	3318      	adds	r3, #24
 8013642:	4619      	mov	r1, r3
 8013644:	480e      	ldr	r0, [pc, #56]	; (8013680 <xTaskRemoveFromEventList+0xbc>)
 8013646:	f7fe fcd0 	bl	8011fea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801364e:	4b0d      	ldr	r3, [pc, #52]	; (8013684 <xTaskRemoveFromEventList+0xc0>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013654:	429a      	cmp	r2, r3
 8013656:	d905      	bls.n	8013664 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013658:	2301      	movs	r3, #1
 801365a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801365c:	4b0a      	ldr	r3, [pc, #40]	; (8013688 <xTaskRemoveFromEventList+0xc4>)
 801365e:	2201      	movs	r2, #1
 8013660:	601a      	str	r2, [r3, #0]
 8013662:	e001      	b.n	8013668 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013664:	2300      	movs	r3, #0
 8013666:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013668:	697b      	ldr	r3, [r7, #20]
}
 801366a:	4618      	mov	r0, r3
 801366c:	3718      	adds	r7, #24
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	20002ff0 	.word	0x20002ff0
 8013678:	20002fd0 	.word	0x20002fd0
 801367c:	20002af8 	.word	0x20002af8
 8013680:	20002f88 	.word	0x20002f88
 8013684:	20002af4 	.word	0x20002af4
 8013688:	20002fdc 	.word	0x20002fdc

0801368c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801368c:	b480      	push	{r7}
 801368e:	b083      	sub	sp, #12
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013694:	4b06      	ldr	r3, [pc, #24]	; (80136b0 <vTaskInternalSetTimeOutState+0x24>)
 8013696:	681a      	ldr	r2, [r3, #0]
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801369c:	4b05      	ldr	r3, [pc, #20]	; (80136b4 <vTaskInternalSetTimeOutState+0x28>)
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	605a      	str	r2, [r3, #4]
}
 80136a4:	bf00      	nop
 80136a6:	370c      	adds	r7, #12
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr
 80136b0:	20002fe0 	.word	0x20002fe0
 80136b4:	20002fcc 	.word	0x20002fcc

080136b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b088      	sub	sp, #32
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d10a      	bne.n	80136de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80136c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136cc:	f383 8811 	msr	BASEPRI, r3
 80136d0:	f3bf 8f6f 	isb	sy
 80136d4:	f3bf 8f4f 	dsb	sy
 80136d8:	613b      	str	r3, [r7, #16]
}
 80136da:	bf00      	nop
 80136dc:	e7fe      	b.n	80136dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d10a      	bne.n	80136fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80136e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e8:	f383 8811 	msr	BASEPRI, r3
 80136ec:	f3bf 8f6f 	isb	sy
 80136f0:	f3bf 8f4f 	dsb	sy
 80136f4:	60fb      	str	r3, [r7, #12]
}
 80136f6:	bf00      	nop
 80136f8:	e7fe      	b.n	80136f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80136fa:	f000 fe7b 	bl	80143f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80136fe:	4b1d      	ldr	r3, [pc, #116]	; (8013774 <xTaskCheckForTimeOut+0xbc>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	69ba      	ldr	r2, [r7, #24]
 801370a:	1ad3      	subs	r3, r2, r3
 801370c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013716:	d102      	bne.n	801371e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013718:	2300      	movs	r3, #0
 801371a:	61fb      	str	r3, [r7, #28]
 801371c:	e023      	b.n	8013766 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681a      	ldr	r2, [r3, #0]
 8013722:	4b15      	ldr	r3, [pc, #84]	; (8013778 <xTaskCheckForTimeOut+0xc0>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	429a      	cmp	r2, r3
 8013728:	d007      	beq.n	801373a <xTaskCheckForTimeOut+0x82>
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	69ba      	ldr	r2, [r7, #24]
 8013730:	429a      	cmp	r2, r3
 8013732:	d302      	bcc.n	801373a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013734:	2301      	movs	r3, #1
 8013736:	61fb      	str	r3, [r7, #28]
 8013738:	e015      	b.n	8013766 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	697a      	ldr	r2, [r7, #20]
 8013740:	429a      	cmp	r2, r3
 8013742:	d20b      	bcs.n	801375c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	681a      	ldr	r2, [r3, #0]
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	1ad2      	subs	r2, r2, r3
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7ff ff9b 	bl	801368c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013756:	2300      	movs	r3, #0
 8013758:	61fb      	str	r3, [r7, #28]
 801375a:	e004      	b.n	8013766 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	2200      	movs	r2, #0
 8013760:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013762:	2301      	movs	r3, #1
 8013764:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013766:	f000 fe75 	bl	8014454 <vPortExitCritical>

	return xReturn;
 801376a:	69fb      	ldr	r3, [r7, #28]
}
 801376c:	4618      	mov	r0, r3
 801376e:	3720      	adds	r7, #32
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	20002fcc 	.word	0x20002fcc
 8013778:	20002fe0 	.word	0x20002fe0

0801377c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801377c:	b480      	push	{r7}
 801377e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013780:	4b03      	ldr	r3, [pc, #12]	; (8013790 <vTaskMissedYield+0x14>)
 8013782:	2201      	movs	r2, #1
 8013784:	601a      	str	r2, [r3, #0]
}
 8013786:	bf00      	nop
 8013788:	46bd      	mov	sp, r7
 801378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378e:	4770      	bx	lr
 8013790:	20002fdc 	.word	0x20002fdc

08013794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801379c:	f000 f852 	bl	8013844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80137a0:	4b06      	ldr	r3, [pc, #24]	; (80137bc <prvIdleTask+0x28>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	2b01      	cmp	r3, #1
 80137a6:	d9f9      	bls.n	801379c <prvIdleTask+0x8>
			{
				taskYIELD();
 80137a8:	4b05      	ldr	r3, [pc, #20]	; (80137c0 <prvIdleTask+0x2c>)
 80137aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137ae:	601a      	str	r2, [r3, #0]
 80137b0:	f3bf 8f4f 	dsb	sy
 80137b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80137b8:	e7f0      	b.n	801379c <prvIdleTask+0x8>
 80137ba:	bf00      	nop
 80137bc:	20002af8 	.word	0x20002af8
 80137c0:	e000ed04 	.word	0xe000ed04

080137c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b082      	sub	sp, #8
 80137c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80137ca:	2300      	movs	r3, #0
 80137cc:	607b      	str	r3, [r7, #4]
 80137ce:	e00c      	b.n	80137ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	4613      	mov	r3, r2
 80137d4:	009b      	lsls	r3, r3, #2
 80137d6:	4413      	add	r3, r2
 80137d8:	009b      	lsls	r3, r3, #2
 80137da:	4a12      	ldr	r2, [pc, #72]	; (8013824 <prvInitialiseTaskLists+0x60>)
 80137dc:	4413      	add	r3, r2
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fe fbd6 	bl	8011f90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	3301      	adds	r3, #1
 80137e8:	607b      	str	r3, [r7, #4]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2b37      	cmp	r3, #55	; 0x37
 80137ee:	d9ef      	bls.n	80137d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80137f0:	480d      	ldr	r0, [pc, #52]	; (8013828 <prvInitialiseTaskLists+0x64>)
 80137f2:	f7fe fbcd 	bl	8011f90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80137f6:	480d      	ldr	r0, [pc, #52]	; (801382c <prvInitialiseTaskLists+0x68>)
 80137f8:	f7fe fbca 	bl	8011f90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80137fc:	480c      	ldr	r0, [pc, #48]	; (8013830 <prvInitialiseTaskLists+0x6c>)
 80137fe:	f7fe fbc7 	bl	8011f90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013802:	480c      	ldr	r0, [pc, #48]	; (8013834 <prvInitialiseTaskLists+0x70>)
 8013804:	f7fe fbc4 	bl	8011f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013808:	480b      	ldr	r0, [pc, #44]	; (8013838 <prvInitialiseTaskLists+0x74>)
 801380a:	f7fe fbc1 	bl	8011f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801380e:	4b0b      	ldr	r3, [pc, #44]	; (801383c <prvInitialiseTaskLists+0x78>)
 8013810:	4a05      	ldr	r2, [pc, #20]	; (8013828 <prvInitialiseTaskLists+0x64>)
 8013812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013814:	4b0a      	ldr	r3, [pc, #40]	; (8013840 <prvInitialiseTaskLists+0x7c>)
 8013816:	4a05      	ldr	r2, [pc, #20]	; (801382c <prvInitialiseTaskLists+0x68>)
 8013818:	601a      	str	r2, [r3, #0]
}
 801381a:	bf00      	nop
 801381c:	3708      	adds	r7, #8
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
 8013822:	bf00      	nop
 8013824:	20002af8 	.word	0x20002af8
 8013828:	20002f58 	.word	0x20002f58
 801382c:	20002f6c 	.word	0x20002f6c
 8013830:	20002f88 	.word	0x20002f88
 8013834:	20002f9c 	.word	0x20002f9c
 8013838:	20002fb4 	.word	0x20002fb4
 801383c:	20002f80 	.word	0x20002f80
 8013840:	20002f84 	.word	0x20002f84

08013844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801384a:	e019      	b.n	8013880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801384c:	f000 fdd2 	bl	80143f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013850:	4b10      	ldr	r3, [pc, #64]	; (8013894 <prvCheckTasksWaitingTermination+0x50>)
 8013852:	68db      	ldr	r3, [r3, #12]
 8013854:	68db      	ldr	r3, [r3, #12]
 8013856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	3304      	adds	r3, #4
 801385c:	4618      	mov	r0, r3
 801385e:	f7fe fc21 	bl	80120a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013862:	4b0d      	ldr	r3, [pc, #52]	; (8013898 <prvCheckTasksWaitingTermination+0x54>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	3b01      	subs	r3, #1
 8013868:	4a0b      	ldr	r2, [pc, #44]	; (8013898 <prvCheckTasksWaitingTermination+0x54>)
 801386a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801386c:	4b0b      	ldr	r3, [pc, #44]	; (801389c <prvCheckTasksWaitingTermination+0x58>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	3b01      	subs	r3, #1
 8013872:	4a0a      	ldr	r2, [pc, #40]	; (801389c <prvCheckTasksWaitingTermination+0x58>)
 8013874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013876:	f000 fded 	bl	8014454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f000 f810 	bl	80138a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013880:	4b06      	ldr	r3, [pc, #24]	; (801389c <prvCheckTasksWaitingTermination+0x58>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d1e1      	bne.n	801384c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013888:	bf00      	nop
 801388a:	bf00      	nop
 801388c:	3708      	adds	r7, #8
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop
 8013894:	20002f9c 	.word	0x20002f9c
 8013898:	20002fc8 	.word	0x20002fc8
 801389c:	20002fb0 	.word	0x20002fb0

080138a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b084      	sub	sp, #16
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d108      	bne.n	80138c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138b6:	4618      	mov	r0, r3
 80138b8:	f000 ff8a 	bl	80147d0 <vPortFree>
				vPortFree( pxTCB );
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f000 ff87 	bl	80147d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80138c2:	e018      	b.n	80138f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80138ca:	2b01      	cmp	r3, #1
 80138cc:	d103      	bne.n	80138d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f000 ff7e 	bl	80147d0 <vPortFree>
	}
 80138d4:	e00f      	b.n	80138f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80138dc:	2b02      	cmp	r3, #2
 80138de:	d00a      	beq.n	80138f6 <prvDeleteTCB+0x56>
	__asm volatile
 80138e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e4:	f383 8811 	msr	BASEPRI, r3
 80138e8:	f3bf 8f6f 	isb	sy
 80138ec:	f3bf 8f4f 	dsb	sy
 80138f0:	60fb      	str	r3, [r7, #12]
}
 80138f2:	bf00      	nop
 80138f4:	e7fe      	b.n	80138f4 <prvDeleteTCB+0x54>
	}
 80138f6:	bf00      	nop
 80138f8:	3710      	adds	r7, #16
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
	...

08013900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013900:	b480      	push	{r7}
 8013902:	b083      	sub	sp, #12
 8013904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013906:	4b0c      	ldr	r3, [pc, #48]	; (8013938 <prvResetNextTaskUnblockTime+0x38>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d104      	bne.n	801391a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013910:	4b0a      	ldr	r3, [pc, #40]	; (801393c <prvResetNextTaskUnblockTime+0x3c>)
 8013912:	f04f 32ff 	mov.w	r2, #4294967295
 8013916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013918:	e008      	b.n	801392c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801391a:	4b07      	ldr	r3, [pc, #28]	; (8013938 <prvResetNextTaskUnblockTime+0x38>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	68db      	ldr	r3, [r3, #12]
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	4a04      	ldr	r2, [pc, #16]	; (801393c <prvResetNextTaskUnblockTime+0x3c>)
 801392a:	6013      	str	r3, [r2, #0]
}
 801392c:	bf00      	nop
 801392e:	370c      	adds	r7, #12
 8013930:	46bd      	mov	sp, r7
 8013932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013936:	4770      	bx	lr
 8013938:	20002f80 	.word	0x20002f80
 801393c:	20002fe8 	.word	0x20002fe8

08013940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013940:	b480      	push	{r7}
 8013942:	b083      	sub	sp, #12
 8013944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013946:	4b0b      	ldr	r3, [pc, #44]	; (8013974 <xTaskGetSchedulerState+0x34>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d102      	bne.n	8013954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801394e:	2301      	movs	r3, #1
 8013950:	607b      	str	r3, [r7, #4]
 8013952:	e008      	b.n	8013966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013954:	4b08      	ldr	r3, [pc, #32]	; (8013978 <xTaskGetSchedulerState+0x38>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d102      	bne.n	8013962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801395c:	2302      	movs	r3, #2
 801395e:	607b      	str	r3, [r7, #4]
 8013960:	e001      	b.n	8013966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013962:	2300      	movs	r3, #0
 8013964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013966:	687b      	ldr	r3, [r7, #4]
	}
 8013968:	4618      	mov	r0, r3
 801396a:	370c      	adds	r7, #12
 801396c:	46bd      	mov	sp, r7
 801396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013972:	4770      	bx	lr
 8013974:	20002fd4 	.word	0x20002fd4
 8013978:	20002ff0 	.word	0x20002ff0

0801397c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801397c:	b580      	push	{r7, lr}
 801397e:	b086      	sub	sp, #24
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013988:	2300      	movs	r3, #0
 801398a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d056      	beq.n	8013a40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013992:	4b2e      	ldr	r3, [pc, #184]	; (8013a4c <xTaskPriorityDisinherit+0xd0>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	693a      	ldr	r2, [r7, #16]
 8013998:	429a      	cmp	r2, r3
 801399a:	d00a      	beq.n	80139b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a0:	f383 8811 	msr	BASEPRI, r3
 80139a4:	f3bf 8f6f 	isb	sy
 80139a8:	f3bf 8f4f 	dsb	sy
 80139ac:	60fb      	str	r3, [r7, #12]
}
 80139ae:	bf00      	nop
 80139b0:	e7fe      	b.n	80139b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80139b2:	693b      	ldr	r3, [r7, #16]
 80139b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d10a      	bne.n	80139d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80139ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139be:	f383 8811 	msr	BASEPRI, r3
 80139c2:	f3bf 8f6f 	isb	sy
 80139c6:	f3bf 8f4f 	dsb	sy
 80139ca:	60bb      	str	r3, [r7, #8]
}
 80139cc:	bf00      	nop
 80139ce:	e7fe      	b.n	80139ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80139d0:	693b      	ldr	r3, [r7, #16]
 80139d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139d4:	1e5a      	subs	r2, r3, #1
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d02c      	beq.n	8013a40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d128      	bne.n	8013a40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	3304      	adds	r3, #4
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fe fb56 	bl	80120a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a10:	4b0f      	ldr	r3, [pc, #60]	; (8013a50 <xTaskPriorityDisinherit+0xd4>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	429a      	cmp	r2, r3
 8013a16:	d903      	bls.n	8013a20 <xTaskPriorityDisinherit+0xa4>
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a1c:	4a0c      	ldr	r2, [pc, #48]	; (8013a50 <xTaskPriorityDisinherit+0xd4>)
 8013a1e:	6013      	str	r3, [r2, #0]
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a24:	4613      	mov	r3, r2
 8013a26:	009b      	lsls	r3, r3, #2
 8013a28:	4413      	add	r3, r2
 8013a2a:	009b      	lsls	r3, r3, #2
 8013a2c:	4a09      	ldr	r2, [pc, #36]	; (8013a54 <xTaskPriorityDisinherit+0xd8>)
 8013a2e:	441a      	add	r2, r3
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	3304      	adds	r3, #4
 8013a34:	4619      	mov	r1, r3
 8013a36:	4610      	mov	r0, r2
 8013a38:	f7fe fad7 	bl	8011fea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013a40:	697b      	ldr	r3, [r7, #20]
	}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3718      	adds	r7, #24
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	20002af4 	.word	0x20002af4
 8013a50:	20002fd0 	.word	0x20002fd0
 8013a54:	20002af8 	.word	0x20002af8

08013a58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b084      	sub	sp, #16
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013a62:	4b21      	ldr	r3, [pc, #132]	; (8013ae8 <prvAddCurrentTaskToDelayedList+0x90>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013a68:	4b20      	ldr	r3, [pc, #128]	; (8013aec <prvAddCurrentTaskToDelayedList+0x94>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	3304      	adds	r3, #4
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7fe fb18 	bl	80120a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a7a:	d10a      	bne.n	8013a92 <prvAddCurrentTaskToDelayedList+0x3a>
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d007      	beq.n	8013a92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013a82:	4b1a      	ldr	r3, [pc, #104]	; (8013aec <prvAddCurrentTaskToDelayedList+0x94>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	3304      	adds	r3, #4
 8013a88:	4619      	mov	r1, r3
 8013a8a:	4819      	ldr	r0, [pc, #100]	; (8013af0 <prvAddCurrentTaskToDelayedList+0x98>)
 8013a8c:	f7fe faad 	bl	8011fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013a90:	e026      	b.n	8013ae0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013a92:	68fa      	ldr	r2, [r7, #12]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	4413      	add	r3, r2
 8013a98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013a9a:	4b14      	ldr	r3, [pc, #80]	; (8013aec <prvAddCurrentTaskToDelayedList+0x94>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013aa2:	68ba      	ldr	r2, [r7, #8]
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d209      	bcs.n	8013abe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013aaa:	4b12      	ldr	r3, [pc, #72]	; (8013af4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013aac:	681a      	ldr	r2, [r3, #0]
 8013aae:	4b0f      	ldr	r3, [pc, #60]	; (8013aec <prvAddCurrentTaskToDelayedList+0x94>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	3304      	adds	r3, #4
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	4610      	mov	r0, r2
 8013ab8:	f7fe fabb 	bl	8012032 <vListInsert>
}
 8013abc:	e010      	b.n	8013ae0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013abe:	4b0e      	ldr	r3, [pc, #56]	; (8013af8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	4b0a      	ldr	r3, [pc, #40]	; (8013aec <prvAddCurrentTaskToDelayedList+0x94>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	3304      	adds	r3, #4
 8013ac8:	4619      	mov	r1, r3
 8013aca:	4610      	mov	r0, r2
 8013acc:	f7fe fab1 	bl	8012032 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013ad0:	4b0a      	ldr	r3, [pc, #40]	; (8013afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	68ba      	ldr	r2, [r7, #8]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d202      	bcs.n	8013ae0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013ada:	4a08      	ldr	r2, [pc, #32]	; (8013afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	6013      	str	r3, [r2, #0]
}
 8013ae0:	bf00      	nop
 8013ae2:	3710      	adds	r7, #16
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}
 8013ae8:	20002fcc 	.word	0x20002fcc
 8013aec:	20002af4 	.word	0x20002af4
 8013af0:	20002fb4 	.word	0x20002fb4
 8013af4:	20002f84 	.word	0x20002f84
 8013af8:	20002f80 	.word	0x20002f80
 8013afc:	20002fe8 	.word	0x20002fe8

08013b00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b08a      	sub	sp, #40	; 0x28
 8013b04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013b06:	2300      	movs	r3, #0
 8013b08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013b0a:	f000 fb07 	bl	801411c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013b0e:	4b1c      	ldr	r3, [pc, #112]	; (8013b80 <xTimerCreateTimerTask+0x80>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d021      	beq.n	8013b5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013b16:	2300      	movs	r3, #0
 8013b18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013b1e:	1d3a      	adds	r2, r7, #4
 8013b20:	f107 0108 	add.w	r1, r7, #8
 8013b24:	f107 030c 	add.w	r3, r7, #12
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7fe fa17 	bl	8011f5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013b2e:	6879      	ldr	r1, [r7, #4]
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	68fa      	ldr	r2, [r7, #12]
 8013b34:	9202      	str	r2, [sp, #8]
 8013b36:	9301      	str	r3, [sp, #4]
 8013b38:	2302      	movs	r3, #2
 8013b3a:	9300      	str	r3, [sp, #0]
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	460a      	mov	r2, r1
 8013b40:	4910      	ldr	r1, [pc, #64]	; (8013b84 <xTimerCreateTimerTask+0x84>)
 8013b42:	4811      	ldr	r0, [pc, #68]	; (8013b88 <xTimerCreateTimerTask+0x88>)
 8013b44:	f7ff f8de 	bl	8012d04 <xTaskCreateStatic>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	4a10      	ldr	r2, [pc, #64]	; (8013b8c <xTimerCreateTimerTask+0x8c>)
 8013b4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013b4e:	4b0f      	ldr	r3, [pc, #60]	; (8013b8c <xTimerCreateTimerTask+0x8c>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d001      	beq.n	8013b5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013b56:	2301      	movs	r3, #1
 8013b58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d10a      	bne.n	8013b76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b64:	f383 8811 	msr	BASEPRI, r3
 8013b68:	f3bf 8f6f 	isb	sy
 8013b6c:	f3bf 8f4f 	dsb	sy
 8013b70:	613b      	str	r3, [r7, #16]
}
 8013b72:	bf00      	nop
 8013b74:	e7fe      	b.n	8013b74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013b76:	697b      	ldr	r3, [r7, #20]
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3718      	adds	r7, #24
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	20003024 	.word	0x20003024
 8013b84:	0801a084 	.word	0x0801a084
 8013b88:	08013cc5 	.word	0x08013cc5
 8013b8c:	20003028 	.word	0x20003028

08013b90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b08a      	sub	sp, #40	; 0x28
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	60f8      	str	r0, [r7, #12]
 8013b98:	60b9      	str	r1, [r7, #8]
 8013b9a:	607a      	str	r2, [r7, #4]
 8013b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d10a      	bne.n	8013bbe <xTimerGenericCommand+0x2e>
	__asm volatile
 8013ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bac:	f383 8811 	msr	BASEPRI, r3
 8013bb0:	f3bf 8f6f 	isb	sy
 8013bb4:	f3bf 8f4f 	dsb	sy
 8013bb8:	623b      	str	r3, [r7, #32]
}
 8013bba:	bf00      	nop
 8013bbc:	e7fe      	b.n	8013bbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013bbe:	4b1a      	ldr	r3, [pc, #104]	; (8013c28 <xTimerGenericCommand+0x98>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d02a      	beq.n	8013c1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	2b05      	cmp	r3, #5
 8013bd6:	dc18      	bgt.n	8013c0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013bd8:	f7ff feb2 	bl	8013940 <xTaskGetSchedulerState>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	2b02      	cmp	r3, #2
 8013be0:	d109      	bne.n	8013bf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013be2:	4b11      	ldr	r3, [pc, #68]	; (8013c28 <xTimerGenericCommand+0x98>)
 8013be4:	6818      	ldr	r0, [r3, #0]
 8013be6:	f107 0110 	add.w	r1, r7, #16
 8013bea:	2300      	movs	r3, #0
 8013bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bee:	f7fe fbc1 	bl	8012374 <xQueueGenericSend>
 8013bf2:	6278      	str	r0, [r7, #36]	; 0x24
 8013bf4:	e012      	b.n	8013c1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013bf6:	4b0c      	ldr	r3, [pc, #48]	; (8013c28 <xTimerGenericCommand+0x98>)
 8013bf8:	6818      	ldr	r0, [r3, #0]
 8013bfa:	f107 0110 	add.w	r1, r7, #16
 8013bfe:	2300      	movs	r3, #0
 8013c00:	2200      	movs	r2, #0
 8013c02:	f7fe fbb7 	bl	8012374 <xQueueGenericSend>
 8013c06:	6278      	str	r0, [r7, #36]	; 0x24
 8013c08:	e008      	b.n	8013c1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013c0a:	4b07      	ldr	r3, [pc, #28]	; (8013c28 <xTimerGenericCommand+0x98>)
 8013c0c:	6818      	ldr	r0, [r3, #0]
 8013c0e:	f107 0110 	add.w	r1, r7, #16
 8013c12:	2300      	movs	r3, #0
 8013c14:	683a      	ldr	r2, [r7, #0]
 8013c16:	f7fe fcab 	bl	8012570 <xQueueGenericSendFromISR>
 8013c1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c1e:	4618      	mov	r0, r3
 8013c20:	3728      	adds	r7, #40	; 0x28
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}
 8013c26:	bf00      	nop
 8013c28:	20003024 	.word	0x20003024

08013c2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b088      	sub	sp, #32
 8013c30:	af02      	add	r7, sp, #8
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c36:	4b22      	ldr	r3, [pc, #136]	; (8013cc0 <prvProcessExpiredTimer+0x94>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	68db      	ldr	r3, [r3, #12]
 8013c3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	3304      	adds	r3, #4
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7fe fa2d 	bl	80120a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c50:	f003 0304 	and.w	r3, r3, #4
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d022      	beq.n	8013c9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	699a      	ldr	r2, [r3, #24]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	18d1      	adds	r1, r2, r3
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	683a      	ldr	r2, [r7, #0]
 8013c64:	6978      	ldr	r0, [r7, #20]
 8013c66:	f000 f8d1 	bl	8013e0c <prvInsertTimerInActiveList>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d01f      	beq.n	8013cb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013c70:	2300      	movs	r3, #0
 8013c72:	9300      	str	r3, [sp, #0]
 8013c74:	2300      	movs	r3, #0
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	2100      	movs	r1, #0
 8013c7a:	6978      	ldr	r0, [r7, #20]
 8013c7c:	f7ff ff88 	bl	8013b90 <xTimerGenericCommand>
 8013c80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013c82:	693b      	ldr	r3, [r7, #16]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d113      	bne.n	8013cb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c8c:	f383 8811 	msr	BASEPRI, r3
 8013c90:	f3bf 8f6f 	isb	sy
 8013c94:	f3bf 8f4f 	dsb	sy
 8013c98:	60fb      	str	r3, [r7, #12]
}
 8013c9a:	bf00      	nop
 8013c9c:	e7fe      	b.n	8013c9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ca4:	f023 0301 	bic.w	r3, r3, #1
 8013ca8:	b2da      	uxtb	r2, r3
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	6a1b      	ldr	r3, [r3, #32]
 8013cb4:	6978      	ldr	r0, [r7, #20]
 8013cb6:	4798      	blx	r3
}
 8013cb8:	bf00      	nop
 8013cba:	3718      	adds	r7, #24
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}
 8013cc0:	2000301c 	.word	0x2000301c

08013cc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b084      	sub	sp, #16
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013ccc:	f107 0308 	add.w	r3, r7, #8
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f000 f857 	bl	8013d84 <prvGetNextExpireTime>
 8013cd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	4619      	mov	r1, r3
 8013cdc:	68f8      	ldr	r0, [r7, #12]
 8013cde:	f000 f803 	bl	8013ce8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013ce2:	f000 f8d5 	bl	8013e90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013ce6:	e7f1      	b.n	8013ccc <prvTimerTask+0x8>

08013ce8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b084      	sub	sp, #16
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013cf2:	f7ff fa43 	bl	801317c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013cf6:	f107 0308 	add.w	r3, r7, #8
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f000 f866 	bl	8013dcc <prvSampleTimeNow>
 8013d00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d130      	bne.n	8013d6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d10a      	bne.n	8013d24 <prvProcessTimerOrBlockTask+0x3c>
 8013d0e:	687a      	ldr	r2, [r7, #4]
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d806      	bhi.n	8013d24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013d16:	f7ff fa3f 	bl	8013198 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013d1a:	68f9      	ldr	r1, [r7, #12]
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f7ff ff85 	bl	8013c2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013d22:	e024      	b.n	8013d6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d008      	beq.n	8013d3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013d2a:	4b13      	ldr	r3, [pc, #76]	; (8013d78 <prvProcessTimerOrBlockTask+0x90>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d101      	bne.n	8013d38 <prvProcessTimerOrBlockTask+0x50>
 8013d34:	2301      	movs	r3, #1
 8013d36:	e000      	b.n	8013d3a <prvProcessTimerOrBlockTask+0x52>
 8013d38:	2300      	movs	r3, #0
 8013d3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013d3c:	4b0f      	ldr	r3, [pc, #60]	; (8013d7c <prvProcessTimerOrBlockTask+0x94>)
 8013d3e:	6818      	ldr	r0, [r3, #0]
 8013d40:	687a      	ldr	r2, [r7, #4]
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	1ad3      	subs	r3, r2, r3
 8013d46:	683a      	ldr	r2, [r7, #0]
 8013d48:	4619      	mov	r1, r3
 8013d4a:	f7fe ffa7 	bl	8012c9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013d4e:	f7ff fa23 	bl	8013198 <xTaskResumeAll>
 8013d52:	4603      	mov	r3, r0
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d10a      	bne.n	8013d6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013d58:	4b09      	ldr	r3, [pc, #36]	; (8013d80 <prvProcessTimerOrBlockTask+0x98>)
 8013d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d5e:	601a      	str	r2, [r3, #0]
 8013d60:	f3bf 8f4f 	dsb	sy
 8013d64:	f3bf 8f6f 	isb	sy
}
 8013d68:	e001      	b.n	8013d6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013d6a:	f7ff fa15 	bl	8013198 <xTaskResumeAll>
}
 8013d6e:	bf00      	nop
 8013d70:	3710      	adds	r7, #16
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	20003020 	.word	0x20003020
 8013d7c:	20003024 	.word	0x20003024
 8013d80:	e000ed04 	.word	0xe000ed04

08013d84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013d84:	b480      	push	{r7}
 8013d86:	b085      	sub	sp, #20
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013d8c:	4b0e      	ldr	r3, [pc, #56]	; (8013dc8 <prvGetNextExpireTime+0x44>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d101      	bne.n	8013d9a <prvGetNextExpireTime+0x16>
 8013d96:	2201      	movs	r2, #1
 8013d98:	e000      	b.n	8013d9c <prvGetNextExpireTime+0x18>
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d105      	bne.n	8013db4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013da8:	4b07      	ldr	r3, [pc, #28]	; (8013dc8 <prvGetNextExpireTime+0x44>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	68db      	ldr	r3, [r3, #12]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	60fb      	str	r3, [r7, #12]
 8013db2:	e001      	b.n	8013db8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013db4:	2300      	movs	r3, #0
 8013db6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013db8:	68fb      	ldr	r3, [r7, #12]
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3714      	adds	r7, #20
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr
 8013dc6:	bf00      	nop
 8013dc8:	2000301c 	.word	0x2000301c

08013dcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013dd4:	f7ff fa7e 	bl	80132d4 <xTaskGetTickCount>
 8013dd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013dda:	4b0b      	ldr	r3, [pc, #44]	; (8013e08 <prvSampleTimeNow+0x3c>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	68fa      	ldr	r2, [r7, #12]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d205      	bcs.n	8013df0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013de4:	f000 f936 	bl	8014054 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2201      	movs	r2, #1
 8013dec:	601a      	str	r2, [r3, #0]
 8013dee:	e002      	b.n	8013df6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2200      	movs	r2, #0
 8013df4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013df6:	4a04      	ldr	r2, [pc, #16]	; (8013e08 <prvSampleTimeNow+0x3c>)
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3710      	adds	r7, #16
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	2000302c 	.word	0x2000302c

08013e0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b086      	sub	sp, #24
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	60f8      	str	r0, [r7, #12]
 8013e14:	60b9      	str	r1, [r7, #8]
 8013e16:	607a      	str	r2, [r7, #4]
 8013e18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	68ba      	ldr	r2, [r7, #8]
 8013e22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	68fa      	ldr	r2, [r7, #12]
 8013e28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013e2a:	68ba      	ldr	r2, [r7, #8]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d812      	bhi.n	8013e58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e32:	687a      	ldr	r2, [r7, #4]
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	1ad2      	subs	r2, r2, r3
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	699b      	ldr	r3, [r3, #24]
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d302      	bcc.n	8013e46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013e40:	2301      	movs	r3, #1
 8013e42:	617b      	str	r3, [r7, #20]
 8013e44:	e01b      	b.n	8013e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013e46:	4b10      	ldr	r3, [pc, #64]	; (8013e88 <prvInsertTimerInActiveList+0x7c>)
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	3304      	adds	r3, #4
 8013e4e:	4619      	mov	r1, r3
 8013e50:	4610      	mov	r0, r2
 8013e52:	f7fe f8ee 	bl	8012032 <vListInsert>
 8013e56:	e012      	b.n	8013e7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d206      	bcs.n	8013e6e <prvInsertTimerInActiveList+0x62>
 8013e60:	68ba      	ldr	r2, [r7, #8]
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d302      	bcc.n	8013e6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013e68:	2301      	movs	r3, #1
 8013e6a:	617b      	str	r3, [r7, #20]
 8013e6c:	e007      	b.n	8013e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013e6e:	4b07      	ldr	r3, [pc, #28]	; (8013e8c <prvInsertTimerInActiveList+0x80>)
 8013e70:	681a      	ldr	r2, [r3, #0]
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	3304      	adds	r3, #4
 8013e76:	4619      	mov	r1, r3
 8013e78:	4610      	mov	r0, r2
 8013e7a:	f7fe f8da 	bl	8012032 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013e7e:	697b      	ldr	r3, [r7, #20]
}
 8013e80:	4618      	mov	r0, r3
 8013e82:	3718      	adds	r7, #24
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}
 8013e88:	20003020 	.word	0x20003020
 8013e8c:	2000301c 	.word	0x2000301c

08013e90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b08e      	sub	sp, #56	; 0x38
 8013e94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013e96:	e0ca      	b.n	801402e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	da18      	bge.n	8013ed0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013e9e:	1d3b      	adds	r3, r7, #4
 8013ea0:	3304      	adds	r3, #4
 8013ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d10a      	bne.n	8013ec0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eae:	f383 8811 	msr	BASEPRI, r3
 8013eb2:	f3bf 8f6f 	isb	sy
 8013eb6:	f3bf 8f4f 	dsb	sy
 8013eba:	61fb      	str	r3, [r7, #28]
}
 8013ebc:	bf00      	nop
 8013ebe:	e7fe      	b.n	8013ebe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ec6:	6850      	ldr	r0, [r2, #4]
 8013ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013eca:	6892      	ldr	r2, [r2, #8]
 8013ecc:	4611      	mov	r1, r2
 8013ece:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	f2c0 80aa 	blt.w	801402c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ede:	695b      	ldr	r3, [r3, #20]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d004      	beq.n	8013eee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee6:	3304      	adds	r3, #4
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7fe f8db 	bl	80120a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013eee:	463b      	mov	r3, r7
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7ff ff6b 	bl	8013dcc <prvSampleTimeNow>
 8013ef6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2b09      	cmp	r3, #9
 8013efc:	f200 8097 	bhi.w	801402e <prvProcessReceivedCommands+0x19e>
 8013f00:	a201      	add	r2, pc, #4	; (adr r2, 8013f08 <prvProcessReceivedCommands+0x78>)
 8013f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f06:	bf00      	nop
 8013f08:	08013f31 	.word	0x08013f31
 8013f0c:	08013f31 	.word	0x08013f31
 8013f10:	08013f31 	.word	0x08013f31
 8013f14:	08013fa5 	.word	0x08013fa5
 8013f18:	08013fb9 	.word	0x08013fb9
 8013f1c:	08014003 	.word	0x08014003
 8013f20:	08013f31 	.word	0x08013f31
 8013f24:	08013f31 	.word	0x08013f31
 8013f28:	08013fa5 	.word	0x08013fa5
 8013f2c:	08013fb9 	.word	0x08013fb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f36:	f043 0301 	orr.w	r3, r3, #1
 8013f3a:	b2da      	uxtb	r2, r3
 8013f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013f42:	68ba      	ldr	r2, [r7, #8]
 8013f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f46:	699b      	ldr	r3, [r3, #24]
 8013f48:	18d1      	adds	r1, r2, r3
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f50:	f7ff ff5c 	bl	8013e0c <prvInsertTimerInActiveList>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d069      	beq.n	801402e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5c:	6a1b      	ldr	r3, [r3, #32]
 8013f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f68:	f003 0304 	and.w	r3, r3, #4
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d05e      	beq.n	801402e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013f70:	68ba      	ldr	r2, [r7, #8]
 8013f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f74:	699b      	ldr	r3, [r3, #24]
 8013f76:	441a      	add	r2, r3
 8013f78:	2300      	movs	r3, #0
 8013f7a:	9300      	str	r3, [sp, #0]
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	2100      	movs	r1, #0
 8013f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f82:	f7ff fe05 	bl	8013b90 <xTimerGenericCommand>
 8013f86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013f88:	6a3b      	ldr	r3, [r7, #32]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d14f      	bne.n	801402e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f92:	f383 8811 	msr	BASEPRI, r3
 8013f96:	f3bf 8f6f 	isb	sy
 8013f9a:	f3bf 8f4f 	dsb	sy
 8013f9e:	61bb      	str	r3, [r7, #24]
}
 8013fa0:	bf00      	nop
 8013fa2:	e7fe      	b.n	8013fa2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013faa:	f023 0301 	bic.w	r3, r3, #1
 8013fae:	b2da      	uxtb	r2, r3
 8013fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013fb6:	e03a      	b.n	801402e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fbe:	f043 0301 	orr.w	r3, r3, #1
 8013fc2:	b2da      	uxtb	r2, r3
 8013fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013fca:	68ba      	ldr	r2, [r7, #8]
 8013fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd2:	699b      	ldr	r3, [r3, #24]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d10a      	bne.n	8013fee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fdc:	f383 8811 	msr	BASEPRI, r3
 8013fe0:	f3bf 8f6f 	isb	sy
 8013fe4:	f3bf 8f4f 	dsb	sy
 8013fe8:	617b      	str	r3, [r7, #20]
}
 8013fea:	bf00      	nop
 8013fec:	e7fe      	b.n	8013fec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff0:	699a      	ldr	r2, [r3, #24]
 8013ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff4:	18d1      	adds	r1, r2, r3
 8013ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ffc:	f7ff ff06 	bl	8013e0c <prvInsertTimerInActiveList>
					break;
 8014000:	e015      	b.n	801402e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014008:	f003 0302 	and.w	r3, r3, #2
 801400c:	2b00      	cmp	r3, #0
 801400e:	d103      	bne.n	8014018 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014012:	f000 fbdd 	bl	80147d0 <vPortFree>
 8014016:	e00a      	b.n	801402e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801401e:	f023 0301 	bic.w	r3, r3, #1
 8014022:	b2da      	uxtb	r2, r3
 8014024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801402a:	e000      	b.n	801402e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801402c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801402e:	4b08      	ldr	r3, [pc, #32]	; (8014050 <prvProcessReceivedCommands+0x1c0>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	1d39      	adds	r1, r7, #4
 8014034:	2200      	movs	r2, #0
 8014036:	4618      	mov	r0, r3
 8014038:	f7fe fb36 	bl	80126a8 <xQueueReceive>
 801403c:	4603      	mov	r3, r0
 801403e:	2b00      	cmp	r3, #0
 8014040:	f47f af2a 	bne.w	8013e98 <prvProcessReceivedCommands+0x8>
	}
}
 8014044:	bf00      	nop
 8014046:	bf00      	nop
 8014048:	3730      	adds	r7, #48	; 0x30
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}
 801404e:	bf00      	nop
 8014050:	20003024 	.word	0x20003024

08014054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b088      	sub	sp, #32
 8014058:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801405a:	e048      	b.n	80140ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801405c:	4b2d      	ldr	r3, [pc, #180]	; (8014114 <prvSwitchTimerLists+0xc0>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	68db      	ldr	r3, [r3, #12]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014066:	4b2b      	ldr	r3, [pc, #172]	; (8014114 <prvSwitchTimerLists+0xc0>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	68db      	ldr	r3, [r3, #12]
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	3304      	adds	r3, #4
 8014074:	4618      	mov	r0, r3
 8014076:	f7fe f815 	bl	80120a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	6a1b      	ldr	r3, [r3, #32]
 801407e:	68f8      	ldr	r0, [r7, #12]
 8014080:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014088:	f003 0304 	and.w	r3, r3, #4
 801408c:	2b00      	cmp	r3, #0
 801408e:	d02e      	beq.n	80140ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	699b      	ldr	r3, [r3, #24]
 8014094:	693a      	ldr	r2, [r7, #16]
 8014096:	4413      	add	r3, r2
 8014098:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801409a:	68ba      	ldr	r2, [r7, #8]
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	429a      	cmp	r2, r3
 80140a0:	d90e      	bls.n	80140c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	68ba      	ldr	r2, [r7, #8]
 80140a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	68fa      	ldr	r2, [r7, #12]
 80140ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80140ae:	4b19      	ldr	r3, [pc, #100]	; (8014114 <prvSwitchTimerLists+0xc0>)
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	3304      	adds	r3, #4
 80140b6:	4619      	mov	r1, r3
 80140b8:	4610      	mov	r0, r2
 80140ba:	f7fd ffba 	bl	8012032 <vListInsert>
 80140be:	e016      	b.n	80140ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80140c0:	2300      	movs	r3, #0
 80140c2:	9300      	str	r3, [sp, #0]
 80140c4:	2300      	movs	r3, #0
 80140c6:	693a      	ldr	r2, [r7, #16]
 80140c8:	2100      	movs	r1, #0
 80140ca:	68f8      	ldr	r0, [r7, #12]
 80140cc:	f7ff fd60 	bl	8013b90 <xTimerGenericCommand>
 80140d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d10a      	bne.n	80140ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80140d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140dc:	f383 8811 	msr	BASEPRI, r3
 80140e0:	f3bf 8f6f 	isb	sy
 80140e4:	f3bf 8f4f 	dsb	sy
 80140e8:	603b      	str	r3, [r7, #0]
}
 80140ea:	bf00      	nop
 80140ec:	e7fe      	b.n	80140ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80140ee:	4b09      	ldr	r3, [pc, #36]	; (8014114 <prvSwitchTimerLists+0xc0>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d1b1      	bne.n	801405c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80140f8:	4b06      	ldr	r3, [pc, #24]	; (8014114 <prvSwitchTimerLists+0xc0>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80140fe:	4b06      	ldr	r3, [pc, #24]	; (8014118 <prvSwitchTimerLists+0xc4>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	4a04      	ldr	r2, [pc, #16]	; (8014114 <prvSwitchTimerLists+0xc0>)
 8014104:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014106:	4a04      	ldr	r2, [pc, #16]	; (8014118 <prvSwitchTimerLists+0xc4>)
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	6013      	str	r3, [r2, #0]
}
 801410c:	bf00      	nop
 801410e:	3718      	adds	r7, #24
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}
 8014114:	2000301c 	.word	0x2000301c
 8014118:	20003020 	.word	0x20003020

0801411c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014122:	f000 f967 	bl	80143f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014126:	4b15      	ldr	r3, [pc, #84]	; (801417c <prvCheckForValidListAndQueue+0x60>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d120      	bne.n	8014170 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801412e:	4814      	ldr	r0, [pc, #80]	; (8014180 <prvCheckForValidListAndQueue+0x64>)
 8014130:	f7fd ff2e 	bl	8011f90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014134:	4813      	ldr	r0, [pc, #76]	; (8014184 <prvCheckForValidListAndQueue+0x68>)
 8014136:	f7fd ff2b 	bl	8011f90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801413a:	4b13      	ldr	r3, [pc, #76]	; (8014188 <prvCheckForValidListAndQueue+0x6c>)
 801413c:	4a10      	ldr	r2, [pc, #64]	; (8014180 <prvCheckForValidListAndQueue+0x64>)
 801413e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014140:	4b12      	ldr	r3, [pc, #72]	; (801418c <prvCheckForValidListAndQueue+0x70>)
 8014142:	4a10      	ldr	r2, [pc, #64]	; (8014184 <prvCheckForValidListAndQueue+0x68>)
 8014144:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014146:	2300      	movs	r3, #0
 8014148:	9300      	str	r3, [sp, #0]
 801414a:	4b11      	ldr	r3, [pc, #68]	; (8014190 <prvCheckForValidListAndQueue+0x74>)
 801414c:	4a11      	ldr	r2, [pc, #68]	; (8014194 <prvCheckForValidListAndQueue+0x78>)
 801414e:	2110      	movs	r1, #16
 8014150:	200a      	movs	r0, #10
 8014152:	f7fe f839 	bl	80121c8 <xQueueGenericCreateStatic>
 8014156:	4603      	mov	r3, r0
 8014158:	4a08      	ldr	r2, [pc, #32]	; (801417c <prvCheckForValidListAndQueue+0x60>)
 801415a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801415c:	4b07      	ldr	r3, [pc, #28]	; (801417c <prvCheckForValidListAndQueue+0x60>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d005      	beq.n	8014170 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014164:	4b05      	ldr	r3, [pc, #20]	; (801417c <prvCheckForValidListAndQueue+0x60>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	490b      	ldr	r1, [pc, #44]	; (8014198 <prvCheckForValidListAndQueue+0x7c>)
 801416a:	4618      	mov	r0, r3
 801416c:	f7fe fd6c 	bl	8012c48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014170:	f000 f970 	bl	8014454 <vPortExitCritical>
}
 8014174:	bf00      	nop
 8014176:	46bd      	mov	sp, r7
 8014178:	bd80      	pop	{r7, pc}
 801417a:	bf00      	nop
 801417c:	20003024 	.word	0x20003024
 8014180:	20002ff4 	.word	0x20002ff4
 8014184:	20003008 	.word	0x20003008
 8014188:	2000301c 	.word	0x2000301c
 801418c:	20003020 	.word	0x20003020
 8014190:	200030d0 	.word	0x200030d0
 8014194:	20003030 	.word	0x20003030
 8014198:	0801a08c 	.word	0x0801a08c

0801419c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801419c:	b480      	push	{r7}
 801419e:	b085      	sub	sp, #20
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	60f8      	str	r0, [r7, #12]
 80141a4:	60b9      	str	r1, [r7, #8]
 80141a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	3b04      	subs	r3, #4
 80141ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80141b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	3b04      	subs	r3, #4
 80141ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	f023 0201 	bic.w	r2, r3, #1
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	3b04      	subs	r3, #4
 80141ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80141cc:	4a0c      	ldr	r2, [pc, #48]	; (8014200 <pxPortInitialiseStack+0x64>)
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	3b14      	subs	r3, #20
 80141d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80141d8:	687a      	ldr	r2, [r7, #4]
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	3b04      	subs	r3, #4
 80141e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	f06f 0202 	mvn.w	r2, #2
 80141ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	3b20      	subs	r3, #32
 80141f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80141f2:	68fb      	ldr	r3, [r7, #12]
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3714      	adds	r7, #20
 80141f8:	46bd      	mov	sp, r7
 80141fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fe:	4770      	bx	lr
 8014200:	08014205 	.word	0x08014205

08014204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014204:	b480      	push	{r7}
 8014206:	b085      	sub	sp, #20
 8014208:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801420a:	2300      	movs	r3, #0
 801420c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801420e:	4b12      	ldr	r3, [pc, #72]	; (8014258 <prvTaskExitError+0x54>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014216:	d00a      	beq.n	801422e <prvTaskExitError+0x2a>
	__asm volatile
 8014218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801421c:	f383 8811 	msr	BASEPRI, r3
 8014220:	f3bf 8f6f 	isb	sy
 8014224:	f3bf 8f4f 	dsb	sy
 8014228:	60fb      	str	r3, [r7, #12]
}
 801422a:	bf00      	nop
 801422c:	e7fe      	b.n	801422c <prvTaskExitError+0x28>
	__asm volatile
 801422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014232:	f383 8811 	msr	BASEPRI, r3
 8014236:	f3bf 8f6f 	isb	sy
 801423a:	f3bf 8f4f 	dsb	sy
 801423e:	60bb      	str	r3, [r7, #8]
}
 8014240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014242:	bf00      	nop
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d0fc      	beq.n	8014244 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801424a:	bf00      	nop
 801424c:	bf00      	nop
 801424e:	3714      	adds	r7, #20
 8014250:	46bd      	mov	sp, r7
 8014252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014256:	4770      	bx	lr
 8014258:	2000031c 	.word	0x2000031c
 801425c:	00000000 	.word	0x00000000

08014260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014260:	4b07      	ldr	r3, [pc, #28]	; (8014280 <pxCurrentTCBConst2>)
 8014262:	6819      	ldr	r1, [r3, #0]
 8014264:	6808      	ldr	r0, [r1, #0]
 8014266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801426a:	f380 8809 	msr	PSP, r0
 801426e:	f3bf 8f6f 	isb	sy
 8014272:	f04f 0000 	mov.w	r0, #0
 8014276:	f380 8811 	msr	BASEPRI, r0
 801427a:	4770      	bx	lr
 801427c:	f3af 8000 	nop.w

08014280 <pxCurrentTCBConst2>:
 8014280:	20002af4 	.word	0x20002af4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014284:	bf00      	nop
 8014286:	bf00      	nop

08014288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014288:	4808      	ldr	r0, [pc, #32]	; (80142ac <prvPortStartFirstTask+0x24>)
 801428a:	6800      	ldr	r0, [r0, #0]
 801428c:	6800      	ldr	r0, [r0, #0]
 801428e:	f380 8808 	msr	MSP, r0
 8014292:	f04f 0000 	mov.w	r0, #0
 8014296:	f380 8814 	msr	CONTROL, r0
 801429a:	b662      	cpsie	i
 801429c:	b661      	cpsie	f
 801429e:	f3bf 8f4f 	dsb	sy
 80142a2:	f3bf 8f6f 	isb	sy
 80142a6:	df00      	svc	0
 80142a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80142aa:	bf00      	nop
 80142ac:	e000ed08 	.word	0xe000ed08

080142b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b086      	sub	sp, #24
 80142b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80142b6:	4b46      	ldr	r3, [pc, #280]	; (80143d0 <xPortStartScheduler+0x120>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	4a46      	ldr	r2, [pc, #280]	; (80143d4 <xPortStartScheduler+0x124>)
 80142bc:	4293      	cmp	r3, r2
 80142be:	d10a      	bne.n	80142d6 <xPortStartScheduler+0x26>
	__asm volatile
 80142c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c4:	f383 8811 	msr	BASEPRI, r3
 80142c8:	f3bf 8f6f 	isb	sy
 80142cc:	f3bf 8f4f 	dsb	sy
 80142d0:	613b      	str	r3, [r7, #16]
}
 80142d2:	bf00      	nop
 80142d4:	e7fe      	b.n	80142d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80142d6:	4b3e      	ldr	r3, [pc, #248]	; (80143d0 <xPortStartScheduler+0x120>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	4a3f      	ldr	r2, [pc, #252]	; (80143d8 <xPortStartScheduler+0x128>)
 80142dc:	4293      	cmp	r3, r2
 80142de:	d10a      	bne.n	80142f6 <xPortStartScheduler+0x46>
	__asm volatile
 80142e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142e4:	f383 8811 	msr	BASEPRI, r3
 80142e8:	f3bf 8f6f 	isb	sy
 80142ec:	f3bf 8f4f 	dsb	sy
 80142f0:	60fb      	str	r3, [r7, #12]
}
 80142f2:	bf00      	nop
 80142f4:	e7fe      	b.n	80142f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80142f6:	4b39      	ldr	r3, [pc, #228]	; (80143dc <xPortStartScheduler+0x12c>)
 80142f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	b2db      	uxtb	r3, r3
 8014300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	22ff      	movs	r2, #255	; 0xff
 8014306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014308:	697b      	ldr	r3, [r7, #20]
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	b2db      	uxtb	r3, r3
 801430e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014310:	78fb      	ldrb	r3, [r7, #3]
 8014312:	b2db      	uxtb	r3, r3
 8014314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014318:	b2da      	uxtb	r2, r3
 801431a:	4b31      	ldr	r3, [pc, #196]	; (80143e0 <xPortStartScheduler+0x130>)
 801431c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801431e:	4b31      	ldr	r3, [pc, #196]	; (80143e4 <xPortStartScheduler+0x134>)
 8014320:	2207      	movs	r2, #7
 8014322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014324:	e009      	b.n	801433a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014326:	4b2f      	ldr	r3, [pc, #188]	; (80143e4 <xPortStartScheduler+0x134>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	3b01      	subs	r3, #1
 801432c:	4a2d      	ldr	r2, [pc, #180]	; (80143e4 <xPortStartScheduler+0x134>)
 801432e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014330:	78fb      	ldrb	r3, [r7, #3]
 8014332:	b2db      	uxtb	r3, r3
 8014334:	005b      	lsls	r3, r3, #1
 8014336:	b2db      	uxtb	r3, r3
 8014338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801433a:	78fb      	ldrb	r3, [r7, #3]
 801433c:	b2db      	uxtb	r3, r3
 801433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014342:	2b80      	cmp	r3, #128	; 0x80
 8014344:	d0ef      	beq.n	8014326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014346:	4b27      	ldr	r3, [pc, #156]	; (80143e4 <xPortStartScheduler+0x134>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	f1c3 0307 	rsb	r3, r3, #7
 801434e:	2b04      	cmp	r3, #4
 8014350:	d00a      	beq.n	8014368 <xPortStartScheduler+0xb8>
	__asm volatile
 8014352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014356:	f383 8811 	msr	BASEPRI, r3
 801435a:	f3bf 8f6f 	isb	sy
 801435e:	f3bf 8f4f 	dsb	sy
 8014362:	60bb      	str	r3, [r7, #8]
}
 8014364:	bf00      	nop
 8014366:	e7fe      	b.n	8014366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014368:	4b1e      	ldr	r3, [pc, #120]	; (80143e4 <xPortStartScheduler+0x134>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	021b      	lsls	r3, r3, #8
 801436e:	4a1d      	ldr	r2, [pc, #116]	; (80143e4 <xPortStartScheduler+0x134>)
 8014370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014372:	4b1c      	ldr	r3, [pc, #112]	; (80143e4 <xPortStartScheduler+0x134>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801437a:	4a1a      	ldr	r2, [pc, #104]	; (80143e4 <xPortStartScheduler+0x134>)
 801437c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	b2da      	uxtb	r2, r3
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014386:	4b18      	ldr	r3, [pc, #96]	; (80143e8 <xPortStartScheduler+0x138>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	4a17      	ldr	r2, [pc, #92]	; (80143e8 <xPortStartScheduler+0x138>)
 801438c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014392:	4b15      	ldr	r3, [pc, #84]	; (80143e8 <xPortStartScheduler+0x138>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	4a14      	ldr	r2, [pc, #80]	; (80143e8 <xPortStartScheduler+0x138>)
 8014398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801439c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801439e:	f000 f8dd 	bl	801455c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80143a2:	4b12      	ldr	r3, [pc, #72]	; (80143ec <xPortStartScheduler+0x13c>)
 80143a4:	2200      	movs	r2, #0
 80143a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80143a8:	f000 f8fc 	bl	80145a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80143ac:	4b10      	ldr	r3, [pc, #64]	; (80143f0 <xPortStartScheduler+0x140>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	4a0f      	ldr	r2, [pc, #60]	; (80143f0 <xPortStartScheduler+0x140>)
 80143b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80143b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80143b8:	f7ff ff66 	bl	8014288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80143bc:	f7ff f854 	bl	8013468 <vTaskSwitchContext>
	prvTaskExitError();
 80143c0:	f7ff ff20 	bl	8014204 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80143c4:	2300      	movs	r3, #0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3718      	adds	r7, #24
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	e000ed00 	.word	0xe000ed00
 80143d4:	410fc271 	.word	0x410fc271
 80143d8:	410fc270 	.word	0x410fc270
 80143dc:	e000e400 	.word	0xe000e400
 80143e0:	20003120 	.word	0x20003120
 80143e4:	20003124 	.word	0x20003124
 80143e8:	e000ed20 	.word	0xe000ed20
 80143ec:	2000031c 	.word	0x2000031c
 80143f0:	e000ef34 	.word	0xe000ef34

080143f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80143f4:	b480      	push	{r7}
 80143f6:	b083      	sub	sp, #12
 80143f8:	af00      	add	r7, sp, #0
	__asm volatile
 80143fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143fe:	f383 8811 	msr	BASEPRI, r3
 8014402:	f3bf 8f6f 	isb	sy
 8014406:	f3bf 8f4f 	dsb	sy
 801440a:	607b      	str	r3, [r7, #4]
}
 801440c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801440e:	4b0f      	ldr	r3, [pc, #60]	; (801444c <vPortEnterCritical+0x58>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	3301      	adds	r3, #1
 8014414:	4a0d      	ldr	r2, [pc, #52]	; (801444c <vPortEnterCritical+0x58>)
 8014416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014418:	4b0c      	ldr	r3, [pc, #48]	; (801444c <vPortEnterCritical+0x58>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b01      	cmp	r3, #1
 801441e:	d10f      	bne.n	8014440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014420:	4b0b      	ldr	r3, [pc, #44]	; (8014450 <vPortEnterCritical+0x5c>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	b2db      	uxtb	r3, r3
 8014426:	2b00      	cmp	r3, #0
 8014428:	d00a      	beq.n	8014440 <vPortEnterCritical+0x4c>
	__asm volatile
 801442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801442e:	f383 8811 	msr	BASEPRI, r3
 8014432:	f3bf 8f6f 	isb	sy
 8014436:	f3bf 8f4f 	dsb	sy
 801443a:	603b      	str	r3, [r7, #0]
}
 801443c:	bf00      	nop
 801443e:	e7fe      	b.n	801443e <vPortEnterCritical+0x4a>
	}
}
 8014440:	bf00      	nop
 8014442:	370c      	adds	r7, #12
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr
 801444c:	2000031c 	.word	0x2000031c
 8014450:	e000ed04 	.word	0xe000ed04

08014454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801445a:	4b12      	ldr	r3, [pc, #72]	; (80144a4 <vPortExitCritical+0x50>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d10a      	bne.n	8014478 <vPortExitCritical+0x24>
	__asm volatile
 8014462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014466:	f383 8811 	msr	BASEPRI, r3
 801446a:	f3bf 8f6f 	isb	sy
 801446e:	f3bf 8f4f 	dsb	sy
 8014472:	607b      	str	r3, [r7, #4]
}
 8014474:	bf00      	nop
 8014476:	e7fe      	b.n	8014476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014478:	4b0a      	ldr	r3, [pc, #40]	; (80144a4 <vPortExitCritical+0x50>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	3b01      	subs	r3, #1
 801447e:	4a09      	ldr	r2, [pc, #36]	; (80144a4 <vPortExitCritical+0x50>)
 8014480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014482:	4b08      	ldr	r3, [pc, #32]	; (80144a4 <vPortExitCritical+0x50>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d105      	bne.n	8014496 <vPortExitCritical+0x42>
 801448a:	2300      	movs	r3, #0
 801448c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	f383 8811 	msr	BASEPRI, r3
}
 8014494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014496:	bf00      	nop
 8014498:	370c      	adds	r7, #12
 801449a:	46bd      	mov	sp, r7
 801449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a0:	4770      	bx	lr
 80144a2:	bf00      	nop
 80144a4:	2000031c 	.word	0x2000031c
	...

080144b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80144b0:	f3ef 8009 	mrs	r0, PSP
 80144b4:	f3bf 8f6f 	isb	sy
 80144b8:	4b15      	ldr	r3, [pc, #84]	; (8014510 <pxCurrentTCBConst>)
 80144ba:	681a      	ldr	r2, [r3, #0]
 80144bc:	f01e 0f10 	tst.w	lr, #16
 80144c0:	bf08      	it	eq
 80144c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80144c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ca:	6010      	str	r0, [r2, #0]
 80144cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80144d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80144d4:	f380 8811 	msr	BASEPRI, r0
 80144d8:	f3bf 8f4f 	dsb	sy
 80144dc:	f3bf 8f6f 	isb	sy
 80144e0:	f7fe ffc2 	bl	8013468 <vTaskSwitchContext>
 80144e4:	f04f 0000 	mov.w	r0, #0
 80144e8:	f380 8811 	msr	BASEPRI, r0
 80144ec:	bc09      	pop	{r0, r3}
 80144ee:	6819      	ldr	r1, [r3, #0]
 80144f0:	6808      	ldr	r0, [r1, #0]
 80144f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144f6:	f01e 0f10 	tst.w	lr, #16
 80144fa:	bf08      	it	eq
 80144fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014500:	f380 8809 	msr	PSP, r0
 8014504:	f3bf 8f6f 	isb	sy
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop
 801450c:	f3af 8000 	nop.w

08014510 <pxCurrentTCBConst>:
 8014510:	20002af4 	.word	0x20002af4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014514:	bf00      	nop
 8014516:	bf00      	nop

08014518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b082      	sub	sp, #8
 801451c:	af00      	add	r7, sp, #0
	__asm volatile
 801451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014522:	f383 8811 	msr	BASEPRI, r3
 8014526:	f3bf 8f6f 	isb	sy
 801452a:	f3bf 8f4f 	dsb	sy
 801452e:	607b      	str	r3, [r7, #4]
}
 8014530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014532:	f7fe fedf 	bl	80132f4 <xTaskIncrementTick>
 8014536:	4603      	mov	r3, r0
 8014538:	2b00      	cmp	r3, #0
 801453a:	d003      	beq.n	8014544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801453c:	4b06      	ldr	r3, [pc, #24]	; (8014558 <xPortSysTickHandler+0x40>)
 801453e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014542:	601a      	str	r2, [r3, #0]
 8014544:	2300      	movs	r3, #0
 8014546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	f383 8811 	msr	BASEPRI, r3
}
 801454e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014550:	bf00      	nop
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	e000ed04 	.word	0xe000ed04

0801455c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801455c:	b480      	push	{r7}
 801455e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014560:	4b0b      	ldr	r3, [pc, #44]	; (8014590 <vPortSetupTimerInterrupt+0x34>)
 8014562:	2200      	movs	r2, #0
 8014564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014566:	4b0b      	ldr	r3, [pc, #44]	; (8014594 <vPortSetupTimerInterrupt+0x38>)
 8014568:	2200      	movs	r2, #0
 801456a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801456c:	4b0a      	ldr	r3, [pc, #40]	; (8014598 <vPortSetupTimerInterrupt+0x3c>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	4a0a      	ldr	r2, [pc, #40]	; (801459c <vPortSetupTimerInterrupt+0x40>)
 8014572:	fba2 2303 	umull	r2, r3, r2, r3
 8014576:	099b      	lsrs	r3, r3, #6
 8014578:	4a09      	ldr	r2, [pc, #36]	; (80145a0 <vPortSetupTimerInterrupt+0x44>)
 801457a:	3b01      	subs	r3, #1
 801457c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801457e:	4b04      	ldr	r3, [pc, #16]	; (8014590 <vPortSetupTimerInterrupt+0x34>)
 8014580:	2207      	movs	r2, #7
 8014582:	601a      	str	r2, [r3, #0]
}
 8014584:	bf00      	nop
 8014586:	46bd      	mov	sp, r7
 8014588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458c:	4770      	bx	lr
 801458e:	bf00      	nop
 8014590:	e000e010 	.word	0xe000e010
 8014594:	e000e018 	.word	0xe000e018
 8014598:	20000310 	.word	0x20000310
 801459c:	10624dd3 	.word	0x10624dd3
 80145a0:	e000e014 	.word	0xe000e014

080145a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80145a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80145b4 <vPortEnableVFP+0x10>
 80145a8:	6801      	ldr	r1, [r0, #0]
 80145aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80145ae:	6001      	str	r1, [r0, #0]
 80145b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80145b2:	bf00      	nop
 80145b4:	e000ed88 	.word	0xe000ed88

080145b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80145b8:	b480      	push	{r7}
 80145ba:	b085      	sub	sp, #20
 80145bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80145be:	f3ef 8305 	mrs	r3, IPSR
 80145c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	2b0f      	cmp	r3, #15
 80145c8:	d914      	bls.n	80145f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80145ca:	4a17      	ldr	r2, [pc, #92]	; (8014628 <vPortValidateInterruptPriority+0x70>)
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	4413      	add	r3, r2
 80145d0:	781b      	ldrb	r3, [r3, #0]
 80145d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80145d4:	4b15      	ldr	r3, [pc, #84]	; (801462c <vPortValidateInterruptPriority+0x74>)
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	7afa      	ldrb	r2, [r7, #11]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d20a      	bcs.n	80145f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80145de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e2:	f383 8811 	msr	BASEPRI, r3
 80145e6:	f3bf 8f6f 	isb	sy
 80145ea:	f3bf 8f4f 	dsb	sy
 80145ee:	607b      	str	r3, [r7, #4]
}
 80145f0:	bf00      	nop
 80145f2:	e7fe      	b.n	80145f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80145f4:	4b0e      	ldr	r3, [pc, #56]	; (8014630 <vPortValidateInterruptPriority+0x78>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80145fc:	4b0d      	ldr	r3, [pc, #52]	; (8014634 <vPortValidateInterruptPriority+0x7c>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	429a      	cmp	r2, r3
 8014602:	d90a      	bls.n	801461a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014608:	f383 8811 	msr	BASEPRI, r3
 801460c:	f3bf 8f6f 	isb	sy
 8014610:	f3bf 8f4f 	dsb	sy
 8014614:	603b      	str	r3, [r7, #0]
}
 8014616:	bf00      	nop
 8014618:	e7fe      	b.n	8014618 <vPortValidateInterruptPriority+0x60>
	}
 801461a:	bf00      	nop
 801461c:	3714      	adds	r7, #20
 801461e:	46bd      	mov	sp, r7
 8014620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014624:	4770      	bx	lr
 8014626:	bf00      	nop
 8014628:	e000e3f0 	.word	0xe000e3f0
 801462c:	20003120 	.word	0x20003120
 8014630:	e000ed0c 	.word	0xe000ed0c
 8014634:	20003124 	.word	0x20003124

08014638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b08a      	sub	sp, #40	; 0x28
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014640:	2300      	movs	r3, #0
 8014642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014644:	f7fe fd9a 	bl	801317c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014648:	4b5b      	ldr	r3, [pc, #364]	; (80147b8 <pvPortMalloc+0x180>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d101      	bne.n	8014654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014650:	f000 f92c 	bl	80148ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014654:	4b59      	ldr	r3, [pc, #356]	; (80147bc <pvPortMalloc+0x184>)
 8014656:	681a      	ldr	r2, [r3, #0]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	4013      	ands	r3, r2
 801465c:	2b00      	cmp	r3, #0
 801465e:	f040 8093 	bne.w	8014788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d01d      	beq.n	80146a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014668:	2208      	movs	r2, #8
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	4413      	add	r3, r2
 801466e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	f003 0307 	and.w	r3, r3, #7
 8014676:	2b00      	cmp	r3, #0
 8014678:	d014      	beq.n	80146a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f023 0307 	bic.w	r3, r3, #7
 8014680:	3308      	adds	r3, #8
 8014682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f003 0307 	and.w	r3, r3, #7
 801468a:	2b00      	cmp	r3, #0
 801468c:	d00a      	beq.n	80146a4 <pvPortMalloc+0x6c>
	__asm volatile
 801468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014692:	f383 8811 	msr	BASEPRI, r3
 8014696:	f3bf 8f6f 	isb	sy
 801469a:	f3bf 8f4f 	dsb	sy
 801469e:	617b      	str	r3, [r7, #20]
}
 80146a0:	bf00      	nop
 80146a2:	e7fe      	b.n	80146a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d06e      	beq.n	8014788 <pvPortMalloc+0x150>
 80146aa:	4b45      	ldr	r3, [pc, #276]	; (80147c0 <pvPortMalloc+0x188>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d869      	bhi.n	8014788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80146b4:	4b43      	ldr	r3, [pc, #268]	; (80147c4 <pvPortMalloc+0x18c>)
 80146b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80146b8:	4b42      	ldr	r3, [pc, #264]	; (80147c4 <pvPortMalloc+0x18c>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146be:	e004      	b.n	80146ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80146c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80146c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146cc:	685b      	ldr	r3, [r3, #4]
 80146ce:	687a      	ldr	r2, [r7, #4]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	d903      	bls.n	80146dc <pvPortMalloc+0xa4>
 80146d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d1f1      	bne.n	80146c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80146dc:	4b36      	ldr	r3, [pc, #216]	; (80147b8 <pvPortMalloc+0x180>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d050      	beq.n	8014788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80146e6:	6a3b      	ldr	r3, [r7, #32]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	2208      	movs	r2, #8
 80146ec:	4413      	add	r3, r2
 80146ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80146f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f2:	681a      	ldr	r2, [r3, #0]
 80146f4:	6a3b      	ldr	r3, [r7, #32]
 80146f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80146f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146fa:	685a      	ldr	r2, [r3, #4]
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	1ad2      	subs	r2, r2, r3
 8014700:	2308      	movs	r3, #8
 8014702:	005b      	lsls	r3, r3, #1
 8014704:	429a      	cmp	r2, r3
 8014706:	d91f      	bls.n	8014748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	4413      	add	r3, r2
 801470e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014710:	69bb      	ldr	r3, [r7, #24]
 8014712:	f003 0307 	and.w	r3, r3, #7
 8014716:	2b00      	cmp	r3, #0
 8014718:	d00a      	beq.n	8014730 <pvPortMalloc+0xf8>
	__asm volatile
 801471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801471e:	f383 8811 	msr	BASEPRI, r3
 8014722:	f3bf 8f6f 	isb	sy
 8014726:	f3bf 8f4f 	dsb	sy
 801472a:	613b      	str	r3, [r7, #16]
}
 801472c:	bf00      	nop
 801472e:	e7fe      	b.n	801472e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014732:	685a      	ldr	r2, [r3, #4]
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	1ad2      	subs	r2, r2, r3
 8014738:	69bb      	ldr	r3, [r7, #24]
 801473a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473e:	687a      	ldr	r2, [r7, #4]
 8014740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014742:	69b8      	ldr	r0, [r7, #24]
 8014744:	f000 f914 	bl	8014970 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014748:	4b1d      	ldr	r3, [pc, #116]	; (80147c0 <pvPortMalloc+0x188>)
 801474a:	681a      	ldr	r2, [r3, #0]
 801474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474e:	685b      	ldr	r3, [r3, #4]
 8014750:	1ad3      	subs	r3, r2, r3
 8014752:	4a1b      	ldr	r2, [pc, #108]	; (80147c0 <pvPortMalloc+0x188>)
 8014754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014756:	4b1a      	ldr	r3, [pc, #104]	; (80147c0 <pvPortMalloc+0x188>)
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	4b1b      	ldr	r3, [pc, #108]	; (80147c8 <pvPortMalloc+0x190>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	429a      	cmp	r2, r3
 8014760:	d203      	bcs.n	801476a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014762:	4b17      	ldr	r3, [pc, #92]	; (80147c0 <pvPortMalloc+0x188>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	4a18      	ldr	r2, [pc, #96]	; (80147c8 <pvPortMalloc+0x190>)
 8014768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476c:	685a      	ldr	r2, [r3, #4]
 801476e:	4b13      	ldr	r3, [pc, #76]	; (80147bc <pvPortMalloc+0x184>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	431a      	orrs	r2, r3
 8014774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801477a:	2200      	movs	r2, #0
 801477c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801477e:	4b13      	ldr	r3, [pc, #76]	; (80147cc <pvPortMalloc+0x194>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	3301      	adds	r3, #1
 8014784:	4a11      	ldr	r2, [pc, #68]	; (80147cc <pvPortMalloc+0x194>)
 8014786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014788:	f7fe fd06 	bl	8013198 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801478c:	69fb      	ldr	r3, [r7, #28]
 801478e:	f003 0307 	and.w	r3, r3, #7
 8014792:	2b00      	cmp	r3, #0
 8014794:	d00a      	beq.n	80147ac <pvPortMalloc+0x174>
	__asm volatile
 8014796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801479a:	f383 8811 	msr	BASEPRI, r3
 801479e:	f3bf 8f6f 	isb	sy
 80147a2:	f3bf 8f4f 	dsb	sy
 80147a6:	60fb      	str	r3, [r7, #12]
}
 80147a8:	bf00      	nop
 80147aa:	e7fe      	b.n	80147aa <pvPortMalloc+0x172>
	return pvReturn;
 80147ac:	69fb      	ldr	r3, [r7, #28]
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3728      	adds	r7, #40	; 0x28
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	20006d30 	.word	0x20006d30
 80147bc:	20006d44 	.word	0x20006d44
 80147c0:	20006d34 	.word	0x20006d34
 80147c4:	20006d28 	.word	0x20006d28
 80147c8:	20006d38 	.word	0x20006d38
 80147cc:	20006d3c 	.word	0x20006d3c

080147d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b086      	sub	sp, #24
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d04d      	beq.n	801487e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80147e2:	2308      	movs	r3, #8
 80147e4:	425b      	negs	r3, r3
 80147e6:	697a      	ldr	r2, [r7, #20]
 80147e8:	4413      	add	r3, r2
 80147ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80147f0:	693b      	ldr	r3, [r7, #16]
 80147f2:	685a      	ldr	r2, [r3, #4]
 80147f4:	4b24      	ldr	r3, [pc, #144]	; (8014888 <vPortFree+0xb8>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	4013      	ands	r3, r2
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d10a      	bne.n	8014814 <vPortFree+0x44>
	__asm volatile
 80147fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014802:	f383 8811 	msr	BASEPRI, r3
 8014806:	f3bf 8f6f 	isb	sy
 801480a:	f3bf 8f4f 	dsb	sy
 801480e:	60fb      	str	r3, [r7, #12]
}
 8014810:	bf00      	nop
 8014812:	e7fe      	b.n	8014812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014814:	693b      	ldr	r3, [r7, #16]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d00a      	beq.n	8014832 <vPortFree+0x62>
	__asm volatile
 801481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014820:	f383 8811 	msr	BASEPRI, r3
 8014824:	f3bf 8f6f 	isb	sy
 8014828:	f3bf 8f4f 	dsb	sy
 801482c:	60bb      	str	r3, [r7, #8]
}
 801482e:	bf00      	nop
 8014830:	e7fe      	b.n	8014830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014832:	693b      	ldr	r3, [r7, #16]
 8014834:	685a      	ldr	r2, [r3, #4]
 8014836:	4b14      	ldr	r3, [pc, #80]	; (8014888 <vPortFree+0xb8>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	4013      	ands	r3, r2
 801483c:	2b00      	cmp	r3, #0
 801483e:	d01e      	beq.n	801487e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d11a      	bne.n	801487e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	685a      	ldr	r2, [r3, #4]
 801484c:	4b0e      	ldr	r3, [pc, #56]	; (8014888 <vPortFree+0xb8>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	43db      	mvns	r3, r3
 8014852:	401a      	ands	r2, r3
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014858:	f7fe fc90 	bl	801317c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801485c:	693b      	ldr	r3, [r7, #16]
 801485e:	685a      	ldr	r2, [r3, #4]
 8014860:	4b0a      	ldr	r3, [pc, #40]	; (801488c <vPortFree+0xbc>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	4413      	add	r3, r2
 8014866:	4a09      	ldr	r2, [pc, #36]	; (801488c <vPortFree+0xbc>)
 8014868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801486a:	6938      	ldr	r0, [r7, #16]
 801486c:	f000 f880 	bl	8014970 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014870:	4b07      	ldr	r3, [pc, #28]	; (8014890 <vPortFree+0xc0>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	3301      	adds	r3, #1
 8014876:	4a06      	ldr	r2, [pc, #24]	; (8014890 <vPortFree+0xc0>)
 8014878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801487a:	f7fe fc8d 	bl	8013198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801487e:	bf00      	nop
 8014880:	3718      	adds	r7, #24
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	20006d44 	.word	0x20006d44
 801488c:	20006d34 	.word	0x20006d34
 8014890:	20006d40 	.word	0x20006d40

08014894 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8014894:	b480      	push	{r7}
 8014896:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8014898:	4b03      	ldr	r3, [pc, #12]	; (80148a8 <xPortGetFreeHeapSize+0x14>)
 801489a:	681b      	ldr	r3, [r3, #0]
}
 801489c:	4618      	mov	r0, r3
 801489e:	46bd      	mov	sp, r7
 80148a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a4:	4770      	bx	lr
 80148a6:	bf00      	nop
 80148a8:	20006d34 	.word	0x20006d34

080148ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80148ac:	b480      	push	{r7}
 80148ae:	b085      	sub	sp, #20
 80148b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80148b2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80148b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80148b8:	4b27      	ldr	r3, [pc, #156]	; (8014958 <prvHeapInit+0xac>)
 80148ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	f003 0307 	and.w	r3, r3, #7
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d00c      	beq.n	80148e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	3307      	adds	r3, #7
 80148ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	f023 0307 	bic.w	r3, r3, #7
 80148d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80148d4:	68ba      	ldr	r2, [r7, #8]
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	1ad3      	subs	r3, r2, r3
 80148da:	4a1f      	ldr	r2, [pc, #124]	; (8014958 <prvHeapInit+0xac>)
 80148dc:	4413      	add	r3, r2
 80148de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80148e4:	4a1d      	ldr	r2, [pc, #116]	; (801495c <prvHeapInit+0xb0>)
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80148ea:	4b1c      	ldr	r3, [pc, #112]	; (801495c <prvHeapInit+0xb0>)
 80148ec:	2200      	movs	r2, #0
 80148ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	68ba      	ldr	r2, [r7, #8]
 80148f4:	4413      	add	r3, r2
 80148f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80148f8:	2208      	movs	r2, #8
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	1a9b      	subs	r3, r3, r2
 80148fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f023 0307 	bic.w	r3, r3, #7
 8014906:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	4a15      	ldr	r2, [pc, #84]	; (8014960 <prvHeapInit+0xb4>)
 801490c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801490e:	4b14      	ldr	r3, [pc, #80]	; (8014960 <prvHeapInit+0xb4>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2200      	movs	r2, #0
 8014914:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014916:	4b12      	ldr	r3, [pc, #72]	; (8014960 <prvHeapInit+0xb4>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	2200      	movs	r2, #0
 801491c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	68fa      	ldr	r2, [r7, #12]
 8014926:	1ad2      	subs	r2, r2, r3
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801492c:	4b0c      	ldr	r3, [pc, #48]	; (8014960 <prvHeapInit+0xb4>)
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	4a0a      	ldr	r2, [pc, #40]	; (8014964 <prvHeapInit+0xb8>)
 801493a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	685b      	ldr	r3, [r3, #4]
 8014940:	4a09      	ldr	r2, [pc, #36]	; (8014968 <prvHeapInit+0xbc>)
 8014942:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014944:	4b09      	ldr	r3, [pc, #36]	; (801496c <prvHeapInit+0xc0>)
 8014946:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801494a:	601a      	str	r2, [r3, #0]
}
 801494c:	bf00      	nop
 801494e:	3714      	adds	r7, #20
 8014950:	46bd      	mov	sp, r7
 8014952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014956:	4770      	bx	lr
 8014958:	20003128 	.word	0x20003128
 801495c:	20006d28 	.word	0x20006d28
 8014960:	20006d30 	.word	0x20006d30
 8014964:	20006d38 	.word	0x20006d38
 8014968:	20006d34 	.word	0x20006d34
 801496c:	20006d44 	.word	0x20006d44

08014970 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014970:	b480      	push	{r7}
 8014972:	b085      	sub	sp, #20
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014978:	4b28      	ldr	r3, [pc, #160]	; (8014a1c <prvInsertBlockIntoFreeList+0xac>)
 801497a:	60fb      	str	r3, [r7, #12]
 801497c:	e002      	b.n	8014984 <prvInsertBlockIntoFreeList+0x14>
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	60fb      	str	r3, [r7, #12]
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	687a      	ldr	r2, [r7, #4]
 801498a:	429a      	cmp	r2, r3
 801498c:	d8f7      	bhi.n	801497e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	685b      	ldr	r3, [r3, #4]
 8014996:	68ba      	ldr	r2, [r7, #8]
 8014998:	4413      	add	r3, r2
 801499a:	687a      	ldr	r2, [r7, #4]
 801499c:	429a      	cmp	r2, r3
 801499e:	d108      	bne.n	80149b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	685a      	ldr	r2, [r3, #4]
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	441a      	add	r2, r3
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	68ba      	ldr	r2, [r7, #8]
 80149bc:	441a      	add	r2, r3
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d118      	bne.n	80149f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	4b15      	ldr	r3, [pc, #84]	; (8014a20 <prvInsertBlockIntoFreeList+0xb0>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d00d      	beq.n	80149ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	685a      	ldr	r2, [r3, #4]
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	685b      	ldr	r3, [r3, #4]
 80149dc:	441a      	add	r2, r3
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	681a      	ldr	r2, [r3, #0]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	601a      	str	r2, [r3, #0]
 80149ec:	e008      	b.n	8014a00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80149ee:	4b0c      	ldr	r3, [pc, #48]	; (8014a20 <prvInsertBlockIntoFreeList+0xb0>)
 80149f0:	681a      	ldr	r2, [r3, #0]
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	601a      	str	r2, [r3, #0]
 80149f6:	e003      	b.n	8014a00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	681a      	ldr	r2, [r3, #0]
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014a00:	68fa      	ldr	r2, [r7, #12]
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d002      	beq.n	8014a0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	687a      	ldr	r2, [r7, #4]
 8014a0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014a0e:	bf00      	nop
 8014a10:	3714      	adds	r7, #20
 8014a12:	46bd      	mov	sp, r7
 8014a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a18:	4770      	bx	lr
 8014a1a:	bf00      	nop
 8014a1c:	20006d28 	.word	0x20006d28
 8014a20:	20006d30 	.word	0x20006d30

08014a24 <__errno>:
 8014a24:	4b01      	ldr	r3, [pc, #4]	; (8014a2c <__errno+0x8>)
 8014a26:	6818      	ldr	r0, [r3, #0]
 8014a28:	4770      	bx	lr
 8014a2a:	bf00      	nop
 8014a2c:	20000320 	.word	0x20000320

08014a30 <__libc_init_array>:
 8014a30:	b570      	push	{r4, r5, r6, lr}
 8014a32:	4d0d      	ldr	r5, [pc, #52]	; (8014a68 <__libc_init_array+0x38>)
 8014a34:	4c0d      	ldr	r4, [pc, #52]	; (8014a6c <__libc_init_array+0x3c>)
 8014a36:	1b64      	subs	r4, r4, r5
 8014a38:	10a4      	asrs	r4, r4, #2
 8014a3a:	2600      	movs	r6, #0
 8014a3c:	42a6      	cmp	r6, r4
 8014a3e:	d109      	bne.n	8014a54 <__libc_init_array+0x24>
 8014a40:	4d0b      	ldr	r5, [pc, #44]	; (8014a70 <__libc_init_array+0x40>)
 8014a42:	4c0c      	ldr	r4, [pc, #48]	; (8014a74 <__libc_init_array+0x44>)
 8014a44:	f003 fbd4 	bl	80181f0 <_init>
 8014a48:	1b64      	subs	r4, r4, r5
 8014a4a:	10a4      	asrs	r4, r4, #2
 8014a4c:	2600      	movs	r6, #0
 8014a4e:	42a6      	cmp	r6, r4
 8014a50:	d105      	bne.n	8014a5e <__libc_init_array+0x2e>
 8014a52:	bd70      	pop	{r4, r5, r6, pc}
 8014a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a58:	4798      	blx	r3
 8014a5a:	3601      	adds	r6, #1
 8014a5c:	e7ee      	b.n	8014a3c <__libc_init_array+0xc>
 8014a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a62:	4798      	blx	r3
 8014a64:	3601      	adds	r6, #1
 8014a66:	e7f2      	b.n	8014a4e <__libc_init_array+0x1e>
 8014a68:	0801aad0 	.word	0x0801aad0
 8014a6c:	0801aad0 	.word	0x0801aad0
 8014a70:	0801aad0 	.word	0x0801aad0
 8014a74:	0801aad4 	.word	0x0801aad4

08014a78 <isprint>:
 8014a78:	4b02      	ldr	r3, [pc, #8]	; (8014a84 <isprint+0xc>)
 8014a7a:	4418      	add	r0, r3
 8014a7c:	7840      	ldrb	r0, [r0, #1]
 8014a7e:	f000 0097 	and.w	r0, r0, #151	; 0x97
 8014a82:	4770      	bx	lr
 8014a84:	0801a70a 	.word	0x0801a70a

08014a88 <malloc>:
 8014a88:	4b02      	ldr	r3, [pc, #8]	; (8014a94 <malloc+0xc>)
 8014a8a:	4601      	mov	r1, r0
 8014a8c:	6818      	ldr	r0, [r3, #0]
 8014a8e:	f000 b88d 	b.w	8014bac <_malloc_r>
 8014a92:	bf00      	nop
 8014a94:	20000320 	.word	0x20000320

08014a98 <free>:
 8014a98:	4b02      	ldr	r3, [pc, #8]	; (8014aa4 <free+0xc>)
 8014a9a:	4601      	mov	r1, r0
 8014a9c:	6818      	ldr	r0, [r3, #0]
 8014a9e:	f000 b819 	b.w	8014ad4 <_free_r>
 8014aa2:	bf00      	nop
 8014aa4:	20000320 	.word	0x20000320

08014aa8 <memcpy>:
 8014aa8:	440a      	add	r2, r1
 8014aaa:	4291      	cmp	r1, r2
 8014aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8014ab0:	d100      	bne.n	8014ab4 <memcpy+0xc>
 8014ab2:	4770      	bx	lr
 8014ab4:	b510      	push	{r4, lr}
 8014ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014abe:	4291      	cmp	r1, r2
 8014ac0:	d1f9      	bne.n	8014ab6 <memcpy+0xe>
 8014ac2:	bd10      	pop	{r4, pc}

08014ac4 <memset>:
 8014ac4:	4402      	add	r2, r0
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	4293      	cmp	r3, r2
 8014aca:	d100      	bne.n	8014ace <memset+0xa>
 8014acc:	4770      	bx	lr
 8014ace:	f803 1b01 	strb.w	r1, [r3], #1
 8014ad2:	e7f9      	b.n	8014ac8 <memset+0x4>

08014ad4 <_free_r>:
 8014ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ad6:	2900      	cmp	r1, #0
 8014ad8:	d044      	beq.n	8014b64 <_free_r+0x90>
 8014ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ade:	9001      	str	r0, [sp, #4]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	f1a1 0404 	sub.w	r4, r1, #4
 8014ae6:	bfb8      	it	lt
 8014ae8:	18e4      	addlt	r4, r4, r3
 8014aea:	f001 fc99 	bl	8016420 <__malloc_lock>
 8014aee:	4a1e      	ldr	r2, [pc, #120]	; (8014b68 <_free_r+0x94>)
 8014af0:	9801      	ldr	r0, [sp, #4]
 8014af2:	6813      	ldr	r3, [r2, #0]
 8014af4:	b933      	cbnz	r3, 8014b04 <_free_r+0x30>
 8014af6:	6063      	str	r3, [r4, #4]
 8014af8:	6014      	str	r4, [r2, #0]
 8014afa:	b003      	add	sp, #12
 8014afc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b00:	f001 bc94 	b.w	801642c <__malloc_unlock>
 8014b04:	42a3      	cmp	r3, r4
 8014b06:	d908      	bls.n	8014b1a <_free_r+0x46>
 8014b08:	6825      	ldr	r5, [r4, #0]
 8014b0a:	1961      	adds	r1, r4, r5
 8014b0c:	428b      	cmp	r3, r1
 8014b0e:	bf01      	itttt	eq
 8014b10:	6819      	ldreq	r1, [r3, #0]
 8014b12:	685b      	ldreq	r3, [r3, #4]
 8014b14:	1949      	addeq	r1, r1, r5
 8014b16:	6021      	streq	r1, [r4, #0]
 8014b18:	e7ed      	b.n	8014af6 <_free_r+0x22>
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	685b      	ldr	r3, [r3, #4]
 8014b1e:	b10b      	cbz	r3, 8014b24 <_free_r+0x50>
 8014b20:	42a3      	cmp	r3, r4
 8014b22:	d9fa      	bls.n	8014b1a <_free_r+0x46>
 8014b24:	6811      	ldr	r1, [r2, #0]
 8014b26:	1855      	adds	r5, r2, r1
 8014b28:	42a5      	cmp	r5, r4
 8014b2a:	d10b      	bne.n	8014b44 <_free_r+0x70>
 8014b2c:	6824      	ldr	r4, [r4, #0]
 8014b2e:	4421      	add	r1, r4
 8014b30:	1854      	adds	r4, r2, r1
 8014b32:	42a3      	cmp	r3, r4
 8014b34:	6011      	str	r1, [r2, #0]
 8014b36:	d1e0      	bne.n	8014afa <_free_r+0x26>
 8014b38:	681c      	ldr	r4, [r3, #0]
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	6053      	str	r3, [r2, #4]
 8014b3e:	4421      	add	r1, r4
 8014b40:	6011      	str	r1, [r2, #0]
 8014b42:	e7da      	b.n	8014afa <_free_r+0x26>
 8014b44:	d902      	bls.n	8014b4c <_free_r+0x78>
 8014b46:	230c      	movs	r3, #12
 8014b48:	6003      	str	r3, [r0, #0]
 8014b4a:	e7d6      	b.n	8014afa <_free_r+0x26>
 8014b4c:	6825      	ldr	r5, [r4, #0]
 8014b4e:	1961      	adds	r1, r4, r5
 8014b50:	428b      	cmp	r3, r1
 8014b52:	bf04      	itt	eq
 8014b54:	6819      	ldreq	r1, [r3, #0]
 8014b56:	685b      	ldreq	r3, [r3, #4]
 8014b58:	6063      	str	r3, [r4, #4]
 8014b5a:	bf04      	itt	eq
 8014b5c:	1949      	addeq	r1, r1, r5
 8014b5e:	6021      	streq	r1, [r4, #0]
 8014b60:	6054      	str	r4, [r2, #4]
 8014b62:	e7ca      	b.n	8014afa <_free_r+0x26>
 8014b64:	b003      	add	sp, #12
 8014b66:	bd30      	pop	{r4, r5, pc}
 8014b68:	20006d48 	.word	0x20006d48

08014b6c <sbrk_aligned>:
 8014b6c:	b570      	push	{r4, r5, r6, lr}
 8014b6e:	4e0e      	ldr	r6, [pc, #56]	; (8014ba8 <sbrk_aligned+0x3c>)
 8014b70:	460c      	mov	r4, r1
 8014b72:	6831      	ldr	r1, [r6, #0]
 8014b74:	4605      	mov	r5, r0
 8014b76:	b911      	cbnz	r1, 8014b7e <sbrk_aligned+0x12>
 8014b78:	f000 fcf6 	bl	8015568 <_sbrk_r>
 8014b7c:	6030      	str	r0, [r6, #0]
 8014b7e:	4621      	mov	r1, r4
 8014b80:	4628      	mov	r0, r5
 8014b82:	f000 fcf1 	bl	8015568 <_sbrk_r>
 8014b86:	1c43      	adds	r3, r0, #1
 8014b88:	d00a      	beq.n	8014ba0 <sbrk_aligned+0x34>
 8014b8a:	1cc4      	adds	r4, r0, #3
 8014b8c:	f024 0403 	bic.w	r4, r4, #3
 8014b90:	42a0      	cmp	r0, r4
 8014b92:	d007      	beq.n	8014ba4 <sbrk_aligned+0x38>
 8014b94:	1a21      	subs	r1, r4, r0
 8014b96:	4628      	mov	r0, r5
 8014b98:	f000 fce6 	bl	8015568 <_sbrk_r>
 8014b9c:	3001      	adds	r0, #1
 8014b9e:	d101      	bne.n	8014ba4 <sbrk_aligned+0x38>
 8014ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	bd70      	pop	{r4, r5, r6, pc}
 8014ba8:	20006d4c 	.word	0x20006d4c

08014bac <_malloc_r>:
 8014bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb0:	1ccd      	adds	r5, r1, #3
 8014bb2:	f025 0503 	bic.w	r5, r5, #3
 8014bb6:	3508      	adds	r5, #8
 8014bb8:	2d0c      	cmp	r5, #12
 8014bba:	bf38      	it	cc
 8014bbc:	250c      	movcc	r5, #12
 8014bbe:	2d00      	cmp	r5, #0
 8014bc0:	4607      	mov	r7, r0
 8014bc2:	db01      	blt.n	8014bc8 <_malloc_r+0x1c>
 8014bc4:	42a9      	cmp	r1, r5
 8014bc6:	d905      	bls.n	8014bd4 <_malloc_r+0x28>
 8014bc8:	230c      	movs	r3, #12
 8014bca:	603b      	str	r3, [r7, #0]
 8014bcc:	2600      	movs	r6, #0
 8014bce:	4630      	mov	r0, r6
 8014bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd4:	4e2e      	ldr	r6, [pc, #184]	; (8014c90 <_malloc_r+0xe4>)
 8014bd6:	f001 fc23 	bl	8016420 <__malloc_lock>
 8014bda:	6833      	ldr	r3, [r6, #0]
 8014bdc:	461c      	mov	r4, r3
 8014bde:	bb34      	cbnz	r4, 8014c2e <_malloc_r+0x82>
 8014be0:	4629      	mov	r1, r5
 8014be2:	4638      	mov	r0, r7
 8014be4:	f7ff ffc2 	bl	8014b6c <sbrk_aligned>
 8014be8:	1c43      	adds	r3, r0, #1
 8014bea:	4604      	mov	r4, r0
 8014bec:	d14d      	bne.n	8014c8a <_malloc_r+0xde>
 8014bee:	6834      	ldr	r4, [r6, #0]
 8014bf0:	4626      	mov	r6, r4
 8014bf2:	2e00      	cmp	r6, #0
 8014bf4:	d140      	bne.n	8014c78 <_malloc_r+0xcc>
 8014bf6:	6823      	ldr	r3, [r4, #0]
 8014bf8:	4631      	mov	r1, r6
 8014bfa:	4638      	mov	r0, r7
 8014bfc:	eb04 0803 	add.w	r8, r4, r3
 8014c00:	f000 fcb2 	bl	8015568 <_sbrk_r>
 8014c04:	4580      	cmp	r8, r0
 8014c06:	d13a      	bne.n	8014c7e <_malloc_r+0xd2>
 8014c08:	6821      	ldr	r1, [r4, #0]
 8014c0a:	3503      	adds	r5, #3
 8014c0c:	1a6d      	subs	r5, r5, r1
 8014c0e:	f025 0503 	bic.w	r5, r5, #3
 8014c12:	3508      	adds	r5, #8
 8014c14:	2d0c      	cmp	r5, #12
 8014c16:	bf38      	it	cc
 8014c18:	250c      	movcc	r5, #12
 8014c1a:	4629      	mov	r1, r5
 8014c1c:	4638      	mov	r0, r7
 8014c1e:	f7ff ffa5 	bl	8014b6c <sbrk_aligned>
 8014c22:	3001      	adds	r0, #1
 8014c24:	d02b      	beq.n	8014c7e <_malloc_r+0xd2>
 8014c26:	6823      	ldr	r3, [r4, #0]
 8014c28:	442b      	add	r3, r5
 8014c2a:	6023      	str	r3, [r4, #0]
 8014c2c:	e00e      	b.n	8014c4c <_malloc_r+0xa0>
 8014c2e:	6822      	ldr	r2, [r4, #0]
 8014c30:	1b52      	subs	r2, r2, r5
 8014c32:	d41e      	bmi.n	8014c72 <_malloc_r+0xc6>
 8014c34:	2a0b      	cmp	r2, #11
 8014c36:	d916      	bls.n	8014c66 <_malloc_r+0xba>
 8014c38:	1961      	adds	r1, r4, r5
 8014c3a:	42a3      	cmp	r3, r4
 8014c3c:	6025      	str	r5, [r4, #0]
 8014c3e:	bf18      	it	ne
 8014c40:	6059      	strne	r1, [r3, #4]
 8014c42:	6863      	ldr	r3, [r4, #4]
 8014c44:	bf08      	it	eq
 8014c46:	6031      	streq	r1, [r6, #0]
 8014c48:	5162      	str	r2, [r4, r5]
 8014c4a:	604b      	str	r3, [r1, #4]
 8014c4c:	4638      	mov	r0, r7
 8014c4e:	f104 060b 	add.w	r6, r4, #11
 8014c52:	f001 fbeb 	bl	801642c <__malloc_unlock>
 8014c56:	f026 0607 	bic.w	r6, r6, #7
 8014c5a:	1d23      	adds	r3, r4, #4
 8014c5c:	1af2      	subs	r2, r6, r3
 8014c5e:	d0b6      	beq.n	8014bce <_malloc_r+0x22>
 8014c60:	1b9b      	subs	r3, r3, r6
 8014c62:	50a3      	str	r3, [r4, r2]
 8014c64:	e7b3      	b.n	8014bce <_malloc_r+0x22>
 8014c66:	6862      	ldr	r2, [r4, #4]
 8014c68:	42a3      	cmp	r3, r4
 8014c6a:	bf0c      	ite	eq
 8014c6c:	6032      	streq	r2, [r6, #0]
 8014c6e:	605a      	strne	r2, [r3, #4]
 8014c70:	e7ec      	b.n	8014c4c <_malloc_r+0xa0>
 8014c72:	4623      	mov	r3, r4
 8014c74:	6864      	ldr	r4, [r4, #4]
 8014c76:	e7b2      	b.n	8014bde <_malloc_r+0x32>
 8014c78:	4634      	mov	r4, r6
 8014c7a:	6876      	ldr	r6, [r6, #4]
 8014c7c:	e7b9      	b.n	8014bf2 <_malloc_r+0x46>
 8014c7e:	230c      	movs	r3, #12
 8014c80:	603b      	str	r3, [r7, #0]
 8014c82:	4638      	mov	r0, r7
 8014c84:	f001 fbd2 	bl	801642c <__malloc_unlock>
 8014c88:	e7a1      	b.n	8014bce <_malloc_r+0x22>
 8014c8a:	6025      	str	r5, [r4, #0]
 8014c8c:	e7de      	b.n	8014c4c <_malloc_r+0xa0>
 8014c8e:	bf00      	nop
 8014c90:	20006d48 	.word	0x20006d48

08014c94 <__cvt>:
 8014c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c98:	ec55 4b10 	vmov	r4, r5, d0
 8014c9c:	2d00      	cmp	r5, #0
 8014c9e:	460e      	mov	r6, r1
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	462b      	mov	r3, r5
 8014ca4:	bfbb      	ittet	lt
 8014ca6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014caa:	461d      	movlt	r5, r3
 8014cac:	2300      	movge	r3, #0
 8014cae:	232d      	movlt	r3, #45	; 0x2d
 8014cb0:	700b      	strb	r3, [r1, #0]
 8014cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014cb8:	4691      	mov	r9, r2
 8014cba:	f023 0820 	bic.w	r8, r3, #32
 8014cbe:	bfbc      	itt	lt
 8014cc0:	4622      	movlt	r2, r4
 8014cc2:	4614      	movlt	r4, r2
 8014cc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014cc8:	d005      	beq.n	8014cd6 <__cvt+0x42>
 8014cca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014cce:	d100      	bne.n	8014cd2 <__cvt+0x3e>
 8014cd0:	3601      	adds	r6, #1
 8014cd2:	2102      	movs	r1, #2
 8014cd4:	e000      	b.n	8014cd8 <__cvt+0x44>
 8014cd6:	2103      	movs	r1, #3
 8014cd8:	ab03      	add	r3, sp, #12
 8014cda:	9301      	str	r3, [sp, #4]
 8014cdc:	ab02      	add	r3, sp, #8
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	ec45 4b10 	vmov	d0, r4, r5
 8014ce4:	4653      	mov	r3, sl
 8014ce6:	4632      	mov	r2, r6
 8014ce8:	f000 fd96 	bl	8015818 <_dtoa_r>
 8014cec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014cf0:	4607      	mov	r7, r0
 8014cf2:	d102      	bne.n	8014cfa <__cvt+0x66>
 8014cf4:	f019 0f01 	tst.w	r9, #1
 8014cf8:	d022      	beq.n	8014d40 <__cvt+0xac>
 8014cfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014cfe:	eb07 0906 	add.w	r9, r7, r6
 8014d02:	d110      	bne.n	8014d26 <__cvt+0x92>
 8014d04:	783b      	ldrb	r3, [r7, #0]
 8014d06:	2b30      	cmp	r3, #48	; 0x30
 8014d08:	d10a      	bne.n	8014d20 <__cvt+0x8c>
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	4620      	mov	r0, r4
 8014d10:	4629      	mov	r1, r5
 8014d12:	f7eb fef1 	bl	8000af8 <__aeabi_dcmpeq>
 8014d16:	b918      	cbnz	r0, 8014d20 <__cvt+0x8c>
 8014d18:	f1c6 0601 	rsb	r6, r6, #1
 8014d1c:	f8ca 6000 	str.w	r6, [sl]
 8014d20:	f8da 3000 	ldr.w	r3, [sl]
 8014d24:	4499      	add	r9, r3
 8014d26:	2200      	movs	r2, #0
 8014d28:	2300      	movs	r3, #0
 8014d2a:	4620      	mov	r0, r4
 8014d2c:	4629      	mov	r1, r5
 8014d2e:	f7eb fee3 	bl	8000af8 <__aeabi_dcmpeq>
 8014d32:	b108      	cbz	r0, 8014d38 <__cvt+0xa4>
 8014d34:	f8cd 900c 	str.w	r9, [sp, #12]
 8014d38:	2230      	movs	r2, #48	; 0x30
 8014d3a:	9b03      	ldr	r3, [sp, #12]
 8014d3c:	454b      	cmp	r3, r9
 8014d3e:	d307      	bcc.n	8014d50 <__cvt+0xbc>
 8014d40:	9b03      	ldr	r3, [sp, #12]
 8014d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d44:	1bdb      	subs	r3, r3, r7
 8014d46:	4638      	mov	r0, r7
 8014d48:	6013      	str	r3, [r2, #0]
 8014d4a:	b004      	add	sp, #16
 8014d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d50:	1c59      	adds	r1, r3, #1
 8014d52:	9103      	str	r1, [sp, #12]
 8014d54:	701a      	strb	r2, [r3, #0]
 8014d56:	e7f0      	b.n	8014d3a <__cvt+0xa6>

08014d58 <__exponent>:
 8014d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	2900      	cmp	r1, #0
 8014d5e:	bfb8      	it	lt
 8014d60:	4249      	neglt	r1, r1
 8014d62:	f803 2b02 	strb.w	r2, [r3], #2
 8014d66:	bfb4      	ite	lt
 8014d68:	222d      	movlt	r2, #45	; 0x2d
 8014d6a:	222b      	movge	r2, #43	; 0x2b
 8014d6c:	2909      	cmp	r1, #9
 8014d6e:	7042      	strb	r2, [r0, #1]
 8014d70:	dd2a      	ble.n	8014dc8 <__exponent+0x70>
 8014d72:	f10d 0407 	add.w	r4, sp, #7
 8014d76:	46a4      	mov	ip, r4
 8014d78:	270a      	movs	r7, #10
 8014d7a:	46a6      	mov	lr, r4
 8014d7c:	460a      	mov	r2, r1
 8014d7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8014d82:	fb07 1516 	mls	r5, r7, r6, r1
 8014d86:	3530      	adds	r5, #48	; 0x30
 8014d88:	2a63      	cmp	r2, #99	; 0x63
 8014d8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8014d8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014d92:	4631      	mov	r1, r6
 8014d94:	dcf1      	bgt.n	8014d7a <__exponent+0x22>
 8014d96:	3130      	adds	r1, #48	; 0x30
 8014d98:	f1ae 0502 	sub.w	r5, lr, #2
 8014d9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014da0:	1c44      	adds	r4, r0, #1
 8014da2:	4629      	mov	r1, r5
 8014da4:	4561      	cmp	r1, ip
 8014da6:	d30a      	bcc.n	8014dbe <__exponent+0x66>
 8014da8:	f10d 0209 	add.w	r2, sp, #9
 8014dac:	eba2 020e 	sub.w	r2, r2, lr
 8014db0:	4565      	cmp	r5, ip
 8014db2:	bf88      	it	hi
 8014db4:	2200      	movhi	r2, #0
 8014db6:	4413      	add	r3, r2
 8014db8:	1a18      	subs	r0, r3, r0
 8014dba:	b003      	add	sp, #12
 8014dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014dc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014dc6:	e7ed      	b.n	8014da4 <__exponent+0x4c>
 8014dc8:	2330      	movs	r3, #48	; 0x30
 8014dca:	3130      	adds	r1, #48	; 0x30
 8014dcc:	7083      	strb	r3, [r0, #2]
 8014dce:	70c1      	strb	r1, [r0, #3]
 8014dd0:	1d03      	adds	r3, r0, #4
 8014dd2:	e7f1      	b.n	8014db8 <__exponent+0x60>

08014dd4 <_printf_float>:
 8014dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd8:	ed2d 8b02 	vpush	{d8}
 8014ddc:	b08d      	sub	sp, #52	; 0x34
 8014dde:	460c      	mov	r4, r1
 8014de0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014de4:	4616      	mov	r6, r2
 8014de6:	461f      	mov	r7, r3
 8014de8:	4605      	mov	r5, r0
 8014dea:	f001 fb03 	bl	80163f4 <_localeconv_r>
 8014dee:	f8d0 a000 	ldr.w	sl, [r0]
 8014df2:	4650      	mov	r0, sl
 8014df4:	f7eb f9fe 	bl	80001f4 <strlen>
 8014df8:	2300      	movs	r3, #0
 8014dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8014dfc:	6823      	ldr	r3, [r4, #0]
 8014dfe:	9305      	str	r3, [sp, #20]
 8014e00:	f8d8 3000 	ldr.w	r3, [r8]
 8014e04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014e08:	3307      	adds	r3, #7
 8014e0a:	f023 0307 	bic.w	r3, r3, #7
 8014e0e:	f103 0208 	add.w	r2, r3, #8
 8014e12:	f8c8 2000 	str.w	r2, [r8]
 8014e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014e1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014e22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014e26:	9307      	str	r3, [sp, #28]
 8014e28:	f8cd 8018 	str.w	r8, [sp, #24]
 8014e2c:	ee08 0a10 	vmov	s16, r0
 8014e30:	4b9f      	ldr	r3, [pc, #636]	; (80150b0 <_printf_float+0x2dc>)
 8014e32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e36:	f04f 32ff 	mov.w	r2, #4294967295
 8014e3a:	f7eb fe8f 	bl	8000b5c <__aeabi_dcmpun>
 8014e3e:	bb88      	cbnz	r0, 8014ea4 <_printf_float+0xd0>
 8014e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e44:	4b9a      	ldr	r3, [pc, #616]	; (80150b0 <_printf_float+0x2dc>)
 8014e46:	f04f 32ff 	mov.w	r2, #4294967295
 8014e4a:	f7eb fe69 	bl	8000b20 <__aeabi_dcmple>
 8014e4e:	bb48      	cbnz	r0, 8014ea4 <_printf_float+0xd0>
 8014e50:	2200      	movs	r2, #0
 8014e52:	2300      	movs	r3, #0
 8014e54:	4640      	mov	r0, r8
 8014e56:	4649      	mov	r1, r9
 8014e58:	f7eb fe58 	bl	8000b0c <__aeabi_dcmplt>
 8014e5c:	b110      	cbz	r0, 8014e64 <_printf_float+0x90>
 8014e5e:	232d      	movs	r3, #45	; 0x2d
 8014e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e64:	4b93      	ldr	r3, [pc, #588]	; (80150b4 <_printf_float+0x2e0>)
 8014e66:	4894      	ldr	r0, [pc, #592]	; (80150b8 <_printf_float+0x2e4>)
 8014e68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014e6c:	bf94      	ite	ls
 8014e6e:	4698      	movls	r8, r3
 8014e70:	4680      	movhi	r8, r0
 8014e72:	2303      	movs	r3, #3
 8014e74:	6123      	str	r3, [r4, #16]
 8014e76:	9b05      	ldr	r3, [sp, #20]
 8014e78:	f023 0204 	bic.w	r2, r3, #4
 8014e7c:	6022      	str	r2, [r4, #0]
 8014e7e:	f04f 0900 	mov.w	r9, #0
 8014e82:	9700      	str	r7, [sp, #0]
 8014e84:	4633      	mov	r3, r6
 8014e86:	aa0b      	add	r2, sp, #44	; 0x2c
 8014e88:	4621      	mov	r1, r4
 8014e8a:	4628      	mov	r0, r5
 8014e8c:	f000 f9d8 	bl	8015240 <_printf_common>
 8014e90:	3001      	adds	r0, #1
 8014e92:	f040 8090 	bne.w	8014fb6 <_printf_float+0x1e2>
 8014e96:	f04f 30ff 	mov.w	r0, #4294967295
 8014e9a:	b00d      	add	sp, #52	; 0x34
 8014e9c:	ecbd 8b02 	vpop	{d8}
 8014ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ea4:	4642      	mov	r2, r8
 8014ea6:	464b      	mov	r3, r9
 8014ea8:	4640      	mov	r0, r8
 8014eaa:	4649      	mov	r1, r9
 8014eac:	f7eb fe56 	bl	8000b5c <__aeabi_dcmpun>
 8014eb0:	b140      	cbz	r0, 8014ec4 <_printf_float+0xf0>
 8014eb2:	464b      	mov	r3, r9
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	bfbc      	itt	lt
 8014eb8:	232d      	movlt	r3, #45	; 0x2d
 8014eba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014ebe:	487f      	ldr	r0, [pc, #508]	; (80150bc <_printf_float+0x2e8>)
 8014ec0:	4b7f      	ldr	r3, [pc, #508]	; (80150c0 <_printf_float+0x2ec>)
 8014ec2:	e7d1      	b.n	8014e68 <_printf_float+0x94>
 8014ec4:	6863      	ldr	r3, [r4, #4]
 8014ec6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014eca:	9206      	str	r2, [sp, #24]
 8014ecc:	1c5a      	adds	r2, r3, #1
 8014ece:	d13f      	bne.n	8014f50 <_printf_float+0x17c>
 8014ed0:	2306      	movs	r3, #6
 8014ed2:	6063      	str	r3, [r4, #4]
 8014ed4:	9b05      	ldr	r3, [sp, #20]
 8014ed6:	6861      	ldr	r1, [r4, #4]
 8014ed8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014edc:	2300      	movs	r3, #0
 8014ede:	9303      	str	r3, [sp, #12]
 8014ee0:	ab0a      	add	r3, sp, #40	; 0x28
 8014ee2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014ee6:	ab09      	add	r3, sp, #36	; 0x24
 8014ee8:	ec49 8b10 	vmov	d0, r8, r9
 8014eec:	9300      	str	r3, [sp, #0]
 8014eee:	6022      	str	r2, [r4, #0]
 8014ef0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014ef4:	4628      	mov	r0, r5
 8014ef6:	f7ff fecd 	bl	8014c94 <__cvt>
 8014efa:	9b06      	ldr	r3, [sp, #24]
 8014efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014efe:	2b47      	cmp	r3, #71	; 0x47
 8014f00:	4680      	mov	r8, r0
 8014f02:	d108      	bne.n	8014f16 <_printf_float+0x142>
 8014f04:	1cc8      	adds	r0, r1, #3
 8014f06:	db02      	blt.n	8014f0e <_printf_float+0x13a>
 8014f08:	6863      	ldr	r3, [r4, #4]
 8014f0a:	4299      	cmp	r1, r3
 8014f0c:	dd41      	ble.n	8014f92 <_printf_float+0x1be>
 8014f0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8014f12:	fa5f fb8b 	uxtb.w	fp, fp
 8014f16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014f1a:	d820      	bhi.n	8014f5e <_printf_float+0x18a>
 8014f1c:	3901      	subs	r1, #1
 8014f1e:	465a      	mov	r2, fp
 8014f20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014f24:	9109      	str	r1, [sp, #36]	; 0x24
 8014f26:	f7ff ff17 	bl	8014d58 <__exponent>
 8014f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f2c:	1813      	adds	r3, r2, r0
 8014f2e:	2a01      	cmp	r2, #1
 8014f30:	4681      	mov	r9, r0
 8014f32:	6123      	str	r3, [r4, #16]
 8014f34:	dc02      	bgt.n	8014f3c <_printf_float+0x168>
 8014f36:	6822      	ldr	r2, [r4, #0]
 8014f38:	07d2      	lsls	r2, r2, #31
 8014f3a:	d501      	bpl.n	8014f40 <_printf_float+0x16c>
 8014f3c:	3301      	adds	r3, #1
 8014f3e:	6123      	str	r3, [r4, #16]
 8014f40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d09c      	beq.n	8014e82 <_printf_float+0xae>
 8014f48:	232d      	movs	r3, #45	; 0x2d
 8014f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f4e:	e798      	b.n	8014e82 <_printf_float+0xae>
 8014f50:	9a06      	ldr	r2, [sp, #24]
 8014f52:	2a47      	cmp	r2, #71	; 0x47
 8014f54:	d1be      	bne.n	8014ed4 <_printf_float+0x100>
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d1bc      	bne.n	8014ed4 <_printf_float+0x100>
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	e7b9      	b.n	8014ed2 <_printf_float+0xfe>
 8014f5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014f62:	d118      	bne.n	8014f96 <_printf_float+0x1c2>
 8014f64:	2900      	cmp	r1, #0
 8014f66:	6863      	ldr	r3, [r4, #4]
 8014f68:	dd0b      	ble.n	8014f82 <_printf_float+0x1ae>
 8014f6a:	6121      	str	r1, [r4, #16]
 8014f6c:	b913      	cbnz	r3, 8014f74 <_printf_float+0x1a0>
 8014f6e:	6822      	ldr	r2, [r4, #0]
 8014f70:	07d0      	lsls	r0, r2, #31
 8014f72:	d502      	bpl.n	8014f7a <_printf_float+0x1a6>
 8014f74:	3301      	adds	r3, #1
 8014f76:	440b      	add	r3, r1
 8014f78:	6123      	str	r3, [r4, #16]
 8014f7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8014f7c:	f04f 0900 	mov.w	r9, #0
 8014f80:	e7de      	b.n	8014f40 <_printf_float+0x16c>
 8014f82:	b913      	cbnz	r3, 8014f8a <_printf_float+0x1b6>
 8014f84:	6822      	ldr	r2, [r4, #0]
 8014f86:	07d2      	lsls	r2, r2, #31
 8014f88:	d501      	bpl.n	8014f8e <_printf_float+0x1ba>
 8014f8a:	3302      	adds	r3, #2
 8014f8c:	e7f4      	b.n	8014f78 <_printf_float+0x1a4>
 8014f8e:	2301      	movs	r3, #1
 8014f90:	e7f2      	b.n	8014f78 <_printf_float+0x1a4>
 8014f92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f98:	4299      	cmp	r1, r3
 8014f9a:	db05      	blt.n	8014fa8 <_printf_float+0x1d4>
 8014f9c:	6823      	ldr	r3, [r4, #0]
 8014f9e:	6121      	str	r1, [r4, #16]
 8014fa0:	07d8      	lsls	r0, r3, #31
 8014fa2:	d5ea      	bpl.n	8014f7a <_printf_float+0x1a6>
 8014fa4:	1c4b      	adds	r3, r1, #1
 8014fa6:	e7e7      	b.n	8014f78 <_printf_float+0x1a4>
 8014fa8:	2900      	cmp	r1, #0
 8014faa:	bfd4      	ite	le
 8014fac:	f1c1 0202 	rsble	r2, r1, #2
 8014fb0:	2201      	movgt	r2, #1
 8014fb2:	4413      	add	r3, r2
 8014fb4:	e7e0      	b.n	8014f78 <_printf_float+0x1a4>
 8014fb6:	6823      	ldr	r3, [r4, #0]
 8014fb8:	055a      	lsls	r2, r3, #21
 8014fba:	d407      	bmi.n	8014fcc <_printf_float+0x1f8>
 8014fbc:	6923      	ldr	r3, [r4, #16]
 8014fbe:	4642      	mov	r2, r8
 8014fc0:	4631      	mov	r1, r6
 8014fc2:	4628      	mov	r0, r5
 8014fc4:	47b8      	blx	r7
 8014fc6:	3001      	adds	r0, #1
 8014fc8:	d12c      	bne.n	8015024 <_printf_float+0x250>
 8014fca:	e764      	b.n	8014e96 <_printf_float+0xc2>
 8014fcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014fd0:	f240 80e0 	bls.w	8015194 <_printf_float+0x3c0>
 8014fd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014fd8:	2200      	movs	r2, #0
 8014fda:	2300      	movs	r3, #0
 8014fdc:	f7eb fd8c 	bl	8000af8 <__aeabi_dcmpeq>
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	d034      	beq.n	801504e <_printf_float+0x27a>
 8014fe4:	4a37      	ldr	r2, [pc, #220]	; (80150c4 <_printf_float+0x2f0>)
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	4631      	mov	r1, r6
 8014fea:	4628      	mov	r0, r5
 8014fec:	47b8      	blx	r7
 8014fee:	3001      	adds	r0, #1
 8014ff0:	f43f af51 	beq.w	8014e96 <_printf_float+0xc2>
 8014ff4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	db02      	blt.n	8015002 <_printf_float+0x22e>
 8014ffc:	6823      	ldr	r3, [r4, #0]
 8014ffe:	07d8      	lsls	r0, r3, #31
 8015000:	d510      	bpl.n	8015024 <_printf_float+0x250>
 8015002:	ee18 3a10 	vmov	r3, s16
 8015006:	4652      	mov	r2, sl
 8015008:	4631      	mov	r1, r6
 801500a:	4628      	mov	r0, r5
 801500c:	47b8      	blx	r7
 801500e:	3001      	adds	r0, #1
 8015010:	f43f af41 	beq.w	8014e96 <_printf_float+0xc2>
 8015014:	f04f 0800 	mov.w	r8, #0
 8015018:	f104 091a 	add.w	r9, r4, #26
 801501c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801501e:	3b01      	subs	r3, #1
 8015020:	4543      	cmp	r3, r8
 8015022:	dc09      	bgt.n	8015038 <_printf_float+0x264>
 8015024:	6823      	ldr	r3, [r4, #0]
 8015026:	079b      	lsls	r3, r3, #30
 8015028:	f100 8105 	bmi.w	8015236 <_printf_float+0x462>
 801502c:	68e0      	ldr	r0, [r4, #12]
 801502e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015030:	4298      	cmp	r0, r3
 8015032:	bfb8      	it	lt
 8015034:	4618      	movlt	r0, r3
 8015036:	e730      	b.n	8014e9a <_printf_float+0xc6>
 8015038:	2301      	movs	r3, #1
 801503a:	464a      	mov	r2, r9
 801503c:	4631      	mov	r1, r6
 801503e:	4628      	mov	r0, r5
 8015040:	47b8      	blx	r7
 8015042:	3001      	adds	r0, #1
 8015044:	f43f af27 	beq.w	8014e96 <_printf_float+0xc2>
 8015048:	f108 0801 	add.w	r8, r8, #1
 801504c:	e7e6      	b.n	801501c <_printf_float+0x248>
 801504e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015050:	2b00      	cmp	r3, #0
 8015052:	dc39      	bgt.n	80150c8 <_printf_float+0x2f4>
 8015054:	4a1b      	ldr	r2, [pc, #108]	; (80150c4 <_printf_float+0x2f0>)
 8015056:	2301      	movs	r3, #1
 8015058:	4631      	mov	r1, r6
 801505a:	4628      	mov	r0, r5
 801505c:	47b8      	blx	r7
 801505e:	3001      	adds	r0, #1
 8015060:	f43f af19 	beq.w	8014e96 <_printf_float+0xc2>
 8015064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015068:	4313      	orrs	r3, r2
 801506a:	d102      	bne.n	8015072 <_printf_float+0x29e>
 801506c:	6823      	ldr	r3, [r4, #0]
 801506e:	07d9      	lsls	r1, r3, #31
 8015070:	d5d8      	bpl.n	8015024 <_printf_float+0x250>
 8015072:	ee18 3a10 	vmov	r3, s16
 8015076:	4652      	mov	r2, sl
 8015078:	4631      	mov	r1, r6
 801507a:	4628      	mov	r0, r5
 801507c:	47b8      	blx	r7
 801507e:	3001      	adds	r0, #1
 8015080:	f43f af09 	beq.w	8014e96 <_printf_float+0xc2>
 8015084:	f04f 0900 	mov.w	r9, #0
 8015088:	f104 0a1a 	add.w	sl, r4, #26
 801508c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801508e:	425b      	negs	r3, r3
 8015090:	454b      	cmp	r3, r9
 8015092:	dc01      	bgt.n	8015098 <_printf_float+0x2c4>
 8015094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015096:	e792      	b.n	8014fbe <_printf_float+0x1ea>
 8015098:	2301      	movs	r3, #1
 801509a:	4652      	mov	r2, sl
 801509c:	4631      	mov	r1, r6
 801509e:	4628      	mov	r0, r5
 80150a0:	47b8      	blx	r7
 80150a2:	3001      	adds	r0, #1
 80150a4:	f43f aef7 	beq.w	8014e96 <_printf_float+0xc2>
 80150a8:	f109 0901 	add.w	r9, r9, #1
 80150ac:	e7ee      	b.n	801508c <_printf_float+0x2b8>
 80150ae:	bf00      	nop
 80150b0:	7fefffff 	.word	0x7fefffff
 80150b4:	0801a6d8 	.word	0x0801a6d8
 80150b8:	0801a6dc 	.word	0x0801a6dc
 80150bc:	0801a6e4 	.word	0x0801a6e4
 80150c0:	0801a6e0 	.word	0x0801a6e0
 80150c4:	0801aa09 	.word	0x0801aa09
 80150c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80150cc:	429a      	cmp	r2, r3
 80150ce:	bfa8      	it	ge
 80150d0:	461a      	movge	r2, r3
 80150d2:	2a00      	cmp	r2, #0
 80150d4:	4691      	mov	r9, r2
 80150d6:	dc37      	bgt.n	8015148 <_printf_float+0x374>
 80150d8:	f04f 0b00 	mov.w	fp, #0
 80150dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80150e0:	f104 021a 	add.w	r2, r4, #26
 80150e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80150e6:	9305      	str	r3, [sp, #20]
 80150e8:	eba3 0309 	sub.w	r3, r3, r9
 80150ec:	455b      	cmp	r3, fp
 80150ee:	dc33      	bgt.n	8015158 <_printf_float+0x384>
 80150f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80150f4:	429a      	cmp	r2, r3
 80150f6:	db3b      	blt.n	8015170 <_printf_float+0x39c>
 80150f8:	6823      	ldr	r3, [r4, #0]
 80150fa:	07da      	lsls	r2, r3, #31
 80150fc:	d438      	bmi.n	8015170 <_printf_float+0x39c>
 80150fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015100:	9a05      	ldr	r2, [sp, #20]
 8015102:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015104:	1a9a      	subs	r2, r3, r2
 8015106:	eba3 0901 	sub.w	r9, r3, r1
 801510a:	4591      	cmp	r9, r2
 801510c:	bfa8      	it	ge
 801510e:	4691      	movge	r9, r2
 8015110:	f1b9 0f00 	cmp.w	r9, #0
 8015114:	dc35      	bgt.n	8015182 <_printf_float+0x3ae>
 8015116:	f04f 0800 	mov.w	r8, #0
 801511a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801511e:	f104 0a1a 	add.w	sl, r4, #26
 8015122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015126:	1a9b      	subs	r3, r3, r2
 8015128:	eba3 0309 	sub.w	r3, r3, r9
 801512c:	4543      	cmp	r3, r8
 801512e:	f77f af79 	ble.w	8015024 <_printf_float+0x250>
 8015132:	2301      	movs	r3, #1
 8015134:	4652      	mov	r2, sl
 8015136:	4631      	mov	r1, r6
 8015138:	4628      	mov	r0, r5
 801513a:	47b8      	blx	r7
 801513c:	3001      	adds	r0, #1
 801513e:	f43f aeaa 	beq.w	8014e96 <_printf_float+0xc2>
 8015142:	f108 0801 	add.w	r8, r8, #1
 8015146:	e7ec      	b.n	8015122 <_printf_float+0x34e>
 8015148:	4613      	mov	r3, r2
 801514a:	4631      	mov	r1, r6
 801514c:	4642      	mov	r2, r8
 801514e:	4628      	mov	r0, r5
 8015150:	47b8      	blx	r7
 8015152:	3001      	adds	r0, #1
 8015154:	d1c0      	bne.n	80150d8 <_printf_float+0x304>
 8015156:	e69e      	b.n	8014e96 <_printf_float+0xc2>
 8015158:	2301      	movs	r3, #1
 801515a:	4631      	mov	r1, r6
 801515c:	4628      	mov	r0, r5
 801515e:	9205      	str	r2, [sp, #20]
 8015160:	47b8      	blx	r7
 8015162:	3001      	adds	r0, #1
 8015164:	f43f ae97 	beq.w	8014e96 <_printf_float+0xc2>
 8015168:	9a05      	ldr	r2, [sp, #20]
 801516a:	f10b 0b01 	add.w	fp, fp, #1
 801516e:	e7b9      	b.n	80150e4 <_printf_float+0x310>
 8015170:	ee18 3a10 	vmov	r3, s16
 8015174:	4652      	mov	r2, sl
 8015176:	4631      	mov	r1, r6
 8015178:	4628      	mov	r0, r5
 801517a:	47b8      	blx	r7
 801517c:	3001      	adds	r0, #1
 801517e:	d1be      	bne.n	80150fe <_printf_float+0x32a>
 8015180:	e689      	b.n	8014e96 <_printf_float+0xc2>
 8015182:	9a05      	ldr	r2, [sp, #20]
 8015184:	464b      	mov	r3, r9
 8015186:	4442      	add	r2, r8
 8015188:	4631      	mov	r1, r6
 801518a:	4628      	mov	r0, r5
 801518c:	47b8      	blx	r7
 801518e:	3001      	adds	r0, #1
 8015190:	d1c1      	bne.n	8015116 <_printf_float+0x342>
 8015192:	e680      	b.n	8014e96 <_printf_float+0xc2>
 8015194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015196:	2a01      	cmp	r2, #1
 8015198:	dc01      	bgt.n	801519e <_printf_float+0x3ca>
 801519a:	07db      	lsls	r3, r3, #31
 801519c:	d538      	bpl.n	8015210 <_printf_float+0x43c>
 801519e:	2301      	movs	r3, #1
 80151a0:	4642      	mov	r2, r8
 80151a2:	4631      	mov	r1, r6
 80151a4:	4628      	mov	r0, r5
 80151a6:	47b8      	blx	r7
 80151a8:	3001      	adds	r0, #1
 80151aa:	f43f ae74 	beq.w	8014e96 <_printf_float+0xc2>
 80151ae:	ee18 3a10 	vmov	r3, s16
 80151b2:	4652      	mov	r2, sl
 80151b4:	4631      	mov	r1, r6
 80151b6:	4628      	mov	r0, r5
 80151b8:	47b8      	blx	r7
 80151ba:	3001      	adds	r0, #1
 80151bc:	f43f ae6b 	beq.w	8014e96 <_printf_float+0xc2>
 80151c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80151c4:	2200      	movs	r2, #0
 80151c6:	2300      	movs	r3, #0
 80151c8:	f7eb fc96 	bl	8000af8 <__aeabi_dcmpeq>
 80151cc:	b9d8      	cbnz	r0, 8015206 <_printf_float+0x432>
 80151ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151d0:	f108 0201 	add.w	r2, r8, #1
 80151d4:	3b01      	subs	r3, #1
 80151d6:	4631      	mov	r1, r6
 80151d8:	4628      	mov	r0, r5
 80151da:	47b8      	blx	r7
 80151dc:	3001      	adds	r0, #1
 80151de:	d10e      	bne.n	80151fe <_printf_float+0x42a>
 80151e0:	e659      	b.n	8014e96 <_printf_float+0xc2>
 80151e2:	2301      	movs	r3, #1
 80151e4:	4652      	mov	r2, sl
 80151e6:	4631      	mov	r1, r6
 80151e8:	4628      	mov	r0, r5
 80151ea:	47b8      	blx	r7
 80151ec:	3001      	adds	r0, #1
 80151ee:	f43f ae52 	beq.w	8014e96 <_printf_float+0xc2>
 80151f2:	f108 0801 	add.w	r8, r8, #1
 80151f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151f8:	3b01      	subs	r3, #1
 80151fa:	4543      	cmp	r3, r8
 80151fc:	dcf1      	bgt.n	80151e2 <_printf_float+0x40e>
 80151fe:	464b      	mov	r3, r9
 8015200:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015204:	e6dc      	b.n	8014fc0 <_printf_float+0x1ec>
 8015206:	f04f 0800 	mov.w	r8, #0
 801520a:	f104 0a1a 	add.w	sl, r4, #26
 801520e:	e7f2      	b.n	80151f6 <_printf_float+0x422>
 8015210:	2301      	movs	r3, #1
 8015212:	4642      	mov	r2, r8
 8015214:	e7df      	b.n	80151d6 <_printf_float+0x402>
 8015216:	2301      	movs	r3, #1
 8015218:	464a      	mov	r2, r9
 801521a:	4631      	mov	r1, r6
 801521c:	4628      	mov	r0, r5
 801521e:	47b8      	blx	r7
 8015220:	3001      	adds	r0, #1
 8015222:	f43f ae38 	beq.w	8014e96 <_printf_float+0xc2>
 8015226:	f108 0801 	add.w	r8, r8, #1
 801522a:	68e3      	ldr	r3, [r4, #12]
 801522c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801522e:	1a5b      	subs	r3, r3, r1
 8015230:	4543      	cmp	r3, r8
 8015232:	dcf0      	bgt.n	8015216 <_printf_float+0x442>
 8015234:	e6fa      	b.n	801502c <_printf_float+0x258>
 8015236:	f04f 0800 	mov.w	r8, #0
 801523a:	f104 0919 	add.w	r9, r4, #25
 801523e:	e7f4      	b.n	801522a <_printf_float+0x456>

08015240 <_printf_common>:
 8015240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015244:	4616      	mov	r6, r2
 8015246:	4699      	mov	r9, r3
 8015248:	688a      	ldr	r2, [r1, #8]
 801524a:	690b      	ldr	r3, [r1, #16]
 801524c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015250:	4293      	cmp	r3, r2
 8015252:	bfb8      	it	lt
 8015254:	4613      	movlt	r3, r2
 8015256:	6033      	str	r3, [r6, #0]
 8015258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801525c:	4607      	mov	r7, r0
 801525e:	460c      	mov	r4, r1
 8015260:	b10a      	cbz	r2, 8015266 <_printf_common+0x26>
 8015262:	3301      	adds	r3, #1
 8015264:	6033      	str	r3, [r6, #0]
 8015266:	6823      	ldr	r3, [r4, #0]
 8015268:	0699      	lsls	r1, r3, #26
 801526a:	bf42      	ittt	mi
 801526c:	6833      	ldrmi	r3, [r6, #0]
 801526e:	3302      	addmi	r3, #2
 8015270:	6033      	strmi	r3, [r6, #0]
 8015272:	6825      	ldr	r5, [r4, #0]
 8015274:	f015 0506 	ands.w	r5, r5, #6
 8015278:	d106      	bne.n	8015288 <_printf_common+0x48>
 801527a:	f104 0a19 	add.w	sl, r4, #25
 801527e:	68e3      	ldr	r3, [r4, #12]
 8015280:	6832      	ldr	r2, [r6, #0]
 8015282:	1a9b      	subs	r3, r3, r2
 8015284:	42ab      	cmp	r3, r5
 8015286:	dc26      	bgt.n	80152d6 <_printf_common+0x96>
 8015288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801528c:	1e13      	subs	r3, r2, #0
 801528e:	6822      	ldr	r2, [r4, #0]
 8015290:	bf18      	it	ne
 8015292:	2301      	movne	r3, #1
 8015294:	0692      	lsls	r2, r2, #26
 8015296:	d42b      	bmi.n	80152f0 <_printf_common+0xb0>
 8015298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801529c:	4649      	mov	r1, r9
 801529e:	4638      	mov	r0, r7
 80152a0:	47c0      	blx	r8
 80152a2:	3001      	adds	r0, #1
 80152a4:	d01e      	beq.n	80152e4 <_printf_common+0xa4>
 80152a6:	6823      	ldr	r3, [r4, #0]
 80152a8:	68e5      	ldr	r5, [r4, #12]
 80152aa:	6832      	ldr	r2, [r6, #0]
 80152ac:	f003 0306 	and.w	r3, r3, #6
 80152b0:	2b04      	cmp	r3, #4
 80152b2:	bf08      	it	eq
 80152b4:	1aad      	subeq	r5, r5, r2
 80152b6:	68a3      	ldr	r3, [r4, #8]
 80152b8:	6922      	ldr	r2, [r4, #16]
 80152ba:	bf0c      	ite	eq
 80152bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80152c0:	2500      	movne	r5, #0
 80152c2:	4293      	cmp	r3, r2
 80152c4:	bfc4      	itt	gt
 80152c6:	1a9b      	subgt	r3, r3, r2
 80152c8:	18ed      	addgt	r5, r5, r3
 80152ca:	2600      	movs	r6, #0
 80152cc:	341a      	adds	r4, #26
 80152ce:	42b5      	cmp	r5, r6
 80152d0:	d11a      	bne.n	8015308 <_printf_common+0xc8>
 80152d2:	2000      	movs	r0, #0
 80152d4:	e008      	b.n	80152e8 <_printf_common+0xa8>
 80152d6:	2301      	movs	r3, #1
 80152d8:	4652      	mov	r2, sl
 80152da:	4649      	mov	r1, r9
 80152dc:	4638      	mov	r0, r7
 80152de:	47c0      	blx	r8
 80152e0:	3001      	adds	r0, #1
 80152e2:	d103      	bne.n	80152ec <_printf_common+0xac>
 80152e4:	f04f 30ff 	mov.w	r0, #4294967295
 80152e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ec:	3501      	adds	r5, #1
 80152ee:	e7c6      	b.n	801527e <_printf_common+0x3e>
 80152f0:	18e1      	adds	r1, r4, r3
 80152f2:	1c5a      	adds	r2, r3, #1
 80152f4:	2030      	movs	r0, #48	; 0x30
 80152f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80152fa:	4422      	add	r2, r4
 80152fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015304:	3302      	adds	r3, #2
 8015306:	e7c7      	b.n	8015298 <_printf_common+0x58>
 8015308:	2301      	movs	r3, #1
 801530a:	4622      	mov	r2, r4
 801530c:	4649      	mov	r1, r9
 801530e:	4638      	mov	r0, r7
 8015310:	47c0      	blx	r8
 8015312:	3001      	adds	r0, #1
 8015314:	d0e6      	beq.n	80152e4 <_printf_common+0xa4>
 8015316:	3601      	adds	r6, #1
 8015318:	e7d9      	b.n	80152ce <_printf_common+0x8e>
	...

0801531c <_printf_i>:
 801531c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015320:	7e0f      	ldrb	r7, [r1, #24]
 8015322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015324:	2f78      	cmp	r7, #120	; 0x78
 8015326:	4691      	mov	r9, r2
 8015328:	4680      	mov	r8, r0
 801532a:	460c      	mov	r4, r1
 801532c:	469a      	mov	sl, r3
 801532e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015332:	d807      	bhi.n	8015344 <_printf_i+0x28>
 8015334:	2f62      	cmp	r7, #98	; 0x62
 8015336:	d80a      	bhi.n	801534e <_printf_i+0x32>
 8015338:	2f00      	cmp	r7, #0
 801533a:	f000 80d8 	beq.w	80154ee <_printf_i+0x1d2>
 801533e:	2f58      	cmp	r7, #88	; 0x58
 8015340:	f000 80a3 	beq.w	801548a <_printf_i+0x16e>
 8015344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801534c:	e03a      	b.n	80153c4 <_printf_i+0xa8>
 801534e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015352:	2b15      	cmp	r3, #21
 8015354:	d8f6      	bhi.n	8015344 <_printf_i+0x28>
 8015356:	a101      	add	r1, pc, #4	; (adr r1, 801535c <_printf_i+0x40>)
 8015358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801535c:	080153b5 	.word	0x080153b5
 8015360:	080153c9 	.word	0x080153c9
 8015364:	08015345 	.word	0x08015345
 8015368:	08015345 	.word	0x08015345
 801536c:	08015345 	.word	0x08015345
 8015370:	08015345 	.word	0x08015345
 8015374:	080153c9 	.word	0x080153c9
 8015378:	08015345 	.word	0x08015345
 801537c:	08015345 	.word	0x08015345
 8015380:	08015345 	.word	0x08015345
 8015384:	08015345 	.word	0x08015345
 8015388:	080154d5 	.word	0x080154d5
 801538c:	080153f9 	.word	0x080153f9
 8015390:	080154b7 	.word	0x080154b7
 8015394:	08015345 	.word	0x08015345
 8015398:	08015345 	.word	0x08015345
 801539c:	080154f7 	.word	0x080154f7
 80153a0:	08015345 	.word	0x08015345
 80153a4:	080153f9 	.word	0x080153f9
 80153a8:	08015345 	.word	0x08015345
 80153ac:	08015345 	.word	0x08015345
 80153b0:	080154bf 	.word	0x080154bf
 80153b4:	682b      	ldr	r3, [r5, #0]
 80153b6:	1d1a      	adds	r2, r3, #4
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	602a      	str	r2, [r5, #0]
 80153bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80153c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80153c4:	2301      	movs	r3, #1
 80153c6:	e0a3      	b.n	8015510 <_printf_i+0x1f4>
 80153c8:	6820      	ldr	r0, [r4, #0]
 80153ca:	6829      	ldr	r1, [r5, #0]
 80153cc:	0606      	lsls	r6, r0, #24
 80153ce:	f101 0304 	add.w	r3, r1, #4
 80153d2:	d50a      	bpl.n	80153ea <_printf_i+0xce>
 80153d4:	680e      	ldr	r6, [r1, #0]
 80153d6:	602b      	str	r3, [r5, #0]
 80153d8:	2e00      	cmp	r6, #0
 80153da:	da03      	bge.n	80153e4 <_printf_i+0xc8>
 80153dc:	232d      	movs	r3, #45	; 0x2d
 80153de:	4276      	negs	r6, r6
 80153e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153e4:	485e      	ldr	r0, [pc, #376]	; (8015560 <_printf_i+0x244>)
 80153e6:	230a      	movs	r3, #10
 80153e8:	e019      	b.n	801541e <_printf_i+0x102>
 80153ea:	680e      	ldr	r6, [r1, #0]
 80153ec:	602b      	str	r3, [r5, #0]
 80153ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80153f2:	bf18      	it	ne
 80153f4:	b236      	sxthne	r6, r6
 80153f6:	e7ef      	b.n	80153d8 <_printf_i+0xbc>
 80153f8:	682b      	ldr	r3, [r5, #0]
 80153fa:	6820      	ldr	r0, [r4, #0]
 80153fc:	1d19      	adds	r1, r3, #4
 80153fe:	6029      	str	r1, [r5, #0]
 8015400:	0601      	lsls	r1, r0, #24
 8015402:	d501      	bpl.n	8015408 <_printf_i+0xec>
 8015404:	681e      	ldr	r6, [r3, #0]
 8015406:	e002      	b.n	801540e <_printf_i+0xf2>
 8015408:	0646      	lsls	r6, r0, #25
 801540a:	d5fb      	bpl.n	8015404 <_printf_i+0xe8>
 801540c:	881e      	ldrh	r6, [r3, #0]
 801540e:	4854      	ldr	r0, [pc, #336]	; (8015560 <_printf_i+0x244>)
 8015410:	2f6f      	cmp	r7, #111	; 0x6f
 8015412:	bf0c      	ite	eq
 8015414:	2308      	moveq	r3, #8
 8015416:	230a      	movne	r3, #10
 8015418:	2100      	movs	r1, #0
 801541a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801541e:	6865      	ldr	r5, [r4, #4]
 8015420:	60a5      	str	r5, [r4, #8]
 8015422:	2d00      	cmp	r5, #0
 8015424:	bfa2      	ittt	ge
 8015426:	6821      	ldrge	r1, [r4, #0]
 8015428:	f021 0104 	bicge.w	r1, r1, #4
 801542c:	6021      	strge	r1, [r4, #0]
 801542e:	b90e      	cbnz	r6, 8015434 <_printf_i+0x118>
 8015430:	2d00      	cmp	r5, #0
 8015432:	d04d      	beq.n	80154d0 <_printf_i+0x1b4>
 8015434:	4615      	mov	r5, r2
 8015436:	fbb6 f1f3 	udiv	r1, r6, r3
 801543a:	fb03 6711 	mls	r7, r3, r1, r6
 801543e:	5dc7      	ldrb	r7, [r0, r7]
 8015440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015444:	4637      	mov	r7, r6
 8015446:	42bb      	cmp	r3, r7
 8015448:	460e      	mov	r6, r1
 801544a:	d9f4      	bls.n	8015436 <_printf_i+0x11a>
 801544c:	2b08      	cmp	r3, #8
 801544e:	d10b      	bne.n	8015468 <_printf_i+0x14c>
 8015450:	6823      	ldr	r3, [r4, #0]
 8015452:	07de      	lsls	r6, r3, #31
 8015454:	d508      	bpl.n	8015468 <_printf_i+0x14c>
 8015456:	6923      	ldr	r3, [r4, #16]
 8015458:	6861      	ldr	r1, [r4, #4]
 801545a:	4299      	cmp	r1, r3
 801545c:	bfde      	ittt	le
 801545e:	2330      	movle	r3, #48	; 0x30
 8015460:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015464:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015468:	1b52      	subs	r2, r2, r5
 801546a:	6122      	str	r2, [r4, #16]
 801546c:	f8cd a000 	str.w	sl, [sp]
 8015470:	464b      	mov	r3, r9
 8015472:	aa03      	add	r2, sp, #12
 8015474:	4621      	mov	r1, r4
 8015476:	4640      	mov	r0, r8
 8015478:	f7ff fee2 	bl	8015240 <_printf_common>
 801547c:	3001      	adds	r0, #1
 801547e:	d14c      	bne.n	801551a <_printf_i+0x1fe>
 8015480:	f04f 30ff 	mov.w	r0, #4294967295
 8015484:	b004      	add	sp, #16
 8015486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801548a:	4835      	ldr	r0, [pc, #212]	; (8015560 <_printf_i+0x244>)
 801548c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015490:	6829      	ldr	r1, [r5, #0]
 8015492:	6823      	ldr	r3, [r4, #0]
 8015494:	f851 6b04 	ldr.w	r6, [r1], #4
 8015498:	6029      	str	r1, [r5, #0]
 801549a:	061d      	lsls	r5, r3, #24
 801549c:	d514      	bpl.n	80154c8 <_printf_i+0x1ac>
 801549e:	07df      	lsls	r7, r3, #31
 80154a0:	bf44      	itt	mi
 80154a2:	f043 0320 	orrmi.w	r3, r3, #32
 80154a6:	6023      	strmi	r3, [r4, #0]
 80154a8:	b91e      	cbnz	r6, 80154b2 <_printf_i+0x196>
 80154aa:	6823      	ldr	r3, [r4, #0]
 80154ac:	f023 0320 	bic.w	r3, r3, #32
 80154b0:	6023      	str	r3, [r4, #0]
 80154b2:	2310      	movs	r3, #16
 80154b4:	e7b0      	b.n	8015418 <_printf_i+0xfc>
 80154b6:	6823      	ldr	r3, [r4, #0]
 80154b8:	f043 0320 	orr.w	r3, r3, #32
 80154bc:	6023      	str	r3, [r4, #0]
 80154be:	2378      	movs	r3, #120	; 0x78
 80154c0:	4828      	ldr	r0, [pc, #160]	; (8015564 <_printf_i+0x248>)
 80154c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80154c6:	e7e3      	b.n	8015490 <_printf_i+0x174>
 80154c8:	0659      	lsls	r1, r3, #25
 80154ca:	bf48      	it	mi
 80154cc:	b2b6      	uxthmi	r6, r6
 80154ce:	e7e6      	b.n	801549e <_printf_i+0x182>
 80154d0:	4615      	mov	r5, r2
 80154d2:	e7bb      	b.n	801544c <_printf_i+0x130>
 80154d4:	682b      	ldr	r3, [r5, #0]
 80154d6:	6826      	ldr	r6, [r4, #0]
 80154d8:	6961      	ldr	r1, [r4, #20]
 80154da:	1d18      	adds	r0, r3, #4
 80154dc:	6028      	str	r0, [r5, #0]
 80154de:	0635      	lsls	r5, r6, #24
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	d501      	bpl.n	80154e8 <_printf_i+0x1cc>
 80154e4:	6019      	str	r1, [r3, #0]
 80154e6:	e002      	b.n	80154ee <_printf_i+0x1d2>
 80154e8:	0670      	lsls	r0, r6, #25
 80154ea:	d5fb      	bpl.n	80154e4 <_printf_i+0x1c8>
 80154ec:	8019      	strh	r1, [r3, #0]
 80154ee:	2300      	movs	r3, #0
 80154f0:	6123      	str	r3, [r4, #16]
 80154f2:	4615      	mov	r5, r2
 80154f4:	e7ba      	b.n	801546c <_printf_i+0x150>
 80154f6:	682b      	ldr	r3, [r5, #0]
 80154f8:	1d1a      	adds	r2, r3, #4
 80154fa:	602a      	str	r2, [r5, #0]
 80154fc:	681d      	ldr	r5, [r3, #0]
 80154fe:	6862      	ldr	r2, [r4, #4]
 8015500:	2100      	movs	r1, #0
 8015502:	4628      	mov	r0, r5
 8015504:	f7ea fe84 	bl	8000210 <memchr>
 8015508:	b108      	cbz	r0, 801550e <_printf_i+0x1f2>
 801550a:	1b40      	subs	r0, r0, r5
 801550c:	6060      	str	r0, [r4, #4]
 801550e:	6863      	ldr	r3, [r4, #4]
 8015510:	6123      	str	r3, [r4, #16]
 8015512:	2300      	movs	r3, #0
 8015514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015518:	e7a8      	b.n	801546c <_printf_i+0x150>
 801551a:	6923      	ldr	r3, [r4, #16]
 801551c:	462a      	mov	r2, r5
 801551e:	4649      	mov	r1, r9
 8015520:	4640      	mov	r0, r8
 8015522:	47d0      	blx	sl
 8015524:	3001      	adds	r0, #1
 8015526:	d0ab      	beq.n	8015480 <_printf_i+0x164>
 8015528:	6823      	ldr	r3, [r4, #0]
 801552a:	079b      	lsls	r3, r3, #30
 801552c:	d413      	bmi.n	8015556 <_printf_i+0x23a>
 801552e:	68e0      	ldr	r0, [r4, #12]
 8015530:	9b03      	ldr	r3, [sp, #12]
 8015532:	4298      	cmp	r0, r3
 8015534:	bfb8      	it	lt
 8015536:	4618      	movlt	r0, r3
 8015538:	e7a4      	b.n	8015484 <_printf_i+0x168>
 801553a:	2301      	movs	r3, #1
 801553c:	4632      	mov	r2, r6
 801553e:	4649      	mov	r1, r9
 8015540:	4640      	mov	r0, r8
 8015542:	47d0      	blx	sl
 8015544:	3001      	adds	r0, #1
 8015546:	d09b      	beq.n	8015480 <_printf_i+0x164>
 8015548:	3501      	adds	r5, #1
 801554a:	68e3      	ldr	r3, [r4, #12]
 801554c:	9903      	ldr	r1, [sp, #12]
 801554e:	1a5b      	subs	r3, r3, r1
 8015550:	42ab      	cmp	r3, r5
 8015552:	dcf2      	bgt.n	801553a <_printf_i+0x21e>
 8015554:	e7eb      	b.n	801552e <_printf_i+0x212>
 8015556:	2500      	movs	r5, #0
 8015558:	f104 0619 	add.w	r6, r4, #25
 801555c:	e7f5      	b.n	801554a <_printf_i+0x22e>
 801555e:	bf00      	nop
 8015560:	0801a6e8 	.word	0x0801a6e8
 8015564:	0801a6f9 	.word	0x0801a6f9

08015568 <_sbrk_r>:
 8015568:	b538      	push	{r3, r4, r5, lr}
 801556a:	4d06      	ldr	r5, [pc, #24]	; (8015584 <_sbrk_r+0x1c>)
 801556c:	2300      	movs	r3, #0
 801556e:	4604      	mov	r4, r0
 8015570:	4608      	mov	r0, r1
 8015572:	602b      	str	r3, [r5, #0]
 8015574:	f7f6 faf8 	bl	800bb68 <_sbrk>
 8015578:	1c43      	adds	r3, r0, #1
 801557a:	d102      	bne.n	8015582 <_sbrk_r+0x1a>
 801557c:	682b      	ldr	r3, [r5, #0]
 801557e:	b103      	cbz	r3, 8015582 <_sbrk_r+0x1a>
 8015580:	6023      	str	r3, [r4, #0]
 8015582:	bd38      	pop	{r3, r4, r5, pc}
 8015584:	20006d50 	.word	0x20006d50

08015588 <siscanf>:
 8015588:	b40e      	push	{r1, r2, r3}
 801558a:	b510      	push	{r4, lr}
 801558c:	b09f      	sub	sp, #124	; 0x7c
 801558e:	ac21      	add	r4, sp, #132	; 0x84
 8015590:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015594:	f854 2b04 	ldr.w	r2, [r4], #4
 8015598:	9201      	str	r2, [sp, #4]
 801559a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801559e:	9004      	str	r0, [sp, #16]
 80155a0:	9008      	str	r0, [sp, #32]
 80155a2:	f7ea fe27 	bl	80001f4 <strlen>
 80155a6:	4b0c      	ldr	r3, [pc, #48]	; (80155d8 <siscanf+0x50>)
 80155a8:	9005      	str	r0, [sp, #20]
 80155aa:	9009      	str	r0, [sp, #36]	; 0x24
 80155ac:	930d      	str	r3, [sp, #52]	; 0x34
 80155ae:	480b      	ldr	r0, [pc, #44]	; (80155dc <siscanf+0x54>)
 80155b0:	9a01      	ldr	r2, [sp, #4]
 80155b2:	6800      	ldr	r0, [r0, #0]
 80155b4:	9403      	str	r4, [sp, #12]
 80155b6:	2300      	movs	r3, #0
 80155b8:	9311      	str	r3, [sp, #68]	; 0x44
 80155ba:	9316      	str	r3, [sp, #88]	; 0x58
 80155bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80155c4:	a904      	add	r1, sp, #16
 80155c6:	4623      	mov	r3, r4
 80155c8:	f001 fc86 	bl	8016ed8 <__ssvfiscanf_r>
 80155cc:	b01f      	add	sp, #124	; 0x7c
 80155ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155d2:	b003      	add	sp, #12
 80155d4:	4770      	bx	lr
 80155d6:	bf00      	nop
 80155d8:	08015603 	.word	0x08015603
 80155dc:	20000320 	.word	0x20000320

080155e0 <__sread>:
 80155e0:	b510      	push	{r4, lr}
 80155e2:	460c      	mov	r4, r1
 80155e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155e8:	f001 ff40 	bl	801746c <_read_r>
 80155ec:	2800      	cmp	r0, #0
 80155ee:	bfab      	itete	ge
 80155f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80155f2:	89a3      	ldrhlt	r3, [r4, #12]
 80155f4:	181b      	addge	r3, r3, r0
 80155f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80155fa:	bfac      	ite	ge
 80155fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80155fe:	81a3      	strhlt	r3, [r4, #12]
 8015600:	bd10      	pop	{r4, pc}

08015602 <__seofread>:
 8015602:	2000      	movs	r0, #0
 8015604:	4770      	bx	lr

08015606 <__swrite>:
 8015606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801560a:	461f      	mov	r7, r3
 801560c:	898b      	ldrh	r3, [r1, #12]
 801560e:	05db      	lsls	r3, r3, #23
 8015610:	4605      	mov	r5, r0
 8015612:	460c      	mov	r4, r1
 8015614:	4616      	mov	r6, r2
 8015616:	d505      	bpl.n	8015624 <__swrite+0x1e>
 8015618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801561c:	2302      	movs	r3, #2
 801561e:	2200      	movs	r2, #0
 8015620:	f000 feec 	bl	80163fc <_lseek_r>
 8015624:	89a3      	ldrh	r3, [r4, #12]
 8015626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801562a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801562e:	81a3      	strh	r3, [r4, #12]
 8015630:	4632      	mov	r2, r6
 8015632:	463b      	mov	r3, r7
 8015634:	4628      	mov	r0, r5
 8015636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801563a:	f000 b83f 	b.w	80156bc <_write_r>

0801563e <__sseek>:
 801563e:	b510      	push	{r4, lr}
 8015640:	460c      	mov	r4, r1
 8015642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015646:	f000 fed9 	bl	80163fc <_lseek_r>
 801564a:	1c43      	adds	r3, r0, #1
 801564c:	89a3      	ldrh	r3, [r4, #12]
 801564e:	bf15      	itete	ne
 8015650:	6560      	strne	r0, [r4, #84]	; 0x54
 8015652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801565a:	81a3      	strheq	r3, [r4, #12]
 801565c:	bf18      	it	ne
 801565e:	81a3      	strhne	r3, [r4, #12]
 8015660:	bd10      	pop	{r4, pc}

08015662 <__sclose>:
 8015662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015666:	f000 b83b 	b.w	80156e0 <_close_r>

0801566a <strcpy>:
 801566a:	4603      	mov	r3, r0
 801566c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015670:	f803 2b01 	strb.w	r2, [r3], #1
 8015674:	2a00      	cmp	r2, #0
 8015676:	d1f9      	bne.n	801566c <strcpy+0x2>
 8015678:	4770      	bx	lr
	...

0801567c <_vsiprintf_r>:
 801567c:	b500      	push	{lr}
 801567e:	b09b      	sub	sp, #108	; 0x6c
 8015680:	9100      	str	r1, [sp, #0]
 8015682:	9104      	str	r1, [sp, #16]
 8015684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015688:	9105      	str	r1, [sp, #20]
 801568a:	9102      	str	r1, [sp, #8]
 801568c:	4905      	ldr	r1, [pc, #20]	; (80156a4 <_vsiprintf_r+0x28>)
 801568e:	9103      	str	r1, [sp, #12]
 8015690:	4669      	mov	r1, sp
 8015692:	f001 fac7 	bl	8016c24 <_svfiprintf_r>
 8015696:	9b00      	ldr	r3, [sp, #0]
 8015698:	2200      	movs	r2, #0
 801569a:	701a      	strb	r2, [r3, #0]
 801569c:	b01b      	add	sp, #108	; 0x6c
 801569e:	f85d fb04 	ldr.w	pc, [sp], #4
 80156a2:	bf00      	nop
 80156a4:	ffff0208 	.word	0xffff0208

080156a8 <vsiprintf>:
 80156a8:	4613      	mov	r3, r2
 80156aa:	460a      	mov	r2, r1
 80156ac:	4601      	mov	r1, r0
 80156ae:	4802      	ldr	r0, [pc, #8]	; (80156b8 <vsiprintf+0x10>)
 80156b0:	6800      	ldr	r0, [r0, #0]
 80156b2:	f7ff bfe3 	b.w	801567c <_vsiprintf_r>
 80156b6:	bf00      	nop
 80156b8:	20000320 	.word	0x20000320

080156bc <_write_r>:
 80156bc:	b538      	push	{r3, r4, r5, lr}
 80156be:	4d07      	ldr	r5, [pc, #28]	; (80156dc <_write_r+0x20>)
 80156c0:	4604      	mov	r4, r0
 80156c2:	4608      	mov	r0, r1
 80156c4:	4611      	mov	r1, r2
 80156c6:	2200      	movs	r2, #0
 80156c8:	602a      	str	r2, [r5, #0]
 80156ca:	461a      	mov	r2, r3
 80156cc:	f7f6 f9fb 	bl	800bac6 <_write>
 80156d0:	1c43      	adds	r3, r0, #1
 80156d2:	d102      	bne.n	80156da <_write_r+0x1e>
 80156d4:	682b      	ldr	r3, [r5, #0]
 80156d6:	b103      	cbz	r3, 80156da <_write_r+0x1e>
 80156d8:	6023      	str	r3, [r4, #0]
 80156da:	bd38      	pop	{r3, r4, r5, pc}
 80156dc:	20006d50 	.word	0x20006d50

080156e0 <_close_r>:
 80156e0:	b538      	push	{r3, r4, r5, lr}
 80156e2:	4d06      	ldr	r5, [pc, #24]	; (80156fc <_close_r+0x1c>)
 80156e4:	2300      	movs	r3, #0
 80156e6:	4604      	mov	r4, r0
 80156e8:	4608      	mov	r0, r1
 80156ea:	602b      	str	r3, [r5, #0]
 80156ec:	f7f6 fa07 	bl	800bafe <_close>
 80156f0:	1c43      	adds	r3, r0, #1
 80156f2:	d102      	bne.n	80156fa <_close_r+0x1a>
 80156f4:	682b      	ldr	r3, [r5, #0]
 80156f6:	b103      	cbz	r3, 80156fa <_close_r+0x1a>
 80156f8:	6023      	str	r3, [r4, #0]
 80156fa:	bd38      	pop	{r3, r4, r5, pc}
 80156fc:	20006d50 	.word	0x20006d50

08015700 <quorem>:
 8015700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015704:	6903      	ldr	r3, [r0, #16]
 8015706:	690c      	ldr	r4, [r1, #16]
 8015708:	42a3      	cmp	r3, r4
 801570a:	4607      	mov	r7, r0
 801570c:	f2c0 8081 	blt.w	8015812 <quorem+0x112>
 8015710:	3c01      	subs	r4, #1
 8015712:	f101 0814 	add.w	r8, r1, #20
 8015716:	f100 0514 	add.w	r5, r0, #20
 801571a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801571e:	9301      	str	r3, [sp, #4]
 8015720:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015724:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015728:	3301      	adds	r3, #1
 801572a:	429a      	cmp	r2, r3
 801572c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015730:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015734:	fbb2 f6f3 	udiv	r6, r2, r3
 8015738:	d331      	bcc.n	801579e <quorem+0x9e>
 801573a:	f04f 0e00 	mov.w	lr, #0
 801573e:	4640      	mov	r0, r8
 8015740:	46ac      	mov	ip, r5
 8015742:	46f2      	mov	sl, lr
 8015744:	f850 2b04 	ldr.w	r2, [r0], #4
 8015748:	b293      	uxth	r3, r2
 801574a:	fb06 e303 	mla	r3, r6, r3, lr
 801574e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015752:	b29b      	uxth	r3, r3
 8015754:	ebaa 0303 	sub.w	r3, sl, r3
 8015758:	f8dc a000 	ldr.w	sl, [ip]
 801575c:	0c12      	lsrs	r2, r2, #16
 801575e:	fa13 f38a 	uxtah	r3, r3, sl
 8015762:	fb06 e202 	mla	r2, r6, r2, lr
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	9b00      	ldr	r3, [sp, #0]
 801576a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801576e:	b292      	uxth	r2, r2
 8015770:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015774:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015778:	f8bd 3000 	ldrh.w	r3, [sp]
 801577c:	4581      	cmp	r9, r0
 801577e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015782:	f84c 3b04 	str.w	r3, [ip], #4
 8015786:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801578a:	d2db      	bcs.n	8015744 <quorem+0x44>
 801578c:	f855 300b 	ldr.w	r3, [r5, fp]
 8015790:	b92b      	cbnz	r3, 801579e <quorem+0x9e>
 8015792:	9b01      	ldr	r3, [sp, #4]
 8015794:	3b04      	subs	r3, #4
 8015796:	429d      	cmp	r5, r3
 8015798:	461a      	mov	r2, r3
 801579a:	d32e      	bcc.n	80157fa <quorem+0xfa>
 801579c:	613c      	str	r4, [r7, #16]
 801579e:	4638      	mov	r0, r7
 80157a0:	f001 f8cc 	bl	801693c <__mcmp>
 80157a4:	2800      	cmp	r0, #0
 80157a6:	db24      	blt.n	80157f2 <quorem+0xf2>
 80157a8:	3601      	adds	r6, #1
 80157aa:	4628      	mov	r0, r5
 80157ac:	f04f 0c00 	mov.w	ip, #0
 80157b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80157b4:	f8d0 e000 	ldr.w	lr, [r0]
 80157b8:	b293      	uxth	r3, r2
 80157ba:	ebac 0303 	sub.w	r3, ip, r3
 80157be:	0c12      	lsrs	r2, r2, #16
 80157c0:	fa13 f38e 	uxtah	r3, r3, lr
 80157c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80157c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80157cc:	b29b      	uxth	r3, r3
 80157ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80157d2:	45c1      	cmp	r9, r8
 80157d4:	f840 3b04 	str.w	r3, [r0], #4
 80157d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80157dc:	d2e8      	bcs.n	80157b0 <quorem+0xb0>
 80157de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80157e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80157e6:	b922      	cbnz	r2, 80157f2 <quorem+0xf2>
 80157e8:	3b04      	subs	r3, #4
 80157ea:	429d      	cmp	r5, r3
 80157ec:	461a      	mov	r2, r3
 80157ee:	d30a      	bcc.n	8015806 <quorem+0x106>
 80157f0:	613c      	str	r4, [r7, #16]
 80157f2:	4630      	mov	r0, r6
 80157f4:	b003      	add	sp, #12
 80157f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157fa:	6812      	ldr	r2, [r2, #0]
 80157fc:	3b04      	subs	r3, #4
 80157fe:	2a00      	cmp	r2, #0
 8015800:	d1cc      	bne.n	801579c <quorem+0x9c>
 8015802:	3c01      	subs	r4, #1
 8015804:	e7c7      	b.n	8015796 <quorem+0x96>
 8015806:	6812      	ldr	r2, [r2, #0]
 8015808:	3b04      	subs	r3, #4
 801580a:	2a00      	cmp	r2, #0
 801580c:	d1f0      	bne.n	80157f0 <quorem+0xf0>
 801580e:	3c01      	subs	r4, #1
 8015810:	e7eb      	b.n	80157ea <quorem+0xea>
 8015812:	2000      	movs	r0, #0
 8015814:	e7ee      	b.n	80157f4 <quorem+0xf4>
	...

08015818 <_dtoa_r>:
 8015818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801581c:	ed2d 8b04 	vpush	{d8-d9}
 8015820:	ec57 6b10 	vmov	r6, r7, d0
 8015824:	b093      	sub	sp, #76	; 0x4c
 8015826:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015828:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801582c:	9106      	str	r1, [sp, #24]
 801582e:	ee10 aa10 	vmov	sl, s0
 8015832:	4604      	mov	r4, r0
 8015834:	9209      	str	r2, [sp, #36]	; 0x24
 8015836:	930c      	str	r3, [sp, #48]	; 0x30
 8015838:	46bb      	mov	fp, r7
 801583a:	b975      	cbnz	r5, 801585a <_dtoa_r+0x42>
 801583c:	2010      	movs	r0, #16
 801583e:	f7ff f923 	bl	8014a88 <malloc>
 8015842:	4602      	mov	r2, r0
 8015844:	6260      	str	r0, [r4, #36]	; 0x24
 8015846:	b920      	cbnz	r0, 8015852 <_dtoa_r+0x3a>
 8015848:	4ba7      	ldr	r3, [pc, #668]	; (8015ae8 <_dtoa_r+0x2d0>)
 801584a:	21ea      	movs	r1, #234	; 0xea
 801584c:	48a7      	ldr	r0, [pc, #668]	; (8015aec <_dtoa_r+0x2d4>)
 801584e:	f001 ff89 	bl	8017764 <__assert_func>
 8015852:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015856:	6005      	str	r5, [r0, #0]
 8015858:	60c5      	str	r5, [r0, #12]
 801585a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801585c:	6819      	ldr	r1, [r3, #0]
 801585e:	b151      	cbz	r1, 8015876 <_dtoa_r+0x5e>
 8015860:	685a      	ldr	r2, [r3, #4]
 8015862:	604a      	str	r2, [r1, #4]
 8015864:	2301      	movs	r3, #1
 8015866:	4093      	lsls	r3, r2
 8015868:	608b      	str	r3, [r1, #8]
 801586a:	4620      	mov	r0, r4
 801586c:	f000 fe24 	bl	80164b8 <_Bfree>
 8015870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015872:	2200      	movs	r2, #0
 8015874:	601a      	str	r2, [r3, #0]
 8015876:	1e3b      	subs	r3, r7, #0
 8015878:	bfaa      	itet	ge
 801587a:	2300      	movge	r3, #0
 801587c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015880:	f8c8 3000 	strge.w	r3, [r8]
 8015884:	4b9a      	ldr	r3, [pc, #616]	; (8015af0 <_dtoa_r+0x2d8>)
 8015886:	bfbc      	itt	lt
 8015888:	2201      	movlt	r2, #1
 801588a:	f8c8 2000 	strlt.w	r2, [r8]
 801588e:	ea33 030b 	bics.w	r3, r3, fp
 8015892:	d11b      	bne.n	80158cc <_dtoa_r+0xb4>
 8015894:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015896:	f242 730f 	movw	r3, #9999	; 0x270f
 801589a:	6013      	str	r3, [r2, #0]
 801589c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80158a0:	4333      	orrs	r3, r6
 80158a2:	f000 8592 	beq.w	80163ca <_dtoa_r+0xbb2>
 80158a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158a8:	b963      	cbnz	r3, 80158c4 <_dtoa_r+0xac>
 80158aa:	4b92      	ldr	r3, [pc, #584]	; (8015af4 <_dtoa_r+0x2dc>)
 80158ac:	e022      	b.n	80158f4 <_dtoa_r+0xdc>
 80158ae:	4b92      	ldr	r3, [pc, #584]	; (8015af8 <_dtoa_r+0x2e0>)
 80158b0:	9301      	str	r3, [sp, #4]
 80158b2:	3308      	adds	r3, #8
 80158b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80158b6:	6013      	str	r3, [r2, #0]
 80158b8:	9801      	ldr	r0, [sp, #4]
 80158ba:	b013      	add	sp, #76	; 0x4c
 80158bc:	ecbd 8b04 	vpop	{d8-d9}
 80158c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c4:	4b8b      	ldr	r3, [pc, #556]	; (8015af4 <_dtoa_r+0x2dc>)
 80158c6:	9301      	str	r3, [sp, #4]
 80158c8:	3303      	adds	r3, #3
 80158ca:	e7f3      	b.n	80158b4 <_dtoa_r+0x9c>
 80158cc:	2200      	movs	r2, #0
 80158ce:	2300      	movs	r3, #0
 80158d0:	4650      	mov	r0, sl
 80158d2:	4659      	mov	r1, fp
 80158d4:	f7eb f910 	bl	8000af8 <__aeabi_dcmpeq>
 80158d8:	ec4b ab19 	vmov	d9, sl, fp
 80158dc:	4680      	mov	r8, r0
 80158de:	b158      	cbz	r0, 80158f8 <_dtoa_r+0xe0>
 80158e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80158e2:	2301      	movs	r3, #1
 80158e4:	6013      	str	r3, [r2, #0]
 80158e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	f000 856b 	beq.w	80163c4 <_dtoa_r+0xbac>
 80158ee:	4883      	ldr	r0, [pc, #524]	; (8015afc <_dtoa_r+0x2e4>)
 80158f0:	6018      	str	r0, [r3, #0]
 80158f2:	1e43      	subs	r3, r0, #1
 80158f4:	9301      	str	r3, [sp, #4]
 80158f6:	e7df      	b.n	80158b8 <_dtoa_r+0xa0>
 80158f8:	ec4b ab10 	vmov	d0, sl, fp
 80158fc:	aa10      	add	r2, sp, #64	; 0x40
 80158fe:	a911      	add	r1, sp, #68	; 0x44
 8015900:	4620      	mov	r0, r4
 8015902:	f001 f8c1 	bl	8016a88 <__d2b>
 8015906:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801590a:	ee08 0a10 	vmov	s16, r0
 801590e:	2d00      	cmp	r5, #0
 8015910:	f000 8084 	beq.w	8015a1c <_dtoa_r+0x204>
 8015914:	ee19 3a90 	vmov	r3, s19
 8015918:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801591c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015920:	4656      	mov	r6, sl
 8015922:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015926:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801592a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801592e:	4b74      	ldr	r3, [pc, #464]	; (8015b00 <_dtoa_r+0x2e8>)
 8015930:	2200      	movs	r2, #0
 8015932:	4630      	mov	r0, r6
 8015934:	4639      	mov	r1, r7
 8015936:	f7ea fcbf 	bl	80002b8 <__aeabi_dsub>
 801593a:	a365      	add	r3, pc, #404	; (adr r3, 8015ad0 <_dtoa_r+0x2b8>)
 801593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015940:	f7ea fe72 	bl	8000628 <__aeabi_dmul>
 8015944:	a364      	add	r3, pc, #400	; (adr r3, 8015ad8 <_dtoa_r+0x2c0>)
 8015946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801594a:	f7ea fcb7 	bl	80002bc <__adddf3>
 801594e:	4606      	mov	r6, r0
 8015950:	4628      	mov	r0, r5
 8015952:	460f      	mov	r7, r1
 8015954:	f7ea fdfe 	bl	8000554 <__aeabi_i2d>
 8015958:	a361      	add	r3, pc, #388	; (adr r3, 8015ae0 <_dtoa_r+0x2c8>)
 801595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801595e:	f7ea fe63 	bl	8000628 <__aeabi_dmul>
 8015962:	4602      	mov	r2, r0
 8015964:	460b      	mov	r3, r1
 8015966:	4630      	mov	r0, r6
 8015968:	4639      	mov	r1, r7
 801596a:	f7ea fca7 	bl	80002bc <__adddf3>
 801596e:	4606      	mov	r6, r0
 8015970:	460f      	mov	r7, r1
 8015972:	f7eb f909 	bl	8000b88 <__aeabi_d2iz>
 8015976:	2200      	movs	r2, #0
 8015978:	9000      	str	r0, [sp, #0]
 801597a:	2300      	movs	r3, #0
 801597c:	4630      	mov	r0, r6
 801597e:	4639      	mov	r1, r7
 8015980:	f7eb f8c4 	bl	8000b0c <__aeabi_dcmplt>
 8015984:	b150      	cbz	r0, 801599c <_dtoa_r+0x184>
 8015986:	9800      	ldr	r0, [sp, #0]
 8015988:	f7ea fde4 	bl	8000554 <__aeabi_i2d>
 801598c:	4632      	mov	r2, r6
 801598e:	463b      	mov	r3, r7
 8015990:	f7eb f8b2 	bl	8000af8 <__aeabi_dcmpeq>
 8015994:	b910      	cbnz	r0, 801599c <_dtoa_r+0x184>
 8015996:	9b00      	ldr	r3, [sp, #0]
 8015998:	3b01      	subs	r3, #1
 801599a:	9300      	str	r3, [sp, #0]
 801599c:	9b00      	ldr	r3, [sp, #0]
 801599e:	2b16      	cmp	r3, #22
 80159a0:	d85a      	bhi.n	8015a58 <_dtoa_r+0x240>
 80159a2:	9a00      	ldr	r2, [sp, #0]
 80159a4:	4b57      	ldr	r3, [pc, #348]	; (8015b04 <_dtoa_r+0x2ec>)
 80159a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80159aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ae:	ec51 0b19 	vmov	r0, r1, d9
 80159b2:	f7eb f8ab 	bl	8000b0c <__aeabi_dcmplt>
 80159b6:	2800      	cmp	r0, #0
 80159b8:	d050      	beq.n	8015a5c <_dtoa_r+0x244>
 80159ba:	9b00      	ldr	r3, [sp, #0]
 80159bc:	3b01      	subs	r3, #1
 80159be:	9300      	str	r3, [sp, #0]
 80159c0:	2300      	movs	r3, #0
 80159c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80159c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159c6:	1b5d      	subs	r5, r3, r5
 80159c8:	1e6b      	subs	r3, r5, #1
 80159ca:	9305      	str	r3, [sp, #20]
 80159cc:	bf45      	ittet	mi
 80159ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80159d2:	9304      	strmi	r3, [sp, #16]
 80159d4:	2300      	movpl	r3, #0
 80159d6:	2300      	movmi	r3, #0
 80159d8:	bf4c      	ite	mi
 80159da:	9305      	strmi	r3, [sp, #20]
 80159dc:	9304      	strpl	r3, [sp, #16]
 80159de:	9b00      	ldr	r3, [sp, #0]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	db3d      	blt.n	8015a60 <_dtoa_r+0x248>
 80159e4:	9b05      	ldr	r3, [sp, #20]
 80159e6:	9a00      	ldr	r2, [sp, #0]
 80159e8:	920a      	str	r2, [sp, #40]	; 0x28
 80159ea:	4413      	add	r3, r2
 80159ec:	9305      	str	r3, [sp, #20]
 80159ee:	2300      	movs	r3, #0
 80159f0:	9307      	str	r3, [sp, #28]
 80159f2:	9b06      	ldr	r3, [sp, #24]
 80159f4:	2b09      	cmp	r3, #9
 80159f6:	f200 8089 	bhi.w	8015b0c <_dtoa_r+0x2f4>
 80159fa:	2b05      	cmp	r3, #5
 80159fc:	bfc4      	itt	gt
 80159fe:	3b04      	subgt	r3, #4
 8015a00:	9306      	strgt	r3, [sp, #24]
 8015a02:	9b06      	ldr	r3, [sp, #24]
 8015a04:	f1a3 0302 	sub.w	r3, r3, #2
 8015a08:	bfcc      	ite	gt
 8015a0a:	2500      	movgt	r5, #0
 8015a0c:	2501      	movle	r5, #1
 8015a0e:	2b03      	cmp	r3, #3
 8015a10:	f200 8087 	bhi.w	8015b22 <_dtoa_r+0x30a>
 8015a14:	e8df f003 	tbb	[pc, r3]
 8015a18:	59383a2d 	.word	0x59383a2d
 8015a1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015a20:	441d      	add	r5, r3
 8015a22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015a26:	2b20      	cmp	r3, #32
 8015a28:	bfc1      	itttt	gt
 8015a2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015a2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015a32:	fa0b f303 	lslgt.w	r3, fp, r3
 8015a36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015a3a:	bfda      	itte	le
 8015a3c:	f1c3 0320 	rsble	r3, r3, #32
 8015a40:	fa06 f003 	lslle.w	r0, r6, r3
 8015a44:	4318      	orrgt	r0, r3
 8015a46:	f7ea fd75 	bl	8000534 <__aeabi_ui2d>
 8015a4a:	2301      	movs	r3, #1
 8015a4c:	4606      	mov	r6, r0
 8015a4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015a52:	3d01      	subs	r5, #1
 8015a54:	930e      	str	r3, [sp, #56]	; 0x38
 8015a56:	e76a      	b.n	801592e <_dtoa_r+0x116>
 8015a58:	2301      	movs	r3, #1
 8015a5a:	e7b2      	b.n	80159c2 <_dtoa_r+0x1aa>
 8015a5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8015a5e:	e7b1      	b.n	80159c4 <_dtoa_r+0x1ac>
 8015a60:	9b04      	ldr	r3, [sp, #16]
 8015a62:	9a00      	ldr	r2, [sp, #0]
 8015a64:	1a9b      	subs	r3, r3, r2
 8015a66:	9304      	str	r3, [sp, #16]
 8015a68:	4253      	negs	r3, r2
 8015a6a:	9307      	str	r3, [sp, #28]
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8015a70:	e7bf      	b.n	80159f2 <_dtoa_r+0x1da>
 8015a72:	2300      	movs	r3, #0
 8015a74:	9308      	str	r3, [sp, #32]
 8015a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	dc55      	bgt.n	8015b28 <_dtoa_r+0x310>
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015a82:	461a      	mov	r2, r3
 8015a84:	9209      	str	r2, [sp, #36]	; 0x24
 8015a86:	e00c      	b.n	8015aa2 <_dtoa_r+0x28a>
 8015a88:	2301      	movs	r3, #1
 8015a8a:	e7f3      	b.n	8015a74 <_dtoa_r+0x25c>
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a90:	9308      	str	r3, [sp, #32]
 8015a92:	9b00      	ldr	r3, [sp, #0]
 8015a94:	4413      	add	r3, r2
 8015a96:	9302      	str	r3, [sp, #8]
 8015a98:	3301      	adds	r3, #1
 8015a9a:	2b01      	cmp	r3, #1
 8015a9c:	9303      	str	r3, [sp, #12]
 8015a9e:	bfb8      	it	lt
 8015aa0:	2301      	movlt	r3, #1
 8015aa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	6042      	str	r2, [r0, #4]
 8015aa8:	2204      	movs	r2, #4
 8015aaa:	f102 0614 	add.w	r6, r2, #20
 8015aae:	429e      	cmp	r6, r3
 8015ab0:	6841      	ldr	r1, [r0, #4]
 8015ab2:	d93d      	bls.n	8015b30 <_dtoa_r+0x318>
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	f000 fcbf 	bl	8016438 <_Balloc>
 8015aba:	9001      	str	r0, [sp, #4]
 8015abc:	2800      	cmp	r0, #0
 8015abe:	d13b      	bne.n	8015b38 <_dtoa_r+0x320>
 8015ac0:	4b11      	ldr	r3, [pc, #68]	; (8015b08 <_dtoa_r+0x2f0>)
 8015ac2:	4602      	mov	r2, r0
 8015ac4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015ac8:	e6c0      	b.n	801584c <_dtoa_r+0x34>
 8015aca:	2301      	movs	r3, #1
 8015acc:	e7df      	b.n	8015a8e <_dtoa_r+0x276>
 8015ace:	bf00      	nop
 8015ad0:	636f4361 	.word	0x636f4361
 8015ad4:	3fd287a7 	.word	0x3fd287a7
 8015ad8:	8b60c8b3 	.word	0x8b60c8b3
 8015adc:	3fc68a28 	.word	0x3fc68a28
 8015ae0:	509f79fb 	.word	0x509f79fb
 8015ae4:	3fd34413 	.word	0x3fd34413
 8015ae8:	0801a818 	.word	0x0801a818
 8015aec:	0801a82f 	.word	0x0801a82f
 8015af0:	7ff00000 	.word	0x7ff00000
 8015af4:	0801a814 	.word	0x0801a814
 8015af8:	0801a80b 	.word	0x0801a80b
 8015afc:	0801aa0a 	.word	0x0801aa0a
 8015b00:	3ff80000 	.word	0x3ff80000
 8015b04:	0801a920 	.word	0x0801a920
 8015b08:	0801a88a 	.word	0x0801a88a
 8015b0c:	2501      	movs	r5, #1
 8015b0e:	2300      	movs	r3, #0
 8015b10:	9306      	str	r3, [sp, #24]
 8015b12:	9508      	str	r5, [sp, #32]
 8015b14:	f04f 33ff 	mov.w	r3, #4294967295
 8015b18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	2312      	movs	r3, #18
 8015b20:	e7b0      	b.n	8015a84 <_dtoa_r+0x26c>
 8015b22:	2301      	movs	r3, #1
 8015b24:	9308      	str	r3, [sp, #32]
 8015b26:	e7f5      	b.n	8015b14 <_dtoa_r+0x2fc>
 8015b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015b2e:	e7b8      	b.n	8015aa2 <_dtoa_r+0x28a>
 8015b30:	3101      	adds	r1, #1
 8015b32:	6041      	str	r1, [r0, #4]
 8015b34:	0052      	lsls	r2, r2, #1
 8015b36:	e7b8      	b.n	8015aaa <_dtoa_r+0x292>
 8015b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b3a:	9a01      	ldr	r2, [sp, #4]
 8015b3c:	601a      	str	r2, [r3, #0]
 8015b3e:	9b03      	ldr	r3, [sp, #12]
 8015b40:	2b0e      	cmp	r3, #14
 8015b42:	f200 809d 	bhi.w	8015c80 <_dtoa_r+0x468>
 8015b46:	2d00      	cmp	r5, #0
 8015b48:	f000 809a 	beq.w	8015c80 <_dtoa_r+0x468>
 8015b4c:	9b00      	ldr	r3, [sp, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	dd32      	ble.n	8015bb8 <_dtoa_r+0x3a0>
 8015b52:	4ab7      	ldr	r2, [pc, #732]	; (8015e30 <_dtoa_r+0x618>)
 8015b54:	f003 030f 	and.w	r3, r3, #15
 8015b58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015b5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015b60:	9b00      	ldr	r3, [sp, #0]
 8015b62:	05d8      	lsls	r0, r3, #23
 8015b64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015b68:	d516      	bpl.n	8015b98 <_dtoa_r+0x380>
 8015b6a:	4bb2      	ldr	r3, [pc, #712]	; (8015e34 <_dtoa_r+0x61c>)
 8015b6c:	ec51 0b19 	vmov	r0, r1, d9
 8015b70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015b74:	f7ea fe82 	bl	800087c <__aeabi_ddiv>
 8015b78:	f007 070f 	and.w	r7, r7, #15
 8015b7c:	4682      	mov	sl, r0
 8015b7e:	468b      	mov	fp, r1
 8015b80:	2503      	movs	r5, #3
 8015b82:	4eac      	ldr	r6, [pc, #688]	; (8015e34 <_dtoa_r+0x61c>)
 8015b84:	b957      	cbnz	r7, 8015b9c <_dtoa_r+0x384>
 8015b86:	4642      	mov	r2, r8
 8015b88:	464b      	mov	r3, r9
 8015b8a:	4650      	mov	r0, sl
 8015b8c:	4659      	mov	r1, fp
 8015b8e:	f7ea fe75 	bl	800087c <__aeabi_ddiv>
 8015b92:	4682      	mov	sl, r0
 8015b94:	468b      	mov	fp, r1
 8015b96:	e028      	b.n	8015bea <_dtoa_r+0x3d2>
 8015b98:	2502      	movs	r5, #2
 8015b9a:	e7f2      	b.n	8015b82 <_dtoa_r+0x36a>
 8015b9c:	07f9      	lsls	r1, r7, #31
 8015b9e:	d508      	bpl.n	8015bb2 <_dtoa_r+0x39a>
 8015ba0:	4640      	mov	r0, r8
 8015ba2:	4649      	mov	r1, r9
 8015ba4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015ba8:	f7ea fd3e 	bl	8000628 <__aeabi_dmul>
 8015bac:	3501      	adds	r5, #1
 8015bae:	4680      	mov	r8, r0
 8015bb0:	4689      	mov	r9, r1
 8015bb2:	107f      	asrs	r7, r7, #1
 8015bb4:	3608      	adds	r6, #8
 8015bb6:	e7e5      	b.n	8015b84 <_dtoa_r+0x36c>
 8015bb8:	f000 809b 	beq.w	8015cf2 <_dtoa_r+0x4da>
 8015bbc:	9b00      	ldr	r3, [sp, #0]
 8015bbe:	4f9d      	ldr	r7, [pc, #628]	; (8015e34 <_dtoa_r+0x61c>)
 8015bc0:	425e      	negs	r6, r3
 8015bc2:	4b9b      	ldr	r3, [pc, #620]	; (8015e30 <_dtoa_r+0x618>)
 8015bc4:	f006 020f 	and.w	r2, r6, #15
 8015bc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bd0:	ec51 0b19 	vmov	r0, r1, d9
 8015bd4:	f7ea fd28 	bl	8000628 <__aeabi_dmul>
 8015bd8:	1136      	asrs	r6, r6, #4
 8015bda:	4682      	mov	sl, r0
 8015bdc:	468b      	mov	fp, r1
 8015bde:	2300      	movs	r3, #0
 8015be0:	2502      	movs	r5, #2
 8015be2:	2e00      	cmp	r6, #0
 8015be4:	d17a      	bne.n	8015cdc <_dtoa_r+0x4c4>
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d1d3      	bne.n	8015b92 <_dtoa_r+0x37a>
 8015bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	f000 8082 	beq.w	8015cf6 <_dtoa_r+0x4de>
 8015bf2:	4b91      	ldr	r3, [pc, #580]	; (8015e38 <_dtoa_r+0x620>)
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	4650      	mov	r0, sl
 8015bf8:	4659      	mov	r1, fp
 8015bfa:	f7ea ff87 	bl	8000b0c <__aeabi_dcmplt>
 8015bfe:	2800      	cmp	r0, #0
 8015c00:	d079      	beq.n	8015cf6 <_dtoa_r+0x4de>
 8015c02:	9b03      	ldr	r3, [sp, #12]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d076      	beq.n	8015cf6 <_dtoa_r+0x4de>
 8015c08:	9b02      	ldr	r3, [sp, #8]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	dd36      	ble.n	8015c7c <_dtoa_r+0x464>
 8015c0e:	9b00      	ldr	r3, [sp, #0]
 8015c10:	4650      	mov	r0, sl
 8015c12:	4659      	mov	r1, fp
 8015c14:	1e5f      	subs	r7, r3, #1
 8015c16:	2200      	movs	r2, #0
 8015c18:	4b88      	ldr	r3, [pc, #544]	; (8015e3c <_dtoa_r+0x624>)
 8015c1a:	f7ea fd05 	bl	8000628 <__aeabi_dmul>
 8015c1e:	9e02      	ldr	r6, [sp, #8]
 8015c20:	4682      	mov	sl, r0
 8015c22:	468b      	mov	fp, r1
 8015c24:	3501      	adds	r5, #1
 8015c26:	4628      	mov	r0, r5
 8015c28:	f7ea fc94 	bl	8000554 <__aeabi_i2d>
 8015c2c:	4652      	mov	r2, sl
 8015c2e:	465b      	mov	r3, fp
 8015c30:	f7ea fcfa 	bl	8000628 <__aeabi_dmul>
 8015c34:	4b82      	ldr	r3, [pc, #520]	; (8015e40 <_dtoa_r+0x628>)
 8015c36:	2200      	movs	r2, #0
 8015c38:	f7ea fb40 	bl	80002bc <__adddf3>
 8015c3c:	46d0      	mov	r8, sl
 8015c3e:	46d9      	mov	r9, fp
 8015c40:	4682      	mov	sl, r0
 8015c42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015c46:	2e00      	cmp	r6, #0
 8015c48:	d158      	bne.n	8015cfc <_dtoa_r+0x4e4>
 8015c4a:	4b7e      	ldr	r3, [pc, #504]	; (8015e44 <_dtoa_r+0x62c>)
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	4640      	mov	r0, r8
 8015c50:	4649      	mov	r1, r9
 8015c52:	f7ea fb31 	bl	80002b8 <__aeabi_dsub>
 8015c56:	4652      	mov	r2, sl
 8015c58:	465b      	mov	r3, fp
 8015c5a:	4680      	mov	r8, r0
 8015c5c:	4689      	mov	r9, r1
 8015c5e:	f7ea ff73 	bl	8000b48 <__aeabi_dcmpgt>
 8015c62:	2800      	cmp	r0, #0
 8015c64:	f040 8295 	bne.w	8016192 <_dtoa_r+0x97a>
 8015c68:	4652      	mov	r2, sl
 8015c6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015c6e:	4640      	mov	r0, r8
 8015c70:	4649      	mov	r1, r9
 8015c72:	f7ea ff4b 	bl	8000b0c <__aeabi_dcmplt>
 8015c76:	2800      	cmp	r0, #0
 8015c78:	f040 8289 	bne.w	801618e <_dtoa_r+0x976>
 8015c7c:	ec5b ab19 	vmov	sl, fp, d9
 8015c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	f2c0 8148 	blt.w	8015f18 <_dtoa_r+0x700>
 8015c88:	9a00      	ldr	r2, [sp, #0]
 8015c8a:	2a0e      	cmp	r2, #14
 8015c8c:	f300 8144 	bgt.w	8015f18 <_dtoa_r+0x700>
 8015c90:	4b67      	ldr	r3, [pc, #412]	; (8015e30 <_dtoa_r+0x618>)
 8015c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	f280 80d5 	bge.w	8015e4c <_dtoa_r+0x634>
 8015ca2:	9b03      	ldr	r3, [sp, #12]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	f300 80d1 	bgt.w	8015e4c <_dtoa_r+0x634>
 8015caa:	f040 826f 	bne.w	801618c <_dtoa_r+0x974>
 8015cae:	4b65      	ldr	r3, [pc, #404]	; (8015e44 <_dtoa_r+0x62c>)
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	4640      	mov	r0, r8
 8015cb4:	4649      	mov	r1, r9
 8015cb6:	f7ea fcb7 	bl	8000628 <__aeabi_dmul>
 8015cba:	4652      	mov	r2, sl
 8015cbc:	465b      	mov	r3, fp
 8015cbe:	f7ea ff39 	bl	8000b34 <__aeabi_dcmpge>
 8015cc2:	9e03      	ldr	r6, [sp, #12]
 8015cc4:	4637      	mov	r7, r6
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	f040 8245 	bne.w	8016156 <_dtoa_r+0x93e>
 8015ccc:	9d01      	ldr	r5, [sp, #4]
 8015cce:	2331      	movs	r3, #49	; 0x31
 8015cd0:	f805 3b01 	strb.w	r3, [r5], #1
 8015cd4:	9b00      	ldr	r3, [sp, #0]
 8015cd6:	3301      	adds	r3, #1
 8015cd8:	9300      	str	r3, [sp, #0]
 8015cda:	e240      	b.n	801615e <_dtoa_r+0x946>
 8015cdc:	07f2      	lsls	r2, r6, #31
 8015cde:	d505      	bpl.n	8015cec <_dtoa_r+0x4d4>
 8015ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015ce4:	f7ea fca0 	bl	8000628 <__aeabi_dmul>
 8015ce8:	3501      	adds	r5, #1
 8015cea:	2301      	movs	r3, #1
 8015cec:	1076      	asrs	r6, r6, #1
 8015cee:	3708      	adds	r7, #8
 8015cf0:	e777      	b.n	8015be2 <_dtoa_r+0x3ca>
 8015cf2:	2502      	movs	r5, #2
 8015cf4:	e779      	b.n	8015bea <_dtoa_r+0x3d2>
 8015cf6:	9f00      	ldr	r7, [sp, #0]
 8015cf8:	9e03      	ldr	r6, [sp, #12]
 8015cfa:	e794      	b.n	8015c26 <_dtoa_r+0x40e>
 8015cfc:	9901      	ldr	r1, [sp, #4]
 8015cfe:	4b4c      	ldr	r3, [pc, #304]	; (8015e30 <_dtoa_r+0x618>)
 8015d00:	4431      	add	r1, r6
 8015d02:	910d      	str	r1, [sp, #52]	; 0x34
 8015d04:	9908      	ldr	r1, [sp, #32]
 8015d06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015d0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015d0e:	2900      	cmp	r1, #0
 8015d10:	d043      	beq.n	8015d9a <_dtoa_r+0x582>
 8015d12:	494d      	ldr	r1, [pc, #308]	; (8015e48 <_dtoa_r+0x630>)
 8015d14:	2000      	movs	r0, #0
 8015d16:	f7ea fdb1 	bl	800087c <__aeabi_ddiv>
 8015d1a:	4652      	mov	r2, sl
 8015d1c:	465b      	mov	r3, fp
 8015d1e:	f7ea facb 	bl	80002b8 <__aeabi_dsub>
 8015d22:	9d01      	ldr	r5, [sp, #4]
 8015d24:	4682      	mov	sl, r0
 8015d26:	468b      	mov	fp, r1
 8015d28:	4649      	mov	r1, r9
 8015d2a:	4640      	mov	r0, r8
 8015d2c:	f7ea ff2c 	bl	8000b88 <__aeabi_d2iz>
 8015d30:	4606      	mov	r6, r0
 8015d32:	f7ea fc0f 	bl	8000554 <__aeabi_i2d>
 8015d36:	4602      	mov	r2, r0
 8015d38:	460b      	mov	r3, r1
 8015d3a:	4640      	mov	r0, r8
 8015d3c:	4649      	mov	r1, r9
 8015d3e:	f7ea fabb 	bl	80002b8 <__aeabi_dsub>
 8015d42:	3630      	adds	r6, #48	; 0x30
 8015d44:	f805 6b01 	strb.w	r6, [r5], #1
 8015d48:	4652      	mov	r2, sl
 8015d4a:	465b      	mov	r3, fp
 8015d4c:	4680      	mov	r8, r0
 8015d4e:	4689      	mov	r9, r1
 8015d50:	f7ea fedc 	bl	8000b0c <__aeabi_dcmplt>
 8015d54:	2800      	cmp	r0, #0
 8015d56:	d163      	bne.n	8015e20 <_dtoa_r+0x608>
 8015d58:	4642      	mov	r2, r8
 8015d5a:	464b      	mov	r3, r9
 8015d5c:	4936      	ldr	r1, [pc, #216]	; (8015e38 <_dtoa_r+0x620>)
 8015d5e:	2000      	movs	r0, #0
 8015d60:	f7ea faaa 	bl	80002b8 <__aeabi_dsub>
 8015d64:	4652      	mov	r2, sl
 8015d66:	465b      	mov	r3, fp
 8015d68:	f7ea fed0 	bl	8000b0c <__aeabi_dcmplt>
 8015d6c:	2800      	cmp	r0, #0
 8015d6e:	f040 80b5 	bne.w	8015edc <_dtoa_r+0x6c4>
 8015d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d74:	429d      	cmp	r5, r3
 8015d76:	d081      	beq.n	8015c7c <_dtoa_r+0x464>
 8015d78:	4b30      	ldr	r3, [pc, #192]	; (8015e3c <_dtoa_r+0x624>)
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	4650      	mov	r0, sl
 8015d7e:	4659      	mov	r1, fp
 8015d80:	f7ea fc52 	bl	8000628 <__aeabi_dmul>
 8015d84:	4b2d      	ldr	r3, [pc, #180]	; (8015e3c <_dtoa_r+0x624>)
 8015d86:	4682      	mov	sl, r0
 8015d88:	468b      	mov	fp, r1
 8015d8a:	4640      	mov	r0, r8
 8015d8c:	4649      	mov	r1, r9
 8015d8e:	2200      	movs	r2, #0
 8015d90:	f7ea fc4a 	bl	8000628 <__aeabi_dmul>
 8015d94:	4680      	mov	r8, r0
 8015d96:	4689      	mov	r9, r1
 8015d98:	e7c6      	b.n	8015d28 <_dtoa_r+0x510>
 8015d9a:	4650      	mov	r0, sl
 8015d9c:	4659      	mov	r1, fp
 8015d9e:	f7ea fc43 	bl	8000628 <__aeabi_dmul>
 8015da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015da4:	9d01      	ldr	r5, [sp, #4]
 8015da6:	930f      	str	r3, [sp, #60]	; 0x3c
 8015da8:	4682      	mov	sl, r0
 8015daa:	468b      	mov	fp, r1
 8015dac:	4649      	mov	r1, r9
 8015dae:	4640      	mov	r0, r8
 8015db0:	f7ea feea 	bl	8000b88 <__aeabi_d2iz>
 8015db4:	4606      	mov	r6, r0
 8015db6:	f7ea fbcd 	bl	8000554 <__aeabi_i2d>
 8015dba:	3630      	adds	r6, #48	; 0x30
 8015dbc:	4602      	mov	r2, r0
 8015dbe:	460b      	mov	r3, r1
 8015dc0:	4640      	mov	r0, r8
 8015dc2:	4649      	mov	r1, r9
 8015dc4:	f7ea fa78 	bl	80002b8 <__aeabi_dsub>
 8015dc8:	f805 6b01 	strb.w	r6, [r5], #1
 8015dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dce:	429d      	cmp	r5, r3
 8015dd0:	4680      	mov	r8, r0
 8015dd2:	4689      	mov	r9, r1
 8015dd4:	f04f 0200 	mov.w	r2, #0
 8015dd8:	d124      	bne.n	8015e24 <_dtoa_r+0x60c>
 8015dda:	4b1b      	ldr	r3, [pc, #108]	; (8015e48 <_dtoa_r+0x630>)
 8015ddc:	4650      	mov	r0, sl
 8015dde:	4659      	mov	r1, fp
 8015de0:	f7ea fa6c 	bl	80002bc <__adddf3>
 8015de4:	4602      	mov	r2, r0
 8015de6:	460b      	mov	r3, r1
 8015de8:	4640      	mov	r0, r8
 8015dea:	4649      	mov	r1, r9
 8015dec:	f7ea feac 	bl	8000b48 <__aeabi_dcmpgt>
 8015df0:	2800      	cmp	r0, #0
 8015df2:	d173      	bne.n	8015edc <_dtoa_r+0x6c4>
 8015df4:	4652      	mov	r2, sl
 8015df6:	465b      	mov	r3, fp
 8015df8:	4913      	ldr	r1, [pc, #76]	; (8015e48 <_dtoa_r+0x630>)
 8015dfa:	2000      	movs	r0, #0
 8015dfc:	f7ea fa5c 	bl	80002b8 <__aeabi_dsub>
 8015e00:	4602      	mov	r2, r0
 8015e02:	460b      	mov	r3, r1
 8015e04:	4640      	mov	r0, r8
 8015e06:	4649      	mov	r1, r9
 8015e08:	f7ea fe80 	bl	8000b0c <__aeabi_dcmplt>
 8015e0c:	2800      	cmp	r0, #0
 8015e0e:	f43f af35 	beq.w	8015c7c <_dtoa_r+0x464>
 8015e12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015e14:	1e6b      	subs	r3, r5, #1
 8015e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015e1c:	2b30      	cmp	r3, #48	; 0x30
 8015e1e:	d0f8      	beq.n	8015e12 <_dtoa_r+0x5fa>
 8015e20:	9700      	str	r7, [sp, #0]
 8015e22:	e049      	b.n	8015eb8 <_dtoa_r+0x6a0>
 8015e24:	4b05      	ldr	r3, [pc, #20]	; (8015e3c <_dtoa_r+0x624>)
 8015e26:	f7ea fbff 	bl	8000628 <__aeabi_dmul>
 8015e2a:	4680      	mov	r8, r0
 8015e2c:	4689      	mov	r9, r1
 8015e2e:	e7bd      	b.n	8015dac <_dtoa_r+0x594>
 8015e30:	0801a920 	.word	0x0801a920
 8015e34:	0801a8f8 	.word	0x0801a8f8
 8015e38:	3ff00000 	.word	0x3ff00000
 8015e3c:	40240000 	.word	0x40240000
 8015e40:	401c0000 	.word	0x401c0000
 8015e44:	40140000 	.word	0x40140000
 8015e48:	3fe00000 	.word	0x3fe00000
 8015e4c:	9d01      	ldr	r5, [sp, #4]
 8015e4e:	4656      	mov	r6, sl
 8015e50:	465f      	mov	r7, fp
 8015e52:	4642      	mov	r2, r8
 8015e54:	464b      	mov	r3, r9
 8015e56:	4630      	mov	r0, r6
 8015e58:	4639      	mov	r1, r7
 8015e5a:	f7ea fd0f 	bl	800087c <__aeabi_ddiv>
 8015e5e:	f7ea fe93 	bl	8000b88 <__aeabi_d2iz>
 8015e62:	4682      	mov	sl, r0
 8015e64:	f7ea fb76 	bl	8000554 <__aeabi_i2d>
 8015e68:	4642      	mov	r2, r8
 8015e6a:	464b      	mov	r3, r9
 8015e6c:	f7ea fbdc 	bl	8000628 <__aeabi_dmul>
 8015e70:	4602      	mov	r2, r0
 8015e72:	460b      	mov	r3, r1
 8015e74:	4630      	mov	r0, r6
 8015e76:	4639      	mov	r1, r7
 8015e78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015e7c:	f7ea fa1c 	bl	80002b8 <__aeabi_dsub>
 8015e80:	f805 6b01 	strb.w	r6, [r5], #1
 8015e84:	9e01      	ldr	r6, [sp, #4]
 8015e86:	9f03      	ldr	r7, [sp, #12]
 8015e88:	1bae      	subs	r6, r5, r6
 8015e8a:	42b7      	cmp	r7, r6
 8015e8c:	4602      	mov	r2, r0
 8015e8e:	460b      	mov	r3, r1
 8015e90:	d135      	bne.n	8015efe <_dtoa_r+0x6e6>
 8015e92:	f7ea fa13 	bl	80002bc <__adddf3>
 8015e96:	4642      	mov	r2, r8
 8015e98:	464b      	mov	r3, r9
 8015e9a:	4606      	mov	r6, r0
 8015e9c:	460f      	mov	r7, r1
 8015e9e:	f7ea fe53 	bl	8000b48 <__aeabi_dcmpgt>
 8015ea2:	b9d0      	cbnz	r0, 8015eda <_dtoa_r+0x6c2>
 8015ea4:	4642      	mov	r2, r8
 8015ea6:	464b      	mov	r3, r9
 8015ea8:	4630      	mov	r0, r6
 8015eaa:	4639      	mov	r1, r7
 8015eac:	f7ea fe24 	bl	8000af8 <__aeabi_dcmpeq>
 8015eb0:	b110      	cbz	r0, 8015eb8 <_dtoa_r+0x6a0>
 8015eb2:	f01a 0f01 	tst.w	sl, #1
 8015eb6:	d110      	bne.n	8015eda <_dtoa_r+0x6c2>
 8015eb8:	4620      	mov	r0, r4
 8015eba:	ee18 1a10 	vmov	r1, s16
 8015ebe:	f000 fafb 	bl	80164b8 <_Bfree>
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	9800      	ldr	r0, [sp, #0]
 8015ec6:	702b      	strb	r3, [r5, #0]
 8015ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015eca:	3001      	adds	r0, #1
 8015ecc:	6018      	str	r0, [r3, #0]
 8015ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	f43f acf1 	beq.w	80158b8 <_dtoa_r+0xa0>
 8015ed6:	601d      	str	r5, [r3, #0]
 8015ed8:	e4ee      	b.n	80158b8 <_dtoa_r+0xa0>
 8015eda:	9f00      	ldr	r7, [sp, #0]
 8015edc:	462b      	mov	r3, r5
 8015ede:	461d      	mov	r5, r3
 8015ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015ee4:	2a39      	cmp	r2, #57	; 0x39
 8015ee6:	d106      	bne.n	8015ef6 <_dtoa_r+0x6de>
 8015ee8:	9a01      	ldr	r2, [sp, #4]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d1f7      	bne.n	8015ede <_dtoa_r+0x6c6>
 8015eee:	9901      	ldr	r1, [sp, #4]
 8015ef0:	2230      	movs	r2, #48	; 0x30
 8015ef2:	3701      	adds	r7, #1
 8015ef4:	700a      	strb	r2, [r1, #0]
 8015ef6:	781a      	ldrb	r2, [r3, #0]
 8015ef8:	3201      	adds	r2, #1
 8015efa:	701a      	strb	r2, [r3, #0]
 8015efc:	e790      	b.n	8015e20 <_dtoa_r+0x608>
 8015efe:	4ba6      	ldr	r3, [pc, #664]	; (8016198 <_dtoa_r+0x980>)
 8015f00:	2200      	movs	r2, #0
 8015f02:	f7ea fb91 	bl	8000628 <__aeabi_dmul>
 8015f06:	2200      	movs	r2, #0
 8015f08:	2300      	movs	r3, #0
 8015f0a:	4606      	mov	r6, r0
 8015f0c:	460f      	mov	r7, r1
 8015f0e:	f7ea fdf3 	bl	8000af8 <__aeabi_dcmpeq>
 8015f12:	2800      	cmp	r0, #0
 8015f14:	d09d      	beq.n	8015e52 <_dtoa_r+0x63a>
 8015f16:	e7cf      	b.n	8015eb8 <_dtoa_r+0x6a0>
 8015f18:	9a08      	ldr	r2, [sp, #32]
 8015f1a:	2a00      	cmp	r2, #0
 8015f1c:	f000 80d7 	beq.w	80160ce <_dtoa_r+0x8b6>
 8015f20:	9a06      	ldr	r2, [sp, #24]
 8015f22:	2a01      	cmp	r2, #1
 8015f24:	f300 80ba 	bgt.w	801609c <_dtoa_r+0x884>
 8015f28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f2a:	2a00      	cmp	r2, #0
 8015f2c:	f000 80b2 	beq.w	8016094 <_dtoa_r+0x87c>
 8015f30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015f34:	9e07      	ldr	r6, [sp, #28]
 8015f36:	9d04      	ldr	r5, [sp, #16]
 8015f38:	9a04      	ldr	r2, [sp, #16]
 8015f3a:	441a      	add	r2, r3
 8015f3c:	9204      	str	r2, [sp, #16]
 8015f3e:	9a05      	ldr	r2, [sp, #20]
 8015f40:	2101      	movs	r1, #1
 8015f42:	441a      	add	r2, r3
 8015f44:	4620      	mov	r0, r4
 8015f46:	9205      	str	r2, [sp, #20]
 8015f48:	f000 fb6e 	bl	8016628 <__i2b>
 8015f4c:	4607      	mov	r7, r0
 8015f4e:	2d00      	cmp	r5, #0
 8015f50:	dd0c      	ble.n	8015f6c <_dtoa_r+0x754>
 8015f52:	9b05      	ldr	r3, [sp, #20]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	dd09      	ble.n	8015f6c <_dtoa_r+0x754>
 8015f58:	42ab      	cmp	r3, r5
 8015f5a:	9a04      	ldr	r2, [sp, #16]
 8015f5c:	bfa8      	it	ge
 8015f5e:	462b      	movge	r3, r5
 8015f60:	1ad2      	subs	r2, r2, r3
 8015f62:	9204      	str	r2, [sp, #16]
 8015f64:	9a05      	ldr	r2, [sp, #20]
 8015f66:	1aed      	subs	r5, r5, r3
 8015f68:	1ad3      	subs	r3, r2, r3
 8015f6a:	9305      	str	r3, [sp, #20]
 8015f6c:	9b07      	ldr	r3, [sp, #28]
 8015f6e:	b31b      	cbz	r3, 8015fb8 <_dtoa_r+0x7a0>
 8015f70:	9b08      	ldr	r3, [sp, #32]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	f000 80af 	beq.w	80160d6 <_dtoa_r+0x8be>
 8015f78:	2e00      	cmp	r6, #0
 8015f7a:	dd13      	ble.n	8015fa4 <_dtoa_r+0x78c>
 8015f7c:	4639      	mov	r1, r7
 8015f7e:	4632      	mov	r2, r6
 8015f80:	4620      	mov	r0, r4
 8015f82:	f000 fc11 	bl	80167a8 <__pow5mult>
 8015f86:	ee18 2a10 	vmov	r2, s16
 8015f8a:	4601      	mov	r1, r0
 8015f8c:	4607      	mov	r7, r0
 8015f8e:	4620      	mov	r0, r4
 8015f90:	f000 fb60 	bl	8016654 <__multiply>
 8015f94:	ee18 1a10 	vmov	r1, s16
 8015f98:	4680      	mov	r8, r0
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f000 fa8c 	bl	80164b8 <_Bfree>
 8015fa0:	ee08 8a10 	vmov	s16, r8
 8015fa4:	9b07      	ldr	r3, [sp, #28]
 8015fa6:	1b9a      	subs	r2, r3, r6
 8015fa8:	d006      	beq.n	8015fb8 <_dtoa_r+0x7a0>
 8015faa:	ee18 1a10 	vmov	r1, s16
 8015fae:	4620      	mov	r0, r4
 8015fb0:	f000 fbfa 	bl	80167a8 <__pow5mult>
 8015fb4:	ee08 0a10 	vmov	s16, r0
 8015fb8:	2101      	movs	r1, #1
 8015fba:	4620      	mov	r0, r4
 8015fbc:	f000 fb34 	bl	8016628 <__i2b>
 8015fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	4606      	mov	r6, r0
 8015fc6:	f340 8088 	ble.w	80160da <_dtoa_r+0x8c2>
 8015fca:	461a      	mov	r2, r3
 8015fcc:	4601      	mov	r1, r0
 8015fce:	4620      	mov	r0, r4
 8015fd0:	f000 fbea 	bl	80167a8 <__pow5mult>
 8015fd4:	9b06      	ldr	r3, [sp, #24]
 8015fd6:	2b01      	cmp	r3, #1
 8015fd8:	4606      	mov	r6, r0
 8015fda:	f340 8081 	ble.w	80160e0 <_dtoa_r+0x8c8>
 8015fde:	f04f 0800 	mov.w	r8, #0
 8015fe2:	6933      	ldr	r3, [r6, #16]
 8015fe4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015fe8:	6918      	ldr	r0, [r3, #16]
 8015fea:	f000 facd 	bl	8016588 <__hi0bits>
 8015fee:	f1c0 0020 	rsb	r0, r0, #32
 8015ff2:	9b05      	ldr	r3, [sp, #20]
 8015ff4:	4418      	add	r0, r3
 8015ff6:	f010 001f 	ands.w	r0, r0, #31
 8015ffa:	f000 8092 	beq.w	8016122 <_dtoa_r+0x90a>
 8015ffe:	f1c0 0320 	rsb	r3, r0, #32
 8016002:	2b04      	cmp	r3, #4
 8016004:	f340 808a 	ble.w	801611c <_dtoa_r+0x904>
 8016008:	f1c0 001c 	rsb	r0, r0, #28
 801600c:	9b04      	ldr	r3, [sp, #16]
 801600e:	4403      	add	r3, r0
 8016010:	9304      	str	r3, [sp, #16]
 8016012:	9b05      	ldr	r3, [sp, #20]
 8016014:	4403      	add	r3, r0
 8016016:	4405      	add	r5, r0
 8016018:	9305      	str	r3, [sp, #20]
 801601a:	9b04      	ldr	r3, [sp, #16]
 801601c:	2b00      	cmp	r3, #0
 801601e:	dd07      	ble.n	8016030 <_dtoa_r+0x818>
 8016020:	ee18 1a10 	vmov	r1, s16
 8016024:	461a      	mov	r2, r3
 8016026:	4620      	mov	r0, r4
 8016028:	f000 fc18 	bl	801685c <__lshift>
 801602c:	ee08 0a10 	vmov	s16, r0
 8016030:	9b05      	ldr	r3, [sp, #20]
 8016032:	2b00      	cmp	r3, #0
 8016034:	dd05      	ble.n	8016042 <_dtoa_r+0x82a>
 8016036:	4631      	mov	r1, r6
 8016038:	461a      	mov	r2, r3
 801603a:	4620      	mov	r0, r4
 801603c:	f000 fc0e 	bl	801685c <__lshift>
 8016040:	4606      	mov	r6, r0
 8016042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016044:	2b00      	cmp	r3, #0
 8016046:	d06e      	beq.n	8016126 <_dtoa_r+0x90e>
 8016048:	ee18 0a10 	vmov	r0, s16
 801604c:	4631      	mov	r1, r6
 801604e:	f000 fc75 	bl	801693c <__mcmp>
 8016052:	2800      	cmp	r0, #0
 8016054:	da67      	bge.n	8016126 <_dtoa_r+0x90e>
 8016056:	9b00      	ldr	r3, [sp, #0]
 8016058:	3b01      	subs	r3, #1
 801605a:	ee18 1a10 	vmov	r1, s16
 801605e:	9300      	str	r3, [sp, #0]
 8016060:	220a      	movs	r2, #10
 8016062:	2300      	movs	r3, #0
 8016064:	4620      	mov	r0, r4
 8016066:	f000 fa49 	bl	80164fc <__multadd>
 801606a:	9b08      	ldr	r3, [sp, #32]
 801606c:	ee08 0a10 	vmov	s16, r0
 8016070:	2b00      	cmp	r3, #0
 8016072:	f000 81b1 	beq.w	80163d8 <_dtoa_r+0xbc0>
 8016076:	2300      	movs	r3, #0
 8016078:	4639      	mov	r1, r7
 801607a:	220a      	movs	r2, #10
 801607c:	4620      	mov	r0, r4
 801607e:	f000 fa3d 	bl	80164fc <__multadd>
 8016082:	9b02      	ldr	r3, [sp, #8]
 8016084:	2b00      	cmp	r3, #0
 8016086:	4607      	mov	r7, r0
 8016088:	f300 808e 	bgt.w	80161a8 <_dtoa_r+0x990>
 801608c:	9b06      	ldr	r3, [sp, #24]
 801608e:	2b02      	cmp	r3, #2
 8016090:	dc51      	bgt.n	8016136 <_dtoa_r+0x91e>
 8016092:	e089      	b.n	80161a8 <_dtoa_r+0x990>
 8016094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016096:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801609a:	e74b      	b.n	8015f34 <_dtoa_r+0x71c>
 801609c:	9b03      	ldr	r3, [sp, #12]
 801609e:	1e5e      	subs	r6, r3, #1
 80160a0:	9b07      	ldr	r3, [sp, #28]
 80160a2:	42b3      	cmp	r3, r6
 80160a4:	bfbf      	itttt	lt
 80160a6:	9b07      	ldrlt	r3, [sp, #28]
 80160a8:	9607      	strlt	r6, [sp, #28]
 80160aa:	1af2      	sublt	r2, r6, r3
 80160ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80160ae:	bfb6      	itet	lt
 80160b0:	189b      	addlt	r3, r3, r2
 80160b2:	1b9e      	subge	r6, r3, r6
 80160b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80160b6:	9b03      	ldr	r3, [sp, #12]
 80160b8:	bfb8      	it	lt
 80160ba:	2600      	movlt	r6, #0
 80160bc:	2b00      	cmp	r3, #0
 80160be:	bfb7      	itett	lt
 80160c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80160c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80160c8:	1a9d      	sublt	r5, r3, r2
 80160ca:	2300      	movlt	r3, #0
 80160cc:	e734      	b.n	8015f38 <_dtoa_r+0x720>
 80160ce:	9e07      	ldr	r6, [sp, #28]
 80160d0:	9d04      	ldr	r5, [sp, #16]
 80160d2:	9f08      	ldr	r7, [sp, #32]
 80160d4:	e73b      	b.n	8015f4e <_dtoa_r+0x736>
 80160d6:	9a07      	ldr	r2, [sp, #28]
 80160d8:	e767      	b.n	8015faa <_dtoa_r+0x792>
 80160da:	9b06      	ldr	r3, [sp, #24]
 80160dc:	2b01      	cmp	r3, #1
 80160de:	dc18      	bgt.n	8016112 <_dtoa_r+0x8fa>
 80160e0:	f1ba 0f00 	cmp.w	sl, #0
 80160e4:	d115      	bne.n	8016112 <_dtoa_r+0x8fa>
 80160e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80160ea:	b993      	cbnz	r3, 8016112 <_dtoa_r+0x8fa>
 80160ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80160f0:	0d1b      	lsrs	r3, r3, #20
 80160f2:	051b      	lsls	r3, r3, #20
 80160f4:	b183      	cbz	r3, 8016118 <_dtoa_r+0x900>
 80160f6:	9b04      	ldr	r3, [sp, #16]
 80160f8:	3301      	adds	r3, #1
 80160fa:	9304      	str	r3, [sp, #16]
 80160fc:	9b05      	ldr	r3, [sp, #20]
 80160fe:	3301      	adds	r3, #1
 8016100:	9305      	str	r3, [sp, #20]
 8016102:	f04f 0801 	mov.w	r8, #1
 8016106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016108:	2b00      	cmp	r3, #0
 801610a:	f47f af6a 	bne.w	8015fe2 <_dtoa_r+0x7ca>
 801610e:	2001      	movs	r0, #1
 8016110:	e76f      	b.n	8015ff2 <_dtoa_r+0x7da>
 8016112:	f04f 0800 	mov.w	r8, #0
 8016116:	e7f6      	b.n	8016106 <_dtoa_r+0x8ee>
 8016118:	4698      	mov	r8, r3
 801611a:	e7f4      	b.n	8016106 <_dtoa_r+0x8ee>
 801611c:	f43f af7d 	beq.w	801601a <_dtoa_r+0x802>
 8016120:	4618      	mov	r0, r3
 8016122:	301c      	adds	r0, #28
 8016124:	e772      	b.n	801600c <_dtoa_r+0x7f4>
 8016126:	9b03      	ldr	r3, [sp, #12]
 8016128:	2b00      	cmp	r3, #0
 801612a:	dc37      	bgt.n	801619c <_dtoa_r+0x984>
 801612c:	9b06      	ldr	r3, [sp, #24]
 801612e:	2b02      	cmp	r3, #2
 8016130:	dd34      	ble.n	801619c <_dtoa_r+0x984>
 8016132:	9b03      	ldr	r3, [sp, #12]
 8016134:	9302      	str	r3, [sp, #8]
 8016136:	9b02      	ldr	r3, [sp, #8]
 8016138:	b96b      	cbnz	r3, 8016156 <_dtoa_r+0x93e>
 801613a:	4631      	mov	r1, r6
 801613c:	2205      	movs	r2, #5
 801613e:	4620      	mov	r0, r4
 8016140:	f000 f9dc 	bl	80164fc <__multadd>
 8016144:	4601      	mov	r1, r0
 8016146:	4606      	mov	r6, r0
 8016148:	ee18 0a10 	vmov	r0, s16
 801614c:	f000 fbf6 	bl	801693c <__mcmp>
 8016150:	2800      	cmp	r0, #0
 8016152:	f73f adbb 	bgt.w	8015ccc <_dtoa_r+0x4b4>
 8016156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016158:	9d01      	ldr	r5, [sp, #4]
 801615a:	43db      	mvns	r3, r3
 801615c:	9300      	str	r3, [sp, #0]
 801615e:	f04f 0800 	mov.w	r8, #0
 8016162:	4631      	mov	r1, r6
 8016164:	4620      	mov	r0, r4
 8016166:	f000 f9a7 	bl	80164b8 <_Bfree>
 801616a:	2f00      	cmp	r7, #0
 801616c:	f43f aea4 	beq.w	8015eb8 <_dtoa_r+0x6a0>
 8016170:	f1b8 0f00 	cmp.w	r8, #0
 8016174:	d005      	beq.n	8016182 <_dtoa_r+0x96a>
 8016176:	45b8      	cmp	r8, r7
 8016178:	d003      	beq.n	8016182 <_dtoa_r+0x96a>
 801617a:	4641      	mov	r1, r8
 801617c:	4620      	mov	r0, r4
 801617e:	f000 f99b 	bl	80164b8 <_Bfree>
 8016182:	4639      	mov	r1, r7
 8016184:	4620      	mov	r0, r4
 8016186:	f000 f997 	bl	80164b8 <_Bfree>
 801618a:	e695      	b.n	8015eb8 <_dtoa_r+0x6a0>
 801618c:	2600      	movs	r6, #0
 801618e:	4637      	mov	r7, r6
 8016190:	e7e1      	b.n	8016156 <_dtoa_r+0x93e>
 8016192:	9700      	str	r7, [sp, #0]
 8016194:	4637      	mov	r7, r6
 8016196:	e599      	b.n	8015ccc <_dtoa_r+0x4b4>
 8016198:	40240000 	.word	0x40240000
 801619c:	9b08      	ldr	r3, [sp, #32]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	f000 80ca 	beq.w	8016338 <_dtoa_r+0xb20>
 80161a4:	9b03      	ldr	r3, [sp, #12]
 80161a6:	9302      	str	r3, [sp, #8]
 80161a8:	2d00      	cmp	r5, #0
 80161aa:	dd05      	ble.n	80161b8 <_dtoa_r+0x9a0>
 80161ac:	4639      	mov	r1, r7
 80161ae:	462a      	mov	r2, r5
 80161b0:	4620      	mov	r0, r4
 80161b2:	f000 fb53 	bl	801685c <__lshift>
 80161b6:	4607      	mov	r7, r0
 80161b8:	f1b8 0f00 	cmp.w	r8, #0
 80161bc:	d05b      	beq.n	8016276 <_dtoa_r+0xa5e>
 80161be:	6879      	ldr	r1, [r7, #4]
 80161c0:	4620      	mov	r0, r4
 80161c2:	f000 f939 	bl	8016438 <_Balloc>
 80161c6:	4605      	mov	r5, r0
 80161c8:	b928      	cbnz	r0, 80161d6 <_dtoa_r+0x9be>
 80161ca:	4b87      	ldr	r3, [pc, #540]	; (80163e8 <_dtoa_r+0xbd0>)
 80161cc:	4602      	mov	r2, r0
 80161ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80161d2:	f7ff bb3b 	b.w	801584c <_dtoa_r+0x34>
 80161d6:	693a      	ldr	r2, [r7, #16]
 80161d8:	3202      	adds	r2, #2
 80161da:	0092      	lsls	r2, r2, #2
 80161dc:	f107 010c 	add.w	r1, r7, #12
 80161e0:	300c      	adds	r0, #12
 80161e2:	f7fe fc61 	bl	8014aa8 <memcpy>
 80161e6:	2201      	movs	r2, #1
 80161e8:	4629      	mov	r1, r5
 80161ea:	4620      	mov	r0, r4
 80161ec:	f000 fb36 	bl	801685c <__lshift>
 80161f0:	9b01      	ldr	r3, [sp, #4]
 80161f2:	f103 0901 	add.w	r9, r3, #1
 80161f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80161fa:	4413      	add	r3, r2
 80161fc:	9305      	str	r3, [sp, #20]
 80161fe:	f00a 0301 	and.w	r3, sl, #1
 8016202:	46b8      	mov	r8, r7
 8016204:	9304      	str	r3, [sp, #16]
 8016206:	4607      	mov	r7, r0
 8016208:	4631      	mov	r1, r6
 801620a:	ee18 0a10 	vmov	r0, s16
 801620e:	f7ff fa77 	bl	8015700 <quorem>
 8016212:	4641      	mov	r1, r8
 8016214:	9002      	str	r0, [sp, #8]
 8016216:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801621a:	ee18 0a10 	vmov	r0, s16
 801621e:	f000 fb8d 	bl	801693c <__mcmp>
 8016222:	463a      	mov	r2, r7
 8016224:	9003      	str	r0, [sp, #12]
 8016226:	4631      	mov	r1, r6
 8016228:	4620      	mov	r0, r4
 801622a:	f000 fba3 	bl	8016974 <__mdiff>
 801622e:	68c2      	ldr	r2, [r0, #12]
 8016230:	f109 3bff 	add.w	fp, r9, #4294967295
 8016234:	4605      	mov	r5, r0
 8016236:	bb02      	cbnz	r2, 801627a <_dtoa_r+0xa62>
 8016238:	4601      	mov	r1, r0
 801623a:	ee18 0a10 	vmov	r0, s16
 801623e:	f000 fb7d 	bl	801693c <__mcmp>
 8016242:	4602      	mov	r2, r0
 8016244:	4629      	mov	r1, r5
 8016246:	4620      	mov	r0, r4
 8016248:	9207      	str	r2, [sp, #28]
 801624a:	f000 f935 	bl	80164b8 <_Bfree>
 801624e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016252:	ea43 0102 	orr.w	r1, r3, r2
 8016256:	9b04      	ldr	r3, [sp, #16]
 8016258:	430b      	orrs	r3, r1
 801625a:	464d      	mov	r5, r9
 801625c:	d10f      	bne.n	801627e <_dtoa_r+0xa66>
 801625e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016262:	d02a      	beq.n	80162ba <_dtoa_r+0xaa2>
 8016264:	9b03      	ldr	r3, [sp, #12]
 8016266:	2b00      	cmp	r3, #0
 8016268:	dd02      	ble.n	8016270 <_dtoa_r+0xa58>
 801626a:	9b02      	ldr	r3, [sp, #8]
 801626c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8016270:	f88b a000 	strb.w	sl, [fp]
 8016274:	e775      	b.n	8016162 <_dtoa_r+0x94a>
 8016276:	4638      	mov	r0, r7
 8016278:	e7ba      	b.n	80161f0 <_dtoa_r+0x9d8>
 801627a:	2201      	movs	r2, #1
 801627c:	e7e2      	b.n	8016244 <_dtoa_r+0xa2c>
 801627e:	9b03      	ldr	r3, [sp, #12]
 8016280:	2b00      	cmp	r3, #0
 8016282:	db04      	blt.n	801628e <_dtoa_r+0xa76>
 8016284:	9906      	ldr	r1, [sp, #24]
 8016286:	430b      	orrs	r3, r1
 8016288:	9904      	ldr	r1, [sp, #16]
 801628a:	430b      	orrs	r3, r1
 801628c:	d122      	bne.n	80162d4 <_dtoa_r+0xabc>
 801628e:	2a00      	cmp	r2, #0
 8016290:	ddee      	ble.n	8016270 <_dtoa_r+0xa58>
 8016292:	ee18 1a10 	vmov	r1, s16
 8016296:	2201      	movs	r2, #1
 8016298:	4620      	mov	r0, r4
 801629a:	f000 fadf 	bl	801685c <__lshift>
 801629e:	4631      	mov	r1, r6
 80162a0:	ee08 0a10 	vmov	s16, r0
 80162a4:	f000 fb4a 	bl	801693c <__mcmp>
 80162a8:	2800      	cmp	r0, #0
 80162aa:	dc03      	bgt.n	80162b4 <_dtoa_r+0xa9c>
 80162ac:	d1e0      	bne.n	8016270 <_dtoa_r+0xa58>
 80162ae:	f01a 0f01 	tst.w	sl, #1
 80162b2:	d0dd      	beq.n	8016270 <_dtoa_r+0xa58>
 80162b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80162b8:	d1d7      	bne.n	801626a <_dtoa_r+0xa52>
 80162ba:	2339      	movs	r3, #57	; 0x39
 80162bc:	f88b 3000 	strb.w	r3, [fp]
 80162c0:	462b      	mov	r3, r5
 80162c2:	461d      	mov	r5, r3
 80162c4:	3b01      	subs	r3, #1
 80162c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80162ca:	2a39      	cmp	r2, #57	; 0x39
 80162cc:	d071      	beq.n	80163b2 <_dtoa_r+0xb9a>
 80162ce:	3201      	adds	r2, #1
 80162d0:	701a      	strb	r2, [r3, #0]
 80162d2:	e746      	b.n	8016162 <_dtoa_r+0x94a>
 80162d4:	2a00      	cmp	r2, #0
 80162d6:	dd07      	ble.n	80162e8 <_dtoa_r+0xad0>
 80162d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80162dc:	d0ed      	beq.n	80162ba <_dtoa_r+0xaa2>
 80162de:	f10a 0301 	add.w	r3, sl, #1
 80162e2:	f88b 3000 	strb.w	r3, [fp]
 80162e6:	e73c      	b.n	8016162 <_dtoa_r+0x94a>
 80162e8:	9b05      	ldr	r3, [sp, #20]
 80162ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80162ee:	4599      	cmp	r9, r3
 80162f0:	d047      	beq.n	8016382 <_dtoa_r+0xb6a>
 80162f2:	ee18 1a10 	vmov	r1, s16
 80162f6:	2300      	movs	r3, #0
 80162f8:	220a      	movs	r2, #10
 80162fa:	4620      	mov	r0, r4
 80162fc:	f000 f8fe 	bl	80164fc <__multadd>
 8016300:	45b8      	cmp	r8, r7
 8016302:	ee08 0a10 	vmov	s16, r0
 8016306:	f04f 0300 	mov.w	r3, #0
 801630a:	f04f 020a 	mov.w	r2, #10
 801630e:	4641      	mov	r1, r8
 8016310:	4620      	mov	r0, r4
 8016312:	d106      	bne.n	8016322 <_dtoa_r+0xb0a>
 8016314:	f000 f8f2 	bl	80164fc <__multadd>
 8016318:	4680      	mov	r8, r0
 801631a:	4607      	mov	r7, r0
 801631c:	f109 0901 	add.w	r9, r9, #1
 8016320:	e772      	b.n	8016208 <_dtoa_r+0x9f0>
 8016322:	f000 f8eb 	bl	80164fc <__multadd>
 8016326:	4639      	mov	r1, r7
 8016328:	4680      	mov	r8, r0
 801632a:	2300      	movs	r3, #0
 801632c:	220a      	movs	r2, #10
 801632e:	4620      	mov	r0, r4
 8016330:	f000 f8e4 	bl	80164fc <__multadd>
 8016334:	4607      	mov	r7, r0
 8016336:	e7f1      	b.n	801631c <_dtoa_r+0xb04>
 8016338:	9b03      	ldr	r3, [sp, #12]
 801633a:	9302      	str	r3, [sp, #8]
 801633c:	9d01      	ldr	r5, [sp, #4]
 801633e:	ee18 0a10 	vmov	r0, s16
 8016342:	4631      	mov	r1, r6
 8016344:	f7ff f9dc 	bl	8015700 <quorem>
 8016348:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801634c:	9b01      	ldr	r3, [sp, #4]
 801634e:	f805 ab01 	strb.w	sl, [r5], #1
 8016352:	1aea      	subs	r2, r5, r3
 8016354:	9b02      	ldr	r3, [sp, #8]
 8016356:	4293      	cmp	r3, r2
 8016358:	dd09      	ble.n	801636e <_dtoa_r+0xb56>
 801635a:	ee18 1a10 	vmov	r1, s16
 801635e:	2300      	movs	r3, #0
 8016360:	220a      	movs	r2, #10
 8016362:	4620      	mov	r0, r4
 8016364:	f000 f8ca 	bl	80164fc <__multadd>
 8016368:	ee08 0a10 	vmov	s16, r0
 801636c:	e7e7      	b.n	801633e <_dtoa_r+0xb26>
 801636e:	9b02      	ldr	r3, [sp, #8]
 8016370:	2b00      	cmp	r3, #0
 8016372:	bfc8      	it	gt
 8016374:	461d      	movgt	r5, r3
 8016376:	9b01      	ldr	r3, [sp, #4]
 8016378:	bfd8      	it	le
 801637a:	2501      	movle	r5, #1
 801637c:	441d      	add	r5, r3
 801637e:	f04f 0800 	mov.w	r8, #0
 8016382:	ee18 1a10 	vmov	r1, s16
 8016386:	2201      	movs	r2, #1
 8016388:	4620      	mov	r0, r4
 801638a:	f000 fa67 	bl	801685c <__lshift>
 801638e:	4631      	mov	r1, r6
 8016390:	ee08 0a10 	vmov	s16, r0
 8016394:	f000 fad2 	bl	801693c <__mcmp>
 8016398:	2800      	cmp	r0, #0
 801639a:	dc91      	bgt.n	80162c0 <_dtoa_r+0xaa8>
 801639c:	d102      	bne.n	80163a4 <_dtoa_r+0xb8c>
 801639e:	f01a 0f01 	tst.w	sl, #1
 80163a2:	d18d      	bne.n	80162c0 <_dtoa_r+0xaa8>
 80163a4:	462b      	mov	r3, r5
 80163a6:	461d      	mov	r5, r3
 80163a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80163ac:	2a30      	cmp	r2, #48	; 0x30
 80163ae:	d0fa      	beq.n	80163a6 <_dtoa_r+0xb8e>
 80163b0:	e6d7      	b.n	8016162 <_dtoa_r+0x94a>
 80163b2:	9a01      	ldr	r2, [sp, #4]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d184      	bne.n	80162c2 <_dtoa_r+0xaaa>
 80163b8:	9b00      	ldr	r3, [sp, #0]
 80163ba:	3301      	adds	r3, #1
 80163bc:	9300      	str	r3, [sp, #0]
 80163be:	2331      	movs	r3, #49	; 0x31
 80163c0:	7013      	strb	r3, [r2, #0]
 80163c2:	e6ce      	b.n	8016162 <_dtoa_r+0x94a>
 80163c4:	4b09      	ldr	r3, [pc, #36]	; (80163ec <_dtoa_r+0xbd4>)
 80163c6:	f7ff ba95 	b.w	80158f4 <_dtoa_r+0xdc>
 80163ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	f47f aa6e 	bne.w	80158ae <_dtoa_r+0x96>
 80163d2:	4b07      	ldr	r3, [pc, #28]	; (80163f0 <_dtoa_r+0xbd8>)
 80163d4:	f7ff ba8e 	b.w	80158f4 <_dtoa_r+0xdc>
 80163d8:	9b02      	ldr	r3, [sp, #8]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	dcae      	bgt.n	801633c <_dtoa_r+0xb24>
 80163de:	9b06      	ldr	r3, [sp, #24]
 80163e0:	2b02      	cmp	r3, #2
 80163e2:	f73f aea8 	bgt.w	8016136 <_dtoa_r+0x91e>
 80163e6:	e7a9      	b.n	801633c <_dtoa_r+0xb24>
 80163e8:	0801a88a 	.word	0x0801a88a
 80163ec:	0801aa09 	.word	0x0801aa09
 80163f0:	0801a80b 	.word	0x0801a80b

080163f4 <_localeconv_r>:
 80163f4:	4800      	ldr	r0, [pc, #0]	; (80163f8 <_localeconv_r+0x4>)
 80163f6:	4770      	bx	lr
 80163f8:	20000474 	.word	0x20000474

080163fc <_lseek_r>:
 80163fc:	b538      	push	{r3, r4, r5, lr}
 80163fe:	4d07      	ldr	r5, [pc, #28]	; (801641c <_lseek_r+0x20>)
 8016400:	4604      	mov	r4, r0
 8016402:	4608      	mov	r0, r1
 8016404:	4611      	mov	r1, r2
 8016406:	2200      	movs	r2, #0
 8016408:	602a      	str	r2, [r5, #0]
 801640a:	461a      	mov	r2, r3
 801640c:	f7f5 fb9e 	bl	800bb4c <_lseek>
 8016410:	1c43      	adds	r3, r0, #1
 8016412:	d102      	bne.n	801641a <_lseek_r+0x1e>
 8016414:	682b      	ldr	r3, [r5, #0]
 8016416:	b103      	cbz	r3, 801641a <_lseek_r+0x1e>
 8016418:	6023      	str	r3, [r4, #0]
 801641a:	bd38      	pop	{r3, r4, r5, pc}
 801641c:	20006d50 	.word	0x20006d50

08016420 <__malloc_lock>:
 8016420:	4801      	ldr	r0, [pc, #4]	; (8016428 <__malloc_lock+0x8>)
 8016422:	f001 bb87 	b.w	8017b34 <__retarget_lock_acquire_recursive>
 8016426:	bf00      	nop
 8016428:	20006d54 	.word	0x20006d54

0801642c <__malloc_unlock>:
 801642c:	4801      	ldr	r0, [pc, #4]	; (8016434 <__malloc_unlock+0x8>)
 801642e:	f001 bb82 	b.w	8017b36 <__retarget_lock_release_recursive>
 8016432:	bf00      	nop
 8016434:	20006d54 	.word	0x20006d54

08016438 <_Balloc>:
 8016438:	b570      	push	{r4, r5, r6, lr}
 801643a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801643c:	4604      	mov	r4, r0
 801643e:	460d      	mov	r5, r1
 8016440:	b976      	cbnz	r6, 8016460 <_Balloc+0x28>
 8016442:	2010      	movs	r0, #16
 8016444:	f7fe fb20 	bl	8014a88 <malloc>
 8016448:	4602      	mov	r2, r0
 801644a:	6260      	str	r0, [r4, #36]	; 0x24
 801644c:	b920      	cbnz	r0, 8016458 <_Balloc+0x20>
 801644e:	4b18      	ldr	r3, [pc, #96]	; (80164b0 <_Balloc+0x78>)
 8016450:	4818      	ldr	r0, [pc, #96]	; (80164b4 <_Balloc+0x7c>)
 8016452:	2166      	movs	r1, #102	; 0x66
 8016454:	f001 f986 	bl	8017764 <__assert_func>
 8016458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801645c:	6006      	str	r6, [r0, #0]
 801645e:	60c6      	str	r6, [r0, #12]
 8016460:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016462:	68f3      	ldr	r3, [r6, #12]
 8016464:	b183      	cbz	r3, 8016488 <_Balloc+0x50>
 8016466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016468:	68db      	ldr	r3, [r3, #12]
 801646a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801646e:	b9b8      	cbnz	r0, 80164a0 <_Balloc+0x68>
 8016470:	2101      	movs	r1, #1
 8016472:	fa01 f605 	lsl.w	r6, r1, r5
 8016476:	1d72      	adds	r2, r6, #5
 8016478:	0092      	lsls	r2, r2, #2
 801647a:	4620      	mov	r0, r4
 801647c:	f000 fb60 	bl	8016b40 <_calloc_r>
 8016480:	b160      	cbz	r0, 801649c <_Balloc+0x64>
 8016482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016486:	e00e      	b.n	80164a6 <_Balloc+0x6e>
 8016488:	2221      	movs	r2, #33	; 0x21
 801648a:	2104      	movs	r1, #4
 801648c:	4620      	mov	r0, r4
 801648e:	f000 fb57 	bl	8016b40 <_calloc_r>
 8016492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016494:	60f0      	str	r0, [r6, #12]
 8016496:	68db      	ldr	r3, [r3, #12]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d1e4      	bne.n	8016466 <_Balloc+0x2e>
 801649c:	2000      	movs	r0, #0
 801649e:	bd70      	pop	{r4, r5, r6, pc}
 80164a0:	6802      	ldr	r2, [r0, #0]
 80164a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164a6:	2300      	movs	r3, #0
 80164a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80164ac:	e7f7      	b.n	801649e <_Balloc+0x66>
 80164ae:	bf00      	nop
 80164b0:	0801a818 	.word	0x0801a818
 80164b4:	0801a89b 	.word	0x0801a89b

080164b8 <_Bfree>:
 80164b8:	b570      	push	{r4, r5, r6, lr}
 80164ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80164bc:	4605      	mov	r5, r0
 80164be:	460c      	mov	r4, r1
 80164c0:	b976      	cbnz	r6, 80164e0 <_Bfree+0x28>
 80164c2:	2010      	movs	r0, #16
 80164c4:	f7fe fae0 	bl	8014a88 <malloc>
 80164c8:	4602      	mov	r2, r0
 80164ca:	6268      	str	r0, [r5, #36]	; 0x24
 80164cc:	b920      	cbnz	r0, 80164d8 <_Bfree+0x20>
 80164ce:	4b09      	ldr	r3, [pc, #36]	; (80164f4 <_Bfree+0x3c>)
 80164d0:	4809      	ldr	r0, [pc, #36]	; (80164f8 <_Bfree+0x40>)
 80164d2:	218a      	movs	r1, #138	; 0x8a
 80164d4:	f001 f946 	bl	8017764 <__assert_func>
 80164d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164dc:	6006      	str	r6, [r0, #0]
 80164de:	60c6      	str	r6, [r0, #12]
 80164e0:	b13c      	cbz	r4, 80164f2 <_Bfree+0x3a>
 80164e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80164e4:	6862      	ldr	r2, [r4, #4]
 80164e6:	68db      	ldr	r3, [r3, #12]
 80164e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80164ec:	6021      	str	r1, [r4, #0]
 80164ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80164f2:	bd70      	pop	{r4, r5, r6, pc}
 80164f4:	0801a818 	.word	0x0801a818
 80164f8:	0801a89b 	.word	0x0801a89b

080164fc <__multadd>:
 80164fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016500:	690d      	ldr	r5, [r1, #16]
 8016502:	4607      	mov	r7, r0
 8016504:	460c      	mov	r4, r1
 8016506:	461e      	mov	r6, r3
 8016508:	f101 0c14 	add.w	ip, r1, #20
 801650c:	2000      	movs	r0, #0
 801650e:	f8dc 3000 	ldr.w	r3, [ip]
 8016512:	b299      	uxth	r1, r3
 8016514:	fb02 6101 	mla	r1, r2, r1, r6
 8016518:	0c1e      	lsrs	r6, r3, #16
 801651a:	0c0b      	lsrs	r3, r1, #16
 801651c:	fb02 3306 	mla	r3, r2, r6, r3
 8016520:	b289      	uxth	r1, r1
 8016522:	3001      	adds	r0, #1
 8016524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016528:	4285      	cmp	r5, r0
 801652a:	f84c 1b04 	str.w	r1, [ip], #4
 801652e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016532:	dcec      	bgt.n	801650e <__multadd+0x12>
 8016534:	b30e      	cbz	r6, 801657a <__multadd+0x7e>
 8016536:	68a3      	ldr	r3, [r4, #8]
 8016538:	42ab      	cmp	r3, r5
 801653a:	dc19      	bgt.n	8016570 <__multadd+0x74>
 801653c:	6861      	ldr	r1, [r4, #4]
 801653e:	4638      	mov	r0, r7
 8016540:	3101      	adds	r1, #1
 8016542:	f7ff ff79 	bl	8016438 <_Balloc>
 8016546:	4680      	mov	r8, r0
 8016548:	b928      	cbnz	r0, 8016556 <__multadd+0x5a>
 801654a:	4602      	mov	r2, r0
 801654c:	4b0c      	ldr	r3, [pc, #48]	; (8016580 <__multadd+0x84>)
 801654e:	480d      	ldr	r0, [pc, #52]	; (8016584 <__multadd+0x88>)
 8016550:	21b5      	movs	r1, #181	; 0xb5
 8016552:	f001 f907 	bl	8017764 <__assert_func>
 8016556:	6922      	ldr	r2, [r4, #16]
 8016558:	3202      	adds	r2, #2
 801655a:	f104 010c 	add.w	r1, r4, #12
 801655e:	0092      	lsls	r2, r2, #2
 8016560:	300c      	adds	r0, #12
 8016562:	f7fe faa1 	bl	8014aa8 <memcpy>
 8016566:	4621      	mov	r1, r4
 8016568:	4638      	mov	r0, r7
 801656a:	f7ff ffa5 	bl	80164b8 <_Bfree>
 801656e:	4644      	mov	r4, r8
 8016570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016574:	3501      	adds	r5, #1
 8016576:	615e      	str	r6, [r3, #20]
 8016578:	6125      	str	r5, [r4, #16]
 801657a:	4620      	mov	r0, r4
 801657c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016580:	0801a88a 	.word	0x0801a88a
 8016584:	0801a89b 	.word	0x0801a89b

08016588 <__hi0bits>:
 8016588:	0c03      	lsrs	r3, r0, #16
 801658a:	041b      	lsls	r3, r3, #16
 801658c:	b9d3      	cbnz	r3, 80165c4 <__hi0bits+0x3c>
 801658e:	0400      	lsls	r0, r0, #16
 8016590:	2310      	movs	r3, #16
 8016592:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016596:	bf04      	itt	eq
 8016598:	0200      	lsleq	r0, r0, #8
 801659a:	3308      	addeq	r3, #8
 801659c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80165a0:	bf04      	itt	eq
 80165a2:	0100      	lsleq	r0, r0, #4
 80165a4:	3304      	addeq	r3, #4
 80165a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80165aa:	bf04      	itt	eq
 80165ac:	0080      	lsleq	r0, r0, #2
 80165ae:	3302      	addeq	r3, #2
 80165b0:	2800      	cmp	r0, #0
 80165b2:	db05      	blt.n	80165c0 <__hi0bits+0x38>
 80165b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80165b8:	f103 0301 	add.w	r3, r3, #1
 80165bc:	bf08      	it	eq
 80165be:	2320      	moveq	r3, #32
 80165c0:	4618      	mov	r0, r3
 80165c2:	4770      	bx	lr
 80165c4:	2300      	movs	r3, #0
 80165c6:	e7e4      	b.n	8016592 <__hi0bits+0xa>

080165c8 <__lo0bits>:
 80165c8:	6803      	ldr	r3, [r0, #0]
 80165ca:	f013 0207 	ands.w	r2, r3, #7
 80165ce:	4601      	mov	r1, r0
 80165d0:	d00b      	beq.n	80165ea <__lo0bits+0x22>
 80165d2:	07da      	lsls	r2, r3, #31
 80165d4:	d423      	bmi.n	801661e <__lo0bits+0x56>
 80165d6:	0798      	lsls	r0, r3, #30
 80165d8:	bf49      	itett	mi
 80165da:	085b      	lsrmi	r3, r3, #1
 80165dc:	089b      	lsrpl	r3, r3, #2
 80165de:	2001      	movmi	r0, #1
 80165e0:	600b      	strmi	r3, [r1, #0]
 80165e2:	bf5c      	itt	pl
 80165e4:	600b      	strpl	r3, [r1, #0]
 80165e6:	2002      	movpl	r0, #2
 80165e8:	4770      	bx	lr
 80165ea:	b298      	uxth	r0, r3
 80165ec:	b9a8      	cbnz	r0, 801661a <__lo0bits+0x52>
 80165ee:	0c1b      	lsrs	r3, r3, #16
 80165f0:	2010      	movs	r0, #16
 80165f2:	b2da      	uxtb	r2, r3
 80165f4:	b90a      	cbnz	r2, 80165fa <__lo0bits+0x32>
 80165f6:	3008      	adds	r0, #8
 80165f8:	0a1b      	lsrs	r3, r3, #8
 80165fa:	071a      	lsls	r2, r3, #28
 80165fc:	bf04      	itt	eq
 80165fe:	091b      	lsreq	r3, r3, #4
 8016600:	3004      	addeq	r0, #4
 8016602:	079a      	lsls	r2, r3, #30
 8016604:	bf04      	itt	eq
 8016606:	089b      	lsreq	r3, r3, #2
 8016608:	3002      	addeq	r0, #2
 801660a:	07da      	lsls	r2, r3, #31
 801660c:	d403      	bmi.n	8016616 <__lo0bits+0x4e>
 801660e:	085b      	lsrs	r3, r3, #1
 8016610:	f100 0001 	add.w	r0, r0, #1
 8016614:	d005      	beq.n	8016622 <__lo0bits+0x5a>
 8016616:	600b      	str	r3, [r1, #0]
 8016618:	4770      	bx	lr
 801661a:	4610      	mov	r0, r2
 801661c:	e7e9      	b.n	80165f2 <__lo0bits+0x2a>
 801661e:	2000      	movs	r0, #0
 8016620:	4770      	bx	lr
 8016622:	2020      	movs	r0, #32
 8016624:	4770      	bx	lr
	...

08016628 <__i2b>:
 8016628:	b510      	push	{r4, lr}
 801662a:	460c      	mov	r4, r1
 801662c:	2101      	movs	r1, #1
 801662e:	f7ff ff03 	bl	8016438 <_Balloc>
 8016632:	4602      	mov	r2, r0
 8016634:	b928      	cbnz	r0, 8016642 <__i2b+0x1a>
 8016636:	4b05      	ldr	r3, [pc, #20]	; (801664c <__i2b+0x24>)
 8016638:	4805      	ldr	r0, [pc, #20]	; (8016650 <__i2b+0x28>)
 801663a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801663e:	f001 f891 	bl	8017764 <__assert_func>
 8016642:	2301      	movs	r3, #1
 8016644:	6144      	str	r4, [r0, #20]
 8016646:	6103      	str	r3, [r0, #16]
 8016648:	bd10      	pop	{r4, pc}
 801664a:	bf00      	nop
 801664c:	0801a88a 	.word	0x0801a88a
 8016650:	0801a89b 	.word	0x0801a89b

08016654 <__multiply>:
 8016654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016658:	4691      	mov	r9, r2
 801665a:	690a      	ldr	r2, [r1, #16]
 801665c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016660:	429a      	cmp	r2, r3
 8016662:	bfb8      	it	lt
 8016664:	460b      	movlt	r3, r1
 8016666:	460c      	mov	r4, r1
 8016668:	bfbc      	itt	lt
 801666a:	464c      	movlt	r4, r9
 801666c:	4699      	movlt	r9, r3
 801666e:	6927      	ldr	r7, [r4, #16]
 8016670:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016674:	68a3      	ldr	r3, [r4, #8]
 8016676:	6861      	ldr	r1, [r4, #4]
 8016678:	eb07 060a 	add.w	r6, r7, sl
 801667c:	42b3      	cmp	r3, r6
 801667e:	b085      	sub	sp, #20
 8016680:	bfb8      	it	lt
 8016682:	3101      	addlt	r1, #1
 8016684:	f7ff fed8 	bl	8016438 <_Balloc>
 8016688:	b930      	cbnz	r0, 8016698 <__multiply+0x44>
 801668a:	4602      	mov	r2, r0
 801668c:	4b44      	ldr	r3, [pc, #272]	; (80167a0 <__multiply+0x14c>)
 801668e:	4845      	ldr	r0, [pc, #276]	; (80167a4 <__multiply+0x150>)
 8016690:	f240 115d 	movw	r1, #349	; 0x15d
 8016694:	f001 f866 	bl	8017764 <__assert_func>
 8016698:	f100 0514 	add.w	r5, r0, #20
 801669c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80166a0:	462b      	mov	r3, r5
 80166a2:	2200      	movs	r2, #0
 80166a4:	4543      	cmp	r3, r8
 80166a6:	d321      	bcc.n	80166ec <__multiply+0x98>
 80166a8:	f104 0314 	add.w	r3, r4, #20
 80166ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80166b0:	f109 0314 	add.w	r3, r9, #20
 80166b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80166b8:	9202      	str	r2, [sp, #8]
 80166ba:	1b3a      	subs	r2, r7, r4
 80166bc:	3a15      	subs	r2, #21
 80166be:	f022 0203 	bic.w	r2, r2, #3
 80166c2:	3204      	adds	r2, #4
 80166c4:	f104 0115 	add.w	r1, r4, #21
 80166c8:	428f      	cmp	r7, r1
 80166ca:	bf38      	it	cc
 80166cc:	2204      	movcc	r2, #4
 80166ce:	9201      	str	r2, [sp, #4]
 80166d0:	9a02      	ldr	r2, [sp, #8]
 80166d2:	9303      	str	r3, [sp, #12]
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d80c      	bhi.n	80166f2 <__multiply+0x9e>
 80166d8:	2e00      	cmp	r6, #0
 80166da:	dd03      	ble.n	80166e4 <__multiply+0x90>
 80166dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d05a      	beq.n	801679a <__multiply+0x146>
 80166e4:	6106      	str	r6, [r0, #16]
 80166e6:	b005      	add	sp, #20
 80166e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ec:	f843 2b04 	str.w	r2, [r3], #4
 80166f0:	e7d8      	b.n	80166a4 <__multiply+0x50>
 80166f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80166f6:	f1ba 0f00 	cmp.w	sl, #0
 80166fa:	d024      	beq.n	8016746 <__multiply+0xf2>
 80166fc:	f104 0e14 	add.w	lr, r4, #20
 8016700:	46a9      	mov	r9, r5
 8016702:	f04f 0c00 	mov.w	ip, #0
 8016706:	f85e 2b04 	ldr.w	r2, [lr], #4
 801670a:	f8d9 1000 	ldr.w	r1, [r9]
 801670e:	fa1f fb82 	uxth.w	fp, r2
 8016712:	b289      	uxth	r1, r1
 8016714:	fb0a 110b 	mla	r1, sl, fp, r1
 8016718:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801671c:	f8d9 2000 	ldr.w	r2, [r9]
 8016720:	4461      	add	r1, ip
 8016722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016726:	fb0a c20b 	mla	r2, sl, fp, ip
 801672a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801672e:	b289      	uxth	r1, r1
 8016730:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016734:	4577      	cmp	r7, lr
 8016736:	f849 1b04 	str.w	r1, [r9], #4
 801673a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801673e:	d8e2      	bhi.n	8016706 <__multiply+0xb2>
 8016740:	9a01      	ldr	r2, [sp, #4]
 8016742:	f845 c002 	str.w	ip, [r5, r2]
 8016746:	9a03      	ldr	r2, [sp, #12]
 8016748:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801674c:	3304      	adds	r3, #4
 801674e:	f1b9 0f00 	cmp.w	r9, #0
 8016752:	d020      	beq.n	8016796 <__multiply+0x142>
 8016754:	6829      	ldr	r1, [r5, #0]
 8016756:	f104 0c14 	add.w	ip, r4, #20
 801675a:	46ae      	mov	lr, r5
 801675c:	f04f 0a00 	mov.w	sl, #0
 8016760:	f8bc b000 	ldrh.w	fp, [ip]
 8016764:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016768:	fb09 220b 	mla	r2, r9, fp, r2
 801676c:	4492      	add	sl, r2
 801676e:	b289      	uxth	r1, r1
 8016770:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016774:	f84e 1b04 	str.w	r1, [lr], #4
 8016778:	f85c 2b04 	ldr.w	r2, [ip], #4
 801677c:	f8be 1000 	ldrh.w	r1, [lr]
 8016780:	0c12      	lsrs	r2, r2, #16
 8016782:	fb09 1102 	mla	r1, r9, r2, r1
 8016786:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801678a:	4567      	cmp	r7, ip
 801678c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016790:	d8e6      	bhi.n	8016760 <__multiply+0x10c>
 8016792:	9a01      	ldr	r2, [sp, #4]
 8016794:	50a9      	str	r1, [r5, r2]
 8016796:	3504      	adds	r5, #4
 8016798:	e79a      	b.n	80166d0 <__multiply+0x7c>
 801679a:	3e01      	subs	r6, #1
 801679c:	e79c      	b.n	80166d8 <__multiply+0x84>
 801679e:	bf00      	nop
 80167a0:	0801a88a 	.word	0x0801a88a
 80167a4:	0801a89b 	.word	0x0801a89b

080167a8 <__pow5mult>:
 80167a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167ac:	4615      	mov	r5, r2
 80167ae:	f012 0203 	ands.w	r2, r2, #3
 80167b2:	4606      	mov	r6, r0
 80167b4:	460f      	mov	r7, r1
 80167b6:	d007      	beq.n	80167c8 <__pow5mult+0x20>
 80167b8:	4c25      	ldr	r4, [pc, #148]	; (8016850 <__pow5mult+0xa8>)
 80167ba:	3a01      	subs	r2, #1
 80167bc:	2300      	movs	r3, #0
 80167be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80167c2:	f7ff fe9b 	bl	80164fc <__multadd>
 80167c6:	4607      	mov	r7, r0
 80167c8:	10ad      	asrs	r5, r5, #2
 80167ca:	d03d      	beq.n	8016848 <__pow5mult+0xa0>
 80167cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80167ce:	b97c      	cbnz	r4, 80167f0 <__pow5mult+0x48>
 80167d0:	2010      	movs	r0, #16
 80167d2:	f7fe f959 	bl	8014a88 <malloc>
 80167d6:	4602      	mov	r2, r0
 80167d8:	6270      	str	r0, [r6, #36]	; 0x24
 80167da:	b928      	cbnz	r0, 80167e8 <__pow5mult+0x40>
 80167dc:	4b1d      	ldr	r3, [pc, #116]	; (8016854 <__pow5mult+0xac>)
 80167de:	481e      	ldr	r0, [pc, #120]	; (8016858 <__pow5mult+0xb0>)
 80167e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80167e4:	f000 ffbe 	bl	8017764 <__assert_func>
 80167e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80167ec:	6004      	str	r4, [r0, #0]
 80167ee:	60c4      	str	r4, [r0, #12]
 80167f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80167f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80167f8:	b94c      	cbnz	r4, 801680e <__pow5mult+0x66>
 80167fa:	f240 2171 	movw	r1, #625	; 0x271
 80167fe:	4630      	mov	r0, r6
 8016800:	f7ff ff12 	bl	8016628 <__i2b>
 8016804:	2300      	movs	r3, #0
 8016806:	f8c8 0008 	str.w	r0, [r8, #8]
 801680a:	4604      	mov	r4, r0
 801680c:	6003      	str	r3, [r0, #0]
 801680e:	f04f 0900 	mov.w	r9, #0
 8016812:	07eb      	lsls	r3, r5, #31
 8016814:	d50a      	bpl.n	801682c <__pow5mult+0x84>
 8016816:	4639      	mov	r1, r7
 8016818:	4622      	mov	r2, r4
 801681a:	4630      	mov	r0, r6
 801681c:	f7ff ff1a 	bl	8016654 <__multiply>
 8016820:	4639      	mov	r1, r7
 8016822:	4680      	mov	r8, r0
 8016824:	4630      	mov	r0, r6
 8016826:	f7ff fe47 	bl	80164b8 <_Bfree>
 801682a:	4647      	mov	r7, r8
 801682c:	106d      	asrs	r5, r5, #1
 801682e:	d00b      	beq.n	8016848 <__pow5mult+0xa0>
 8016830:	6820      	ldr	r0, [r4, #0]
 8016832:	b938      	cbnz	r0, 8016844 <__pow5mult+0x9c>
 8016834:	4622      	mov	r2, r4
 8016836:	4621      	mov	r1, r4
 8016838:	4630      	mov	r0, r6
 801683a:	f7ff ff0b 	bl	8016654 <__multiply>
 801683e:	6020      	str	r0, [r4, #0]
 8016840:	f8c0 9000 	str.w	r9, [r0]
 8016844:	4604      	mov	r4, r0
 8016846:	e7e4      	b.n	8016812 <__pow5mult+0x6a>
 8016848:	4638      	mov	r0, r7
 801684a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801684e:	bf00      	nop
 8016850:	0801a9e8 	.word	0x0801a9e8
 8016854:	0801a818 	.word	0x0801a818
 8016858:	0801a89b 	.word	0x0801a89b

0801685c <__lshift>:
 801685c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016860:	460c      	mov	r4, r1
 8016862:	6849      	ldr	r1, [r1, #4]
 8016864:	6923      	ldr	r3, [r4, #16]
 8016866:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801686a:	68a3      	ldr	r3, [r4, #8]
 801686c:	4607      	mov	r7, r0
 801686e:	4691      	mov	r9, r2
 8016870:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016874:	f108 0601 	add.w	r6, r8, #1
 8016878:	42b3      	cmp	r3, r6
 801687a:	db0b      	blt.n	8016894 <__lshift+0x38>
 801687c:	4638      	mov	r0, r7
 801687e:	f7ff fddb 	bl	8016438 <_Balloc>
 8016882:	4605      	mov	r5, r0
 8016884:	b948      	cbnz	r0, 801689a <__lshift+0x3e>
 8016886:	4602      	mov	r2, r0
 8016888:	4b2a      	ldr	r3, [pc, #168]	; (8016934 <__lshift+0xd8>)
 801688a:	482b      	ldr	r0, [pc, #172]	; (8016938 <__lshift+0xdc>)
 801688c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016890:	f000 ff68 	bl	8017764 <__assert_func>
 8016894:	3101      	adds	r1, #1
 8016896:	005b      	lsls	r3, r3, #1
 8016898:	e7ee      	b.n	8016878 <__lshift+0x1c>
 801689a:	2300      	movs	r3, #0
 801689c:	f100 0114 	add.w	r1, r0, #20
 80168a0:	f100 0210 	add.w	r2, r0, #16
 80168a4:	4618      	mov	r0, r3
 80168a6:	4553      	cmp	r3, sl
 80168a8:	db37      	blt.n	801691a <__lshift+0xbe>
 80168aa:	6920      	ldr	r0, [r4, #16]
 80168ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80168b0:	f104 0314 	add.w	r3, r4, #20
 80168b4:	f019 091f 	ands.w	r9, r9, #31
 80168b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80168bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80168c0:	d02f      	beq.n	8016922 <__lshift+0xc6>
 80168c2:	f1c9 0e20 	rsb	lr, r9, #32
 80168c6:	468a      	mov	sl, r1
 80168c8:	f04f 0c00 	mov.w	ip, #0
 80168cc:	681a      	ldr	r2, [r3, #0]
 80168ce:	fa02 f209 	lsl.w	r2, r2, r9
 80168d2:	ea42 020c 	orr.w	r2, r2, ip
 80168d6:	f84a 2b04 	str.w	r2, [sl], #4
 80168da:	f853 2b04 	ldr.w	r2, [r3], #4
 80168de:	4298      	cmp	r0, r3
 80168e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80168e4:	d8f2      	bhi.n	80168cc <__lshift+0x70>
 80168e6:	1b03      	subs	r3, r0, r4
 80168e8:	3b15      	subs	r3, #21
 80168ea:	f023 0303 	bic.w	r3, r3, #3
 80168ee:	3304      	adds	r3, #4
 80168f0:	f104 0215 	add.w	r2, r4, #21
 80168f4:	4290      	cmp	r0, r2
 80168f6:	bf38      	it	cc
 80168f8:	2304      	movcc	r3, #4
 80168fa:	f841 c003 	str.w	ip, [r1, r3]
 80168fe:	f1bc 0f00 	cmp.w	ip, #0
 8016902:	d001      	beq.n	8016908 <__lshift+0xac>
 8016904:	f108 0602 	add.w	r6, r8, #2
 8016908:	3e01      	subs	r6, #1
 801690a:	4638      	mov	r0, r7
 801690c:	612e      	str	r6, [r5, #16]
 801690e:	4621      	mov	r1, r4
 8016910:	f7ff fdd2 	bl	80164b8 <_Bfree>
 8016914:	4628      	mov	r0, r5
 8016916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801691a:	f842 0f04 	str.w	r0, [r2, #4]!
 801691e:	3301      	adds	r3, #1
 8016920:	e7c1      	b.n	80168a6 <__lshift+0x4a>
 8016922:	3904      	subs	r1, #4
 8016924:	f853 2b04 	ldr.w	r2, [r3], #4
 8016928:	f841 2f04 	str.w	r2, [r1, #4]!
 801692c:	4298      	cmp	r0, r3
 801692e:	d8f9      	bhi.n	8016924 <__lshift+0xc8>
 8016930:	e7ea      	b.n	8016908 <__lshift+0xac>
 8016932:	bf00      	nop
 8016934:	0801a88a 	.word	0x0801a88a
 8016938:	0801a89b 	.word	0x0801a89b

0801693c <__mcmp>:
 801693c:	b530      	push	{r4, r5, lr}
 801693e:	6902      	ldr	r2, [r0, #16]
 8016940:	690c      	ldr	r4, [r1, #16]
 8016942:	1b12      	subs	r2, r2, r4
 8016944:	d10e      	bne.n	8016964 <__mcmp+0x28>
 8016946:	f100 0314 	add.w	r3, r0, #20
 801694a:	3114      	adds	r1, #20
 801694c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016950:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016954:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016958:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801695c:	42a5      	cmp	r5, r4
 801695e:	d003      	beq.n	8016968 <__mcmp+0x2c>
 8016960:	d305      	bcc.n	801696e <__mcmp+0x32>
 8016962:	2201      	movs	r2, #1
 8016964:	4610      	mov	r0, r2
 8016966:	bd30      	pop	{r4, r5, pc}
 8016968:	4283      	cmp	r3, r0
 801696a:	d3f3      	bcc.n	8016954 <__mcmp+0x18>
 801696c:	e7fa      	b.n	8016964 <__mcmp+0x28>
 801696e:	f04f 32ff 	mov.w	r2, #4294967295
 8016972:	e7f7      	b.n	8016964 <__mcmp+0x28>

08016974 <__mdiff>:
 8016974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016978:	460c      	mov	r4, r1
 801697a:	4606      	mov	r6, r0
 801697c:	4611      	mov	r1, r2
 801697e:	4620      	mov	r0, r4
 8016980:	4690      	mov	r8, r2
 8016982:	f7ff ffdb 	bl	801693c <__mcmp>
 8016986:	1e05      	subs	r5, r0, #0
 8016988:	d110      	bne.n	80169ac <__mdiff+0x38>
 801698a:	4629      	mov	r1, r5
 801698c:	4630      	mov	r0, r6
 801698e:	f7ff fd53 	bl	8016438 <_Balloc>
 8016992:	b930      	cbnz	r0, 80169a2 <__mdiff+0x2e>
 8016994:	4b3a      	ldr	r3, [pc, #232]	; (8016a80 <__mdiff+0x10c>)
 8016996:	4602      	mov	r2, r0
 8016998:	f240 2132 	movw	r1, #562	; 0x232
 801699c:	4839      	ldr	r0, [pc, #228]	; (8016a84 <__mdiff+0x110>)
 801699e:	f000 fee1 	bl	8017764 <__assert_func>
 80169a2:	2301      	movs	r3, #1
 80169a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80169a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ac:	bfa4      	itt	ge
 80169ae:	4643      	movge	r3, r8
 80169b0:	46a0      	movge	r8, r4
 80169b2:	4630      	mov	r0, r6
 80169b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80169b8:	bfa6      	itte	ge
 80169ba:	461c      	movge	r4, r3
 80169bc:	2500      	movge	r5, #0
 80169be:	2501      	movlt	r5, #1
 80169c0:	f7ff fd3a 	bl	8016438 <_Balloc>
 80169c4:	b920      	cbnz	r0, 80169d0 <__mdiff+0x5c>
 80169c6:	4b2e      	ldr	r3, [pc, #184]	; (8016a80 <__mdiff+0x10c>)
 80169c8:	4602      	mov	r2, r0
 80169ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80169ce:	e7e5      	b.n	801699c <__mdiff+0x28>
 80169d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80169d4:	6926      	ldr	r6, [r4, #16]
 80169d6:	60c5      	str	r5, [r0, #12]
 80169d8:	f104 0914 	add.w	r9, r4, #20
 80169dc:	f108 0514 	add.w	r5, r8, #20
 80169e0:	f100 0e14 	add.w	lr, r0, #20
 80169e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80169e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80169ec:	f108 0210 	add.w	r2, r8, #16
 80169f0:	46f2      	mov	sl, lr
 80169f2:	2100      	movs	r1, #0
 80169f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80169f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80169fc:	fa1f f883 	uxth.w	r8, r3
 8016a00:	fa11 f18b 	uxtah	r1, r1, fp
 8016a04:	0c1b      	lsrs	r3, r3, #16
 8016a06:	eba1 0808 	sub.w	r8, r1, r8
 8016a0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016a0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016a12:	fa1f f888 	uxth.w	r8, r8
 8016a16:	1419      	asrs	r1, r3, #16
 8016a18:	454e      	cmp	r6, r9
 8016a1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016a1e:	f84a 3b04 	str.w	r3, [sl], #4
 8016a22:	d8e7      	bhi.n	80169f4 <__mdiff+0x80>
 8016a24:	1b33      	subs	r3, r6, r4
 8016a26:	3b15      	subs	r3, #21
 8016a28:	f023 0303 	bic.w	r3, r3, #3
 8016a2c:	3304      	adds	r3, #4
 8016a2e:	3415      	adds	r4, #21
 8016a30:	42a6      	cmp	r6, r4
 8016a32:	bf38      	it	cc
 8016a34:	2304      	movcc	r3, #4
 8016a36:	441d      	add	r5, r3
 8016a38:	4473      	add	r3, lr
 8016a3a:	469e      	mov	lr, r3
 8016a3c:	462e      	mov	r6, r5
 8016a3e:	4566      	cmp	r6, ip
 8016a40:	d30e      	bcc.n	8016a60 <__mdiff+0xec>
 8016a42:	f10c 0203 	add.w	r2, ip, #3
 8016a46:	1b52      	subs	r2, r2, r5
 8016a48:	f022 0203 	bic.w	r2, r2, #3
 8016a4c:	3d03      	subs	r5, #3
 8016a4e:	45ac      	cmp	ip, r5
 8016a50:	bf38      	it	cc
 8016a52:	2200      	movcc	r2, #0
 8016a54:	441a      	add	r2, r3
 8016a56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016a5a:	b17b      	cbz	r3, 8016a7c <__mdiff+0x108>
 8016a5c:	6107      	str	r7, [r0, #16]
 8016a5e:	e7a3      	b.n	80169a8 <__mdiff+0x34>
 8016a60:	f856 8b04 	ldr.w	r8, [r6], #4
 8016a64:	fa11 f288 	uxtah	r2, r1, r8
 8016a68:	1414      	asrs	r4, r2, #16
 8016a6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016a6e:	b292      	uxth	r2, r2
 8016a70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016a74:	f84e 2b04 	str.w	r2, [lr], #4
 8016a78:	1421      	asrs	r1, r4, #16
 8016a7a:	e7e0      	b.n	8016a3e <__mdiff+0xca>
 8016a7c:	3f01      	subs	r7, #1
 8016a7e:	e7ea      	b.n	8016a56 <__mdiff+0xe2>
 8016a80:	0801a88a 	.word	0x0801a88a
 8016a84:	0801a89b 	.word	0x0801a89b

08016a88 <__d2b>:
 8016a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a8c:	4689      	mov	r9, r1
 8016a8e:	2101      	movs	r1, #1
 8016a90:	ec57 6b10 	vmov	r6, r7, d0
 8016a94:	4690      	mov	r8, r2
 8016a96:	f7ff fccf 	bl	8016438 <_Balloc>
 8016a9a:	4604      	mov	r4, r0
 8016a9c:	b930      	cbnz	r0, 8016aac <__d2b+0x24>
 8016a9e:	4602      	mov	r2, r0
 8016aa0:	4b25      	ldr	r3, [pc, #148]	; (8016b38 <__d2b+0xb0>)
 8016aa2:	4826      	ldr	r0, [pc, #152]	; (8016b3c <__d2b+0xb4>)
 8016aa4:	f240 310a 	movw	r1, #778	; 0x30a
 8016aa8:	f000 fe5c 	bl	8017764 <__assert_func>
 8016aac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016ab4:	bb35      	cbnz	r5, 8016b04 <__d2b+0x7c>
 8016ab6:	2e00      	cmp	r6, #0
 8016ab8:	9301      	str	r3, [sp, #4]
 8016aba:	d028      	beq.n	8016b0e <__d2b+0x86>
 8016abc:	4668      	mov	r0, sp
 8016abe:	9600      	str	r6, [sp, #0]
 8016ac0:	f7ff fd82 	bl	80165c8 <__lo0bits>
 8016ac4:	9900      	ldr	r1, [sp, #0]
 8016ac6:	b300      	cbz	r0, 8016b0a <__d2b+0x82>
 8016ac8:	9a01      	ldr	r2, [sp, #4]
 8016aca:	f1c0 0320 	rsb	r3, r0, #32
 8016ace:	fa02 f303 	lsl.w	r3, r2, r3
 8016ad2:	430b      	orrs	r3, r1
 8016ad4:	40c2      	lsrs	r2, r0
 8016ad6:	6163      	str	r3, [r4, #20]
 8016ad8:	9201      	str	r2, [sp, #4]
 8016ada:	9b01      	ldr	r3, [sp, #4]
 8016adc:	61a3      	str	r3, [r4, #24]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	bf14      	ite	ne
 8016ae2:	2202      	movne	r2, #2
 8016ae4:	2201      	moveq	r2, #1
 8016ae6:	6122      	str	r2, [r4, #16]
 8016ae8:	b1d5      	cbz	r5, 8016b20 <__d2b+0x98>
 8016aea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016aee:	4405      	add	r5, r0
 8016af0:	f8c9 5000 	str.w	r5, [r9]
 8016af4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016af8:	f8c8 0000 	str.w	r0, [r8]
 8016afc:	4620      	mov	r0, r4
 8016afe:	b003      	add	sp, #12
 8016b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016b08:	e7d5      	b.n	8016ab6 <__d2b+0x2e>
 8016b0a:	6161      	str	r1, [r4, #20]
 8016b0c:	e7e5      	b.n	8016ada <__d2b+0x52>
 8016b0e:	a801      	add	r0, sp, #4
 8016b10:	f7ff fd5a 	bl	80165c8 <__lo0bits>
 8016b14:	9b01      	ldr	r3, [sp, #4]
 8016b16:	6163      	str	r3, [r4, #20]
 8016b18:	2201      	movs	r2, #1
 8016b1a:	6122      	str	r2, [r4, #16]
 8016b1c:	3020      	adds	r0, #32
 8016b1e:	e7e3      	b.n	8016ae8 <__d2b+0x60>
 8016b20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016b24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016b28:	f8c9 0000 	str.w	r0, [r9]
 8016b2c:	6918      	ldr	r0, [r3, #16]
 8016b2e:	f7ff fd2b 	bl	8016588 <__hi0bits>
 8016b32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016b36:	e7df      	b.n	8016af8 <__d2b+0x70>
 8016b38:	0801a88a 	.word	0x0801a88a
 8016b3c:	0801a89b 	.word	0x0801a89b

08016b40 <_calloc_r>:
 8016b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b42:	fba1 2402 	umull	r2, r4, r1, r2
 8016b46:	b94c      	cbnz	r4, 8016b5c <_calloc_r+0x1c>
 8016b48:	4611      	mov	r1, r2
 8016b4a:	9201      	str	r2, [sp, #4]
 8016b4c:	f7fe f82e 	bl	8014bac <_malloc_r>
 8016b50:	9a01      	ldr	r2, [sp, #4]
 8016b52:	4605      	mov	r5, r0
 8016b54:	b930      	cbnz	r0, 8016b64 <_calloc_r+0x24>
 8016b56:	4628      	mov	r0, r5
 8016b58:	b003      	add	sp, #12
 8016b5a:	bd30      	pop	{r4, r5, pc}
 8016b5c:	220c      	movs	r2, #12
 8016b5e:	6002      	str	r2, [r0, #0]
 8016b60:	2500      	movs	r5, #0
 8016b62:	e7f8      	b.n	8016b56 <_calloc_r+0x16>
 8016b64:	4621      	mov	r1, r4
 8016b66:	f7fd ffad 	bl	8014ac4 <memset>
 8016b6a:	e7f4      	b.n	8016b56 <_calloc_r+0x16>

08016b6c <__ssputs_r>:
 8016b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b70:	688e      	ldr	r6, [r1, #8]
 8016b72:	429e      	cmp	r6, r3
 8016b74:	4682      	mov	sl, r0
 8016b76:	460c      	mov	r4, r1
 8016b78:	4690      	mov	r8, r2
 8016b7a:	461f      	mov	r7, r3
 8016b7c:	d838      	bhi.n	8016bf0 <__ssputs_r+0x84>
 8016b7e:	898a      	ldrh	r2, [r1, #12]
 8016b80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016b84:	d032      	beq.n	8016bec <__ssputs_r+0x80>
 8016b86:	6825      	ldr	r5, [r4, #0]
 8016b88:	6909      	ldr	r1, [r1, #16]
 8016b8a:	eba5 0901 	sub.w	r9, r5, r1
 8016b8e:	6965      	ldr	r5, [r4, #20]
 8016b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016b98:	3301      	adds	r3, #1
 8016b9a:	444b      	add	r3, r9
 8016b9c:	106d      	asrs	r5, r5, #1
 8016b9e:	429d      	cmp	r5, r3
 8016ba0:	bf38      	it	cc
 8016ba2:	461d      	movcc	r5, r3
 8016ba4:	0553      	lsls	r3, r2, #21
 8016ba6:	d531      	bpl.n	8016c0c <__ssputs_r+0xa0>
 8016ba8:	4629      	mov	r1, r5
 8016baa:	f7fd ffff 	bl	8014bac <_malloc_r>
 8016bae:	4606      	mov	r6, r0
 8016bb0:	b950      	cbnz	r0, 8016bc8 <__ssputs_r+0x5c>
 8016bb2:	230c      	movs	r3, #12
 8016bb4:	f8ca 3000 	str.w	r3, [sl]
 8016bb8:	89a3      	ldrh	r3, [r4, #12]
 8016bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bbe:	81a3      	strh	r3, [r4, #12]
 8016bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8016bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bc8:	6921      	ldr	r1, [r4, #16]
 8016bca:	464a      	mov	r2, r9
 8016bcc:	f7fd ff6c 	bl	8014aa8 <memcpy>
 8016bd0:	89a3      	ldrh	r3, [r4, #12]
 8016bd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bda:	81a3      	strh	r3, [r4, #12]
 8016bdc:	6126      	str	r6, [r4, #16]
 8016bde:	6165      	str	r5, [r4, #20]
 8016be0:	444e      	add	r6, r9
 8016be2:	eba5 0509 	sub.w	r5, r5, r9
 8016be6:	6026      	str	r6, [r4, #0]
 8016be8:	60a5      	str	r5, [r4, #8]
 8016bea:	463e      	mov	r6, r7
 8016bec:	42be      	cmp	r6, r7
 8016bee:	d900      	bls.n	8016bf2 <__ssputs_r+0x86>
 8016bf0:	463e      	mov	r6, r7
 8016bf2:	6820      	ldr	r0, [r4, #0]
 8016bf4:	4632      	mov	r2, r6
 8016bf6:	4641      	mov	r1, r8
 8016bf8:	f000 ffb0 	bl	8017b5c <memmove>
 8016bfc:	68a3      	ldr	r3, [r4, #8]
 8016bfe:	1b9b      	subs	r3, r3, r6
 8016c00:	60a3      	str	r3, [r4, #8]
 8016c02:	6823      	ldr	r3, [r4, #0]
 8016c04:	4433      	add	r3, r6
 8016c06:	6023      	str	r3, [r4, #0]
 8016c08:	2000      	movs	r0, #0
 8016c0a:	e7db      	b.n	8016bc4 <__ssputs_r+0x58>
 8016c0c:	462a      	mov	r2, r5
 8016c0e:	f000 ffbf 	bl	8017b90 <_realloc_r>
 8016c12:	4606      	mov	r6, r0
 8016c14:	2800      	cmp	r0, #0
 8016c16:	d1e1      	bne.n	8016bdc <__ssputs_r+0x70>
 8016c18:	6921      	ldr	r1, [r4, #16]
 8016c1a:	4650      	mov	r0, sl
 8016c1c:	f7fd ff5a 	bl	8014ad4 <_free_r>
 8016c20:	e7c7      	b.n	8016bb2 <__ssputs_r+0x46>
	...

08016c24 <_svfiprintf_r>:
 8016c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c28:	4698      	mov	r8, r3
 8016c2a:	898b      	ldrh	r3, [r1, #12]
 8016c2c:	061b      	lsls	r3, r3, #24
 8016c2e:	b09d      	sub	sp, #116	; 0x74
 8016c30:	4607      	mov	r7, r0
 8016c32:	460d      	mov	r5, r1
 8016c34:	4614      	mov	r4, r2
 8016c36:	d50e      	bpl.n	8016c56 <_svfiprintf_r+0x32>
 8016c38:	690b      	ldr	r3, [r1, #16]
 8016c3a:	b963      	cbnz	r3, 8016c56 <_svfiprintf_r+0x32>
 8016c3c:	2140      	movs	r1, #64	; 0x40
 8016c3e:	f7fd ffb5 	bl	8014bac <_malloc_r>
 8016c42:	6028      	str	r0, [r5, #0]
 8016c44:	6128      	str	r0, [r5, #16]
 8016c46:	b920      	cbnz	r0, 8016c52 <_svfiprintf_r+0x2e>
 8016c48:	230c      	movs	r3, #12
 8016c4a:	603b      	str	r3, [r7, #0]
 8016c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8016c50:	e0d1      	b.n	8016df6 <_svfiprintf_r+0x1d2>
 8016c52:	2340      	movs	r3, #64	; 0x40
 8016c54:	616b      	str	r3, [r5, #20]
 8016c56:	2300      	movs	r3, #0
 8016c58:	9309      	str	r3, [sp, #36]	; 0x24
 8016c5a:	2320      	movs	r3, #32
 8016c5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c64:	2330      	movs	r3, #48	; 0x30
 8016c66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016e10 <_svfiprintf_r+0x1ec>
 8016c6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c6e:	f04f 0901 	mov.w	r9, #1
 8016c72:	4623      	mov	r3, r4
 8016c74:	469a      	mov	sl, r3
 8016c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c7a:	b10a      	cbz	r2, 8016c80 <_svfiprintf_r+0x5c>
 8016c7c:	2a25      	cmp	r2, #37	; 0x25
 8016c7e:	d1f9      	bne.n	8016c74 <_svfiprintf_r+0x50>
 8016c80:	ebba 0b04 	subs.w	fp, sl, r4
 8016c84:	d00b      	beq.n	8016c9e <_svfiprintf_r+0x7a>
 8016c86:	465b      	mov	r3, fp
 8016c88:	4622      	mov	r2, r4
 8016c8a:	4629      	mov	r1, r5
 8016c8c:	4638      	mov	r0, r7
 8016c8e:	f7ff ff6d 	bl	8016b6c <__ssputs_r>
 8016c92:	3001      	adds	r0, #1
 8016c94:	f000 80aa 	beq.w	8016dec <_svfiprintf_r+0x1c8>
 8016c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c9a:	445a      	add	r2, fp
 8016c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8016c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	f000 80a2 	beq.w	8016dec <_svfiprintf_r+0x1c8>
 8016ca8:	2300      	movs	r3, #0
 8016caa:	f04f 32ff 	mov.w	r2, #4294967295
 8016cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cb2:	f10a 0a01 	add.w	sl, sl, #1
 8016cb6:	9304      	str	r3, [sp, #16]
 8016cb8:	9307      	str	r3, [sp, #28]
 8016cba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016cbe:	931a      	str	r3, [sp, #104]	; 0x68
 8016cc0:	4654      	mov	r4, sl
 8016cc2:	2205      	movs	r2, #5
 8016cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cc8:	4851      	ldr	r0, [pc, #324]	; (8016e10 <_svfiprintf_r+0x1ec>)
 8016cca:	f7e9 faa1 	bl	8000210 <memchr>
 8016cce:	9a04      	ldr	r2, [sp, #16]
 8016cd0:	b9d8      	cbnz	r0, 8016d0a <_svfiprintf_r+0xe6>
 8016cd2:	06d0      	lsls	r0, r2, #27
 8016cd4:	bf44      	itt	mi
 8016cd6:	2320      	movmi	r3, #32
 8016cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016cdc:	0711      	lsls	r1, r2, #28
 8016cde:	bf44      	itt	mi
 8016ce0:	232b      	movmi	r3, #43	; 0x2b
 8016ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8016cea:	2b2a      	cmp	r3, #42	; 0x2a
 8016cec:	d015      	beq.n	8016d1a <_svfiprintf_r+0xf6>
 8016cee:	9a07      	ldr	r2, [sp, #28]
 8016cf0:	4654      	mov	r4, sl
 8016cf2:	2000      	movs	r0, #0
 8016cf4:	f04f 0c0a 	mov.w	ip, #10
 8016cf8:	4621      	mov	r1, r4
 8016cfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016cfe:	3b30      	subs	r3, #48	; 0x30
 8016d00:	2b09      	cmp	r3, #9
 8016d02:	d94e      	bls.n	8016da2 <_svfiprintf_r+0x17e>
 8016d04:	b1b0      	cbz	r0, 8016d34 <_svfiprintf_r+0x110>
 8016d06:	9207      	str	r2, [sp, #28]
 8016d08:	e014      	b.n	8016d34 <_svfiprintf_r+0x110>
 8016d0a:	eba0 0308 	sub.w	r3, r0, r8
 8016d0e:	fa09 f303 	lsl.w	r3, r9, r3
 8016d12:	4313      	orrs	r3, r2
 8016d14:	9304      	str	r3, [sp, #16]
 8016d16:	46a2      	mov	sl, r4
 8016d18:	e7d2      	b.n	8016cc0 <_svfiprintf_r+0x9c>
 8016d1a:	9b03      	ldr	r3, [sp, #12]
 8016d1c:	1d19      	adds	r1, r3, #4
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	9103      	str	r1, [sp, #12]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	bfbb      	ittet	lt
 8016d26:	425b      	neglt	r3, r3
 8016d28:	f042 0202 	orrlt.w	r2, r2, #2
 8016d2c:	9307      	strge	r3, [sp, #28]
 8016d2e:	9307      	strlt	r3, [sp, #28]
 8016d30:	bfb8      	it	lt
 8016d32:	9204      	strlt	r2, [sp, #16]
 8016d34:	7823      	ldrb	r3, [r4, #0]
 8016d36:	2b2e      	cmp	r3, #46	; 0x2e
 8016d38:	d10c      	bne.n	8016d54 <_svfiprintf_r+0x130>
 8016d3a:	7863      	ldrb	r3, [r4, #1]
 8016d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8016d3e:	d135      	bne.n	8016dac <_svfiprintf_r+0x188>
 8016d40:	9b03      	ldr	r3, [sp, #12]
 8016d42:	1d1a      	adds	r2, r3, #4
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	9203      	str	r2, [sp, #12]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	bfb8      	it	lt
 8016d4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016d50:	3402      	adds	r4, #2
 8016d52:	9305      	str	r3, [sp, #20]
 8016d54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016e20 <_svfiprintf_r+0x1fc>
 8016d58:	7821      	ldrb	r1, [r4, #0]
 8016d5a:	2203      	movs	r2, #3
 8016d5c:	4650      	mov	r0, sl
 8016d5e:	f7e9 fa57 	bl	8000210 <memchr>
 8016d62:	b140      	cbz	r0, 8016d76 <_svfiprintf_r+0x152>
 8016d64:	2340      	movs	r3, #64	; 0x40
 8016d66:	eba0 000a 	sub.w	r0, r0, sl
 8016d6a:	fa03 f000 	lsl.w	r0, r3, r0
 8016d6e:	9b04      	ldr	r3, [sp, #16]
 8016d70:	4303      	orrs	r3, r0
 8016d72:	3401      	adds	r4, #1
 8016d74:	9304      	str	r3, [sp, #16]
 8016d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d7a:	4826      	ldr	r0, [pc, #152]	; (8016e14 <_svfiprintf_r+0x1f0>)
 8016d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016d80:	2206      	movs	r2, #6
 8016d82:	f7e9 fa45 	bl	8000210 <memchr>
 8016d86:	2800      	cmp	r0, #0
 8016d88:	d038      	beq.n	8016dfc <_svfiprintf_r+0x1d8>
 8016d8a:	4b23      	ldr	r3, [pc, #140]	; (8016e18 <_svfiprintf_r+0x1f4>)
 8016d8c:	bb1b      	cbnz	r3, 8016dd6 <_svfiprintf_r+0x1b2>
 8016d8e:	9b03      	ldr	r3, [sp, #12]
 8016d90:	3307      	adds	r3, #7
 8016d92:	f023 0307 	bic.w	r3, r3, #7
 8016d96:	3308      	adds	r3, #8
 8016d98:	9303      	str	r3, [sp, #12]
 8016d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d9c:	4433      	add	r3, r6
 8016d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8016da0:	e767      	b.n	8016c72 <_svfiprintf_r+0x4e>
 8016da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8016da6:	460c      	mov	r4, r1
 8016da8:	2001      	movs	r0, #1
 8016daa:	e7a5      	b.n	8016cf8 <_svfiprintf_r+0xd4>
 8016dac:	2300      	movs	r3, #0
 8016dae:	3401      	adds	r4, #1
 8016db0:	9305      	str	r3, [sp, #20]
 8016db2:	4619      	mov	r1, r3
 8016db4:	f04f 0c0a 	mov.w	ip, #10
 8016db8:	4620      	mov	r0, r4
 8016dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dbe:	3a30      	subs	r2, #48	; 0x30
 8016dc0:	2a09      	cmp	r2, #9
 8016dc2:	d903      	bls.n	8016dcc <_svfiprintf_r+0x1a8>
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d0c5      	beq.n	8016d54 <_svfiprintf_r+0x130>
 8016dc8:	9105      	str	r1, [sp, #20]
 8016dca:	e7c3      	b.n	8016d54 <_svfiprintf_r+0x130>
 8016dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	e7f0      	b.n	8016db8 <_svfiprintf_r+0x194>
 8016dd6:	ab03      	add	r3, sp, #12
 8016dd8:	9300      	str	r3, [sp, #0]
 8016dda:	462a      	mov	r2, r5
 8016ddc:	4b0f      	ldr	r3, [pc, #60]	; (8016e1c <_svfiprintf_r+0x1f8>)
 8016dde:	a904      	add	r1, sp, #16
 8016de0:	4638      	mov	r0, r7
 8016de2:	f7fd fff7 	bl	8014dd4 <_printf_float>
 8016de6:	1c42      	adds	r2, r0, #1
 8016de8:	4606      	mov	r6, r0
 8016dea:	d1d6      	bne.n	8016d9a <_svfiprintf_r+0x176>
 8016dec:	89ab      	ldrh	r3, [r5, #12]
 8016dee:	065b      	lsls	r3, r3, #25
 8016df0:	f53f af2c 	bmi.w	8016c4c <_svfiprintf_r+0x28>
 8016df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016df6:	b01d      	add	sp, #116	; 0x74
 8016df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dfc:	ab03      	add	r3, sp, #12
 8016dfe:	9300      	str	r3, [sp, #0]
 8016e00:	462a      	mov	r2, r5
 8016e02:	4b06      	ldr	r3, [pc, #24]	; (8016e1c <_svfiprintf_r+0x1f8>)
 8016e04:	a904      	add	r1, sp, #16
 8016e06:	4638      	mov	r0, r7
 8016e08:	f7fe fa88 	bl	801531c <_printf_i>
 8016e0c:	e7eb      	b.n	8016de6 <_svfiprintf_r+0x1c2>
 8016e0e:	bf00      	nop
 8016e10:	0801a9f4 	.word	0x0801a9f4
 8016e14:	0801a9fe 	.word	0x0801a9fe
 8016e18:	08014dd5 	.word	0x08014dd5
 8016e1c:	08016b6d 	.word	0x08016b6d
 8016e20:	0801a9fa 	.word	0x0801a9fa

08016e24 <_sungetc_r>:
 8016e24:	b538      	push	{r3, r4, r5, lr}
 8016e26:	1c4b      	adds	r3, r1, #1
 8016e28:	4614      	mov	r4, r2
 8016e2a:	d103      	bne.n	8016e34 <_sungetc_r+0x10>
 8016e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8016e30:	4628      	mov	r0, r5
 8016e32:	bd38      	pop	{r3, r4, r5, pc}
 8016e34:	8993      	ldrh	r3, [r2, #12]
 8016e36:	f023 0320 	bic.w	r3, r3, #32
 8016e3a:	8193      	strh	r3, [r2, #12]
 8016e3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e3e:	6852      	ldr	r2, [r2, #4]
 8016e40:	b2cd      	uxtb	r5, r1
 8016e42:	b18b      	cbz	r3, 8016e68 <_sungetc_r+0x44>
 8016e44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016e46:	4293      	cmp	r3, r2
 8016e48:	dd08      	ble.n	8016e5c <_sungetc_r+0x38>
 8016e4a:	6823      	ldr	r3, [r4, #0]
 8016e4c:	1e5a      	subs	r2, r3, #1
 8016e4e:	6022      	str	r2, [r4, #0]
 8016e50:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016e54:	6863      	ldr	r3, [r4, #4]
 8016e56:	3301      	adds	r3, #1
 8016e58:	6063      	str	r3, [r4, #4]
 8016e5a:	e7e9      	b.n	8016e30 <_sungetc_r+0xc>
 8016e5c:	4621      	mov	r1, r4
 8016e5e:	f000 fc47 	bl	80176f0 <__submore>
 8016e62:	2800      	cmp	r0, #0
 8016e64:	d0f1      	beq.n	8016e4a <_sungetc_r+0x26>
 8016e66:	e7e1      	b.n	8016e2c <_sungetc_r+0x8>
 8016e68:	6921      	ldr	r1, [r4, #16]
 8016e6a:	6823      	ldr	r3, [r4, #0]
 8016e6c:	b151      	cbz	r1, 8016e84 <_sungetc_r+0x60>
 8016e6e:	4299      	cmp	r1, r3
 8016e70:	d208      	bcs.n	8016e84 <_sungetc_r+0x60>
 8016e72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016e76:	42a9      	cmp	r1, r5
 8016e78:	d104      	bne.n	8016e84 <_sungetc_r+0x60>
 8016e7a:	3b01      	subs	r3, #1
 8016e7c:	3201      	adds	r2, #1
 8016e7e:	6023      	str	r3, [r4, #0]
 8016e80:	6062      	str	r2, [r4, #4]
 8016e82:	e7d5      	b.n	8016e30 <_sungetc_r+0xc>
 8016e84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e8c:	6363      	str	r3, [r4, #52]	; 0x34
 8016e8e:	2303      	movs	r3, #3
 8016e90:	63a3      	str	r3, [r4, #56]	; 0x38
 8016e92:	4623      	mov	r3, r4
 8016e94:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016e98:	6023      	str	r3, [r4, #0]
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	e7dc      	b.n	8016e58 <_sungetc_r+0x34>

08016e9e <__ssrefill_r>:
 8016e9e:	b510      	push	{r4, lr}
 8016ea0:	460c      	mov	r4, r1
 8016ea2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016ea4:	b169      	cbz	r1, 8016ec2 <__ssrefill_r+0x24>
 8016ea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016eaa:	4299      	cmp	r1, r3
 8016eac:	d001      	beq.n	8016eb2 <__ssrefill_r+0x14>
 8016eae:	f7fd fe11 	bl	8014ad4 <_free_r>
 8016eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016eb4:	6063      	str	r3, [r4, #4]
 8016eb6:	2000      	movs	r0, #0
 8016eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8016eba:	b113      	cbz	r3, 8016ec2 <__ssrefill_r+0x24>
 8016ebc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016ebe:	6023      	str	r3, [r4, #0]
 8016ec0:	bd10      	pop	{r4, pc}
 8016ec2:	6923      	ldr	r3, [r4, #16]
 8016ec4:	6023      	str	r3, [r4, #0]
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	6063      	str	r3, [r4, #4]
 8016eca:	89a3      	ldrh	r3, [r4, #12]
 8016ecc:	f043 0320 	orr.w	r3, r3, #32
 8016ed0:	81a3      	strh	r3, [r4, #12]
 8016ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8016ed6:	e7f3      	b.n	8016ec0 <__ssrefill_r+0x22>

08016ed8 <__ssvfiscanf_r>:
 8016ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016edc:	460c      	mov	r4, r1
 8016ede:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016ee2:	2100      	movs	r1, #0
 8016ee4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016ee8:	49a6      	ldr	r1, [pc, #664]	; (8017184 <__ssvfiscanf_r+0x2ac>)
 8016eea:	91a0      	str	r1, [sp, #640]	; 0x280
 8016eec:	f10d 0804 	add.w	r8, sp, #4
 8016ef0:	49a5      	ldr	r1, [pc, #660]	; (8017188 <__ssvfiscanf_r+0x2b0>)
 8016ef2:	4fa6      	ldr	r7, [pc, #664]	; (801718c <__ssvfiscanf_r+0x2b4>)
 8016ef4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017190 <__ssvfiscanf_r+0x2b8>
 8016ef8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016efc:	4606      	mov	r6, r0
 8016efe:	91a1      	str	r1, [sp, #644]	; 0x284
 8016f00:	9300      	str	r3, [sp, #0]
 8016f02:	7813      	ldrb	r3, [r2, #0]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	f000 815a 	beq.w	80171be <__ssvfiscanf_r+0x2e6>
 8016f0a:	5dd9      	ldrb	r1, [r3, r7]
 8016f0c:	f011 0108 	ands.w	r1, r1, #8
 8016f10:	f102 0501 	add.w	r5, r2, #1
 8016f14:	d019      	beq.n	8016f4a <__ssvfiscanf_r+0x72>
 8016f16:	6863      	ldr	r3, [r4, #4]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	dd0f      	ble.n	8016f3c <__ssvfiscanf_r+0x64>
 8016f1c:	6823      	ldr	r3, [r4, #0]
 8016f1e:	781a      	ldrb	r2, [r3, #0]
 8016f20:	5cba      	ldrb	r2, [r7, r2]
 8016f22:	0712      	lsls	r2, r2, #28
 8016f24:	d401      	bmi.n	8016f2a <__ssvfiscanf_r+0x52>
 8016f26:	462a      	mov	r2, r5
 8016f28:	e7eb      	b.n	8016f02 <__ssvfiscanf_r+0x2a>
 8016f2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016f2c:	3201      	adds	r2, #1
 8016f2e:	9245      	str	r2, [sp, #276]	; 0x114
 8016f30:	6862      	ldr	r2, [r4, #4]
 8016f32:	3301      	adds	r3, #1
 8016f34:	3a01      	subs	r2, #1
 8016f36:	6062      	str	r2, [r4, #4]
 8016f38:	6023      	str	r3, [r4, #0]
 8016f3a:	e7ec      	b.n	8016f16 <__ssvfiscanf_r+0x3e>
 8016f3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016f3e:	4621      	mov	r1, r4
 8016f40:	4630      	mov	r0, r6
 8016f42:	4798      	blx	r3
 8016f44:	2800      	cmp	r0, #0
 8016f46:	d0e9      	beq.n	8016f1c <__ssvfiscanf_r+0x44>
 8016f48:	e7ed      	b.n	8016f26 <__ssvfiscanf_r+0x4e>
 8016f4a:	2b25      	cmp	r3, #37	; 0x25
 8016f4c:	d012      	beq.n	8016f74 <__ssvfiscanf_r+0x9c>
 8016f4e:	469a      	mov	sl, r3
 8016f50:	6863      	ldr	r3, [r4, #4]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	f340 8091 	ble.w	801707a <__ssvfiscanf_r+0x1a2>
 8016f58:	6822      	ldr	r2, [r4, #0]
 8016f5a:	7813      	ldrb	r3, [r2, #0]
 8016f5c:	4553      	cmp	r3, sl
 8016f5e:	f040 812e 	bne.w	80171be <__ssvfiscanf_r+0x2e6>
 8016f62:	6863      	ldr	r3, [r4, #4]
 8016f64:	3b01      	subs	r3, #1
 8016f66:	6063      	str	r3, [r4, #4]
 8016f68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016f6a:	3201      	adds	r2, #1
 8016f6c:	3301      	adds	r3, #1
 8016f6e:	6022      	str	r2, [r4, #0]
 8016f70:	9345      	str	r3, [sp, #276]	; 0x114
 8016f72:	e7d8      	b.n	8016f26 <__ssvfiscanf_r+0x4e>
 8016f74:	9141      	str	r1, [sp, #260]	; 0x104
 8016f76:	9143      	str	r1, [sp, #268]	; 0x10c
 8016f78:	7853      	ldrb	r3, [r2, #1]
 8016f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8016f7c:	bf02      	ittt	eq
 8016f7e:	2310      	moveq	r3, #16
 8016f80:	1c95      	addeq	r5, r2, #2
 8016f82:	9341      	streq	r3, [sp, #260]	; 0x104
 8016f84:	220a      	movs	r2, #10
 8016f86:	46aa      	mov	sl, r5
 8016f88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016f8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016f90:	2b09      	cmp	r3, #9
 8016f92:	d91d      	bls.n	8016fd0 <__ssvfiscanf_r+0xf8>
 8016f94:	487e      	ldr	r0, [pc, #504]	; (8017190 <__ssvfiscanf_r+0x2b8>)
 8016f96:	2203      	movs	r2, #3
 8016f98:	f7e9 f93a 	bl	8000210 <memchr>
 8016f9c:	b140      	cbz	r0, 8016fb0 <__ssvfiscanf_r+0xd8>
 8016f9e:	2301      	movs	r3, #1
 8016fa0:	eba0 0009 	sub.w	r0, r0, r9
 8016fa4:	fa03 f000 	lsl.w	r0, r3, r0
 8016fa8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016faa:	4318      	orrs	r0, r3
 8016fac:	9041      	str	r0, [sp, #260]	; 0x104
 8016fae:	4655      	mov	r5, sl
 8016fb0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016fb4:	2b78      	cmp	r3, #120	; 0x78
 8016fb6:	d806      	bhi.n	8016fc6 <__ssvfiscanf_r+0xee>
 8016fb8:	2b57      	cmp	r3, #87	; 0x57
 8016fba:	d810      	bhi.n	8016fde <__ssvfiscanf_r+0x106>
 8016fbc:	2b25      	cmp	r3, #37	; 0x25
 8016fbe:	d0c6      	beq.n	8016f4e <__ssvfiscanf_r+0x76>
 8016fc0:	d856      	bhi.n	8017070 <__ssvfiscanf_r+0x198>
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d064      	beq.n	8017090 <__ssvfiscanf_r+0x1b8>
 8016fc6:	2303      	movs	r3, #3
 8016fc8:	9347      	str	r3, [sp, #284]	; 0x11c
 8016fca:	230a      	movs	r3, #10
 8016fcc:	9342      	str	r3, [sp, #264]	; 0x108
 8016fce:	e071      	b.n	80170b4 <__ssvfiscanf_r+0x1dc>
 8016fd0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016fd2:	fb02 1103 	mla	r1, r2, r3, r1
 8016fd6:	3930      	subs	r1, #48	; 0x30
 8016fd8:	9143      	str	r1, [sp, #268]	; 0x10c
 8016fda:	4655      	mov	r5, sl
 8016fdc:	e7d3      	b.n	8016f86 <__ssvfiscanf_r+0xae>
 8016fde:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016fe2:	2a20      	cmp	r2, #32
 8016fe4:	d8ef      	bhi.n	8016fc6 <__ssvfiscanf_r+0xee>
 8016fe6:	a101      	add	r1, pc, #4	; (adr r1, 8016fec <__ssvfiscanf_r+0x114>)
 8016fe8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016fec:	0801709f 	.word	0x0801709f
 8016ff0:	08016fc7 	.word	0x08016fc7
 8016ff4:	08016fc7 	.word	0x08016fc7
 8016ff8:	080170fd 	.word	0x080170fd
 8016ffc:	08016fc7 	.word	0x08016fc7
 8017000:	08016fc7 	.word	0x08016fc7
 8017004:	08016fc7 	.word	0x08016fc7
 8017008:	08016fc7 	.word	0x08016fc7
 801700c:	08016fc7 	.word	0x08016fc7
 8017010:	08016fc7 	.word	0x08016fc7
 8017014:	08016fc7 	.word	0x08016fc7
 8017018:	08017113 	.word	0x08017113
 801701c:	080170e9 	.word	0x080170e9
 8017020:	08017077 	.word	0x08017077
 8017024:	08017077 	.word	0x08017077
 8017028:	08017077 	.word	0x08017077
 801702c:	08016fc7 	.word	0x08016fc7
 8017030:	080170ed 	.word	0x080170ed
 8017034:	08016fc7 	.word	0x08016fc7
 8017038:	08016fc7 	.word	0x08016fc7
 801703c:	08016fc7 	.word	0x08016fc7
 8017040:	08016fc7 	.word	0x08016fc7
 8017044:	08017123 	.word	0x08017123
 8017048:	080170f5 	.word	0x080170f5
 801704c:	08017097 	.word	0x08017097
 8017050:	08016fc7 	.word	0x08016fc7
 8017054:	08016fc7 	.word	0x08016fc7
 8017058:	0801711f 	.word	0x0801711f
 801705c:	08016fc7 	.word	0x08016fc7
 8017060:	080170e9 	.word	0x080170e9
 8017064:	08016fc7 	.word	0x08016fc7
 8017068:	08016fc7 	.word	0x08016fc7
 801706c:	0801709f 	.word	0x0801709f
 8017070:	3b45      	subs	r3, #69	; 0x45
 8017072:	2b02      	cmp	r3, #2
 8017074:	d8a7      	bhi.n	8016fc6 <__ssvfiscanf_r+0xee>
 8017076:	2305      	movs	r3, #5
 8017078:	e01b      	b.n	80170b2 <__ssvfiscanf_r+0x1da>
 801707a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801707c:	4621      	mov	r1, r4
 801707e:	4630      	mov	r0, r6
 8017080:	4798      	blx	r3
 8017082:	2800      	cmp	r0, #0
 8017084:	f43f af68 	beq.w	8016f58 <__ssvfiscanf_r+0x80>
 8017088:	9844      	ldr	r0, [sp, #272]	; 0x110
 801708a:	2800      	cmp	r0, #0
 801708c:	f040 808d 	bne.w	80171aa <__ssvfiscanf_r+0x2d2>
 8017090:	f04f 30ff 	mov.w	r0, #4294967295
 8017094:	e08f      	b.n	80171b6 <__ssvfiscanf_r+0x2de>
 8017096:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017098:	f042 0220 	orr.w	r2, r2, #32
 801709c:	9241      	str	r2, [sp, #260]	; 0x104
 801709e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80170a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80170a4:	9241      	str	r2, [sp, #260]	; 0x104
 80170a6:	2210      	movs	r2, #16
 80170a8:	2b6f      	cmp	r3, #111	; 0x6f
 80170aa:	9242      	str	r2, [sp, #264]	; 0x108
 80170ac:	bf34      	ite	cc
 80170ae:	2303      	movcc	r3, #3
 80170b0:	2304      	movcs	r3, #4
 80170b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80170b4:	6863      	ldr	r3, [r4, #4]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	dd42      	ble.n	8017140 <__ssvfiscanf_r+0x268>
 80170ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80170bc:	0659      	lsls	r1, r3, #25
 80170be:	d404      	bmi.n	80170ca <__ssvfiscanf_r+0x1f2>
 80170c0:	6823      	ldr	r3, [r4, #0]
 80170c2:	781a      	ldrb	r2, [r3, #0]
 80170c4:	5cba      	ldrb	r2, [r7, r2]
 80170c6:	0712      	lsls	r2, r2, #28
 80170c8:	d441      	bmi.n	801714e <__ssvfiscanf_r+0x276>
 80170ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80170cc:	2b02      	cmp	r3, #2
 80170ce:	dc50      	bgt.n	8017172 <__ssvfiscanf_r+0x29a>
 80170d0:	466b      	mov	r3, sp
 80170d2:	4622      	mov	r2, r4
 80170d4:	a941      	add	r1, sp, #260	; 0x104
 80170d6:	4630      	mov	r0, r6
 80170d8:	f000 f876 	bl	80171c8 <_scanf_chars>
 80170dc:	2801      	cmp	r0, #1
 80170de:	d06e      	beq.n	80171be <__ssvfiscanf_r+0x2e6>
 80170e0:	2802      	cmp	r0, #2
 80170e2:	f47f af20 	bne.w	8016f26 <__ssvfiscanf_r+0x4e>
 80170e6:	e7cf      	b.n	8017088 <__ssvfiscanf_r+0x1b0>
 80170e8:	220a      	movs	r2, #10
 80170ea:	e7dd      	b.n	80170a8 <__ssvfiscanf_r+0x1d0>
 80170ec:	2300      	movs	r3, #0
 80170ee:	9342      	str	r3, [sp, #264]	; 0x108
 80170f0:	2303      	movs	r3, #3
 80170f2:	e7de      	b.n	80170b2 <__ssvfiscanf_r+0x1da>
 80170f4:	2308      	movs	r3, #8
 80170f6:	9342      	str	r3, [sp, #264]	; 0x108
 80170f8:	2304      	movs	r3, #4
 80170fa:	e7da      	b.n	80170b2 <__ssvfiscanf_r+0x1da>
 80170fc:	4629      	mov	r1, r5
 80170fe:	4640      	mov	r0, r8
 8017100:	f000 f9c6 	bl	8017490 <__sccl>
 8017104:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801710a:	9341      	str	r3, [sp, #260]	; 0x104
 801710c:	4605      	mov	r5, r0
 801710e:	2301      	movs	r3, #1
 8017110:	e7cf      	b.n	80170b2 <__ssvfiscanf_r+0x1da>
 8017112:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017118:	9341      	str	r3, [sp, #260]	; 0x104
 801711a:	2300      	movs	r3, #0
 801711c:	e7c9      	b.n	80170b2 <__ssvfiscanf_r+0x1da>
 801711e:	2302      	movs	r3, #2
 8017120:	e7c7      	b.n	80170b2 <__ssvfiscanf_r+0x1da>
 8017122:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017124:	06c3      	lsls	r3, r0, #27
 8017126:	f53f aefe 	bmi.w	8016f26 <__ssvfiscanf_r+0x4e>
 801712a:	9b00      	ldr	r3, [sp, #0]
 801712c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801712e:	1d19      	adds	r1, r3, #4
 8017130:	9100      	str	r1, [sp, #0]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	f010 0f01 	tst.w	r0, #1
 8017138:	bf14      	ite	ne
 801713a:	801a      	strhne	r2, [r3, #0]
 801713c:	601a      	streq	r2, [r3, #0]
 801713e:	e6f2      	b.n	8016f26 <__ssvfiscanf_r+0x4e>
 8017140:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017142:	4621      	mov	r1, r4
 8017144:	4630      	mov	r0, r6
 8017146:	4798      	blx	r3
 8017148:	2800      	cmp	r0, #0
 801714a:	d0b6      	beq.n	80170ba <__ssvfiscanf_r+0x1e2>
 801714c:	e79c      	b.n	8017088 <__ssvfiscanf_r+0x1b0>
 801714e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017150:	3201      	adds	r2, #1
 8017152:	9245      	str	r2, [sp, #276]	; 0x114
 8017154:	6862      	ldr	r2, [r4, #4]
 8017156:	3a01      	subs	r2, #1
 8017158:	2a00      	cmp	r2, #0
 801715a:	6062      	str	r2, [r4, #4]
 801715c:	dd02      	ble.n	8017164 <__ssvfiscanf_r+0x28c>
 801715e:	3301      	adds	r3, #1
 8017160:	6023      	str	r3, [r4, #0]
 8017162:	e7ad      	b.n	80170c0 <__ssvfiscanf_r+0x1e8>
 8017164:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017166:	4621      	mov	r1, r4
 8017168:	4630      	mov	r0, r6
 801716a:	4798      	blx	r3
 801716c:	2800      	cmp	r0, #0
 801716e:	d0a7      	beq.n	80170c0 <__ssvfiscanf_r+0x1e8>
 8017170:	e78a      	b.n	8017088 <__ssvfiscanf_r+0x1b0>
 8017172:	2b04      	cmp	r3, #4
 8017174:	dc0e      	bgt.n	8017194 <__ssvfiscanf_r+0x2bc>
 8017176:	466b      	mov	r3, sp
 8017178:	4622      	mov	r2, r4
 801717a:	a941      	add	r1, sp, #260	; 0x104
 801717c:	4630      	mov	r0, r6
 801717e:	f000 f87d 	bl	801727c <_scanf_i>
 8017182:	e7ab      	b.n	80170dc <__ssvfiscanf_r+0x204>
 8017184:	08016e25 	.word	0x08016e25
 8017188:	08016e9f 	.word	0x08016e9f
 801718c:	0801a70b 	.word	0x0801a70b
 8017190:	0801a9fa 	.word	0x0801a9fa
 8017194:	4b0b      	ldr	r3, [pc, #44]	; (80171c4 <__ssvfiscanf_r+0x2ec>)
 8017196:	2b00      	cmp	r3, #0
 8017198:	f43f aec5 	beq.w	8016f26 <__ssvfiscanf_r+0x4e>
 801719c:	466b      	mov	r3, sp
 801719e:	4622      	mov	r2, r4
 80171a0:	a941      	add	r1, sp, #260	; 0x104
 80171a2:	4630      	mov	r0, r6
 80171a4:	f3af 8000 	nop.w
 80171a8:	e798      	b.n	80170dc <__ssvfiscanf_r+0x204>
 80171aa:	89a3      	ldrh	r3, [r4, #12]
 80171ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80171b0:	bf18      	it	ne
 80171b2:	f04f 30ff 	movne.w	r0, #4294967295
 80171b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80171ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80171c0:	e7f9      	b.n	80171b6 <__ssvfiscanf_r+0x2de>
 80171c2:	bf00      	nop
 80171c4:	00000000 	.word	0x00000000

080171c8 <_scanf_chars>:
 80171c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171cc:	4615      	mov	r5, r2
 80171ce:	688a      	ldr	r2, [r1, #8]
 80171d0:	4680      	mov	r8, r0
 80171d2:	460c      	mov	r4, r1
 80171d4:	b932      	cbnz	r2, 80171e4 <_scanf_chars+0x1c>
 80171d6:	698a      	ldr	r2, [r1, #24]
 80171d8:	2a00      	cmp	r2, #0
 80171da:	bf0c      	ite	eq
 80171dc:	2201      	moveq	r2, #1
 80171de:	f04f 32ff 	movne.w	r2, #4294967295
 80171e2:	608a      	str	r2, [r1, #8]
 80171e4:	6822      	ldr	r2, [r4, #0]
 80171e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017278 <_scanf_chars+0xb0>
 80171ea:	06d1      	lsls	r1, r2, #27
 80171ec:	bf5f      	itttt	pl
 80171ee:	681a      	ldrpl	r2, [r3, #0]
 80171f0:	1d11      	addpl	r1, r2, #4
 80171f2:	6019      	strpl	r1, [r3, #0]
 80171f4:	6816      	ldrpl	r6, [r2, #0]
 80171f6:	2700      	movs	r7, #0
 80171f8:	69a0      	ldr	r0, [r4, #24]
 80171fa:	b188      	cbz	r0, 8017220 <_scanf_chars+0x58>
 80171fc:	2801      	cmp	r0, #1
 80171fe:	d107      	bne.n	8017210 <_scanf_chars+0x48>
 8017200:	682a      	ldr	r2, [r5, #0]
 8017202:	7811      	ldrb	r1, [r2, #0]
 8017204:	6962      	ldr	r2, [r4, #20]
 8017206:	5c52      	ldrb	r2, [r2, r1]
 8017208:	b952      	cbnz	r2, 8017220 <_scanf_chars+0x58>
 801720a:	2f00      	cmp	r7, #0
 801720c:	d031      	beq.n	8017272 <_scanf_chars+0xaa>
 801720e:	e022      	b.n	8017256 <_scanf_chars+0x8e>
 8017210:	2802      	cmp	r0, #2
 8017212:	d120      	bne.n	8017256 <_scanf_chars+0x8e>
 8017214:	682b      	ldr	r3, [r5, #0]
 8017216:	781b      	ldrb	r3, [r3, #0]
 8017218:	f813 3009 	ldrb.w	r3, [r3, r9]
 801721c:	071b      	lsls	r3, r3, #28
 801721e:	d41a      	bmi.n	8017256 <_scanf_chars+0x8e>
 8017220:	6823      	ldr	r3, [r4, #0]
 8017222:	06da      	lsls	r2, r3, #27
 8017224:	bf5e      	ittt	pl
 8017226:	682b      	ldrpl	r3, [r5, #0]
 8017228:	781b      	ldrbpl	r3, [r3, #0]
 801722a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801722e:	682a      	ldr	r2, [r5, #0]
 8017230:	686b      	ldr	r3, [r5, #4]
 8017232:	3201      	adds	r2, #1
 8017234:	602a      	str	r2, [r5, #0]
 8017236:	68a2      	ldr	r2, [r4, #8]
 8017238:	3b01      	subs	r3, #1
 801723a:	3a01      	subs	r2, #1
 801723c:	606b      	str	r3, [r5, #4]
 801723e:	3701      	adds	r7, #1
 8017240:	60a2      	str	r2, [r4, #8]
 8017242:	b142      	cbz	r2, 8017256 <_scanf_chars+0x8e>
 8017244:	2b00      	cmp	r3, #0
 8017246:	dcd7      	bgt.n	80171f8 <_scanf_chars+0x30>
 8017248:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801724c:	4629      	mov	r1, r5
 801724e:	4640      	mov	r0, r8
 8017250:	4798      	blx	r3
 8017252:	2800      	cmp	r0, #0
 8017254:	d0d0      	beq.n	80171f8 <_scanf_chars+0x30>
 8017256:	6823      	ldr	r3, [r4, #0]
 8017258:	f013 0310 	ands.w	r3, r3, #16
 801725c:	d105      	bne.n	801726a <_scanf_chars+0xa2>
 801725e:	68e2      	ldr	r2, [r4, #12]
 8017260:	3201      	adds	r2, #1
 8017262:	60e2      	str	r2, [r4, #12]
 8017264:	69a2      	ldr	r2, [r4, #24]
 8017266:	b102      	cbz	r2, 801726a <_scanf_chars+0xa2>
 8017268:	7033      	strb	r3, [r6, #0]
 801726a:	6923      	ldr	r3, [r4, #16]
 801726c:	443b      	add	r3, r7
 801726e:	6123      	str	r3, [r4, #16]
 8017270:	2000      	movs	r0, #0
 8017272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017276:	bf00      	nop
 8017278:	0801a70b 	.word	0x0801a70b

0801727c <_scanf_i>:
 801727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017280:	4698      	mov	r8, r3
 8017282:	4b76      	ldr	r3, [pc, #472]	; (801745c <_scanf_i+0x1e0>)
 8017284:	460c      	mov	r4, r1
 8017286:	4682      	mov	sl, r0
 8017288:	4616      	mov	r6, r2
 801728a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801728e:	b087      	sub	sp, #28
 8017290:	ab03      	add	r3, sp, #12
 8017292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017296:	4b72      	ldr	r3, [pc, #456]	; (8017460 <_scanf_i+0x1e4>)
 8017298:	69a1      	ldr	r1, [r4, #24]
 801729a:	4a72      	ldr	r2, [pc, #456]	; (8017464 <_scanf_i+0x1e8>)
 801729c:	2903      	cmp	r1, #3
 801729e:	bf18      	it	ne
 80172a0:	461a      	movne	r2, r3
 80172a2:	68a3      	ldr	r3, [r4, #8]
 80172a4:	9201      	str	r2, [sp, #4]
 80172a6:	1e5a      	subs	r2, r3, #1
 80172a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80172ac:	bf88      	it	hi
 80172ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80172b2:	4627      	mov	r7, r4
 80172b4:	bf82      	ittt	hi
 80172b6:	eb03 0905 	addhi.w	r9, r3, r5
 80172ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80172be:	60a3      	strhi	r3, [r4, #8]
 80172c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80172c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80172c8:	bf98      	it	ls
 80172ca:	f04f 0900 	movls.w	r9, #0
 80172ce:	6023      	str	r3, [r4, #0]
 80172d0:	463d      	mov	r5, r7
 80172d2:	f04f 0b00 	mov.w	fp, #0
 80172d6:	6831      	ldr	r1, [r6, #0]
 80172d8:	ab03      	add	r3, sp, #12
 80172da:	7809      	ldrb	r1, [r1, #0]
 80172dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80172e0:	2202      	movs	r2, #2
 80172e2:	f7e8 ff95 	bl	8000210 <memchr>
 80172e6:	b328      	cbz	r0, 8017334 <_scanf_i+0xb8>
 80172e8:	f1bb 0f01 	cmp.w	fp, #1
 80172ec:	d159      	bne.n	80173a2 <_scanf_i+0x126>
 80172ee:	6862      	ldr	r2, [r4, #4]
 80172f0:	b92a      	cbnz	r2, 80172fe <_scanf_i+0x82>
 80172f2:	6822      	ldr	r2, [r4, #0]
 80172f4:	2308      	movs	r3, #8
 80172f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80172fa:	6063      	str	r3, [r4, #4]
 80172fc:	6022      	str	r2, [r4, #0]
 80172fe:	6822      	ldr	r2, [r4, #0]
 8017300:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017304:	6022      	str	r2, [r4, #0]
 8017306:	68a2      	ldr	r2, [r4, #8]
 8017308:	1e51      	subs	r1, r2, #1
 801730a:	60a1      	str	r1, [r4, #8]
 801730c:	b192      	cbz	r2, 8017334 <_scanf_i+0xb8>
 801730e:	6832      	ldr	r2, [r6, #0]
 8017310:	1c51      	adds	r1, r2, #1
 8017312:	6031      	str	r1, [r6, #0]
 8017314:	7812      	ldrb	r2, [r2, #0]
 8017316:	f805 2b01 	strb.w	r2, [r5], #1
 801731a:	6872      	ldr	r2, [r6, #4]
 801731c:	3a01      	subs	r2, #1
 801731e:	2a00      	cmp	r2, #0
 8017320:	6072      	str	r2, [r6, #4]
 8017322:	dc07      	bgt.n	8017334 <_scanf_i+0xb8>
 8017324:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017328:	4631      	mov	r1, r6
 801732a:	4650      	mov	r0, sl
 801732c:	4790      	blx	r2
 801732e:	2800      	cmp	r0, #0
 8017330:	f040 8085 	bne.w	801743e <_scanf_i+0x1c2>
 8017334:	f10b 0b01 	add.w	fp, fp, #1
 8017338:	f1bb 0f03 	cmp.w	fp, #3
 801733c:	d1cb      	bne.n	80172d6 <_scanf_i+0x5a>
 801733e:	6863      	ldr	r3, [r4, #4]
 8017340:	b90b      	cbnz	r3, 8017346 <_scanf_i+0xca>
 8017342:	230a      	movs	r3, #10
 8017344:	6063      	str	r3, [r4, #4]
 8017346:	6863      	ldr	r3, [r4, #4]
 8017348:	4947      	ldr	r1, [pc, #284]	; (8017468 <_scanf_i+0x1ec>)
 801734a:	6960      	ldr	r0, [r4, #20]
 801734c:	1ac9      	subs	r1, r1, r3
 801734e:	f000 f89f 	bl	8017490 <__sccl>
 8017352:	f04f 0b00 	mov.w	fp, #0
 8017356:	68a3      	ldr	r3, [r4, #8]
 8017358:	6822      	ldr	r2, [r4, #0]
 801735a:	2b00      	cmp	r3, #0
 801735c:	d03d      	beq.n	80173da <_scanf_i+0x15e>
 801735e:	6831      	ldr	r1, [r6, #0]
 8017360:	6960      	ldr	r0, [r4, #20]
 8017362:	f891 c000 	ldrb.w	ip, [r1]
 8017366:	f810 000c 	ldrb.w	r0, [r0, ip]
 801736a:	2800      	cmp	r0, #0
 801736c:	d035      	beq.n	80173da <_scanf_i+0x15e>
 801736e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017372:	d124      	bne.n	80173be <_scanf_i+0x142>
 8017374:	0510      	lsls	r0, r2, #20
 8017376:	d522      	bpl.n	80173be <_scanf_i+0x142>
 8017378:	f10b 0b01 	add.w	fp, fp, #1
 801737c:	f1b9 0f00 	cmp.w	r9, #0
 8017380:	d003      	beq.n	801738a <_scanf_i+0x10e>
 8017382:	3301      	adds	r3, #1
 8017384:	f109 39ff 	add.w	r9, r9, #4294967295
 8017388:	60a3      	str	r3, [r4, #8]
 801738a:	6873      	ldr	r3, [r6, #4]
 801738c:	3b01      	subs	r3, #1
 801738e:	2b00      	cmp	r3, #0
 8017390:	6073      	str	r3, [r6, #4]
 8017392:	dd1b      	ble.n	80173cc <_scanf_i+0x150>
 8017394:	6833      	ldr	r3, [r6, #0]
 8017396:	3301      	adds	r3, #1
 8017398:	6033      	str	r3, [r6, #0]
 801739a:	68a3      	ldr	r3, [r4, #8]
 801739c:	3b01      	subs	r3, #1
 801739e:	60a3      	str	r3, [r4, #8]
 80173a0:	e7d9      	b.n	8017356 <_scanf_i+0xda>
 80173a2:	f1bb 0f02 	cmp.w	fp, #2
 80173a6:	d1ae      	bne.n	8017306 <_scanf_i+0x8a>
 80173a8:	6822      	ldr	r2, [r4, #0]
 80173aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80173ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80173b2:	d1bf      	bne.n	8017334 <_scanf_i+0xb8>
 80173b4:	2310      	movs	r3, #16
 80173b6:	6063      	str	r3, [r4, #4]
 80173b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80173bc:	e7a2      	b.n	8017304 <_scanf_i+0x88>
 80173be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80173c2:	6022      	str	r2, [r4, #0]
 80173c4:	780b      	ldrb	r3, [r1, #0]
 80173c6:	f805 3b01 	strb.w	r3, [r5], #1
 80173ca:	e7de      	b.n	801738a <_scanf_i+0x10e>
 80173cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80173d0:	4631      	mov	r1, r6
 80173d2:	4650      	mov	r0, sl
 80173d4:	4798      	blx	r3
 80173d6:	2800      	cmp	r0, #0
 80173d8:	d0df      	beq.n	801739a <_scanf_i+0x11e>
 80173da:	6823      	ldr	r3, [r4, #0]
 80173dc:	05db      	lsls	r3, r3, #23
 80173de:	d50d      	bpl.n	80173fc <_scanf_i+0x180>
 80173e0:	42bd      	cmp	r5, r7
 80173e2:	d909      	bls.n	80173f8 <_scanf_i+0x17c>
 80173e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80173e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80173ec:	4632      	mov	r2, r6
 80173ee:	4650      	mov	r0, sl
 80173f0:	4798      	blx	r3
 80173f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80173f6:	464d      	mov	r5, r9
 80173f8:	42bd      	cmp	r5, r7
 80173fa:	d02d      	beq.n	8017458 <_scanf_i+0x1dc>
 80173fc:	6822      	ldr	r2, [r4, #0]
 80173fe:	f012 0210 	ands.w	r2, r2, #16
 8017402:	d113      	bne.n	801742c <_scanf_i+0x1b0>
 8017404:	702a      	strb	r2, [r5, #0]
 8017406:	6863      	ldr	r3, [r4, #4]
 8017408:	9e01      	ldr	r6, [sp, #4]
 801740a:	4639      	mov	r1, r7
 801740c:	4650      	mov	r0, sl
 801740e:	47b0      	blx	r6
 8017410:	6821      	ldr	r1, [r4, #0]
 8017412:	f8d8 3000 	ldr.w	r3, [r8]
 8017416:	f011 0f20 	tst.w	r1, #32
 801741a:	d013      	beq.n	8017444 <_scanf_i+0x1c8>
 801741c:	1d1a      	adds	r2, r3, #4
 801741e:	f8c8 2000 	str.w	r2, [r8]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	6018      	str	r0, [r3, #0]
 8017426:	68e3      	ldr	r3, [r4, #12]
 8017428:	3301      	adds	r3, #1
 801742a:	60e3      	str	r3, [r4, #12]
 801742c:	1bed      	subs	r5, r5, r7
 801742e:	44ab      	add	fp, r5
 8017430:	6925      	ldr	r5, [r4, #16]
 8017432:	445d      	add	r5, fp
 8017434:	6125      	str	r5, [r4, #16]
 8017436:	2000      	movs	r0, #0
 8017438:	b007      	add	sp, #28
 801743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801743e:	f04f 0b00 	mov.w	fp, #0
 8017442:	e7ca      	b.n	80173da <_scanf_i+0x15e>
 8017444:	1d1a      	adds	r2, r3, #4
 8017446:	f8c8 2000 	str.w	r2, [r8]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	f011 0f01 	tst.w	r1, #1
 8017450:	bf14      	ite	ne
 8017452:	8018      	strhne	r0, [r3, #0]
 8017454:	6018      	streq	r0, [r3, #0]
 8017456:	e7e6      	b.n	8017426 <_scanf_i+0x1aa>
 8017458:	2001      	movs	r0, #1
 801745a:	e7ed      	b.n	8017438 <_scanf_i+0x1bc>
 801745c:	0801a094 	.word	0x0801a094
 8017460:	080176ed 	.word	0x080176ed
 8017464:	08017605 	.word	0x08017605
 8017468:	0801aa1e 	.word	0x0801aa1e

0801746c <_read_r>:
 801746c:	b538      	push	{r3, r4, r5, lr}
 801746e:	4d07      	ldr	r5, [pc, #28]	; (801748c <_read_r+0x20>)
 8017470:	4604      	mov	r4, r0
 8017472:	4608      	mov	r0, r1
 8017474:	4611      	mov	r1, r2
 8017476:	2200      	movs	r2, #0
 8017478:	602a      	str	r2, [r5, #0]
 801747a:	461a      	mov	r2, r3
 801747c:	f7f4 fb06 	bl	800ba8c <_read>
 8017480:	1c43      	adds	r3, r0, #1
 8017482:	d102      	bne.n	801748a <_read_r+0x1e>
 8017484:	682b      	ldr	r3, [r5, #0]
 8017486:	b103      	cbz	r3, 801748a <_read_r+0x1e>
 8017488:	6023      	str	r3, [r4, #0]
 801748a:	bd38      	pop	{r3, r4, r5, pc}
 801748c:	20006d50 	.word	0x20006d50

08017490 <__sccl>:
 8017490:	b570      	push	{r4, r5, r6, lr}
 8017492:	780b      	ldrb	r3, [r1, #0]
 8017494:	4604      	mov	r4, r0
 8017496:	2b5e      	cmp	r3, #94	; 0x5e
 8017498:	bf0b      	itete	eq
 801749a:	784b      	ldrbeq	r3, [r1, #1]
 801749c:	1c48      	addne	r0, r1, #1
 801749e:	1c88      	addeq	r0, r1, #2
 80174a0:	2200      	movne	r2, #0
 80174a2:	bf08      	it	eq
 80174a4:	2201      	moveq	r2, #1
 80174a6:	1e61      	subs	r1, r4, #1
 80174a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80174ac:	f801 2f01 	strb.w	r2, [r1, #1]!
 80174b0:	42a9      	cmp	r1, r5
 80174b2:	d1fb      	bne.n	80174ac <__sccl+0x1c>
 80174b4:	b90b      	cbnz	r3, 80174ba <__sccl+0x2a>
 80174b6:	3801      	subs	r0, #1
 80174b8:	bd70      	pop	{r4, r5, r6, pc}
 80174ba:	f082 0201 	eor.w	r2, r2, #1
 80174be:	54e2      	strb	r2, [r4, r3]
 80174c0:	4605      	mov	r5, r0
 80174c2:	4628      	mov	r0, r5
 80174c4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80174c8:	292d      	cmp	r1, #45	; 0x2d
 80174ca:	d006      	beq.n	80174da <__sccl+0x4a>
 80174cc:	295d      	cmp	r1, #93	; 0x5d
 80174ce:	d0f3      	beq.n	80174b8 <__sccl+0x28>
 80174d0:	b909      	cbnz	r1, 80174d6 <__sccl+0x46>
 80174d2:	4628      	mov	r0, r5
 80174d4:	e7f0      	b.n	80174b8 <__sccl+0x28>
 80174d6:	460b      	mov	r3, r1
 80174d8:	e7f1      	b.n	80174be <__sccl+0x2e>
 80174da:	786e      	ldrb	r6, [r5, #1]
 80174dc:	2e5d      	cmp	r6, #93	; 0x5d
 80174de:	d0fa      	beq.n	80174d6 <__sccl+0x46>
 80174e0:	42b3      	cmp	r3, r6
 80174e2:	dcf8      	bgt.n	80174d6 <__sccl+0x46>
 80174e4:	3502      	adds	r5, #2
 80174e6:	4619      	mov	r1, r3
 80174e8:	3101      	adds	r1, #1
 80174ea:	428e      	cmp	r6, r1
 80174ec:	5462      	strb	r2, [r4, r1]
 80174ee:	dcfb      	bgt.n	80174e8 <__sccl+0x58>
 80174f0:	1af1      	subs	r1, r6, r3
 80174f2:	3901      	subs	r1, #1
 80174f4:	1c58      	adds	r0, r3, #1
 80174f6:	42b3      	cmp	r3, r6
 80174f8:	bfa8      	it	ge
 80174fa:	2100      	movge	r1, #0
 80174fc:	1843      	adds	r3, r0, r1
 80174fe:	e7e0      	b.n	80174c2 <__sccl+0x32>

08017500 <_strtol_l.constprop.0>:
 8017500:	2b01      	cmp	r3, #1
 8017502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017506:	d001      	beq.n	801750c <_strtol_l.constprop.0+0xc>
 8017508:	2b24      	cmp	r3, #36	; 0x24
 801750a:	d906      	bls.n	801751a <_strtol_l.constprop.0+0x1a>
 801750c:	f7fd fa8a 	bl	8014a24 <__errno>
 8017510:	2316      	movs	r3, #22
 8017512:	6003      	str	r3, [r0, #0]
 8017514:	2000      	movs	r0, #0
 8017516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801751a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017600 <_strtol_l.constprop.0+0x100>
 801751e:	460d      	mov	r5, r1
 8017520:	462e      	mov	r6, r5
 8017522:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017526:	f814 700c 	ldrb.w	r7, [r4, ip]
 801752a:	f017 0708 	ands.w	r7, r7, #8
 801752e:	d1f7      	bne.n	8017520 <_strtol_l.constprop.0+0x20>
 8017530:	2c2d      	cmp	r4, #45	; 0x2d
 8017532:	d132      	bne.n	801759a <_strtol_l.constprop.0+0x9a>
 8017534:	782c      	ldrb	r4, [r5, #0]
 8017536:	2701      	movs	r7, #1
 8017538:	1cb5      	adds	r5, r6, #2
 801753a:	2b00      	cmp	r3, #0
 801753c:	d05b      	beq.n	80175f6 <_strtol_l.constprop.0+0xf6>
 801753e:	2b10      	cmp	r3, #16
 8017540:	d109      	bne.n	8017556 <_strtol_l.constprop.0+0x56>
 8017542:	2c30      	cmp	r4, #48	; 0x30
 8017544:	d107      	bne.n	8017556 <_strtol_l.constprop.0+0x56>
 8017546:	782c      	ldrb	r4, [r5, #0]
 8017548:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801754c:	2c58      	cmp	r4, #88	; 0x58
 801754e:	d14d      	bne.n	80175ec <_strtol_l.constprop.0+0xec>
 8017550:	786c      	ldrb	r4, [r5, #1]
 8017552:	2310      	movs	r3, #16
 8017554:	3502      	adds	r5, #2
 8017556:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801755a:	f108 38ff 	add.w	r8, r8, #4294967295
 801755e:	f04f 0c00 	mov.w	ip, #0
 8017562:	fbb8 f9f3 	udiv	r9, r8, r3
 8017566:	4666      	mov	r6, ip
 8017568:	fb03 8a19 	mls	sl, r3, r9, r8
 801756c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017570:	f1be 0f09 	cmp.w	lr, #9
 8017574:	d816      	bhi.n	80175a4 <_strtol_l.constprop.0+0xa4>
 8017576:	4674      	mov	r4, lr
 8017578:	42a3      	cmp	r3, r4
 801757a:	dd24      	ble.n	80175c6 <_strtol_l.constprop.0+0xc6>
 801757c:	f1bc 0f00 	cmp.w	ip, #0
 8017580:	db1e      	blt.n	80175c0 <_strtol_l.constprop.0+0xc0>
 8017582:	45b1      	cmp	r9, r6
 8017584:	d31c      	bcc.n	80175c0 <_strtol_l.constprop.0+0xc0>
 8017586:	d101      	bne.n	801758c <_strtol_l.constprop.0+0x8c>
 8017588:	45a2      	cmp	sl, r4
 801758a:	db19      	blt.n	80175c0 <_strtol_l.constprop.0+0xc0>
 801758c:	fb06 4603 	mla	r6, r6, r3, r4
 8017590:	f04f 0c01 	mov.w	ip, #1
 8017594:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017598:	e7e8      	b.n	801756c <_strtol_l.constprop.0+0x6c>
 801759a:	2c2b      	cmp	r4, #43	; 0x2b
 801759c:	bf04      	itt	eq
 801759e:	782c      	ldrbeq	r4, [r5, #0]
 80175a0:	1cb5      	addeq	r5, r6, #2
 80175a2:	e7ca      	b.n	801753a <_strtol_l.constprop.0+0x3a>
 80175a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80175a8:	f1be 0f19 	cmp.w	lr, #25
 80175ac:	d801      	bhi.n	80175b2 <_strtol_l.constprop.0+0xb2>
 80175ae:	3c37      	subs	r4, #55	; 0x37
 80175b0:	e7e2      	b.n	8017578 <_strtol_l.constprop.0+0x78>
 80175b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80175b6:	f1be 0f19 	cmp.w	lr, #25
 80175ba:	d804      	bhi.n	80175c6 <_strtol_l.constprop.0+0xc6>
 80175bc:	3c57      	subs	r4, #87	; 0x57
 80175be:	e7db      	b.n	8017578 <_strtol_l.constprop.0+0x78>
 80175c0:	f04f 3cff 	mov.w	ip, #4294967295
 80175c4:	e7e6      	b.n	8017594 <_strtol_l.constprop.0+0x94>
 80175c6:	f1bc 0f00 	cmp.w	ip, #0
 80175ca:	da05      	bge.n	80175d8 <_strtol_l.constprop.0+0xd8>
 80175cc:	2322      	movs	r3, #34	; 0x22
 80175ce:	6003      	str	r3, [r0, #0]
 80175d0:	4646      	mov	r6, r8
 80175d2:	b942      	cbnz	r2, 80175e6 <_strtol_l.constprop.0+0xe6>
 80175d4:	4630      	mov	r0, r6
 80175d6:	e79e      	b.n	8017516 <_strtol_l.constprop.0+0x16>
 80175d8:	b107      	cbz	r7, 80175dc <_strtol_l.constprop.0+0xdc>
 80175da:	4276      	negs	r6, r6
 80175dc:	2a00      	cmp	r2, #0
 80175de:	d0f9      	beq.n	80175d4 <_strtol_l.constprop.0+0xd4>
 80175e0:	f1bc 0f00 	cmp.w	ip, #0
 80175e4:	d000      	beq.n	80175e8 <_strtol_l.constprop.0+0xe8>
 80175e6:	1e69      	subs	r1, r5, #1
 80175e8:	6011      	str	r1, [r2, #0]
 80175ea:	e7f3      	b.n	80175d4 <_strtol_l.constprop.0+0xd4>
 80175ec:	2430      	movs	r4, #48	; 0x30
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d1b1      	bne.n	8017556 <_strtol_l.constprop.0+0x56>
 80175f2:	2308      	movs	r3, #8
 80175f4:	e7af      	b.n	8017556 <_strtol_l.constprop.0+0x56>
 80175f6:	2c30      	cmp	r4, #48	; 0x30
 80175f8:	d0a5      	beq.n	8017546 <_strtol_l.constprop.0+0x46>
 80175fa:	230a      	movs	r3, #10
 80175fc:	e7ab      	b.n	8017556 <_strtol_l.constprop.0+0x56>
 80175fe:	bf00      	nop
 8017600:	0801a70b 	.word	0x0801a70b

08017604 <_strtol_r>:
 8017604:	f7ff bf7c 	b.w	8017500 <_strtol_l.constprop.0>

08017608 <_strtoul_l.constprop.0>:
 8017608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801760c:	4f36      	ldr	r7, [pc, #216]	; (80176e8 <_strtoul_l.constprop.0+0xe0>)
 801760e:	4686      	mov	lr, r0
 8017610:	460d      	mov	r5, r1
 8017612:	4628      	mov	r0, r5
 8017614:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017618:	5de6      	ldrb	r6, [r4, r7]
 801761a:	f016 0608 	ands.w	r6, r6, #8
 801761e:	d1f8      	bne.n	8017612 <_strtoul_l.constprop.0+0xa>
 8017620:	2c2d      	cmp	r4, #45	; 0x2d
 8017622:	d12f      	bne.n	8017684 <_strtoul_l.constprop.0+0x7c>
 8017624:	782c      	ldrb	r4, [r5, #0]
 8017626:	2601      	movs	r6, #1
 8017628:	1c85      	adds	r5, r0, #2
 801762a:	2b00      	cmp	r3, #0
 801762c:	d057      	beq.n	80176de <_strtoul_l.constprop.0+0xd6>
 801762e:	2b10      	cmp	r3, #16
 8017630:	d109      	bne.n	8017646 <_strtoul_l.constprop.0+0x3e>
 8017632:	2c30      	cmp	r4, #48	; 0x30
 8017634:	d107      	bne.n	8017646 <_strtoul_l.constprop.0+0x3e>
 8017636:	7828      	ldrb	r0, [r5, #0]
 8017638:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801763c:	2858      	cmp	r0, #88	; 0x58
 801763e:	d149      	bne.n	80176d4 <_strtoul_l.constprop.0+0xcc>
 8017640:	786c      	ldrb	r4, [r5, #1]
 8017642:	2310      	movs	r3, #16
 8017644:	3502      	adds	r5, #2
 8017646:	f04f 38ff 	mov.w	r8, #4294967295
 801764a:	2700      	movs	r7, #0
 801764c:	fbb8 f8f3 	udiv	r8, r8, r3
 8017650:	fb03 f908 	mul.w	r9, r3, r8
 8017654:	ea6f 0909 	mvn.w	r9, r9
 8017658:	4638      	mov	r0, r7
 801765a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801765e:	f1bc 0f09 	cmp.w	ip, #9
 8017662:	d814      	bhi.n	801768e <_strtoul_l.constprop.0+0x86>
 8017664:	4664      	mov	r4, ip
 8017666:	42a3      	cmp	r3, r4
 8017668:	dd22      	ble.n	80176b0 <_strtoul_l.constprop.0+0xa8>
 801766a:	2f00      	cmp	r7, #0
 801766c:	db1d      	blt.n	80176aa <_strtoul_l.constprop.0+0xa2>
 801766e:	4580      	cmp	r8, r0
 8017670:	d31b      	bcc.n	80176aa <_strtoul_l.constprop.0+0xa2>
 8017672:	d101      	bne.n	8017678 <_strtoul_l.constprop.0+0x70>
 8017674:	45a1      	cmp	r9, r4
 8017676:	db18      	blt.n	80176aa <_strtoul_l.constprop.0+0xa2>
 8017678:	fb00 4003 	mla	r0, r0, r3, r4
 801767c:	2701      	movs	r7, #1
 801767e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017682:	e7ea      	b.n	801765a <_strtoul_l.constprop.0+0x52>
 8017684:	2c2b      	cmp	r4, #43	; 0x2b
 8017686:	bf04      	itt	eq
 8017688:	782c      	ldrbeq	r4, [r5, #0]
 801768a:	1c85      	addeq	r5, r0, #2
 801768c:	e7cd      	b.n	801762a <_strtoul_l.constprop.0+0x22>
 801768e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017692:	f1bc 0f19 	cmp.w	ip, #25
 8017696:	d801      	bhi.n	801769c <_strtoul_l.constprop.0+0x94>
 8017698:	3c37      	subs	r4, #55	; 0x37
 801769a:	e7e4      	b.n	8017666 <_strtoul_l.constprop.0+0x5e>
 801769c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80176a0:	f1bc 0f19 	cmp.w	ip, #25
 80176a4:	d804      	bhi.n	80176b0 <_strtoul_l.constprop.0+0xa8>
 80176a6:	3c57      	subs	r4, #87	; 0x57
 80176a8:	e7dd      	b.n	8017666 <_strtoul_l.constprop.0+0x5e>
 80176aa:	f04f 37ff 	mov.w	r7, #4294967295
 80176ae:	e7e6      	b.n	801767e <_strtoul_l.constprop.0+0x76>
 80176b0:	2f00      	cmp	r7, #0
 80176b2:	da07      	bge.n	80176c4 <_strtoul_l.constprop.0+0xbc>
 80176b4:	2322      	movs	r3, #34	; 0x22
 80176b6:	f8ce 3000 	str.w	r3, [lr]
 80176ba:	f04f 30ff 	mov.w	r0, #4294967295
 80176be:	b932      	cbnz	r2, 80176ce <_strtoul_l.constprop.0+0xc6>
 80176c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176c4:	b106      	cbz	r6, 80176c8 <_strtoul_l.constprop.0+0xc0>
 80176c6:	4240      	negs	r0, r0
 80176c8:	2a00      	cmp	r2, #0
 80176ca:	d0f9      	beq.n	80176c0 <_strtoul_l.constprop.0+0xb8>
 80176cc:	b107      	cbz	r7, 80176d0 <_strtoul_l.constprop.0+0xc8>
 80176ce:	1e69      	subs	r1, r5, #1
 80176d0:	6011      	str	r1, [r2, #0]
 80176d2:	e7f5      	b.n	80176c0 <_strtoul_l.constprop.0+0xb8>
 80176d4:	2430      	movs	r4, #48	; 0x30
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d1b5      	bne.n	8017646 <_strtoul_l.constprop.0+0x3e>
 80176da:	2308      	movs	r3, #8
 80176dc:	e7b3      	b.n	8017646 <_strtoul_l.constprop.0+0x3e>
 80176de:	2c30      	cmp	r4, #48	; 0x30
 80176e0:	d0a9      	beq.n	8017636 <_strtoul_l.constprop.0+0x2e>
 80176e2:	230a      	movs	r3, #10
 80176e4:	e7af      	b.n	8017646 <_strtoul_l.constprop.0+0x3e>
 80176e6:	bf00      	nop
 80176e8:	0801a70b 	.word	0x0801a70b

080176ec <_strtoul_r>:
 80176ec:	f7ff bf8c 	b.w	8017608 <_strtoul_l.constprop.0>

080176f0 <__submore>:
 80176f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176f4:	460c      	mov	r4, r1
 80176f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80176f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176fc:	4299      	cmp	r1, r3
 80176fe:	d11d      	bne.n	801773c <__submore+0x4c>
 8017700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017704:	f7fd fa52 	bl	8014bac <_malloc_r>
 8017708:	b918      	cbnz	r0, 8017712 <__submore+0x22>
 801770a:	f04f 30ff 	mov.w	r0, #4294967295
 801770e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017716:	63a3      	str	r3, [r4, #56]	; 0x38
 8017718:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801771c:	6360      	str	r0, [r4, #52]	; 0x34
 801771e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017722:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017726:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801772a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801772e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017732:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017736:	6020      	str	r0, [r4, #0]
 8017738:	2000      	movs	r0, #0
 801773a:	e7e8      	b.n	801770e <__submore+0x1e>
 801773c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801773e:	0077      	lsls	r7, r6, #1
 8017740:	463a      	mov	r2, r7
 8017742:	f000 fa25 	bl	8017b90 <_realloc_r>
 8017746:	4605      	mov	r5, r0
 8017748:	2800      	cmp	r0, #0
 801774a:	d0de      	beq.n	801770a <__submore+0x1a>
 801774c:	eb00 0806 	add.w	r8, r0, r6
 8017750:	4601      	mov	r1, r0
 8017752:	4632      	mov	r2, r6
 8017754:	4640      	mov	r0, r8
 8017756:	f7fd f9a7 	bl	8014aa8 <memcpy>
 801775a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801775e:	f8c4 8000 	str.w	r8, [r4]
 8017762:	e7e9      	b.n	8017738 <__submore+0x48>

08017764 <__assert_func>:
 8017764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017766:	4614      	mov	r4, r2
 8017768:	461a      	mov	r2, r3
 801776a:	4b09      	ldr	r3, [pc, #36]	; (8017790 <__assert_func+0x2c>)
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	4605      	mov	r5, r0
 8017770:	68d8      	ldr	r0, [r3, #12]
 8017772:	b14c      	cbz	r4, 8017788 <__assert_func+0x24>
 8017774:	4b07      	ldr	r3, [pc, #28]	; (8017794 <__assert_func+0x30>)
 8017776:	9100      	str	r1, [sp, #0]
 8017778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801777c:	4906      	ldr	r1, [pc, #24]	; (8017798 <__assert_func+0x34>)
 801777e:	462b      	mov	r3, r5
 8017780:	f000 f9a6 	bl	8017ad0 <fiprintf>
 8017784:	f000 fc5a 	bl	801803c <abort>
 8017788:	4b04      	ldr	r3, [pc, #16]	; (801779c <__assert_func+0x38>)
 801778a:	461c      	mov	r4, r3
 801778c:	e7f3      	b.n	8017776 <__assert_func+0x12>
 801778e:	bf00      	nop
 8017790:	20000320 	.word	0x20000320
 8017794:	0801aa20 	.word	0x0801aa20
 8017798:	0801aa2d 	.word	0x0801aa2d
 801779c:	0801aa5b 	.word	0x0801aa5b

080177a0 <__sflush_r>:
 80177a0:	898a      	ldrh	r2, [r1, #12]
 80177a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177a6:	4605      	mov	r5, r0
 80177a8:	0710      	lsls	r0, r2, #28
 80177aa:	460c      	mov	r4, r1
 80177ac:	d458      	bmi.n	8017860 <__sflush_r+0xc0>
 80177ae:	684b      	ldr	r3, [r1, #4]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	dc05      	bgt.n	80177c0 <__sflush_r+0x20>
 80177b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	dc02      	bgt.n	80177c0 <__sflush_r+0x20>
 80177ba:	2000      	movs	r0, #0
 80177bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80177c2:	2e00      	cmp	r6, #0
 80177c4:	d0f9      	beq.n	80177ba <__sflush_r+0x1a>
 80177c6:	2300      	movs	r3, #0
 80177c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80177cc:	682f      	ldr	r7, [r5, #0]
 80177ce:	602b      	str	r3, [r5, #0]
 80177d0:	d032      	beq.n	8017838 <__sflush_r+0x98>
 80177d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80177d4:	89a3      	ldrh	r3, [r4, #12]
 80177d6:	075a      	lsls	r2, r3, #29
 80177d8:	d505      	bpl.n	80177e6 <__sflush_r+0x46>
 80177da:	6863      	ldr	r3, [r4, #4]
 80177dc:	1ac0      	subs	r0, r0, r3
 80177de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80177e0:	b10b      	cbz	r3, 80177e6 <__sflush_r+0x46>
 80177e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80177e4:	1ac0      	subs	r0, r0, r3
 80177e6:	2300      	movs	r3, #0
 80177e8:	4602      	mov	r2, r0
 80177ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80177ec:	6a21      	ldr	r1, [r4, #32]
 80177ee:	4628      	mov	r0, r5
 80177f0:	47b0      	blx	r6
 80177f2:	1c43      	adds	r3, r0, #1
 80177f4:	89a3      	ldrh	r3, [r4, #12]
 80177f6:	d106      	bne.n	8017806 <__sflush_r+0x66>
 80177f8:	6829      	ldr	r1, [r5, #0]
 80177fa:	291d      	cmp	r1, #29
 80177fc:	d82c      	bhi.n	8017858 <__sflush_r+0xb8>
 80177fe:	4a2a      	ldr	r2, [pc, #168]	; (80178a8 <__sflush_r+0x108>)
 8017800:	40ca      	lsrs	r2, r1
 8017802:	07d6      	lsls	r6, r2, #31
 8017804:	d528      	bpl.n	8017858 <__sflush_r+0xb8>
 8017806:	2200      	movs	r2, #0
 8017808:	6062      	str	r2, [r4, #4]
 801780a:	04d9      	lsls	r1, r3, #19
 801780c:	6922      	ldr	r2, [r4, #16]
 801780e:	6022      	str	r2, [r4, #0]
 8017810:	d504      	bpl.n	801781c <__sflush_r+0x7c>
 8017812:	1c42      	adds	r2, r0, #1
 8017814:	d101      	bne.n	801781a <__sflush_r+0x7a>
 8017816:	682b      	ldr	r3, [r5, #0]
 8017818:	b903      	cbnz	r3, 801781c <__sflush_r+0x7c>
 801781a:	6560      	str	r0, [r4, #84]	; 0x54
 801781c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801781e:	602f      	str	r7, [r5, #0]
 8017820:	2900      	cmp	r1, #0
 8017822:	d0ca      	beq.n	80177ba <__sflush_r+0x1a>
 8017824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017828:	4299      	cmp	r1, r3
 801782a:	d002      	beq.n	8017832 <__sflush_r+0x92>
 801782c:	4628      	mov	r0, r5
 801782e:	f7fd f951 	bl	8014ad4 <_free_r>
 8017832:	2000      	movs	r0, #0
 8017834:	6360      	str	r0, [r4, #52]	; 0x34
 8017836:	e7c1      	b.n	80177bc <__sflush_r+0x1c>
 8017838:	6a21      	ldr	r1, [r4, #32]
 801783a:	2301      	movs	r3, #1
 801783c:	4628      	mov	r0, r5
 801783e:	47b0      	blx	r6
 8017840:	1c41      	adds	r1, r0, #1
 8017842:	d1c7      	bne.n	80177d4 <__sflush_r+0x34>
 8017844:	682b      	ldr	r3, [r5, #0]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d0c4      	beq.n	80177d4 <__sflush_r+0x34>
 801784a:	2b1d      	cmp	r3, #29
 801784c:	d001      	beq.n	8017852 <__sflush_r+0xb2>
 801784e:	2b16      	cmp	r3, #22
 8017850:	d101      	bne.n	8017856 <__sflush_r+0xb6>
 8017852:	602f      	str	r7, [r5, #0]
 8017854:	e7b1      	b.n	80177ba <__sflush_r+0x1a>
 8017856:	89a3      	ldrh	r3, [r4, #12]
 8017858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801785c:	81a3      	strh	r3, [r4, #12]
 801785e:	e7ad      	b.n	80177bc <__sflush_r+0x1c>
 8017860:	690f      	ldr	r7, [r1, #16]
 8017862:	2f00      	cmp	r7, #0
 8017864:	d0a9      	beq.n	80177ba <__sflush_r+0x1a>
 8017866:	0793      	lsls	r3, r2, #30
 8017868:	680e      	ldr	r6, [r1, #0]
 801786a:	bf08      	it	eq
 801786c:	694b      	ldreq	r3, [r1, #20]
 801786e:	600f      	str	r7, [r1, #0]
 8017870:	bf18      	it	ne
 8017872:	2300      	movne	r3, #0
 8017874:	eba6 0807 	sub.w	r8, r6, r7
 8017878:	608b      	str	r3, [r1, #8]
 801787a:	f1b8 0f00 	cmp.w	r8, #0
 801787e:	dd9c      	ble.n	80177ba <__sflush_r+0x1a>
 8017880:	6a21      	ldr	r1, [r4, #32]
 8017882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017884:	4643      	mov	r3, r8
 8017886:	463a      	mov	r2, r7
 8017888:	4628      	mov	r0, r5
 801788a:	47b0      	blx	r6
 801788c:	2800      	cmp	r0, #0
 801788e:	dc06      	bgt.n	801789e <__sflush_r+0xfe>
 8017890:	89a3      	ldrh	r3, [r4, #12]
 8017892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017896:	81a3      	strh	r3, [r4, #12]
 8017898:	f04f 30ff 	mov.w	r0, #4294967295
 801789c:	e78e      	b.n	80177bc <__sflush_r+0x1c>
 801789e:	4407      	add	r7, r0
 80178a0:	eba8 0800 	sub.w	r8, r8, r0
 80178a4:	e7e9      	b.n	801787a <__sflush_r+0xda>
 80178a6:	bf00      	nop
 80178a8:	20400001 	.word	0x20400001

080178ac <_fflush_r>:
 80178ac:	b538      	push	{r3, r4, r5, lr}
 80178ae:	690b      	ldr	r3, [r1, #16]
 80178b0:	4605      	mov	r5, r0
 80178b2:	460c      	mov	r4, r1
 80178b4:	b913      	cbnz	r3, 80178bc <_fflush_r+0x10>
 80178b6:	2500      	movs	r5, #0
 80178b8:	4628      	mov	r0, r5
 80178ba:	bd38      	pop	{r3, r4, r5, pc}
 80178bc:	b118      	cbz	r0, 80178c6 <_fflush_r+0x1a>
 80178be:	6983      	ldr	r3, [r0, #24]
 80178c0:	b90b      	cbnz	r3, 80178c6 <_fflush_r+0x1a>
 80178c2:	f000 f887 	bl	80179d4 <__sinit>
 80178c6:	4b14      	ldr	r3, [pc, #80]	; (8017918 <_fflush_r+0x6c>)
 80178c8:	429c      	cmp	r4, r3
 80178ca:	d11b      	bne.n	8017904 <_fflush_r+0x58>
 80178cc:	686c      	ldr	r4, [r5, #4]
 80178ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d0ef      	beq.n	80178b6 <_fflush_r+0xa>
 80178d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80178d8:	07d0      	lsls	r0, r2, #31
 80178da:	d404      	bmi.n	80178e6 <_fflush_r+0x3a>
 80178dc:	0599      	lsls	r1, r3, #22
 80178de:	d402      	bmi.n	80178e6 <_fflush_r+0x3a>
 80178e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178e2:	f000 f927 	bl	8017b34 <__retarget_lock_acquire_recursive>
 80178e6:	4628      	mov	r0, r5
 80178e8:	4621      	mov	r1, r4
 80178ea:	f7ff ff59 	bl	80177a0 <__sflush_r>
 80178ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80178f0:	07da      	lsls	r2, r3, #31
 80178f2:	4605      	mov	r5, r0
 80178f4:	d4e0      	bmi.n	80178b8 <_fflush_r+0xc>
 80178f6:	89a3      	ldrh	r3, [r4, #12]
 80178f8:	059b      	lsls	r3, r3, #22
 80178fa:	d4dd      	bmi.n	80178b8 <_fflush_r+0xc>
 80178fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178fe:	f000 f91a 	bl	8017b36 <__retarget_lock_release_recursive>
 8017902:	e7d9      	b.n	80178b8 <_fflush_r+0xc>
 8017904:	4b05      	ldr	r3, [pc, #20]	; (801791c <_fflush_r+0x70>)
 8017906:	429c      	cmp	r4, r3
 8017908:	d101      	bne.n	801790e <_fflush_r+0x62>
 801790a:	68ac      	ldr	r4, [r5, #8]
 801790c:	e7df      	b.n	80178ce <_fflush_r+0x22>
 801790e:	4b04      	ldr	r3, [pc, #16]	; (8017920 <_fflush_r+0x74>)
 8017910:	429c      	cmp	r4, r3
 8017912:	bf08      	it	eq
 8017914:	68ec      	ldreq	r4, [r5, #12]
 8017916:	e7da      	b.n	80178ce <_fflush_r+0x22>
 8017918:	0801aa7c 	.word	0x0801aa7c
 801791c:	0801aa9c 	.word	0x0801aa9c
 8017920:	0801aa5c 	.word	0x0801aa5c

08017924 <std>:
 8017924:	2300      	movs	r3, #0
 8017926:	b510      	push	{r4, lr}
 8017928:	4604      	mov	r4, r0
 801792a:	e9c0 3300 	strd	r3, r3, [r0]
 801792e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017932:	6083      	str	r3, [r0, #8]
 8017934:	8181      	strh	r1, [r0, #12]
 8017936:	6643      	str	r3, [r0, #100]	; 0x64
 8017938:	81c2      	strh	r2, [r0, #14]
 801793a:	6183      	str	r3, [r0, #24]
 801793c:	4619      	mov	r1, r3
 801793e:	2208      	movs	r2, #8
 8017940:	305c      	adds	r0, #92	; 0x5c
 8017942:	f7fd f8bf 	bl	8014ac4 <memset>
 8017946:	4b05      	ldr	r3, [pc, #20]	; (801795c <std+0x38>)
 8017948:	6263      	str	r3, [r4, #36]	; 0x24
 801794a:	4b05      	ldr	r3, [pc, #20]	; (8017960 <std+0x3c>)
 801794c:	62a3      	str	r3, [r4, #40]	; 0x28
 801794e:	4b05      	ldr	r3, [pc, #20]	; (8017964 <std+0x40>)
 8017950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017952:	4b05      	ldr	r3, [pc, #20]	; (8017968 <std+0x44>)
 8017954:	6224      	str	r4, [r4, #32]
 8017956:	6323      	str	r3, [r4, #48]	; 0x30
 8017958:	bd10      	pop	{r4, pc}
 801795a:	bf00      	nop
 801795c:	080155e1 	.word	0x080155e1
 8017960:	08015607 	.word	0x08015607
 8017964:	0801563f 	.word	0x0801563f
 8017968:	08015663 	.word	0x08015663

0801796c <_cleanup_r>:
 801796c:	4901      	ldr	r1, [pc, #4]	; (8017974 <_cleanup_r+0x8>)
 801796e:	f000 b8c1 	b.w	8017af4 <_fwalk_reent>
 8017972:	bf00      	nop
 8017974:	080178ad 	.word	0x080178ad

08017978 <__sfmoreglue>:
 8017978:	b570      	push	{r4, r5, r6, lr}
 801797a:	2268      	movs	r2, #104	; 0x68
 801797c:	1e4d      	subs	r5, r1, #1
 801797e:	4355      	muls	r5, r2
 8017980:	460e      	mov	r6, r1
 8017982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017986:	f7fd f911 	bl	8014bac <_malloc_r>
 801798a:	4604      	mov	r4, r0
 801798c:	b140      	cbz	r0, 80179a0 <__sfmoreglue+0x28>
 801798e:	2100      	movs	r1, #0
 8017990:	e9c0 1600 	strd	r1, r6, [r0]
 8017994:	300c      	adds	r0, #12
 8017996:	60a0      	str	r0, [r4, #8]
 8017998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801799c:	f7fd f892 	bl	8014ac4 <memset>
 80179a0:	4620      	mov	r0, r4
 80179a2:	bd70      	pop	{r4, r5, r6, pc}

080179a4 <__sfp_lock_acquire>:
 80179a4:	4801      	ldr	r0, [pc, #4]	; (80179ac <__sfp_lock_acquire+0x8>)
 80179a6:	f000 b8c5 	b.w	8017b34 <__retarget_lock_acquire_recursive>
 80179aa:	bf00      	nop
 80179ac:	20006d55 	.word	0x20006d55

080179b0 <__sfp_lock_release>:
 80179b0:	4801      	ldr	r0, [pc, #4]	; (80179b8 <__sfp_lock_release+0x8>)
 80179b2:	f000 b8c0 	b.w	8017b36 <__retarget_lock_release_recursive>
 80179b6:	bf00      	nop
 80179b8:	20006d55 	.word	0x20006d55

080179bc <__sinit_lock_acquire>:
 80179bc:	4801      	ldr	r0, [pc, #4]	; (80179c4 <__sinit_lock_acquire+0x8>)
 80179be:	f000 b8b9 	b.w	8017b34 <__retarget_lock_acquire_recursive>
 80179c2:	bf00      	nop
 80179c4:	20006d56 	.word	0x20006d56

080179c8 <__sinit_lock_release>:
 80179c8:	4801      	ldr	r0, [pc, #4]	; (80179d0 <__sinit_lock_release+0x8>)
 80179ca:	f000 b8b4 	b.w	8017b36 <__retarget_lock_release_recursive>
 80179ce:	bf00      	nop
 80179d0:	20006d56 	.word	0x20006d56

080179d4 <__sinit>:
 80179d4:	b510      	push	{r4, lr}
 80179d6:	4604      	mov	r4, r0
 80179d8:	f7ff fff0 	bl	80179bc <__sinit_lock_acquire>
 80179dc:	69a3      	ldr	r3, [r4, #24]
 80179de:	b11b      	cbz	r3, 80179e8 <__sinit+0x14>
 80179e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179e4:	f7ff bff0 	b.w	80179c8 <__sinit_lock_release>
 80179e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80179ec:	6523      	str	r3, [r4, #80]	; 0x50
 80179ee:	4b13      	ldr	r3, [pc, #76]	; (8017a3c <__sinit+0x68>)
 80179f0:	4a13      	ldr	r2, [pc, #76]	; (8017a40 <__sinit+0x6c>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80179f6:	42a3      	cmp	r3, r4
 80179f8:	bf04      	itt	eq
 80179fa:	2301      	moveq	r3, #1
 80179fc:	61a3      	streq	r3, [r4, #24]
 80179fe:	4620      	mov	r0, r4
 8017a00:	f000 f820 	bl	8017a44 <__sfp>
 8017a04:	6060      	str	r0, [r4, #4]
 8017a06:	4620      	mov	r0, r4
 8017a08:	f000 f81c 	bl	8017a44 <__sfp>
 8017a0c:	60a0      	str	r0, [r4, #8]
 8017a0e:	4620      	mov	r0, r4
 8017a10:	f000 f818 	bl	8017a44 <__sfp>
 8017a14:	2200      	movs	r2, #0
 8017a16:	60e0      	str	r0, [r4, #12]
 8017a18:	2104      	movs	r1, #4
 8017a1a:	6860      	ldr	r0, [r4, #4]
 8017a1c:	f7ff ff82 	bl	8017924 <std>
 8017a20:	68a0      	ldr	r0, [r4, #8]
 8017a22:	2201      	movs	r2, #1
 8017a24:	2109      	movs	r1, #9
 8017a26:	f7ff ff7d 	bl	8017924 <std>
 8017a2a:	68e0      	ldr	r0, [r4, #12]
 8017a2c:	2202      	movs	r2, #2
 8017a2e:	2112      	movs	r1, #18
 8017a30:	f7ff ff78 	bl	8017924 <std>
 8017a34:	2301      	movs	r3, #1
 8017a36:	61a3      	str	r3, [r4, #24]
 8017a38:	e7d2      	b.n	80179e0 <__sinit+0xc>
 8017a3a:	bf00      	nop
 8017a3c:	0801a6d4 	.word	0x0801a6d4
 8017a40:	0801796d 	.word	0x0801796d

08017a44 <__sfp>:
 8017a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a46:	4607      	mov	r7, r0
 8017a48:	f7ff ffac 	bl	80179a4 <__sfp_lock_acquire>
 8017a4c:	4b1e      	ldr	r3, [pc, #120]	; (8017ac8 <__sfp+0x84>)
 8017a4e:	681e      	ldr	r6, [r3, #0]
 8017a50:	69b3      	ldr	r3, [r6, #24]
 8017a52:	b913      	cbnz	r3, 8017a5a <__sfp+0x16>
 8017a54:	4630      	mov	r0, r6
 8017a56:	f7ff ffbd 	bl	80179d4 <__sinit>
 8017a5a:	3648      	adds	r6, #72	; 0x48
 8017a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017a60:	3b01      	subs	r3, #1
 8017a62:	d503      	bpl.n	8017a6c <__sfp+0x28>
 8017a64:	6833      	ldr	r3, [r6, #0]
 8017a66:	b30b      	cbz	r3, 8017aac <__sfp+0x68>
 8017a68:	6836      	ldr	r6, [r6, #0]
 8017a6a:	e7f7      	b.n	8017a5c <__sfp+0x18>
 8017a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017a70:	b9d5      	cbnz	r5, 8017aa8 <__sfp+0x64>
 8017a72:	4b16      	ldr	r3, [pc, #88]	; (8017acc <__sfp+0x88>)
 8017a74:	60e3      	str	r3, [r4, #12]
 8017a76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017a7a:	6665      	str	r5, [r4, #100]	; 0x64
 8017a7c:	f000 f859 	bl	8017b32 <__retarget_lock_init_recursive>
 8017a80:	f7ff ff96 	bl	80179b0 <__sfp_lock_release>
 8017a84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017a88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017a8c:	6025      	str	r5, [r4, #0]
 8017a8e:	61a5      	str	r5, [r4, #24]
 8017a90:	2208      	movs	r2, #8
 8017a92:	4629      	mov	r1, r5
 8017a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017a98:	f7fd f814 	bl	8014ac4 <memset>
 8017a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017aa8:	3468      	adds	r4, #104	; 0x68
 8017aaa:	e7d9      	b.n	8017a60 <__sfp+0x1c>
 8017aac:	2104      	movs	r1, #4
 8017aae:	4638      	mov	r0, r7
 8017ab0:	f7ff ff62 	bl	8017978 <__sfmoreglue>
 8017ab4:	4604      	mov	r4, r0
 8017ab6:	6030      	str	r0, [r6, #0]
 8017ab8:	2800      	cmp	r0, #0
 8017aba:	d1d5      	bne.n	8017a68 <__sfp+0x24>
 8017abc:	f7ff ff78 	bl	80179b0 <__sfp_lock_release>
 8017ac0:	230c      	movs	r3, #12
 8017ac2:	603b      	str	r3, [r7, #0]
 8017ac4:	e7ee      	b.n	8017aa4 <__sfp+0x60>
 8017ac6:	bf00      	nop
 8017ac8:	0801a6d4 	.word	0x0801a6d4
 8017acc:	ffff0001 	.word	0xffff0001

08017ad0 <fiprintf>:
 8017ad0:	b40e      	push	{r1, r2, r3}
 8017ad2:	b503      	push	{r0, r1, lr}
 8017ad4:	4601      	mov	r1, r0
 8017ad6:	ab03      	add	r3, sp, #12
 8017ad8:	4805      	ldr	r0, [pc, #20]	; (8017af0 <fiprintf+0x20>)
 8017ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ade:	6800      	ldr	r0, [r0, #0]
 8017ae0:	9301      	str	r3, [sp, #4]
 8017ae2:	f000 f8ad 	bl	8017c40 <_vfiprintf_r>
 8017ae6:	b002      	add	sp, #8
 8017ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017aec:	b003      	add	sp, #12
 8017aee:	4770      	bx	lr
 8017af0:	20000320 	.word	0x20000320

08017af4 <_fwalk_reent>:
 8017af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017af8:	4606      	mov	r6, r0
 8017afa:	4688      	mov	r8, r1
 8017afc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017b00:	2700      	movs	r7, #0
 8017b02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017b06:	f1b9 0901 	subs.w	r9, r9, #1
 8017b0a:	d505      	bpl.n	8017b18 <_fwalk_reent+0x24>
 8017b0c:	6824      	ldr	r4, [r4, #0]
 8017b0e:	2c00      	cmp	r4, #0
 8017b10:	d1f7      	bne.n	8017b02 <_fwalk_reent+0xe>
 8017b12:	4638      	mov	r0, r7
 8017b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b18:	89ab      	ldrh	r3, [r5, #12]
 8017b1a:	2b01      	cmp	r3, #1
 8017b1c:	d907      	bls.n	8017b2e <_fwalk_reent+0x3a>
 8017b1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017b22:	3301      	adds	r3, #1
 8017b24:	d003      	beq.n	8017b2e <_fwalk_reent+0x3a>
 8017b26:	4629      	mov	r1, r5
 8017b28:	4630      	mov	r0, r6
 8017b2a:	47c0      	blx	r8
 8017b2c:	4307      	orrs	r7, r0
 8017b2e:	3568      	adds	r5, #104	; 0x68
 8017b30:	e7e9      	b.n	8017b06 <_fwalk_reent+0x12>

08017b32 <__retarget_lock_init_recursive>:
 8017b32:	4770      	bx	lr

08017b34 <__retarget_lock_acquire_recursive>:
 8017b34:	4770      	bx	lr

08017b36 <__retarget_lock_release_recursive>:
 8017b36:	4770      	bx	lr

08017b38 <__ascii_mbtowc>:
 8017b38:	b082      	sub	sp, #8
 8017b3a:	b901      	cbnz	r1, 8017b3e <__ascii_mbtowc+0x6>
 8017b3c:	a901      	add	r1, sp, #4
 8017b3e:	b142      	cbz	r2, 8017b52 <__ascii_mbtowc+0x1a>
 8017b40:	b14b      	cbz	r3, 8017b56 <__ascii_mbtowc+0x1e>
 8017b42:	7813      	ldrb	r3, [r2, #0]
 8017b44:	600b      	str	r3, [r1, #0]
 8017b46:	7812      	ldrb	r2, [r2, #0]
 8017b48:	1e10      	subs	r0, r2, #0
 8017b4a:	bf18      	it	ne
 8017b4c:	2001      	movne	r0, #1
 8017b4e:	b002      	add	sp, #8
 8017b50:	4770      	bx	lr
 8017b52:	4610      	mov	r0, r2
 8017b54:	e7fb      	b.n	8017b4e <__ascii_mbtowc+0x16>
 8017b56:	f06f 0001 	mvn.w	r0, #1
 8017b5a:	e7f8      	b.n	8017b4e <__ascii_mbtowc+0x16>

08017b5c <memmove>:
 8017b5c:	4288      	cmp	r0, r1
 8017b5e:	b510      	push	{r4, lr}
 8017b60:	eb01 0402 	add.w	r4, r1, r2
 8017b64:	d902      	bls.n	8017b6c <memmove+0x10>
 8017b66:	4284      	cmp	r4, r0
 8017b68:	4623      	mov	r3, r4
 8017b6a:	d807      	bhi.n	8017b7c <memmove+0x20>
 8017b6c:	1e43      	subs	r3, r0, #1
 8017b6e:	42a1      	cmp	r1, r4
 8017b70:	d008      	beq.n	8017b84 <memmove+0x28>
 8017b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b7a:	e7f8      	b.n	8017b6e <memmove+0x12>
 8017b7c:	4402      	add	r2, r0
 8017b7e:	4601      	mov	r1, r0
 8017b80:	428a      	cmp	r2, r1
 8017b82:	d100      	bne.n	8017b86 <memmove+0x2a>
 8017b84:	bd10      	pop	{r4, pc}
 8017b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017b8e:	e7f7      	b.n	8017b80 <memmove+0x24>

08017b90 <_realloc_r>:
 8017b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b94:	4680      	mov	r8, r0
 8017b96:	4614      	mov	r4, r2
 8017b98:	460e      	mov	r6, r1
 8017b9a:	b921      	cbnz	r1, 8017ba6 <_realloc_r+0x16>
 8017b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ba0:	4611      	mov	r1, r2
 8017ba2:	f7fd b803 	b.w	8014bac <_malloc_r>
 8017ba6:	b92a      	cbnz	r2, 8017bb4 <_realloc_r+0x24>
 8017ba8:	f7fc ff94 	bl	8014ad4 <_free_r>
 8017bac:	4625      	mov	r5, r4
 8017bae:	4628      	mov	r0, r5
 8017bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bb4:	f000 faae 	bl	8018114 <_malloc_usable_size_r>
 8017bb8:	4284      	cmp	r4, r0
 8017bba:	4607      	mov	r7, r0
 8017bbc:	d802      	bhi.n	8017bc4 <_realloc_r+0x34>
 8017bbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017bc2:	d812      	bhi.n	8017bea <_realloc_r+0x5a>
 8017bc4:	4621      	mov	r1, r4
 8017bc6:	4640      	mov	r0, r8
 8017bc8:	f7fc fff0 	bl	8014bac <_malloc_r>
 8017bcc:	4605      	mov	r5, r0
 8017bce:	2800      	cmp	r0, #0
 8017bd0:	d0ed      	beq.n	8017bae <_realloc_r+0x1e>
 8017bd2:	42bc      	cmp	r4, r7
 8017bd4:	4622      	mov	r2, r4
 8017bd6:	4631      	mov	r1, r6
 8017bd8:	bf28      	it	cs
 8017bda:	463a      	movcs	r2, r7
 8017bdc:	f7fc ff64 	bl	8014aa8 <memcpy>
 8017be0:	4631      	mov	r1, r6
 8017be2:	4640      	mov	r0, r8
 8017be4:	f7fc ff76 	bl	8014ad4 <_free_r>
 8017be8:	e7e1      	b.n	8017bae <_realloc_r+0x1e>
 8017bea:	4635      	mov	r5, r6
 8017bec:	e7df      	b.n	8017bae <_realloc_r+0x1e>

08017bee <__sfputc_r>:
 8017bee:	6893      	ldr	r3, [r2, #8]
 8017bf0:	3b01      	subs	r3, #1
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	b410      	push	{r4}
 8017bf6:	6093      	str	r3, [r2, #8]
 8017bf8:	da08      	bge.n	8017c0c <__sfputc_r+0x1e>
 8017bfa:	6994      	ldr	r4, [r2, #24]
 8017bfc:	42a3      	cmp	r3, r4
 8017bfe:	db01      	blt.n	8017c04 <__sfputc_r+0x16>
 8017c00:	290a      	cmp	r1, #10
 8017c02:	d103      	bne.n	8017c0c <__sfputc_r+0x1e>
 8017c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c08:	f000 b94a 	b.w	8017ea0 <__swbuf_r>
 8017c0c:	6813      	ldr	r3, [r2, #0]
 8017c0e:	1c58      	adds	r0, r3, #1
 8017c10:	6010      	str	r0, [r2, #0]
 8017c12:	7019      	strb	r1, [r3, #0]
 8017c14:	4608      	mov	r0, r1
 8017c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c1a:	4770      	bx	lr

08017c1c <__sfputs_r>:
 8017c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c1e:	4606      	mov	r6, r0
 8017c20:	460f      	mov	r7, r1
 8017c22:	4614      	mov	r4, r2
 8017c24:	18d5      	adds	r5, r2, r3
 8017c26:	42ac      	cmp	r4, r5
 8017c28:	d101      	bne.n	8017c2e <__sfputs_r+0x12>
 8017c2a:	2000      	movs	r0, #0
 8017c2c:	e007      	b.n	8017c3e <__sfputs_r+0x22>
 8017c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c32:	463a      	mov	r2, r7
 8017c34:	4630      	mov	r0, r6
 8017c36:	f7ff ffda 	bl	8017bee <__sfputc_r>
 8017c3a:	1c43      	adds	r3, r0, #1
 8017c3c:	d1f3      	bne.n	8017c26 <__sfputs_r+0xa>
 8017c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017c40 <_vfiprintf_r>:
 8017c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c44:	460d      	mov	r5, r1
 8017c46:	b09d      	sub	sp, #116	; 0x74
 8017c48:	4614      	mov	r4, r2
 8017c4a:	4698      	mov	r8, r3
 8017c4c:	4606      	mov	r6, r0
 8017c4e:	b118      	cbz	r0, 8017c58 <_vfiprintf_r+0x18>
 8017c50:	6983      	ldr	r3, [r0, #24]
 8017c52:	b90b      	cbnz	r3, 8017c58 <_vfiprintf_r+0x18>
 8017c54:	f7ff febe 	bl	80179d4 <__sinit>
 8017c58:	4b89      	ldr	r3, [pc, #548]	; (8017e80 <_vfiprintf_r+0x240>)
 8017c5a:	429d      	cmp	r5, r3
 8017c5c:	d11b      	bne.n	8017c96 <_vfiprintf_r+0x56>
 8017c5e:	6875      	ldr	r5, [r6, #4]
 8017c60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c62:	07d9      	lsls	r1, r3, #31
 8017c64:	d405      	bmi.n	8017c72 <_vfiprintf_r+0x32>
 8017c66:	89ab      	ldrh	r3, [r5, #12]
 8017c68:	059a      	lsls	r2, r3, #22
 8017c6a:	d402      	bmi.n	8017c72 <_vfiprintf_r+0x32>
 8017c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c6e:	f7ff ff61 	bl	8017b34 <__retarget_lock_acquire_recursive>
 8017c72:	89ab      	ldrh	r3, [r5, #12]
 8017c74:	071b      	lsls	r3, r3, #28
 8017c76:	d501      	bpl.n	8017c7c <_vfiprintf_r+0x3c>
 8017c78:	692b      	ldr	r3, [r5, #16]
 8017c7a:	b9eb      	cbnz	r3, 8017cb8 <_vfiprintf_r+0x78>
 8017c7c:	4629      	mov	r1, r5
 8017c7e:	4630      	mov	r0, r6
 8017c80:	f000 f96e 	bl	8017f60 <__swsetup_r>
 8017c84:	b1c0      	cbz	r0, 8017cb8 <_vfiprintf_r+0x78>
 8017c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c88:	07dc      	lsls	r4, r3, #31
 8017c8a:	d50e      	bpl.n	8017caa <_vfiprintf_r+0x6a>
 8017c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c90:	b01d      	add	sp, #116	; 0x74
 8017c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c96:	4b7b      	ldr	r3, [pc, #492]	; (8017e84 <_vfiprintf_r+0x244>)
 8017c98:	429d      	cmp	r5, r3
 8017c9a:	d101      	bne.n	8017ca0 <_vfiprintf_r+0x60>
 8017c9c:	68b5      	ldr	r5, [r6, #8]
 8017c9e:	e7df      	b.n	8017c60 <_vfiprintf_r+0x20>
 8017ca0:	4b79      	ldr	r3, [pc, #484]	; (8017e88 <_vfiprintf_r+0x248>)
 8017ca2:	429d      	cmp	r5, r3
 8017ca4:	bf08      	it	eq
 8017ca6:	68f5      	ldreq	r5, [r6, #12]
 8017ca8:	e7da      	b.n	8017c60 <_vfiprintf_r+0x20>
 8017caa:	89ab      	ldrh	r3, [r5, #12]
 8017cac:	0598      	lsls	r0, r3, #22
 8017cae:	d4ed      	bmi.n	8017c8c <_vfiprintf_r+0x4c>
 8017cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cb2:	f7ff ff40 	bl	8017b36 <__retarget_lock_release_recursive>
 8017cb6:	e7e9      	b.n	8017c8c <_vfiprintf_r+0x4c>
 8017cb8:	2300      	movs	r3, #0
 8017cba:	9309      	str	r3, [sp, #36]	; 0x24
 8017cbc:	2320      	movs	r3, #32
 8017cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8017cc6:	2330      	movs	r3, #48	; 0x30
 8017cc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017e8c <_vfiprintf_r+0x24c>
 8017ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017cd0:	f04f 0901 	mov.w	r9, #1
 8017cd4:	4623      	mov	r3, r4
 8017cd6:	469a      	mov	sl, r3
 8017cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cdc:	b10a      	cbz	r2, 8017ce2 <_vfiprintf_r+0xa2>
 8017cde:	2a25      	cmp	r2, #37	; 0x25
 8017ce0:	d1f9      	bne.n	8017cd6 <_vfiprintf_r+0x96>
 8017ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8017ce6:	d00b      	beq.n	8017d00 <_vfiprintf_r+0xc0>
 8017ce8:	465b      	mov	r3, fp
 8017cea:	4622      	mov	r2, r4
 8017cec:	4629      	mov	r1, r5
 8017cee:	4630      	mov	r0, r6
 8017cf0:	f7ff ff94 	bl	8017c1c <__sfputs_r>
 8017cf4:	3001      	adds	r0, #1
 8017cf6:	f000 80aa 	beq.w	8017e4e <_vfiprintf_r+0x20e>
 8017cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017cfc:	445a      	add	r2, fp
 8017cfe:	9209      	str	r2, [sp, #36]	; 0x24
 8017d00:	f89a 3000 	ldrb.w	r3, [sl]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	f000 80a2 	beq.w	8017e4e <_vfiprintf_r+0x20e>
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8017d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d14:	f10a 0a01 	add.w	sl, sl, #1
 8017d18:	9304      	str	r3, [sp, #16]
 8017d1a:	9307      	str	r3, [sp, #28]
 8017d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d20:	931a      	str	r3, [sp, #104]	; 0x68
 8017d22:	4654      	mov	r4, sl
 8017d24:	2205      	movs	r2, #5
 8017d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d2a:	4858      	ldr	r0, [pc, #352]	; (8017e8c <_vfiprintf_r+0x24c>)
 8017d2c:	f7e8 fa70 	bl	8000210 <memchr>
 8017d30:	9a04      	ldr	r2, [sp, #16]
 8017d32:	b9d8      	cbnz	r0, 8017d6c <_vfiprintf_r+0x12c>
 8017d34:	06d1      	lsls	r1, r2, #27
 8017d36:	bf44      	itt	mi
 8017d38:	2320      	movmi	r3, #32
 8017d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d3e:	0713      	lsls	r3, r2, #28
 8017d40:	bf44      	itt	mi
 8017d42:	232b      	movmi	r3, #43	; 0x2b
 8017d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d48:	f89a 3000 	ldrb.w	r3, [sl]
 8017d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8017d4e:	d015      	beq.n	8017d7c <_vfiprintf_r+0x13c>
 8017d50:	9a07      	ldr	r2, [sp, #28]
 8017d52:	4654      	mov	r4, sl
 8017d54:	2000      	movs	r0, #0
 8017d56:	f04f 0c0a 	mov.w	ip, #10
 8017d5a:	4621      	mov	r1, r4
 8017d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d60:	3b30      	subs	r3, #48	; 0x30
 8017d62:	2b09      	cmp	r3, #9
 8017d64:	d94e      	bls.n	8017e04 <_vfiprintf_r+0x1c4>
 8017d66:	b1b0      	cbz	r0, 8017d96 <_vfiprintf_r+0x156>
 8017d68:	9207      	str	r2, [sp, #28]
 8017d6a:	e014      	b.n	8017d96 <_vfiprintf_r+0x156>
 8017d6c:	eba0 0308 	sub.w	r3, r0, r8
 8017d70:	fa09 f303 	lsl.w	r3, r9, r3
 8017d74:	4313      	orrs	r3, r2
 8017d76:	9304      	str	r3, [sp, #16]
 8017d78:	46a2      	mov	sl, r4
 8017d7a:	e7d2      	b.n	8017d22 <_vfiprintf_r+0xe2>
 8017d7c:	9b03      	ldr	r3, [sp, #12]
 8017d7e:	1d19      	adds	r1, r3, #4
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	9103      	str	r1, [sp, #12]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	bfbb      	ittet	lt
 8017d88:	425b      	neglt	r3, r3
 8017d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8017d8e:	9307      	strge	r3, [sp, #28]
 8017d90:	9307      	strlt	r3, [sp, #28]
 8017d92:	bfb8      	it	lt
 8017d94:	9204      	strlt	r2, [sp, #16]
 8017d96:	7823      	ldrb	r3, [r4, #0]
 8017d98:	2b2e      	cmp	r3, #46	; 0x2e
 8017d9a:	d10c      	bne.n	8017db6 <_vfiprintf_r+0x176>
 8017d9c:	7863      	ldrb	r3, [r4, #1]
 8017d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8017da0:	d135      	bne.n	8017e0e <_vfiprintf_r+0x1ce>
 8017da2:	9b03      	ldr	r3, [sp, #12]
 8017da4:	1d1a      	adds	r2, r3, #4
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	9203      	str	r2, [sp, #12]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	bfb8      	it	lt
 8017dae:	f04f 33ff 	movlt.w	r3, #4294967295
 8017db2:	3402      	adds	r4, #2
 8017db4:	9305      	str	r3, [sp, #20]
 8017db6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017e9c <_vfiprintf_r+0x25c>
 8017dba:	7821      	ldrb	r1, [r4, #0]
 8017dbc:	2203      	movs	r2, #3
 8017dbe:	4650      	mov	r0, sl
 8017dc0:	f7e8 fa26 	bl	8000210 <memchr>
 8017dc4:	b140      	cbz	r0, 8017dd8 <_vfiprintf_r+0x198>
 8017dc6:	2340      	movs	r3, #64	; 0x40
 8017dc8:	eba0 000a 	sub.w	r0, r0, sl
 8017dcc:	fa03 f000 	lsl.w	r0, r3, r0
 8017dd0:	9b04      	ldr	r3, [sp, #16]
 8017dd2:	4303      	orrs	r3, r0
 8017dd4:	3401      	adds	r4, #1
 8017dd6:	9304      	str	r3, [sp, #16]
 8017dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ddc:	482c      	ldr	r0, [pc, #176]	; (8017e90 <_vfiprintf_r+0x250>)
 8017dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017de2:	2206      	movs	r2, #6
 8017de4:	f7e8 fa14 	bl	8000210 <memchr>
 8017de8:	2800      	cmp	r0, #0
 8017dea:	d03f      	beq.n	8017e6c <_vfiprintf_r+0x22c>
 8017dec:	4b29      	ldr	r3, [pc, #164]	; (8017e94 <_vfiprintf_r+0x254>)
 8017dee:	bb1b      	cbnz	r3, 8017e38 <_vfiprintf_r+0x1f8>
 8017df0:	9b03      	ldr	r3, [sp, #12]
 8017df2:	3307      	adds	r3, #7
 8017df4:	f023 0307 	bic.w	r3, r3, #7
 8017df8:	3308      	adds	r3, #8
 8017dfa:	9303      	str	r3, [sp, #12]
 8017dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dfe:	443b      	add	r3, r7
 8017e00:	9309      	str	r3, [sp, #36]	; 0x24
 8017e02:	e767      	b.n	8017cd4 <_vfiprintf_r+0x94>
 8017e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e08:	460c      	mov	r4, r1
 8017e0a:	2001      	movs	r0, #1
 8017e0c:	e7a5      	b.n	8017d5a <_vfiprintf_r+0x11a>
 8017e0e:	2300      	movs	r3, #0
 8017e10:	3401      	adds	r4, #1
 8017e12:	9305      	str	r3, [sp, #20]
 8017e14:	4619      	mov	r1, r3
 8017e16:	f04f 0c0a 	mov.w	ip, #10
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e20:	3a30      	subs	r2, #48	; 0x30
 8017e22:	2a09      	cmp	r2, #9
 8017e24:	d903      	bls.n	8017e2e <_vfiprintf_r+0x1ee>
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d0c5      	beq.n	8017db6 <_vfiprintf_r+0x176>
 8017e2a:	9105      	str	r1, [sp, #20]
 8017e2c:	e7c3      	b.n	8017db6 <_vfiprintf_r+0x176>
 8017e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e32:	4604      	mov	r4, r0
 8017e34:	2301      	movs	r3, #1
 8017e36:	e7f0      	b.n	8017e1a <_vfiprintf_r+0x1da>
 8017e38:	ab03      	add	r3, sp, #12
 8017e3a:	9300      	str	r3, [sp, #0]
 8017e3c:	462a      	mov	r2, r5
 8017e3e:	4b16      	ldr	r3, [pc, #88]	; (8017e98 <_vfiprintf_r+0x258>)
 8017e40:	a904      	add	r1, sp, #16
 8017e42:	4630      	mov	r0, r6
 8017e44:	f7fc ffc6 	bl	8014dd4 <_printf_float>
 8017e48:	4607      	mov	r7, r0
 8017e4a:	1c78      	adds	r0, r7, #1
 8017e4c:	d1d6      	bne.n	8017dfc <_vfiprintf_r+0x1bc>
 8017e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e50:	07d9      	lsls	r1, r3, #31
 8017e52:	d405      	bmi.n	8017e60 <_vfiprintf_r+0x220>
 8017e54:	89ab      	ldrh	r3, [r5, #12]
 8017e56:	059a      	lsls	r2, r3, #22
 8017e58:	d402      	bmi.n	8017e60 <_vfiprintf_r+0x220>
 8017e5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e5c:	f7ff fe6b 	bl	8017b36 <__retarget_lock_release_recursive>
 8017e60:	89ab      	ldrh	r3, [r5, #12]
 8017e62:	065b      	lsls	r3, r3, #25
 8017e64:	f53f af12 	bmi.w	8017c8c <_vfiprintf_r+0x4c>
 8017e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e6a:	e711      	b.n	8017c90 <_vfiprintf_r+0x50>
 8017e6c:	ab03      	add	r3, sp, #12
 8017e6e:	9300      	str	r3, [sp, #0]
 8017e70:	462a      	mov	r2, r5
 8017e72:	4b09      	ldr	r3, [pc, #36]	; (8017e98 <_vfiprintf_r+0x258>)
 8017e74:	a904      	add	r1, sp, #16
 8017e76:	4630      	mov	r0, r6
 8017e78:	f7fd fa50 	bl	801531c <_printf_i>
 8017e7c:	e7e4      	b.n	8017e48 <_vfiprintf_r+0x208>
 8017e7e:	bf00      	nop
 8017e80:	0801aa7c 	.word	0x0801aa7c
 8017e84:	0801aa9c 	.word	0x0801aa9c
 8017e88:	0801aa5c 	.word	0x0801aa5c
 8017e8c:	0801a9f4 	.word	0x0801a9f4
 8017e90:	0801a9fe 	.word	0x0801a9fe
 8017e94:	08014dd5 	.word	0x08014dd5
 8017e98:	08017c1d 	.word	0x08017c1d
 8017e9c:	0801a9fa 	.word	0x0801a9fa

08017ea0 <__swbuf_r>:
 8017ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ea2:	460e      	mov	r6, r1
 8017ea4:	4614      	mov	r4, r2
 8017ea6:	4605      	mov	r5, r0
 8017ea8:	b118      	cbz	r0, 8017eb2 <__swbuf_r+0x12>
 8017eaa:	6983      	ldr	r3, [r0, #24]
 8017eac:	b90b      	cbnz	r3, 8017eb2 <__swbuf_r+0x12>
 8017eae:	f7ff fd91 	bl	80179d4 <__sinit>
 8017eb2:	4b21      	ldr	r3, [pc, #132]	; (8017f38 <__swbuf_r+0x98>)
 8017eb4:	429c      	cmp	r4, r3
 8017eb6:	d12b      	bne.n	8017f10 <__swbuf_r+0x70>
 8017eb8:	686c      	ldr	r4, [r5, #4]
 8017eba:	69a3      	ldr	r3, [r4, #24]
 8017ebc:	60a3      	str	r3, [r4, #8]
 8017ebe:	89a3      	ldrh	r3, [r4, #12]
 8017ec0:	071a      	lsls	r2, r3, #28
 8017ec2:	d52f      	bpl.n	8017f24 <__swbuf_r+0x84>
 8017ec4:	6923      	ldr	r3, [r4, #16]
 8017ec6:	b36b      	cbz	r3, 8017f24 <__swbuf_r+0x84>
 8017ec8:	6923      	ldr	r3, [r4, #16]
 8017eca:	6820      	ldr	r0, [r4, #0]
 8017ecc:	1ac0      	subs	r0, r0, r3
 8017ece:	6963      	ldr	r3, [r4, #20]
 8017ed0:	b2f6      	uxtb	r6, r6
 8017ed2:	4283      	cmp	r3, r0
 8017ed4:	4637      	mov	r7, r6
 8017ed6:	dc04      	bgt.n	8017ee2 <__swbuf_r+0x42>
 8017ed8:	4621      	mov	r1, r4
 8017eda:	4628      	mov	r0, r5
 8017edc:	f7ff fce6 	bl	80178ac <_fflush_r>
 8017ee0:	bb30      	cbnz	r0, 8017f30 <__swbuf_r+0x90>
 8017ee2:	68a3      	ldr	r3, [r4, #8]
 8017ee4:	3b01      	subs	r3, #1
 8017ee6:	60a3      	str	r3, [r4, #8]
 8017ee8:	6823      	ldr	r3, [r4, #0]
 8017eea:	1c5a      	adds	r2, r3, #1
 8017eec:	6022      	str	r2, [r4, #0]
 8017eee:	701e      	strb	r6, [r3, #0]
 8017ef0:	6963      	ldr	r3, [r4, #20]
 8017ef2:	3001      	adds	r0, #1
 8017ef4:	4283      	cmp	r3, r0
 8017ef6:	d004      	beq.n	8017f02 <__swbuf_r+0x62>
 8017ef8:	89a3      	ldrh	r3, [r4, #12]
 8017efa:	07db      	lsls	r3, r3, #31
 8017efc:	d506      	bpl.n	8017f0c <__swbuf_r+0x6c>
 8017efe:	2e0a      	cmp	r6, #10
 8017f00:	d104      	bne.n	8017f0c <__swbuf_r+0x6c>
 8017f02:	4621      	mov	r1, r4
 8017f04:	4628      	mov	r0, r5
 8017f06:	f7ff fcd1 	bl	80178ac <_fflush_r>
 8017f0a:	b988      	cbnz	r0, 8017f30 <__swbuf_r+0x90>
 8017f0c:	4638      	mov	r0, r7
 8017f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f10:	4b0a      	ldr	r3, [pc, #40]	; (8017f3c <__swbuf_r+0x9c>)
 8017f12:	429c      	cmp	r4, r3
 8017f14:	d101      	bne.n	8017f1a <__swbuf_r+0x7a>
 8017f16:	68ac      	ldr	r4, [r5, #8]
 8017f18:	e7cf      	b.n	8017eba <__swbuf_r+0x1a>
 8017f1a:	4b09      	ldr	r3, [pc, #36]	; (8017f40 <__swbuf_r+0xa0>)
 8017f1c:	429c      	cmp	r4, r3
 8017f1e:	bf08      	it	eq
 8017f20:	68ec      	ldreq	r4, [r5, #12]
 8017f22:	e7ca      	b.n	8017eba <__swbuf_r+0x1a>
 8017f24:	4621      	mov	r1, r4
 8017f26:	4628      	mov	r0, r5
 8017f28:	f000 f81a 	bl	8017f60 <__swsetup_r>
 8017f2c:	2800      	cmp	r0, #0
 8017f2e:	d0cb      	beq.n	8017ec8 <__swbuf_r+0x28>
 8017f30:	f04f 37ff 	mov.w	r7, #4294967295
 8017f34:	e7ea      	b.n	8017f0c <__swbuf_r+0x6c>
 8017f36:	bf00      	nop
 8017f38:	0801aa7c 	.word	0x0801aa7c
 8017f3c:	0801aa9c 	.word	0x0801aa9c
 8017f40:	0801aa5c 	.word	0x0801aa5c

08017f44 <__ascii_wctomb>:
 8017f44:	b149      	cbz	r1, 8017f5a <__ascii_wctomb+0x16>
 8017f46:	2aff      	cmp	r2, #255	; 0xff
 8017f48:	bf85      	ittet	hi
 8017f4a:	238a      	movhi	r3, #138	; 0x8a
 8017f4c:	6003      	strhi	r3, [r0, #0]
 8017f4e:	700a      	strbls	r2, [r1, #0]
 8017f50:	f04f 30ff 	movhi.w	r0, #4294967295
 8017f54:	bf98      	it	ls
 8017f56:	2001      	movls	r0, #1
 8017f58:	4770      	bx	lr
 8017f5a:	4608      	mov	r0, r1
 8017f5c:	4770      	bx	lr
	...

08017f60 <__swsetup_r>:
 8017f60:	4b32      	ldr	r3, [pc, #200]	; (801802c <__swsetup_r+0xcc>)
 8017f62:	b570      	push	{r4, r5, r6, lr}
 8017f64:	681d      	ldr	r5, [r3, #0]
 8017f66:	4606      	mov	r6, r0
 8017f68:	460c      	mov	r4, r1
 8017f6a:	b125      	cbz	r5, 8017f76 <__swsetup_r+0x16>
 8017f6c:	69ab      	ldr	r3, [r5, #24]
 8017f6e:	b913      	cbnz	r3, 8017f76 <__swsetup_r+0x16>
 8017f70:	4628      	mov	r0, r5
 8017f72:	f7ff fd2f 	bl	80179d4 <__sinit>
 8017f76:	4b2e      	ldr	r3, [pc, #184]	; (8018030 <__swsetup_r+0xd0>)
 8017f78:	429c      	cmp	r4, r3
 8017f7a:	d10f      	bne.n	8017f9c <__swsetup_r+0x3c>
 8017f7c:	686c      	ldr	r4, [r5, #4]
 8017f7e:	89a3      	ldrh	r3, [r4, #12]
 8017f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f84:	0719      	lsls	r1, r3, #28
 8017f86:	d42c      	bmi.n	8017fe2 <__swsetup_r+0x82>
 8017f88:	06dd      	lsls	r5, r3, #27
 8017f8a:	d411      	bmi.n	8017fb0 <__swsetup_r+0x50>
 8017f8c:	2309      	movs	r3, #9
 8017f8e:	6033      	str	r3, [r6, #0]
 8017f90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017f94:	81a3      	strh	r3, [r4, #12]
 8017f96:	f04f 30ff 	mov.w	r0, #4294967295
 8017f9a:	e03e      	b.n	801801a <__swsetup_r+0xba>
 8017f9c:	4b25      	ldr	r3, [pc, #148]	; (8018034 <__swsetup_r+0xd4>)
 8017f9e:	429c      	cmp	r4, r3
 8017fa0:	d101      	bne.n	8017fa6 <__swsetup_r+0x46>
 8017fa2:	68ac      	ldr	r4, [r5, #8]
 8017fa4:	e7eb      	b.n	8017f7e <__swsetup_r+0x1e>
 8017fa6:	4b24      	ldr	r3, [pc, #144]	; (8018038 <__swsetup_r+0xd8>)
 8017fa8:	429c      	cmp	r4, r3
 8017faa:	bf08      	it	eq
 8017fac:	68ec      	ldreq	r4, [r5, #12]
 8017fae:	e7e6      	b.n	8017f7e <__swsetup_r+0x1e>
 8017fb0:	0758      	lsls	r0, r3, #29
 8017fb2:	d512      	bpl.n	8017fda <__swsetup_r+0x7a>
 8017fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017fb6:	b141      	cbz	r1, 8017fca <__swsetup_r+0x6a>
 8017fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017fbc:	4299      	cmp	r1, r3
 8017fbe:	d002      	beq.n	8017fc6 <__swsetup_r+0x66>
 8017fc0:	4630      	mov	r0, r6
 8017fc2:	f7fc fd87 	bl	8014ad4 <_free_r>
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8017fca:	89a3      	ldrh	r3, [r4, #12]
 8017fcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017fd0:	81a3      	strh	r3, [r4, #12]
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	6063      	str	r3, [r4, #4]
 8017fd6:	6923      	ldr	r3, [r4, #16]
 8017fd8:	6023      	str	r3, [r4, #0]
 8017fda:	89a3      	ldrh	r3, [r4, #12]
 8017fdc:	f043 0308 	orr.w	r3, r3, #8
 8017fe0:	81a3      	strh	r3, [r4, #12]
 8017fe2:	6923      	ldr	r3, [r4, #16]
 8017fe4:	b94b      	cbnz	r3, 8017ffa <__swsetup_r+0x9a>
 8017fe6:	89a3      	ldrh	r3, [r4, #12]
 8017fe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ff0:	d003      	beq.n	8017ffa <__swsetup_r+0x9a>
 8017ff2:	4621      	mov	r1, r4
 8017ff4:	4630      	mov	r0, r6
 8017ff6:	f000 f84d 	bl	8018094 <__smakebuf_r>
 8017ffa:	89a0      	ldrh	r0, [r4, #12]
 8017ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018000:	f010 0301 	ands.w	r3, r0, #1
 8018004:	d00a      	beq.n	801801c <__swsetup_r+0xbc>
 8018006:	2300      	movs	r3, #0
 8018008:	60a3      	str	r3, [r4, #8]
 801800a:	6963      	ldr	r3, [r4, #20]
 801800c:	425b      	negs	r3, r3
 801800e:	61a3      	str	r3, [r4, #24]
 8018010:	6923      	ldr	r3, [r4, #16]
 8018012:	b943      	cbnz	r3, 8018026 <__swsetup_r+0xc6>
 8018014:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018018:	d1ba      	bne.n	8017f90 <__swsetup_r+0x30>
 801801a:	bd70      	pop	{r4, r5, r6, pc}
 801801c:	0781      	lsls	r1, r0, #30
 801801e:	bf58      	it	pl
 8018020:	6963      	ldrpl	r3, [r4, #20]
 8018022:	60a3      	str	r3, [r4, #8]
 8018024:	e7f4      	b.n	8018010 <__swsetup_r+0xb0>
 8018026:	2000      	movs	r0, #0
 8018028:	e7f7      	b.n	801801a <__swsetup_r+0xba>
 801802a:	bf00      	nop
 801802c:	20000320 	.word	0x20000320
 8018030:	0801aa7c 	.word	0x0801aa7c
 8018034:	0801aa9c 	.word	0x0801aa9c
 8018038:	0801aa5c 	.word	0x0801aa5c

0801803c <abort>:
 801803c:	b508      	push	{r3, lr}
 801803e:	2006      	movs	r0, #6
 8018040:	f000 f898 	bl	8018174 <raise>
 8018044:	2001      	movs	r0, #1
 8018046:	f7f3 fd17 	bl	800ba78 <_exit>

0801804a <__swhatbuf_r>:
 801804a:	b570      	push	{r4, r5, r6, lr}
 801804c:	460e      	mov	r6, r1
 801804e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018052:	2900      	cmp	r1, #0
 8018054:	b096      	sub	sp, #88	; 0x58
 8018056:	4614      	mov	r4, r2
 8018058:	461d      	mov	r5, r3
 801805a:	da08      	bge.n	801806e <__swhatbuf_r+0x24>
 801805c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018060:	2200      	movs	r2, #0
 8018062:	602a      	str	r2, [r5, #0]
 8018064:	061a      	lsls	r2, r3, #24
 8018066:	d410      	bmi.n	801808a <__swhatbuf_r+0x40>
 8018068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801806c:	e00e      	b.n	801808c <__swhatbuf_r+0x42>
 801806e:	466a      	mov	r2, sp
 8018070:	f000 f89c 	bl	80181ac <_fstat_r>
 8018074:	2800      	cmp	r0, #0
 8018076:	dbf1      	blt.n	801805c <__swhatbuf_r+0x12>
 8018078:	9a01      	ldr	r2, [sp, #4]
 801807a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801807e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018082:	425a      	negs	r2, r3
 8018084:	415a      	adcs	r2, r3
 8018086:	602a      	str	r2, [r5, #0]
 8018088:	e7ee      	b.n	8018068 <__swhatbuf_r+0x1e>
 801808a:	2340      	movs	r3, #64	; 0x40
 801808c:	2000      	movs	r0, #0
 801808e:	6023      	str	r3, [r4, #0]
 8018090:	b016      	add	sp, #88	; 0x58
 8018092:	bd70      	pop	{r4, r5, r6, pc}

08018094 <__smakebuf_r>:
 8018094:	898b      	ldrh	r3, [r1, #12]
 8018096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018098:	079d      	lsls	r5, r3, #30
 801809a:	4606      	mov	r6, r0
 801809c:	460c      	mov	r4, r1
 801809e:	d507      	bpl.n	80180b0 <__smakebuf_r+0x1c>
 80180a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80180a4:	6023      	str	r3, [r4, #0]
 80180a6:	6123      	str	r3, [r4, #16]
 80180a8:	2301      	movs	r3, #1
 80180aa:	6163      	str	r3, [r4, #20]
 80180ac:	b002      	add	sp, #8
 80180ae:	bd70      	pop	{r4, r5, r6, pc}
 80180b0:	ab01      	add	r3, sp, #4
 80180b2:	466a      	mov	r2, sp
 80180b4:	f7ff ffc9 	bl	801804a <__swhatbuf_r>
 80180b8:	9900      	ldr	r1, [sp, #0]
 80180ba:	4605      	mov	r5, r0
 80180bc:	4630      	mov	r0, r6
 80180be:	f7fc fd75 	bl	8014bac <_malloc_r>
 80180c2:	b948      	cbnz	r0, 80180d8 <__smakebuf_r+0x44>
 80180c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180c8:	059a      	lsls	r2, r3, #22
 80180ca:	d4ef      	bmi.n	80180ac <__smakebuf_r+0x18>
 80180cc:	f023 0303 	bic.w	r3, r3, #3
 80180d0:	f043 0302 	orr.w	r3, r3, #2
 80180d4:	81a3      	strh	r3, [r4, #12]
 80180d6:	e7e3      	b.n	80180a0 <__smakebuf_r+0xc>
 80180d8:	4b0d      	ldr	r3, [pc, #52]	; (8018110 <__smakebuf_r+0x7c>)
 80180da:	62b3      	str	r3, [r6, #40]	; 0x28
 80180dc:	89a3      	ldrh	r3, [r4, #12]
 80180de:	6020      	str	r0, [r4, #0]
 80180e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180e4:	81a3      	strh	r3, [r4, #12]
 80180e6:	9b00      	ldr	r3, [sp, #0]
 80180e8:	6163      	str	r3, [r4, #20]
 80180ea:	9b01      	ldr	r3, [sp, #4]
 80180ec:	6120      	str	r0, [r4, #16]
 80180ee:	b15b      	cbz	r3, 8018108 <__smakebuf_r+0x74>
 80180f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180f4:	4630      	mov	r0, r6
 80180f6:	f000 f86b 	bl	80181d0 <_isatty_r>
 80180fa:	b128      	cbz	r0, 8018108 <__smakebuf_r+0x74>
 80180fc:	89a3      	ldrh	r3, [r4, #12]
 80180fe:	f023 0303 	bic.w	r3, r3, #3
 8018102:	f043 0301 	orr.w	r3, r3, #1
 8018106:	81a3      	strh	r3, [r4, #12]
 8018108:	89a0      	ldrh	r0, [r4, #12]
 801810a:	4305      	orrs	r5, r0
 801810c:	81a5      	strh	r5, [r4, #12]
 801810e:	e7cd      	b.n	80180ac <__smakebuf_r+0x18>
 8018110:	0801796d 	.word	0x0801796d

08018114 <_malloc_usable_size_r>:
 8018114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018118:	1f18      	subs	r0, r3, #4
 801811a:	2b00      	cmp	r3, #0
 801811c:	bfbc      	itt	lt
 801811e:	580b      	ldrlt	r3, [r1, r0]
 8018120:	18c0      	addlt	r0, r0, r3
 8018122:	4770      	bx	lr

08018124 <_raise_r>:
 8018124:	291f      	cmp	r1, #31
 8018126:	b538      	push	{r3, r4, r5, lr}
 8018128:	4604      	mov	r4, r0
 801812a:	460d      	mov	r5, r1
 801812c:	d904      	bls.n	8018138 <_raise_r+0x14>
 801812e:	2316      	movs	r3, #22
 8018130:	6003      	str	r3, [r0, #0]
 8018132:	f04f 30ff 	mov.w	r0, #4294967295
 8018136:	bd38      	pop	{r3, r4, r5, pc}
 8018138:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801813a:	b112      	cbz	r2, 8018142 <_raise_r+0x1e>
 801813c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018140:	b94b      	cbnz	r3, 8018156 <_raise_r+0x32>
 8018142:	4620      	mov	r0, r4
 8018144:	f000 f830 	bl	80181a8 <_getpid_r>
 8018148:	462a      	mov	r2, r5
 801814a:	4601      	mov	r1, r0
 801814c:	4620      	mov	r0, r4
 801814e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018152:	f000 b817 	b.w	8018184 <_kill_r>
 8018156:	2b01      	cmp	r3, #1
 8018158:	d00a      	beq.n	8018170 <_raise_r+0x4c>
 801815a:	1c59      	adds	r1, r3, #1
 801815c:	d103      	bne.n	8018166 <_raise_r+0x42>
 801815e:	2316      	movs	r3, #22
 8018160:	6003      	str	r3, [r0, #0]
 8018162:	2001      	movs	r0, #1
 8018164:	e7e7      	b.n	8018136 <_raise_r+0x12>
 8018166:	2400      	movs	r4, #0
 8018168:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801816c:	4628      	mov	r0, r5
 801816e:	4798      	blx	r3
 8018170:	2000      	movs	r0, #0
 8018172:	e7e0      	b.n	8018136 <_raise_r+0x12>

08018174 <raise>:
 8018174:	4b02      	ldr	r3, [pc, #8]	; (8018180 <raise+0xc>)
 8018176:	4601      	mov	r1, r0
 8018178:	6818      	ldr	r0, [r3, #0]
 801817a:	f7ff bfd3 	b.w	8018124 <_raise_r>
 801817e:	bf00      	nop
 8018180:	20000320 	.word	0x20000320

08018184 <_kill_r>:
 8018184:	b538      	push	{r3, r4, r5, lr}
 8018186:	4d07      	ldr	r5, [pc, #28]	; (80181a4 <_kill_r+0x20>)
 8018188:	2300      	movs	r3, #0
 801818a:	4604      	mov	r4, r0
 801818c:	4608      	mov	r0, r1
 801818e:	4611      	mov	r1, r2
 8018190:	602b      	str	r3, [r5, #0]
 8018192:	f7f3 fc61 	bl	800ba58 <_kill>
 8018196:	1c43      	adds	r3, r0, #1
 8018198:	d102      	bne.n	80181a0 <_kill_r+0x1c>
 801819a:	682b      	ldr	r3, [r5, #0]
 801819c:	b103      	cbz	r3, 80181a0 <_kill_r+0x1c>
 801819e:	6023      	str	r3, [r4, #0]
 80181a0:	bd38      	pop	{r3, r4, r5, pc}
 80181a2:	bf00      	nop
 80181a4:	20006d50 	.word	0x20006d50

080181a8 <_getpid_r>:
 80181a8:	f7f3 bc4e 	b.w	800ba48 <_getpid>

080181ac <_fstat_r>:
 80181ac:	b538      	push	{r3, r4, r5, lr}
 80181ae:	4d07      	ldr	r5, [pc, #28]	; (80181cc <_fstat_r+0x20>)
 80181b0:	2300      	movs	r3, #0
 80181b2:	4604      	mov	r4, r0
 80181b4:	4608      	mov	r0, r1
 80181b6:	4611      	mov	r1, r2
 80181b8:	602b      	str	r3, [r5, #0]
 80181ba:	f7f3 fcac 	bl	800bb16 <_fstat>
 80181be:	1c43      	adds	r3, r0, #1
 80181c0:	d102      	bne.n	80181c8 <_fstat_r+0x1c>
 80181c2:	682b      	ldr	r3, [r5, #0]
 80181c4:	b103      	cbz	r3, 80181c8 <_fstat_r+0x1c>
 80181c6:	6023      	str	r3, [r4, #0]
 80181c8:	bd38      	pop	{r3, r4, r5, pc}
 80181ca:	bf00      	nop
 80181cc:	20006d50 	.word	0x20006d50

080181d0 <_isatty_r>:
 80181d0:	b538      	push	{r3, r4, r5, lr}
 80181d2:	4d06      	ldr	r5, [pc, #24]	; (80181ec <_isatty_r+0x1c>)
 80181d4:	2300      	movs	r3, #0
 80181d6:	4604      	mov	r4, r0
 80181d8:	4608      	mov	r0, r1
 80181da:	602b      	str	r3, [r5, #0]
 80181dc:	f7f3 fcab 	bl	800bb36 <_isatty>
 80181e0:	1c43      	adds	r3, r0, #1
 80181e2:	d102      	bne.n	80181ea <_isatty_r+0x1a>
 80181e4:	682b      	ldr	r3, [r5, #0]
 80181e6:	b103      	cbz	r3, 80181ea <_isatty_r+0x1a>
 80181e8:	6023      	str	r3, [r4, #0]
 80181ea:	bd38      	pop	{r3, r4, r5, pc}
 80181ec:	20006d50 	.word	0x20006d50

080181f0 <_init>:
 80181f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181f2:	bf00      	nop
 80181f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181f6:	bc08      	pop	{r3}
 80181f8:	469e      	mov	lr, r3
 80181fa:	4770      	bx	lr

080181fc <_fini>:
 80181fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181fe:	bf00      	nop
 8018200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018202:	bc08      	pop	{r3}
 8018204:	469e      	mov	lr, r3
 8018206:	4770      	bx	lr
