
TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e898  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001428  0800ea38  0800ea38  0001ea38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe60  0800fe60  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe60  0800fe60  0001fe60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe68  0800fe68  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe68  0800fe68  0001fe68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe6c  0800fe6c  0001fe6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800fe70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006640  20000230  080100a0  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006870  080100a0  00026870  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021203  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004be5  00000000  00000000  00041463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00046048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001888  00000000  00000000  00047a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b094  00000000  00000000  00049308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e827  00000000  00000000  0006439c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1009  00000000  00000000  00082bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081d4  00000000  00000000  00123c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ea20 	.word	0x0800ea20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	0800ea20 	.word	0x0800ea20

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <debu_main>:

//=============================================================================
//
//=============================================================================
void debu_main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	//char ch;
	//SKprintf("debu_main:001\r\n");
	if(read_line_streem() == INPUT_DATA_FIX){
 8000ee0:	f000 fe02 	bl	8001ae8 <read_line_streem>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d12e      	bne.n	8000f48 <debu_main+0x6c>

		input_char_step = INPUT_INIT;
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <debu_main+0x70>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]

		//SKprintf("debu_main:001\r\n");

		switch(dev_menue_type){
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <debu_main+0x74>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d821      	bhi.n	8000f3c <debu_main+0x60>
 8000ef8:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <debu_main+0x24>)
 8000efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efe:	bf00      	nop
 8000f00:	08000f19 	.word	0x08000f19
 8000f04:	08000f1f 	.word	0x08000f1f
 8000f08:	08000f25 	.word	0x08000f25
 8000f0c:	08000f2b 	.word	0x08000f2b
 8000f10:	08000f31 	.word	0x08000f31
 8000f14:	08000f37 	.word	0x08000f37
		case DEB_PROMPT_MODE:
			DBmanue_prompt();
 8000f18:	f000 f850 	bl	8000fbc <DBmanue_prompt>
			break;
 8000f1c:	e00f      	b.n	8000f3e <debu_main+0x62>
		case DEB_LOG_MENUE:
			DBmanue_log();
 8000f1e:	f000 f9df 	bl	80012e0 <DBmanue_log>
			break;
 8000f22:	e00c      	b.n	8000f3e <debu_main+0x62>
		case DEB_RS485_MENUE:
			DBmanue_rs485();
 8000f24:	f000 fa4e 	bl	80013c4 <DBmanue_rs485>
			break;
 8000f28:	e009      	b.n	8000f3e <debu_main+0x62>
		case DEB_MEM_MENUE:
			DBmanue_memdump();
 8000f2a:	f000 faad 	bl	8001488 <DBmanue_memdump>
			break;
 8000f2e:	e006      	b.n	8000f3e <debu_main+0x62>
		case DEB_MEM_INPUT_MENUE:
			DBmanue_mem_input();
 8000f30:	f000 fba2 	bl	8001678 <DBmanue_mem_input>
			break;
 8000f34:	e003      	b.n	8000f3e <debu_main+0x62>
		case DEB_RS485_SCAN_MENUE:
			DBmanue_rs485_scan();
 8000f36:	f000 f895 	bl	8001064 <DBmanue_rs485_scan>
			break;
 8000f3a:	e000      	b.n	8000f3e <debu_main+0x62>
		default:
			break;
 8000f3c:	bf00      	nop
		}

		//SKprintf("debu_main:002\r\n");
        // メニュを表示する
        DispMenue(dev_menue_type);
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <debu_main+0x74>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f806 	bl	8000f54 <DispMenue>
        //SKprintf("debu_main:003\r\n");

	}
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000254 	.word	0x20000254
 8000f50:	200002d8 	.word	0x200002d8

08000f54 <DispMenue>:
//==============================================================================
//
//==============================================================================
void DispMenue(uint8_t type)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    if( type==DEB_PROMPT_MODE ){
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d103      	bne.n	8000f6c <DispMenue+0x18>
        SKprintf("ST> ");
 8000f64:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <DispMenue+0x5c>)
 8000f66:	f003 f8a9 	bl	80040bc <SKprintf>
    else{
        for( i=0; i<MenueList[type-1].clumn; i++){
            SKprintf("%s", &MenueList[type-1].pt[i].name[0]);
        }
    }
}
 8000f6a:	e01d      	b.n	8000fa8 <DispMenue+0x54>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e011      	b.n	8000f96 <DispMenue+0x42>
            SKprintf("%s", &MenueList[type-1].pt[i].name[0]);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <DispMenue+0x60>)
 8000f78:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	440b      	add	r3, r1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <DispMenue+0x64>)
 8000f8c:	f003 f896 	bl	80040bc <SKprintf>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <DispMenue+0x60>)
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3e4      	bcc.n	8000f72 <DispMenue+0x1e>
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0800ea38 	.word	0x0800ea38
 8000fb4:	0800f924 	.word	0x0800f924
 8000fb8:	0800ea40 	.word	0x0800ea40

08000fbc <DBmanue_prompt>:
//=============================================================================
extern osMessageQueueId_t myQueue01Handle;


void DBmanue_prompt(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	uint8_t		i;

//	size_t 	lsize2;
//	size_t 	lsize1;

	switch( input2menu() ){
 8000fc2:	f000 fc8d 	bl	80018e0 <input2menu>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d820      	bhi.n	800100e <DBmanue_prompt+0x52>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <DBmanue_prompt+0x18>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	08000fe9 	.word	0x08000fe9
 8000fd8:	08000fef 	.word	0x08000fef
 8000fdc:	08000ff7 	.word	0x08000ff7
 8000fe0:	08000fff 	.word	0x08000fff
 8000fe4:	08001007 	.word	0x08001007
    case CMD_RTC:
    	rtc_display();
 8000fe8:	f001 fdb6 	bl	8002b58 <rtc_display>
        break;
 8000fec:	e02c      	b.n	8001048 <DBmanue_prompt+0x8c>
    case CMD_LOG:
        dev_menue_type = DEB_LOG_MENUE;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <DBmanue_prompt+0x94>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
        break;
 8000ff4:	e028      	b.n	8001048 <DBmanue_prompt+0x8c>
    case CMD_RS485:
        dev_menue_type = DEB_RS485_MENUE;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <DBmanue_prompt+0x94>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	701a      	strb	r2, [r3, #0]
        break;
 8000ffc:	e024      	b.n	8001048 <DBmanue_prompt+0x8c>
    case CMD_MEM_DUMP:
        dev_menue_type = DEB_MEM_MENUE;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <DBmanue_prompt+0x94>)
 8001000:	2203      	movs	r2, #3
 8001002:	701a      	strb	r2, [r3, #0]
    	break;
 8001004:	e020      	b.n	8001048 <DBmanue_prompt+0x8c>
    case CMD_MSG_QUE:
    	dev_menue_type = DEB_RS485_SCAN_MENUE;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <DBmanue_prompt+0x94>)
 8001008:	2205      	movs	r2, #5
 800100a:	701a      	strb	r2, [r3, #0]
    	break;
 800100c:	e01c      	b.n	8001048 <DBmanue_prompt+0x8c>

    default:
    	SKprintf("Command not found.\r\n");
 800100e:	4811      	ldr	r0, [pc, #68]	; (8001054 <DBmanue_prompt+0x98>)
 8001010:	f003 f854 	bl	80040bc <SKprintf>
    	SKprintf("Support Comand ...\r\n");
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <DBmanue_prompt+0x9c>)
 8001016:	f003 f851 	bl	80040bc <SKprintf>
    	for( i=0; i<CMD_MAX ; i++ ){
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	e00f      	b.n	8001040 <DBmanue_prompt+0x84>
        	SKprintf(" %s\r\n",&com_list[i].command[0]);
 8001020:	79fa      	ldrb	r2, [r7, #7]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <DBmanue_prompt+0xa0>)
 800102e:	4413      	add	r3, r2
 8001030:	3301      	adds	r3, #1
 8001032:	4619      	mov	r1, r3
 8001034:	480a      	ldr	r0, [pc, #40]	; (8001060 <DBmanue_prompt+0xa4>)
 8001036:	f003 f841 	bl	80040bc <SKprintf>
    	for( i=0; i<CMD_MAX ; i++ ){
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	3301      	adds	r3, #1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d9ec      	bls.n	8001020 <DBmanue_prompt+0x64>
    	}

        break;
 8001046:	bf00      	nop
    }
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200002d8 	.word	0x200002d8
 8001054:	0800ea44 	.word	0x0800ea44
 8001058:	0800ea5c 	.word	0x0800ea5c
 800105c:	0800f594 	.word	0x0800f594
 8001060:	0800ea74 	.word	0x0800ea74

08001064 <DBmanue_rs485_scan>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485_scan(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	osStatus_t 			osStatus;
	MESSAGE_QUE_DATA	*msg;
	CMD_MSG				rt_task;

	switch( input_string.main[0] ){
 800106a:	4b8d      	ldr	r3, [pc, #564]	; (80012a0 <DBmanue_rs485_scan+0x23c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b52      	cmp	r3, #82	; 0x52
 8001070:	dc4e      	bgt.n	8001110 <DBmanue_rs485_scan+0xac>
 8001072:	2b31      	cmp	r3, #49	; 0x31
 8001074:	f2c0 810f 	blt.w	8001296 <DBmanue_rs485_scan+0x232>
 8001078:	3b31      	subs	r3, #49	; 0x31
 800107a:	2b21      	cmp	r3, #33	; 0x21
 800107c:	f200 810b 	bhi.w	8001296 <DBmanue_rs485_scan+0x232>
 8001080:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <DBmanue_rs485_scan+0x24>)
 8001082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001086:	bf00      	nop
 8001088:	08001119 	.word	0x08001119
 800108c:	08001153 	.word	0x08001153
 8001090:	08001171 	.word	0x08001171
 8001094:	0800117f 	.word	0x0800117f
 8001098:	08001297 	.word	0x08001297
 800109c:	08001297 	.word	0x08001297
 80010a0:	08001297 	.word	0x08001297
 80010a4:	08001297 	.word	0x08001297
 80010a8:	08001297 	.word	0x08001297
 80010ac:	08001297 	.word	0x08001297
 80010b0:	08001297 	.word	0x08001297
 80010b4:	08001297 	.word	0x08001297
 80010b8:	08001297 	.word	0x08001297
 80010bc:	08001297 	.word	0x08001297
 80010c0:	08001297 	.word	0x08001297
 80010c4:	08001297 	.word	0x08001297
 80010c8:	08001297 	.word	0x08001297
 80010cc:	08001297 	.word	0x08001297
 80010d0:	08001297 	.word	0x08001297
 80010d4:	08001297 	.word	0x08001297
 80010d8:	08001297 	.word	0x08001297
 80010dc:	08001297 	.word	0x08001297
 80010e0:	08001297 	.word	0x08001297
 80010e4:	08001297 	.word	0x08001297
 80010e8:	08001297 	.word	0x08001297
 80010ec:	08001297 	.word	0x08001297
 80010f0:	08001297 	.word	0x08001297
 80010f4:	08001297 	.word	0x08001297
 80010f8:	08001297 	.word	0x08001297
 80010fc:	08001297 	.word	0x08001297
 8001100:	08001297 	.word	0x08001297
 8001104:	08001297 	.word	0x08001297
 8001108:	08001297 	.word	0x08001297
 800110c:	08001291 	.word	0x08001291
 8001110:	2b72      	cmp	r3, #114	; 0x72
 8001112:	f000 80bd 	beq.w	8001290 <DBmanue_rs485_scan+0x22c>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8001116:	e0be      	b.n	8001296 <DBmanue_rs485_scan+0x232>
		Set_logInfo2("HeapSize 001 = 0x%x",xPortGetFreeHeapSize());
 8001118:	f009 ffe4 	bl	800b0e4 <xPortGetFreeHeapSize>
 800111c:	4603      	mov	r3, r0
 800111e:	4619      	mov	r1, r3
 8001120:	4860      	ldr	r0, [pc, #384]	; (80012a4 <DBmanue_rs485_scan+0x240>)
 8001122:	f001 f887 	bl	8002234 <Set_logInfo2>
		rt_task.address		= RS485_AD_SLEVE01;
 8001126:	2301      	movs	r3, #1
 8001128:	713b      	strb	r3, [r7, #4]
		rt_task.command		= RS485_CMD_MESUR_DATA;
 800112a:	2304      	movs	r3, #4
 800112c:	70bb      	strb	r3, [r7, #2]
		rt_task.command_sub	= 1;
 800112e:	2301      	movs	r3, #1
 8001130:	70fb      	strb	r3, [r7, #3]
		rt_task.event 		= RT_EVENT_START_REQ;
 8001132:	2300      	movs	r3, #0
 8001134:	703b      	strb	r3, [r7, #0]
		rt_task.sub1 		= 0;
 8001136:	2300      	movs	r3, #0
 8001138:	717b      	strb	r3, [r7, #5]
		SendMsgQue( &rt_task );
 800113a:	463b      	mov	r3, r7
 800113c:	4618      	mov	r0, r3
 800113e:	f002 f841 	bl	80031c4 <SendMsgQue>
		Set_logInfo2("HeapSize 001 = 0x%x",xPortGetFreeHeapSize());
 8001142:	f009 ffcf 	bl	800b0e4 <xPortGetFreeHeapSize>
 8001146:	4603      	mov	r3, r0
 8001148:	4619      	mov	r1, r3
 800114a:	4856      	ldr	r0, [pc, #344]	; (80012a4 <DBmanue_rs485_scan+0x240>)
 800114c:	f001 f872 	bl	8002234 <Set_logInfo2>
		break;
 8001150:	e0a2      	b.n	8001298 <DBmanue_rs485_scan+0x234>
		rt_task.address		= RS485_AD_SLEVE01;
 8001152:	2301      	movs	r3, #1
 8001154:	713b      	strb	r3, [r7, #4]
		rt_task.command		= RS485_CMD_MESUR_DATA;
 8001156:	2304      	movs	r3, #4
 8001158:	70bb      	strb	r3, [r7, #2]
		rt_task.command_sub	= 300;
 800115a:	232c      	movs	r3, #44	; 0x2c
 800115c:	70fb      	strb	r3, [r7, #3]
		rt_task.event 		= RT_EVENT_START_REQ;
 800115e:	2300      	movs	r3, #0
 8001160:	703b      	strb	r3, [r7, #0]
		rt_task.sub1 		= 0;
 8001162:	2300      	movs	r3, #0
 8001164:	717b      	strb	r3, [r7, #5]
		SendMsgQue( &rt_task );
 8001166:	463b      	mov	r3, r7
 8001168:	4618      	mov	r0, r3
 800116a:	f002 f82b 	bl	80031c4 <SendMsgQue>
		break;
 800116e:	e093      	b.n	8001298 <DBmanue_rs485_scan+0x234>
		rt_task.event 		= RT_EVENT_STOP_REQ;
 8001170:	2303      	movs	r3, #3
 8001172:	703b      	strb	r3, [r7, #0]
		SendMsgQue( &rt_task );
 8001174:	463b      	mov	r3, r7
 8001176:	4618      	mov	r0, r3
 8001178:	f002 f824 	bl	80031c4 <SendMsgQue>
		break;
 800117c:	e08c      	b.n	8001298 <DBmanue_rs485_scan+0x234>
		SKprintf("\r\nHeap Info\r\n");
 800117e:	484a      	ldr	r0, [pc, #296]	; (80012a8 <DBmanue_rs485_scan+0x244>)
 8001180:	f002 ff9c 	bl	80040bc <SKprintf>
		SKprintf("  FreeHeapSize = 0x%x\r\n",xPortGetFreeHeapSize());
 8001184:	f009 ffae 	bl	800b0e4 <xPortGetFreeHeapSize>
 8001188:	4603      	mov	r3, r0
 800118a:	4619      	mov	r1, r3
 800118c:	4847      	ldr	r0, [pc, #284]	; (80012ac <DBmanue_rs485_scan+0x248>)
 800118e:	f002 ff95 	bl	80040bc <SKprintf>
		SKprintf("\r\nMessage Que Info\r\n");
 8001192:	4847      	ldr	r0, [pc, #284]	; (80012b0 <DBmanue_rs485_scan+0x24c>)
 8001194:	f002 ff92 	bl	80040bc <SKprintf>
		SKprintf("            Que1  Que2  Que3\r\n");
 8001198:	4846      	ldr	r0, [pc, #280]	; (80012b4 <DBmanue_rs485_scan+0x250>)
 800119a:	f002 ff8f 	bl	80040bc <SKprintf>
		SKprintf("  Capacity= 0x%02x  ",osMessageQueueGetCapacity(myQueue01Handle));
 800119e:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <DBmanue_rs485_scan+0x254>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f007 fa62 	bl	800866c <osMessageQueueGetCapacity>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4843      	ldr	r0, [pc, #268]	; (80012bc <DBmanue_rs485_scan+0x258>)
 80011ae:	f002 ff85 	bl	80040bc <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetCapacity(myQueue02Handle));
 80011b2:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <DBmanue_rs485_scan+0x25c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f007 fa58 	bl	800866c <osMessageQueueGetCapacity>
 80011bc:	4603      	mov	r3, r0
 80011be:	4619      	mov	r1, r3
 80011c0:	4840      	ldr	r0, [pc, #256]	; (80012c4 <DBmanue_rs485_scan+0x260>)
 80011c2:	f002 ff7b 	bl	80040bc <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetCapacity(myQueue03Handle));
 80011c6:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <DBmanue_rs485_scan+0x264>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 fa4e 	bl	800866c <osMessageQueueGetCapacity>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	483d      	ldr	r0, [pc, #244]	; (80012cc <DBmanue_rs485_scan+0x268>)
 80011d6:	f002 ff71 	bl	80040bc <SKprintf>
		SKprintf("  MsgSize = 0x%02x  ",osMessageQueueGetMsgSize(myQueue01Handle));
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <DBmanue_rs485_scan+0x254>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f007 fa5a 	bl	8008698 <osMessageQueueGetMsgSize>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4839      	ldr	r0, [pc, #228]	; (80012d0 <DBmanue_rs485_scan+0x26c>)
 80011ea:	f002 ff67 	bl	80040bc <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetMsgSize(myQueue02Handle));
 80011ee:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <DBmanue_rs485_scan+0x25c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f007 fa50 	bl	8008698 <osMessageQueueGetMsgSize>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4831      	ldr	r0, [pc, #196]	; (80012c4 <DBmanue_rs485_scan+0x260>)
 80011fe:	f002 ff5d 	bl	80040bc <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetMsgSize(myQueue03Handle));
 8001202:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <DBmanue_rs485_scan+0x264>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f007 fa46 	bl	8008698 <osMessageQueueGetMsgSize>
 800120c:	4603      	mov	r3, r0
 800120e:	4619      	mov	r1, r3
 8001210:	482e      	ldr	r0, [pc, #184]	; (80012cc <DBmanue_rs485_scan+0x268>)
 8001212:	f002 ff53 	bl	80040bc <SKprintf>
		SKprintf("  Count   = 0x%02x  ",osMessageQueueGetCount(myQueue01Handle));
 8001216:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <DBmanue_rs485_scan+0x254>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f007 fa52 	bl	80086c4 <osMessageQueueGetCount>
 8001220:	4603      	mov	r3, r0
 8001222:	4619      	mov	r1, r3
 8001224:	482b      	ldr	r0, [pc, #172]	; (80012d4 <DBmanue_rs485_scan+0x270>)
 8001226:	f002 ff49 	bl	80040bc <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetCount(myQueue02Handle));
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <DBmanue_rs485_scan+0x25c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f007 fa48 	bl	80086c4 <osMessageQueueGetCount>
 8001234:	4603      	mov	r3, r0
 8001236:	4619      	mov	r1, r3
 8001238:	4822      	ldr	r0, [pc, #136]	; (80012c4 <DBmanue_rs485_scan+0x260>)
 800123a:	f002 ff3f 	bl	80040bc <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetCount(myQueue03Handle));
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <DBmanue_rs485_scan+0x264>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f007 fa3e 	bl	80086c4 <osMessageQueueGetCount>
 8001248:	4603      	mov	r3, r0
 800124a:	4619      	mov	r1, r3
 800124c:	481f      	ldr	r0, [pc, #124]	; (80012cc <DBmanue_rs485_scan+0x268>)
 800124e:	f002 ff35 	bl	80040bc <SKprintf>
		SKprintf("  Space   = 0x%02x  ",osMessageQueueGetSpace(myQueue01Handle));
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <DBmanue_rs485_scan+0x254>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f007 fa54 	bl	8008704 <osMessageQueueGetSpace>
 800125c:	4603      	mov	r3, r0
 800125e:	4619      	mov	r1, r3
 8001260:	481d      	ldr	r0, [pc, #116]	; (80012d8 <DBmanue_rs485_scan+0x274>)
 8001262:	f002 ff2b 	bl	80040bc <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetSpace(myQueue02Handle));
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <DBmanue_rs485_scan+0x25c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f007 fa4a 	bl	8008704 <osMessageQueueGetSpace>
 8001270:	4603      	mov	r3, r0
 8001272:	4619      	mov	r1, r3
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <DBmanue_rs485_scan+0x260>)
 8001276:	f002 ff21 	bl	80040bc <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetSpace(myQueue03Handle));
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <DBmanue_rs485_scan+0x264>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f007 fa40 	bl	8008704 <osMessageQueueGetSpace>
 8001284:	4603      	mov	r3, r0
 8001286:	4619      	mov	r1, r3
 8001288:	4810      	ldr	r0, [pc, #64]	; (80012cc <DBmanue_rs485_scan+0x268>)
 800128a:	f002 ff17 	bl	80040bc <SKprintf>
		break;
 800128e:	e003      	b.n	8001298 <DBmanue_rs485_scan+0x234>
		dev_menue_type = DEB_PROMPT_MODE;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <DBmanue_rs485_scan+0x278>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
		break;
 8001296:	bf00      	nop
	}

}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000258 	.word	0x20000258
 80012a4:	0800ea7c 	.word	0x0800ea7c
 80012a8:	0800ea90 	.word	0x0800ea90
 80012ac:	0800eaa0 	.word	0x0800eaa0
 80012b0:	0800eab8 	.word	0x0800eab8
 80012b4:	0800ead0 	.word	0x0800ead0
 80012b8:	20001eb4 	.word	0x20001eb4
 80012bc:	0800eaf0 	.word	0x0800eaf0
 80012c0:	20001eb8 	.word	0x20001eb8
 80012c4:	0800eb08 	.word	0x0800eb08
 80012c8:	20001ebc 	.word	0x20001ebc
 80012cc:	0800eb14 	.word	0x0800eb14
 80012d0:	0800eb20 	.word	0x0800eb20
 80012d4:	0800eb38 	.word	0x0800eb38
 80012d8:	0800eb50 	.word	0x0800eb50
 80012dc:	200002d8 	.word	0x200002d8

080012e0 <DBmanue_log>:
//=============================================================================
//
//=============================================================================
void DBmanue_log(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <DBmanue_log+0xdc>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b52      	cmp	r3, #82	; 0x52
 80012ea:	dc4b      	bgt.n	8001384 <DBmanue_log+0xa4>
 80012ec:	2b31      	cmp	r3, #49	; 0x31
 80012ee:	db61      	blt.n	80013b4 <DBmanue_log+0xd4>
 80012f0:	3b31      	subs	r3, #49	; 0x31
 80012f2:	2b21      	cmp	r3, #33	; 0x21
 80012f4:	d85e      	bhi.n	80013b4 <DBmanue_log+0xd4>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <DBmanue_log+0x1c>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	0800138b 	.word	0x0800138b
 8001300:	08001391 	.word	0x08001391
 8001304:	08001397 	.word	0x08001397
 8001308:	0800139f 	.word	0x0800139f
 800130c:	080013a7 	.word	0x080013a7
 8001310:	080013b5 	.word	0x080013b5
 8001314:	080013b5 	.word	0x080013b5
 8001318:	080013b5 	.word	0x080013b5
 800131c:	080013b5 	.word	0x080013b5
 8001320:	080013b5 	.word	0x080013b5
 8001324:	080013b5 	.word	0x080013b5
 8001328:	080013b5 	.word	0x080013b5
 800132c:	080013b5 	.word	0x080013b5
 8001330:	080013b5 	.word	0x080013b5
 8001334:	080013b5 	.word	0x080013b5
 8001338:	080013b5 	.word	0x080013b5
 800133c:	080013b5 	.word	0x080013b5
 8001340:	080013b5 	.word	0x080013b5
 8001344:	080013b5 	.word	0x080013b5
 8001348:	080013b5 	.word	0x080013b5
 800134c:	080013b5 	.word	0x080013b5
 8001350:	080013b5 	.word	0x080013b5
 8001354:	080013b5 	.word	0x080013b5
 8001358:	080013b5 	.word	0x080013b5
 800135c:	080013b5 	.word	0x080013b5
 8001360:	080013b5 	.word	0x080013b5
 8001364:	080013b5 	.word	0x080013b5
 8001368:	080013b5 	.word	0x080013b5
 800136c:	080013b5 	.word	0x080013b5
 8001370:	080013b5 	.word	0x080013b5
 8001374:	080013b5 	.word	0x080013b5
 8001378:	080013b5 	.word	0x080013b5
 800137c:	080013b5 	.word	0x080013b5
 8001380:	080013af 	.word	0x080013af
 8001384:	2b72      	cmp	r3, #114	; 0x72
 8001386:	d012      	beq.n	80013ae <DBmanue_log+0xce>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8001388:	e014      	b.n	80013b4 <DBmanue_log+0xd4>
		LogInfo_display();
 800138a:	f001 f88d 	bl	80024a8 <LogInfo_display>
		break;
 800138e:	e012      	b.n	80013b6 <DBmanue_log+0xd6>
		LogInfo_clear();
 8001390:	f001 f98c 	bl	80026ac <LogInfo_clear>
		break;
 8001394:	e00f      	b.n	80013b6 <DBmanue_log+0xd6>
		Set_logflg(LF_NON_STOP);
 8001396:	2000      	movs	r0, #0
 8001398:	f000 fe6e 	bl	8002078 <Set_logflg>
		break;
 800139c:	e00b      	b.n	80013b6 <DBmanue_log+0xd6>
		Set_logflg(LF_IMMMEDIATE_STOP);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 fe6a 	bl	8002078 <Set_logflg>
		break;
 80013a4:	e007      	b.n	80013b6 <DBmanue_log+0xd6>
		Set_logflg(LF_MAX_DATA_STOP);
 80013a6:	2002      	movs	r0, #2
 80013a8:	f000 fe66 	bl	8002078 <Set_logflg>
		break;
 80013ac:	e003      	b.n	80013b6 <DBmanue_log+0xd6>
		dev_menue_type = DEB_PROMPT_MODE;
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <DBmanue_log+0xe0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
		break;
 80013b4:	bf00      	nop
	}
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000258 	.word	0x20000258
 80013c0:	200002d8 	.word	0x200002d8

080013c4 <DBmanue_rs485>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <DBmanue_rs485+0xbc>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b52      	cmp	r3, #82	; 0x52
 80013ce:	dc4b      	bgt.n	8001468 <DBmanue_rs485+0xa4>
 80013d0:	2b31      	cmp	r3, #49	; 0x31
 80013d2:	db4f      	blt.n	8001474 <DBmanue_rs485+0xb0>
 80013d4:	3b31      	subs	r3, #49	; 0x31
 80013d6:	2b21      	cmp	r3, #33	; 0x21
 80013d8:	d84c      	bhi.n	8001474 <DBmanue_rs485+0xb0>
 80013da:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <DBmanue_rs485+0x1c>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	08001475 	.word	0x08001475
 80013e4:	08001475 	.word	0x08001475
 80013e8:	08001475 	.word	0x08001475
 80013ec:	08001475 	.word	0x08001475
 80013f0:	08001475 	.word	0x08001475
 80013f4:	08001475 	.word	0x08001475
 80013f8:	08001475 	.word	0x08001475
 80013fc:	08001475 	.word	0x08001475
 8001400:	08001475 	.word	0x08001475
 8001404:	08001475 	.word	0x08001475
 8001408:	08001475 	.word	0x08001475
 800140c:	08001475 	.word	0x08001475
 8001410:	08001475 	.word	0x08001475
 8001414:	08001475 	.word	0x08001475
 8001418:	08001475 	.word	0x08001475
 800141c:	08001475 	.word	0x08001475
 8001420:	08001475 	.word	0x08001475
 8001424:	08001475 	.word	0x08001475
 8001428:	08001475 	.word	0x08001475
 800142c:	08001475 	.word	0x08001475
 8001430:	08001475 	.word	0x08001475
 8001434:	08001475 	.word	0x08001475
 8001438:	08001475 	.word	0x08001475
 800143c:	08001475 	.word	0x08001475
 8001440:	08001475 	.word	0x08001475
 8001444:	08001475 	.word	0x08001475
 8001448:	08001475 	.word	0x08001475
 800144c:	08001475 	.word	0x08001475
 8001450:	08001475 	.word	0x08001475
 8001454:	08001475 	.word	0x08001475
 8001458:	08001475 	.word	0x08001475
 800145c:	08001475 	.word	0x08001475
 8001460:	08001475 	.word	0x08001475
 8001464:	0800146f 	.word	0x0800146f
 8001468:	2b72      	cmp	r3, #114	; 0x72
 800146a:	d000      	beq.n	800146e <DBmanue_rs485+0xaa>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 800146c:	e002      	b.n	8001474 <DBmanue_rs485+0xb0>
		dev_menue_type = DEB_PROMPT_MODE;
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <DBmanue_rs485+0xc0>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
		break;
 8001474:	bf00      	nop
	}
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	20000258 	.word	0x20000258
 8001484:	200002d8 	.word	0x200002d8

08001488 <DBmanue_memdump>:

//==============================================================================
//
//==============================================================================
void DBmanue_memdump(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
	STACK_INFO stack;

	switch( input_string.main[0] ){
 800148e:	4b77      	ldr	r3, [pc, #476]	; (800166c <DBmanue_memdump+0x1e4>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	3b31      	subs	r3, #49	; 0x31
 8001494:	2b41      	cmp	r3, #65	; 0x41
 8001496:	f200 80df 	bhi.w	8001658 <DBmanue_memdump+0x1d0>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <DBmanue_memdump+0x18>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080015a9 	.word	0x080015a9
 80014a4:	080015b1 	.word	0x080015b1
 80014a8:	080015cf 	.word	0x080015cf
 80014ac:	080015ed 	.word	0x080015ed
 80014b0:	08001659 	.word	0x08001659
 80014b4:	08001659 	.word	0x08001659
 80014b8:	08001659 	.word	0x08001659
 80014bc:	08001659 	.word	0x08001659
 80014c0:	08001659 	.word	0x08001659
 80014c4:	08001659 	.word	0x08001659
 80014c8:	08001659 	.word	0x08001659
 80014cc:	08001659 	.word	0x08001659
 80014d0:	08001659 	.word	0x08001659
 80014d4:	08001659 	.word	0x08001659
 80014d8:	08001659 	.word	0x08001659
 80014dc:	08001659 	.word	0x08001659
 80014e0:	08001659 	.word	0x08001659
 80014e4:	08001659 	.word	0x08001659
 80014e8:	08001659 	.word	0x08001659
 80014ec:	08001659 	.word	0x08001659
 80014f0:	08001659 	.word	0x08001659
 80014f4:	08001659 	.word	0x08001659
 80014f8:	08001659 	.word	0x08001659
 80014fc:	08001659 	.word	0x08001659
 8001500:	08001659 	.word	0x08001659
 8001504:	08001659 	.word	0x08001659
 8001508:	08001659 	.word	0x08001659
 800150c:	08001659 	.word	0x08001659
 8001510:	08001659 	.word	0x08001659
 8001514:	08001659 	.word	0x08001659
 8001518:	08001659 	.word	0x08001659
 800151c:	08001659 	.word	0x08001659
 8001520:	08001659 	.word	0x08001659
 8001524:	08001653 	.word	0x08001653
 8001528:	08001659 	.word	0x08001659
 800152c:	08001659 	.word	0x08001659
 8001530:	08001659 	.word	0x08001659
 8001534:	08001659 	.word	0x08001659
 8001538:	08001659 	.word	0x08001659
 800153c:	08001659 	.word	0x08001659
 8001540:	08001659 	.word	0x08001659
 8001544:	08001659 	.word	0x08001659
 8001548:	08001659 	.word	0x08001659
 800154c:	08001659 	.word	0x08001659
 8001550:	08001659 	.word	0x08001659
 8001554:	08001659 	.word	0x08001659
 8001558:	08001659 	.word	0x08001659
 800155c:	08001659 	.word	0x08001659
 8001560:	08001659 	.word	0x08001659
 8001564:	0800162f 	.word	0x0800162f
 8001568:	08001659 	.word	0x08001659
 800156c:	08001659 	.word	0x08001659
 8001570:	08001659 	.word	0x08001659
 8001574:	0800160b 	.word	0x0800160b
 8001578:	08001659 	.word	0x08001659
 800157c:	08001659 	.word	0x08001659
 8001580:	08001659 	.word	0x08001659
 8001584:	08001659 	.word	0x08001659
 8001588:	08001659 	.word	0x08001659
 800158c:	08001659 	.word	0x08001659
 8001590:	08001659 	.word	0x08001659
 8001594:	08001659 	.word	0x08001659
 8001598:	08001659 	.word	0x08001659
 800159c:	08001659 	.word	0x08001659
 80015a0:	08001659 	.word	0x08001659
 80015a4:	08001653 	.word	0x08001653
	case '1':
		dev_menue_type = DEB_MEM_INPUT_MENUE;
 80015a8:	4b31      	ldr	r3, [pc, #196]	; (8001670 <DBmanue_memdump+0x1e8>)
 80015aa:	2204      	movs	r2, #4
 80015ac:	701a      	strb	r2, [r3, #0]
		break;
 80015ae:	e058      	b.n	8001662 <DBmanue_memdump+0x1da>
	case '2':
		Disp_task_info(SK_TASK_main);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f001 f99d 	bl	80028f0 <Disp_task_info>
		Get_task_stackptr(SK_TASK_main,&stack);
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	2000      	movs	r0, #0
 80015bc:	f001 fa36 	bl	8002a2c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	89ba      	ldrh	r2, [r7, #12]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f8b6 	bl	8001738 <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 80015cc:	e049      	b.n	8001662 <DBmanue_memdump+0x1da>
	case '3':
		Disp_task_info(SK_TASK_sub1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f001 f98e 	bl	80028f0 <Disp_task_info>
		Get_task_stackptr(SK_TASK_sub1,&stack);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	2001      	movs	r0, #1
 80015da:	f001 fa27 	bl	8002a2c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	89ba      	ldrh	r2, [r7, #12]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f8a7 	bl	8001738 <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 80015ea:	e03a      	b.n	8001662 <DBmanue_memdump+0x1da>
	case '4':
		Disp_task_info(SK_TASK_sub2);
 80015ec:	2002      	movs	r0, #2
 80015ee:	f001 f97f 	bl	80028f0 <Disp_task_info>
		Get_task_stackptr(SK_TASK_sub2,&stack);
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	2002      	movs	r0, #2
 80015f8:	f001 fa18 	bl	8002a2c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	89ba      	ldrh	r2, [r7, #12]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f898 	bl	8001738 <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 8001608:	e02b      	b.n	8001662 <DBmanue_memdump+0x1da>
	case '5':
		break;
	case 'f':
		if(sk_mem_dump != NULL){
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <DBmanue_memdump+0x1ec>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d024      	beq.n	800165c <DBmanue_memdump+0x1d4>
			sk_mem_dump += 128*4;
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <DBmanue_memdump+0x1ec>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800161a:	4a16      	ldr	r2, [pc, #88]	; (8001674 <DBmanue_memdump+0x1ec>)
 800161c:	6013      	str	r3, [r2, #0]
			hex_dmp(sk_mem_dump, 128*4);
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <DBmanue_memdump+0x1ec>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f886 	bl	8001738 <hex_dmp>
		}
		break;
 800162c:	e016      	b.n	800165c <DBmanue_memdump+0x1d4>
	case 'b':
		if(sk_mem_dump != NULL){
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <DBmanue_memdump+0x1ec>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d014      	beq.n	8001660 <DBmanue_memdump+0x1d8>
			sk_mem_dump -= 128*4;
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <DBmanue_memdump+0x1ec>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800163e:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <DBmanue_memdump+0x1ec>)
 8001640:	6013      	str	r3, [r2, #0]
			hex_dmp(sk_mem_dump, 128*4);
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <DBmanue_memdump+0x1ec>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f874 	bl	8001738 <hex_dmp>
		}
		break;
 8001650:	e006      	b.n	8001660 <DBmanue_memdump+0x1d8>
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <DBmanue_memdump+0x1e8>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
	default:
		break;
 8001658:	bf00      	nop
 800165a:	e002      	b.n	8001662 <DBmanue_memdump+0x1da>
		break;
 800165c:	bf00      	nop
 800165e:	e000      	b.n	8001662 <DBmanue_memdump+0x1da>
		break;
 8001660:	bf00      	nop
	}

}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000258 	.word	0x20000258
 8001670:	200002d8 	.word	0x200002d8
 8001674:	20000250 	.word	0x20000250

08001678 <DBmanue_mem_input>:

//==============================================================================
//
//==============================================================================
void DBmanue_mem_input(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
	int 		i = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
	uint32_t	dt = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
	uint8_t		c = input_string.main[0];
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <DBmanue_mem_input+0xb4>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	71fb      	strb	r3, [r7, #7]

	if( c == 'r' || c == 'R' ){
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b72      	cmp	r3, #114	; 0x72
 8001690:	d044      	beq.n	800171c <DBmanue_mem_input+0xa4>
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b52      	cmp	r3, #82	; 0x52
 8001696:	d041      	beq.n	800171c <DBmanue_mem_input+0xa4>

	}
	else{
		while( input_string.main[i] != '\0'){
 8001698:	e030      	b.n	80016fc <DBmanue_mem_input+0x84>
			c= input_string.main[i];
 800169a:	4a24      	ldr	r2, [pc, #144]	; (800172c <DBmanue_mem_input+0xb4>)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]

			dt <<= 4;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	60bb      	str	r3, [r7, #8]

			if( c >= '0'  && c <= '9' ){
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b2f      	cmp	r3, #47	; 0x2f
 80016ae:	d909      	bls.n	80016c4 <DBmanue_mem_input+0x4c>
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	2b39      	cmp	r3, #57	; 0x39
 80016b4:	d806      	bhi.n	80016c4 <DBmanue_mem_input+0x4c>
				dt |= ( c - '0');
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	3b30      	subs	r3, #48	; 0x30
 80016ba:	461a      	mov	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	e018      	b.n	80016f6 <DBmanue_mem_input+0x7e>
			}
			else if( c >= 'a'  && c <= 'f' ){
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b60      	cmp	r3, #96	; 0x60
 80016c8:	d909      	bls.n	80016de <DBmanue_mem_input+0x66>
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b66      	cmp	r3, #102	; 0x66
 80016ce:	d806      	bhi.n	80016de <DBmanue_mem_input+0x66>
				dt |= ( c - 'a' + 10);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	3b57      	subs	r3, #87	; 0x57
 80016d4:	461a      	mov	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	4313      	orrs	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	e00b      	b.n	80016f6 <DBmanue_mem_input+0x7e>
			}
			else if( c >= 'A'  && c <= 'F' ){
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b40      	cmp	r3, #64	; 0x40
 80016e2:	d908      	bls.n	80016f6 <DBmanue_mem_input+0x7e>
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b46      	cmp	r3, #70	; 0x46
 80016e8:	d805      	bhi.n	80016f6 <DBmanue_mem_input+0x7e>
				dt |= ( c - 'A' + 10);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	3b37      	subs	r3, #55	; 0x37
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]
			}

			i++;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3301      	adds	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
		while( input_string.main[i] != '\0'){
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <DBmanue_mem_input+0xb4>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1c8      	bne.n	800169a <DBmanue_mem_input+0x22>
		}

		SKprintf("dt=%lx",dt);
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <DBmanue_mem_input+0xb8>)
 800170c:	f002 fcd6 	bl	80040bc <SKprintf>
		hex_dmp((uint8_t *)dt, 128*4);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f80e 	bl	8001738 <hex_dmp>
	}

	dev_menue_type = DEB_MEM_MENUE;
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <DBmanue_mem_input+0xbc>)
 800171e:	2203      	movs	r2, #3
 8001720:	701a      	strb	r2, [r3, #0]

}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000258 	.word	0x20000258
 8001730:	0800eb68 	.word	0x0800eb68
 8001734:	200002d8 	.word	0x200002d8

08001738 <hex_dmp>:

//==============================================================================
//
//==============================================================================
void hex_dmp(uint8_t *buf, uint16_t size)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	; 0x38
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
    uint16_t	size_plus;
    uint32_t pp;



   p = buf;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
   pp = (uint32_t)buf;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	623b      	str	r3, [r7, #32]
   p_disp = (uint8_t *)(pp & 0xfffffff0);
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	f023 030f 	bic.w	r3, r3, #15
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
   p = p_disp;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	627b      	str	r3, [r7, #36]	; 0x24

   pre_data = (uint8_t)pp & 0x0000000F;
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	b29b      	uxth	r3, r3
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	83fb      	strh	r3, [r7, #30]
   sk_mem_dump = p_disp;
 8001764:	4a54      	ldr	r2, [pc, #336]	; (80018b8 <hex_dmp+0x180>)
 8001766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001768:	6013      	str	r3, [r2, #0]

   size_plus = size + pre_data;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	8bfb      	ldrh	r3, [r7, #30]
 800176e:	4413      	add	r3, r2
 8001770:	853b      	strh	r3, [r7, #40]	; 0x28
   if(( size_plus % 16 ) != 0){
 8001772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	b29b      	uxth	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <hex_dmp+0x52>
    	   size_plus = size_plus + 16 - (size_plus % 16);
 800177e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001780:	f023 030f 	bic.w	r3, r3, #15
 8001784:	b29b      	uxth	r3, r3
 8001786:	3310      	adds	r3, #16
 8001788:	853b      	strh	r3, [r7, #40]	; 0x28
    }


    SKprintf("\r\n%p -->>\r\n",p);
 800178a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800178c:	484b      	ldr	r0, [pc, #300]	; (80018bc <hex_dmp+0x184>)
 800178e:	f002 fc95 	bl	80040bc <SKprintf>
    SKprintf("            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F    -- ASCII --\r\n");
 8001792:	484b      	ldr	r0, [pc, #300]	; (80018c0 <hex_dmp+0x188>)
 8001794:	f002 fc92 	bl	80040bc <SKprintf>
    SKprintf("-----------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-----------------\r\n");
 8001798:	484a      	ldr	r0, [pc, #296]	; (80018c4 <hex_dmp+0x18c>)
 800179a:	f002 fc8f 	bl	80040bc <SKprintf>


    for (i=0; i<size_plus; i++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	e070      	b.n	8001886 <hex_dmp+0x14e>

    	if(( i % 16)== 0){
 80017a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d114      	bne.n	80017d8 <hex_dmp+0xa0>
    	    SKprintf("%08p  ",p_disp);
 80017ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017b0:	4845      	ldr	r0, [pc, #276]	; (80018c8 <hex_dmp+0x190>)
 80017b2:	f002 fc83 	bl	80040bc <SKprintf>
    	    if( p_disp != &p[i] ){
 80017b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ba:	4413      	add	r3, r2
 80017bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017be:	429a      	cmp	r2, r3
 80017c0:	d007      	beq.n	80017d2 <hex_dmp+0x9a>
    	    	SKprintf("\r\nERROR p_disp=%p,p=%p\r\n",p_disp,&p[i]);
 80017c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c6:	4413      	add	r3, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017cc:	483f      	ldr	r0, [pc, #252]	; (80018cc <hex_dmp+0x194>)
 80017ce:	f002 fc75 	bl	80040bc <SKprintf>
    	    }
    	    p_disp += 16;
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	3310      	adds	r3, #16
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    	}


		j = i % 16;
 80017d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017da:	425a      	negs	r2, r3
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	f002 020f 	and.w	r2, r2, #15
 80017e4:	bf58      	it	pl
 80017e6:	4253      	negpl	r3, r2
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30

		if( i < (size + pre_data) ){
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	8bfb      	ldrh	r3, [r7, #30]
 80017ee:	4413      	add	r3, r2
 80017f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017f2:	429a      	cmp	r2, r3
 80017f4:	da20      	bge.n	8001838 <hex_dmp+0x100>
			SKprintf("%02x ", p[i]);
 80017f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	4833      	ldr	r0, [pc, #204]	; (80018d0 <hex_dmp+0x198>)
 8001802:	f002 fc5b 	bl	80040bc <SKprintf>
			tmp[j] = (uint8_t)((p[i]<0x20||p[i]>=0x7f)? '.': p[i]);
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b1f      	cmp	r3, #31
 8001810:	d90a      	bls.n	8001828 <hex_dmp+0xf0>
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b7e      	cmp	r3, #126	; 0x7e
 800181c:	d804      	bhi.n	8001828 <hex_dmp+0xf0>
 800181e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001822:	4413      	add	r3, r2
 8001824:	7819      	ldrb	r1, [r3, #0]
 8001826:	e000      	b.n	800182a <hex_dmp+0xf2>
 8001828:	212e      	movs	r1, #46	; 0x2e
 800182a:	f107 020c 	add.w	r2, r7, #12
 800182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001830:	4413      	add	r3, r2
 8001832:	460a      	mov	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e008      	b.n	800184a <hex_dmp+0x112>
					}
		else{
			SKprintf("   ");
 8001838:	4826      	ldr	r0, [pc, #152]	; (80018d4 <hex_dmp+0x19c>)
 800183a:	f002 fc3f 	bl	80040bc <SKprintf>
			tmp[j] = ' ';
 800183e:	f107 020c 	add.w	r2, r7, #12
 8001842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001844:	4413      	add	r3, r2
 8001846:	2220      	movs	r2, #32
 8001848:	701a      	strb	r2, [r3, #0]
		}

		flg = 1;
 800184a:	2301      	movs	r3, #1
 800184c:	857b      	strh	r3, [r7, #42]	; 0x2a
		if(( i % 16)==15 ){
 800184e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001850:	425a      	negs	r2, r3
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	f002 020f 	and.w	r2, r2, #15
 800185a:	bf58      	it	pl
 800185c:	4253      	negpl	r3, r2
 800185e:	2b0f      	cmp	r3, #15
 8001860:	d10e      	bne.n	8001880 <hex_dmp+0x148>
			flg = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	857b      	strh	r3, [r7, #42]	; 0x2a
			tmp[j+1] = '\0';
 8001866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001868:	3301      	adds	r3, #1
 800186a:	3338      	adds	r3, #56	; 0x38
 800186c:	443b      	add	r3, r7
 800186e:	2200      	movs	r2, #0
 8001870:	f803 2c2c 	strb.w	r2, [r3, #-44]
			SKprintf(" %s\r\n", tmp);
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4619      	mov	r1, r3
 800187a:	4817      	ldr	r0, [pc, #92]	; (80018d8 <hex_dmp+0x1a0>)
 800187c:	f002 fc1e 	bl	80040bc <SKprintf>
    for (i=0; i<size_plus; i++) {
 8001880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001882:	3301      	adds	r3, #1
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
 8001886:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800188a:	429a      	cmp	r2, r3
 800188c:	db8a      	blt.n	80017a4 <hex_dmp+0x6c>
		}
    }

    if( flg == 1 ){
 800188e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001890:	2b01      	cmp	r3, #1
 8001892:	d10c      	bne.n	80018ae <hex_dmp+0x176>
		tmp[j+1] = '\0';
 8001894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001896:	3301      	adds	r3, #1
 8001898:	3338      	adds	r3, #56	; 0x38
 800189a:	443b      	add	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	f803 2c2c 	strb.w	r2, [r3, #-44]
		SKprintf("%s\r\n", tmp);
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <hex_dmp+0x1a4>)
 80018aa:	f002 fc07 	bl	80040bc <SKprintf>
    }

}
 80018ae:	bf00      	nop
 80018b0:	3738      	adds	r7, #56	; 0x38
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000250 	.word	0x20000250
 80018bc:	0800eb70 	.word	0x0800eb70
 80018c0:	0800eb7c 	.word	0x0800eb7c
 80018c4:	0800ebc8 	.word	0x0800ebc8
 80018c8:	0800ec18 	.word	0x0800ec18
 80018cc:	0800ec20 	.word	0x0800ec20
 80018d0:	0800ec3c 	.word	0x0800ec3c
 80018d4:	0800ec44 	.word	0x0800ec44
 80018d8:	0800ea74 	.word	0x0800ea74
 80018dc:	0800ec48 	.word	0x0800ec48

080018e0 <input2menu>:
//==============================================================================
//
//==============================================================================

COMMAND_MENUE input2menu(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
     uint16_t i = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	80fb      	strh	r3, [r7, #6]
    COMMAND_MENUE rtn = CMD_MAX;
 80018ea:	2305      	movs	r3, #5
 80018ec:	717b      	strb	r3, [r7, #5]

        while( com_list[i].pt != CMD_MAX ){
 80018ee:	e01d      	b.n	800192c <input2menu+0x4c>
            if (strcmp(&input_string.main[0], &com_list[i].command[0]) == 0){
 80018f0:	88fa      	ldrh	r2, [r7, #6]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	4a13      	ldr	r2, [pc, #76]	; (800194c <input2menu+0x6c>)
 80018fe:	4413      	add	r3, r2
 8001900:	3301      	adds	r3, #1
 8001902:	4619      	mov	r1, r3
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <input2menu+0x70>)
 8001906:	f7fe fc6b 	bl	80001e0 <strcmp>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10a      	bne.n	8001926 <input2menu+0x46>
                rtn = com_list[i].pt;
 8001910:	88fa      	ldrh	r2, [r7, #6]
 8001912:	490e      	ldr	r1, [pc, #56]	; (800194c <input2menu+0x6c>)
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	440b      	add	r3, r1
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	717b      	strb	r3, [r7, #5]
                break;
 8001924:	e00d      	b.n	8001942 <input2menu+0x62>
            }
            i++;
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	3301      	adds	r3, #1
 800192a:	80fb      	strh	r3, [r7, #6]
        while( com_list[i].pt != CMD_MAX ){
 800192c:	88fa      	ldrh	r2, [r7, #6]
 800192e:	4907      	ldr	r1, [pc, #28]	; (800194c <input2menu+0x6c>)
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	440b      	add	r3, r1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d1d6      	bne.n	80018f0 <input2menu+0x10>
        }

    return rtn;
 8001942:	797b      	ldrb	r3, [r7, #5]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	0800f594 	.word	0x0800f594
 8001950:	20000258 	.word	0x20000258

08001954 <command_split>:
//==============================================================================
//
//==============================================================================
void command_split(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
	int		i;
	int		j;
	char	moji = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	71fb      	strb	r3, [r7, #7]
	char 	*ptr;

	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	e008      	b.n	8001976 <command_split+0x22>
		input_string.sub_ptr[j] = 0;
 8001964:	4a5d      	ldr	r2, [pc, #372]	; (8001adc <command_split+0x188>)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3308      	adds	r3, #8
 800196a:	2100      	movs	r1, #0
 800196c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	3301      	adds	r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b0e      	cmp	r3, #14
 800197a:	ddf3      	ble.n	8001964 <command_split+0x10>
	}

	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e027      	b.n	80019d2 <command_split+0x7e>
		switch(input_string.main[i]){
 8001982:	4a56      	ldr	r2, [pc, #344]	; (8001adc <command_split+0x188>)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b2c      	cmp	r3, #44	; 0x2c
 800198c:	d005      	beq.n	800199a <command_split+0x46>
 800198e:	2b2c      	cmp	r3, #44	; 0x2c
 8001990:	dc0b      	bgt.n	80019aa <command_split+0x56>
 8001992:	2b09      	cmp	r3, #9
 8001994:	d001      	beq.n	800199a <command_split+0x46>
 8001996:	2b20      	cmp	r3, #32
 8001998:	d107      	bne.n	80019aa <command_split+0x56>
		case ' ':		// スペース
		case ',':		//　カンマ
		case '	':		//　タブ
			input_string.main[i] = '\0';
 800199a:	4a50      	ldr	r2, [pc, #320]	; (8001adc <command_split+0x188>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
			moji = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	71fb      	strb	r3, [r7, #7]
			break;
 80019a8:	e010      	b.n	80019cc <command_split+0x78>
		default:
			if( moji == 0 ){
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10c      	bne.n	80019ca <command_split+0x76>
				if( j < INPUT_BUF_SIZE/2){
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b0e      	cmp	r3, #14
 80019b4:	dc07      	bgt.n	80019c6 <command_split+0x72>
					input_string.sub_ptr[j] = &input_string.main[i];
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a48      	ldr	r2, [pc, #288]	; (8001adc <command_split+0x188>)
 80019ba:	441a      	add	r2, r3
 80019bc:	4947      	ldr	r1, [pc, #284]	; (8001adc <command_split+0x188>)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3308      	adds	r3, #8
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				moji = 1;
 80019c6:	2301      	movs	r3, #1
 80019c8:	71fb      	strb	r3, [r7, #7]
			}
			break;
 80019ca:	bf00      	nop
	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b1d      	cmp	r3, #29
 80019d6:	ddd4      	ble.n	8001982 <command_split+0x2e>
		}
	}

	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 80019d8:	2301      	movs	r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	e074      	b.n	8001ac8 <command_split+0x174>
		ptr = input_string.sub_ptr[j];
 80019de:	4a3f      	ldr	r2, [pc, #252]	; (8001adc <command_split+0x188>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	3308      	adds	r3, #8
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	603b      	str	r3, [r7, #0]
		moji = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	71fb      	strb	r3, [r7, #7]
		if( ptr != 0 ){
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d06d      	beq.n	8001ad0 <command_split+0x17c>
			if ( ptr[0] == '0' && ptr[1] == 'x'){
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b30      	cmp	r3, #48	; 0x30
 80019fa:	d14c      	bne.n	8001a96 <command_split+0x142>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b78      	cmp	r3, #120	; 0x78
 8001a04:	d147      	bne.n	8001a96 <command_split+0x142>
				ptr ++;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	603b      	str	r3, [r7, #0]
				ptr ++;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8001a12:	e01c      	b.n	8001a4e <command_split+0xfa>
					if( ('0'<=*ptr && *ptr<='9') || ('A'<=*ptr && *ptr<='F') || ('a'<=*ptr && *ptr<='f')){
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b2f      	cmp	r3, #47	; 0x2f
 8001a1a:	d903      	bls.n	8001a24 <command_split+0xd0>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b39      	cmp	r3, #57	; 0x39
 8001a22:	d911      	bls.n	8001a48 <command_split+0xf4>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b40      	cmp	r3, #64	; 0x40
 8001a2a:	d903      	bls.n	8001a34 <command_split+0xe0>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b46      	cmp	r3, #70	; 0x46
 8001a32:	d909      	bls.n	8001a48 <command_split+0xf4>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b60      	cmp	r3, #96	; 0x60
 8001a3a:	d903      	bls.n	8001a44 <command_split+0xf0>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b66      	cmp	r3, #102	; 0x66
 8001a42:	d901      	bls.n	8001a48 <command_split+0xf4>

					}
					else{
						moji = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1de      	bne.n	8001a14 <command_split+0xc0>
				}

				if( moji == 1 ){
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d132      	bne.n	8001ac2 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%x", &input_string.data[j]);
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <command_split+0x188>)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3308      	adds	r3, #8
 8001a62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	332c      	adds	r3, #44	; 0x2c
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <command_split+0x188>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	3304      	adds	r3, #4
 8001a72:	461a      	mov	r2, r3
 8001a74:	491a      	ldr	r1, [pc, #104]	; (8001ae0 <command_split+0x18c>)
 8001a76:	f00a f8af 	bl	800bbd8 <siscanf>
				if( moji == 1 ){
 8001a7a:	e022      	b.n	8001ac2 <command_split+0x16e>
				}
			}
			else{
				while( *ptr != '\0' ){
					if( '0'<=*ptr && *ptr<='9'){
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b2f      	cmp	r3, #47	; 0x2f
 8001a82:	d903      	bls.n	8001a8c <command_split+0x138>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b39      	cmp	r3, #57	; 0x39
 8001a8a:	d901      	bls.n	8001a90 <command_split+0x13c>
					}
					else{
						moji = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ee      	bne.n	8001a7c <command_split+0x128>
				}

				if( moji == 1 ){
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d10e      	bne.n	8001ac2 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%d", &input_string.data[j]);
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <command_split+0x188>)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3308      	adds	r3, #8
 8001aaa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	332c      	adds	r3, #44	; 0x2c
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <command_split+0x188>)
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3304      	adds	r3, #4
 8001aba:	461a      	mov	r2, r3
 8001abc:	4909      	ldr	r1, [pc, #36]	; (8001ae4 <command_split+0x190>)
 8001abe:	f00a f88b 	bl	800bbd8 <siscanf>
	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b0e      	cmp	r3, #14
 8001acc:	dd87      	ble.n	80019de <command_split+0x8a>
		else{
			break;
		}
	}

}
 8001ace:	e000      	b.n	8001ad2 <command_split+0x17e>
			break;
 8001ad0:	bf00      	nop
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000258 	.word	0x20000258
 8001ae0:	0800ec50 	.word	0x0800ec50
 8001ae4:	0800ec54 	.word	0x0800ec54

08001ae8 <read_line_streem>:

//==============================================================================
//
//==============================================================================
 INPUT_CHAR_STEP read_line_streem(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
    uint8_t num;
    uint8_t sub_cnt;
#endif	// ___NOP
    char	string[2];

    string[0] = '\0';
 8001aee:	2300      	movs	r3, #0
 8001af0:	713b      	strb	r3, [r7, #4]
    string[1] = '\0';
 8001af2:	2300      	movs	r3, #0
 8001af4:	717b      	strb	r3, [r7, #5]


    c = (char)getch(SK_UART2_DEBUG);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f002 fb24 	bl	8004144 <getch>
 8001afc:	4603      	mov	r3, r0
 8001afe:	71fb      	strb	r3, [r7, #7]

    //SKprintf("read_line_streem()\r\n");

    if( c != 0 ){
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d04b      	beq.n	8001b9e <read_line_streem+0xb6>



        switch(input_char_step){
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <read_line_streem+0xc8>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <read_line_streem+0x2c>
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d006      	beq.n	8001b20 <read_line_streem+0x38>
                    input_char_step = INPUT_DATA_FIX;

                    command_split();
                }
            default:
                break;
 8001b12:	e046      	b.n	8001ba2 <read_line_streem+0xba>
                input_pos = 0;
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <read_line_streem+0xcc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
                input_char_step = INPUT_SAVING;
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <read_line_streem+0xc8>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f009 fbd0 	bl	800b2c8 <isprint>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d015      	beq.n	8001b5a <read_line_streem+0x72>
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <read_line_streem+0xcc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b1c      	cmp	r3, #28
 8001b34:	dc11      	bgt.n	8001b5a <read_line_streem+0x72>
                    input_string.main[input_pos] = c;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <read_line_streem+0xcc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	491f      	ldr	r1, [pc, #124]	; (8001bb8 <read_line_streem+0xd0>)
 8001b3c:	79fa      	ldrb	r2, [r7, #7]
 8001b3e:	54ca      	strb	r2, [r1, r3]
                    input_pos ++;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <read_line_streem+0xcc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <read_line_streem+0xcc>)
 8001b48:	6013      	str	r3, [r2, #0]
                    string[0] = c;
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	713b      	strb	r3, [r7, #4]
                    SKprintf("%s",string);
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	481a      	ldr	r0, [pc, #104]	; (8001bbc <read_line_streem+0xd4>)
 8001b54:	f002 fab2 	bl	80040bc <SKprintf>
 8001b58:	e020      	b.n	8001b9c <read_line_streem+0xb4>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d10c      	bne.n	8001b7a <read_line_streem+0x92>
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <read_line_streem+0xcc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	dd08      	ble.n	8001b7a <read_line_streem+0x92>
                    input_pos --;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <read_line_streem+0xcc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <read_line_streem+0xcc>)
 8001b70:	6013      	str	r3, [r2, #0]
                    SKprintf("\x08 \x08");
 8001b72:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <read_line_streem+0xd8>)
 8001b74:	f002 faa2 	bl	80040bc <SKprintf>
 8001b78:	e010      	b.n	8001b9c <read_line_streem+0xb4>
                else if (c == '\r') {
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b0d      	cmp	r3, #13
 8001b7e:	d110      	bne.n	8001ba2 <read_line_streem+0xba>
                    input_string.main[input_pos] = '\0';
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <read_line_streem+0xcc>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <read_line_streem+0xd0>)
 8001b86:	2100      	movs	r1, #0
 8001b88:	54d1      	strb	r1, [r2, r3]
                    SKprintf("\r\n");
 8001b8a:	480e      	ldr	r0, [pc, #56]	; (8001bc4 <read_line_streem+0xdc>)
 8001b8c:	f002 fa96 	bl	80040bc <SKprintf>
                    input_char_step = INPUT_DATA_FIX;
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <read_line_streem+0xc8>)
 8001b92:	2202      	movs	r2, #2
 8001b94:	701a      	strb	r2, [r3, #0]
                    command_split();
 8001b96:	f7ff fedd 	bl	8001954 <command_split>
                break;
 8001b9a:	e002      	b.n	8001ba2 <read_line_streem+0xba>
 8001b9c:	e001      	b.n	8001ba2 <read_line_streem+0xba>
        }
    }
 8001b9e:	bf00      	nop
 8001ba0:	e000      	b.n	8001ba4 <read_line_streem+0xbc>
                break;
 8001ba2:	bf00      	nop
    return(input_char_step);
 8001ba4:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <read_line_streem+0xc8>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 }
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000254 	.word	0x20000254
 8001bb4:	2000024c 	.word	0x2000024c
 8001bb8:	20000258 	.word	0x20000258
 8001bbc:	0800ea40 	.word	0x0800ea40
 8001bc0:	0800ec58 	.word	0x0800ec58
 8001bc4:	0800ec5c 	.word	0x0800ec5c

08001bc8 <HAL_RTCEx_WakeUpTimerEventCallback>:
//==============================================================================
//
//==============================================================================

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

	uint8_t	i;

	if( timer.start > TIMER_AV_NUM){
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001bd2:	7e5b      	ldrb	r3, [r3, #25]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d941      	bls.n	8001c5c <HAL_RTCEx_WakeUpTimerEventCallback+0x94>

		timer.dt_buf[timer.av_wcnt] = timer.dt;
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001bda:	7e1b      	ldrb	r3, [r3, #24]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4926      	ldr	r1, [pc, #152]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001be4:	0083      	lsls	r3, r0, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	605a      	str	r2, [r3, #4]
		timer.av_wcnt ++;
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001bec:	7e1b      	ldrb	r3, [r3, #24]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001bf4:	761a      	strb	r2, [r3, #24]

		if(timer.av_wcnt > TIMER_AV_NUM){
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001bf8:	7e1b      	ldrb	r3, [r3, #24]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d920      	bls.n	8001c40 <HAL_RTCEx_WakeUpTimerEventCallback+0x78>
			timer.av_wcnt = 0;
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	761a      	strb	r2, [r3, #24]
			timer.dt_av = 0;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
 8001c0e:	e00c      	b.n	8001c2a <HAL_RTCEx_WakeUpTimerEventCallback+0x62>
				timer.dt_av +=  timer.dt_buf[i];
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	4919      	ldr	r1, [pc, #100]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c22:	6153      	str	r3, [r2, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	3301      	adds	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d9ef      	bls.n	8001c10 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>
			}
			timer.dt_av /= TIMER_AV_NUM;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_RTCEx_WakeUpTimerEventCallback+0xb8>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	085b      	lsrs	r3, r3, #1
 8001c3c:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c3e:	6153      	str	r3, [r2, #20]
		}

		if( timer.dt_max < timer.dt ){
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d203      	bcs.n	8001c54 <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>
			timer.dt_max = timer.dt;
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c52:	6113      	str	r3, [r2, #16]
		}

		timer.dt = 0;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
	}
	else{
		timer.start ++;
		timer.dt = 0;
	}
}
 8001c5a:	e008      	b.n	8001c6e <HAL_RTCEx_WakeUpTimerEventCallback+0xa6>
		timer.start ++;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c5e:	7e5b      	ldrb	r3, [r3, #25]
 8001c60:	3301      	adds	r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c66:	765a      	strb	r2, [r3, #25]
		timer.dt = 0;
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	200002dc 	.word	0x200002dc
 8001c80:	aaaaaaab 	.word	0xaaaaaaab

08001c84 <usr_isr_tim1_up>:
//	uint16_t	msec_max;
//} TIMER_TIC;
//
//==============================================================================
void usr_isr_tim1_up(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	timer.dt += 10;
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <usr_isr_tim1_up+0x90>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	330a      	adds	r3, #10
 8001c8e:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <usr_isr_tim1_up+0x90>)
 8001c90:	6013      	str	r3, [r2, #0]

	tm.usec += 1;
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001c9c:	801a      	strh	r2, [r3, #0]

	if( tm.usec >= 100 ){
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	2b63      	cmp	r3, #99	; 0x63
 8001ca4:	d930      	bls.n	8001d08 <usr_isr_tim1_up+0x84>
		tm.usec = 0;
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	801a      	strh	r2, [r3, #0]
		tm.msec ++;
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cae:	885b      	ldrh	r3, [r3, #2]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cb6:	805a      	strh	r2, [r3, #2]
		if( tm.msec >= 1000 ){
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cba:	885b      	ldrh	r3, [r3, #2]
 8001cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cc0:	d322      	bcc.n	8001d08 <usr_isr_tim1_up+0x84>
			tm.msec = 0;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	805a      	strh	r2, [r3, #2]
			tm.sec ++;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cca:	889b      	ldrh	r3, [r3, #4]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cd2:	809a      	strh	r2, [r3, #4]
			if( tm.sec >= 60 ){
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cd6:	889b      	ldrh	r3, [r3, #4]
 8001cd8:	2b3b      	cmp	r3, #59	; 0x3b
 8001cda:	d915      	bls.n	8001d08 <usr_isr_tim1_up+0x84>
				tm.sec = 0;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	809a      	strh	r2, [r3, #4]
				tm.min ++;
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001ce4:	88db      	ldrh	r3, [r3, #6]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cec:	80da      	strh	r2, [r3, #6]
				if( tm.min >= 60 ){
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cf0:	88db      	ldrh	r3, [r3, #6]
 8001cf2:	2b3b      	cmp	r3, #59	; 0x3b
 8001cf4:	d908      	bls.n	8001d08 <usr_isr_tim1_up+0x84>
					tm.min = 0;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	80da      	strh	r2, [r3, #6]
					tm.hour ++;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001cfe:	891b      	ldrh	r3, [r3, #8]
 8001d00:	3301      	adds	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <usr_isr_tim1_up+0x94>)
 8001d06:	811a      	strh	r2, [r3, #8]
				}
			}
		}
	}

}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200002dc 	.word	0x200002dc
 8001d18:	20000300 	.word	0x20000300

08001d1c <GetTime_tim1up>:
void GetTime_tim1up(TIMER_DATA *time)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	*time = tm;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4907      	ldr	r1, [pc, #28]	; (8001d44 <GetTime_tim1up+0x28>)
 8001d28:	461a      	mov	r2, r3
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	cb03      	ldmia	r3!, {r0, r1}
 8001d2e:	6010      	str	r0, [r2, #0]
 8001d30:	6051      	str	r1, [r2, #4]
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	8113      	strh	r3, [r2, #8]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000300 	.word	0x20000300

08001d48 <my_putint>:
//==============================================================================
//
//==============================================================================

uint8_t *my_putint(int num, uint8_t *buf)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
//	SKprintf("num=%d,num/10=%d,num%%10=%d\r\n",num,num/10,num%10);

	if (num < 0) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	da08      	bge.n	8001d6a <my_putint+0x22>
        *buf = '-';
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	222d      	movs	r2, #45	; 0x2d
 8001d5c:	701a      	strb	r2, [r3, #0]
        buf++;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	603b      	str	r3, [r7, #0]
        num = -num;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	425b      	negs	r3, r3
 8001d68:	607b      	str	r3, [r7, #4]
    }

    if (num / 10 != 0) {
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3309      	adds	r3, #9
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d90b      	bls.n	8001d8a <my_putint+0x42>
        buf = my_putint(num / 10, buf);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <my_putint+0x74>)
 8001d76:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7a:	1092      	asrs	r2, r2, #2
 8001d7c:	17db      	asrs	r3, r3, #31
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ffe0 	bl	8001d48 <my_putint>
 8001d88:	6038      	str	r0, [r7, #0]
    }

    *buf = '0' + (num % 10);
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <my_putint+0x74>)
 8001d8e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d92:	1099      	asrs	r1, r3, #2
 8001d94:	17d3      	asrs	r3, r2, #31
 8001d96:	1ac9      	subs	r1, r1, r3
 8001d98:	460b      	mov	r3, r1
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	1ad1      	subs	r1, r2, r3
 8001da2:	b2cb      	uxtb	r3, r1
 8001da4:	3330      	adds	r3, #48	; 0x30
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	701a      	strb	r2, [r3, #0]
    buf++;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	603b      	str	r3, [r7, #0]

    return buf;
 8001db2:	683b      	ldr	r3, [r7, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	66666667 	.word	0x66666667

08001dc0 <my_putfloat>:
//==============================================================================
//
//==============================================================================

uint8_t *my_putfloat(double num, int precision, uint8_t *buf)
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	ed87 0b02 	vstr	d0, [r7, #8]
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
	int dt;
	double fracPart,dtf;
	int intPart;
	int digit;

	intPart = (int)num;
 8001dce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dd2:	f7fe fed9 	bl	8000b88 <__aeabi_d2iz>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	61bb      	str	r3, [r7, #24]
    buf = my_putint(intPart, buf);
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	69b8      	ldr	r0, [r7, #24]
 8001dde:	f7ff ffb3 	bl	8001d48 <my_putint>
 8001de2:	6038      	str	r0, [r7, #0]
    *buf = '.';
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	222e      	movs	r2, #46	; 0x2e
 8001de8:	701a      	strb	r2, [r3, #0]
    buf ++;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3301      	adds	r3, #1
 8001dee:	603b      	str	r3, [r7, #0]

    fracPart = num - intPart;
 8001df0:	69b8      	ldr	r0, [r7, #24]
 8001df2:	f7fe fbaf 	bl	8000554 <__aeabi_i2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dfe:	f7fe fa5b 	bl	80002b8 <__aeabi_dsub>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (fracPart < 0) {
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e16:	f7fe fe79 	bl	8000b0c <__aeabi_dcmplt>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <my_putfloat+0x6c>
        fracPart = -fracPart;
 8001e20:	6a3c      	ldr	r4, [r7, #32]
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e28:	e9c7 4508 	strd	r4, r5, [r7, #32]
    }

    int count = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    while (count < precision) {
 8001e30:	e029      	b.n	8001e86 <my_putfloat+0xc6>
        fracPart *= 10;
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <my_putfloat+0xe0>)
 8001e38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e3c:	f7fe fbf4 	bl	8000628 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	e9c7 2308 	strd	r2, r3, [r7, #32]
        int digit = (int)fracPart;
 8001e48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e4c:	f7fe fe9c 	bl	8000b88 <__aeabi_d2iz>
 8001e50:	4603      	mov	r3, r0
 8001e52:	617b      	str	r3, [r7, #20]

        *buf = '0' + digit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3330      	adds	r3, #48	; 0x30
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	701a      	strb	r2, [r3, #0]
        buf ++;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	603b      	str	r3, [r7, #0]

        fracPart -= digit;
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7fe fb74 	bl	8000554 <__aeabi_i2d>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e74:	f7fe fa20 	bl	80002b8 <__aeabi_dsub>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        count++;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	3301      	adds	r3, #1
 8001e84:	61fb      	str	r3, [r7, #28]
    while (count < precision) {
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dbd1      	blt.n	8001e32 <my_putfloat+0x72>
    }

    *buf = '\0';
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]

    return buf;
 8001e94:	683b      	ldr	r3, [r7, #0]

}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3728      	adds	r7, #40	; 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40240000 	.word	0x40240000

08001ea4 <my_putchar>:
//
//
//=============================================================================

uint8_t *my_putchar(char c, uint8_t *buf )
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
	//SKprintf("_putchar c=%x, buf=%p\r\n",c,buf);
	*buf = c;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	79fa      	ldrb	r2, [r7, #7]
 8001eb4:	701a      	strb	r2, [r3, #0]
	buf ++;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	603b      	str	r3, [r7, #0]
	return buf ;
 8001ebc:	683b      	ldr	r3, [r7, #0]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <my_puts>:
//=============================================================================
//
//
//=============================================================================
uint8_t *my_puts(char* str, uint8_t *buf )
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
	uint8_t *buf2;

	buf2=buf;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

	//SKprintf("_puts str=%s, buf=%p\r\n",str,buf);
    while ( *str != '\0' ) {
 8001ed8:	e009      	b.n	8001eee <my_puts+0x24>
        buf = my_putchar(*str, buf);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	6839      	ldr	r1, [r7, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ffdf 	bl	8001ea4 <my_putchar>
 8001ee6:	6038      	str	r0, [r7, #0]
        str++;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3301      	adds	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
    while ( *str != '\0' ) {
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f1      	bne.n	8001eda <my_puts+0x10>
    }
    *buf='\0';
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
	//SKprintf("_puts str=%s  %p\r\n",buf2, buf);
	return buf ;
 8001efc:	683b      	ldr	r3, [r7, #0]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <my_putshex>:
//
//
//=============================================================================

uint8_t *my_putshex(uint16_t dt, uint8_t flg, uint8_t *buf )
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	603a      	str	r2, [r7, #0]
 8001f12:	80fb      	strh	r3, [r7, #6]
 8001f14:	460b      	mov	r3, r1
 8001f16:	717b      	strb	r3, [r7, #5]
	uint8_t	sw;

	switch(flg){
 8001f18:	797b      	ldrb	r3, [r7, #5]
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d007      	beq.n	8001f2e <my_putshex+0x26>
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	f300 80a0 	bgt.w	8002064 <my_putshex+0x15c>
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d048      	beq.n	8001fba <my_putshex+0xb2>
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d02f      	beq.n	8001f8c <my_putshex+0x84>
 8001f2c:	e09a      	b.n	8002064 <my_putshex+0x15c>
	case 4:
		*buf = ConvC[( dt >> 12 ) & 0x0f ];
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	0b1b      	lsrs	r3, r3, #12
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	4a4e      	ldr	r2, [pc, #312]	; (8002074 <my_putshex+0x16c>)
 8001f3a:	5cd2      	ldrb	r2, [r2, r3]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	603b      	str	r3, [r7, #0]
		*buf = ConvC[( dt >> 8 ) & 0x0f ];
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	4a48      	ldr	r2, [pc, #288]	; (8002074 <my_putshex+0x16c>)
 8001f52:	5cd2      	ldrb	r2, [r2, r3]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	603b      	str	r3, [r7, #0]
		*buf = ConvC[( dt >> 4 ) & 0x0f ];
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	4a42      	ldr	r2, [pc, #264]	; (8002074 <my_putshex+0x16c>)
 8001f6a:	5cd2      	ldrb	r2, [r2, r3]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	603b      	str	r3, [r7, #0]
		*buf = ConvC[ dt  & 0x0f ];
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	4a3d      	ldr	r2, [pc, #244]	; (8002074 <my_putshex+0x16c>)
 8001f7e:	5cd2      	ldrb	r2, [r2, r3]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	603b      	str	r3, [r7, #0]
		break;
 8001f8a:	e06b      	b.n	8002064 <my_putshex+0x15c>

	case 2:
		*buf = ConvC[( dt >> 4 ) & 0x0f ];
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	4a37      	ldr	r2, [pc, #220]	; (8002074 <my_putshex+0x16c>)
 8001f98:	5cd2      	ldrb	r2, [r2, r3]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	603b      	str	r3, [r7, #0]
		*buf = ConvC[ dt  & 0x0f ];
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	4a32      	ldr	r2, [pc, #200]	; (8002074 <my_putshex+0x16c>)
 8001fac:	5cd2      	ldrb	r2, [r2, r3]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	603b      	str	r3, [r7, #0]
		break;
 8001fb8:	e054      	b.n	8002064 <my_putshex+0x15c>
	case 0:
		sw = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
		if(( sw == 1) || (( dt >> 12 ) & 0x0f ) != 0 ){
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d006      	beq.n	8001fd2 <my_putshex+0xca>
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	0b1b      	lsrs	r3, r3, #12
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00d      	beq.n	8001fee <my_putshex+0xe6>
			*buf = ConvC[( dt >> 12 ) & 0x0f ];
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	0b1b      	lsrs	r3, r3, #12
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	4a25      	ldr	r2, [pc, #148]	; (8002074 <my_putshex+0x16c>)
 8001fde:	5cd2      	ldrb	r2, [r2, r3]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	701a      	strb	r2, [r3, #0]
			buf ++;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	603b      	str	r3, [r7, #0]
			sw = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
		}
		if(( sw == 1) || (( dt >> 8 ) & 0x0f ) != 0 ){
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d006      	beq.n	8002002 <my_putshex+0xfa>
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00d      	beq.n	800201e <my_putshex+0x116>
			*buf = ConvC[( dt >> 8 ) & 0x0f ];
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29b      	uxth	r3, r3
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <my_putshex+0x16c>)
 800200e:	5cd2      	ldrb	r2, [r2, r3]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	701a      	strb	r2, [r3, #0]
			buf ++;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	603b      	str	r3, [r7, #0]
			sw = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
		}
		if(( sw == 1) || (( dt >> 4 ) & 0x0f ) != 0 ){
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d006      	beq.n	8002032 <my_putshex+0x12a>
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	b29b      	uxth	r3, r3
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00d      	beq.n	800204e <my_putshex+0x146>
			*buf = ConvC[( dt >> 4 ) & 0x0f ];
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	b29b      	uxth	r3, r3
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <my_putshex+0x16c>)
 800203e:	5cd2      	ldrb	r2, [r2, r3]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	701a      	strb	r2, [r3, #0]
			buf ++;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	603b      	str	r3, [r7, #0]
			sw = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
		}

		*buf = ConvC[ dt & 0x0f ];
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <my_putshex+0x16c>)
 8002056:	5cd2      	ldrb	r2, [r2, r3]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	701a      	strb	r2, [r3, #0]
		buf ++;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	603b      	str	r3, [r7, #0]


		break;
 8002062:	bf00      	nop
	}
	return buf ;
 8002064:	683b      	ldr	r3, [r7, #0]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	0800f94c 	.word	0x0800f94c

08002078 <Set_logflg>:
//=============================================================================
//
//
//=============================================================================
void Set_logflg(LOG_FLAG flg)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]

	if( flg < LF_MAX){
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d808      	bhi.n	800209a <Set_logflg+0x22>
		log.flg = flg;
 8002088:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <Set_logflg+0x2c>)
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	7193      	strb	r3, [r2, #6]
		SKprintf("log.flg=%d \r\n",log.flg);
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <Set_logflg+0x2c>)
 8002090:	799b      	ldrb	r3, [r3, #6]
 8002092:	4619      	mov	r1, r3
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <Set_logflg+0x30>)
 8002096:	f002 f811 	bl	80040bc <SKprintf>
	}
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000030c 	.word	0x2000030c
 80020a8:	0800ec60 	.word	0x0800ec60

080020ac <Set_logInfo>:
//=============================================================================
//
//
//=============================================================================
void Set_logInfo(char *string)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
//	RTC_TimeTypeDef sTime;
//	RTC_DateTypeDef sDate;
	TIMER_DATA time;

	int i;
	uint8_t	flg = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	74fb      	strb	r3, [r7, #19]
	uint32_t dt;



	switch(log.flg){
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <Set_logInfo+0x184>)
 80020ba:	799b      	ldrb	r3, [r3, #6]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d009      	beq.n	80020d4 <Set_logInfo+0x28>
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	dc0e      	bgt.n	80020e2 <Set_logInfo+0x36>
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00e      	beq.n	80020e6 <Set_logInfo+0x3a>
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d000      	beq.n	80020ce <Set_logInfo+0x22>
	case LF_MAX_DATA_STOP:
		if( log.num >= LOG_RECODE_MAX)
			flg = 1;
		break;
	default:
		break;
 80020cc:	e009      	b.n	80020e2 <Set_logInfo+0x36>
		flg = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	74fb      	strb	r3, [r7, #19]
		break;
 80020d2:	e00b      	b.n	80020ec <Set_logInfo+0x40>
		if( log.num >= LOG_RECODE_MAX)
 80020d4:	4b56      	ldr	r3, [pc, #344]	; (8002230 <Set_logInfo+0x184>)
 80020d6:	889b      	ldrh	r3, [r3, #4]
 80020d8:	2b63      	cmp	r3, #99	; 0x63
 80020da:	d906      	bls.n	80020ea <Set_logInfo+0x3e>
			flg = 1;
 80020dc:	2301      	movs	r3, #1
 80020de:	74fb      	strb	r3, [r7, #19]
		break;
 80020e0:	e003      	b.n	80020ea <Set_logInfo+0x3e>
		break;
 80020e2:	bf00      	nop
 80020e4:	e002      	b.n	80020ec <Set_logInfo+0x40>
		break;
 80020e6:	bf00      	nop
 80020e8:	e000      	b.n	80020ec <Set_logInfo+0x40>
		break;
 80020ea:	bf00      	nop
	}


	if( flg == 0 ){
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 809a 	bne.w	8002228 <Set_logInfo+0x17c>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e01a      	b.n	8002130 <Set_logInfo+0x84>
			log.rec[log.wptr].string[i] = string[i];
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <Set_logInfo+0x184>)
 8002102:	8812      	ldrh	r2, [r2, #0]
 8002104:	4611      	mov	r1, r2
 8002106:	7818      	ldrb	r0, [r3, #0]
 8002108:	4a49      	ldr	r2, [pc, #292]	; (8002230 <Set_logInfo+0x184>)
 800210a:	460b      	mov	r3, r1
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a5b      	subs	r3, r3, r1
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	441a      	add	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	4413      	add	r3, r2
 8002118:	330e      	adds	r3, #14
 800211a:	4602      	mov	r2, r0
 800211c:	701a      	strb	r2, [r3, #0]
			if(string[i] == '\0'){
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <Set_logInfo+0x8c>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b31      	cmp	r3, #49	; 0x31
 8002134:	dde1      	ble.n	80020fa <Set_logInfo+0x4e>
 8002136:	e000      	b.n	800213a <Set_logInfo+0x8e>
				break;
 8002138:	bf00      	nop
			}
		}

//		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
//		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
		GetTime_tim1up(&time);
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fdec 	bl	8001d1c <GetTime_tim1up>

		log.rec[log.wptr].Hours = time.hour;
 8002144:	8a3a      	ldrh	r2, [r7, #16]
 8002146:	4b3a      	ldr	r3, [pc, #232]	; (8002230 <Set_logInfo+0x184>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	4619      	mov	r1, r3
 800214c:	b2d0      	uxtb	r0, r2
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <Set_logInfo+0x184>)
 8002150:	460b      	mov	r3, r1
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a5b      	subs	r3, r3, r1
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	3308      	adds	r3, #8
 800215c:	4602      	mov	r2, r0
 800215e:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Minutes = time.min;
 8002160:	89fa      	ldrh	r2, [r7, #14]
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <Set_logInfo+0x184>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	4619      	mov	r1, r3
 8002168:	b2d0      	uxtb	r0, r2
 800216a:	4a31      	ldr	r2, [pc, #196]	; (8002230 <Set_logInfo+0x184>)
 800216c:	460b      	mov	r3, r1
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a5b      	subs	r3, r3, r1
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	3309      	adds	r3, #9
 8002178:	4602      	mov	r2, r0
 800217a:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Seconds = time.sec;
 800217c:	89ba      	ldrh	r2, [r7, #12]
 800217e:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <Set_logInfo+0x184>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	b2d0      	uxtb	r0, r2
 8002186:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <Set_logInfo+0x184>)
 8002188:	460b      	mov	r3, r1
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	1a5b      	subs	r3, r3, r1
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	330a      	adds	r3, #10
 8002194:	4602      	mov	r2, r0
 8002196:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].msec = time.msec;
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <Set_logInfo+0x184>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	8978      	ldrh	r0, [r7, #10]
 80021a0:	4a23      	ldr	r2, [pc, #140]	; (8002230 <Set_logInfo+0x184>)
 80021a2:	460b      	mov	r3, r1
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a5b      	subs	r3, r3, r1
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	330c      	adds	r3, #12
 80021ae:	4602      	mov	r2, r0
 80021b0:	801a      	strh	r2, [r3, #0]
		log.rec[log.wptr].usec = time.usec;
 80021b2:	893a      	ldrh	r2, [r7, #8]
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <Set_logInfo+0x184>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	b2d0      	uxtb	r0, r2
 80021bc:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <Set_logInfo+0x184>)
 80021be:	460b      	mov	r3, r1
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a5b      	subs	r3, r3, r1
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	330b      	adds	r3, #11
 80021ca:	4602      	mov	r2, r0
 80021cc:	701a      	strb	r2, [r3, #0]

//		log.rec[log.wptr].dt = timer.dt;
//		log.rec[log.wptr].dt_av = timer.dt_av;


		log.num ++;
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <Set_logInfo+0x184>)
 80021d0:	889b      	ldrh	r3, [r3, #4]
 80021d2:	3301      	adds	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <Set_logInfo+0x184>)
 80021d8:	809a      	strh	r2, [r3, #4]
		if( log.num > LOG_RECODE_MAX ){
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <Set_logInfo+0x184>)
 80021dc:	889b      	ldrh	r3, [r3, #4]
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d902      	bls.n	80021e8 <Set_logInfo+0x13c>
			log.num = LOG_RECODE_MAX;
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <Set_logInfo+0x184>)
 80021e4:	2264      	movs	r2, #100	; 0x64
 80021e6:	809a      	strh	r2, [r3, #4]
		}

		log.wptr ++;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <Set_logInfo+0x184>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <Set_logInfo+0x184>)
 80021f2:	801a      	strh	r2, [r3, #0]
		if( log.wptr > LOG_RECODE_MAX ){
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <Set_logInfo+0x184>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	2b64      	cmp	r3, #100	; 0x64
 80021fa:	d902      	bls.n	8002202 <Set_logInfo+0x156>
			log.wptr = 0;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <Set_logInfo+0x184>)
 80021fe:	2200      	movs	r2, #0
 8002200:	801a      	strh	r2, [r3, #0]
		}

		if( log.wptr == log.rptr ){
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <Set_logInfo+0x184>)
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <Set_logInfo+0x184>)
 8002208:	885b      	ldrh	r3, [r3, #2]
 800220a:	429a      	cmp	r2, r3
 800220c:	d10c      	bne.n	8002228 <Set_logInfo+0x17c>
			log.rptr ++;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <Set_logInfo+0x184>)
 8002210:	885b      	ldrh	r3, [r3, #2]
 8002212:	3301      	adds	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <Set_logInfo+0x184>)
 8002218:	805a      	strh	r2, [r3, #2]
			if( log.rptr > LOG_RECODE_MAX ){
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <Set_logInfo+0x184>)
 800221c:	885b      	ldrh	r3, [r3, #2]
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d902      	bls.n	8002228 <Set_logInfo+0x17c>
				log.rptr = 0;
 8002222:	4b03      	ldr	r3, [pc, #12]	; (8002230 <Set_logInfo+0x184>)
 8002224:	2200      	movs	r2, #0
 8002226:	805a      	strh	r2, [r3, #2]
			}
		}
	}
}
 8002228:	bf00      	nop
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2000030c 	.word	0x2000030c

08002234 <Set_logInfo2>:
//=============================================================================
//
//
//=============================================================================
void Set_logInfo2(const char *string, ...)
{
 8002234:	b40f      	push	{r0, r1, r2, r3}
 8002236:	b580      	push	{r7, lr}
 8002238:	b08e      	sub	sp, #56	; 0x38
 800223a:	af00      	add	r7, sp, #0
	TIMER_DATA time;

	va_list ap;
	int i;
	char *buffer, *temp;
	uint8_t	flg = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t uint32value;
    double  floatvalue;



	temp = buffer = (char *)loginfo_buf;
 8002242:	4b97      	ldr	r3, [pc, #604]	; (80024a0 <Set_logInfo2+0x26c>)
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
//	temp = buffer = (char *)pvPortMalloc(128);
	//SKprintf("_logInfo2() 0001 temp= %p\r\n",temp);

	switch(log.flg){
 800224a:	4b96      	ldr	r3, [pc, #600]	; (80024a4 <Set_logInfo2+0x270>)
 800224c:	799b      	ldrb	r3, [r3, #6]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d00a      	beq.n	8002268 <Set_logInfo2+0x34>
 8002252:	2b02      	cmp	r3, #2
 8002254:	dc0a      	bgt.n	800226c <Set_logInfo2+0x38>
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <Set_logInfo2+0x3c>
 800225a:	2b01      	cmp	r3, #1
 800225c:	d000      	beq.n	8002260 <Set_logInfo2+0x2c>
	case LF_MAX_DATA_STOP:
		//if( log.num >= LOG_RECODE_MAX)
		//	flg = 1;
		break;
	default:
		break;
 800225e:	e005      	b.n	800226c <Set_logInfo2+0x38>
		flg = 1;
 8002260:	2301      	movs	r3, #1
 8002262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8002266:	e004      	b.n	8002272 <Set_logInfo2+0x3e>
		break;
 8002268:	bf00      	nop
 800226a:	e002      	b.n	8002272 <Set_logInfo2+0x3e>
		break;
 800226c:	bf00      	nop
 800226e:	e000      	b.n	8002272 <Set_logInfo2+0x3e>
		break;
 8002270:	bf00      	nop
	}

	if( flg == 0 ){
 8002272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 810b 	bne.w	8002492 <Set_logInfo2+0x25e>
		va_start(ap, string);
 800227c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002280:	607b      	str	r3, [r7, #4]
//		vsprintf(buffer, string, ap);

		i = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
	    while (*string != '\0') {
 8002286:	e063      	b.n	8002350 <Set_logInfo2+0x11c>
	    	//*buffer = *string;
	    	//buffer ++;

	        if (*string == '%') {
 8002288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b25      	cmp	r3, #37	; 0x25
 800228e:	d155      	bne.n	800233c <Set_logInfo2+0x108>
	            string++; // Move past '%'
 8002290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002292:	3301      	adds	r3, #1
 8002294:	643b      	str	r3, [r7, #64]	; 0x40
	            if (*string == 'd') {
 8002296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d10a      	bne.n	80022b4 <Set_logInfo2+0x80>
	            	intvalue = va_arg(ap, int);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	1d1a      	adds	r2, r3, #4
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	617b      	str	r3, [r7, #20]

	                buffer = my_putint(intvalue, buffer);
 80022a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff fd4c 	bl	8001d48 <my_putint>
 80022b0:	6338      	str	r0, [r7, #48]	; 0x30
 80022b2:	e04a      	b.n	800234a <Set_logInfo2+0x116>
	                buffer = my_putfloat(floatvalue, 2, buffer );
	               // SKprintf("val =%s\r\n",temp);

	            }
#endif
	            else if (*string == 'f') {
 80022b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b66      	cmp	r3, #102	; 0x66
 80022ba:	d112      	bne.n	80022e2 <Set_logInfo2+0xae>
	            	//SKprintf("_logInfo2() 0002 val =%d\r\n",intvalue);
	            	floatvalue = va_arg(ap, double);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3307      	adds	r3, #7
 80022c0:	f023 0307 	bic.w	r3, r3, #7
 80022c4:	f103 0208 	add.w	r2, r3, #8
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	            	//SKprintf("_logInfo2() 0002 val =%g\r\n",floatvalue);
	            	//SKprintf("_logInfo2() 0010 val =%f\r\n",floatvalue);
	                buffer = my_putfloat(floatvalue, 2, buffer );
 80022d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022d4:	2002      	movs	r0, #2
 80022d6:	ed97 0b06 	vldr	d0, [r7, #24]
 80022da:	f7ff fd71 	bl	8001dc0 <my_putfloat>
 80022de:	6338      	str	r0, [r7, #48]	; 0x30
 80022e0:	e033      	b.n	800234a <Set_logInfo2+0x116>

	            //else if (*string == 'c') {
	            //    int value = va_arg(ap, int);
	            //    buffer = my_putchar(value, buffer );
	            //}
	            else if (*string == 's') {
 80022e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b73      	cmp	r3, #115	; 0x73
 80022e8:	d10a      	bne.n	8002300 <Set_logInfo2+0xcc>
	            	charvalue = va_arg(ap, char*);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	1d1a      	adds	r2, r3, #4
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	623b      	str	r3, [r7, #32]
	            	//SKprintf("_logInfo2() 0003 val =%s\r\n",charvalue);
	                buffer = my_puts(charvalue, buffer );
 80022f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022f6:	6a38      	ldr	r0, [r7, #32]
 80022f8:	f7ff fde7 	bl	8001eca <my_puts>
 80022fc:	6338      	str	r0, [r7, #48]	; 0x30
 80022fe:	e024      	b.n	800234a <Set_logInfo2+0x116>
	            } else if (*string == 'x') {
 8002300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b78      	cmp	r3, #120	; 0x78
 8002306:	d10c      	bne.n	8002322 <Set_logInfo2+0xee>
	            	uintvalue = (uint16_t)va_arg(ap, int);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	1d1a      	adds	r2, r3, #4
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	84fb      	strh	r3, [r7, #38]	; 0x26
	            	//SKprintf("_logInfo2() 0004 val =%x\r\n",uintvalue);
	                buffer = my_putshex(uintvalue, 0, buffer );
 8002312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fdf5 	bl	8001f08 <my_putshex>
 800231e:	6338      	str	r0, [r7, #48]	; 0x30
 8002320:	e013      	b.n	800234a <Set_logInfo2+0x116>
	            } else {
	                buffer = my_puts('%', buffer );
 8002322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002324:	2025      	movs	r0, #37	; 0x25
 8002326:	f7ff fdd0 	bl	8001eca <my_puts>
 800232a:	6338      	str	r0, [r7, #48]	; 0x30
	                buffer = my_puts(*string, buffer );
 800232c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fdc9 	bl	8001eca <my_puts>
 8002338:	6338      	str	r0, [r7, #48]	; 0x30
 800233a:	e006      	b.n	800234a <Set_logInfo2+0x116>
	            }
	        }
	        else {
	            buffer = my_putchar(*string, buffer );
 800233c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fdae 	bl	8001ea4 <my_putchar>
 8002348:	6338      	str	r0, [r7, #48]	; 0x30

//	        	buffer = my_puts(*string, buffer );
	        }
	        string++;
 800234a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800234c:	3301      	adds	r3, #1
 800234e:	643b      	str	r3, [r7, #64]	; 0x40
	    while (*string != '\0') {
 8002350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d197      	bne.n	8002288 <Set_logInfo2+0x54>
	    	//buffer++;
	    }

		*buffer = '\0';
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
    	//SKprintf("_logInfo2() 0005\r\n");


		va_end(ap);

		for(i=0; i<PRiNTF_BUFFMAX; i++){
 800235e:	2300      	movs	r3, #0
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
 8002362:	e01a      	b.n	800239a <Set_logInfo2+0x166>
			log.rec[log.wptr].string[i] = temp[i];
 8002364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002368:	4413      	add	r3, r2
 800236a:	4a4e      	ldr	r2, [pc, #312]	; (80024a4 <Set_logInfo2+0x270>)
 800236c:	8812      	ldrh	r2, [r2, #0]
 800236e:	4611      	mov	r1, r2
 8002370:	7818      	ldrb	r0, [r3, #0]
 8002372:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <Set_logInfo2+0x270>)
 8002374:	460b      	mov	r3, r1
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	1a5b      	subs	r3, r3, r1
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	441a      	add	r2, r3
 800237e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002380:	4413      	add	r3, r2
 8002382:	330e      	adds	r3, #14
 8002384:	4602      	mov	r2, r0
 8002386:	701a      	strb	r2, [r3, #0]
			if(temp[i] == '\0'){
 8002388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800238c:	4413      	add	r3, r2
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <Set_logInfo2+0x16e>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 8002394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002396:	3301      	adds	r3, #1
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
 800239a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239c:	2b31      	cmp	r3, #49	; 0x31
 800239e:	dde1      	ble.n	8002364 <Set_logInfo2+0x130>
 80023a0:	e000      	b.n	80023a4 <Set_logInfo2+0x170>
				break;
 80023a2:	bf00      	nop
		}

		//SKprintf("CC %s\r\n", &log.rec[log.wptr].string[0]);

//		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		GetTime_tim1up(&time);
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fcb7 	bl	8001d1c <GetTime_tim1up>

		log.rec[log.wptr].Hours = time.hour;
 80023ae:	8a3a      	ldrh	r2, [r7, #16]
 80023b0:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <Set_logInfo2+0x270>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	b2d0      	uxtb	r0, r2
 80023b8:	4a3a      	ldr	r2, [pc, #232]	; (80024a4 <Set_logInfo2+0x270>)
 80023ba:	460b      	mov	r3, r1
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a5b      	subs	r3, r3, r1
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	3308      	adds	r3, #8
 80023c6:	4602      	mov	r2, r0
 80023c8:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Minutes = time.min;
 80023ca:	89fa      	ldrh	r2, [r7, #14]
 80023cc:	4b35      	ldr	r3, [pc, #212]	; (80024a4 <Set_logInfo2+0x270>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	b2d0      	uxtb	r0, r2
 80023d4:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <Set_logInfo2+0x270>)
 80023d6:	460b      	mov	r3, r1
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	1a5b      	subs	r3, r3, r1
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	3309      	adds	r3, #9
 80023e2:	4602      	mov	r2, r0
 80023e4:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Seconds = time.sec;
 80023e6:	89ba      	ldrh	r2, [r7, #12]
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <Set_logInfo2+0x270>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	b2d0      	uxtb	r0, r2
 80023f0:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <Set_logInfo2+0x270>)
 80023f2:	460b      	mov	r3, r1
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	1a5b      	subs	r3, r3, r1
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	330a      	adds	r3, #10
 80023fe:	4602      	mov	r2, r0
 8002400:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].msec = time.msec;
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <Set_logInfo2+0x270>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	8978      	ldrh	r0, [r7, #10]
 800240a:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <Set_logInfo2+0x270>)
 800240c:	460b      	mov	r3, r1
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	1a5b      	subs	r3, r3, r1
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	330c      	adds	r3, #12
 8002418:	4602      	mov	r2, r0
 800241a:	801a      	strh	r2, [r3, #0]
		log.rec[log.wptr].usec = time.usec;
 800241c:	893a      	ldrh	r2, [r7, #8]
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <Set_logInfo2+0x270>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	b2d0      	uxtb	r0, r2
 8002426:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <Set_logInfo2+0x270>)
 8002428:	460b      	mov	r3, r1
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a5b      	subs	r3, r3, r1
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	330b      	adds	r3, #11
 8002434:	4602      	mov	r2, r0
 8002436:	701a      	strb	r2, [r3, #0]


		log.num ++;
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <Set_logInfo2+0x270>)
 800243a:	889b      	ldrh	r3, [r3, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <Set_logInfo2+0x270>)
 8002442:	809a      	strh	r2, [r3, #4]
		if( log.num > LOG_RECODE_MAX ){
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <Set_logInfo2+0x270>)
 8002446:	889b      	ldrh	r3, [r3, #4]
 8002448:	2b64      	cmp	r3, #100	; 0x64
 800244a:	d902      	bls.n	8002452 <Set_logInfo2+0x21e>
			log.num = LOG_RECODE_MAX;
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <Set_logInfo2+0x270>)
 800244e:	2264      	movs	r2, #100	; 0x64
 8002450:	809a      	strh	r2, [r3, #4]
		}

		log.wptr ++;
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <Set_logInfo2+0x270>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <Set_logInfo2+0x270>)
 800245c:	801a      	strh	r2, [r3, #0]
		if( log.wptr > LOG_RECODE_MAX ){
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <Set_logInfo2+0x270>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d902      	bls.n	800246c <Set_logInfo2+0x238>
			log.wptr = 0;
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <Set_logInfo2+0x270>)
 8002468:	2200      	movs	r2, #0
 800246a:	801a      	strh	r2, [r3, #0]
		}

		if( log.wptr == log.rptr ){
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <Set_logInfo2+0x270>)
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <Set_logInfo2+0x270>)
 8002472:	885b      	ldrh	r3, [r3, #2]
 8002474:	429a      	cmp	r2, r3
 8002476:	d10c      	bne.n	8002492 <Set_logInfo2+0x25e>
			log.rptr ++;
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <Set_logInfo2+0x270>)
 800247a:	885b      	ldrh	r3, [r3, #2]
 800247c:	3301      	adds	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <Set_logInfo2+0x270>)
 8002482:	805a      	strh	r2, [r3, #2]
			if( log.rptr > LOG_RECODE_MAX ){
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <Set_logInfo2+0x270>)
 8002486:	885b      	ldrh	r3, [r3, #2]
 8002488:	2b64      	cmp	r3, #100	; 0x64
 800248a:	d902      	bls.n	8002492 <Set_logInfo2+0x25e>
				log.rptr = 0;
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <Set_logInfo2+0x270>)
 800248e:	2200      	movs	r2, #0
 8002490:	805a      	strh	r2, [r3, #2]
			}
		}
	}
	//SKprintf("_logInfo2() 0006 temp= %p\r\n",temp);
//	vPortFree(temp);
}
 8002492:	bf00      	nop
 8002494:	3738      	adds	r7, #56	; 0x38
 8002496:	46bd      	mov	sp, r7
 8002498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800249c:	b004      	add	sp, #16
 800249e:	4770      	bx	lr
 80024a0:	200018f4 	.word	0x200018f4
 80024a4:	2000030c 	.word	0x2000030c

080024a8 <LogInfo_display>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_display(void)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
	uint16_t	i;
	uint16_t	rptr = log.rptr;
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <LogInfo_display+0xe8>)
 80024b0:	885b      	ldrh	r3, [r3, #2]
 80024b2:	80bb      	strh	r3, [r7, #4]

	SKprintf("LogInfo_display()\r\n");
 80024b4:	4837      	ldr	r0, [pc, #220]	; (8002594 <LogInfo_display+0xec>)
 80024b6:	f001 fe01 	bl	80040bc <SKprintf>
	if( log.num != 0 ){
 80024ba:	4b35      	ldr	r3, [pc, #212]	; (8002590 <LogInfo_display+0xe8>)
 80024bc:	889b      	ldrh	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d05d      	beq.n	800257e <LogInfo_display+0xd6>
		for(i=0; i<LOG_RECODE_MAX; i++){
 80024c2:	2300      	movs	r3, #0
 80024c4:	80fb      	strh	r3, [r7, #6]
 80024c6:	e056      	b.n	8002576 <LogInfo_display+0xce>
			SKprintf("%02d:%02d:%02d.", log.rec[rptr].Hours, log.rec[rptr].Minutes, log.rec[rptr].Seconds);
 80024c8:	88ba      	ldrh	r2, [r7, #4]
 80024ca:	4931      	ldr	r1, [pc, #196]	; (8002590 <LogInfo_display+0xe8>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	440b      	add	r3, r1
 80024d6:	3308      	adds	r3, #8
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	88ba      	ldrh	r2, [r7, #4]
 80024de:	492c      	ldr	r1, [pc, #176]	; (8002590 <LogInfo_display+0xe8>)
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	3309      	adds	r3, #9
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461c      	mov	r4, r3
 80024f0:	88ba      	ldrh	r2, [r7, #4]
 80024f2:	4927      	ldr	r1, [pc, #156]	; (8002590 <LogInfo_display+0xe8>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	330a      	adds	r3, #10
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4622      	mov	r2, r4
 8002504:	4601      	mov	r1, r0
 8002506:	4824      	ldr	r0, [pc, #144]	; (8002598 <LogInfo_display+0xf0>)
 8002508:	f001 fdd8 	bl	80040bc <SKprintf>

			SKprintf("%03d %02d0 ", log.rec[rptr].msec, log.rec[rptr].usec);
 800250c:	88ba      	ldrh	r2, [r7, #4]
 800250e:	4920      	ldr	r1, [pc, #128]	; (8002590 <LogInfo_display+0xe8>)
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	330c      	adds	r3, #12
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	88ba      	ldrh	r2, [r7, #4]
 8002522:	491b      	ldr	r1, [pc, #108]	; (8002590 <LogInfo_display+0xe8>)
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	330b      	adds	r3, #11
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	4601      	mov	r1, r0
 8002536:	4819      	ldr	r0, [pc, #100]	; (800259c <LogInfo_display+0xf4>)
 8002538:	f001 fdc0 	bl	80040bc <SKprintf>

			SKprintf("%s\r\n", &log.rec[rptr].string[0]);
 800253c:	88ba      	ldrh	r2, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	3308      	adds	r3, #8
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <LogInfo_display+0xe8>)
 800254a:	4413      	add	r3, r2
 800254c:	3306      	adds	r3, #6
 800254e:	4619      	mov	r1, r3
 8002550:	4813      	ldr	r0, [pc, #76]	; (80025a0 <LogInfo_display+0xf8>)
 8002552:	f001 fdb3 	bl	80040bc <SKprintf>

			rptr ++;
 8002556:	88bb      	ldrh	r3, [r7, #4]
 8002558:	3301      	adds	r3, #1
 800255a:	80bb      	strh	r3, [r7, #4]
			if( rptr > LOG_RECODE_MAX ){
 800255c:	88bb      	ldrh	r3, [r7, #4]
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <LogInfo_display+0xbe>
				rptr = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	80bb      	strh	r3, [r7, #4]
			}
			if( log.wptr == rptr ){
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <LogInfo_display+0xe8>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	88ba      	ldrh	r2, [r7, #4]
 800256c:	429a      	cmp	r2, r3
 800256e:	d00a      	beq.n	8002586 <LogInfo_display+0xde>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	3301      	adds	r3, #1
 8002574:	80fb      	strh	r3, [r7, #6]
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b63      	cmp	r3, #99	; 0x63
 800257a:	d9a5      	bls.n	80024c8 <LogInfo_display+0x20>
		}
	}
	else{
		SKprintf("LOG NONE\r\n");
	}
}
 800257c:	e004      	b.n	8002588 <LogInfo_display+0xe0>
		SKprintf("LOG NONE\r\n");
 800257e:	4809      	ldr	r0, [pc, #36]	; (80025a4 <LogInfo_display+0xfc>)
 8002580:	f001 fd9c 	bl	80040bc <SKprintf>
}
 8002584:	e000      	b.n	8002588 <LogInfo_display+0xe0>
				break;
 8002586:	bf00      	nop
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}
 8002590:	2000030c 	.word	0x2000030c
 8002594:	0800ec70 	.word	0x0800ec70
 8002598:	0800ec84 	.word	0x0800ec84
 800259c:	0800ec94 	.word	0x0800ec94
 80025a0:	0800eca0 	.word	0x0800eca0
 80025a4:	0800eca8 	.word	0x0800eca8

080025a8 <LogdisplayISR>:

void LogdisplayISR(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b091      	sub	sp, #68	; 0x44
 80025ac:	af00      	add	r7, sp, #0
	uint16_t	i,j;
	uint16_t	rptr = log.rptr;
 80025ae:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <LogdisplayISR+0x100>)
 80025b0:	885b      	ldrh	r3, [r3, #2]
 80025b2:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint8_t		buf[PRiNTF_BUFFMAX+2];
	uint8_t		flg = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

	buf[PRiNTF_BUFFMAX] = '\r';
 80025ba:	230d      	movs	r3, #13
 80025bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buf[PRiNTF_BUFFMAX+1] = '\n';
 80025c0:	230a      	movs	r3, #10
 80025c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if( log.num != 0 ){
 80025c6:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <LogdisplayISR+0x100>)
 80025c8:	889b      	ldrh	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d068      	beq.n	80026a0 <LogdisplayISR+0xf8>
		for(i=0; i<LOG_RECODE_MAX; i++){
 80025ce:	2300      	movs	r3, #0
 80025d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80025d2:	e060      	b.n	8002696 <LogdisplayISR+0xee>

			for(j=0; j<PRiNTF_BUFFMAX; j++ ){
 80025d4:	2300      	movs	r3, #0
 80025d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80025d8:	e041      	b.n	800265e <LogdisplayISR+0xb6>
				if( flg == 1){
 80025da:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10c      	bne.n	80025fc <LogdisplayISR+0x54>
					log.rec[rptr].string[j] = ' ';
 80025e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80025e4:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80025e6:	4830      	ldr	r0, [pc, #192]	; (80026a8 <LogdisplayISR+0x100>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4403      	add	r3, r0
 80025f2:	440b      	add	r3, r1
 80025f4:	330e      	adds	r3, #14
 80025f6:	2220      	movs	r2, #32
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e02d      	b.n	8002658 <LogdisplayISR+0xb0>
				}
				else if(log.rec[rptr].string[j] == '\0'){
 80025fc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80025fe:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8002600:	4829      	ldr	r0, [pc, #164]	; (80026a8 <LogdisplayISR+0x100>)
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4403      	add	r3, r0
 800260c:	440b      	add	r3, r1
 800260e:	330e      	adds	r3, #14
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <LogdisplayISR+0x8e>
					flg = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					log.rec[rptr].string[j] = ' ';
 800261c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800261e:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8002620:	4821      	ldr	r0, [pc, #132]	; (80026a8 <LogdisplayISR+0x100>)
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4403      	add	r3, r0
 800262c:	440b      	add	r3, r1
 800262e:	330e      	adds	r3, #14
 8002630:	2220      	movs	r2, #32
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e010      	b.n	8002658 <LogdisplayISR+0xb0>
				}
				else{
					buf[j]=log.rec[rptr].string[j];
 8002636:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002638:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
 800263a:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800263c:	4c1a      	ldr	r4, [pc, #104]	; (80026a8 <LogdisplayISR+0x100>)
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4423      	add	r3, r4
 8002648:	4403      	add	r3, r0
 800264a:	330e      	adds	r3, #14
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8002652:	443b      	add	r3, r7
 8002654:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for(j=0; j<PRiNTF_BUFFMAX; j++ ){
 8002658:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800265a:	3301      	adds	r3, #1
 800265c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800265e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002660:	2b31      	cmp	r3, #49	; 0x31
 8002662:	d9ba      	bls.n	80025da <LogdisplayISR+0x32>
				}
			}

			HAL_UART_Transmit(Get_huart(SK_UART2_DEBUG), buf, PRiNTF_BUFFMAX+2, HAL_MAX_DELAY);
 8002664:	2001      	movs	r0, #1
 8002666:	f001 fc31 	bl	8003ecc <Get_huart>
 800266a:	1d39      	adds	r1, r7, #4
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	2234      	movs	r2, #52	; 0x34
 8002672:	f004 fd64 	bl	800713e <HAL_UART_Transmit>

			rptr ++;
 8002676:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002678:	3301      	adds	r3, #1
 800267a:	877b      	strh	r3, [r7, #58]	; 0x3a
			if( rptr > LOG_RECODE_MAX ){
 800267c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <LogdisplayISR+0xde>
				rptr = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	877b      	strh	r3, [r7, #58]	; 0x3a
			}
			if( log.wptr == rptr ){
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <LogdisplayISR+0x100>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800268c:	429a      	cmp	r2, r3
 800268e:	d006      	beq.n	800269e <LogdisplayISR+0xf6>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8002690:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002692:	3301      	adds	r3, #1
 8002694:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002696:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002698:	2b63      	cmp	r3, #99	; 0x63
 800269a:	d99b      	bls.n	80025d4 <LogdisplayISR+0x2c>
				break;
			}
		}
	}

}
 800269c:	e000      	b.n	80026a0 <LogdisplayISR+0xf8>
				break;
 800269e:	bf00      	nop
}
 80026a0:	bf00      	nop
 80026a2:	3744      	adds	r7, #68	; 0x44
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	2000030c 	.word	0x2000030c

080026ac <LogInfo_clear>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_clear(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0

	log.rptr = 0;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <LogInfo_clear+0x20>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	805a      	strh	r2, [r3, #2]
	log.wptr = 0;
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <LogInfo_clear+0x20>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	801a      	strh	r2, [r3, #0]
	log.num = 0;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <LogInfo_clear+0x20>)
 80026be:	2200      	movs	r2, #0
 80026c0:	809a      	strh	r2, [r3, #4]

	SKprintf("LOG CLEAR \r\n");
 80026c2:	4803      	ldr	r0, [pc, #12]	; (80026d0 <LogInfo_clear+0x24>)
 80026c4:	f001 fcfa 	bl	80040bc <SKprintf>
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2000030c 	.word	0x2000030c
 80026d0:	0800ecb4 	.word	0x0800ecb4

080026d4 <GetMessageQue>:

//==============================================================================
//
//==============================================================================
osMessageQueueId_t GetMessageQue(SK_TASK task)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
	osMessageQueueId_t 	handle;

	switch(task){
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d00e      	beq.n	8002702 <GetMessageQue+0x2e>
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	dc10      	bgt.n	800270a <GetMessageQue+0x36>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <GetMessageQue+0x1e>
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d004      	beq.n	80026fa <GetMessageQue+0x26>
 80026f0:	e00b      	b.n	800270a <GetMessageQue+0x36>
	case SK_TASK_main:
		handle = myQueue01Handle;
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <GetMessageQue+0x44>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]
		break;
 80026f8:	e007      	b.n	800270a <GetMessageQue+0x36>
	case SK_TASK_sub1:
		handle = myQueue02Handle;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <GetMessageQue+0x48>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]
		break;
 8002700:	e003      	b.n	800270a <GetMessageQue+0x36>
	case SK_TASK_sub2:
		handle = myQueue03Handle;
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <GetMessageQue+0x4c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]
		break;
 8002708:	bf00      	nop
	}

	return handle;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	20001eb4 	.word	0x20001eb4
 800271c:	20001eb8 	.word	0x20001eb8
 8002720:	20001ebc 	.word	0x20001ebc

08002724 <task_chk_init>:

//==============================================================================
//
//==============================================================================
void task_chk_init(void)
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
	uint32_t 			*dtp;
	int		i;
	int		j;


	SKprintf("task_chk_init()\r\n");
 800272a:	4864      	ldr	r0, [pc, #400]	; (80028bc <task_chk_init+0x198>)
 800272c:	f001 fcc6 	bl	80040bc <SKprintf>

	for( i=0; i < SK_TASK_MAX; i++ ){
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e0b8      	b.n	80028a8 <task_chk_init+0x184>
		switch(i){
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d013      	beq.n	8002764 <task_chk_init+0x40>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b02      	cmp	r3, #2
 8002740:	dc15      	bgt.n	800276e <task_chk_init+0x4a>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <task_chk_init+0x2c>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d005      	beq.n	800275a <task_chk_init+0x36>
 800274e:	e00e      	b.n	800276e <task_chk_init+0x4a>
		case SK_TASK_main:
			dtp = &Task_mainHandle;
 8002750:	4b5b      	ldr	r3, [pc, #364]	; (80028c0 <task_chk_init+0x19c>)
 8002752:	613b      	str	r3, [r7, #16]
			attr = &Task_main_attributes;
 8002754:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <task_chk_init+0x1a0>)
 8002756:	617b      	str	r3, [r7, #20]
			break;
 8002758:	e00d      	b.n	8002776 <task_chk_init+0x52>
		case SK_TASK_sub1:
			dtp = &Task_sub1Handle;
 800275a:	4b5b      	ldr	r3, [pc, #364]	; (80028c8 <task_chk_init+0x1a4>)
 800275c:	613b      	str	r3, [r7, #16]
			attr = &Task_sub1_attributes;
 800275e:	4b5b      	ldr	r3, [pc, #364]	; (80028cc <task_chk_init+0x1a8>)
 8002760:	617b      	str	r3, [r7, #20]
			break;
 8002762:	e008      	b.n	8002776 <task_chk_init+0x52>
		case SK_TASK_sub2:
			dtp = &Task_sub2Handle;
 8002764:	4b5a      	ldr	r3, [pc, #360]	; (80028d0 <task_chk_init+0x1ac>)
 8002766:	613b      	str	r3, [r7, #16]
			attr = &Task_sub2_attributes;
 8002768:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <task_chk_init+0x1b0>)
 800276a:	617b      	str	r3, [r7, #20]
			break;
 800276c:	e003      	b.n	8002776 <task_chk_init+0x52>
		default:
			SKprintf("Error taskid\r\n");
 800276e:	485a      	ldr	r0, [pc, #360]	; (80028d8 <task_chk_init+0x1b4>)
 8002770:	f001 fca4 	bl	80040bc <SKprintf>
			break;
 8002774:	bf00      	nop
		}
		hTask = (TaskHandle_t *)*dtp;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	607b      	str	r3, [r7, #4]

		for( j=0; j < configMAX_TASK_NAME_LEN; j++ ){
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	e012      	b.n	80027a8 <task_chk_init+0x84>
			task_chk_table[i].name[j] = hTask->pcTaskName[j];
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4413      	add	r3, r2
 8002788:	3334      	adds	r3, #52	; 0x34
 800278a:	7818      	ldrb	r0, [r3, #0]
 800278c:	4953      	ldr	r1, [pc, #332]	; (80028dc <task_chk_init+0x1b8>)
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	18ca      	adds	r2, r1, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4413      	add	r3, r2
 800279e:	4602      	mov	r2, r0
 80027a0:	701a      	strb	r2, [r3, #0]
		for( j=0; j < configMAX_TASK_NAME_LEN; j++ ){
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	dde9      	ble.n	8002782 <task_chk_init+0x5e>
		}
		task_chk_table[i].name[j-1] = '\0';
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1e59      	subs	r1, r3, #1
 80027b2:	484a      	ldr	r0, [pc, #296]	; (80028dc <task_chk_init+0x1b8>)
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4403      	add	r3, r0
 80027c0:	440b      	add	r3, r1
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]

		task_chk_table[i].chk_stack = hTask->pxStack;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ca:	4844      	ldr	r0, [pc, #272]	; (80028dc <task_chk_init+0x1b8>)
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4403      	add	r3, r0
 80027d8:	3310      	adds	r3, #16
 80027da:	6019      	str	r1, [r3, #0]
		task_chk_table[i].size = attr->stack_size;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	b298      	uxth	r0, r3
 80027e2:	493e      	ldr	r1, [pc, #248]	; (80028dc <task_chk_init+0x1b8>)
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	3314      	adds	r3, #20
 80027f2:	4602      	mov	r2, r0
 80027f4:	801a      	strh	r2, [r3, #0]
		task_chk_table[i].used = 0;
 80027f6:	4939      	ldr	r1, [pc, #228]	; (80028dc <task_chk_init+0x1b8>)
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	3316      	adds	r3, #22
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]

		SKprintf(" %s\r\n", &task_chk_table[i].name[0]);
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4a31      	ldr	r2, [pc, #196]	; (80028dc <task_chk_init+0x1b8>)
 8002816:	4413      	add	r3, r2
 8002818:	4619      	mov	r1, r3
 800281a:	4831      	ldr	r0, [pc, #196]	; (80028e0 <task_chk_init+0x1bc>)
 800281c:	f001 fc4e 	bl	80040bc <SKprintf>
		SKprintf("  Check Start Address = %p\r\n", task_chk_table[i].chk_stack);
 8002820:	492e      	ldr	r1, [pc, #184]	; (80028dc <task_chk_init+0x1b8>)
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	3310      	adds	r3, #16
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	482b      	ldr	r0, [pc, #172]	; (80028e4 <task_chk_init+0x1c0>)
 8002836:	f001 fc41 	bl	80040bc <SKprintf>
		SKprintf("  Size          = %d\r\n", task_chk_table[i].size);
 800283a:	4928      	ldr	r1, [pc, #160]	; (80028dc <task_chk_init+0x1b8>)
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	3314      	adds	r3, #20
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	4826      	ldr	r0, [pc, #152]	; (80028e8 <task_chk_init+0x1c4>)
 8002850:	f001 fc34 	bl	80040bc <SKprintf>
		SKprintf("  Used Size     = %d(%d%%)\r\n\r\n", task_chk_table[i].used, 100*task_chk_table[i].used/task_chk_table[i].size);
 8002854:	4921      	ldr	r1, [pc, #132]	; (80028dc <task_chk_init+0x1b8>)
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	3316      	adds	r3, #22
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	461c      	mov	r4, r3
 8002868:	491c      	ldr	r1, [pc, #112]	; (80028dc <task_chk_init+0x1b8>)
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	3316      	adds	r3, #22
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	2364      	movs	r3, #100	; 0x64
 800287e:	fb03 f102 	mul.w	r1, r3, r2
 8002882:	4816      	ldr	r0, [pc, #88]	; (80028dc <task_chk_init+0x1b8>)
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4403      	add	r3, r0
 8002890:	3314      	adds	r3, #20
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	fb91 f3f3 	sdiv	r3, r1, r3
 8002898:	461a      	mov	r2, r3
 800289a:	4621      	mov	r1, r4
 800289c:	4813      	ldr	r0, [pc, #76]	; (80028ec <task_chk_init+0x1c8>)
 800289e:	f001 fc0d 	bl	80040bc <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3301      	adds	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	f77f af43 	ble.w	8002736 <task_chk_init+0x12>

	}
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd90      	pop	{r4, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	0800ecc4 	.word	0x0800ecc4
 80028c0:	20001ea8 	.word	0x20001ea8
 80028c4:	0800f99c 	.word	0x0800f99c
 80028c8:	20001eac 	.word	0x20001eac
 80028cc:	0800f9c0 	.word	0x0800f9c0
 80028d0:	20001eb0 	.word	0x20001eb0
 80028d4:	0800f9e4 	.word	0x0800f9e4
 80028d8:	0800ecd8 	.word	0x0800ecd8
 80028dc:	20001974 	.word	0x20001974
 80028e0:	0800ece8 	.word	0x0800ece8
 80028e4:	0800ecf0 	.word	0x0800ecf0
 80028e8:	0800ed10 	.word	0x0800ed10
 80028ec:	0800ed28 	.word	0x0800ed28

080028f0 <Disp_task_info>:
}
//==============================================================================
//
//==============================================================================
void Disp_task_info(SK_TASK taskid)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
	SKtskTaskControlBlock *hTask;
	osThreadAttr_t		*attr;
	uint32_t 			*dtp;

	switch(taskid){
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d016      	beq.n	800292e <Disp_task_info+0x3e>
 8002900:	2b02      	cmp	r3, #2
 8002902:	dc1c      	bgt.n	800293e <Disp_task_info+0x4e>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <Disp_task_info+0x1e>
 8002908:	2b01      	cmp	r3, #1
 800290a:	d008      	beq.n	800291e <Disp_task_info+0x2e>
 800290c:	e017      	b.n	800293e <Disp_task_info+0x4e>
	case SK_TASK_main:
		dtp = &Task_mainHandle;
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <Disp_task_info+0xf0>)
 8002910:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	617b      	str	r3, [r7, #20]
		attr = &Task_main_attributes;
 8002918:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <Disp_task_info+0xf4>)
 800291a:	613b      	str	r3, [r7, #16]
		break;
 800291c:	e013      	b.n	8002946 <Disp_task_info+0x56>
	case SK_TASK_sub1:
		dtp = &Task_sub1Handle;
 800291e:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <Disp_task_info+0xf8>)
 8002920:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	617b      	str	r3, [r7, #20]
		attr = &Task_sub1_attributes;
 8002928:	4b30      	ldr	r3, [pc, #192]	; (80029ec <Disp_task_info+0xfc>)
 800292a:	613b      	str	r3, [r7, #16]
		break;
 800292c:	e00b      	b.n	8002946 <Disp_task_info+0x56>
	case SK_TASK_sub2:
		dtp = &Task_sub2Handle;
 800292e:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <Disp_task_info+0x100>)
 8002930:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	617b      	str	r3, [r7, #20]
		attr = &Task_sub2_attributes;
 8002938:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <Disp_task_info+0x104>)
 800293a:	613b      	str	r3, [r7, #16]
		break;
 800293c:	e003      	b.n	8002946 <Disp_task_info+0x56>
	default:
		SKprintf("Error taskid\r\n");
 800293e:	482e      	ldr	r0, [pc, #184]	; (80029f8 <Disp_task_info+0x108>)
 8002940:	f001 fbbc 	bl	80040bc <SKprintf>
		break;
 8002944:	bf00      	nop
	}

	SKprintf("<<< %s >>>\r\n" ,attr->name);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4619      	mov	r1, r3
 800294c:	482b      	ldr	r0, [pc, #172]	; (80029fc <Disp_task_info+0x10c>)
 800294e:	f001 fbb5 	bl	80040bc <SKprintf>
	SKprintf(" TCB Address           = %p\r\n" ,hTask);
 8002952:	6979      	ldr	r1, [r7, #20]
 8002954:	482a      	ldr	r0, [pc, #168]	; (8002a00 <Disp_task_info+0x110>)
 8002956:	f001 fbb1 	bl	80040bc <SKprintf>
	SKprintf(" Stack Botom Address   = 0x%lx\r\n", hTask->pxTopOfStack );
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	4828      	ldr	r0, [pc, #160]	; (8002a04 <Disp_task_info+0x114>)
 8002962:	f001 fbab 	bl	80040bc <SKprintf>
	SKprintf(" Stack top Address     = 0x%lx\r\n", hTask->pxStack );
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4619      	mov	r1, r3
 800296c:	4826      	ldr	r0, [pc, #152]	; (8002a08 <Disp_task_info+0x118>)
 800296e:	f001 fba5 	bl	80040bc <SKprintf>
	SKprintf(" stack_size            = %lx\r\n" ,attr->stack_size);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4619      	mov	r1, r3
 8002978:	4824      	ldr	r0, [pc, #144]	; (8002a0c <Disp_task_info+0x11c>)
 800297a:	f001 fb9f 	bl	80040bc <SKprintf>
	SKprintf(" uxTCBNumber           = %lx\r\n", hTask->uxTCBNumber );
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4619      	mov	r1, r3
 8002984:	4822      	ldr	r0, [pc, #136]	; (8002a10 <Disp_task_info+0x120>)
 8002986:	f001 fb99 	bl	80040bc <SKprintf>
	SKprintf(" uxTaskNumber          = %lx\r\n", hTask->uxTaskNumber );
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298e:	4619      	mov	r1, r3
 8002990:	4820      	ldr	r0, [pc, #128]	; (8002a14 <Disp_task_info+0x124>)
 8002992:	f001 fb93 	bl	80040bc <SKprintf>
	SKprintf(" uxBasePriority        = %lx\r\n", hTask->uxBasePriority );
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	4619      	mov	r1, r3
 800299c:	481e      	ldr	r0, [pc, #120]	; (8002a18 <Disp_task_info+0x128>)
 800299e:	f001 fb8d 	bl	80040bc <SKprintf>
	SKprintf(" uxMutexesHeld         = %lx\r\n", hTask->uxMutexesHeld );
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a6:	4619      	mov	r1, r3
 80029a8:	481c      	ldr	r0, [pc, #112]	; (8002a1c <Disp_task_info+0x12c>)
 80029aa:	f001 fb87 	bl	80040bc <SKprintf>
	SKprintf(" ulNotifiedValue       = %lx\r\n", hTask->ulNotifiedValue );
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	4619      	mov	r1, r3
 80029b4:	481a      	ldr	r0, [pc, #104]	; (8002a20 <Disp_task_info+0x130>)
 80029b6:	f001 fb81 	bl	80040bc <SKprintf>
	SKprintf(" ucNotifyState         = %lx\r\n", hTask->ucNotifyState );
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	4817      	ldr	r0, [pc, #92]	; (8002a24 <Disp_task_info+0x134>)
 80029c6:	f001 fb79 	bl	80040bc <SKprintf>
	SKprintf(" ucStaticallyAllocated = %lx\r\n", hTask->ucStaticallyAllocated );
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80029d0:	4619      	mov	r1, r3
 80029d2:	4815      	ldr	r0, [pc, #84]	; (8002a28 <Disp_task_info+0x138>)
 80029d4:	f001 fb72 	bl	80040bc <SKprintf>
	SKprintf(" tz_module = %lx\r\n" ,attr->tz_module);
	SKprintf(" reserved = %lx\r\n" ,attr->reserved);
#endif	// ___NOP


}
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20001ea8 	.word	0x20001ea8
 80029e4:	0800f99c 	.word	0x0800f99c
 80029e8:	20001eac 	.word	0x20001eac
 80029ec:	0800f9c0 	.word	0x0800f9c0
 80029f0:	20001eb0 	.word	0x20001eb0
 80029f4:	0800f9e4 	.word	0x0800f9e4
 80029f8:	0800ecd8 	.word	0x0800ecd8
 80029fc:	0800ed64 	.word	0x0800ed64
 8002a00:	0800ed74 	.word	0x0800ed74
 8002a04:	0800ed94 	.word	0x0800ed94
 8002a08:	0800edb8 	.word	0x0800edb8
 8002a0c:	0800eddc 	.word	0x0800eddc
 8002a10:	0800edfc 	.word	0x0800edfc
 8002a14:	0800ee1c 	.word	0x0800ee1c
 8002a18:	0800ee3c 	.word	0x0800ee3c
 8002a1c:	0800ee5c 	.word	0x0800ee5c
 8002a20:	0800ee7c 	.word	0x0800ee7c
 8002a24:	0800ee9c 	.word	0x0800ee9c
 8002a28:	0800eebc 	.word	0x0800eebc

08002a2c <Get_task_stackptr>:

//==============================================================================
//
//==============================================================================
void Get_task_stackptr(SK_TASK taskid, STACK_INFO *ptr)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	71fb      	strb	r3, [r7, #7]
	SKtskTaskControlBlock *hTask;
	uint32_t 			*dtp;

	switch(taskid){
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d014      	beq.n	8002a68 <Get_task_stackptr+0x3c>
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	dc18      	bgt.n	8002a74 <Get_task_stackptr+0x48>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <Get_task_stackptr+0x20>
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d006      	beq.n	8002a58 <Get_task_stackptr+0x2c>
 8002a4a:	e013      	b.n	8002a74 <Get_task_stackptr+0x48>
	case SK_TASK_main:
		dtp = &Task_mainHandle;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <Get_task_stackptr+0x90>)
 8002a4e:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]
		break;
 8002a56:	e011      	b.n	8002a7c <Get_task_stackptr+0x50>
	case SK_TASK_sub1:
		hTask = (TaskHandle_t)&Task_sub1Handle;
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <Get_task_stackptr+0x94>)
 8002a5a:	60fb      	str	r3, [r7, #12]
		dtp = &Task_sub1Handle;
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <Get_task_stackptr+0x94>)
 8002a5e:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
		break;
 8002a66:	e009      	b.n	8002a7c <Get_task_stackptr+0x50>
	case SK_TASK_sub2:
		dtp = &Task_sub2Handle;
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <Get_task_stackptr+0x98>)
 8002a6a:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]
		break;
 8002a72:	e003      	b.n	8002a7c <Get_task_stackptr+0x50>
	default:
		SKprintf("Error taskid\r\n");
 8002a74:	4814      	ldr	r0, [pc, #80]	; (8002ac8 <Get_task_stackptr+0x9c>)
 8002a76:	f001 fb21 	bl	80040bc <SKprintf>
		break;
 8002a7a:	bf00      	nop
	}

	SKprintf(" Stack top Address     = 0x%lx\r\n", hTask->pxStack );
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	4619      	mov	r1, r3
 8002a82:	4812      	ldr	r0, [pc, #72]	; (8002acc <Get_task_stackptr+0xa0>)
 8002a84:	f001 fb1a 	bl	80040bc <SKprintf>



	ptr->pxStack = (char *)hTask->pxStack;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
	ptr->pxTopOfStack = (char *)hTask->pxTopOfStack;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	601a      	str	r2, [r3, #0]
	ptr->size = (uint16_t)(128*4);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9e:	811a      	strh	r2, [r3, #8]

	SKprintf("pxStack=%p,pxTopOfStack=%p,size=%d\r\n", ptr->pxStack,ptr->pxTopOfStack,ptr->size);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	891b      	ldrh	r3, [r3, #8]
 8002aac:	4808      	ldr	r0, [pc, #32]	; (8002ad0 <Get_task_stackptr+0xa4>)
 8002aae:	f001 fb05 	bl	80040bc <SKprintf>
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20001ea8 	.word	0x20001ea8
 8002ac0:	20001eac 	.word	0x20001eac
 8002ac4:	20001eb0 	.word	0x20001eb0
 8002ac8:	0800ecd8 	.word	0x0800ecd8
 8002acc:	0800edb8 	.word	0x0800edb8
 8002ad0:	0800eedc 	.word	0x0800eedc

08002ad4 <user_init>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
	RETURN_STATUS	status = RET_TRUE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	71fb      	strb	r3, [r7, #7]

	//LED_Flush(0);
	SKprintf("Initialize all configured peripherals\r\n");
 8002ade:	481a      	ldr	r0, [pc, #104]	; (8002b48 <user_init+0x74>)
 8002ae0:	f001 faec 	bl	80040bc <SKprintf>
	SKprintf("******************\r\n");
 8002ae4:	4819      	ldr	r0, [pc, #100]	; (8002b4c <user_init+0x78>)
 8002ae6:	f001 fae9 	bl	80040bc <SKprintf>
	SKprintf("*** UART START ***\r\n");
 8002aea:	4819      	ldr	r0, [pc, #100]	; (8002b50 <user_init+0x7c>)
 8002aec:	f001 fae6 	bl	80040bc <SKprintf>
	SKprintf("******************\r\n");
 8002af0:	4816      	ldr	r0, [pc, #88]	; (8002b4c <user_init+0x78>)
 8002af2:	f001 fae3 	bl	80040bc <SKprintf>


	//-----------------------------------------------
	// Log Timer Counter
	//-----------------------------------------------
	timer.usec = 0;
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <user_init+0x80>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	835a      	strh	r2, [r3, #26]
	timer.msec = 0;
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <user_init+0x80>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	839a      	strh	r2, [r3, #28]
	timer.usec_max = 0;
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <user_init+0x80>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	83da      	strh	r2, [r3, #30]
	timer.msec_max = 0;
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <user_init+0x80>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	841a      	strh	r2, [r3, #32]
	timer.dt = 0;
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <user_init+0x80>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
	timer.dt_max = 0;
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <user_init+0x80>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
	timer.dt_av = 0;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <user_init+0x80>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	615a      	str	r2, [r3, #20]
	timer.start = 0;
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <user_init+0x80>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	765a      	strb	r2, [r3, #25]
	timer.av_wcnt = 0;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <user_init+0x80>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	761a      	strb	r2, [r3, #24]

	//-----------------------------------------------
	// Log Info Init
	//-----------------------------------------------
	LogInfo_clear();
 8002b2c:	f7ff fdbe 	bl	80026ac <LogInfo_clear>


	//-----------------------------------------------
	// 受信割込み準備
	//-----------------------------------------------
	uart_Data_init();
 8002b30:	f001 fa2c 	bl	8003f8c <uart_Data_init>

	uart_Rcv_init(SK_UART1_RS485);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f001 fa57 	bl	8003fe8 <uart_Rcv_init>
	uart_Rcv_init(SK_UART2_DEBUG);
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f001 fa54 	bl	8003fe8 <uart_Rcv_init>

}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	0800ef04 	.word	0x0800ef04
 8002b4c:	0800ef2c 	.word	0x0800ef2c
 8002b50:	0800ef44 	.word	0x0800ef44
 8002b54:	200002dc 	.word	0x200002dc

08002b58 <rtc_display>:

//==============================================================================
//
//==============================================================================
void rtc_display(void)
{
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	4619      	mov	r1, r3
 8002b64:	480f      	ldr	r0, [pc, #60]	; (8002ba4 <rtc_display+0x4c>)
 8002b66:	f003 fb53 	bl	8006210 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480c      	ldr	r0, [pc, #48]	; (8002ba4 <rtc_display+0x4c>)
 8002b72:	f003 fc2f 	bl	80063d4 <HAL_RTC_GetDate>
	SKprintf("\r\n20%02d.%02d.%02d %02d:%02d:%02d\r\n", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	787b      	ldrb	r3, [r7, #1]
 8002b7c:	461c      	mov	r4, r3
 8002b7e:	78bb      	ldrb	r3, [r7, #2]
 8002b80:	461d      	mov	r5, r3
 8002b82:	793b      	ldrb	r3, [r7, #4]
 8002b84:	797a      	ldrb	r2, [r7, #5]
 8002b86:	79b9      	ldrb	r1, [r7, #6]
 8002b88:	9102      	str	r1, [sp, #8]
 8002b8a:	9201      	str	r2, [sp, #4]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	462b      	mov	r3, r5
 8002b90:	4622      	mov	r2, r4
 8002b92:	4601      	mov	r1, r0
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <rtc_display+0x50>)
 8002b96:	f001 fa91 	bl	80040bc <SKprintf>
	//SKprintf("av=%d max=%d\r\n",timer.dt_av,timer.	dt_max);
	//SKprintf("dt_buf=%d, %d, %d\r\n", timer.dt_buf[0],timer.dt_buf[1],timer.dt_buf[2]);
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20001d70 	.word	0x20001d70
 8002ba8:	0800ef5c 	.word	0x0800ef5c

08002bac <GetTimerEventID>:

//==============================================================================
//
//==============================================================================
uint8_t GetTimerEventID(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
	uint8_t				i;
	uint8_t				rtn;

	rtn = 0xff;
 8002bb2:	23ff      	movs	r3, #255	; 0xff
 8002bb4:	71bb      	strb	r3, [r7, #6]
	for(i=0; i<TIMER_EVENT_MAX; i++){
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	71fb      	strb	r3, [r7, #7]
 8002bba:	e01a      	b.n	8002bf2 <GetTimerEventID+0x46>
		if( timer_event[i].flag == TIMER_NO_USED){
 8002bbc:	79fa      	ldrb	r2, [r7, #7]
 8002bbe:	4912      	ldr	r1, [pc, #72]	; (8002c08 <GetTimerEventID+0x5c>)
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3302      	adds	r3, #2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <GetTimerEventID+0x40>
			timer_event[i].flag = TIMER_USED;
 8002bd2:	79fa      	ldrb	r2, [r7, #7]
 8002bd4:	490c      	ldr	r1, [pc, #48]	; (8002c08 <GetTimerEventID+0x5c>)
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3302      	adds	r3, #2
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
			rtn = i;
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	71bb      	strb	r3, [r7, #6]
			break;
 8002bea:	e005      	b.n	8002bf8 <GetTimerEventID+0x4c>
	for(i=0; i<TIMER_EVENT_MAX; i++){
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	71fb      	strb	r3, [r7, #7]
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	d9e1      	bls.n	8002bbc <GetTimerEventID+0x10>
		}
	}

	return rtn;
 8002bf8:	79bb      	ldrb	r3, [r7, #6]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	200019bc 	.word	0x200019bc

08002c0c <ReleaceTimerEvent>:
//==============================================================================
//
//==============================================================================
void ReleaceTimerEvent(uint8_t timer_id)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
	MESSAGE_QUE_DATA 	*msg;
	Set_logInfo2("ReleaceTimerEvent(%d)",timer_id);
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4810      	ldr	r0, [pc, #64]	; (8002c5c <ReleaceTimerEvent+0x50>)
 8002c1c:	f7ff fb0a 	bl	8002234 <Set_logInfo2>
	timer_event[timer_id].flag = TIMER_NO_USED;
 8002c20:	79fa      	ldrb	r2, [r7, #7]
 8002c22:	490f      	ldr	r1, [pc, #60]	; (8002c60 <ReleaceTimerEvent+0x54>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3302      	adds	r3, #2
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
	msg = timer_event[timer_id].message;
 8002c34:	79fa      	ldrb	r2, [r7, #7]
 8002c36:	490a      	ldr	r1, [pc, #40]	; (8002c60 <ReleaceTimerEvent+0x54>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	3308      	adds	r3, #8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60fb      	str	r3, [r7, #12]
	msg->maroc_ptr;
	vPortFree(msg->maroc_ptr);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f008 f9e7 	bl	800b020 <vPortFree>

#ifdef	 __HEAP_DBUG
	Set_logInfo2("vPortFree=%x",msg->maroc_ptr);
	Set_logInfo2("HeapSize 010 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	0800ef80 	.word	0x0800ef80
 8002c60:	200019bc 	.word	0x200019bc

08002c64 <TimerEventCtrl>:

//==============================================================================
//
//==============================================================================
void TimerEventCtrl(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
	void 				*msgQueBuf;
	uint8_t				rcvbuff[sizeof(void *)];
	TIMER_EVENT_FORM	*tm_form;
	osStatus_t			os_status;

	msgQueBuf = (void *)rcvbuff;
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	613b      	str	r3, [r7, #16]

		//-------------------------------------------------------------------------
		//	タイマー
		//-------------------------------------------------------------------------
		for(i=0; i<TIMER_EVENT_MAX; i++){
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]
 8002c72:	e056      	b.n	8002d22 <TimerEventCtrl+0xbe>
			if( timer_event[i].flag == TIMER_ACTIVE){
 8002c74:	7dfa      	ldrb	r2, [r7, #23]
 8002c76:	4960      	ldr	r1, [pc, #384]	; (8002df8 <TimerEventCtrl+0x194>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	3302      	adds	r3, #2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d148      	bne.n	8002d1c <TimerEventCtrl+0xb8>
				if( timer_event[i].counter != 0 ){
 8002c8a:	7dfa      	ldrb	r2, [r7, #23]
 8002c8c:	495a      	ldr	r1, [pc, #360]	; (8002df8 <TimerEventCtrl+0x194>)
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d012      	beq.n	8002cc4 <TimerEventCtrl+0x60>
					timer_event[i].counter --;
 8002c9e:	7dfa      	ldrb	r2, [r7, #23]
 8002ca0:	4955      	ldr	r1, [pc, #340]	; (8002df8 <TimerEventCtrl+0x194>)
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b298      	uxth	r0, r3
 8002cb2:	4951      	ldr	r1, [pc, #324]	; (8002df8 <TimerEventCtrl+0x194>)
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	801a      	strh	r2, [r3, #0]
 8002cc2:	e02b      	b.n	8002d1c <TimerEventCtrl+0xb8>
				}
				else{
					os_status = osMessageQueuePut (timer_event[i].hmsg, (void *)timer_event[i].message, 0,0);
 8002cc4:	7dfa      	ldrb	r2, [r7, #23]
 8002cc6:	494c      	ldr	r1, [pc, #304]	; (8002df8 <TimerEventCtrl+0x194>)
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	7dfa      	ldrb	r2, [r7, #23]
 8002cd8:	4947      	ldr	r1, [pc, #284]	; (8002df8 <TimerEventCtrl+0x194>)
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	6819      	ldr	r1, [r3, #0]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2200      	movs	r2, #0
 8002cec:	f005 fc00 	bl	80084f0 <osMessageQueuePut>
 8002cf0:	60f8      	str	r0, [r7, #12]

			    	switch( os_status ){
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d103      	bne.n	8002d00 <TimerEventCtrl+0x9c>
					case osOK:
						Set_logInfo2("TimerEvent(). Send MsgQue OK");
 8002cf8:	4840      	ldr	r0, [pc, #256]	; (8002dfc <TimerEventCtrl+0x198>)
 8002cfa:	f7ff fa9b 	bl	8002234 <Set_logInfo2>
						break;
 8002cfe:	e003      	b.n	8002d08 <TimerEventCtrl+0xa4>
					default:
						Set_logInfo2("TimerEvent(). Send MsgQue ERROR");
 8002d00:	483f      	ldr	r0, [pc, #252]	; (8002e00 <TimerEventCtrl+0x19c>)
 8002d02:	f7ff fa97 	bl	8002234 <Set_logInfo2>
						break;
 8002d06:	bf00      	nop
					}

			    	timer_event[i].flag = TIMER_NO_USED;
 8002d08:	7dfa      	ldrb	r2, [r7, #23]
 8002d0a:	493b      	ldr	r1, [pc, #236]	; (8002df8 <TimerEventCtrl+0x194>)
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	3302      	adds	r3, #2
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
		for(i=0; i<TIMER_EVENT_MAX; i++){
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	2b09      	cmp	r3, #9
 8002d26:	d9a5      	bls.n	8002c74 <TimerEventCtrl+0x10>
		//-------------------------------------------------------------------------
		//	メッセージ待ち
		//-------------------------------------------------------------------------
		//os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), msgQueBuf, 0, 0);
//		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub1), msgQueBuf, 0, osWaitForever);
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub1), msgQueBuf, 0, 10);
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f7ff fcd3 	bl	80026d4 <GetMessageQue>
 8002d2e:	230a      	movs	r3, #10
 8002d30:	2200      	movs	r2, #0
 8002d32:	6939      	ldr	r1, [r7, #16]
 8002d34:	f005 fc3c 	bl	80085b0 <osMessageQueueGet>
 8002d38:	60f8      	str	r0, [r7, #12]
		tm_form = (TIMER_EVENT_FORM *)msgQueBuf;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	60bb      	str	r3, [r7, #8]
		tm_form = (TIMER_EVENT_FORM	*)tm_form->maroc_ptr;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60bb      	str	r3, [r7, #8]

		switch( os_status ){
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f113 0f02 	cmn.w	r3, #2
 8002d4a:	d050      	beq.n	8002dee <TimerEventCtrl+0x18a>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d148      	bne.n	8002de4 <TimerEventCtrl+0x180>
		case osOK:
			SKprintf("TimerEventCtrl(2):os_status=OK(%d)\r\n",os_status);
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	482b      	ldr	r0, [pc, #172]	; (8002e04 <TimerEventCtrl+0x1a0>)
 8002d56:	f001 f9b1 	bl	80040bc <SKprintf>
			Set_logInfo2("TimerEvent(). Recive MsgQue OK");
 8002d5a:	482b      	ldr	r0, [pc, #172]	; (8002e08 <TimerEventCtrl+0x1a4>)
 8002d5c:	f7ff fa6a 	bl	8002234 <Set_logInfo2>

			i = tm_form->timer_id;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	7d1b      	ldrb	r3, [r3, #20]
 8002d64:	75fb      	strb	r3, [r7, #23]

			timer_event[i].counter 	= tm_form->time;
 8002d66:	7dfa      	ldrb	r2, [r7, #23]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	8998      	ldrh	r0, [r3, #12]
 8002d6c:	4922      	ldr	r1, [pc, #136]	; (8002df8 <TimerEventCtrl+0x194>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	4602      	mov	r2, r0
 8002d7a:	801a      	strh	r2, [r3, #0]
			timer_event[i].flag 	= TIMER_ACTIVE;
 8002d7c:	7dfa      	ldrb	r2, [r7, #23]
 8002d7e:	491e      	ldr	r1, [pc, #120]	; (8002df8 <TimerEventCtrl+0x194>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	701a      	strb	r2, [r3, #0]
			timer_event[i].hmsg 	= tm_form->hmsg;
 8002d90:	7dfa      	ldrb	r2, [r7, #23]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6899      	ldr	r1, [r3, #8]
 8002d96:	4818      	ldr	r0, [pc, #96]	; (8002df8 <TimerEventCtrl+0x194>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4403      	add	r3, r0
 8002da2:	3304      	adds	r3, #4
 8002da4:	6019      	str	r1, [r3, #0]
			timer_event[i].message 	= tm_form->mail_form;
 8002da6:	7dfa      	ldrb	r2, [r7, #23]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6919      	ldr	r1, [r3, #16]
 8002dac:	4812      	ldr	r0, [pc, #72]	; (8002df8 <TimerEventCtrl+0x194>)
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4403      	add	r3, r0
 8002db8:	3308      	adds	r3, #8
 8002dba:	6019      	str	r1, [r3, #0]

			SKprintf("tm_form=%p,.message=%p\r\n",tm_form,timer_event[i].message);
 8002dbc:	7dfa      	ldrb	r2, [r7, #23]
 8002dbe:	490e      	ldr	r1, [pc, #56]	; (8002df8 <TimerEventCtrl+0x194>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3308      	adds	r3, #8
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	480e      	ldr	r0, [pc, #56]	; (8002e0c <TimerEventCtrl+0x1a8>)
 8002dd4:	f001 f972 	bl	80040bc <SKprintf>

			vPortFree(tm_form->maroc_ptr);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f008 f91f 	bl	800b020 <vPortFree>
#ifdef	 __HEAP_DBUG
			Set_logInfo2("vPortFree=%x",tm_form);
			Set_logInfo2("HeapSize 007 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

			break;
 8002de2:	e005      	b.n	8002df0 <TimerEventCtrl+0x18c>
		case osErrorTimeout:
			break;
		default:
			SKprintf("TimerEventCtrl(2):os_status=Error(%d)\r\n",os_status);
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	480a      	ldr	r0, [pc, #40]	; (8002e10 <TimerEventCtrl+0x1ac>)
 8002de8:	f001 f968 	bl	80040bc <SKprintf>
			break;
 8002dec:	e000      	b.n	8002df0 <TimerEventCtrl+0x18c>
			break;
 8002dee:	bf00      	nop
		}
}
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200019bc 	.word	0x200019bc
 8002dfc:	0800ef98 	.word	0x0800ef98
 8002e00:	0800efb8 	.word	0x0800efb8
 8002e04:	0800efd8 	.word	0x0800efd8
 8002e08:	0800f000 	.word	0x0800f000
 8002e0c:	0800f020 	.word	0x0800f020
 8002e10:	0800f03c 	.word	0x0800f03c

08002e14 <tasuk3_init>:

//==============================================================================
//
//==============================================================================
void  tasuk3_init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
	SKprintf("tasuk3_init(void)\r\n");
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <tasuk3_init+0x10>)
 8002e1a:	f001 f94f 	bl	80040bc <SKprintf>
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	0800f064 	.word	0x0800f064

08002e28 <Set_rcv_data>:

//==============================================================================
//
//==============================================================================
void Set_rcv_data(SK_UART sel)
{
 8002e28:	b490      	push	{r4, r7}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
	uart[sel].Set_cnt++;
 8002e32:	79fa      	ldrb	r2, [r7, #7]
 8002e34:	4952      	ldr	r1, [pc, #328]	; (8002f80 <Set_rcv_data+0x158>)
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	440b      	add	r3, r1
 8002e40:	338c      	adds	r3, #140	; 0x8c
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	3301      	adds	r3, #1
 8002e46:	b298      	uxth	r0, r3
 8002e48:	494d      	ldr	r1, [pc, #308]	; (8002f80 <Set_rcv_data+0x158>)
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	440b      	add	r3, r1
 8002e54:	338c      	adds	r3, #140	; 0x8c
 8002e56:	4602      	mov	r2, r0
 8002e58:	801a      	strh	r2, [r3, #0]

	while(uart[sel].Sem_rs485_rcv==1);
 8002e5a:	bf00      	nop
 8002e5c:	79fa      	ldrb	r2, [r7, #7]
 8002e5e:	4948      	ldr	r1, [pc, #288]	; (8002f80 <Set_rcv_data+0x158>)
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	440b      	add	r3, r1
 8002e6a:	338a      	adds	r3, #138	; 0x8a
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d0f4      	beq.n	8002e5c <Set_rcv_data+0x34>

	uart[sel].Sem_rs485_rcv= 1;
 8002e72:	79fa      	ldrb	r2, [r7, #7]
 8002e74:	4942      	ldr	r1, [pc, #264]	; (8002f80 <Set_rcv_data+0x158>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	440b      	add	r3, r1
 8002e80:	338a      	adds	r3, #138	; 0x8a
 8002e82:	2201      	movs	r2, #1
 8002e84:	801a      	strh	r2, [r3, #0]
	uart[sel].rcvnum ++;
 8002e86:	79fa      	ldrb	r2, [r7, #7]
 8002e88:	493d      	ldr	r1, [pc, #244]	; (8002f80 <Set_rcv_data+0x158>)
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	440b      	add	r3, r1
 8002e94:	3382      	adds	r3, #130	; 0x82
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b298      	uxth	r0, r3
 8002e9c:	4938      	ldr	r1, [pc, #224]	; (8002f80 <Set_rcv_data+0x158>)
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3382      	adds	r3, #130	; 0x82
 8002eaa:	4602      	mov	r2, r0
 8002eac:	801a      	strh	r2, [r3, #0]
	uart[sel].Sem_rs485_rcv= 0;
 8002eae:	79fa      	ldrb	r2, [r7, #7]
 8002eb0:	4933      	ldr	r1, [pc, #204]	; (8002f80 <Set_rcv_data+0x158>)
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	440b      	add	r3, r1
 8002ebc:	338a      	adds	r3, #138	; 0x8a
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	801a      	strh	r2, [r3, #0]

	uart[sel].rcvbuf[uart[sel].rcv_wpt] = uart[sel].rcv_dt[0];
 8002ec2:	79f9      	ldrb	r1, [r7, #7]
 8002ec4:	79fa      	ldrb	r2, [r7, #7]
 8002ec6:	79f8      	ldrb	r0, [r7, #7]
 8002ec8:	4c2d      	ldr	r4, [pc, #180]	; (8002f80 <Set_rcv_data+0x158>)
 8002eca:	4603      	mov	r3, r0
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4403      	add	r3, r0
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	4423      	add	r3, r4
 8002ed4:	3386      	adds	r3, #134	; 0x86
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	461c      	mov	r4, r3
 8002eda:	4829      	ldr	r0, [pc, #164]	; (8002f80 <Set_rcv_data+0x158>)
 8002edc:	460b      	mov	r3, r1
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	4403      	add	r3, r0
 8002ee6:	7818      	ldrb	r0, [r3, #0]
 8002ee8:	4925      	ldr	r1, [pc, #148]	; (8002f80 <Set_rcv_data+0x158>)
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	440b      	add	r3, r1
 8002ef4:	4423      	add	r3, r4
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	4602      	mov	r2, r0
 8002efa:	701a      	strb	r2, [r3, #0]
//	uart[sel].rcvnum ++;
	uart[sel].totalnum ++;
 8002efc:	79fa      	ldrb	r2, [r7, #7]
 8002efe:	4920      	ldr	r1, [pc, #128]	; (8002f80 <Set_rcv_data+0x158>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	440b      	add	r3, r1
 8002f0a:	3384      	adds	r3, #132	; 0x84
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	b298      	uxth	r0, r3
 8002f12:	491b      	ldr	r1, [pc, #108]	; (8002f80 <Set_rcv_data+0x158>)
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3384      	adds	r3, #132	; 0x84
 8002f20:	4602      	mov	r2, r0
 8002f22:	801a      	strh	r2, [r3, #0]

	uart[sel].rcv_wpt ++ ;
 8002f24:	79fa      	ldrb	r2, [r7, #7]
 8002f26:	4916      	ldr	r1, [pc, #88]	; (8002f80 <Set_rcv_data+0x158>)
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	440b      	add	r3, r1
 8002f32:	3386      	adds	r3, #134	; 0x86
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	b298      	uxth	r0, r3
 8002f3a:	4911      	ldr	r1, [pc, #68]	; (8002f80 <Set_rcv_data+0x158>)
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	440b      	add	r3, r1
 8002f46:	3386      	adds	r3, #134	; 0x86
 8002f48:	4602      	mov	r2, r0
 8002f4a:	801a      	strh	r2, [r3, #0]
    if( uart[sel].rcv_wpt > RCV_BUF_SIZE ){
 8002f4c:	79fa      	ldrb	r2, [r7, #7]
 8002f4e:	490c      	ldr	r1, [pc, #48]	; (8002f80 <Set_rcv_data+0x158>)
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	440b      	add	r3, r1
 8002f5a:	3386      	adds	r3, #134	; 0x86
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	2b80      	cmp	r3, #128	; 0x80
 8002f60:	d909      	bls.n	8002f76 <Set_rcv_data+0x14e>
    	uart[sel].rcv_wpt = 0;
 8002f62:	79fa      	ldrb	r2, [r7, #7]
 8002f64:	4906      	ldr	r1, [pc, #24]	; (8002f80 <Set_rcv_data+0x158>)
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	440b      	add	r3, r1
 8002f70:	3386      	adds	r3, #134	; 0x86
 8002f72:	2200      	movs	r2, #0
 8002f74:	801a      	strh	r2, [r3, #0]
    }
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc90      	pop	{r4, r7}
 8002f7e:	4770      	bx	lr
 8002f80:	20001ab8 	.word	0x20001ab8

08002f84 <Get_rcv_data>:
//==============================================================================
//
//==============================================================================
uint8_t Get_rcv_data(SK_UART sel)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
    uint8_t dt;
	uart[sel].Get_cnt++;
 8002f8e:	79fa      	ldrb	r2, [r7, #7]
 8002f90:	4945      	ldr	r1, [pc, #276]	; (80030a8 <Get_rcv_data+0x124>)
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	440b      	add	r3, r1
 8002f9c:	338e      	adds	r3, #142	; 0x8e
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	b298      	uxth	r0, r3
 8002fa4:	4940      	ldr	r1, [pc, #256]	; (80030a8 <Get_rcv_data+0x124>)
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4413      	add	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	440b      	add	r3, r1
 8002fb0:	338e      	adds	r3, #142	; 0x8e
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	801a      	strh	r2, [r3, #0]

  	while(uart[sel].Sem_rs485_rcv==1);
 8002fb6:	bf00      	nop
 8002fb8:	79fa      	ldrb	r2, [r7, #7]
 8002fba:	493b      	ldr	r1, [pc, #236]	; (80030a8 <Get_rcv_data+0x124>)
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	440b      	add	r3, r1
 8002fc6:	338a      	adds	r3, #138	; 0x8a
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d0f4      	beq.n	8002fb8 <Get_rcv_data+0x34>

	uart[sel].Sem_rs485_rcv = 1;
 8002fce:	79fa      	ldrb	r2, [r7, #7]
 8002fd0:	4935      	ldr	r1, [pc, #212]	; (80030a8 <Get_rcv_data+0x124>)
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	440b      	add	r3, r1
 8002fdc:	338a      	adds	r3, #138	; 0x8a
 8002fde:	2201      	movs	r2, #1
 8002fe0:	801a      	strh	r2, [r3, #0]
	uart[sel].rcvnum --;
 8002fe2:	79fa      	ldrb	r2, [r7, #7]
 8002fe4:	4930      	ldr	r1, [pc, #192]	; (80030a8 <Get_rcv_data+0x124>)
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	440b      	add	r3, r1
 8002ff0:	3382      	adds	r3, #130	; 0x82
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b298      	uxth	r0, r3
 8002ff8:	492b      	ldr	r1, [pc, #172]	; (80030a8 <Get_rcv_data+0x124>)
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	440b      	add	r3, r1
 8003004:	3382      	adds	r3, #130	; 0x82
 8003006:	4602      	mov	r2, r0
 8003008:	801a      	strh	r2, [r3, #0]
	uart[sel].Sem_rs485_rcv = 0;
 800300a:	79fa      	ldrb	r2, [r7, #7]
 800300c:	4926      	ldr	r1, [pc, #152]	; (80030a8 <Get_rcv_data+0x124>)
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	440b      	add	r3, r1
 8003018:	338a      	adds	r3, #138	; 0x8a
 800301a:	2200      	movs	r2, #0
 800301c:	801a      	strh	r2, [r3, #0]

	dt =  uart[sel].rcvbuf[uart[sel].rcv_rpt];
 800301e:	79fa      	ldrb	r2, [r7, #7]
 8003020:	79f9      	ldrb	r1, [r7, #7]
 8003022:	4821      	ldr	r0, [pc, #132]	; (80030a8 <Get_rcv_data+0x124>)
 8003024:	460b      	mov	r3, r1
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	440b      	add	r3, r1
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	4403      	add	r3, r0
 800302e:	3388      	adds	r3, #136	; 0x88
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	491c      	ldr	r1, [pc, #112]	; (80030a8 <Get_rcv_data+0x124>)
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	440b      	add	r3, r1
 8003040:	4403      	add	r3, r0
 8003042:	3302      	adds	r3, #2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	73fb      	strb	r3, [r7, #15]
	uart[sel].rcv_rpt ++ ;
 8003048:	79fa      	ldrb	r2, [r7, #7]
 800304a:	4917      	ldr	r1, [pc, #92]	; (80030a8 <Get_rcv_data+0x124>)
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	440b      	add	r3, r1
 8003056:	3388      	adds	r3, #136	; 0x88
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	b298      	uxth	r0, r3
 800305e:	4912      	ldr	r1, [pc, #72]	; (80030a8 <Get_rcv_data+0x124>)
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	440b      	add	r3, r1
 800306a:	3388      	adds	r3, #136	; 0x88
 800306c:	4602      	mov	r2, r0
 800306e:	801a      	strh	r2, [r3, #0]
	if( uart[sel].rcv_rpt > RCV_BUF_SIZE ){
 8003070:	79fa      	ldrb	r2, [r7, #7]
 8003072:	490d      	ldr	r1, [pc, #52]	; (80030a8 <Get_rcv_data+0x124>)
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	440b      	add	r3, r1
 800307e:	3388      	adds	r3, #136	; 0x88
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	2b80      	cmp	r3, #128	; 0x80
 8003084:	d909      	bls.n	800309a <Get_rcv_data+0x116>
		uart[sel].rcv_rpt = 0;
 8003086:	79fa      	ldrb	r2, [r7, #7]
 8003088:	4907      	ldr	r1, [pc, #28]	; (80030a8 <Get_rcv_data+0x124>)
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	440b      	add	r3, r1
 8003094:	3388      	adds	r3, #136	; 0x88
 8003096:	2200      	movs	r2, #0
 8003098:	801a      	strh	r2, [r3, #0]
	}

    return dt;
 800309a:	7bfb      	ldrb	r3, [r7, #15]

}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	20001ab8 	.word	0x20001ab8

080030ac <HAL_UART_RxCpltCallback>:

//==============================================================================
//　受信データ割込みコールバック
//==============================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

	if( Get_uart_port(huart) == SK_UART1_RS485 ){
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 ff1f 	bl	8003ef8 <Get_uart_port>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d112      	bne.n	80030e6 <HAL_UART_RxCpltCallback+0x3a>
		Set_rcv_data(SK_UART1_RS485);
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7ff feb1 	bl	8002e28 <Set_rcv_data>
		uart_Rcv_init(SK_UART1_RS485);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f000 ff8e 	bl	8003fe8 <uart_Rcv_init>
		if(uart[SK_UART1_RS485].totalnum >= COM_TABLE_MAX){
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_UART_RxCpltCallback+0xb4>)
 80030ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80030d2:	2b21      	cmp	r3, #33	; 0x21
 80030d4:	d940      	bls.n	8003158 <HAL_UART_RxCpltCallback+0xac>
			Set_logInfo("HAL_UART_RxCpltCallback(RS485)");
 80030d6:	4823      	ldr	r0, [pc, #140]	; (8003164 <HAL_UART_RxCpltCallback+0xb8>)
 80030d8:	f7fe ffe8 	bl	80020ac <Set_logInfo>
			SendMsgQueISR(RT_EVENT_UART_RX, 0xff);
 80030dc:	21ff      	movs	r1, #255	; 0xff
 80030de:	2001      	movs	r0, #1
 80030e0:	f000 f844 	bl	800316c <SendMsgQueISR>
		Set_rcv_data(SK_UART2_DEBUG);
		uart_Rcv_init(SK_UART2_DEBUG);
	}
	else{
	}
}
 80030e4:	e038      	b.n	8003158 <HAL_UART_RxCpltCallback+0xac>
	else if( Get_uart_port(huart) == SK_UART2_DEBUG ){
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 ff06 	bl	8003ef8 <Get_uart_port>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d132      	bne.n	8003158 <HAL_UART_RxCpltCallback+0xac>
		if(uart[SK_UART2_DEBUG].rcv_dt[0] == '!'){
 80030f2:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_UART_RxCpltCallback+0xb4>)
 80030f4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80030f8:	2b21      	cmp	r3, #33	; 0x21
 80030fa:	d10e      	bne.n	800311a <HAL_UART_RxCpltCallback+0x6e>
			esc.buf[esc.ptr] = uart[SK_UART2_DEBUG].rcv_dt[0];
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_UART_RxCpltCallback+0xbc>)
 80030fe:	7a9b      	ldrb	r3, [r3, #10]
 8003100:	461a      	mov	r2, r3
 8003102:	4b17      	ldr	r3, [pc, #92]	; (8003160 <HAL_UART_RxCpltCallback+0xb4>)
 8003104:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_UART_RxCpltCallback+0xbc>)
 800310a:	5499      	strb	r1, [r3, r2]
			esc.ptr++;
 800310c:	4b16      	ldr	r3, [pc, #88]	; (8003168 <HAL_UART_RxCpltCallback+0xbc>)
 800310e:	7a9b      	ldrb	r3, [r3, #10]
 8003110:	3301      	adds	r3, #1
 8003112:	b2da      	uxtb	r2, r3
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <HAL_UART_RxCpltCallback+0xbc>)
 8003116:	729a      	strb	r2, [r3, #10]
 8003118:	e018      	b.n	800314c <HAL_UART_RxCpltCallback+0xa0>
		else if(esc.ptr == 1){
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_UART_RxCpltCallback+0xbc>)
 800311c:	7a9b      	ldrb	r3, [r3, #10]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d114      	bne.n	800314c <HAL_UART_RxCpltCallback+0xa0>
			esc.buf[esc.ptr] = uart[SK_UART2_DEBUG].rcv_dt[0];
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_UART_RxCpltCallback+0xbc>)
 8003124:	7a9b      	ldrb	r3, [r3, #10]
 8003126:	461a      	mov	r2, r3
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_UART_RxCpltCallback+0xb4>)
 800312a:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_UART_RxCpltCallback+0xbc>)
 8003130:	5499      	strb	r1, [r3, r2]
			esc.ptr = 0;
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_UART_RxCpltCallback+0xbc>)
 8003134:	2200      	movs	r2, #0
 8003136:	729a      	strb	r2, [r3, #10]
			if(esc.buf[0]=='!' && esc.buf[1]=='l'){
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_UART_RxCpltCallback+0xbc>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b21      	cmp	r3, #33	; 0x21
 800313e:	d105      	bne.n	800314c <HAL_UART_RxCpltCallback+0xa0>
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_UART_RxCpltCallback+0xbc>)
 8003142:	785b      	ldrb	r3, [r3, #1]
 8003144:	2b6c      	cmp	r3, #108	; 0x6c
 8003146:	d101      	bne.n	800314c <HAL_UART_RxCpltCallback+0xa0>
				LogdisplayISR();
 8003148:	f7ff fa2e 	bl	80025a8 <LogdisplayISR>
		Set_rcv_data(SK_UART2_DEBUG);
 800314c:	2001      	movs	r0, #1
 800314e:	f7ff fe6b 	bl	8002e28 <Set_rcv_data>
		uart_Rcv_init(SK_UART2_DEBUG);
 8003152:	2001      	movs	r0, #1
 8003154:	f000 ff48 	bl	8003fe8 <uart_Rcv_init>
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20001ab8 	.word	0x20001ab8
 8003164:	0800f078 	.word	0x0800f078
 8003168:	20001c48 	.word	0x20001c48

0800316c <SendMsgQueISR>:

//==============================================================================
//　割込み用
//==============================================================================
void SendMsgQueISR(RS485_TASK_EVENT event, uint8_t task)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	460a      	mov	r2, r1
 8003176:	71fb      	strb	r3, [r7, #7]
 8003178:	4613      	mov	r3, r2
 800317a:	71bb      	strb	r3, [r7, #6]
	MESSAGE_QUE_DATA	*msg;


	//msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));

	msg = &RTtaskISR;
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <SendMsgQueISR+0x50>)
 800317e:	60fb      	str	r3, [r7, #12]
	msg->u.cmd_msg.event = event;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	79fa      	ldrb	r2, [r7, #7]
 8003184:	715a      	strb	r2, [r3, #5]
	msg->send_task = task;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	79ba      	ldrb	r2, [r7, #6]
 800318a:	711a      	strb	r2, [r3, #4]
	msg->maroc_ptr = (void *)msg;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	601a      	str	r2, [r3, #0]

	//SKprintf("event=0x%x, task=0x%x,msgpt=%p\r\n", msg->event,msg->send_task, msg->maroc_ptr);
	//   	lsize2 = xPortGetFreeHeapSize();
	// 		SKprintf("lsize1=0x%x,lsize2=%x\r\n",lsize1,lsize2);
	//    	SKprintf("MESSAGE_QUE_DATA=%p\r\n",msg);
	osStatus = osMessageQueuePut (GetMessageQue(SK_TASK_sub2), (void *)msg->maroc_ptr, 0,0);
 8003192:	2002      	movs	r0, #2
 8003194:	f7ff fa9e 	bl	80026d4 <GetMessageQue>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	2300      	movs	r3, #0
 800319e:	2200      	movs	r2, #0
 80031a0:	f005 f9a6 	bl	80084f0 <osMessageQueuePut>
 80031a4:	60b8      	str	r0, [r7, #8]
	if( osStatus == osOK ){
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <SendMsgQueISR+0x46>
		//Set_logInfo("Rs485 RxRecived. Send MsgQue OK");
	}
	else{
		Set_logInfo("Rs485 RxRecived. Send MsgQue ERROR");
 80031ac:	4804      	ldr	r0, [pc, #16]	; (80031c0 <SendMsgQueISR+0x54>)
 80031ae:	f7fe ff7d 	bl	80020ac <Set_logInfo>
	}
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20001c54 	.word	0x20001c54
 80031c0:	0800f098 	.word	0x0800f098

080031c4 <SendMsgQue>:

//==============================================================================
//
//==============================================================================
void SendMsgQue( CMD_MSG	*rt_task )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	osStatus_t 			osStatus;
	MESSAGE_QUE_DATA	*msg;



	msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));
 80031cc:	2010      	movs	r0, #16
 80031ce:	f007 fe5b 	bl	800ae88 <pvPortMalloc>
 80031d2:	60f8      	str	r0, [r7, #12]

	#ifdef	 __HEAP_DBUG
	Set_logInfo2("pvPortMalloc=%x",msg);
#endif	//	 __HEAP_DBUG

	msg->u.cmd_msg.event = rt_task->event;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	715a      	strb	r2, [r3, #5]
	//msg->send_task = task;
	msg->maroc_ptr = (void *)msg;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	601a      	str	r2, [r3, #0]

	msg->u.cmd_msg.address = rt_task->address;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	791a      	ldrb	r2, [r3, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	725a      	strb	r2, [r3, #9]
	msg->u.cmd_msg.command = rt_task->command;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	789a      	ldrb	r2, [r3, #2]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	71da      	strb	r2, [r3, #7]
	msg->u.cmd_msg.command_sub = rt_task->command_sub;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	78da      	ldrb	r2, [r3, #3]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	721a      	strb	r2, [r3, #8]
	msg->u.cmd_msg.sub1 = rt_task->sub1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	795a      	ldrb	r2, [r3, #5]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	729a      	strb	r2, [r3, #10]

	//SKprintf("event=0x%x, task=0x%x,msgpt=%p\r\n", msg->event,msg->send_task, msg->maroc_ptr);
	//   	lsize2 = xPortGetFreeHeapSize();
	// 		SKprintf("lsize1=0x%x,lsize2=%x\r\n",lsize1,lsize2);
	//    	SKprintf("MESSAGE_QUE_DATA=%p\r\n",msg);
	osStatus = osMessageQueuePut (GetMessageQue(SK_TASK_sub2), (void *)msg->maroc_ptr, 0,0);
 8003202:	2002      	movs	r0, #2
 8003204:	f7ff fa66 	bl	80026d4 <GetMessageQue>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	2200      	movs	r2, #0
 8003210:	f005 f96e 	bl	80084f0 <osMessageQueuePut>
 8003214:	60b8      	str	r0, [r7, #8]
	if( osStatus == osOK ){
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <SendMsgQue+0x60>
		//Set_logInfo2("Rs485 RxRecived. Send MsgQue OK");
	}
	else{
		Set_logInfo2("Send MsgQue ERROR=%d",osStatus);
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	4803      	ldr	r0, [pc, #12]	; (800322c <SendMsgQue+0x68>)
 8003220:	f7ff f808 	bl	8002234 <Set_logInfo2>
	}
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	0800f0bc 	.word	0x0800f0bc

08003230 <rs485_com_task>:
//extern osMessageQueueId_t myQueue01Handle;



void rs485_com_task(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
	uint8_t				state;
	uint32_t			timer;
	uint8_t				*temp;
	uint8_t 			*buffer;

	RTtask.state = RT_STATE_INIT;
 8003236:	2300      	movs	r3, #0
 8003238:	727b      	strb	r3, [r7, #9]
	timer = osWaitForever;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	61bb      	str	r3, [r7, #24]
	RTtask.state = RT_STATE_READY;
 8003240:	2301      	movs	r3, #1
 8003242:	727b      	strb	r3, [r7, #9]
	while(1){

		//-------------------------------------------------------------------------
		//	メッセージ待ち
		//-------------------------------------------------------------------------
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), &msgQueBuf, 0, osWaitForever);
 8003244:	2002      	movs	r0, #2
 8003246:	f7ff fa45 	bl	80026d4 <GetMessageQue>
 800324a:	1d39      	adds	r1, r7, #4
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	2200      	movs	r2, #0
 8003252:	f005 f9ad 	bl	80085b0 <osMessageQueueGet>
 8003256:	6178      	str	r0, [r7, #20]
		msg = (MESSAGE_QUE_DATA *)msgQueBuf;
 8003258:	1d3b      	adds	r3, r7, #4
 800325a:	613b      	str	r3, [r7, #16]
		msg = (MESSAGE_QUE_DATA	*)msg->maroc_ptr;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	613b      	str	r3, [r7, #16]


		event = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	77fb      	strb	r3, [r7, #31]
		state = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	77bb      	strb	r3, [r7, #30]
		switch( os_status ){
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d11d      	bne.n	80032ac <rs485_com_task+0x7c>
		case osOK:
			RTtask.event = msg->u.cmd_msg.event;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	795b      	ldrb	r3, [r3, #5]
 8003274:	723b      	strb	r3, [r7, #8]

			switch(RTtask.event){
 8003276:	7a3b      	ldrb	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <rs485_com_task+0x52>
 800327c:	2b03      	cmp	r3, #3
 800327e:	d00d      	beq.n	800329c <rs485_com_task+0x6c>
				break;
			case RT_EVENT_STOP_REQ:
				RTtask.command_sub = 1;
				break;
			default:
				break;
 8003280:	e00f      	b.n	80032a2 <rs485_com_task+0x72>
				RTtask.command = msg->u.cmd_msg.command;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	79db      	ldrb	r3, [r3, #7]
 8003286:	72bb      	strb	r3, [r7, #10]
				RTtask.command_sub = msg->u.cmd_msg.command_sub;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	7a1b      	ldrb	r3, [r3, #8]
 800328c:	72fb      	strb	r3, [r7, #11]
				RTtask.address = msg->u.cmd_msg.address;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	7a5b      	ldrb	r3, [r3, #9]
 8003292:	733b      	strb	r3, [r7, #12]
				RTtask.sub1 = msg->u.cmd_msg.sub1;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	7a9b      	ldrb	r3, [r3, #10]
 8003298:	737b      	strb	r3, [r7, #13]
				break;
 800329a:	e002      	b.n	80032a2 <rs485_com_task+0x72>
				RTtask.command_sub = 1;
 800329c:	2301      	movs	r3, #1
 800329e:	72fb      	strb	r3, [r7, #11]
				break;
 80032a0:	bf00      	nop
			}

			event = RTtask.event;
 80032a2:	7a3b      	ldrb	r3, [r7, #8]
 80032a4:	77fb      	strb	r3, [r7, #31]
			state = RTtask.state;
 80032a6:	7a7b      	ldrb	r3, [r7, #9]
 80032a8:	77bb      	strb	r3, [r7, #30]
			break;
 80032aa:	e004      	b.n	80032b6 <rs485_com_task+0x86>

		case osErrorTimeout:
		default:
			SKprintf("rs485_com_task():os_status=Error(%d)\r\n",os_status);
 80032ac:	6979      	ldr	r1, [r7, #20]
 80032ae:	480d      	ldr	r0, [pc, #52]	; (80032e4 <rs485_com_task+0xb4>)
 80032b0:	f000 ff04 	bl	80040bc <SKprintf>
			break;
 80032b4:	bf00      	nop
		}

		if( msg->maroc_ptr != &RTtaskISR ){
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <rs485_com_task+0xb8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <rs485_com_task+0x9a>
			vPortFree(msg->maroc_ptr);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f007 feab 	bl	800b020 <vPortFree>

		//-------------------------------------------------------------------------
		//	処理関数
		//-------------------------------------------------------------------------
		//Set_logInfo2("RS485 MAIN: event=%d, state=%d\r\n",event,state);
		(*rs485_func_table[event][state ])( &RTtask );
 80032ca:	7ffa      	ldrb	r2, [r7, #31]
 80032cc:	7fbb      	ldrb	r3, [r7, #30]
 80032ce:	4907      	ldr	r1, [pc, #28]	; (80032ec <rs485_com_task+0xbc>)
 80032d0:	0092      	lsls	r2, r2, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032d8:	f107 0208 	add.w	r2, r7, #8
 80032dc:	4610      	mov	r0, r2
 80032de:	4798      	blx	r3
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), &msgQueBuf, 0, osWaitForever);
 80032e0:	e7b0      	b.n	8003244 <rs485_com_task+0x14>
 80032e2:	bf00      	nop
 80032e4:	0800f0d4 	.word	0x0800f0d4
 80032e8:	20001c54 	.word	0x20001c54
 80032ec:	20000000 	.word	0x20000000

080032f0 <RS_nop>:

//==============================================================================
//
//==============================================================================
void RS_nop( CMD_MSG	*rt_task )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	Set_logInfo2("★RS_nop(S=%d,E=%d)",rt_task->state, rt_task->event);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	785b      	ldrb	r3, [r3, #1]
 80032fc:	4619      	mov	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	4803      	ldr	r0, [pc, #12]	; (8003314 <RS_nop+0x24>)
 8003306:	f7fe ff95 	bl	8002234 <Set_logInfo2>
//	SKprintf("RS_nop(%d,%d)\r\n", rt_task->state, rt_task->event);
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	0800f0fc 	.word	0x0800f0fc

08003318 <RScomand_send>:
//==============================================================================
//
//==============================================================================
void RScomand_send( CMD_MSG	*rt_task )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
	uint8_t				timer_id;



//	Set_logInfo2("RScomand_send()");
	Set_logInfo2("★RScomand_send(S=%d,E=%d)",rt_task->state, rt_task->event);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	4619      	mov	r1, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	4831      	ldr	r0, [pc, #196]	; (80033f8 <RScomand_send+0xe0>)
 8003332:	f7fe ff7f 	bl	8002234 <Set_logInfo2>

//	SKprintf("RScomand_send(%d,%d)\r\n", rt_task->state, rt_task->event);

	status = Send_rx485_cmd_message( rt_task );
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fcd2 	bl	8003ce0 <Send_rx485_cmd_message>
 800333c:	4603      	mov	r3, r0
 800333e:	75fb      	strb	r3, [r7, #23]

	if( status == RET_TRUE ){
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d154      	bne.n	80033f0 <RScomand_send+0xd8>
		rt_task->state = RT_STATE_RESPONS_RECIVE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	705a      	strb	r2, [r3, #1]
		uart[SK_UART1_RS485].totalnum = 0;
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <RScomand_send+0xe4>)
 800334e:	2200      	movs	r2, #0
 8003350:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		work_buf_num = 0;
 8003354:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <RScomand_send+0xe8>)
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
		SKprintf("RScomand_send(%d,%d)\r\n", rt_task->state, rt_task->event);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	4619      	mov	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4827      	ldr	r0, [pc, #156]	; (8003404 <RScomand_send+0xec>)
 8003368:	f000 fea8 	bl	80040bc <SKprintf>
		// タイムアウト　イベントをセット
#ifdef	 __HEAP_DBUG
		Set_logInfo2("HeapSize 008 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));
 800336c:	2010      	movs	r0, #16
 800336e:	f007 fd8b 	bl	800ae88 <pvPortMalloc>
 8003372:	6138      	str	r0, [r7, #16]
#ifdef	 __HEAP_DBUG
		Set_logInfo2("pvPortMalloc=%x",msg);
		Set_logInfo2("HeapSize 008 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		msg->maroc_ptr = msg;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	601a      	str	r2, [r3, #0]
		msg->u.cmd_msg.event = RT_EVENT_TIMEOUT;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2204      	movs	r2, #4
 800337e:	715a      	strb	r2, [r3, #5]

		te_form = (TIMER_EVENT_FORM *)pvPortMalloc(sizeof(TIMER_EVENT_FORM));
 8003380:	2018      	movs	r0, #24
 8003382:	f007 fd81 	bl	800ae88 <pvPortMalloc>
 8003386:	60f8      	str	r0, [r7, #12]

#ifdef	 __HEAP_DBUG
		Set_logInfo2("pvPortMalloc=%x",te_form);
#endif	//	 __HEAP_DBUG

		te_form->maroc_ptr = te_form;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	601a      	str	r2, [r3, #0]
		te_form->mail_form = msg;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	611a      	str	r2, [r3, #16]
		te_form->hmsg = GetMessageQue(SK_TASK_sub2);
 8003394:	2002      	movs	r0, #2
 8003396:	f7ff f99d 	bl	80026d4 <GetMessageQue>
 800339a:	4602      	mov	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	609a      	str	r2, [r3, #8]
		te_form->time = 50;		// 約500msec
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2232      	movs	r2, #50	; 0x32
 80033a4:	819a      	strh	r2, [r3, #12]
		timer_id = GetTimerEventID();
 80033a6:	f7ff fc01 	bl	8002bac <GetTimerEventID>
 80033aa:	4603      	mov	r3, r0
 80033ac:	72fb      	strb	r3, [r7, #11]
		if( timer_id == 0xff ){
 80033ae:	7afb      	ldrb	r3, [r7, #11]
 80033b0:	2bff      	cmp	r3, #255	; 0xff
 80033b2:	d102      	bne.n	80033ba <RScomand_send+0xa2>
			SKprintf("TIMER EVENT NOT AVAILABLE\r\n");
 80033b4:	4814      	ldr	r0, [pc, #80]	; (8003408 <RScomand_send+0xf0>)
 80033b6:	f000 fe81 	bl	80040bc <SKprintf>
		}
		te_form->timer_id = rt_task->timer_id = timer_id;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7afa      	ldrb	r2, [r7, #11]
 80033be:	719a      	strb	r2, [r3, #6]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	799a      	ldrb	r2, [r3, #6]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	751a      	strb	r2, [r3, #20]
#ifdef	 __HEAP_DBUG
		SKprintf("tm_form=%p, msg=%p\r\n",te_form, msg);
		Set_logInfo2("HeapSize 008 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		status = osMessageQueuePut (GetMessageQue(SK_TASK_sub1), (void *)te_form->maroc_ptr, 0,0);
 80033c8:	2001      	movs	r0, #1
 80033ca:	f7ff f983 	bl	80026d4 <GetMessageQue>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6819      	ldr	r1, [r3, #0]
 80033d2:	2300      	movs	r3, #0
 80033d4:	2200      	movs	r2, #0
 80033d6:	f005 f88b 	bl	80084f0 <osMessageQueuePut>
 80033da:	4603      	mov	r3, r0
 80033dc:	75fb      	strb	r3, [r7, #23]
		if( status == osOK ){
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <RScomand_send+0xd2>
			//Set_logInfo2("RScomand_send(). Send MsgQue OK");
		}
		else{
			Set_logInfo2("RScomand_send(). Send MsgQue ERROR");
 80033e4:	4809      	ldr	r0, [pc, #36]	; (800340c <RScomand_send+0xf4>)
 80033e6:	f7fe ff25 	bl	8002234 <Set_logInfo2>
		}
		SKprintf("RScomand_send() End \r\n");
 80033ea:	4809      	ldr	r0, [pc, #36]	; (8003410 <RScomand_send+0xf8>)
 80033ec:	f000 fe66 	bl	80040bc <SKprintf>
	}
}
 80033f0:	bf00      	nop
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	0800f114 	.word	0x0800f114
 80033fc:	20001ab8 	.word	0x20001ab8
 8003400:	20001ab4 	.word	0x20001ab4
 8003404:	0800f130 	.word	0x0800f130
 8003408:	0800f148 	.word	0x0800f148
 800340c:	0800f164 	.word	0x0800f164
 8003410:	0800f188 	.word	0x0800f188

08003414 <RSrespons_recive>:
//==============================================================================
//
//==============================================================================
void RSrespons_recive( CMD_MSG	*rt_task )
{
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 800341c:	2301      	movs	r3, #1
 800341e:	75fb      	strb	r3, [r7, #23]
	CMD_MSG				msg;

	Set_logInfo2("★RSrespons_recive(S=%d,E=%d)",rt_task->state, rt_task->event);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	785b      	ldrb	r3, [r3, #1]
 8003424:	4619      	mov	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	4833      	ldr	r0, [pc, #204]	; (80034fc <RSrespons_recive+0xe8>)
 800342e:	f7fe ff01 	bl	8002234 <Set_logInfo2>

//	Set_logInfo2("RSrespons_recive()");
//	SKprintf("RSrespons_recive(%d,%d)\r\n", rt_task->state, rt_task->event);

	while( (uart[SK_UART1_RS485].Set_cnt - uart[SK_UART1_RS485].Get_cnt)   > 0 ){
 8003432:	e054      	b.n	80034de <RSrespons_recive+0xca>
		work_buf[work_buf_num ++] = Get_rcv_data(SK_UART1_RS485);
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <RSrespons_recive+0xec>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	b2d1      	uxtb	r1, r2
 800343c:	4a30      	ldr	r2, [pc, #192]	; (8003500 <RSrespons_recive+0xec>)
 800343e:	7011      	strb	r1, [r2, #0]
 8003440:	461c      	mov	r4, r3
 8003442:	2000      	movs	r0, #0
 8003444:	f7ff fd9e 	bl	8002f84 <Get_rcv_data>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <RSrespons_recive+0xf0>)
 800344e:	551a      	strb	r2, [r3, r4]

		if( Get_end_test_pt(work_buf_num, work_buf) != 0 ){
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <RSrespons_recive+0xec>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b29b      	uxth	r3, r3
 8003456:	492b      	ldr	r1, [pc, #172]	; (8003504 <RSrespons_recive+0xf0>)
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fa7f 	bl	800395c <Get_end_test_pt>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d03c      	beq.n	80034de <RSrespons_recive+0xca>
			SKprintf("Respons Recive\r\n");
 8003464:	4828      	ldr	r0, [pc, #160]	; (8003508 <RSrespons_recive+0xf4>)
 8003466:	f000 fe29 	bl	80040bc <SKprintf>
			ReleaceTimerEvent(rt_task->timer_id);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	799b      	ldrb	r3, [r3, #6]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fbcc 	bl	8002c0c <ReleaceTimerEvent>
			status = Set_Res_Message(work_buf_num, work_buf,Res_mesg);
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <RSrespons_recive+0xec>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	4a24      	ldr	r2, [pc, #144]	; (800350c <RSrespons_recive+0xf8>)
 800347c:	4921      	ldr	r1, [pc, #132]	; (8003504 <RSrespons_recive+0xf0>)
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fac2 	bl	8003a08 <Set_Res_Message>
 8003484:	4603      	mov	r3, r0
 8003486:	75fb      	strb	r3, [r7, #23]
			if( status == RET_TRUE ){
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10d      	bne.n	80034aa <RSrespons_recive+0x96>
				rt_task->state = RT_STATE_RESPONS;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2203      	movs	r2, #3
 8003492:	705a      	strb	r2, [r3, #1]
				rt_task->retry_num = 0;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	71da      	strb	r2, [r3, #7]

				msg.event = RT_EVENT_RESPONS;
 800349a:	2302      	movs	r3, #2
 800349c:	733b      	strb	r3, [r7, #12]

#ifdef	 __HEAP_DBUG
				Set_logInfo2("HeapSize 003 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

				SendMsgQue(&msg);
 800349e:	f107 030c 	add.w	r3, r7, #12
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fe8e 	bl	80031c4 <SendMsgQue>
Set_logInfo2("HeapSize 004 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG


			}
			break;
 80034a8:	e024      	b.n	80034f4 <RSrespons_recive+0xe0>
				Set_logInfo2("RETRY:Recive data error");
 80034aa:	4819      	ldr	r0, [pc, #100]	; (8003510 <RSrespons_recive+0xfc>)
 80034ac:	f7fe fec2 	bl	8002234 <Set_logInfo2>
				rt_task->state  = RT_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	705a      	strb	r2, [r3, #1]
				msg.event = RT_EVENT_START_REQ;
 80034b6:	2300      	movs	r3, #0
 80034b8:	733b      	strb	r3, [r7, #12]
				msg.address = rt_task->address ;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	791b      	ldrb	r3, [r3, #4]
 80034be:	743b      	strb	r3, [r7, #16]
				msg.command = rt_task->command;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	789b      	ldrb	r3, [r3, #2]
 80034c4:	73bb      	strb	r3, [r7, #14]
				msg.command_sub = rt_task->command_sub;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	78db      	ldrb	r3, [r3, #3]
 80034ca:	73fb      	strb	r3, [r7, #15]
				msg.sub1 = rt_task->sub1;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	795b      	ldrb	r3, [r3, #5]
 80034d0:	747b      	strb	r3, [r7, #17]
				SendMsgQue(&msg);
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fe74 	bl	80031c4 <SendMsgQue>
			break;
 80034dc:	e00a      	b.n	80034f4 <RSrespons_recive+0xe0>
	while( (uart[SK_UART1_RS485].Set_cnt - uart[SK_UART1_RS485].Get_cnt)   > 0 ){
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <RSrespons_recive+0x100>)
 80034e0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <RSrespons_recive+0x100>)
 80034e8:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dca0      	bgt.n	8003434 <RSrespons_recive+0x20>
		}
	}
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	0800f1a0 	.word	0x0800f1a0
 8003500:	20001ab4 	.word	0x20001ab4
 8003504:	20001a34 	.word	0x20001a34
 8003508:	0800f1c0 	.word	0x0800f1c0
 800350c:	20001bfc 	.word	0x20001bfc
 8003510:	0800f1d4 	.word	0x0800f1d4
 8003514:	20001ab8 	.word	0x20001ab8

08003518 <RSTimeout>:

//==============================================================================
//
//==============================================================================
void RSTimeout( CMD_MSG	*rt_task )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	; 0x28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	CMD_MSG				msg;
	char	 	c[17];
	uint8_t		i,j,k;

	Set_logInfo2("★RSTimeout(S=%d,E=%d)",rt_task->state, rt_task->event);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	4619      	mov	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	4884      	ldr	r0, [pc, #528]	; (8003740 <RSTimeout+0x228>)
 800352e:	f7fe fe81 	bl	8002234 <Set_logInfo2>

	rt_task->state = RT_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	705a      	strb	r2, [r3, #1]
	Set_logInfo2("TIME OUT END");
 8003538:	4882      	ldr	r0, [pc, #520]	; (8003744 <RSTimeout+0x22c>)
 800353a:	f7fe fe7b 	bl	8002234 <Set_logInfo2>



	SKprintf("Get_cnt  =%d\r\n",uart[SK_UART1_RS485].Get_cnt);
 800353e:	4b82      	ldr	r3, [pc, #520]	; (8003748 <RSTimeout+0x230>)
 8003540:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8003544:	4619      	mov	r1, r3
 8003546:	4881      	ldr	r0, [pc, #516]	; (800374c <RSTimeout+0x234>)
 8003548:	f000 fdb8 	bl	80040bc <SKprintf>
	SKprintf("Set_cnt  =%d\r\n",uart[SK_UART1_RS485].Set_cnt);
 800354c:	4b7e      	ldr	r3, [pc, #504]	; (8003748 <RSTimeout+0x230>)
 800354e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8003552:	4619      	mov	r1, r3
 8003554:	487e      	ldr	r0, [pc, #504]	; (8003750 <RSTimeout+0x238>)
 8003556:	f000 fdb1 	bl	80040bc <SKprintf>
	SKprintf("totalnum =%d\r\n",uart[SK_UART1_RS485].totalnum);
 800355a:	4b7b      	ldr	r3, [pc, #492]	; (8003748 <RSTimeout+0x230>)
 800355c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003560:	4619      	mov	r1, r3
 8003562:	487c      	ldr	r0, [pc, #496]	; (8003754 <RSTimeout+0x23c>)
 8003564:	f000 fdaa 	bl	80040bc <SKprintf>
	SKprintf("rcvnum   =%d\r\n",uart[SK_UART1_RS485].rcvnum);
 8003568:	4b77      	ldr	r3, [pc, #476]	; (8003748 <RSTimeout+0x230>)
 800356a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800356e:	4619      	mov	r1, r3
 8003570:	4879      	ldr	r0, [pc, #484]	; (8003758 <RSTimeout+0x240>)
 8003572:	f000 fda3 	bl	80040bc <SKprintf>
	SKprintf("rcv_wpt  =%d\r\n",uart[SK_UART1_RS485].rcv_wpt);
 8003576:	4b74      	ldr	r3, [pc, #464]	; (8003748 <RSTimeout+0x230>)
 8003578:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800357c:	4619      	mov	r1, r3
 800357e:	4877      	ldr	r0, [pc, #476]	; (800375c <RSTimeout+0x244>)
 8003580:	f000 fd9c 	bl	80040bc <SKprintf>
	SKprintf("rcv_rpt  =%d\r\n",uart[SK_UART1_RS485].rcv_rpt);
 8003584:	4b70      	ldr	r3, [pc, #448]	; (8003748 <RSTimeout+0x230>)
 8003586:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800358a:	4619      	mov	r1, r3
 800358c:	4874      	ldr	r0, [pc, #464]	; (8003760 <RSTimeout+0x248>)
 800358e:	f000 fd95 	bl	80040bc <SKprintf>

	c[16] = '\0';
 8003592:	2300      	movs	r3, #0
 8003594:	763b      	strb	r3, [r7, #24]
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 8003596:	2300      	movs	r3, #0
 8003598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800359c:	e041      	b.n	8003622 <RSTimeout+0x10a>

		SKprintf(" [%03d] ", i*16 );
 800359e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	486f      	ldr	r0, [pc, #444]	; (8003764 <RSTimeout+0x24c>)
 80035a8:	f000 fd88 	bl	80040bc <SKprintf>

		for(j=0; j< 16; j++ ){
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80035b2:	e027      	b.n	8003604 <RSTimeout+0xec>
			k = uart[SK_UART1_RS485].rcvbuf[i*16+j];
 80035b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035b8:	011a      	lsls	r2, r3, #4
 80035ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035be:	4413      	add	r3, r2
 80035c0:	4a61      	ldr	r2, [pc, #388]	; (8003748 <RSTimeout+0x230>)
 80035c2:	4413      	add	r3, r2
 80035c4:	789b      	ldrb	r3, [r3, #2]
 80035c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			SKprintf(" %02x ", k );
 80035ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035ce:	4619      	mov	r1, r3
 80035d0:	4865      	ldr	r0, [pc, #404]	; (8003768 <RSTimeout+0x250>)
 80035d2:	f000 fd73 	bl	80040bc <SKprintf>
			c[j] =  (uint8_t)((k<0x20||k>=0x7f)? '.': k);
 80035d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035da:	2b1f      	cmp	r3, #31
 80035dc:	d906      	bls.n	80035ec <RSTimeout+0xd4>
 80035de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035e2:	2b7e      	cmp	r3, #126	; 0x7e
 80035e4:	d802      	bhi.n	80035ec <RSTimeout+0xd4>
 80035e6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80035ea:	e000      	b.n	80035ee <RSTimeout+0xd6>
 80035ec:	222e      	movs	r2, #46	; 0x2e
 80035ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035f2:	3328      	adds	r3, #40	; 0x28
 80035f4:	443b      	add	r3, r7
 80035f6:	f803 2c20 	strb.w	r2, [r3, #-32]
		for(j=0; j< 16; j++ ){
 80035fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035fe:	3301      	adds	r3, #1
 8003600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003608:	2b0f      	cmp	r3, #15
 800360a:	d9d3      	bls.n	80035b4 <RSTimeout+0x9c>
		}
		SKprintf("  %s\r\n",c );
 800360c:	f107 0308 	add.w	r3, r7, #8
 8003610:	4619      	mov	r1, r3
 8003612:	4856      	ldr	r0, [pc, #344]	; (800376c <RSTimeout+0x254>)
 8003614:	f000 fd52 	bl	80040bc <SKprintf>
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 8003618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800361c:	3301      	adds	r3, #1
 800361e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003626:	2b07      	cmp	r3, #7
 8003628:	d9b9      	bls.n	800359e <RSTimeout+0x86>
	}

	SKprintf("\r\nwork_buf_num =%d\r\n",work_buf_num);
 800362a:	4b51      	ldr	r3, [pc, #324]	; (8003770 <RSTimeout+0x258>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	4619      	mov	r1, r3
 8003630:	4850      	ldr	r0, [pc, #320]	; (8003774 <RSTimeout+0x25c>)
 8003632:	f000 fd43 	bl	80040bc <SKprintf>

	c[16] = '\0';
 8003636:	2300      	movs	r3, #0
 8003638:	763b      	strb	r3, [r7, #24]
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 800363a:	2300      	movs	r3, #0
 800363c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003640:	e040      	b.n	80036c4 <RSTimeout+0x1ac>

		SKprintf(" [%03d] ", i*16 );
 8003642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4619      	mov	r1, r3
 800364a:	4846      	ldr	r0, [pc, #280]	; (8003764 <RSTimeout+0x24c>)
 800364c:	f000 fd36 	bl	80040bc <SKprintf>

		for(j=0; j< 16; j++ ){
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003656:	e026      	b.n	80036a6 <RSTimeout+0x18e>
			k = work_buf[i*16+j];
 8003658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800365c:	011a      	lsls	r2, r3, #4
 800365e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003662:	4413      	add	r3, r2
 8003664:	4a44      	ldr	r2, [pc, #272]	; (8003778 <RSTimeout+0x260>)
 8003666:	5cd3      	ldrb	r3, [r2, r3]
 8003668:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			SKprintf(" %02x ", k );
 800366c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003670:	4619      	mov	r1, r3
 8003672:	483d      	ldr	r0, [pc, #244]	; (8003768 <RSTimeout+0x250>)
 8003674:	f000 fd22 	bl	80040bc <SKprintf>
			c[j] =  (uint8_t)((k<0x20||k>=0x7f)? '.': k);
 8003678:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800367c:	2b1f      	cmp	r3, #31
 800367e:	d906      	bls.n	800368e <RSTimeout+0x176>
 8003680:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003684:	2b7e      	cmp	r3, #126	; 0x7e
 8003686:	d802      	bhi.n	800368e <RSTimeout+0x176>
 8003688:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800368c:	e000      	b.n	8003690 <RSTimeout+0x178>
 800368e:	222e      	movs	r2, #46	; 0x2e
 8003690:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003694:	3328      	adds	r3, #40	; 0x28
 8003696:	443b      	add	r3, r7
 8003698:	f803 2c20 	strb.w	r2, [r3, #-32]
		for(j=0; j< 16; j++ ){
 800369c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036a0:	3301      	adds	r3, #1
 80036a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80036a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	d9d4      	bls.n	8003658 <RSTimeout+0x140>
		}
		SKprintf("  %s\r\n",c );
 80036ae:	f107 0308 	add.w	r3, r7, #8
 80036b2:	4619      	mov	r1, r3
 80036b4:	482d      	ldr	r0, [pc, #180]	; (800376c <RSTimeout+0x254>)
 80036b6:	f000 fd01 	bl	80040bc <SKprintf>
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 80036ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036be:	3301      	adds	r3, #1
 80036c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c8:	2b07      	cmp	r3, #7
 80036ca:	d9ba      	bls.n	8003642 <RSTimeout+0x12a>
	}

	if(rt_task->retry_num < 2){
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	79db      	ldrb	r3, [r3, #7]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d815      	bhi.n	8003700 <RSTimeout+0x1e8>
		// 同じデバイスに再送する
		msg.event = RT_EVENT_START_REQ;
 80036d4:	2300      	movs	r3, #0
 80036d6:	773b      	strb	r3, [r7, #28]
		msg.address = rt_task->address ;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	791b      	ldrb	r3, [r3, #4]
 80036dc:	f887 3020 	strb.w	r3, [r7, #32]
		msg.command = rt_task->command;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	789b      	ldrb	r3, [r3, #2]
 80036e4:	77bb      	strb	r3, [r7, #30]
		msg.command_sub = rt_task->command_sub;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	78db      	ldrb	r3, [r3, #3]
 80036ea:	77fb      	strb	r3, [r7, #31]
		msg.sub1 = rt_task->sub1;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	795b      	ldrb	r3, [r3, #5]
 80036f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

#ifdef	 __HEAP_DBUG
		Set_logInfo2("HeapSize 005 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		SendMsgQue(&msg);
 80036f4:	f107 031c 	add.w	r3, r7, #28
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fd63 	bl	80031c4 <SendMsgQue>

#ifdef	 __HEAP_DBUG
		Set_logInfo2("HeapSize 006 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG
	}
}
 80036fe:	e01b      	b.n	8003738 <RSTimeout+0x220>
		if( rt_task->address == RS485_AD_SLEVE01){
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	791b      	ldrb	r3, [r3, #4]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d103      	bne.n	8003710 <RSTimeout+0x1f8>
			msg.address = RS485_AD_SLEVE02;
 8003708:	2302      	movs	r3, #2
 800370a:	f887 3020 	strb.w	r3, [r7, #32]
 800370e:	e002      	b.n	8003716 <RSTimeout+0x1fe>
			msg.address = RS485_AD_SLEVE01;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3020 	strb.w	r3, [r7, #32]
		msg.event = RT_EVENT_START_REQ;
 8003716:	2300      	movs	r3, #0
 8003718:	773b      	strb	r3, [r7, #28]
		msg.command = rt_task->command;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	789b      	ldrb	r3, [r3, #2]
 800371e:	77bb      	strb	r3, [r7, #30]
		msg.command_sub = rt_task->command_sub;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	78db      	ldrb	r3, [r3, #3]
 8003724:	77fb      	strb	r3, [r7, #31]
		msg.sub1 = rt_task->sub1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	795b      	ldrb	r3, [r3, #5]
 800372a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		SendMsgQue(&msg);
 800372e:	f107 031c 	add.w	r3, r7, #28
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fd46 	bl	80031c4 <SendMsgQue>
}
 8003738:	bf00      	nop
 800373a:	3728      	adds	r7, #40	; 0x28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	0800f1ec 	.word	0x0800f1ec
 8003744:	0800f204 	.word	0x0800f204
 8003748:	20001ab8 	.word	0x20001ab8
 800374c:	0800f214 	.word	0x0800f214
 8003750:	0800f224 	.word	0x0800f224
 8003754:	0800f234 	.word	0x0800f234
 8003758:	0800f244 	.word	0x0800f244
 800375c:	0800f254 	.word	0x0800f254
 8003760:	0800f264 	.word	0x0800f264
 8003764:	0800f274 	.word	0x0800f274
 8003768:	0800f280 	.word	0x0800f280
 800376c:	0800f288 	.word	0x0800f288
 8003770:	20001ab4 	.word	0x20001ab4
 8003774:	0800f290 	.word	0x0800f290
 8003778:	20001a34 	.word	0x20001a34

0800377c <RSstop_req>:
//==============================================================================
//
//==============================================================================
void RSstop_req( CMD_MSG	*rt_task )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	Set_logInfo2("★RSstop_req(S=%d,E=%d)",rt_task->state, rt_task->event);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	785b      	ldrb	r3, [r3, #1]
 8003788:	4619      	mov	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	4803      	ldr	r0, [pc, #12]	; (80037a0 <RSstop_req+0x24>)
 8003792:	f7fe fd4f 	bl	8002234 <Set_logInfo2>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	0800f2a8 	.word	0x0800f2a8

080037a4 <RSrespons_proc>:

//==============================================================================
//
//==============================================================================
void RSrespons_proc( CMD_MSG	*rt_task )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 80037ac:	2301      	movs	r3, #1
 80037ae:	77fb      	strb	r3, [r7, #31]
	uint8_t		*pt;
	uint8_t 	*msgQueBuf;


//	Set_logInfo2("RSrespons_proc(()");
	Set_logInfo2("★RSrespons_proc(S=%d,E=%d)",rt_task->state, rt_task->event);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	785b      	ldrb	r3, [r3, #1]
 80037b4:	4619      	mov	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	485a      	ldr	r0, [pc, #360]	; (8003928 <RSrespons_proc+0x184>)
 80037be:	f7fe fd39 	bl	8002234 <Set_logInfo2>
//	SKprintf("RSrespons_proc(%d,%d)\r\n", );

	status = RET_TRUE;
 80037c2:	2301      	movs	r3, #1
 80037c4:	77fb      	strb	r3, [r7, #31]
	switch( Res_mesg[COM_COMMAND] ){
 80037c6:	4b59      	ldr	r3, [pc, #356]	; (800392c <RSrespons_proc+0x188>)
 80037c8:	7b5b      	ldrb	r3, [r3, #13]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d86a      	bhi.n	80038a6 <RSrespons_proc+0x102>
 80037d0:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <RSrespons_proc+0x34>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037f1 	.word	0x080037f1
 80037e0:	0800383d 	.word	0x0800383d
 80037e4:	08003845 	.word	0x08003845
	case RS485_CMD_STATUS:
		SKprintf("RS485_CMD_STATUS\r\n");
 80037e8:	4851      	ldr	r0, [pc, #324]	; (8003930 <RSrespons_proc+0x18c>)
 80037ea:	f000 fc67 	bl	80040bc <SKprintf>

		break;
 80037ee:	e05d      	b.n	80038ac <RSrespons_proc+0x108>
	case RS485_CMD_VERSION:
		SKprintf("RS485_CMD_VERSION\r\n");
 80037f0:	4850      	ldr	r0, [pc, #320]	; (8003934 <RSrespons_proc+0x190>)
 80037f2:	f000 fc63 	bl	80040bc <SKprintf>

		dt16 = Res_mesg[COM_SLV_VERSION_H];
 80037f6:	4b4d      	ldr	r3, [pc, #308]	; (800392c <RSrespons_proc+0x188>)
 80037f8:	7c1b      	ldrb	r3, [r3, #16]
 80037fa:	82fb      	strh	r3, [r7, #22]
		dt16 <<= 8;
 80037fc:	8afb      	ldrh	r3, [r7, #22]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	82fb      	strh	r3, [r7, #22]
		dt16 |= Res_mesg[COM_SLV_VERSION_L];
 8003802:	4b4a      	ldr	r3, [pc, #296]	; (800392c <RSrespons_proc+0x188>)
 8003804:	7bdb      	ldrb	r3, [r3, #15]
 8003806:	b29a      	uxth	r2, r3
 8003808:	8afb      	ldrh	r3, [r7, #22]
 800380a:	4313      	orrs	r3, r2
 800380c:	82fb      	strh	r3, [r7, #22]

		SKprintf("  SLV VER = %04x, ",dt16);
 800380e:	8afb      	ldrh	r3, [r7, #22]
 8003810:	4619      	mov	r1, r3
 8003812:	4849      	ldr	r0, [pc, #292]	; (8003938 <RSrespons_proc+0x194>)
 8003814:	f000 fc52 	bl	80040bc <SKprintf>

		dt16 = Res_mesg[COM_SNS_VERSION_H];
 8003818:	4b44      	ldr	r3, [pc, #272]	; (800392c <RSrespons_proc+0x188>)
 800381a:	7c9b      	ldrb	r3, [r3, #18]
 800381c:	82fb      	strh	r3, [r7, #22]
		dt16 <<= 8;
 800381e:	8afb      	ldrh	r3, [r7, #22]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	82fb      	strh	r3, [r7, #22]
		dt16 |= Res_mesg[COM_SNS_VERSION_L];
 8003824:	4b41      	ldr	r3, [pc, #260]	; (800392c <RSrespons_proc+0x188>)
 8003826:	7c5b      	ldrb	r3, [r3, #17]
 8003828:	b29a      	uxth	r2, r3
 800382a:	8afb      	ldrh	r3, [r7, #22]
 800382c:	4313      	orrs	r3, r2
 800382e:	82fb      	strh	r3, [r7, #22]
		SKprintf("  SNS VER = %04x \r\n",dt16);
 8003830:	8afb      	ldrh	r3, [r7, #22]
 8003832:	4619      	mov	r1, r3
 8003834:	4841      	ldr	r0, [pc, #260]	; (800393c <RSrespons_proc+0x198>)
 8003836:	f000 fc41 	bl	80040bc <SKprintf>

		break;
 800383a:	e037      	b.n	80038ac <RSrespons_proc+0x108>
	case RS485_CMD_MESUR:
		SKprintf("RS485_CMD_MESUR\r\n");
 800383c:	4840      	ldr	r0, [pc, #256]	; (8003940 <RSrespons_proc+0x19c>)
 800383e:	f000 fc3d 	bl	80040bc <SKprintf>

		break;
 8003842:	e033      	b.n	80038ac <RSrespons_proc+0x108>
	case RS485_CMD_MESUR_DATA:
		SKprintf("RS485_CMD_MESUR_DATA\r\n");
 8003844:	483f      	ldr	r0, [pc, #252]	; (8003944 <RSrespons_proc+0x1a0>)
 8003846:	f000 fc39 	bl	80040bc <SKprintf>

		pt = (uint8_t *)&dtf;
 800384a:	f107 0308 	add.w	r3, r7, #8
 800384e:	61bb      	str	r3, [r7, #24]
		pt[3] = Res_mesg[COM_MESUR_DATA_H];
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	3303      	adds	r3, #3
 8003854:	4a35      	ldr	r2, [pc, #212]	; (800392c <RSrespons_proc+0x188>)
 8003856:	7c92      	ldrb	r2, [r2, #18]
 8003858:	701a      	strb	r2, [r3, #0]
		pt[2] = Res_mesg[COM_MESUR_DATA_MH];
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	3302      	adds	r3, #2
 800385e:	4a33      	ldr	r2, [pc, #204]	; (800392c <RSrespons_proc+0x188>)
 8003860:	7c52      	ldrb	r2, [r2, #17]
 8003862:	701a      	strb	r2, [r3, #0]
		pt[1] = Res_mesg[COM_MESUR_DATA_ML];
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	3301      	adds	r3, #1
 8003868:	4a30      	ldr	r2, [pc, #192]	; (800392c <RSrespons_proc+0x188>)
 800386a:	7c12      	ldrb	r2, [r2, #16]
 800386c:	701a      	strb	r2, [r3, #0]
		pt[0] = Res_mesg[COM_MESUR_DATA_L];
 800386e:	4b2f      	ldr	r3, [pc, #188]	; (800392c <RSrespons_proc+0x188>)
 8003870:	7bda      	ldrb	r2, [r3, #15]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	701a      	strb	r2, [r3, #0]


		if( rt_task->address == RS485_AD_SLEVE01){
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	791b      	ldrb	r3, [r3, #4]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d109      	bne.n	8003892 <RSrespons_proc+0xee>
			Set_logInfo2("SLAVE01 DATA = %fmm",dtf);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fc fe79 	bl	8000578 <__aeabi_f2d>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	482f      	ldr	r0, [pc, #188]	; (8003948 <RSrespons_proc+0x1a4>)
 800388c:	f7fe fcd2 	bl	8002234 <Set_logInfo2>
			Set_logInfo2("SLAVE02 DATA = %fmm",dtf);
		}



		break;
 8003890:	e00c      	b.n	80038ac <RSrespons_proc+0x108>
			Set_logInfo2("SLAVE02 DATA = %fmm",dtf);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fe6f 	bl	8000578 <__aeabi_f2d>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	482b      	ldr	r0, [pc, #172]	; (800394c <RSrespons_proc+0x1a8>)
 80038a0:	f7fe fcc8 	bl	8002234 <Set_logInfo2>
		break;
 80038a4:	e002      	b.n	80038ac <RSrespons_proc+0x108>
	default:
		status = RET_FALSE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	77fb      	strb	r3, [r7, #31]
		//SKprintf("ERROR Recive Command None \r\n");
		break;
 80038aa:	bf00      	nop
	}

	if( status == RET_TRUE ){
 80038ac:	7ffb      	ldrb	r3, [r7, #31]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d135      	bne.n	800391e <RSrespons_proc+0x17a>
		rt_task->state = RT_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	705a      	strb	r2, [r3, #1]
		cmd_ptr ++;
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <RSrespons_proc+0x1ac>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	4b23      	ldr	r3, [pc, #140]	; (8003950 <RSrespons_proc+0x1ac>)
 80038c2:	701a      	strb	r2, [r3, #0]

		Set_logInfo2("command_sub=%d",rt_task->command_sub);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	78db      	ldrb	r3, [r3, #3]
 80038c8:	4619      	mov	r1, r3
 80038ca:	4822      	ldr	r0, [pc, #136]	; (8003954 <RSrespons_proc+0x1b0>)
 80038cc:	f7fe fcb2 	bl	8002234 <Set_logInfo2>
		rt_task->command_sub --;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	78db      	ldrb	r3, [r3, #3]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	70da      	strb	r2, [r3, #3]

		if(rt_task->command_sub > 0 ){
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	78db      	ldrb	r3, [r3, #3]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d019      	beq.n	8003918 <RSrespons_proc+0x174>
			msg.event = RT_EVENT_START_REQ;
 80038e4:	2300      	movs	r3, #0
 80038e6:	733b      	strb	r3, [r7, #12]

			if( rt_task->address == RS485_AD_SLEVE01){
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	791b      	ldrb	r3, [r3, #4]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d102      	bne.n	80038f6 <RSrespons_proc+0x152>
				msg.address = RS485_AD_SLEVE02;
 80038f0:	2302      	movs	r3, #2
 80038f2:	743b      	strb	r3, [r7, #16]
 80038f4:	e001      	b.n	80038fa <RSrespons_proc+0x156>
			}
			else{
				msg.address = RS485_AD_SLEVE01;
 80038f6:	2301      	movs	r3, #1
 80038f8:	743b      	strb	r3, [r7, #16]
			}

			msg.command = rt_task->command;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	789b      	ldrb	r3, [r3, #2]
 80038fe:	73bb      	strb	r3, [r7, #14]
			msg.command_sub = rt_task->command_sub;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	78db      	ldrb	r3, [r3, #3]
 8003904:	73fb      	strb	r3, [r7, #15]
			msg.sub1 = rt_task->sub1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	795b      	ldrb	r3, [r3, #5]
 800390a:	747b      	strb	r3, [r7, #17]

			SendMsgQue(&msg);
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fc57 	bl	80031c4 <SendMsgQue>
			Set_logInfo2("END RSrespons_OK");
		}
	}


}
 8003916:	e002      	b.n	800391e <RSrespons_proc+0x17a>
			Set_logInfo2("END RSrespons_OK");
 8003918:	480f      	ldr	r0, [pc, #60]	; (8003958 <RSrespons_proc+0x1b4>)
 800391a:	f7fe fc8b 	bl	8002234 <Set_logInfo2>
}
 800391e:	bf00      	nop
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	0800f2c4 	.word	0x0800f2c4
 800392c:	20001bfc 	.word	0x20001bfc
 8003930:	0800f2e4 	.word	0x0800f2e4
 8003934:	0800f2f8 	.word	0x0800f2f8
 8003938:	0800f30c 	.word	0x0800f30c
 800393c:	0800f320 	.word	0x0800f320
 8003940:	0800f334 	.word	0x0800f334
 8003944:	0800f348 	.word	0x0800f348
 8003948:	0800f360 	.word	0x0800f360
 800394c:	0800f374 	.word	0x0800f374
 8003950:	20001c42 	.word	0x20001c42
 8003954:	0800f388 	.word	0x0800f388
 8003958:	0800f398 	.word	0x0800f398

0800395c <Get_end_test_pt>:

//==============================================================================
//
//==============================================================================
uint16_t  Get_end_test_pt(uint16_t num,uint8_t *buf )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	80fb      	strh	r3, [r7, #6]
	uint16_t	i;
	uint16_t	rtn;

	rtn = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	81bb      	strh	r3, [r7, #12]

	for( i=0; i<num; i++){
 800396c:	2300      	movs	r3, #0
 800396e:	81fb      	strh	r3, [r7, #14]
 8003970:	e03f      	b.n	80039f2 <Get_end_test_pt+0x96>
		if( (i+TEXT_LENGTH) > num ){
 8003972:	89fb      	ldrh	r3, [r7, #14]
 8003974:	1d5a      	adds	r2, r3, #5
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	429a      	cmp	r2, r3
 800397a:	db02      	blt.n	8003982 <Get_end_test_pt+0x26>
			rtn = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	81bb      	strh	r3, [r7, #12]
			//SKprintf("None\r\n");
			break;
 8003980:	e03b      	b.n	80039fa <Get_end_test_pt+0x9e>
		}
		else if( buf[i] == message_end_text[0]
 8003982:	89fb      	ldrh	r3, [r7, #14]
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	4413      	add	r3, r2
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	224d      	movs	r2, #77	; 0x4d
 800398c:	4293      	cmp	r3, r2
 800398e:	d12d      	bne.n	80039ec <Get_end_test_pt+0x90>
				&& buf[i+1] == message_end_text[1]
 8003990:	89fb      	ldrh	r3, [r7, #14]
 8003992:	3301      	adds	r3, #1
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	4413      	add	r3, r2
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2253      	movs	r2, #83	; 0x53
 800399c:	4293      	cmp	r3, r2
 800399e:	d125      	bne.n	80039ec <Get_end_test_pt+0x90>
				&& buf[i+2] == message_end_text[2]
 80039a0:	89fb      	ldrh	r3, [r7, #14]
 80039a2:	3302      	adds	r3, #2
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	4413      	add	r3, r2
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2247      	movs	r2, #71	; 0x47
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d11d      	bne.n	80039ec <Get_end_test_pt+0x90>
				&& buf[i+3] == message_end_text[3]
 80039b0:	89fb      	ldrh	r3, [r7, #14]
 80039b2:	3303      	adds	r3, #3
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	4413      	add	r3, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2245      	movs	r2, #69	; 0x45
 80039bc:	4293      	cmp	r3, r2
 80039be:	d115      	bne.n	80039ec <Get_end_test_pt+0x90>
				&& buf[i+4] == message_end_text[4]
 80039c0:	89fb      	ldrh	r3, [r7, #14]
 80039c2:	3304      	adds	r3, #4
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	224e      	movs	r2, #78	; 0x4e
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10d      	bne.n	80039ec <Get_end_test_pt+0x90>
				&& buf[i+5] == message_end_text[5] ){
 80039d0:	89fb      	ldrh	r3, [r7, #14]
 80039d2:	3305      	adds	r3, #5
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2244      	movs	r2, #68	; 0x44
 80039dc:	4293      	cmp	r3, r2
 80039de:	d105      	bne.n	80039ec <Get_end_test_pt+0x90>

			SKprintf("FIX\r\n");
 80039e0:	4808      	ldr	r0, [pc, #32]	; (8003a04 <Get_end_test_pt+0xa8>)
 80039e2:	f000 fb6b 	bl	80040bc <SKprintf>
			rtn = i;
 80039e6:	89fb      	ldrh	r3, [r7, #14]
 80039e8:	81bb      	strh	r3, [r7, #12]
			break;
 80039ea:	e006      	b.n	80039fa <Get_end_test_pt+0x9e>
	for( i=0; i<num; i++){
 80039ec:	89fb      	ldrh	r3, [r7, #14]
 80039ee:	3301      	adds	r3, #1
 80039f0:	81fb      	strh	r3, [r7, #14]
 80039f2:	89fa      	ldrh	r2, [r7, #14]
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d3bb      	bcc.n	8003972 <Get_end_test_pt+0x16>
		}
	}

	return rtn;
 80039fa:	89bb      	ldrh	r3, [r7, #12]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	0800f3ac 	.word	0x0800f3ac

08003a08 <Set_Res_Message>:
//==============================================================================
//
//==============================================================================
RETURN_STATUS  Set_Res_Message(uint16_t num, uint8_t *src, uint8_t *dist)
{
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b089      	sub	sp, #36	; 0x24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	81fb      	strh	r3, [r7, #14]
	RETURN_STATUS	status = RET_TRUE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	77fb      	strb	r3, [r7, #31]
	uint8_t		c[2];

	//-------------------------------------------------------
	// Command buffer Clesr
	//-------------------------------------------------------
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	83bb      	strh	r3, [r7, #28]
 8003a1e:	e006      	b.n	8003a2e <Set_Res_Message+0x26>
		Res_mesg[i] = 0;
 8003a20:	8bbb      	ldrh	r3, [r7, #28]
 8003a22:	4a93      	ldr	r2, [pc, #588]	; (8003c70 <Set_Res_Message+0x268>)
 8003a24:	2100      	movs	r1, #0
 8003a26:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003a28:	8bbb      	ldrh	r3, [r7, #28]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	83bb      	strh	r3, [r7, #28]
 8003a2e:	8bbb      	ldrh	r3, [r7, #28]
 8003a30:	2b21      	cmp	r3, #33	; 0x21
 8003a32:	d9f5      	bls.n	8003a20 <Set_Res_Message+0x18>


	//-------------------------------------------------------------
	// スタートテキスト検索
	//-------------------------------------------------------------
	start = 0xffff;
 8003a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a38:	833b      	strh	r3, [r7, #24]
	for( i=0; i<num; i++){
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	83bb      	strh	r3, [r7, #28]
 8003a3e:	e034      	b.n	8003aaa <Set_Res_Message+0xa2>
		if( src[i] == res_start_text[0]
 8003a40:	8bbb      	ldrh	r3, [r7, #28]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4413      	add	r3, r2
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2252      	movs	r2, #82	; 0x52
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d12a      	bne.n	8003aa4 <Set_Res_Message+0x9c>
				&& src[i+1] == res_start_text[1]
 8003a4e:	8bbb      	ldrh	r3, [r7, #28]
 8003a50:	3301      	adds	r3, #1
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	4413      	add	r3, r2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2245      	movs	r2, #69	; 0x45
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d122      	bne.n	8003aa4 <Set_Res_Message+0x9c>
				&& src[i+2] == res_start_text[2]
 8003a5e:	8bbb      	ldrh	r3, [r7, #28]
 8003a60:	3302      	adds	r3, #2
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4413      	add	r3, r2
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2253      	movs	r2, #83	; 0x53
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d11a      	bne.n	8003aa4 <Set_Res_Message+0x9c>
				&& src[i+3] == res_start_text[3]
 8003a6e:	8bbb      	ldrh	r3, [r7, #28]
 8003a70:	3303      	adds	r3, #3
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	4413      	add	r3, r2
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	222d      	movs	r2, #45	; 0x2d
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d112      	bne.n	8003aa4 <Set_Res_Message+0x9c>
				&& src[i+4] == res_start_text[4]
 8003a7e:	8bbb      	ldrh	r3, [r7, #28]
 8003a80:	3304      	adds	r3, #4
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	4413      	add	r3, r2
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2253      	movs	r2, #83	; 0x53
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10a      	bne.n	8003aa4 <Set_Res_Message+0x9c>
				&& src[i+5] == res_start_text[5] ){
 8003a8e:	8bbb      	ldrh	r3, [r7, #28]
 8003a90:	3305      	adds	r3, #5
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	4413      	add	r3, r2
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2254      	movs	r2, #84	; 0x54
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d102      	bne.n	8003aa4 <Set_Res_Message+0x9c>

			start = i;
 8003a9e:	8bbb      	ldrh	r3, [r7, #28]
 8003aa0:	833b      	strh	r3, [r7, #24]
			break;
 8003aa2:	e006      	b.n	8003ab2 <Set_Res_Message+0xaa>
	for( i=0; i<num; i++){
 8003aa4:	8bbb      	ldrh	r3, [r7, #28]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	83bb      	strh	r3, [r7, #28]
 8003aaa:	8bba      	ldrh	r2, [r7, #28]
 8003aac:	89fb      	ldrh	r3, [r7, #14]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d3c6      	bcc.n	8003a40 <Set_Res_Message+0x38>
		}
	}

	if( start == 0xffff ){
 8003ab2:	8b3b      	ldrh	r3, [r7, #24]
 8003ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d104      	bne.n	8003ac6 <Set_Res_Message+0xbe>
		status = RET_FALSE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	77fb      	strb	r3, [r7, #31]
		SKprintf("Error : Respons Data start txt none \r\n");
 8003ac0:	486c      	ldr	r0, [pc, #432]	; (8003c74 <Set_Res_Message+0x26c>)
 8003ac2:	f000 fafb 	bl	80040bc <SKprintf>
	}

	//-------------------------------------------------------------
	// エンドテキスト検索
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 8003ac6:	7ffb      	ldrb	r3, [r7, #31]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d149      	bne.n	8003b60 <Set_Res_Message+0x158>
		end = 0xffff;
 8003acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad0:	82fb      	strh	r3, [r7, #22]
		for( i=0; i<num; i++){
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	83bb      	strh	r3, [r7, #28]
 8003ad6:	e035      	b.n	8003b44 <Set_Res_Message+0x13c>
			if( src[i] == message_end_text[0]
 8003ad8:	8bbb      	ldrh	r3, [r7, #28]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4413      	add	r3, r2
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	224d      	movs	r2, #77	; 0x4d
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d12b      	bne.n	8003b3e <Set_Res_Message+0x136>
					&& src[i+1] == message_end_text[1]
 8003ae6:	8bbb      	ldrh	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	4413      	add	r3, r2
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2253      	movs	r2, #83	; 0x53
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d123      	bne.n	8003b3e <Set_Res_Message+0x136>
					&& src[i+2] == message_end_text[2]
 8003af6:	8bbb      	ldrh	r3, [r7, #28]
 8003af8:	3302      	adds	r3, #2
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	4413      	add	r3, r2
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2247      	movs	r2, #71	; 0x47
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d11b      	bne.n	8003b3e <Set_Res_Message+0x136>
					&& src[i+3] == message_end_text[3]
 8003b06:	8bbb      	ldrh	r3, [r7, #28]
 8003b08:	3303      	adds	r3, #3
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2245      	movs	r2, #69	; 0x45
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d113      	bne.n	8003b3e <Set_Res_Message+0x136>
					&& src[i+4] == message_end_text[4]
 8003b16:	8bbb      	ldrh	r3, [r7, #28]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	224e      	movs	r2, #78	; 0x4e
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10b      	bne.n	8003b3e <Set_Res_Message+0x136>
					&& src[i+5] == message_end_text[5] ){
 8003b26:	8bbb      	ldrh	r3, [r7, #28]
 8003b28:	3305      	adds	r3, #5
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2244      	movs	r2, #68	; 0x44
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d103      	bne.n	8003b3e <Set_Res_Message+0x136>

				end = i+5+1;
 8003b36:	8bbb      	ldrh	r3, [r7, #28]
 8003b38:	3306      	adds	r3, #6
 8003b3a:	82fb      	strh	r3, [r7, #22]
				break;
 8003b3c:	e006      	b.n	8003b4c <Set_Res_Message+0x144>
		for( i=0; i<num; i++){
 8003b3e:	8bbb      	ldrh	r3, [r7, #28]
 8003b40:	3301      	adds	r3, #1
 8003b42:	83bb      	strh	r3, [r7, #28]
 8003b44:	8bba      	ldrh	r2, [r7, #28]
 8003b46:	89fb      	ldrh	r3, [r7, #14]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3c5      	bcc.n	8003ad8 <Set_Res_Message+0xd0>
			}
		}

		if( end == 0xffff ){
 8003b4c:	8afb      	ldrh	r3, [r7, #22]
 8003b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d104      	bne.n	8003b60 <Set_Res_Message+0x158>
			status = RET_FALSE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	77fb      	strb	r3, [r7, #31]
			SKprintf("Error : Respons Data end txt none \r\n");
 8003b5a:	4847      	ldr	r0, [pc, #284]	; (8003c78 <Set_Res_Message+0x270>)
 8003b5c:	f000 faae 	bl	80040bc <SKprintf>
		}
	}
	//-------------------------------------------------------------
	// Res[]に転送
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 8003b60:	7ffb      	ldrb	r3, [r7, #31]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d11f      	bne.n	8003ba6 <Set_Res_Message+0x19e>
		j = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	837b      	strh	r3, [r7, #26]
		for( i=start; i < end; i++){
 8003b6a:	8b3b      	ldrh	r3, [r7, #24]
 8003b6c:	83bb      	strh	r3, [r7, #28]
 8003b6e:	e016      	b.n	8003b9e <Set_Res_Message+0x196>
			if( j < COM_TABLE_MAX ){
 8003b70:	8b7b      	ldrh	r3, [r7, #26]
 8003b72:	2b21      	cmp	r3, #33	; 0x21
 8003b74:	d808      	bhi.n	8003b88 <Set_Res_Message+0x180>
				dist[j] = src[i];
 8003b76:	8bbb      	ldrh	r3, [r7, #28]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	441a      	add	r2, r3
 8003b7c:	8b7b      	ldrh	r3, [r7, #26]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	440b      	add	r3, r1
 8003b82:	7812      	ldrb	r2, [r2, #0]
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e004      	b.n	8003b92 <Set_Res_Message+0x18a>
			}
			else{
				status = RET_FALSE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	77fb      	strb	r3, [r7, #31]
				SKprintf("Error : Respons data size over\r\n");
 8003b8c:	483b      	ldr	r0, [pc, #236]	; (8003c7c <Set_Res_Message+0x274>)
 8003b8e:	f000 fa95 	bl	80040bc <SKprintf>
			}
			j++;
 8003b92:	8b7b      	ldrh	r3, [r7, #26]
 8003b94:	3301      	adds	r3, #1
 8003b96:	837b      	strh	r3, [r7, #26]
		for( i=start; i < end; i++){
 8003b98:	8bbb      	ldrh	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	83bb      	strh	r3, [r7, #28]
 8003b9e:	8bba      	ldrh	r2, [r7, #28]
 8003ba0:	8afb      	ldrh	r3, [r7, #22]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3e4      	bcc.n	8003b70 <Set_Res_Message+0x168>
		}
	}
	//-------------------------------------------------------------
	// チェックサム確認
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d10f      	bne.n	8003bcc <Set_Res_Message+0x1c4>
		if( dist[COM_CHKSUM] !=Get_command_chksum(COM_COUNTER_L, COM_CHKSUM_ID, dist)){
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	331b      	adds	r3, #27
 8003bb0:	781c      	ldrb	r4, [r3, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	211a      	movs	r1, #26
 8003bb6:	2006      	movs	r0, #6
 8003bb8:	f000 f870 	bl	8003c9c <Get_command_chksum>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	429c      	cmp	r4, r3
 8003bc0:	d004      	beq.n	8003bcc <Set_Res_Message+0x1c4>
			status = RET_FALSE;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	77fb      	strb	r3, [r7, #31]
			SKprintf("Error : Respons data chksum eoor");
 8003bc6:	482e      	ldr	r0, [pc, #184]	; (8003c80 <Set_Res_Message+0x278>)
 8003bc8:	f000 fa78 	bl	80040bc <SKprintf>
		}
	}
	//-------------------------------------------------------------
	// レスポンスデータをログ表示
	//-------------------------------------------------------------
	for( i=0;  i < COM_TABLE_MAX ; i++ ){
 8003bcc:	2300      	movs	r3, #0
 8003bce:	83bb      	strh	r3, [r7, #28]
 8003bd0:	e017      	b.n	8003c02 <Set_Res_Message+0x1fa>
		cmd_char[i] =  (uint8_t)((dist[i]<0x20||dist[i]>=0x7f)? '.': dist[i]);
 8003bd2:	8bbb      	ldrh	r3, [r7, #28]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b1f      	cmp	r3, #31
 8003bdc:	d90a      	bls.n	8003bf4 <Set_Res_Message+0x1ec>
 8003bde:	8bbb      	ldrh	r3, [r7, #28]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b7e      	cmp	r3, #126	; 0x7e
 8003be8:	d804      	bhi.n	8003bf4 <Set_Res_Message+0x1ec>
 8003bea:	8bbb      	ldrh	r3, [r7, #28]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	781a      	ldrb	r2, [r3, #0]
 8003bf2:	e000      	b.n	8003bf6 <Set_Res_Message+0x1ee>
 8003bf4:	222e      	movs	r2, #46	; 0x2e
 8003bf6:	8bbb      	ldrh	r3, [r7, #28]
 8003bf8:	4922      	ldr	r1, [pc, #136]	; (8003c84 <Set_Res_Message+0x27c>)
 8003bfa:	54ca      	strb	r2, [r1, r3]
	for( i=0;  i < COM_TABLE_MAX ; i++ ){
 8003bfc:	8bbb      	ldrh	r3, [r7, #28]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	83bb      	strh	r3, [r7, #28]
 8003c02:	8bbb      	ldrh	r3, [r7, #28]
 8003c04:	2b21      	cmp	r3, #33	; 0x21
 8003c06:	d9e4      	bls.n	8003bd2 <Set_Res_Message+0x1ca>
	}

	SKprintf("\r\nRESPONS MESSAGE = \r\n ");
 8003c08:	481f      	ldr	r0, [pc, #124]	; (8003c88 <Set_Res_Message+0x280>)
 8003c0a:	f000 fa57 	bl	80040bc <SKprintf>
	for( i=0; i < COM_TABLE_MAX ; i++){
 8003c0e:	2300      	movs	r3, #0
 8003c10:	83bb      	strh	r3, [r7, #28]
 8003c12:	e00a      	b.n	8003c2a <Set_Res_Message+0x222>
		SKprintf("%02x ", dist[i]);
 8003c14:	8bbb      	ldrh	r3, [r7, #28]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	481b      	ldr	r0, [pc, #108]	; (8003c8c <Set_Res_Message+0x284>)
 8003c20:	f000 fa4c 	bl	80040bc <SKprintf>
	for( i=0; i < COM_TABLE_MAX ; i++){
 8003c24:	8bbb      	ldrh	r3, [r7, #28]
 8003c26:	3301      	adds	r3, #1
 8003c28:	83bb      	strh	r3, [r7, #28]
 8003c2a:	8bbb      	ldrh	r3, [r7, #28]
 8003c2c:	2b21      	cmp	r3, #33	; 0x21
 8003c2e:	d9f1      	bls.n	8003c14 <Set_Res_Message+0x20c>
	}
	SKprintf("\r\n ");
 8003c30:	4817      	ldr	r0, [pc, #92]	; (8003c90 <Set_Res_Message+0x288>)
 8003c32:	f000 fa43 	bl	80040bc <SKprintf>
	c[1] = '\0';
 8003c36:	2300      	movs	r3, #0
 8003c38:	757b      	strb	r3, [r7, #21]
	for( i=0; i < COM_TABLE_MAX ; i++){
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	83bb      	strh	r3, [r7, #28]
 8003c3e:	e00c      	b.n	8003c5a <Set_Res_Message+0x252>
		c[0] = cmd_char[i];
 8003c40:	8bbb      	ldrh	r3, [r7, #28]
 8003c42:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <Set_Res_Message+0x27c>)
 8003c44:	5cd3      	ldrb	r3, [r2, r3]
 8003c46:	753b      	strb	r3, [r7, #20]
		SKprintf(" %s ", c);
 8003c48:	f107 0314 	add.w	r3, r7, #20
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4811      	ldr	r0, [pc, #68]	; (8003c94 <Set_Res_Message+0x28c>)
 8003c50:	f000 fa34 	bl	80040bc <SKprintf>
	for( i=0; i < COM_TABLE_MAX ; i++){
 8003c54:	8bbb      	ldrh	r3, [r7, #28]
 8003c56:	3301      	adds	r3, #1
 8003c58:	83bb      	strh	r3, [r7, #28]
 8003c5a:	8bbb      	ldrh	r3, [r7, #28]
 8003c5c:	2b21      	cmp	r3, #33	; 0x21
 8003c5e:	d9ef      	bls.n	8003c40 <Set_Res_Message+0x238>
	}
	SKprintf("\r\n");
 8003c60:	480d      	ldr	r0, [pc, #52]	; (8003c98 <Set_Res_Message+0x290>)
 8003c62:	f000 fa2b 	bl	80040bc <SKprintf>


	return status;
 8003c66:	7ffb      	ldrb	r3, [r7, #31]

}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3724      	adds	r7, #36	; 0x24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}
 8003c70:	20001bfc 	.word	0x20001bfc
 8003c74:	0800f3b4 	.word	0x0800f3b4
 8003c78:	0800f3dc 	.word	0x0800f3dc
 8003c7c:	0800f404 	.word	0x0800f404
 8003c80:	0800f428 	.word	0x0800f428
 8003c84:	20001c20 	.word	0x20001c20
 8003c88:	0800f44c 	.word	0x0800f44c
 8003c8c:	0800f464 	.word	0x0800f464
 8003c90:	0800f46c 	.word	0x0800f46c
 8003c94:	0800f470 	.word	0x0800f470
 8003c98:	0800f478 	.word	0x0800f478

08003c9c <Get_command_chksum>:
//==============================================================================
//
//=============================================================================
uint8_t Get_command_chksum(uint8_t start, uint8_t end,uint8_t *dt )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	603a      	str	r2, [r7, #0]
 8003ca6:	71fb      	strb	r3, [r7, #7]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	71bb      	strb	r3, [r7, #6]
	uint8_t		sum = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
	uint8_t		i;

	for( i=start; i<end; i++){
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	73bb      	strb	r3, [r7, #14]
 8003cb4:	e009      	b.n	8003cca <Get_command_chksum+0x2e>
		sum += dt[i];
 8003cb6:	7bbb      	ldrb	r3, [r7, #14]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	4413      	add	r3, r2
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	73fb      	strb	r3, [r7, #15]
	for( i=start; i<end; i++){
 8003cc4:	7bbb      	ldrb	r3, [r7, #14]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	73bb      	strb	r3, [r7, #14]
 8003cca:	7bba      	ldrb	r2, [r7, #14]
 8003ccc:	79bb      	ldrb	r3, [r7, #6]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d3f1      	bcc.n	8003cb6 <Get_command_chksum+0x1a>
		//SKprintf("%02x ", dt[i]);
	}
	//SKprintf(" sum=%02x\r\n",sum);

	return sum;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <Send_rx485_cmd_message>:
//==============================================================================
//
//==============================================================================

RETURN_STATUS Send_rx485_cmd_message( CMD_MSG	 *com_msg )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	RETURN_STATUS	status = RET_TRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73bb      	strb	r3, [r7, #14]
	uint8_t		*pt;

	//-------------------------------------------------------
	// Command buffer Clesr
	//-------------------------------------------------------
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003cec:	2300      	movs	r3, #0
 8003cee:	73fb      	strb	r3, [r7, #15]
 8003cf0:	e006      	b.n	8003d00 <Send_rx485_cmd_message+0x20>
		Cmd_mesg[i] = 0;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	4a6a      	ldr	r2, [pc, #424]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	2b21      	cmp	r3, #33	; 0x21
 8003d04:	d9f5      	bls.n	8003cf2 <Send_rx485_cmd_message+0x12>
	}

	//-------------------------------------------------------
	// START Text
	//-------------------------------------------------------
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	e00a      	b.n	8003d22 <Send_rx485_cmd_message+0x42>
		j = COM_START_TXT_00 + i ;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	737b      	strb	r3, [r7, #13]
		Cmd_mesg[j] = com_start_text[i];
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	7b7b      	ldrb	r3, [r7, #13]
 8003d14:	4963      	ldr	r1, [pc, #396]	; (8003ea4 <Send_rx485_cmd_message+0x1c4>)
 8003d16:	5c89      	ldrb	r1, [r1, r2]
 8003d18:	4a61      	ldr	r2, [pc, #388]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003d1a:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b05      	cmp	r3, #5
 8003d26:	d9f1      	bls.n	8003d0c <Send_rx485_cmd_message+0x2c>
	}

	//-------------------------------------------------------
	// 通信カウンタ
	//-------------------------------------------------------
	com_counter ++;
 8003d28:	4b5f      	ldr	r3, [pc, #380]	; (8003ea8 <Send_rx485_cmd_message+0x1c8>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	4b5d      	ldr	r3, [pc, #372]	; (8003ea8 <Send_rx485_cmd_message+0x1c8>)
 8003d32:	801a      	strh	r2, [r3, #0]
	Cmd_mesg[COM_COUNTER_L] = (uint8_t)com_counter;
 8003d34:	4b5c      	ldr	r3, [pc, #368]	; (8003ea8 <Send_rx485_cmd_message+0x1c8>)
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003d3c:	719a      	strb	r2, [r3, #6]
	Cmd_mesg[COM_COUNTER_H] = (uint8_t)(com_counter >> 8);
 8003d3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ea8 <Send_rx485_cmd_message+0x1c8>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	4b55      	ldr	r3, [pc, #340]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003d4a:	71da      	strb	r2, [r3, #7]

	//-------------------------------------------------------
	// アドレス
	//-------------------------------------------------------
	Cmd_mesg[COM_ADDRESS_ID] = '#';
 8003d4c:	4b54      	ldr	r3, [pc, #336]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003d4e:	2223      	movs	r2, #35	; 0x23
 8003d50:	721a      	strb	r2, [r3, #8]
	Cmd_mesg[COM_ADDRESS_DIST] = com_msg->address;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	791a      	ldrb	r2, [r3, #4]
 8003d56:	4b52      	ldr	r3, [pc, #328]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003d58:	725a      	strb	r2, [r3, #9]
	Cmd_mesg[COM_ADDRESS_SORC] =  MY_RS485_ADDRESS;
 8003d5a:	4b51      	ldr	r3, [pc, #324]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	729a      	strb	r2, [r3, #10]

	//-------------------------------------------------------
	// コマンド
	//-------------------------------------------------------
	Cmd_mesg[COM_COMMAND_ID] = '*';
 8003d60:	4b4f      	ldr	r3, [pc, #316]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003d62:	222a      	movs	r2, #42	; 0x2a
 8003d64:	731a      	strb	r2, [r3, #12]
	Cmd_mesg[COM_COMMAND] = com_msg->command;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	789a      	ldrb	r2, [r3, #2]
 8003d6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003d6c:	735a      	strb	r2, [r3, #13]

	switch(com_msg->command){
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	789b      	ldrb	r3, [r3, #2]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d815      	bhi.n	8003da4 <Send_rx485_cmd_message+0xc4>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <Send_rx485_cmd_message+0xa0>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003da5 	.word	0x08003da5
 8003d88:	08003d91 	.word	0x08003d91
 8003d8c:	08003d9b 	.word	0x08003d9b
	case RS485_CMD_STATUS:
		break;
	case RS485_CMD_VERSION:
		break;
	case RS485_CMD_MESUR:
		Cmd_mesg[COM_SENS_CTRL] = com_msg->sub1;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	795a      	ldrb	r2, [r3, #5]
 8003d94:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003d96:	73da      	strb	r2, [r3, #15]
		break;
 8003d98:	e005      	b.n	8003da6 <Send_rx485_cmd_message+0xc6>
	case RS485_CMD_MESUR_DATA:
		Cmd_mesg[COM_DATA_KIND ] = com_msg->sub1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	795a      	ldrb	r2, [r3, #5]
 8003d9e:	4b40      	ldr	r3, [pc, #256]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003da0:	73da      	strb	r2, [r3, #15]
		break;
 8003da2:	e000      	b.n	8003da6 <Send_rx485_cmd_message+0xc6>
	default:
		break;
 8003da4:	bf00      	nop
	}

	//-------------------------------------------------------
	// チェックサム計算
	//-------------------------------------------------------
	Cmd_mesg[COM_CHKSUM_ID] = '$';
 8003da6:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003da8:	2224      	movs	r2, #36	; 0x24
 8003daa:	769a      	strb	r2, [r3, #26]
	Cmd_mesg[COM_CHKSUM] = Get_command_chksum(COM_COUNTER_L, COM_CHKSUM_ID, Cmd_mesg);
 8003dac:	4a3c      	ldr	r2, [pc, #240]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003dae:	211a      	movs	r1, #26
 8003db0:	2006      	movs	r0, #6
 8003db2:	f7ff ff73 	bl	8003c9c <Get_command_chksum>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003dbc:	76da      	strb	r2, [r3, #27]

	//-------------------------------------------------------
	// END Text
	//-------------------------------------------------------
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]
 8003dc2:	e00b      	b.n	8003ddc <Send_rx485_cmd_message+0xfc>
			j = COM_END_TXT_00 + i ;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	331c      	adds	r3, #28
 8003dc8:	737b      	strb	r3, [r7, #13]
			Cmd_mesg[j] = message_end_text[i];
 8003dca:	7bfa      	ldrb	r2, [r7, #15]
 8003dcc:	7b7b      	ldrb	r3, [r7, #13]
 8003dce:	4937      	ldr	r1, [pc, #220]	; (8003eac <Send_rx485_cmd_message+0x1cc>)
 8003dd0:	5c89      	ldrb	r1, [r1, r2]
 8003dd2:	4a33      	ldr	r2, [pc, #204]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003dd4:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b05      	cmp	r3, #5
 8003de0:	d9f0      	bls.n	8003dc4 <Send_rx485_cmd_message+0xe4>

	//-------------------------------------------------------
	// デバック用ログ
	//-------------------------------------------------------

	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e014      	b.n	8003e12 <Send_rx485_cmd_message+0x132>
		cmd_char[i] =  (uint8_t)((Cmd_mesg[i]<0x20||Cmd_mesg[i]>=0x7f)? '.': Cmd_mesg[i]);
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003dec:	5cd3      	ldrb	r3, [r2, r3]
 8003dee:	2b1f      	cmp	r3, #31
 8003df0:	d908      	bls.n	8003e04 <Send_rx485_cmd_message+0x124>
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	4a2a      	ldr	r2, [pc, #168]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003df6:	5cd3      	ldrb	r3, [r2, r3]
 8003df8:	2b7e      	cmp	r3, #126	; 0x7e
 8003dfa:	d803      	bhi.n	8003e04 <Send_rx485_cmd_message+0x124>
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	4a28      	ldr	r2, [pc, #160]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003e00:	5cd2      	ldrb	r2, [r2, r3]
 8003e02:	e000      	b.n	8003e06 <Send_rx485_cmd_message+0x126>
 8003e04:	222e      	movs	r2, #46	; 0x2e
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	4929      	ldr	r1, [pc, #164]	; (8003eb0 <Send_rx485_cmd_message+0x1d0>)
 8003e0a:	54ca      	strb	r2, [r1, r3]
	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	2b21      	cmp	r3, #33	; 0x21
 8003e16:	d9e7      	bls.n	8003de8 <Send_rx485_cmd_message+0x108>
	}

	SKprintf("\r\nCOMMAND MESSAGE = \r\n ");
 8003e18:	4826      	ldr	r0, [pc, #152]	; (8003eb4 <Send_rx485_cmd_message+0x1d4>)
 8003e1a:	f000 f94f 	bl	80040bc <SKprintf>
	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	e009      	b.n	8003e38 <Send_rx485_cmd_message+0x158>
		SKprintf("%02x ", Cmd_mesg[i]);
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	4a1e      	ldr	r2, [pc, #120]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003e28:	5cd3      	ldrb	r3, [r2, r3]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4822      	ldr	r0, [pc, #136]	; (8003eb8 <Send_rx485_cmd_message+0x1d8>)
 8003e2e:	f000 f945 	bl	80040bc <SKprintf>
	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	3301      	adds	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b21      	cmp	r3, #33	; 0x21
 8003e3c:	d9f2      	bls.n	8003e24 <Send_rx485_cmd_message+0x144>
	}
	SKprintf("\r\n ");
 8003e3e:	481f      	ldr	r0, [pc, #124]	; (8003ebc <Send_rx485_cmd_message+0x1dc>)
 8003e40:	f000 f93c 	bl	80040bc <SKprintf>
	c[1] = '\0';
 8003e44:	2300      	movs	r3, #0
 8003e46:	727b      	strb	r3, [r7, #9]
	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	e00c      	b.n	8003e68 <Send_rx485_cmd_message+0x188>
		c[0] = cmd_char[i];
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <Send_rx485_cmd_message+0x1d0>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	723b      	strb	r3, [r7, #8]
		SKprintf(" %s ", c);
 8003e56:	f107 0308 	add.w	r3, r7, #8
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4818      	ldr	r0, [pc, #96]	; (8003ec0 <Send_rx485_cmd_message+0x1e0>)
 8003e5e:	f000 f92d 	bl	80040bc <SKprintf>
	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	3301      	adds	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b21      	cmp	r3, #33	; 0x21
 8003e6c:	d9ef      	bls.n	8003e4e <Send_rx485_cmd_message+0x16e>
	}
	SKprintf("\r\n");
 8003e6e:	4815      	ldr	r0, [pc, #84]	; (8003ec4 <Send_rx485_cmd_message+0x1e4>)
 8003e70:	f000 f924 	bl	80040bc <SKprintf>

	//-------------------------------------------------------
	// コマンド送信
	//-------------------------------------------------------
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RS485_TX);
 8003e74:	2201      	movs	r2, #1
 8003e76:	2120      	movs	r1, #32
 8003e78:	4813      	ldr	r0, [pc, #76]	; (8003ec8 <Send_rx485_cmd_message+0x1e8>)
 8003e7a:	f001 fae7 	bl	800544c <HAL_GPIO_WritePin>
	status = Send_rs485((uint8_t *)Cmd_mesg, COM_TABLE_MAX );
 8003e7e:	2122      	movs	r1, #34	; 0x22
 8003e80:	4807      	ldr	r0, [pc, #28]	; (8003ea0 <Send_rx485_cmd_message+0x1c0>)
 8003e82:	f000 f855 	bl	8003f30 <Send_rs485>
 8003e86:	4603      	mov	r3, r0
 8003e88:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RS485_RX);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2120      	movs	r1, #32
 8003e8e:	480e      	ldr	r0, [pc, #56]	; (8003ec8 <Send_rx485_cmd_message+0x1e8>)
 8003e90:	f001 fadc 	bl	800544c <HAL_GPIO_WritePin>


	return status;
 8003e94:	7bbb      	ldrb	r3, [r7, #14]

}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20001bd8 	.word	0x20001bd8
 8003ea4:	0800f95c 	.word	0x0800f95c
 8003ea8:	20001c44 	.word	0x20001c44
 8003eac:	0800f964 	.word	0x0800f964
 8003eb0:	20001c20 	.word	0x20001c20
 8003eb4:	0800f47c 	.word	0x0800f47c
 8003eb8:	0800f464 	.word	0x0800f464
 8003ebc:	0800f46c 	.word	0x0800f46c
 8003ec0:	0800f470 	.word	0x0800f470
 8003ec4:	0800f478 	.word	0x0800f478
 8003ec8:	40020000 	.word	0x40020000

08003ecc <Get_huart>:
//==============================================================================
//
//==============================================================================

UART_HandleTypeDef * Get_huart(SK_UART sel)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	71fb      	strb	r3, [r7, #7]
	return UartList[sel].huart;
 8003ed6:	79fa      	ldrb	r2, [r7, #7]
 8003ed8:	4906      	ldr	r1, [pc, #24]	; (8003ef4 <Get_huart+0x28>)
 8003eda:	4613      	mov	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	440b      	add	r3, r1
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	0800f96c 	.word	0x0800f96c

08003ef8 <Get_uart_port>:
//==============================================================================
//
//==============================================================================

SK_UART	Get_uart_port(UART_HandleTypeDef *huart)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	SK_UART	rtn;

	if( UartList[0].huart == huart){
 8003f00:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <Get_uart_port+0x30>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d102      	bne.n	8003f0e <Get_uart_port+0x16>
		rtn = SK_UART1_RS485 ;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e005      	b.n	8003f1a <Get_uart_port+0x22>
	}
	else if( UartList[1].huart == huart){
 8003f0e:	4a07      	ldr	r2, [pc, #28]	; (8003f2c <Get_uart_port+0x34>)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <Get_uart_port+0x22>
		rtn = SK_UART2_DEBUG;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
	}

	return rtn;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	20001e20 	.word	0x20001e20
 8003f2c:	20001e64 	.word	0x20001e64

08003f30 <Send_rs485>:
//==============================================================================
//
//==============================================================================
RETURN_STATUS Send_rs485(uint8_t *pData, uint16_t Size)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
	RETURN_STATUS status = RET_TRUE;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef s;

	//SKprintf("Send_rs485() size=%d\r\n",Size);
	s= HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, pData, Size, HAL_MAX_DELAY);
 8003f40:	480f      	ldr	r0, [pc, #60]	; (8003f80 <Send_rs485+0x50>)
 8003f42:	887a      	ldrh	r2, [r7, #2]
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	f003 f8f8 	bl	800713e <HAL_UART_Transmit>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	73bb      	strb	r3, [r7, #14]

	switch(s){
 8003f52:	7bbb      	ldrb	r3, [r7, #14]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <Send_rs485+0x44>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	db0c      	blt.n	8003f76 <Send_rs485+0x46>
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d809      	bhi.n	8003f76 <Send_rs485+0x46>
	case HAL_OK:
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		status = RET_FALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
		SKprintf("ERROR %s RS485 TRANSMIT = %d\r\n",UartList[SK_UART1_RS485].name, s);
 8003f66:	7bbb      	ldrb	r3, [r7, #14]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4906      	ldr	r1, [pc, #24]	; (8003f84 <Send_rs485+0x54>)
 8003f6c:	4806      	ldr	r0, [pc, #24]	; (8003f88 <Send_rs485+0x58>)
 8003f6e:	f000 f8a5 	bl	80040bc <SKprintf>
		break;
 8003f72:	e000      	b.n	8003f76 <Send_rs485+0x46>
		break;
 8003f74:	bf00      	nop
	}

	return status;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]

}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20001e20 	.word	0x20001e20
 8003f84:	0800f96d 	.word	0x0800f96d
 8003f88:	0800f494 	.word	0x0800f494

08003f8c <uart_Data_init>:

//==============================================================================
//
//==============================================================================
void uart_Data_init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
	SKprintf("uart_Data_init()\r\n");
 8003f90:	4811      	ldr	r0, [pc, #68]	; (8003fd8 <uart_Data_init+0x4c>)
 8003f92:	f000 f893 	bl	80040bc <SKprintf>
	Set_logInfo2("uart_Data_init()");
 8003f96:	4811      	ldr	r0, [pc, #68]	; (8003fdc <uart_Data_init+0x50>)
 8003f98:	f7fe f94c 	bl	8002234 <Set_logInfo2>

	uart[SK_UART1_RS485].rcv_wpt = 0;
 8003f9c:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <uart_Data_init+0x54>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	uart[SK_UART1_RS485].rcv_rpt = 0;
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <uart_Data_init+0x54>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	uart[SK_UART1_RS485].rcvnum = 0;
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <uart_Data_init+0x54>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	uart[SK_UART2_DEBUG].rcv_wpt = 0;
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <uart_Data_init+0x54>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	uart[SK_UART2_DEBUG].rcv_rpt = 0;
 8003fbc:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <uart_Data_init+0x54>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	uart[SK_UART2_DEBUG].rcvnum = 0;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <uart_Data_init+0x54>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

	esc.ptr = 0;
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <uart_Data_init+0x58>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	729a      	strb	r2, [r3, #10]
}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	0800f4b4 	.word	0x0800f4b4
 8003fdc:	0800f4c8 	.word	0x0800f4c8
 8003fe0:	20001ab8 	.word	0x20001ab8
 8003fe4:	20001c48 	.word	0x20001c48

08003fe8 <uart_Rcv_init>:
//	huart2: デバックモニター用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
void uart_Rcv_init(SK_UART sel)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef s;

	//SKprintf("uart_Rcv_init(%d)\r\n",sel);
	//Set_logInfo("uart_Rcv_init()");
	s= HAL_UART_Receive_IT(Get_huart(sel), &uart[sel].rcv_dt[0], 1);
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ff69 	bl	8003ecc <Get_huart>
 8003ffa:	79fa      	ldrb	r2, [r7, #7]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <uart_Rcv_init+0x48>)
 8004006:	4413      	add	r3, r2
 8004008:	2201      	movs	r2, #1
 800400a:	4619      	mov	r1, r3
 800400c:	f003 f929 	bl	8007262 <HAL_UART_Receive_IT>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]

	switch(s){
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <uart_Rcv_init+0x3e>
 800401a:	2b00      	cmp	r3, #0
 800401c:	db04      	blt.n	8004028 <uart_Rcv_init+0x40>
 800401e:	3b01      	subs	r3, #1
 8004020:	2b02      	cmp	r3, #2
 8004022:	d801      	bhi.n	8004028 <uart_Rcv_init+0x40>
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		//SKprintf("ERROR %s RECIVE = %d\r\n",UartList[sel].name, s);
		break;
 8004024:	e000      	b.n	8004028 <uart_Rcv_init+0x40>
		break;
 8004026:	bf00      	nop
	}
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20001ab8 	.word	0x20001ab8

08004034 <SKprintf_uart1>:
//	huart1： RS485用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
int	SKprintf_uart1 (const char *string, ...)
{
 8004034:	b40f      	push	{r0, r1, r2, r3}
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );
 800403c:	bf00      	nop
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <SKprintf_uart1+0x7c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1fb      	bne.n	800403e <SKprintf_uart1+0xa>

//	buffer = (char *)pvPortMalloc(CHARA_MAX);
	buffer = Skprintf_buf;
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <SKprintf_uart1+0x80>)
 8004048:	60bb      	str	r3, [r7, #8]


	if( buffer != NULL ){
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d023      	beq.n	8004098 <SKprintf_uart1+0x64>

		Sem_Printf = 1;
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <SKprintf_uart1+0x7c>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
 8004056:	f107 031c 	add.w	r3, r7, #28
 800405a:	607b      	str	r3, [r7, #4]
		vsprintf(buffer, string, ap);
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	69b9      	ldr	r1, [r7, #24]
 8004060:	68b8      	ldr	r0, [r7, #8]
 8004062:	f007 fe41 	bl	800bce8 <vsiprintf>
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e008      	b.n	800407e <SKprintf_uart1+0x4a>
			if(buffer[i] == '\0'){
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4413      	add	r3, r2
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d006      	beq.n	8004086 <SKprintf_uart1+0x52>
		for(i=0; i<CHARA_MAX; i++){
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3301      	adds	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2bff      	cmp	r3, #255	; 0xff
 8004082:	ddf3      	ble.n	800406c <SKprintf_uart1+0x38>
 8004084:	e000      	b.n	8004088 <SKprintf_uart1+0x54>
				break;
 8004086:	bf00      	nop
			}
		}
		HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, buffer, i, HAL_MAX_DELAY);
 8004088:	480b      	ldr	r0, [pc, #44]	; (80040b8 <SKprintf_uart1+0x84>)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	b29a      	uxth	r2, r3
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	f003 f853 	bl	800713e <HAL_UART_Transmit>

	}

	//vPortFree(buffer);

	Sem_Printf = 0;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <SKprintf_uart1+0x7c>)
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]

}
 800409e:	bf00      	nop
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040aa:	b004      	add	sp, #16
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20001c5c 	.word	0x20001c5c
 80040b4:	20001c70 	.word	0x20001c70
 80040b8:	20001e20 	.word	0x20001e20

080040bc <SKprintf>:
// 総和を求める関数（値は int 型を想定）
// n は、渡す引数の数、それ以降は計算する値です。
//==============================================================================

int	SKprintf (const char *string, ...)
{
 80040bc:	b40f      	push	{r0, r1, r2, r3}
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );
 80040c4:	bf00      	nop
 80040c6:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <SKprintf+0x7c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1fb      	bne.n	80040c6 <SKprintf+0xa>

//	buffer = (char *)pvPortMalloc(CHARA_MAX);
	buffer = Skprintf_buf;
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <SKprintf+0x80>)
 80040d0:	60bb      	str	r3, [r7, #8]

	if( buffer != NULL ){
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d023      	beq.n	8004120 <SKprintf+0x64>

		Sem_Printf = 1;
 80040d8:	4b17      	ldr	r3, [pc, #92]	; (8004138 <SKprintf+0x7c>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
 80040de:	f107 031c 	add.w	r3, r7, #28
 80040e2:	607b      	str	r3, [r7, #4]
		vsprintf(buffer, string, ap);
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	69b9      	ldr	r1, [r7, #24]
 80040e8:	68b8      	ldr	r0, [r7, #8]
 80040ea:	f007 fdfd 	bl	800bce8 <vsiprintf>
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e008      	b.n	8004106 <SKprintf+0x4a>
			if(buffer[i] == '\0'){
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	4413      	add	r3, r2
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d006      	beq.n	800410e <SKprintf+0x52>
		for(i=0; i<CHARA_MAX; i++){
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2bff      	cmp	r3, #255	; 0xff
 800410a:	ddf3      	ble.n	80040f4 <SKprintf+0x38>
 800410c:	e000      	b.n	8004110 <SKprintf+0x54>
				break;
 800410e:	bf00      	nop
			}
		}
		HAL_UART_Transmit(UartList[SK_UART2_DEBUG].huart, buffer, i, HAL_MAX_DELAY);
 8004110:	480b      	ldr	r0, [pc, #44]	; (8004140 <SKprintf+0x84>)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	b29a      	uxth	r2, r3
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	f003 f80f 	bl	800713e <HAL_UART_Transmit>

	}

//	vPortFree(buffer);

	Sem_Printf = 0;
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <SKprintf+0x7c>)
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]

}
 8004126:	bf00      	nop
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004132:	b004      	add	sp, #16
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20001c5c 	.word	0x20001c5c
 800413c:	20001c70 	.word	0x20001c70
 8004140:	20001e64 	.word	0x20001e64

08004144 <getch>:
//==============================================================================
//
//
//==============================================================================
int getch(SK_UART id)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
	int rtn = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]

	if( uart[SK_UART2_DEBUG].rcvnum  > 0 ){
 8004152:	4b07      	ldr	r3, [pc, #28]	; (8004170 <getch+0x2c>)
 8004154:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <getch+0x20>

		//SKprintf("DATA RECIVED \r\n");
		rtn = Get_rcv_data(SK_UART2_DEBUG);
 800415c:	2001      	movs	r0, #1
 800415e:	f7fe ff11 	bl	8002f84 <Get_rcv_data>
 8004162:	60f8      	str	r0, [r7, #12]
	}

	return rtn;
 8004164:	68fb      	ldr	r3, [r7, #12]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20001ab8 	.word	0x20001ab8

08004174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004178:	f000 fe2e 	bl	8004dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800417c:	f000 f868 	bl	8004250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004180:	f000 fa6c 	bl	800465c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004184:	f000 fa40 	bl	8004608 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8004188:	f000 f8d0 	bl	800432c <MX_RTC_Init>
  MX_TIM1_Init();
 800418c:	f000 f970 	bl	8004470 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004190:	f000 f9c2 	bl	8004518 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004194:	f000 fa0e 	bl	80045b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  LogInfo_clear();
 8004198:	f7fe fa88 	bl	80026ac <LogInfo_clear>
  user_init();		// SK ADDSKprint
 800419c:	f7fe fc9a 	bl	8002ad4 <user_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80041a0:	f004 f83c 	bl	800821c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(void *), &myQueue01_attributes);
 80041a4:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <main+0x9c>)
 80041a6:	2104      	movs	r1, #4
 80041a8:	2010      	movs	r0, #16
 80041aa:	f004 f92e 	bl	800840a <osMessageQueueNew>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4a18      	ldr	r2, [pc, #96]	; (8004214 <main+0xa0>)
 80041b2:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(void *), &myQueue02_attributes);
 80041b4:	4a18      	ldr	r2, [pc, #96]	; (8004218 <main+0xa4>)
 80041b6:	2104      	movs	r1, #4
 80041b8:	2010      	movs	r0, #16
 80041ba:	f004 f926 	bl	800840a <osMessageQueueNew>
 80041be:	4603      	mov	r3, r0
 80041c0:	4a16      	ldr	r2, [pc, #88]	; (800421c <main+0xa8>)
 80041c2:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (16, sizeof(void *), &myQueue03_attributes);
 80041c4:	4a16      	ldr	r2, [pc, #88]	; (8004220 <main+0xac>)
 80041c6:	2104      	movs	r1, #4
 80041c8:	2010      	movs	r0, #16
 80041ca:	f004 f91e 	bl	800840a <osMessageQueueNew>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4a14      	ldr	r2, [pc, #80]	; (8004224 <main+0xb0>)
 80041d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_main */
  Task_mainHandle = osThreadNew(StartDefaultTask, NULL, &Task_main_attributes);
 80041d4:	4a14      	ldr	r2, [pc, #80]	; (8004228 <main+0xb4>)
 80041d6:	2100      	movs	r1, #0
 80041d8:	4814      	ldr	r0, [pc, #80]	; (800422c <main+0xb8>)
 80041da:	f004 f869 	bl	80082b0 <osThreadNew>
 80041de:	4603      	mov	r3, r0
 80041e0:	4a13      	ldr	r2, [pc, #76]	; (8004230 <main+0xbc>)
 80041e2:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub1 */
  Task_sub1Handle = osThreadNew(StartTask02, NULL, &Task_sub1_attributes);
 80041e4:	4a13      	ldr	r2, [pc, #76]	; (8004234 <main+0xc0>)
 80041e6:	2100      	movs	r1, #0
 80041e8:	4813      	ldr	r0, [pc, #76]	; (8004238 <main+0xc4>)
 80041ea:	f004 f861 	bl	80082b0 <osThreadNew>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4a12      	ldr	r2, [pc, #72]	; (800423c <main+0xc8>)
 80041f2:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub2 */
  Task_sub2Handle = osThreadNew(StartTask03, NULL, &Task_sub2_attributes);
 80041f4:	4a12      	ldr	r2, [pc, #72]	; (8004240 <main+0xcc>)
 80041f6:	2100      	movs	r1, #0
 80041f8:	4812      	ldr	r0, [pc, #72]	; (8004244 <main+0xd0>)
 80041fa:	f004 f859 	bl	80082b0 <osThreadNew>
 80041fe:	4603      	mov	r3, r0
 8004200:	4a11      	ldr	r2, [pc, #68]	; (8004248 <main+0xd4>)
 8004202:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  SKprintf("osKernelStart()\r\n");
 8004204:	4811      	ldr	r0, [pc, #68]	; (800424c <main+0xd8>)
 8004206:	f7ff ff59 	bl	80040bc <SKprintf>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800420a:	f004 f82b 	bl	8008264 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800420e:	e7fe      	b.n	800420e <main+0x9a>
 8004210:	0800fa08 	.word	0x0800fa08
 8004214:	20001eb4 	.word	0x20001eb4
 8004218:	0800fa20 	.word	0x0800fa20
 800421c:	20001eb8 	.word	0x20001eb8
 8004220:	0800fa38 	.word	0x0800fa38
 8004224:	20001ebc 	.word	0x20001ebc
 8004228:	0800f99c 	.word	0x0800f99c
 800422c:	08004761 	.word	0x08004761
 8004230:	20001ea8 	.word	0x20001ea8
 8004234:	0800f9c0 	.word	0x0800f9c0
 8004238:	08004771 	.word	0x08004771
 800423c:	20001eac 	.word	0x20001eac
 8004240:	0800f9e4 	.word	0x0800f9e4
 8004244:	0800479d 	.word	0x0800479d
 8004248:	20001eb0 	.word	0x20001eb0
 800424c:	0800f524 	.word	0x0800f524

08004250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b094      	sub	sp, #80	; 0x50
 8004254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004256:	f107 0320 	add.w	r3, r7, #32
 800425a:	2230      	movs	r2, #48	; 0x30
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f007 f848 	bl	800b2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004264:	f107 030c 	add.w	r3, r7, #12
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004274:	2300      	movs	r3, #0
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	4b2a      	ldr	r3, [pc, #168]	; (8004324 <SystemClock_Config+0xd4>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	4a29      	ldr	r2, [pc, #164]	; (8004324 <SystemClock_Config+0xd4>)
 800427e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004282:	6413      	str	r3, [r2, #64]	; 0x40
 8004284:	4b27      	ldr	r3, [pc, #156]	; (8004324 <SystemClock_Config+0xd4>)
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004290:	2300      	movs	r3, #0
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	4b24      	ldr	r3, [pc, #144]	; (8004328 <SystemClock_Config+0xd8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800429c:	4a22      	ldr	r2, [pc, #136]	; (8004328 <SystemClock_Config+0xd8>)
 800429e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b20      	ldr	r3, [pc, #128]	; (8004328 <SystemClock_Config+0xd8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80042b0:	2306      	movs	r3, #6
 80042b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80042b4:	2301      	movs	r3, #1
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042b8:	2301      	movs	r3, #1
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80042bc:	2310      	movs	r3, #16
 80042be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042c0:	2302      	movs	r3, #2
 80042c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80042c4:	2300      	movs	r3, #0
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80042c8:	2310      	movs	r3, #16
 80042ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80042cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80042d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80042d2:	2304      	movs	r3, #4
 80042d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80042d6:	2307      	movs	r3, #7
 80042d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042da:	f107 0320 	add.w	r3, r7, #32
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 f8ce 	bl	8005480 <HAL_RCC_OscConfig>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80042ea:	f000 fa7d 	bl	80047e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042ee:	230f      	movs	r3, #15
 80042f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042f2:	2302      	movs	r3, #2
 80042f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004300:	2300      	movs	r3, #0
 8004302:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004304:	f107 030c 	add.w	r3, r7, #12
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f001 fb30 	bl	8005970 <HAL_RCC_ClockConfig>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8004316:	f000 fa67 	bl	80047e8 <Error_Handler>
  }
}
 800431a:	bf00      	nop
 800431c:	3750      	adds	r7, #80	; 0x50
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800
 8004328:	40007000 	.word	0x40007000

0800432c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08c      	sub	sp, #48	; 0x30
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004332:	f107 031c 	add.w	r3, r7, #28
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	609a      	str	r2, [r3, #8]
 800433e:	60da      	str	r2, [r3, #12]
 8004340:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004346:	4b48      	ldr	r3, [pc, #288]	; (8004468 <MX_RTC_Init+0x13c>)
 8004348:	4a48      	ldr	r2, [pc, #288]	; (800446c <MX_RTC_Init+0x140>)
 800434a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800434c:	4b46      	ldr	r3, [pc, #280]	; (8004468 <MX_RTC_Init+0x13c>)
 800434e:	2200      	movs	r2, #0
 8004350:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004352:	4b45      	ldr	r3, [pc, #276]	; (8004468 <MX_RTC_Init+0x13c>)
 8004354:	227f      	movs	r2, #127	; 0x7f
 8004356:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004358:	4b43      	ldr	r3, [pc, #268]	; (8004468 <MX_RTC_Init+0x13c>)
 800435a:	22ff      	movs	r2, #255	; 0xff
 800435c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800435e:	4b42      	ldr	r3, [pc, #264]	; (8004468 <MX_RTC_Init+0x13c>)
 8004360:	2200      	movs	r2, #0
 8004362:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004364:	4b40      	ldr	r3, [pc, #256]	; (8004468 <MX_RTC_Init+0x13c>)
 8004366:	2200      	movs	r2, #0
 8004368:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800436a:	4b3f      	ldr	r3, [pc, #252]	; (8004468 <MX_RTC_Init+0x13c>)
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004370:	483d      	ldr	r0, [pc, #244]	; (8004468 <MX_RTC_Init+0x13c>)
 8004372:	f001 fe3d 	bl	8005ff0 <HAL_RTC_Init>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 800437c:	f000 fa34 	bl	80047e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004380:	2300      	movs	r3, #0
 8004382:	773b      	strb	r3, [r7, #28]
  sTime.Minutes = 0x0;
 8004384:	2300      	movs	r3, #0
 8004386:	777b      	strb	r3, [r7, #29]
  sTime.Seconds = 0x0;
 8004388:	2300      	movs	r3, #0
 800438a:	77bb      	strb	r3, [r7, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800438c:	2300      	movs	r3, #0
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004390:	2300      	movs	r3, #0
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004394:	f107 031c 	add.w	r3, r7, #28
 8004398:	2201      	movs	r2, #1
 800439a:	4619      	mov	r1, r3
 800439c:	4832      	ldr	r0, [pc, #200]	; (8004468 <MX_RTC_Init+0x13c>)
 800439e:	f001 fe9d 	bl	80060dc <HAL_RTC_SetTime>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <MX_RTC_Init+0x80>
  {
    Error_Handler();
 80043a8:	f000 fa1e 	bl	80047e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80043ac:	2301      	movs	r3, #1
 80043ae:	763b      	strb	r3, [r7, #24]
  sDate.Month = RTC_MONTH_JANUARY;
 80043b0:	2301      	movs	r3, #1
 80043b2:	767b      	strb	r3, [r7, #25]
  sDate.Date = 0x1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	76bb      	strb	r3, [r7, #26]
  sDate.Year = 0x0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	76fb      	strb	r3, [r7, #27]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80043bc:	f107 0318 	add.w	r3, r7, #24
 80043c0:	2201      	movs	r2, #1
 80043c2:	4619      	mov	r1, r3
 80043c4:	4828      	ldr	r0, [pc, #160]	; (8004468 <MX_RTC_Init+0x13c>)
 80043c6:	f001 ff81 	bl	80062cc <HAL_RTC_SetDate>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80043d0:	f000 fa0a 	bl	80047e8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80043d4:	2204      	movs	r2, #4
 80043d6:	2100      	movs	r1, #0
 80043d8:	4823      	ldr	r0, [pc, #140]	; (8004468 <MX_RTC_Init+0x13c>)
 80043da:	f002 f907 	bl	80065ec <HAL_RTCEx_SetWakeUpTimer_IT>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 80043e4:	f000 fa00 	bl	80047e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#define MAGIC_NO 0x12a5			// SK ADD

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != MAGIC_NO)
 80043e8:	2100      	movs	r1, #0
 80043ea:	481f      	ldr	r0, [pc, #124]	; (8004468 <MX_RTC_Init+0x13c>)
 80043ec:	f002 f9fc 	bl	80067e8 <HAL_RTCEx_BKUPRead>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f241 22a5 	movw	r2, #4773	; 0x12a5
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d032      	beq.n	8004460 <MX_RTC_Init+0x134>
  {
    RTC_TimeTypeDef sTime = {0};
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8004408:	2300      	movs	r3, #0
 800440a:	603b      	str	r3, [r7, #0]

    sTime.Hours = 1;
 800440c:	2301      	movs	r3, #1
 800440e:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	71bb      	strb	r3, [r7, #6]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	2200      	movs	r2, #0
 800441c:	4619      	mov	r1, r3
 800441e:	4812      	ldr	r0, [pc, #72]	; (8004468 <MX_RTC_Init+0x13c>)
 8004420:	f001 fe5c 	bl	80060dc <HAL_RTC_SetTime>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_RTC_Init+0x102>
    {
      Error_Handler();
 800442a:	f000 f9dd 	bl	80047e8 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800442e:	2303      	movs	r3, #3
 8004430:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 8004432:	2301      	movs	r3, #1
 8004434:	707b      	strb	r3, [r7, #1]
    sDate.Date = 1;
 8004436:	2301      	movs	r3, #1
 8004438:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 20;
 800443a:	2314      	movs	r3, #20
 800443c:	70fb      	strb	r3, [r7, #3]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800443e:	463b      	mov	r3, r7
 8004440:	2200      	movs	r2, #0
 8004442:	4619      	mov	r1, r3
 8004444:	4808      	ldr	r0, [pc, #32]	; (8004468 <MX_RTC_Init+0x13c>)
 8004446:	f001 ff41 	bl	80062cc <HAL_RTC_SetDate>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <MX_RTC_Init+0x128>
    {
      Error_Handler();
 8004450:	f000 f9ca 	bl	80047e8 <Error_Handler>

    }
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, MAGIC_NO);
 8004454:	f241 22a5 	movw	r2, #4773	; 0x12a5
 8004458:	2100      	movs	r1, #0
 800445a:	4803      	ldr	r0, [pc, #12]	; (8004468 <MX_RTC_Init+0x13c>)
 800445c:	f002 f9aa 	bl	80067b4 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 8004460:	bf00      	nop
 8004462:	3730      	adds	r7, #48	; 0x30
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20001d70 	.word	0x20001d70
 800446c:	40002800 	.word	0x40002800

08004470 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004476:	f107 0308 	add.w	r3, r7, #8
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	609a      	str	r2, [r3, #8]
 8004482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004484:	463b      	mov	r3, r7
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <MX_TIM1_Init+0xa0>)
 800448e:	4a21      	ldr	r2, [pc, #132]	; (8004514 <MX_TIM1_Init+0xa4>)
 8004490:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8004492:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <MX_TIM1_Init+0xa0>)
 8004494:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004498:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <MX_TIM1_Init+0xa0>)
 800449c:	2200      	movs	r2, #0
 800449e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <MX_TIM1_Init+0xa0>)
 80044a2:	f245 2207 	movw	r2, #20999	; 0x5207
 80044a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <MX_TIM1_Init+0xa0>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80044ae:	4b18      	ldr	r3, [pc, #96]	; (8004510 <MX_TIM1_Init+0xa0>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <MX_TIM1_Init+0xa0>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80044ba:	4815      	ldr	r0, [pc, #84]	; (8004510 <MX_TIM1_Init+0xa0>)
 80044bc:	f002 f9ac 	bl	8006818 <HAL_TIM_Base_Init>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80044c6:	f000 f98f 	bl	80047e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80044d0:	f107 0308 	add.w	r3, r7, #8
 80044d4:	4619      	mov	r1, r3
 80044d6:	480e      	ldr	r0, [pc, #56]	; (8004510 <MX_TIM1_Init+0xa0>)
 80044d8:	f002 fb58 	bl	8006b8c <HAL_TIM_ConfigClockSource>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80044e2:	f000 f981 	bl	80047e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044e6:	2300      	movs	r3, #0
 80044e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044ee:	463b      	mov	r3, r7
 80044f0:	4619      	mov	r1, r3
 80044f2:	4807      	ldr	r0, [pc, #28]	; (8004510 <MX_TIM1_Init+0xa0>)
 80044f4:	f002 fd54 	bl	8006fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80044fe:	f000 f973 	bl	80047e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);    // SK ADD
 8004502:	4803      	ldr	r0, [pc, #12]	; (8004510 <MX_TIM1_Init+0xa0>)
 8004504:	f002 f9d8 	bl	80068b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20001d90 	.word	0x20001d90
 8004514:	40010000 	.word	0x40010000

08004518 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800451e:	f107 0308 	add.w	r3, r7, #8
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	609a      	str	r2, [r3, #8]
 800452a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800452c:	463b      	mov	r3, r7
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004534:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <MX_TIM2_Init+0x98>)
 8004536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800453a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 800453c:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <MX_TIM2_Init+0x98>)
 800453e:	2203      	movs	r2, #3
 8004540:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <MX_TIM2_Init+0x98>)
 8004544:	2200      	movs	r2, #0
 8004546:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 209;
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <MX_TIM2_Init+0x98>)
 800454a:	22d1      	movs	r2, #209	; 0xd1
 800454c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800454e:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <MX_TIM2_Init+0x98>)
 8004550:	2200      	movs	r2, #0
 8004552:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004554:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <MX_TIM2_Init+0x98>)
 8004556:	2200      	movs	r2, #0
 8004558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800455a:	4815      	ldr	r0, [pc, #84]	; (80045b0 <MX_TIM2_Init+0x98>)
 800455c:	f002 f95c 	bl	8006818 <HAL_TIM_Base_Init>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8004566:	f000 f93f 	bl	80047e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800456a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800456e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004570:	f107 0308 	add.w	r3, r7, #8
 8004574:	4619      	mov	r1, r3
 8004576:	480e      	ldr	r0, [pc, #56]	; (80045b0 <MX_TIM2_Init+0x98>)
 8004578:	f002 fb08 	bl	8006b8c <HAL_TIM_ConfigClockSource>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8004582:	f000 f931 	bl	80047e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004586:	2300      	movs	r3, #0
 8004588:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800458a:	2300      	movs	r3, #0
 800458c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800458e:	463b      	mov	r3, r7
 8004590:	4619      	mov	r1, r3
 8004592:	4807      	ldr	r0, [pc, #28]	; (80045b0 <MX_TIM2_Init+0x98>)
 8004594:	f002 fd04 	bl	8006fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800459e:	f000 f923 	bl	80047e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);    // SK ADD
 80045a2:	4803      	ldr	r0, [pc, #12]	; (80045b0 <MX_TIM2_Init+0x98>)
 80045a4:	f002 f988 	bl	80068b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80045a8:	bf00      	nop
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20001dd8 	.word	0x20001dd8

080045b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045b8:	4b11      	ldr	r3, [pc, #68]	; (8004600 <MX_USART1_UART_Init+0x4c>)
 80045ba:	4a12      	ldr	r2, [pc, #72]	; (8004604 <MX_USART1_UART_Init+0x50>)
 80045bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80045be:	4b10      	ldr	r3, [pc, #64]	; (8004600 <MX_USART1_UART_Init+0x4c>)
 80045c0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80045c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <MX_USART1_UART_Init+0x4c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <MX_USART1_UART_Init+0x4c>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <MX_USART1_UART_Init+0x4c>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <MX_USART1_UART_Init+0x4c>)
 80045da:	220c      	movs	r2, #12
 80045dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <MX_USART1_UART_Init+0x4c>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <MX_USART1_UART_Init+0x4c>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045ea:	4805      	ldr	r0, [pc, #20]	; (8004600 <MX_USART1_UART_Init+0x4c>)
 80045ec:	f002 fd5a 	bl	80070a4 <HAL_UART_Init>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045f6:	f000 f8f7 	bl	80047e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20001e20 	.word	0x20001e20
 8004604:	40011000 	.word	0x40011000

08004608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <MX_USART2_UART_Init+0x4c>)
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <MX_USART2_UART_Init+0x50>)
 8004610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <MX_USART2_UART_Init+0x4c>)
 8004614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <MX_USART2_UART_Init+0x4c>)
 800461c:	2200      	movs	r2, #0
 800461e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <MX_USART2_UART_Init+0x4c>)
 8004622:	2200      	movs	r2, #0
 8004624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <MX_USART2_UART_Init+0x4c>)
 8004628:	2200      	movs	r2, #0
 800462a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <MX_USART2_UART_Init+0x4c>)
 800462e:	220c      	movs	r2, #12
 8004630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004632:	4b08      	ldr	r3, [pc, #32]	; (8004654 <MX_USART2_UART_Init+0x4c>)
 8004634:	2200      	movs	r2, #0
 8004636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <MX_USART2_UART_Init+0x4c>)
 800463a:	2200      	movs	r2, #0
 800463c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800463e:	4805      	ldr	r0, [pc, #20]	; (8004654 <MX_USART2_UART_Init+0x4c>)
 8004640:	f002 fd30 	bl	80070a4 <HAL_UART_Init>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800464a:	f000 f8cd 	bl	80047e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20001e64 	.word	0x20001e64
 8004658:	40004400 	.word	0x40004400

0800465c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004662:	f107 0314 	add.w	r3, r7, #20
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	609a      	str	r2, [r3, #8]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	4b37      	ldr	r3, [pc, #220]	; (8004754 <MX_GPIO_Init+0xf8>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	4a36      	ldr	r2, [pc, #216]	; (8004754 <MX_GPIO_Init+0xf8>)
 800467c:	f043 0304 	orr.w	r3, r3, #4
 8004680:	6313      	str	r3, [r2, #48]	; 0x30
 8004682:	4b34      	ldr	r3, [pc, #208]	; (8004754 <MX_GPIO_Init+0xf8>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	4b30      	ldr	r3, [pc, #192]	; (8004754 <MX_GPIO_Init+0xf8>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <MX_GPIO_Init+0xf8>)
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <MX_GPIO_Init+0xf8>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	4b29      	ldr	r3, [pc, #164]	; (8004754 <MX_GPIO_Init+0xf8>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	4a28      	ldr	r2, [pc, #160]	; (8004754 <MX_GPIO_Init+0xf8>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ba:	4b26      	ldr	r3, [pc, #152]	; (8004754 <MX_GPIO_Init+0xf8>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	4b22      	ldr	r3, [pc, #136]	; (8004754 <MX_GPIO_Init+0xf8>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	4a21      	ldr	r2, [pc, #132]	; (8004754 <MX_GPIO_Init+0xf8>)
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	6313      	str	r3, [r2, #48]	; 0x30
 80046d6:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <MX_GPIO_Init+0xf8>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIM1_PLS_GPIO_Port, TIM1_PLS_Pin, GPIO_PIN_RESET);
 80046e2:	2200      	movs	r2, #0
 80046e4:	2104      	movs	r1, #4
 80046e6:	481c      	ldr	r0, [pc, #112]	; (8004758 <MX_GPIO_Init+0xfc>)
 80046e8:	f000 feb0 	bl	800544c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80046ec:	2200      	movs	r2, #0
 80046ee:	2120      	movs	r1, #32
 80046f0:	481a      	ldr	r0, [pc, #104]	; (800475c <MX_GPIO_Init+0x100>)
 80046f2:	f000 feab 	bl	800544c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80046f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80046fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004706:	f107 0314 	add.w	r3, r7, #20
 800470a:	4619      	mov	r1, r3
 800470c:	4812      	ldr	r0, [pc, #72]	; (8004758 <MX_GPIO_Init+0xfc>)
 800470e:	f000 fd19 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM1_PLS_Pin */
  GPIO_InitStruct.Pin = TIM1_PLS_Pin;
 8004712:	2304      	movs	r3, #4
 8004714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004716:	2301      	movs	r3, #1
 8004718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471e:	2300      	movs	r3, #0
 8004720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIM1_PLS_GPIO_Port, &GPIO_InitStruct);
 8004722:	f107 0314 	add.w	r3, r7, #20
 8004726:	4619      	mov	r1, r3
 8004728:	480b      	ldr	r0, [pc, #44]	; (8004758 <MX_GPIO_Init+0xfc>)
 800472a:	f000 fd0b 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800472e:	2320      	movs	r3, #32
 8004730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004732:	2301      	movs	r3, #1
 8004734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800473e:	f107 0314 	add.w	r3, r7, #20
 8004742:	4619      	mov	r1, r3
 8004744:	4805      	ldr	r0, [pc, #20]	; (800475c <MX_GPIO_Init+0x100>)
 8004746:	f000 fcfd 	bl	8005144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800474a:	bf00      	nop
 800474c:	3728      	adds	r7, #40	; 0x28
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800
 8004758:	40020800 	.word	0x40020800
 800475c:	40020000 	.word	0x40020000

08004760 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  rtc_display();
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    osDelay(100);
 8004768:	2064      	movs	r0, #100	; 0x64
 800476a:	f003 fe33 	bl	80083d4 <osDelay>
 800476e:	e7fb      	b.n	8004768 <StartDefaultTask+0x8>

08004770 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	 SKprintf("task2 start()\r\n");
 8004778:	4806      	ldr	r0, [pc, #24]	; (8004794 <StartTask02+0x24>)
 800477a:	f7ff fc9f 	bl	80040bc <SKprintf>

	task_chk_init();
 800477e:	f7fd ffd1 	bl	8002724 <task_chk_init>


	 SKprintf("task2 loop()\r\n");
 8004782:	4805      	ldr	r0, [pc, #20]	; (8004798 <StartTask02+0x28>)
 8004784:	f7ff fc9a 	bl	80040bc <SKprintf>
  /* Infinite loop */
  for(;;)
  {
	  //task_stack_chk();
	  debu_main();
 8004788:	f7fc fba8 	bl	8000edc <debu_main>
	  TimerEventCtrl();
 800478c:	f7fe fa6a 	bl	8002c64 <TimerEventCtrl>
  {
 8004790:	e7fa      	b.n	8004788 <StartTask02+0x18>
 8004792:	bf00      	nop
 8004794:	0800f538 	.word	0x0800f538
 8004798:	0800f548 	.word	0x0800f548

0800479c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
__weak void StartTask03(void *argument)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
    osDelay(100);
 80047a4:	2064      	movs	r0, #100	; 0x64
 80047a6:	f003 fe15 	bl	80083d4 <osDelay>
    //char c[2];

	//SKprintf_uart1("===================\r\n");
	SKprintf_uart1("=== UART1 START ===\r\n");
 80047aa:	4805      	ldr	r0, [pc, #20]	; (80047c0 <StartTask03+0x24>)
 80047ac:	f7ff fc42 	bl	8004034 <SKprintf_uart1>
	//SKprintf_uart1("===================\r\n");
	tasuk3_init();
 80047b0:	f7fe fb30 	bl	8002e14 <tasuk3_init>

	/* Infinite loop */

	for(;;)
	{
		rs485_com_task();
 80047b4:	f7fe fd3c 	bl	8003230 <rs485_com_task>
		osDelay(100);
 80047b8:	2064      	movs	r0, #100	; 0x64
 80047ba:	f003 fe0b 	bl	80083d4 <osDelay>
		rs485_com_task();
 80047be:	e7f9      	b.n	80047b4 <StartTask03+0x18>
 80047c0:	0800f558 	.word	0x0800f558

080047c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d101      	bne.n	80047da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80047d6:	f000 fb21 	bl	8004e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40014400 	.word	0x40014400

080047e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047ec:	b672      	cpsid	i
}
 80047ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047f0:	e7fe      	b.n	80047f0 <Error_Handler+0x8>
	...

080047f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_MspInit+0x54>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	4a11      	ldr	r2, [pc, #68]	; (8004848 <HAL_MspInit+0x54>)
 8004804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004808:	6453      	str	r3, [r2, #68]	; 0x44
 800480a:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <HAL_MspInit+0x54>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_MspInit+0x54>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <HAL_MspInit+0x54>)
 8004820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004824:	6413      	str	r3, [r2, #64]	; 0x40
 8004826:	4b08      	ldr	r3, [pc, #32]	; (8004848 <HAL_MspInit+0x54>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004832:	2200      	movs	r2, #0
 8004834:	210f      	movs	r1, #15
 8004836:	f06f 0001 	mvn.w	r0, #1
 800483a:	f000 fbc7 	bl	8004fcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800

0800484c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004854:	f107 030c 	add.w	r3, r7, #12
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a10      	ldr	r2, [pc, #64]	; (80048ac <HAL_RTC_MspInit+0x60>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d119      	bne.n	80048a2 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800486e:	2302      	movs	r3, #2
 8004870:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004876:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004878:	f107 030c 	add.w	r3, r7, #12
 800487c:	4618      	mov	r0, r3
 800487e:	f001 fac9 	bl	8005e14 <HAL_RCCEx_PeriphCLKConfig>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004888:	f7ff ffae 	bl	80047e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <HAL_RTC_MspInit+0x64>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8004892:	2200      	movs	r2, #0
 8004894:	2105      	movs	r1, #5
 8004896:	2003      	movs	r0, #3
 8004898:	f000 fb98 	bl	8004fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800489c:	2003      	movs	r0, #3
 800489e:	f000 fbb1 	bl	8005004 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80048a2:	bf00      	nop
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40002800 	.word	0x40002800
 80048b0:	42470e3c 	.word	0x42470e3c

080048b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <HAL_TIM_Base_MspInit+0x80>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d116      	bne.n	80048f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <HAL_TIM_Base_MspInit+0x84>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <HAL_TIM_Base_MspInit+0x84>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	6453      	str	r3, [r2, #68]	; 0x44
 80048d6:	4b18      	ldr	r3, [pc, #96]	; (8004938 <HAL_TIM_Base_MspInit+0x84>)
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 80048e2:	2200      	movs	r2, #0
 80048e4:	210f      	movs	r1, #15
 80048e6:	2019      	movs	r0, #25
 80048e8:	f000 fb70 	bl	8004fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80048ec:	2019      	movs	r0, #25
 80048ee:	f000 fb89 	bl	8005004 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80048f2:	e01a      	b.n	800492a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d115      	bne.n	800492a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <HAL_TIM_Base_MspInit+0x84>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <HAL_TIM_Base_MspInit+0x84>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	6413      	str	r3, [r2, #64]	; 0x40
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_TIM_Base_MspInit+0x84>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800491a:	2200      	movs	r2, #0
 800491c:	2105      	movs	r1, #5
 800491e:	201c      	movs	r0, #28
 8004920:	f000 fb54 	bl	8004fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004924:	201c      	movs	r0, #28
 8004926:	f000 fb6d 	bl	8005004 <HAL_NVIC_EnableIRQ>
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40010000 	.word	0x40010000
 8004938:	40023800 	.word	0x40023800

0800493c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08c      	sub	sp, #48	; 0x30
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004944:	f107 031c 	add.w	r3, r7, #28
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3a      	ldr	r2, [pc, #232]	; (8004a44 <HAL_UART_MspInit+0x108>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d135      	bne.n	80049ca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	4b39      	ldr	r3, [pc, #228]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004966:	4a38      	ldr	r2, [pc, #224]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 8004968:	f043 0310 	orr.w	r3, r3, #16
 800496c:	6453      	str	r3, [r2, #68]	; 0x44
 800496e:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	4b32      	ldr	r3, [pc, #200]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4a31      	ldr	r2, [pc, #196]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6313      	str	r3, [r2, #48]	; 0x30
 800498a:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004996:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800499a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499c:	2302      	movs	r3, #2
 800499e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a4:	2303      	movs	r3, #3
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049a8:	2307      	movs	r3, #7
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ac:	f107 031c 	add.w	r3, r7, #28
 80049b0:	4619      	mov	r1, r3
 80049b2:	4826      	ldr	r0, [pc, #152]	; (8004a4c <HAL_UART_MspInit+0x110>)
 80049b4:	f000 fbc6 	bl	8005144 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80049b8:	2200      	movs	r2, #0
 80049ba:	2105      	movs	r1, #5
 80049bc:	2025      	movs	r0, #37	; 0x25
 80049be:	f000 fb05 	bl	8004fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049c2:	2025      	movs	r0, #37	; 0x25
 80049c4:	f000 fb1e 	bl	8005004 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80049c8:	e038      	b.n	8004a3c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a20      	ldr	r2, [pc, #128]	; (8004a50 <HAL_UART_MspInit+0x114>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d133      	bne.n	8004a3c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	4a1a      	ldr	r2, [pc, #104]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 80049de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e2:	6413      	str	r3, [r2, #64]	; 0x40
 80049e4:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <HAL_UART_MspInit+0x10c>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a10:	2302      	movs	r3, #2
 8004a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a1c:	2307      	movs	r3, #7
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a20:	f107 031c 	add.w	r3, r7, #28
 8004a24:	4619      	mov	r1, r3
 8004a26:	4809      	ldr	r0, [pc, #36]	; (8004a4c <HAL_UART_MspInit+0x110>)
 8004a28:	f000 fb8c 	bl	8005144 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2105      	movs	r1, #5
 8004a30:	2026      	movs	r0, #38	; 0x26
 8004a32:	f000 facb 	bl	8004fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a36:	2026      	movs	r0, #38	; 0x26
 8004a38:	f000 fae4 	bl	8005004 <HAL_NVIC_EnableIRQ>
}
 8004a3c:	bf00      	nop
 8004a3e:	3730      	adds	r7, #48	; 0x30
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40011000 	.word	0x40011000
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	40020000 	.word	0x40020000
 8004a50:	40004400 	.word	0x40004400

08004a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	; 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004a64:	2300      	movs	r3, #0
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <HAL_InitTick+0xd0>)
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6c:	4a2d      	ldr	r2, [pc, #180]	; (8004b24 <HAL_InitTick+0xd0>)
 8004a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a72:	6453      	str	r3, [r2, #68]	; 0x44
 8004a74:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <HAL_InitTick+0xd0>)
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a80:	f107 020c 	add.w	r2, r7, #12
 8004a84:	f107 0310 	add.w	r3, r7, #16
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 f990 	bl	8005db0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004a90:	f001 f97a 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 8004a94:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <HAL_InitTick+0xd4>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	0c9b      	lsrs	r3, r3, #18
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8004aa4:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <HAL_InitTick+0xd8>)
 8004aa6:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <HAL_InitTick+0xdc>)
 8004aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <HAL_InitTick+0xd8>)
 8004aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ab0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8004ab2:	4a1e      	ldr	r2, [pc, #120]	; (8004b2c <HAL_InitTick+0xd8>)
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8004ab8:	4b1c      	ldr	r3, [pc, #112]	; (8004b2c <HAL_InitTick+0xd8>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_InitTick+0xd8>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_InitTick+0xd8>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8004aca:	4818      	ldr	r0, [pc, #96]	; (8004b2c <HAL_InitTick+0xd8>)
 8004acc:	f001 fea4 	bl	8006818 <HAL_TIM_Base_Init>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d11b      	bne.n	8004b16 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8004ade:	4813      	ldr	r0, [pc, #76]	; (8004b2c <HAL_InitTick+0xd8>)
 8004ae0:	f001 feea 	bl	80068b8 <HAL_TIM_Base_Start_IT>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d111      	bne.n	8004b16 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004af2:	2019      	movs	r0, #25
 8004af4:	f000 fa86 	bl	8005004 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b0f      	cmp	r3, #15
 8004afc:	d808      	bhi.n	8004b10 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004afe:	2200      	movs	r2, #0
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	2019      	movs	r0, #25
 8004b04:	f000 fa62 	bl	8004fcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b08:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <HAL_InitTick+0xe0>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e002      	b.n	8004b16 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3730      	adds	r7, #48	; 0x30
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40023800 	.word	0x40023800
 8004b28:	431bde83 	.word	0x431bde83
 8004b2c:	20001ec0 	.word	0x20001ec0
 8004b30:	40014400 	.word	0x40014400
 8004b34:	20000054 	.word	0x20000054

08004b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b3c:	e7fe      	b.n	8004b3c <NMI_Handler+0x4>

08004b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b42:	e7fe      	b.n	8004b42 <HardFault_Handler+0x4>

08004b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b48:	e7fe      	b.n	8004b48 <MemManage_Handler+0x4>

08004b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b4e:	e7fe      	b.n	8004b4e <BusFault_Handler+0x4>

08004b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b54:	e7fe      	b.n	8004b54 <UsageFault_Handler+0x4>

08004b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b56:	b480      	push	{r7}
 8004b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b5a:	bf00      	nop
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004b68:	4802      	ldr	r0, [pc, #8]	; (8004b74 <RTC_WKUP_IRQHandler+0x10>)
 8004b6a:	f001 fdff 	bl	800676c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20001d70 	.word	0x20001d70

08004b78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b7c:	4803      	ldr	r0, [pc, #12]	; (8004b8c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004b7e:	f001 fefd 	bl	800697c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004b82:	4803      	ldr	r0, [pc, #12]	; (8004b90 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004b84:	f001 fefa 	bl	800697c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//  usr_isr_tim1_up();	// SK ADD
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20001d90 	.word	0x20001d90
 8004b90:	20001ec0 	.word	0x20001ec0

08004b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b98:	4803      	ldr	r0, [pc, #12]	; (8004ba8 <TIM2_IRQHandler+0x14>)
 8004b9a:	f001 feef 	bl	800697c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  usr_isr_tim1_up();	// SK ADD
 8004b9e:	f7fd f871 	bl	8001c84 <usr_isr_tim1_up>

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20001dd8 	.word	0x20001dd8

08004bac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004bb0:	4802      	ldr	r0, [pc, #8]	; (8004bbc <USART1_IRQHandler+0x10>)
 8004bb2:	f002 fb87 	bl	80072c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20001e20 	.word	0x20001e20

08004bc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004bc4:	4802      	ldr	r0, [pc, #8]	; (8004bd0 <USART2_IRQHandler+0x10>)
 8004bc6:	f002 fb7d 	bl	80072c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bca:	bf00      	nop
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20001e64 	.word	0x20001e64

08004bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return 1;
 8004bd8:	2301      	movs	r3, #1
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <_kill>:

int _kill(int pid, int sig)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004bee:	f006 fb41 	bl	800b274 <__errno>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2216      	movs	r2, #22
 8004bf6:	601a      	str	r2, [r3, #0]
  return -1;
 8004bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <_exit>:

void _exit (int status)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ffe7 	bl	8004be4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c16:	e7fe      	b.n	8004c16 <_exit+0x12>

08004c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e00a      	b.n	8004c40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c2a:	f3af 8000 	nop.w
 8004c2e:	4601      	mov	r1, r0
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	60ba      	str	r2, [r7, #8]
 8004c36:	b2ca      	uxtb	r2, r1
 8004c38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	dbf0      	blt.n	8004c2a <_read+0x12>
  }

  return len;
 8004c48:	687b      	ldr	r3, [r7, #4]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e009      	b.n	8004c78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	60ba      	str	r2, [r7, #8]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	3301      	adds	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	dbf1      	blt.n	8004c64 <_write+0x12>
  }
  return len;
 8004c80:	687b      	ldr	r3, [r7, #4]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <_close>:

int _close(int file)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cb2:	605a      	str	r2, [r3, #4]
  return 0;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <_isatty>:

int _isatty(int file)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004cca:	2301      	movs	r3, #1
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cfc:	4a14      	ldr	r2, [pc, #80]	; (8004d50 <_sbrk+0x5c>)
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <_sbrk+0x60>)
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d08:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <_sbrk+0x64>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <_sbrk+0x64>)
 8004d12:	4a12      	ldr	r2, [pc, #72]	; (8004d5c <_sbrk+0x68>)
 8004d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <_sbrk+0x64>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d207      	bcs.n	8004d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d24:	f006 faa6 	bl	800b274 <__errno>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	220c      	movs	r2, #12
 8004d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	e009      	b.n	8004d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d34:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <_sbrk+0x64>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <_sbrk+0x64>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4413      	add	r3, r2
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <_sbrk+0x64>)
 8004d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20018000 	.word	0x20018000
 8004d54:	00000400 	.word	0x00000400
 8004d58:	20001f08 	.word	0x20001f08
 8004d5c:	20006870 	.word	0x20006870

08004d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <SystemInit+0x20>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	4a05      	ldr	r2, [pc, #20]	; (8004d80 <SystemInit+0x20>)
 8004d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000ed00 	.word	0xe000ed00

08004d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d88:	480d      	ldr	r0, [pc, #52]	; (8004dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004d8a:	490e      	ldr	r1, [pc, #56]	; (8004dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004d8c:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d90:	e002      	b.n	8004d98 <LoopCopyDataInit>

08004d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d96:	3304      	adds	r3, #4

08004d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d9c:	d3f9      	bcc.n	8004d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d9e:	4a0b      	ldr	r2, [pc, #44]	; (8004dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004da0:	4c0b      	ldr	r4, [pc, #44]	; (8004dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004da4:	e001      	b.n	8004daa <LoopFillZerobss>

08004da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004da8:	3204      	adds	r2, #4

08004daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dac:	d3fb      	bcc.n	8004da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004dae:	f7ff ffd7 	bl	8004d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004db2:	f006 fa65 	bl	800b280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004db6:	f7ff f9dd 	bl	8004174 <main>
  bx  lr    
 8004dba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004dbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dc4:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8004dc8:	0800fe70 	.word	0x0800fe70
  ldr r2, =_sbss
 8004dcc:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004dd0:	20006870 	.word	0x20006870

08004dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dd4:	e7fe      	b.n	8004dd4 <ADC_IRQHandler>
	...

08004dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ddc:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <HAL_Init+0x40>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0d      	ldr	r2, [pc, #52]	; (8004e18 <HAL_Init+0x40>)
 8004de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_Init+0x40>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <HAL_Init+0x40>)
 8004dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004df4:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <HAL_Init+0x40>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a07      	ldr	r2, [pc, #28]	; (8004e18 <HAL_Init+0x40>)
 8004dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e00:	2003      	movs	r0, #3
 8004e02:	f000 f8d8 	bl	8004fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e06:	200f      	movs	r0, #15
 8004e08:	f7ff fe24 	bl	8004a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e0c:	f7ff fcf2 	bl	80047f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40023c00 	.word	0x40023c00

08004e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <HAL_IncTick+0x20>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_IncTick+0x24>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <HAL_IncTick+0x24>)
 8004e2e:	6013      	str	r3, [r2, #0]
}
 8004e30:	bf00      	nop
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000058 	.word	0x20000058
 8004e40:	20001f0c 	.word	0x20001f0c

08004e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return uwTick;
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <HAL_GetTick+0x14>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20001f0c 	.word	0x20001f0c

08004e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e8e:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	60d3      	str	r3, [r2, #12]
}
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <__NVIC_GetPriorityGrouping+0x18>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	f003 0307 	and.w	r3, r3, #7
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	e000ed00 	.word	0xe000ed00

08004ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	db0b      	blt.n	8004eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	f003 021f 	and.w	r2, r3, #31
 8004ed8:	4907      	ldr	r1, [pc, #28]	; (8004ef8 <__NVIC_EnableIRQ+0x38>)
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	2001      	movs	r0, #1
 8004ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	e000e100 	.word	0xe000e100

08004efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	6039      	str	r1, [r7, #0]
 8004f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	db0a      	blt.n	8004f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	490c      	ldr	r1, [pc, #48]	; (8004f48 <__NVIC_SetPriority+0x4c>)
 8004f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1a:	0112      	lsls	r2, r2, #4
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	440b      	add	r3, r1
 8004f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f24:	e00a      	b.n	8004f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	4908      	ldr	r1, [pc, #32]	; (8004f4c <__NVIC_SetPriority+0x50>)
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	3b04      	subs	r3, #4
 8004f34:	0112      	lsls	r2, r2, #4
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	440b      	add	r3, r1
 8004f3a:	761a      	strb	r2, [r3, #24]
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	e000e100 	.word	0xe000e100
 8004f4c:	e000ed00 	.word	0xe000ed00

08004f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	; 0x24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f1c3 0307 	rsb	r3, r3, #7
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	bf28      	it	cs
 8004f6e:	2304      	movcs	r3, #4
 8004f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3304      	adds	r3, #4
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	d902      	bls.n	8004f80 <NVIC_EncodePriority+0x30>
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	3b03      	subs	r3, #3
 8004f7e:	e000      	b.n	8004f82 <NVIC_EncodePriority+0x32>
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f84:	f04f 32ff 	mov.w	r2, #4294967295
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43da      	mvns	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	401a      	ands	r2, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f98:	f04f 31ff 	mov.w	r1, #4294967295
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	43d9      	mvns	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa8:	4313      	orrs	r3, r2
         );
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3724      	adds	r7, #36	; 0x24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff ff4c 	bl	8004e5c <__NVIC_SetPriorityGrouping>
}
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fde:	f7ff ff61 	bl	8004ea4 <__NVIC_GetPriorityGrouping>
 8004fe2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	6978      	ldr	r0, [r7, #20]
 8004fea:	f7ff ffb1 	bl	8004f50 <NVIC_EncodePriority>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ff80 	bl	8004efc <__NVIC_SetPriority>
}
 8004ffc:	bf00      	nop
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800500e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff ff54 	bl	8004ec0 <__NVIC_EnableIRQ>
}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800502e:	f7ff ff09 	bl	8004e44 <HAL_GetTick>
 8005032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d008      	beq.n	8005052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e052      	b.n	80050f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0216 	bic.w	r2, r2, #22
 8005060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_DMA_Abort+0x62>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0208 	bic.w	r2, r2, #8
 8005090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0201 	bic.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050a2:	e013      	b.n	80050cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050a4:	f7ff fece 	bl	8004e44 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d90c      	bls.n	80050cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2203      	movs	r2, #3
 80050bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e015      	b.n	80050f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e4      	bne.n	80050a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050de:	223f      	movs	r2, #63	; 0x3f
 80050e0:	409a      	lsls	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d004      	beq.n	800511e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2280      	movs	r2, #128	; 0x80
 8005118:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e00c      	b.n	8005138 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2205      	movs	r2, #5
 8005122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005144:	b480      	push	{r7}
 8005146:	b089      	sub	sp, #36	; 0x24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005156:	2300      	movs	r3, #0
 8005158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	e159      	b.n	8005414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005160:	2201      	movs	r2, #1
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4013      	ands	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	429a      	cmp	r2, r3
 800517a:	f040 8148 	bne.w	800540e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b01      	cmp	r3, #1
 8005188:	d005      	beq.n	8005196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005192:	2b02      	cmp	r3, #2
 8005194:	d130      	bne.n	80051f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	2203      	movs	r2, #3
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4313      	orrs	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051cc:	2201      	movs	r2, #1
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43db      	mvns	r3, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4013      	ands	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 0201 	and.w	r2, r3, #1
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	2b03      	cmp	r3, #3
 8005202:	d017      	beq.n	8005234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	2203      	movs	r2, #3
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4013      	ands	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d123      	bne.n	8005288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	08da      	lsrs	r2, r3, #3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3208      	adds	r2, #8
 8005248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	220f      	movs	r2, #15
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	08da      	lsrs	r2, r3, #3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3208      	adds	r2, #8
 8005282:	69b9      	ldr	r1, [r7, #24]
 8005284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	2203      	movs	r2, #3
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	43db      	mvns	r3, r3
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	4013      	ands	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 0203 	and.w	r2, r3, #3
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80a2 	beq.w	800540e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	4b57      	ldr	r3, [pc, #348]	; (800542c <HAL_GPIO_Init+0x2e8>)
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	4a56      	ldr	r2, [pc, #344]	; (800542c <HAL_GPIO_Init+0x2e8>)
 80052d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052d8:	6453      	str	r3, [r2, #68]	; 0x44
 80052da:	4b54      	ldr	r3, [pc, #336]	; (800542c <HAL_GPIO_Init+0x2e8>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052e6:	4a52      	ldr	r2, [pc, #328]	; (8005430 <HAL_GPIO_Init+0x2ec>)
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	089b      	lsrs	r3, r3, #2
 80052ec:	3302      	adds	r3, #2
 80052ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	220f      	movs	r2, #15
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	43db      	mvns	r3, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4013      	ands	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a49      	ldr	r2, [pc, #292]	; (8005434 <HAL_GPIO_Init+0x2f0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d019      	beq.n	8005346 <HAL_GPIO_Init+0x202>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a48      	ldr	r2, [pc, #288]	; (8005438 <HAL_GPIO_Init+0x2f4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <HAL_GPIO_Init+0x1fe>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a47      	ldr	r2, [pc, #284]	; (800543c <HAL_GPIO_Init+0x2f8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00d      	beq.n	800533e <HAL_GPIO_Init+0x1fa>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a46      	ldr	r2, [pc, #280]	; (8005440 <HAL_GPIO_Init+0x2fc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <HAL_GPIO_Init+0x1f6>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a45      	ldr	r2, [pc, #276]	; (8005444 <HAL_GPIO_Init+0x300>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d101      	bne.n	8005336 <HAL_GPIO_Init+0x1f2>
 8005332:	2304      	movs	r3, #4
 8005334:	e008      	b.n	8005348 <HAL_GPIO_Init+0x204>
 8005336:	2307      	movs	r3, #7
 8005338:	e006      	b.n	8005348 <HAL_GPIO_Init+0x204>
 800533a:	2303      	movs	r3, #3
 800533c:	e004      	b.n	8005348 <HAL_GPIO_Init+0x204>
 800533e:	2302      	movs	r3, #2
 8005340:	e002      	b.n	8005348 <HAL_GPIO_Init+0x204>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <HAL_GPIO_Init+0x204>
 8005346:	2300      	movs	r3, #0
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	f002 0203 	and.w	r2, r2, #3
 800534e:	0092      	lsls	r2, r2, #2
 8005350:	4093      	lsls	r3, r2
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005358:	4935      	ldr	r1, [pc, #212]	; (8005430 <HAL_GPIO_Init+0x2ec>)
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	089b      	lsrs	r3, r3, #2
 800535e:	3302      	adds	r3, #2
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005366:	4b38      	ldr	r3, [pc, #224]	; (8005448 <HAL_GPIO_Init+0x304>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800538a:	4a2f      	ldr	r2, [pc, #188]	; (8005448 <HAL_GPIO_Init+0x304>)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005390:	4b2d      	ldr	r3, [pc, #180]	; (8005448 <HAL_GPIO_Init+0x304>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	43db      	mvns	r3, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4013      	ands	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053b4:	4a24      	ldr	r2, [pc, #144]	; (8005448 <HAL_GPIO_Init+0x304>)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053ba:	4b23      	ldr	r3, [pc, #140]	; (8005448 <HAL_GPIO_Init+0x304>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	43db      	mvns	r3, r3
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	4013      	ands	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053de:	4a1a      	ldr	r2, [pc, #104]	; (8005448 <HAL_GPIO_Init+0x304>)
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053e4:	4b18      	ldr	r3, [pc, #96]	; (8005448 <HAL_GPIO_Init+0x304>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	43db      	mvns	r3, r3
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	4013      	ands	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005408:	4a0f      	ldr	r2, [pc, #60]	; (8005448 <HAL_GPIO_Init+0x304>)
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	3301      	adds	r3, #1
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	2b0f      	cmp	r3, #15
 8005418:	f67f aea2 	bls.w	8005160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	3724      	adds	r7, #36	; 0x24
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800
 8005430:	40013800 	.word	0x40013800
 8005434:	40020000 	.word	0x40020000
 8005438:	40020400 	.word	0x40020400
 800543c:	40020800 	.word	0x40020800
 8005440:	40020c00 	.word	0x40020c00
 8005444:	40021000 	.word	0x40021000
 8005448:	40013c00 	.word	0x40013c00

0800544c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	807b      	strh	r3, [r7, #2]
 8005458:	4613      	mov	r3, r2
 800545a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800545c:	787b      	ldrb	r3, [r7, #1]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005462:	887a      	ldrh	r2, [r7, #2]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005468:	e003      	b.n	8005472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800546a:	887b      	ldrh	r3, [r7, #2]
 800546c:	041a      	lsls	r2, r3, #16
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	619a      	str	r2, [r3, #24]
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e267      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d075      	beq.n	800558a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800549e:	4b88      	ldr	r3, [pc, #544]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 030c 	and.w	r3, r3, #12
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d00c      	beq.n	80054c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054aa:	4b85      	ldr	r3, [pc, #532]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d112      	bne.n	80054dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b6:	4b82      	ldr	r3, [pc, #520]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c2:	d10b      	bne.n	80054dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c4:	4b7e      	ldr	r3, [pc, #504]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d05b      	beq.n	8005588 <HAL_RCC_OscConfig+0x108>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d157      	bne.n	8005588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e242      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e4:	d106      	bne.n	80054f4 <HAL_RCC_OscConfig+0x74>
 80054e6:	4b76      	ldr	r3, [pc, #472]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a75      	ldr	r2, [pc, #468]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80054ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e01d      	b.n	8005530 <HAL_RCC_OscConfig+0xb0>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054fc:	d10c      	bne.n	8005518 <HAL_RCC_OscConfig+0x98>
 80054fe:	4b70      	ldr	r3, [pc, #448]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a6f      	ldr	r2, [pc, #444]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 8005504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	4b6d      	ldr	r3, [pc, #436]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6c      	ldr	r2, [pc, #432]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 8005510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e00b      	b.n	8005530 <HAL_RCC_OscConfig+0xb0>
 8005518:	4b69      	ldr	r3, [pc, #420]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a68      	ldr	r2, [pc, #416]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 800551e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	4b66      	ldr	r3, [pc, #408]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a65      	ldr	r2, [pc, #404]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 800552a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800552e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d013      	beq.n	8005560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7ff fc84 	bl	8004e44 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005540:	f7ff fc80 	bl	8004e44 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b64      	cmp	r3, #100	; 0x64
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e207      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005552:	4b5b      	ldr	r3, [pc, #364]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCC_OscConfig+0xc0>
 800555e:	e014      	b.n	800558a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005560:	f7ff fc70 	bl	8004e44 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005568:	f7ff fc6c 	bl	8004e44 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b64      	cmp	r3, #100	; 0x64
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e1f3      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800557a:	4b51      	ldr	r3, [pc, #324]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0xe8>
 8005586:	e000      	b.n	800558a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d063      	beq.n	800565e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005596:	4b4a      	ldr	r3, [pc, #296]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055a2:	4b47      	ldr	r3, [pc, #284]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d11c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ae:	4b44      	ldr	r3, [pc, #272]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d116      	bne.n	80055e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ba:	4b41      	ldr	r3, [pc, #260]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_RCC_OscConfig+0x152>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d001      	beq.n	80055d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e1c7      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d2:	4b3b      	ldr	r3, [pc, #236]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	4937      	ldr	r1, [pc, #220]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055e6:	e03a      	b.n	800565e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d020      	beq.n	8005632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055f0:	4b34      	ldr	r3, [pc, #208]	; (80056c4 <HAL_RCC_OscConfig+0x244>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f6:	f7ff fc25 	bl	8004e44 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055fe:	f7ff fc21 	bl	8004e44 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e1a8      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005610:	4b2b      	ldr	r3, [pc, #172]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561c:	4b28      	ldr	r3, [pc, #160]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	4925      	ldr	r1, [pc, #148]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 800562c:	4313      	orrs	r3, r2
 800562e:	600b      	str	r3, [r1, #0]
 8005630:	e015      	b.n	800565e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <HAL_RCC_OscConfig+0x244>)
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005638:	f7ff fc04 	bl	8004e44 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005640:	f7ff fc00 	bl	8004e44 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e187      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005652:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f0      	bne.n	8005640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d036      	beq.n	80056d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d016      	beq.n	80056a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005672:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <HAL_RCC_OscConfig+0x248>)
 8005674:	2201      	movs	r2, #1
 8005676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7ff fbe4 	bl	8004e44 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005680:	f7ff fbe0 	bl	8004e44 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e167      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <HAL_RCC_OscConfig+0x240>)
 8005694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f0      	beq.n	8005680 <HAL_RCC_OscConfig+0x200>
 800569e:	e01b      	b.n	80056d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a0:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <HAL_RCC_OscConfig+0x248>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a6:	f7ff fbcd 	bl	8004e44 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ac:	e00e      	b.n	80056cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ae:	f7ff fbc9 	bl	8004e44 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d907      	bls.n	80056cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e150      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
 80056c0:	40023800 	.word	0x40023800
 80056c4:	42470000 	.word	0x42470000
 80056c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056cc:	4b88      	ldr	r3, [pc, #544]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 80056ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1ea      	bne.n	80056ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8097 	beq.w	8005814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e6:	2300      	movs	r3, #0
 80056e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ea:	4b81      	ldr	r3, [pc, #516]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10f      	bne.n	8005716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f6:	2300      	movs	r3, #0
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	4b7d      	ldr	r3, [pc, #500]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	4a7c      	ldr	r2, [pc, #496]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005704:	6413      	str	r3, [r2, #64]	; 0x40
 8005706:	4b7a      	ldr	r3, [pc, #488]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570e:	60bb      	str	r3, [r7, #8]
 8005710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005716:	4b77      	ldr	r3, [pc, #476]	; (80058f4 <HAL_RCC_OscConfig+0x474>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d118      	bne.n	8005754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005722:	4b74      	ldr	r3, [pc, #464]	; (80058f4 <HAL_RCC_OscConfig+0x474>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a73      	ldr	r2, [pc, #460]	; (80058f4 <HAL_RCC_OscConfig+0x474>)
 8005728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800572e:	f7ff fb89 	bl	8004e44 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005736:	f7ff fb85 	bl	8004e44 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e10c      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005748:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <HAL_RCC_OscConfig+0x474>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d106      	bne.n	800576a <HAL_RCC_OscConfig+0x2ea>
 800575c:	4b64      	ldr	r3, [pc, #400]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	4a63      	ldr	r2, [pc, #396]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005762:	f043 0301 	orr.w	r3, r3, #1
 8005766:	6713      	str	r3, [r2, #112]	; 0x70
 8005768:	e01c      	b.n	80057a4 <HAL_RCC_OscConfig+0x324>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b05      	cmp	r3, #5
 8005770:	d10c      	bne.n	800578c <HAL_RCC_OscConfig+0x30c>
 8005772:	4b5f      	ldr	r3, [pc, #380]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	4a5e      	ldr	r2, [pc, #376]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005778:	f043 0304 	orr.w	r3, r3, #4
 800577c:	6713      	str	r3, [r2, #112]	; 0x70
 800577e:	4b5c      	ldr	r3, [pc, #368]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a5b      	ldr	r2, [pc, #364]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
 800578a:	e00b      	b.n	80057a4 <HAL_RCC_OscConfig+0x324>
 800578c:	4b58      	ldr	r3, [pc, #352]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005790:	4a57      	ldr	r2, [pc, #348]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005792:	f023 0301 	bic.w	r3, r3, #1
 8005796:	6713      	str	r3, [r2, #112]	; 0x70
 8005798:	4b55      	ldr	r3, [pc, #340]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	4a54      	ldr	r2, [pc, #336]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 800579e:	f023 0304 	bic.w	r3, r3, #4
 80057a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d015      	beq.n	80057d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7ff fb4a 	bl	8004e44 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b4:	f7ff fb46 	bl	8004e44 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e0cb      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ca:	4b49      	ldr	r3, [pc, #292]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0ee      	beq.n	80057b4 <HAL_RCC_OscConfig+0x334>
 80057d6:	e014      	b.n	8005802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d8:	f7ff fb34 	bl	8004e44 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057de:	e00a      	b.n	80057f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057e0:	f7ff fb30 	bl	8004e44 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e0b5      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057f6:	4b3e      	ldr	r3, [pc, #248]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1ee      	bne.n	80057e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005802:	7dfb      	ldrb	r3, [r7, #23]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d105      	bne.n	8005814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005808:	4b39      	ldr	r3, [pc, #228]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	4a38      	ldr	r2, [pc, #224]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 800580e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80a1 	beq.w	8005960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800581e:	4b34      	ldr	r3, [pc, #208]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	2b08      	cmp	r3, #8
 8005828:	d05c      	beq.n	80058e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d141      	bne.n	80058b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005832:	4b31      	ldr	r3, [pc, #196]	; (80058f8 <HAL_RCC_OscConfig+0x478>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7ff fb04 	bl	8004e44 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005840:	f7ff fb00 	bl	8004e44 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e087      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005852:	4b27      	ldr	r3, [pc, #156]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69da      	ldr	r2, [r3, #28]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	019b      	lsls	r3, r3, #6
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	3b01      	subs	r3, #1
 8005878:	041b      	lsls	r3, r3, #16
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	061b      	lsls	r3, r3, #24
 8005882:	491b      	ldr	r1, [pc, #108]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 8005884:	4313      	orrs	r3, r2
 8005886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005888:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <HAL_RCC_OscConfig+0x478>)
 800588a:	2201      	movs	r2, #1
 800588c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588e:	f7ff fad9 	bl	8004e44 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005896:	f7ff fad5 	bl	8004e44 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e05c      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCC_OscConfig+0x416>
 80058b4:	e054      	b.n	8005960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b6:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <HAL_RCC_OscConfig+0x478>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058bc:	f7ff fac2 	bl	8004e44 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058c4:	f7ff fabe 	bl	8004e44 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e045      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <HAL_RCC_OscConfig+0x470>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f0      	bne.n	80058c4 <HAL_RCC_OscConfig+0x444>
 80058e2:	e03d      	b.n	8005960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d107      	bne.n	80058fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e038      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
 80058f0:	40023800 	.word	0x40023800
 80058f4:	40007000 	.word	0x40007000
 80058f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058fc:	4b1b      	ldr	r3, [pc, #108]	; (800596c <HAL_RCC_OscConfig+0x4ec>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d028      	beq.n	800595c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005914:	429a      	cmp	r2, r3
 8005916:	d121      	bne.n	800595c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005922:	429a      	cmp	r2, r3
 8005924:	d11a      	bne.n	800595c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800592c:	4013      	ands	r3, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005934:	4293      	cmp	r3, r2
 8005936:	d111      	bne.n	800595c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	3b01      	subs	r3, #1
 8005946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005948:	429a      	cmp	r2, r3
 800594a:	d107      	bne.n	800595c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005958:	429a      	cmp	r2, r3
 800595a:	d001      	beq.n	8005960 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800

08005970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0cc      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005984:	4b68      	ldr	r3, [pc, #416]	; (8005b28 <HAL_RCC_ClockConfig+0x1b8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d90c      	bls.n	80059ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005992:	4b65      	ldr	r3, [pc, #404]	; (8005b28 <HAL_RCC_ClockConfig+0x1b8>)
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800599a:	4b63      	ldr	r3, [pc, #396]	; (8005b28 <HAL_RCC_ClockConfig+0x1b8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0b8      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d020      	beq.n	80059fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c4:	4b59      	ldr	r3, [pc, #356]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	4a58      	ldr	r2, [pc, #352]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059dc:	4b53      	ldr	r3, [pc, #332]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	4a52      	ldr	r2, [pc, #328]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e8:	4b50      	ldr	r3, [pc, #320]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	494d      	ldr	r1, [pc, #308]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d044      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d107      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0e:	4b47      	ldr	r3, [pc, #284]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d119      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e07f      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d003      	beq.n	8005a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d107      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2e:	4b3f      	ldr	r3, [pc, #252]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e06f      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3e:	4b3b      	ldr	r3, [pc, #236]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e067      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a4e:	4b37      	ldr	r3, [pc, #220]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f023 0203 	bic.w	r2, r3, #3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4934      	ldr	r1, [pc, #208]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a60:	f7ff f9f0 	bl	8004e44 <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a66:	e00a      	b.n	8005a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a68:	f7ff f9ec 	bl	8004e44 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e04f      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a7e:	4b2b      	ldr	r3, [pc, #172]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 020c 	and.w	r2, r3, #12
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d1eb      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a90:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <HAL_RCC_ClockConfig+0x1b8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d20c      	bcs.n	8005ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9e:	4b22      	ldr	r3, [pc, #136]	; (8005b28 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa6:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d001      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e032      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac4:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4916      	ldr	r1, [pc, #88]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ae2:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	490e      	ldr	r1, [pc, #56]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005af6:	f000 f821 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	490a      	ldr	r1, [pc, #40]	; (8005b30 <HAL_RCC_ClockConfig+0x1c0>)
 8005b08:	5ccb      	ldrb	r3, [r1, r3]
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	4a09      	ldr	r2, [pc, #36]	; (8005b34 <HAL_RCC_ClockConfig+0x1c4>)
 8005b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b12:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <HAL_RCC_ClockConfig+0x1c8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe ff9c 	bl	8004a54 <HAL_InitTick>

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40023c00 	.word	0x40023c00
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	0800fa50 	.word	0x0800fa50
 8005b34:	20000050 	.word	0x20000050
 8005b38:	20000054 	.word	0x20000054

08005b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b40:	b094      	sub	sp, #80	; 0x50
 8005b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	647b      	str	r3, [r7, #68]	; 0x44
 8005b48:	2300      	movs	r3, #0
 8005b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b54:	4b79      	ldr	r3, [pc, #484]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 030c 	and.w	r3, r3, #12
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d00d      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x40>
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	f200 80e1 	bhi.w	8005d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x34>
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d003      	beq.n	8005b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b6e:	e0db      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b70:	4b73      	ldr	r3, [pc, #460]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b74:	e0db      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b76:	4b73      	ldr	r3, [pc, #460]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b7a:	e0d8      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b7c:	4b6f      	ldr	r3, [pc, #444]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b86:	4b6d      	ldr	r3, [pc, #436]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d063      	beq.n	8005c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b92:	4b6a      	ldr	r3, [pc, #424]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	099b      	lsrs	r3, r3, #6
 8005b98:	2200      	movs	r2, #0
 8005b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8005baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bae:	4622      	mov	r2, r4
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	f04f 0000 	mov.w	r0, #0
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	0159      	lsls	r1, r3, #5
 8005bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bc0:	0150      	lsls	r0, r2, #5
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	1a51      	subs	r1, r2, r1
 8005bca:	6139      	str	r1, [r7, #16]
 8005bcc:	4629      	mov	r1, r5
 8005bce:	eb63 0301 	sbc.w	r3, r3, r1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005be0:	4659      	mov	r1, fp
 8005be2:	018b      	lsls	r3, r1, #6
 8005be4:	4651      	mov	r1, sl
 8005be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bea:	4651      	mov	r1, sl
 8005bec:	018a      	lsls	r2, r1, #6
 8005bee:	4651      	mov	r1, sl
 8005bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c0e:	4690      	mov	r8, r2
 8005c10:	4699      	mov	r9, r3
 8005c12:	4623      	mov	r3, r4
 8005c14:	eb18 0303 	adds.w	r3, r8, r3
 8005c18:	60bb      	str	r3, [r7, #8]
 8005c1a:	462b      	mov	r3, r5
 8005c1c:	eb49 0303 	adc.w	r3, r9, r3
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c2e:	4629      	mov	r1, r5
 8005c30:	024b      	lsls	r3, r1, #9
 8005c32:	4621      	mov	r1, r4
 8005c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c38:	4621      	mov	r1, r4
 8005c3a:	024a      	lsls	r2, r1, #9
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c42:	2200      	movs	r2, #0
 8005c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c4c:	f7fa ffc4 	bl	8000bd8 <__aeabi_uldivmod>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4613      	mov	r3, r2
 8005c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c58:	e058      	b.n	8005d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c5a:	4b38      	ldr	r3, [pc, #224]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	099b      	lsrs	r3, r3, #6
 8005c60:	2200      	movs	r2, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	4611      	mov	r1, r2
 8005c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c6a:	623b      	str	r3, [r7, #32]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c74:	4642      	mov	r2, r8
 8005c76:	464b      	mov	r3, r9
 8005c78:	f04f 0000 	mov.w	r0, #0
 8005c7c:	f04f 0100 	mov.w	r1, #0
 8005c80:	0159      	lsls	r1, r3, #5
 8005c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c86:	0150      	lsls	r0, r2, #5
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c92:	4649      	mov	r1, r9
 8005c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cac:	ebb2 040a 	subs.w	r4, r2, sl
 8005cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	00eb      	lsls	r3, r5, #3
 8005cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cc2:	00e2      	lsls	r2, r4, #3
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	4643      	mov	r3, r8
 8005cca:	18e3      	adds	r3, r4, r3
 8005ccc:	603b      	str	r3, [r7, #0]
 8005cce:	464b      	mov	r3, r9
 8005cd0:	eb45 0303 	adc.w	r3, r5, r3
 8005cd4:	607b      	str	r3, [r7, #4]
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	028b      	lsls	r3, r1, #10
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cec:	4621      	mov	r1, r4
 8005cee:	028a      	lsls	r2, r1, #10
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	61fa      	str	r2, [r7, #28]
 8005cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d00:	f7fa ff6a 	bl	8000bd8 <__aeabi_uldivmod>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4613      	mov	r3, r2
 8005d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	0c1b      	lsrs	r3, r3, #16
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	3301      	adds	r3, #1
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d26:	e002      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3750      	adds	r7, #80	; 0x50
 8005d34:	46bd      	mov	sp, r7
 8005d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	00f42400 	.word	0x00f42400
 8005d44:	007a1200 	.word	0x007a1200

08005d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d4c:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	20000050 	.word	0x20000050

08005d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d64:	f7ff fff0 	bl	8005d48 <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	0a9b      	lsrs	r3, r3, #10
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4903      	ldr	r1, [pc, #12]	; (8005d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	0800fa60 	.word	0x0800fa60

08005d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d8c:	f7ff ffdc 	bl	8005d48 <HAL_RCC_GetHCLKFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	0b5b      	lsrs	r3, r3, #13
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4903      	ldr	r1, [pc, #12]	; (8005dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40023800 	.word	0x40023800
 8005dac:	0800fa60 	.word	0x0800fa60

08005db0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	220f      	movs	r2, #15
 8005dbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005dc0:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <HAL_RCC_GetClockConfig+0x5c>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0203 	and.w	r2, r3, #3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <HAL_RCC_GetClockConfig+0x5c>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005dd8:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <HAL_RCC_GetClockConfig+0x5c>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005de4:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <HAL_RCC_GetClockConfig+0x5c>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005df2:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <HAL_RCC_GetClockConfig+0x60>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0207 	and.w	r2, r3, #7
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	601a      	str	r2, [r3, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	40023c00 	.word	0x40023c00

08005e14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d105      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d035      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e3c:	4b67      	ldr	r3, [pc, #412]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e42:	f7fe ffff 	bl	8004e44 <HAL_GetTick>
 8005e46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e48:	e008      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e4a:	f7fe fffb 	bl	8004e44 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e0ba      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e5c:	4b60      	ldr	r3, [pc, #384]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f0      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	019a      	lsls	r2, r3, #6
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	071b      	lsls	r3, r3, #28
 8005e74:	495a      	ldr	r1, [pc, #360]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e7c:	4b57      	ldr	r3, [pc, #348]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e82:	f7fe ffdf 	bl	8004e44 <HAL_GetTick>
 8005e86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e88:	e008      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e8a:	f7fe ffdb 	bl	8004e44 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e09a      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e9c:	4b50      	ldr	r3, [pc, #320]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8083 	beq.w	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	4b49      	ldr	r3, [pc, #292]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	4a48      	ldr	r2, [pc, #288]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ec6:	4b46      	ldr	r3, [pc, #280]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ed2:	4b44      	ldr	r3, [pc, #272]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a43      	ldr	r2, [pc, #268]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005edc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ede:	f7fe ffb1 	bl	8004e44 <HAL_GetTick>
 8005ee2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ee6:	f7fe ffad 	bl	8004e44 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e06c      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ef8:	4b3a      	ldr	r3, [pc, #232]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f04:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02f      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d028      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f22:	4b2f      	ldr	r3, [pc, #188]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f2c:	4b2e      	ldr	r3, [pc, #184]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f32:	4b2d      	ldr	r3, [pc, #180]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f38:	4a29      	ldr	r2, [pc, #164]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f3e:	4b28      	ldr	r3, [pc, #160]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d114      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f4a:	f7fe ff7b 	bl	8004e44 <HAL_GetTick>
 8005f4e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f50:	e00a      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f52:	f7fe ff77 	bl	8004e44 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e034      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f68:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0ee      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f80:	d10d      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f82:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f96:	4912      	ldr	r1, [pc, #72]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	608b      	str	r3, [r1, #8]
 8005f9c:	e005      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	4a0f      	ldr	r2, [pc, #60]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fa4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005fa8:	6093      	str	r3, [r2, #8]
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb6:	490a      	ldr	r1, [pc, #40]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	7c1a      	ldrb	r2, [r3, #16]
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fce:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	42470068 	.word	0x42470068
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40007000 	.word	0x40007000
 8005fe8:	42470e40 	.word	0x42470e40
 8005fec:	424711e0 	.word	0x424711e0

08005ff0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e066      	b.n	80060d4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	7f5b      	ldrb	r3, [r3, #29]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d105      	bne.n	800601c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fe fc18 	bl	800484c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	22ca      	movs	r2, #202	; 0xca
 8006028:	625a      	str	r2, [r3, #36]	; 0x24
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2253      	movs	r2, #83	; 0x53
 8006030:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fa45 	bl	80064c2 <RTC_EnterInitMode>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d12c      	bne.n	800609c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006054:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6899      	ldr	r1, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68d2      	ldr	r2, [r2, #12]
 800607c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6919      	ldr	r1, [r3, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	041a      	lsls	r2, r3, #16
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fa4c 	bl	8006530 <RTC_ExitInitMode>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d113      	bne.n	80060ca <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	22ff      	movs	r2, #255	; 0xff
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060dc:	b590      	push	{r4, r7, lr}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	7f1b      	ldrb	r3, [r3, #28]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_RTC_SetTime+0x1c>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e087      	b.n	8006208 <HAL_RTC_SetTime+0x12c>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2202      	movs	r2, #2
 8006102:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d126      	bne.n	8006158 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2200      	movs	r2, #0
 800611c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fa29 	bl	800657a <RTC_ByteToBcd2>
 8006128:	4603      	mov	r3, r0
 800612a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fa22 	bl	800657a <RTC_ByteToBcd2>
 8006136:	4603      	mov	r3, r0
 8006138:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800613a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	789b      	ldrb	r3, [r3, #2]
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fa1a 	bl	800657a <RTC_ByteToBcd2>
 8006146:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006148:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	78db      	ldrb	r3, [r3, #3]
 8006150:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	e018      	b.n	800618a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2200      	movs	r2, #0
 800616a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006178:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800617e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	78db      	ldrb	r3, [r3, #3]
 8006184:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	22ca      	movs	r2, #202	; 0xca
 8006190:	625a      	str	r2, [r3, #36]	; 0x24
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2253      	movs	r2, #83	; 0x53
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f991 	bl	80064c2 <RTC_EnterInitMode>
 80061a0:	4603      	mov	r3, r0
 80061a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80061a4:	7cfb      	ldrb	r3, [r7, #19]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d120      	bne.n	80061ec <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80061b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061b8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6899      	ldr	r1, [r3, #8]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	431a      	orrs	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f9a4 	bl	8006530 <RTC_ExitInitMode>
 80061e8:	4603      	mov	r3, r0
 80061ea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80061ec:	7cfb      	ldrb	r3, [r7, #19]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	22ff      	movs	r2, #255	; 0xff
 80061fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	771a      	strb	r2, [r3, #28]

  return status;
 8006206:	7cfb      	ldrb	r3, [r7, #19]
}
 8006208:	4618      	mov	r0, r3
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	bd90      	pop	{r4, r7, pc}

08006210 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006242:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006246:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	0c1b      	lsrs	r3, r3, #16
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006252:	b2da      	uxtb	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006262:	b2da      	uxtb	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006270:	b2da      	uxtb	r2, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	0d9b      	lsrs	r3, r3, #22
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	b2da      	uxtb	r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d11a      	bne.n	80062c2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f000 f98f 	bl	80065b4 <RTC_Bcd2ToByte>
 8006296:	4603      	mov	r3, r0
 8006298:	461a      	mov	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f986 	bl	80065b4 <RTC_Bcd2ToByte>
 80062a8:	4603      	mov	r3, r0
 80062aa:	461a      	mov	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	789b      	ldrb	r3, [r3, #2]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 f97d 	bl	80065b4 <RTC_Bcd2ToByte>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	7f1b      	ldrb	r3, [r3, #28]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_RTC_SetDate+0x1c>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e071      	b.n	80063cc <HAL_RTC_SetDate+0x100>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2202      	movs	r2, #2
 80062f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10e      	bne.n	8006318 <HAL_RTC_SetDate+0x4c>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	785b      	ldrb	r3, [r3, #1]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	f023 0310 	bic.w	r3, r3, #16
 800630e:	b2db      	uxtb	r3, r3
 8006310:	330a      	adds	r3, #10
 8006312:	b2da      	uxtb	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d11c      	bne.n	8006358 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	78db      	ldrb	r3, [r3, #3]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 f929 	bl	800657a <RTC_ByteToBcd2>
 8006328:	4603      	mov	r3, r0
 800632a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	785b      	ldrb	r3, [r3, #1]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 f922 	bl	800657a <RTC_ByteToBcd2>
 8006336:	4603      	mov	r3, r0
 8006338:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800633a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	789b      	ldrb	r3, [r3, #2]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 f91a 	bl	800657a <RTC_ByteToBcd2>
 8006346:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006348:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	e00e      	b.n	8006376 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	78db      	ldrb	r3, [r3, #3]
 800635c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006364:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800636a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	22ca      	movs	r2, #202	; 0xca
 800637c:	625a      	str	r2, [r3, #36]	; 0x24
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2253      	movs	r2, #83	; 0x53
 8006384:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f89b 	bl	80064c2 <RTC_EnterInitMode>
 800638c:	4603      	mov	r3, r0
 800638e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006390:	7cfb      	ldrb	r3, [r7, #19]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10c      	bne.n	80063b0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f8c2 	bl	8006530 <RTC_ExitInitMode>
 80063ac:	4603      	mov	r3, r0
 80063ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80063b0:	7cfb      	ldrb	r3, [r7, #19]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	22ff      	movs	r2, #255	; 0xff
 80063c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	771a      	strb	r2, [r3, #28]

  return status;
 80063ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd90      	pop	{r4, r7, pc}

080063d4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	0c1b      	lsrs	r3, r3, #16
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	0a1b      	lsrs	r3, r3, #8
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006416:	b2da      	uxtb	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	0b5b      	lsrs	r3, r3, #13
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	b2da      	uxtb	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d11a      	bne.n	8006468 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	78db      	ldrb	r3, [r3, #3]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f8bc 	bl	80065b4 <RTC_Bcd2ToByte>
 800643c:	4603      	mov	r3, r0
 800643e:	461a      	mov	r2, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	4618      	mov	r0, r3
 800644a:	f000 f8b3 	bl	80065b4 <RTC_Bcd2ToByte>
 800644e:	4603      	mov	r3, r0
 8006450:	461a      	mov	r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	789b      	ldrb	r3, [r3, #2]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 f8aa 	bl	80065b4 <RTC_Bcd2ToByte>
 8006460:	4603      	mov	r3, r0
 8006462:	461a      	mov	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800648c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800648e:	f7fe fcd9 	bl	8004e44 <HAL_GetTick>
 8006492:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006494:	e009      	b.n	80064aa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006496:	f7fe fcd5 	bl	8004e44 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064a4:	d901      	bls.n	80064aa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e007      	b.n	80064ba <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0320 	and.w	r3, r3, #32
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0ee      	beq.n	8006496 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d122      	bne.n	8006526 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064f0:	f7fe fca8 	bl	8004e44 <HAL_GetTick>
 80064f4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80064f6:	e00c      	b.n	8006512 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064f8:	f7fe fca4 	bl	8004e44 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006506:	d904      	bls.n	8006512 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2204      	movs	r2, #4
 800650c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <RTC_EnterInitMode+0x64>
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d1e8      	bne.n	80064f8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006526:	7bfb      	ldrb	r3, [r7, #15]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800654a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff ff89 	bl	8006472 <HAL_RTC_WaitForSynchro>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2204      	movs	r2, #4
 800656a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	4603      	mov	r3, r0
 8006582:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006588:	e005      	b.n	8006596 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	3301      	adds	r3, #1
 800658e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	3b0a      	subs	r3, #10
 8006594:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	2b09      	cmp	r3, #9
 800659a:	d8f6      	bhi.n	800658a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	b2db      	uxtb	r3, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	0092      	lsls	r2, r2, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	4413      	add	r3, r2
 80065de:	b2db      	uxtb	r3, r3
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80065f8:	4b59      	ldr	r3, [pc, #356]	; (8006760 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a59      	ldr	r2, [pc, #356]	; (8006764 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	0adb      	lsrs	r3, r3, #11
 8006604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006608:	fb02 f303 	mul.w	r3, r2, r3
 800660c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	7f1b      	ldrb	r3, [r3, #28]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8006616:	2302      	movs	r3, #2
 8006618:	e09b      	b.n	8006752 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2202      	movs	r2, #2
 8006624:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	22ca      	movs	r2, #202	; 0xca
 800662c:	625a      	str	r2, [r3, #36]	; 0x24
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2253      	movs	r2, #83	; 0x53
 8006634:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006640:	2b00      	cmp	r3, #0
 8006642:	d017      	beq.n	8006674 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	1e5a      	subs	r2, r3, #1
 8006648:	617a      	str	r2, [r7, #20]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10b      	bne.n	8006666 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	22ff      	movs	r2, #255	; 0xff
 8006654:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2203      	movs	r2, #3
 800665a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e075      	b.n	8006752 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e7      	bne.n	8006644 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006682:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006694:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006696:	4b32      	ldr	r3, [pc, #200]	; (8006760 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a32      	ldr	r2, [pc, #200]	; (8006764 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	0adb      	lsrs	r3, r3, #11
 80066a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	1e5a      	subs	r2, r3, #1
 80066b0:	617a      	str	r2, [r7, #20]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10b      	bne.n	80066ce <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	22ff      	movs	r2, #255	; 0xff
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2203      	movs	r2, #3
 80066c2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e041      	b.n	8006752 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0e7      	beq.n	80066ac <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0207 	bic.w	r2, r2, #7
 80066ea:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6899      	ldr	r1, [r3, #8]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006704:	4b18      	ldr	r3, [pc, #96]	; (8006768 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a17      	ldr	r2, [pc, #92]	; (8006768 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800670a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800670e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006710:	4b15      	ldr	r3, [pc, #84]	; (8006768 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4a14      	ldr	r2, [pc, #80]	; (8006768 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006716:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800671a:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800672a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800673a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	22ff      	movs	r2, #255	; 0xff
 8006742:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	20000050 	.word	0x20000050
 8006764:	10624dd3 	.word	0x10624dd3
 8006768:	40013c00 	.word	0x40013c00

0800676c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00b      	beq.n	800679a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7fb fa20 	bl	8001bc8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006798:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800679c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80067a0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	775a      	strb	r2, [r3, #29]
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40013c00 	.word	0x40013c00

080067b4 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3350      	adds	r3, #80	; 0x50
 80067ca:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4413      	add	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	601a      	str	r2, [r3, #0]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3350      	adds	r3, #80	; 0x50
 80067fc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e041      	b.n	80068ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fe f838 	bl	80048b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3304      	adds	r3, #4
 8006854:	4619      	mov	r1, r3
 8006856:	4610      	mov	r0, r2
 8006858:	f000 fa88 	bl	8006d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d001      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e044      	b.n	800695a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a1e      	ldr	r2, [pc, #120]	; (8006968 <HAL_TIM_Base_Start_IT+0xb0>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d018      	beq.n	8006924 <HAL_TIM_Base_Start_IT+0x6c>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fa:	d013      	beq.n	8006924 <HAL_TIM_Base_Start_IT+0x6c>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1a      	ldr	r2, [pc, #104]	; (800696c <HAL_TIM_Base_Start_IT+0xb4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00e      	beq.n	8006924 <HAL_TIM_Base_Start_IT+0x6c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a19      	ldr	r2, [pc, #100]	; (8006970 <HAL_TIM_Base_Start_IT+0xb8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d009      	beq.n	8006924 <HAL_TIM_Base_Start_IT+0x6c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a17      	ldr	r2, [pc, #92]	; (8006974 <HAL_TIM_Base_Start_IT+0xbc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d004      	beq.n	8006924 <HAL_TIM_Base_Start_IT+0x6c>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a16      	ldr	r2, [pc, #88]	; (8006978 <HAL_TIM_Base_Start_IT+0xc0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d111      	bne.n	8006948 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b06      	cmp	r3, #6
 8006934:	d010      	beq.n	8006958 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0201 	orr.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006946:	e007      	b.n	8006958 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0201 	orr.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800
 8006974:	40000c00 	.word	0x40000c00
 8006978:	40014000 	.word	0x40014000

0800697c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b02      	cmp	r3, #2
 8006990:	d122      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b02      	cmp	r3, #2
 800699e:	d11b      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0202 	mvn.w	r2, #2
 80069a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f9b5 	bl	8006d2e <HAL_TIM_IC_CaptureCallback>
 80069c4:	e005      	b.n	80069d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f9a7 	bl	8006d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f9b8 	bl	8006d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d122      	bne.n	8006a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d11b      	bne.n	8006a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0204 	mvn.w	r2, #4
 80069fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f98b 	bl	8006d2e <HAL_TIM_IC_CaptureCallback>
 8006a18:	e005      	b.n	8006a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f97d 	bl	8006d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f98e 	bl	8006d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d122      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d11b      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0208 	mvn.w	r2, #8
 8006a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2204      	movs	r2, #4
 8006a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f961 	bl	8006d2e <HAL_TIM_IC_CaptureCallback>
 8006a6c:	e005      	b.n	8006a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f953 	bl	8006d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f964 	bl	8006d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b10      	cmp	r3, #16
 8006a8c:	d122      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d11b      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0210 	mvn.w	r2, #16
 8006aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f937 	bl	8006d2e <HAL_TIM_IC_CaptureCallback>
 8006ac0:	e005      	b.n	8006ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f929 	bl	8006d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f93a 	bl	8006d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10e      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d107      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f06f 0201 	mvn.w	r2, #1
 8006af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fd fe62 	bl	80047c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b80      	cmp	r3, #128	; 0x80
 8006b0c:	d10e      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b18:	2b80      	cmp	r3, #128	; 0x80
 8006b1a:	d107      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fab2 	bl	8007090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b36:	2b40      	cmp	r3, #64	; 0x40
 8006b38:	d10e      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b44:	2b40      	cmp	r3, #64	; 0x40
 8006b46:	d107      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f8ff 	bl	8006d56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d10e      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d107      	bne.n	8006b84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0220 	mvn.w	r2, #32
 8006b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa7c 	bl	800707c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e0b4      	b.n	8006d12 <HAL_TIM_ConfigClockSource+0x186>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be0:	d03e      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0xd4>
 8006be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be6:	f200 8087 	bhi.w	8006cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bee:	f000 8086 	beq.w	8006cfe <HAL_TIM_ConfigClockSource+0x172>
 8006bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf6:	d87f      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b70      	cmp	r3, #112	; 0x70
 8006bfa:	d01a      	beq.n	8006c32 <HAL_TIM_ConfigClockSource+0xa6>
 8006bfc:	2b70      	cmp	r3, #112	; 0x70
 8006bfe:	d87b      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b60      	cmp	r3, #96	; 0x60
 8006c02:	d050      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x11a>
 8006c04:	2b60      	cmp	r3, #96	; 0x60
 8006c06:	d877      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c08:	2b50      	cmp	r3, #80	; 0x50
 8006c0a:	d03c      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0xfa>
 8006c0c:	2b50      	cmp	r3, #80	; 0x50
 8006c0e:	d873      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d058      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x13a>
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d86f      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c18:	2b30      	cmp	r3, #48	; 0x30
 8006c1a:	d064      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c1c:	2b30      	cmp	r3, #48	; 0x30
 8006c1e:	d86b      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d060      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d867      	bhi.n	8006cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d05c      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c2c:	2b10      	cmp	r3, #16
 8006c2e:	d05a      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c30:	e062      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	6899      	ldr	r1, [r3, #8]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f000 f98d 	bl	8006f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	609a      	str	r2, [r3, #8]
      break;
 8006c5e:	e04f      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	6899      	ldr	r1, [r3, #8]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f000 f976 	bl	8006f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c82:	609a      	str	r2, [r3, #8]
      break;
 8006c84:	e03c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6859      	ldr	r1, [r3, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f000 f8ea 	bl	8006e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2150      	movs	r1, #80	; 0x50
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 f943 	bl	8006f2a <TIM_ITRx_SetConfig>
      break;
 8006ca4:	e02c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6859      	ldr	r1, [r3, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f000 f909 	bl	8006eca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2160      	movs	r1, #96	; 0x60
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 f933 	bl	8006f2a <TIM_ITRx_SetConfig>
      break;
 8006cc4:	e01c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6859      	ldr	r1, [r3, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f000 f8ca 	bl	8006e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2140      	movs	r1, #64	; 0x40
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 f923 	bl	8006f2a <TIM_ITRx_SetConfig>
      break;
 8006ce4:	e00c      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f000 f91a 	bl	8006f2a <TIM_ITRx_SetConfig>
      break;
 8006cf6:	e003      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006cfc:	e000      	b.n	8006d00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
	...

08006d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a34      	ldr	r2, [pc, #208]	; (8006e50 <TIM_Base_SetConfig+0xe4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d00f      	beq.n	8006da4 <TIM_Base_SetConfig+0x38>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8a:	d00b      	beq.n	8006da4 <TIM_Base_SetConfig+0x38>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a31      	ldr	r2, [pc, #196]	; (8006e54 <TIM_Base_SetConfig+0xe8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d007      	beq.n	8006da4 <TIM_Base_SetConfig+0x38>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a30      	ldr	r2, [pc, #192]	; (8006e58 <TIM_Base_SetConfig+0xec>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_Base_SetConfig+0x38>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a2f      	ldr	r2, [pc, #188]	; (8006e5c <TIM_Base_SetConfig+0xf0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d108      	bne.n	8006db6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a25      	ldr	r2, [pc, #148]	; (8006e50 <TIM_Base_SetConfig+0xe4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01b      	beq.n	8006df6 <TIM_Base_SetConfig+0x8a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc4:	d017      	beq.n	8006df6 <TIM_Base_SetConfig+0x8a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <TIM_Base_SetConfig+0xe8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <TIM_Base_SetConfig+0x8a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <TIM_Base_SetConfig+0xec>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00f      	beq.n	8006df6 <TIM_Base_SetConfig+0x8a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a20      	ldr	r2, [pc, #128]	; (8006e5c <TIM_Base_SetConfig+0xf0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00b      	beq.n	8006df6 <TIM_Base_SetConfig+0x8a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <TIM_Base_SetConfig+0xf4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d007      	beq.n	8006df6 <TIM_Base_SetConfig+0x8a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a1e      	ldr	r2, [pc, #120]	; (8006e64 <TIM_Base_SetConfig+0xf8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d003      	beq.n	8006df6 <TIM_Base_SetConfig+0x8a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <TIM_Base_SetConfig+0xfc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d108      	bne.n	8006e08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a08      	ldr	r2, [pc, #32]	; (8006e50 <TIM_Base_SetConfig+0xe4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d103      	bne.n	8006e3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	615a      	str	r2, [r3, #20]
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40010000 	.word	0x40010000
 8006e54:	40000400 	.word	0x40000400
 8006e58:	40000800 	.word	0x40000800
 8006e5c:	40000c00 	.word	0x40000c00
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40014400 	.word	0x40014400
 8006e68:	40014800 	.word	0x40014800

08006e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f023 0201 	bic.w	r2, r3, #1
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f023 030a 	bic.w	r3, r3, #10
 8006ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	621a      	str	r2, [r3, #32]
}
 8006ebe:	bf00      	nop
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b087      	sub	sp, #28
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 0210 	bic.w	r2, r3, #16
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	031b      	lsls	r3, r3, #12
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	621a      	str	r2, [r3, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f043 0307 	orr.w	r3, r3, #7
 8006f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	609a      	str	r2, [r3, #8]
}
 8006f54:	bf00      	nop
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	021a      	lsls	r2, r3, #8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	609a      	str	r2, [r3, #8]
}
 8006f94:	bf00      	nop
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e050      	b.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d018      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007004:	d013      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a18      	ldr	r2, [pc, #96]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00e      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a16      	ldr	r2, [pc, #88]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d009      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a15      	ldr	r2, [pc, #84]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d004      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a13      	ldr	r2, [pc, #76]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d10c      	bne.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4313      	orrs	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40010000 	.word	0x40010000
 800706c:	40000400 	.word	0x40000400
 8007070:	40000800 	.word	0x40000800
 8007074:	40000c00 	.word	0x40000c00
 8007078:	40014000 	.word	0x40014000

0800707c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e03f      	b.n	8007136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d106      	bne.n	80070d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7fd fc36 	bl	800493c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2224      	movs	r2, #36	; 0x24
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fddf 	bl	8007cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695a      	ldr	r2, [r3, #20]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800710c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800711c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b08a      	sub	sp, #40	; 0x28
 8007142:	af02      	add	r7, sp, #8
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	4613      	mov	r3, r2
 800714c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b20      	cmp	r3, #32
 800715c:	d17c      	bne.n	8007258 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <HAL_UART_Transmit+0x2c>
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e075      	b.n	800725a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_UART_Transmit+0x3e>
 8007178:	2302      	movs	r3, #2
 800717a:	e06e      	b.n	800725a <HAL_UART_Transmit+0x11c>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2221      	movs	r2, #33	; 0x21
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007192:	f7fd fe57 	bl	8004e44 <HAL_GetTick>
 8007196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	88fa      	ldrh	r2, [r7, #6]
 800719c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	88fa      	ldrh	r2, [r7, #6]
 80071a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ac:	d108      	bne.n	80071c0 <HAL_UART_Transmit+0x82>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	e003      	b.n	80071c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071c4:	2300      	movs	r3, #0
 80071c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071d0:	e02a      	b.n	8007228 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2200      	movs	r2, #0
 80071da:	2180      	movs	r1, #128	; 0x80
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fb1f 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e036      	b.n	800725a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007200:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	3302      	adds	r3, #2
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	e007      	b.n	800721a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	781a      	ldrb	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	3301      	adds	r3, #1
 8007218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1cf      	bne.n	80071d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2200      	movs	r2, #0
 800723a:	2140      	movs	r1, #64	; 0x40
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 faef 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e006      	b.n	800725a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	e000      	b.n	800725a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007258:	2302      	movs	r3, #2
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	3720      	adds	r7, #32
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	4613      	mov	r3, r2
 800726e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b20      	cmp	r3, #32
 800727a:	d11d      	bne.n	80072b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <HAL_UART_Receive_IT+0x26>
 8007282:	88fb      	ldrh	r3, [r7, #6]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e016      	b.n	80072ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <HAL_UART_Receive_IT+0x38>
 8007296:	2302      	movs	r3, #2
 8007298:	e00f      	b.n	80072ba <HAL_UART_Receive_IT+0x58>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072a8:	88fb      	ldrh	r3, [r7, #6]
 80072aa:	461a      	mov	r2, r3
 80072ac:	68b9      	ldr	r1, [r7, #8]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fb24 	bl	80078fc <UART_Start_Receive_IT>
 80072b4:	4603      	mov	r3, r0
 80072b6:	e000      	b.n	80072ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80072b8:	2302      	movs	r3, #2
  }
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b0ba      	sub	sp, #232	; 0xe8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10f      	bne.n	800732a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800730a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <HAL_UART_IRQHandler+0x66>
 8007316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fc07 	bl	8007b36 <UART_Receive_IT>
      return;
 8007328:	e256      	b.n	80077d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800732a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 80de 	beq.w	80074f0 <HAL_UART_IRQHandler+0x22c>
 8007334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007344:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 80d1 	beq.w	80074f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <HAL_UART_IRQHandler+0xae>
 800735a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800735e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f043 0201 	orr.w	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <HAL_UART_IRQHandler+0xd2>
 800737e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d005      	beq.n	8007396 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	f043 0202 	orr.w	r2, r3, #2
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00b      	beq.n	80073ba <HAL_UART_IRQHandler+0xf6>
 80073a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f043 0204 	orr.w	r2, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d011      	beq.n	80073ea <HAL_UART_IRQHandler+0x126>
 80073c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d105      	bne.n	80073de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f043 0208 	orr.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 81ed 	beq.w	80077ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f8:	f003 0320 	and.w	r3, r3, #32
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d008      	beq.n	8007412 <HAL_UART_IRQHandler+0x14e>
 8007400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fb92 	bl	8007b36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	bf0c      	ite	eq
 8007420:	2301      	moveq	r3, #1
 8007422:	2300      	movne	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d103      	bne.n	800743e <HAL_UART_IRQHandler+0x17a>
 8007436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d04f      	beq.n	80074de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa9a 	bl	8007978 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744e:	2b40      	cmp	r3, #64	; 0x40
 8007450:	d141      	bne.n	80074d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3314      	adds	r3, #20
 8007458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800746c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3314      	adds	r3, #20
 800747a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800747e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800748a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1d9      	bne.n	8007452 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d013      	beq.n	80074ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	4a7d      	ldr	r2, [pc, #500]	; (80076a0 <HAL_UART_IRQHandler+0x3dc>)
 80074ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fd fe24 	bl	8005100 <HAL_DMA_Abort_IT>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d016      	beq.n	80074ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074c8:	4610      	mov	r0, r2
 80074ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074cc:	e00e      	b.n	80074ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f990 	bl	80077f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d4:	e00a      	b.n	80074ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f98c 	bl	80077f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074dc:	e006      	b.n	80074ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f988 	bl	80077f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074ea:	e170      	b.n	80077ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ec:	bf00      	nop
    return;
 80074ee:	e16e      	b.n	80077ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	f040 814a 	bne.w	800778e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fe:	f003 0310 	and.w	r3, r3, #16
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 8143 	beq.w	800778e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 813c 	beq.w	800778e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007536:	2b40      	cmp	r3, #64	; 0x40
 8007538:	f040 80b4 	bne.w	80076a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8140 	beq.w	80077d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800755a:	429a      	cmp	r2, r3
 800755c:	f080 8139 	bcs.w	80077d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007566:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007572:	f000 8088 	beq.w	8007686 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	330c      	adds	r3, #12
 800757c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800758c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	330c      	adds	r3, #12
 800759e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1d9      	bne.n	8007576 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3314      	adds	r3, #20
 80075c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3314      	adds	r3, #20
 80075e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e1      	bne.n	80075c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3314      	adds	r3, #20
 8007604:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800760e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3314      	adds	r3, #20
 800761e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007622:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007624:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007628:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e3      	bne.n	80075fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007656:	f023 0310 	bic.w	r3, r3, #16
 800765a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007668:	65ba      	str	r2, [r7, #88]	; 0x58
 800766a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800766e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e3      	bne.n	8007644 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	4618      	mov	r0, r3
 8007682:	f7fd fccd 	bl	8005020 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800768e:	b29b      	uxth	r3, r3
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	b29b      	uxth	r3, r3
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f8b6 	bl	8007808 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800769c:	e099      	b.n	80077d2 <HAL_UART_IRQHandler+0x50e>
 800769e:	bf00      	nop
 80076a0:	08007a3f 	.word	0x08007a3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 808b 	beq.w	80077d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 8086 	beq.w	80077d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	330c      	adds	r3, #12
 80076d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076ee:	647a      	str	r2, [r7, #68]	; 0x44
 80076f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e3      	bne.n	80076ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3314      	adds	r3, #20
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	623b      	str	r3, [r7, #32]
   return(result);
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	f023 0301 	bic.w	r3, r3, #1
 8007718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3314      	adds	r3, #20
 8007722:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007726:	633a      	str	r2, [r7, #48]	; 0x30
 8007728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800772c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e3      	bne.n	8007702 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	330c      	adds	r3, #12
 800774e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	60fb      	str	r3, [r7, #12]
   return(result);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0310 	bic.w	r3, r3, #16
 800775e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	330c      	adds	r3, #12
 8007768:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800776c:	61fa      	str	r2, [r7, #28]
 800776e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	69b9      	ldr	r1, [r7, #24]
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	617b      	str	r3, [r7, #20]
   return(result);
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e3      	bne.n	8007748 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f83e 	bl	8007808 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800778c:	e023      	b.n	80077d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <HAL_UART_IRQHandler+0x4ea>
 800779a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f95d 	bl	8007a66 <UART_Transmit_IT>
    return;
 80077ac:	e014      	b.n	80077d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00e      	beq.n	80077d8 <HAL_UART_IRQHandler+0x514>
 80077ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d008      	beq.n	80077d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f99d 	bl	8007b06 <UART_EndTransmit_IT>
    return;
 80077cc:	e004      	b.n	80077d8 <HAL_UART_IRQHandler+0x514>
    return;
 80077ce:	bf00      	nop
 80077d0:	e002      	b.n	80077d8 <HAL_UART_IRQHandler+0x514>
      return;
 80077d2:	bf00      	nop
 80077d4:	e000      	b.n	80077d8 <HAL_UART_IRQHandler+0x514>
      return;
 80077d6:	bf00      	nop
  }
}
 80077d8:	37e8      	adds	r7, #232	; 0xe8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop

080077e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b090      	sub	sp, #64	; 0x40
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007830:	e050      	b.n	80078d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d04c      	beq.n	80078d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800783a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783c:	2b00      	cmp	r3, #0
 800783e:	d007      	beq.n	8007850 <UART_WaitOnFlagUntilTimeout+0x30>
 8007840:	f7fd fb00 	bl	8004e44 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800784c:	429a      	cmp	r2, r3
 800784e:	d241      	bcs.n	80078d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	330c      	adds	r3, #12
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	330c      	adds	r3, #12
 800786e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007870:	637a      	str	r2, [r7, #52]	; 0x34
 8007872:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e5      	bne.n	8007850 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3314      	adds	r3, #20
 800788a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	613b      	str	r3, [r7, #16]
   return(result);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f023 0301 	bic.w	r3, r3, #1
 800789a:	63bb      	str	r3, [r7, #56]	; 0x38
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3314      	adds	r3, #20
 80078a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a4:	623a      	str	r2, [r7, #32]
 80078a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	69f9      	ldr	r1, [r7, #28]
 80078aa:	6a3a      	ldr	r2, [r7, #32]
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e5      	bne.n	8007884 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e00f      	b.n	80078f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	4013      	ands	r3, r2
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	bf0c      	ite	eq
 80078e4:	2301      	moveq	r3, #1
 80078e6:	2300      	movne	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	461a      	mov	r2, r3
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d09f      	beq.n	8007832 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3740      	adds	r7, #64	; 0x40
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4613      	mov	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	88fa      	ldrh	r2, [r7, #6]
 800791a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2222      	movs	r2, #34	; 0x22
 8007926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d007      	beq.n	800794a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007948:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	695a      	ldr	r2, [r3, #20]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0201 	orr.w	r2, r2, #1
 8007958:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f042 0220 	orr.w	r2, r2, #32
 8007968:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007978:	b480      	push	{r7}
 800797a:	b095      	sub	sp, #84	; 0x54
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	330c      	adds	r3, #12
 8007986:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	330c      	adds	r3, #12
 800799e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079a0:	643a      	str	r2, [r7, #64]	; 0x40
 80079a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e5      	bne.n	8007980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3314      	adds	r3, #20
 80079ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3314      	adds	r3, #20
 80079d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e5      	bne.n	80079b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d119      	bne.n	8007a24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	330c      	adds	r3, #12
 80079f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f023 0310 	bic.w	r3, r3, #16
 8007a06:	647b      	str	r3, [r7, #68]	; 0x44
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a10:	61ba      	str	r2, [r7, #24]
 8007a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6979      	ldr	r1, [r7, #20]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e5      	bne.n	80079f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a32:	bf00      	nop
 8007a34:	3754      	adds	r7, #84	; 0x54
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff fecb 	bl	80077f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b21      	cmp	r3, #33	; 0x21
 8007a78:	d13e      	bne.n	8007af8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a82:	d114      	bne.n	8007aae <UART_Transmit_IT+0x48>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d110      	bne.n	8007aae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	1c9a      	adds	r2, r3, #2
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	621a      	str	r2, [r3, #32]
 8007aac:	e008      	b.n	8007ac0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	1c59      	adds	r1, r3, #1
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6211      	str	r1, [r2, #32]
 8007ab8:	781a      	ldrb	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	4619      	mov	r1, r3
 8007ace:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10f      	bne.n	8007af4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ae2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e000      	b.n	8007afa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007af8:	2302      	movs	r3, #2
  }
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff fe5a 	bl	80077e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b08c      	sub	sp, #48	; 0x30
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b22      	cmp	r3, #34	; 0x22
 8007b48:	f040 80ab 	bne.w	8007ca2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b54:	d117      	bne.n	8007b86 <UART_Receive_IT+0x50>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d113      	bne.n	8007b86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7e:	1c9a      	adds	r2, r3, #2
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	629a      	str	r2, [r3, #40]	; 0x28
 8007b84:	e026      	b.n	8007bd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b98:	d007      	beq.n	8007baa <UART_Receive_IT+0x74>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <UART_Receive_IT+0x82>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb4:	701a      	strb	r2, [r3, #0]
 8007bb6:	e008      	b.n	8007bca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	4619      	mov	r1, r3
 8007be2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d15a      	bne.n	8007c9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 0220 	bic.w	r2, r2, #32
 8007bf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695a      	ldr	r2, [r3, #20]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0201 	bic.w	r2, r2, #1
 8007c16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d135      	bne.n	8007c94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f023 0310 	bic.w	r3, r3, #16
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4e:	623a      	str	r2, [r7, #32]
 8007c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	69f9      	ldr	r1, [r7, #28]
 8007c54:	6a3a      	ldr	r2, [r7, #32]
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e5      	bne.n	8007c2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b10      	cmp	r3, #16
 8007c6e:	d10a      	bne.n	8007c86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff fdbb 	bl	8007808 <HAL_UARTEx_RxEventCallback>
 8007c92:	e002      	b.n	8007c9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7fb fa09 	bl	80030ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e002      	b.n	8007ca4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e000      	b.n	8007ca4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007ca2:	2302      	movs	r3, #2
  }
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3730      	adds	r7, #48	; 0x30
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb0:	b0c0      	sub	sp, #256	; 0x100
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc8:	68d9      	ldr	r1, [r3, #12]
 8007cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	ea40 0301 	orr.w	r3, r0, r1
 8007cd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	431a      	orrs	r2, r3
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d04:	f021 010c 	bic.w	r1, r1, #12
 8007d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d12:	430b      	orrs	r3, r1
 8007d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d26:	6999      	ldr	r1, [r3, #24]
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	ea40 0301 	orr.w	r3, r0, r1
 8007d32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	4b8f      	ldr	r3, [pc, #572]	; (8007f78 <UART_SetConfig+0x2cc>)
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d005      	beq.n	8007d4c <UART_SetConfig+0xa0>
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	4b8d      	ldr	r3, [pc, #564]	; (8007f7c <UART_SetConfig+0x2d0>)
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d104      	bne.n	8007d56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d4c:	f7fe f81c 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 8007d50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d54:	e003      	b.n	8007d5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d56:	f7fe f803 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007d5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d68:	f040 810c 	bne.w	8007f84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d70:	2200      	movs	r2, #0
 8007d72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d7e:	4622      	mov	r2, r4
 8007d80:	462b      	mov	r3, r5
 8007d82:	1891      	adds	r1, r2, r2
 8007d84:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d86:	415b      	adcs	r3, r3
 8007d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d8e:	4621      	mov	r1, r4
 8007d90:	eb12 0801 	adds.w	r8, r2, r1
 8007d94:	4629      	mov	r1, r5
 8007d96:	eb43 0901 	adc.w	r9, r3, r1
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dae:	4690      	mov	r8, r2
 8007db0:	4699      	mov	r9, r3
 8007db2:	4623      	mov	r3, r4
 8007db4:	eb18 0303 	adds.w	r3, r8, r3
 8007db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	eb49 0303 	adc.w	r3, r9, r3
 8007dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dda:	460b      	mov	r3, r1
 8007ddc:	18db      	adds	r3, r3, r3
 8007dde:	653b      	str	r3, [r7, #80]	; 0x50
 8007de0:	4613      	mov	r3, r2
 8007de2:	eb42 0303 	adc.w	r3, r2, r3
 8007de6:	657b      	str	r3, [r7, #84]	; 0x54
 8007de8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007dec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007df0:	f7f8 fef2 	bl	8000bd8 <__aeabi_uldivmod>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4b61      	ldr	r3, [pc, #388]	; (8007f80 <UART_SetConfig+0x2d4>)
 8007dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8007dfe:	095b      	lsrs	r3, r3, #5
 8007e00:	011c      	lsls	r4, r3, #4
 8007e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e14:	4642      	mov	r2, r8
 8007e16:	464b      	mov	r3, r9
 8007e18:	1891      	adds	r1, r2, r2
 8007e1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e1c:	415b      	adcs	r3, r3
 8007e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e24:	4641      	mov	r1, r8
 8007e26:	eb12 0a01 	adds.w	sl, r2, r1
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	eb43 0b01 	adc.w	fp, r3, r1
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	f04f 0300 	mov.w	r3, #0
 8007e38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e44:	4692      	mov	sl, r2
 8007e46:	469b      	mov	fp, r3
 8007e48:	4643      	mov	r3, r8
 8007e4a:	eb1a 0303 	adds.w	r3, sl, r3
 8007e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e52:	464b      	mov	r3, r9
 8007e54:	eb4b 0303 	adc.w	r3, fp, r3
 8007e58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e70:	460b      	mov	r3, r1
 8007e72:	18db      	adds	r3, r3, r3
 8007e74:	643b      	str	r3, [r7, #64]	; 0x40
 8007e76:	4613      	mov	r3, r2
 8007e78:	eb42 0303 	adc.w	r3, r2, r3
 8007e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e86:	f7f8 fea7 	bl	8000bd8 <__aeabi_uldivmod>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4b3b      	ldr	r3, [pc, #236]	; (8007f80 <UART_SetConfig+0x2d4>)
 8007e92:	fba3 2301 	umull	r2, r3, r3, r1
 8007e96:	095b      	lsrs	r3, r3, #5
 8007e98:	2264      	movs	r2, #100	; 0x64
 8007e9a:	fb02 f303 	mul.w	r3, r2, r3
 8007e9e:	1acb      	subs	r3, r1, r3
 8007ea0:	00db      	lsls	r3, r3, #3
 8007ea2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ea6:	4b36      	ldr	r3, [pc, #216]	; (8007f80 <UART_SetConfig+0x2d4>)
 8007ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8007eac:	095b      	lsrs	r3, r3, #5
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007eb4:	441c      	add	r4, r3
 8007eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ec0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ec4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ec8:	4642      	mov	r2, r8
 8007eca:	464b      	mov	r3, r9
 8007ecc:	1891      	adds	r1, r2, r2
 8007ece:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ed0:	415b      	adcs	r3, r3
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ed8:	4641      	mov	r1, r8
 8007eda:	1851      	adds	r1, r2, r1
 8007edc:	6339      	str	r1, [r7, #48]	; 0x30
 8007ede:	4649      	mov	r1, r9
 8007ee0:	414b      	adcs	r3, r1
 8007ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	00cb      	lsls	r3, r1, #3
 8007ef4:	4651      	mov	r1, sl
 8007ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007efa:	4651      	mov	r1, sl
 8007efc:	00ca      	lsls	r2, r1, #3
 8007efe:	4610      	mov	r0, r2
 8007f00:	4619      	mov	r1, r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	4642      	mov	r2, r8
 8007f06:	189b      	adds	r3, r3, r2
 8007f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f0c:	464b      	mov	r3, r9
 8007f0e:	460a      	mov	r2, r1
 8007f10:	eb42 0303 	adc.w	r3, r2, r3
 8007f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	18db      	adds	r3, r3, r3
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f32:	4613      	mov	r3, r2
 8007f34:	eb42 0303 	adc.w	r3, r2, r3
 8007f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f42:	f7f8 fe49 	bl	8000bd8 <__aeabi_uldivmod>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4b0d      	ldr	r3, [pc, #52]	; (8007f80 <UART_SetConfig+0x2d4>)
 8007f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f50:	095b      	lsrs	r3, r3, #5
 8007f52:	2164      	movs	r1, #100	; 0x64
 8007f54:	fb01 f303 	mul.w	r3, r1, r3
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	3332      	adds	r3, #50	; 0x32
 8007f5e:	4a08      	ldr	r2, [pc, #32]	; (8007f80 <UART_SetConfig+0x2d4>)
 8007f60:	fba2 2303 	umull	r2, r3, r2, r3
 8007f64:	095b      	lsrs	r3, r3, #5
 8007f66:	f003 0207 	and.w	r2, r3, #7
 8007f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4422      	add	r2, r4
 8007f72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f74:	e105      	b.n	8008182 <UART_SetConfig+0x4d6>
 8007f76:	bf00      	nop
 8007f78:	40011000 	.word	0x40011000
 8007f7c:	40011400 	.word	0x40011400
 8007f80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f96:	4642      	mov	r2, r8
 8007f98:	464b      	mov	r3, r9
 8007f9a:	1891      	adds	r1, r2, r2
 8007f9c:	6239      	str	r1, [r7, #32]
 8007f9e:	415b      	adcs	r3, r3
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fa6:	4641      	mov	r1, r8
 8007fa8:	1854      	adds	r4, r2, r1
 8007faa:	4649      	mov	r1, r9
 8007fac:	eb43 0501 	adc.w	r5, r3, r1
 8007fb0:	f04f 0200 	mov.w	r2, #0
 8007fb4:	f04f 0300 	mov.w	r3, #0
 8007fb8:	00eb      	lsls	r3, r5, #3
 8007fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fbe:	00e2      	lsls	r2, r4, #3
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	461d      	mov	r5, r3
 8007fc4:	4643      	mov	r3, r8
 8007fc6:	18e3      	adds	r3, r4, r3
 8007fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fcc:	464b      	mov	r3, r9
 8007fce:	eb45 0303 	adc.w	r3, r5, r3
 8007fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fe6:	f04f 0200 	mov.w	r2, #0
 8007fea:	f04f 0300 	mov.w	r3, #0
 8007fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	008b      	lsls	r3, r1, #2
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	008a      	lsls	r2, r1, #2
 8008000:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008004:	f7f8 fde8 	bl	8000bd8 <__aeabi_uldivmod>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4b60      	ldr	r3, [pc, #384]	; (8008190 <UART_SetConfig+0x4e4>)
 800800e:	fba3 2302 	umull	r2, r3, r3, r2
 8008012:	095b      	lsrs	r3, r3, #5
 8008014:	011c      	lsls	r4, r3, #4
 8008016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800801a:	2200      	movs	r2, #0
 800801c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008020:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008024:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008028:	4642      	mov	r2, r8
 800802a:	464b      	mov	r3, r9
 800802c:	1891      	adds	r1, r2, r2
 800802e:	61b9      	str	r1, [r7, #24]
 8008030:	415b      	adcs	r3, r3
 8008032:	61fb      	str	r3, [r7, #28]
 8008034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008038:	4641      	mov	r1, r8
 800803a:	1851      	adds	r1, r2, r1
 800803c:	6139      	str	r1, [r7, #16]
 800803e:	4649      	mov	r1, r9
 8008040:	414b      	adcs	r3, r1
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	f04f 0300 	mov.w	r3, #0
 800804c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008050:	4659      	mov	r1, fp
 8008052:	00cb      	lsls	r3, r1, #3
 8008054:	4651      	mov	r1, sl
 8008056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800805a:	4651      	mov	r1, sl
 800805c:	00ca      	lsls	r2, r1, #3
 800805e:	4610      	mov	r0, r2
 8008060:	4619      	mov	r1, r3
 8008062:	4603      	mov	r3, r0
 8008064:	4642      	mov	r2, r8
 8008066:	189b      	adds	r3, r3, r2
 8008068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800806c:	464b      	mov	r3, r9
 800806e:	460a      	mov	r2, r1
 8008070:	eb42 0303 	adc.w	r3, r2, r3
 8008074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	67bb      	str	r3, [r7, #120]	; 0x78
 8008082:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008084:	f04f 0200 	mov.w	r2, #0
 8008088:	f04f 0300 	mov.w	r3, #0
 800808c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008090:	4649      	mov	r1, r9
 8008092:	008b      	lsls	r3, r1, #2
 8008094:	4641      	mov	r1, r8
 8008096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800809a:	4641      	mov	r1, r8
 800809c:	008a      	lsls	r2, r1, #2
 800809e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080a2:	f7f8 fd99 	bl	8000bd8 <__aeabi_uldivmod>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4b39      	ldr	r3, [pc, #228]	; (8008190 <UART_SetConfig+0x4e4>)
 80080ac:	fba3 1302 	umull	r1, r3, r3, r2
 80080b0:	095b      	lsrs	r3, r3, #5
 80080b2:	2164      	movs	r1, #100	; 0x64
 80080b4:	fb01 f303 	mul.w	r3, r1, r3
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	3332      	adds	r3, #50	; 0x32
 80080be:	4a34      	ldr	r2, [pc, #208]	; (8008190 <UART_SetConfig+0x4e4>)
 80080c0:	fba2 2303 	umull	r2, r3, r2, r3
 80080c4:	095b      	lsrs	r3, r3, #5
 80080c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080ca:	441c      	add	r4, r3
 80080cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080d0:	2200      	movs	r2, #0
 80080d2:	673b      	str	r3, [r7, #112]	; 0x70
 80080d4:	677a      	str	r2, [r7, #116]	; 0x74
 80080d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80080da:	4642      	mov	r2, r8
 80080dc:	464b      	mov	r3, r9
 80080de:	1891      	adds	r1, r2, r2
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	415b      	adcs	r3, r3
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080ea:	4641      	mov	r1, r8
 80080ec:	1851      	adds	r1, r2, r1
 80080ee:	6039      	str	r1, [r7, #0]
 80080f0:	4649      	mov	r1, r9
 80080f2:	414b      	adcs	r3, r1
 80080f4:	607b      	str	r3, [r7, #4]
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008102:	4659      	mov	r1, fp
 8008104:	00cb      	lsls	r3, r1, #3
 8008106:	4651      	mov	r1, sl
 8008108:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800810c:	4651      	mov	r1, sl
 800810e:	00ca      	lsls	r2, r1, #3
 8008110:	4610      	mov	r0, r2
 8008112:	4619      	mov	r1, r3
 8008114:	4603      	mov	r3, r0
 8008116:	4642      	mov	r2, r8
 8008118:	189b      	adds	r3, r3, r2
 800811a:	66bb      	str	r3, [r7, #104]	; 0x68
 800811c:	464b      	mov	r3, r9
 800811e:	460a      	mov	r2, r1
 8008120:	eb42 0303 	adc.w	r3, r2, r3
 8008124:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	663b      	str	r3, [r7, #96]	; 0x60
 8008130:	667a      	str	r2, [r7, #100]	; 0x64
 8008132:	f04f 0200 	mov.w	r2, #0
 8008136:	f04f 0300 	mov.w	r3, #0
 800813a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800813e:	4649      	mov	r1, r9
 8008140:	008b      	lsls	r3, r1, #2
 8008142:	4641      	mov	r1, r8
 8008144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008148:	4641      	mov	r1, r8
 800814a:	008a      	lsls	r2, r1, #2
 800814c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008150:	f7f8 fd42 	bl	8000bd8 <__aeabi_uldivmod>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4b0d      	ldr	r3, [pc, #52]	; (8008190 <UART_SetConfig+0x4e4>)
 800815a:	fba3 1302 	umull	r1, r3, r3, r2
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	2164      	movs	r1, #100	; 0x64
 8008162:	fb01 f303 	mul.w	r3, r1, r3
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	011b      	lsls	r3, r3, #4
 800816a:	3332      	adds	r3, #50	; 0x32
 800816c:	4a08      	ldr	r2, [pc, #32]	; (8008190 <UART_SetConfig+0x4e4>)
 800816e:	fba2 2303 	umull	r2, r3, r2, r3
 8008172:	095b      	lsrs	r3, r3, #5
 8008174:	f003 020f 	and.w	r2, r3, #15
 8008178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4422      	add	r2, r4
 8008180:	609a      	str	r2, [r3, #8]
}
 8008182:	bf00      	nop
 8008184:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008188:	46bd      	mov	sp, r7
 800818a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800818e:	bf00      	nop
 8008190:	51eb851f 	.word	0x51eb851f

08008194 <__NVIC_SetPriority>:
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	db0a      	blt.n	80081be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	490c      	ldr	r1, [pc, #48]	; (80081e0 <__NVIC_SetPriority+0x4c>)
 80081ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b2:	0112      	lsls	r2, r2, #4
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	440b      	add	r3, r1
 80081b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80081bc:	e00a      	b.n	80081d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	4908      	ldr	r1, [pc, #32]	; (80081e4 <__NVIC_SetPriority+0x50>)
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	f003 030f 	and.w	r3, r3, #15
 80081ca:	3b04      	subs	r3, #4
 80081cc:	0112      	lsls	r2, r2, #4
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	440b      	add	r3, r1
 80081d2:	761a      	strb	r2, [r3, #24]
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	e000e100 	.word	0xe000e100
 80081e4:	e000ed00 	.word	0xe000ed00

080081e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80081ec:	4b05      	ldr	r3, [pc, #20]	; (8008204 <SysTick_Handler+0x1c>)
 80081ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081f0:	f001 ffca 	bl	800a188 <xTaskGetSchedulerState>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d001      	beq.n	80081fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081fa:	f002 fdb5 	bl	800ad68 <xPortSysTickHandler>
  }
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	e000e010 	.word	0xe000e010

08008208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800820c:	2100      	movs	r1, #0
 800820e:	f06f 0004 	mvn.w	r0, #4
 8008212:	f7ff ffbf 	bl	8008194 <__NVIC_SetPriority>
#endif
}
 8008216:	bf00      	nop
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008222:	f3ef 8305 	mrs	r3, IPSR
 8008226:	603b      	str	r3, [r7, #0]
  return(result);
 8008228:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800822e:	f06f 0305 	mvn.w	r3, #5
 8008232:	607b      	str	r3, [r7, #4]
 8008234:	e00c      	b.n	8008250 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008236:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <osKernelInitialize+0x44>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800823e:	4b08      	ldr	r3, [pc, #32]	; (8008260 <osKernelInitialize+0x44>)
 8008240:	2201      	movs	r2, #1
 8008242:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008244:	2300      	movs	r3, #0
 8008246:	607b      	str	r3, [r7, #4]
 8008248:	e002      	b.n	8008250 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008250:	687b      	ldr	r3, [r7, #4]
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20001f10 	.word	0x20001f10

08008264 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800826a:	f3ef 8305 	mrs	r3, IPSR
 800826e:	603b      	str	r3, [r7, #0]
  return(result);
 8008270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008276:	f06f 0305 	mvn.w	r3, #5
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	e010      	b.n	80082a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800827e:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <osKernelStart+0x48>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d109      	bne.n	800829a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008286:	f7ff ffbf 	bl	8008208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800828a:	4b08      	ldr	r3, [pc, #32]	; (80082ac <osKernelStart+0x48>)
 800828c:	2202      	movs	r2, #2
 800828e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008290:	f001 fb32 	bl	80098f8 <vTaskStartScheduler>
      stat = osOK;
 8008294:	2300      	movs	r3, #0
 8008296:	607b      	str	r3, [r7, #4]
 8008298:	e002      	b.n	80082a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800829a:	f04f 33ff 	mov.w	r3, #4294967295
 800829e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082a0:	687b      	ldr	r3, [r7, #4]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20001f10 	.word	0x20001f10

080082b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08e      	sub	sp, #56	; 0x38
 80082b4:	af04      	add	r7, sp, #16
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082c0:	f3ef 8305 	mrs	r3, IPSR
 80082c4:	617b      	str	r3, [r7, #20]
  return(result);
 80082c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d17e      	bne.n	80083ca <osThreadNew+0x11a>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d07b      	beq.n	80083ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80082d2:	2380      	movs	r3, #128	; 0x80
 80082d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082d6:	2318      	movs	r3, #24
 80082d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
 80082e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d045      	beq.n	8008376 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <osThreadNew+0x48>
        name = attr->name;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d008      	beq.n	800831e <osThreadNew+0x6e>
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	2b38      	cmp	r3, #56	; 0x38
 8008310:	d805      	bhi.n	800831e <osThreadNew+0x6e>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <osThreadNew+0x72>
        return (NULL);
 800831e:	2300      	movs	r3, #0
 8008320:	e054      	b.n	80083cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	089b      	lsrs	r3, r3, #2
 8008330:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00e      	beq.n	8008358 <osThreadNew+0xa8>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	2b5b      	cmp	r3, #91	; 0x5b
 8008340:	d90a      	bls.n	8008358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008346:	2b00      	cmp	r3, #0
 8008348:	d006      	beq.n	8008358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <osThreadNew+0xa8>
        mem = 1;
 8008352:	2301      	movs	r3, #1
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	e010      	b.n	800837a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10c      	bne.n	800837a <osThreadNew+0xca>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d108      	bne.n	800837a <osThreadNew+0xca>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d104      	bne.n	800837a <osThreadNew+0xca>
          mem = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	e001      	b.n	800837a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d110      	bne.n	80083a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008388:	9202      	str	r2, [sp, #8]
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	6a3a      	ldr	r2, [r7, #32]
 8008394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f001 f8d8 	bl	800954c <xTaskCreateStatic>
 800839c:	4603      	mov	r3, r0
 800839e:	613b      	str	r3, [r7, #16]
 80083a0:	e013      	b.n	80083ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d110      	bne.n	80083ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	f107 0310 	add.w	r3, r7, #16
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f001 f923 	bl	8009606 <xTaskCreate>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d001      	beq.n	80083ca <osThreadNew+0x11a>
            hTask = NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083ca:	693b      	ldr	r3, [r7, #16]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3728      	adds	r7, #40	; 0x28
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083dc:	f3ef 8305 	mrs	r3, IPSR
 80083e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80083e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <osDelay+0x1c>
    stat = osErrorISR;
 80083e8:	f06f 0305 	mvn.w	r3, #5
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	e007      	b.n	8008400 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <osDelay+0x2c>
      vTaskDelay(ticks);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fa48 	bl	8009890 <vTaskDelay>
    }
  }

  return (stat);
 8008400:	68fb      	ldr	r3, [r7, #12]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800840a:	b580      	push	{r7, lr}
 800840c:	b08a      	sub	sp, #40	; 0x28
 800840e:	af02      	add	r7, sp, #8
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800841a:	f3ef 8305 	mrs	r3, IPSR
 800841e:	613b      	str	r3, [r7, #16]
  return(result);
 8008420:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008422:	2b00      	cmp	r3, #0
 8008424:	d15f      	bne.n	80084e6 <osMessageQueueNew+0xdc>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d05c      	beq.n	80084e6 <osMessageQueueNew+0xdc>
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d059      	beq.n	80084e6 <osMessageQueueNew+0xdc>
    mem = -1;
 8008432:	f04f 33ff 	mov.w	r3, #4294967295
 8008436:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d029      	beq.n	8008492 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d012      	beq.n	800846c <osMessageQueueNew+0x62>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	2b4f      	cmp	r3, #79	; 0x4f
 800844c:	d90e      	bls.n	800846c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	695a      	ldr	r2, [r3, #20]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	fb01 f303 	mul.w	r3, r1, r3
 8008462:	429a      	cmp	r2, r3
 8008464:	d302      	bcc.n	800846c <osMessageQueueNew+0x62>
        mem = 1;
 8008466:	2301      	movs	r3, #1
 8008468:	61bb      	str	r3, [r7, #24]
 800846a:	e014      	b.n	8008496 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d110      	bne.n	8008496 <osMessageQueueNew+0x8c>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10c      	bne.n	8008496 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008480:	2b00      	cmp	r3, #0
 8008482:	d108      	bne.n	8008496 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d104      	bne.n	8008496 <osMessageQueueNew+0x8c>
          mem = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	61bb      	str	r3, [r7, #24]
 8008490:	e001      	b.n	8008496 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d10b      	bne.n	80084b4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	2100      	movs	r1, #0
 80084a6:	9100      	str	r1, [sp, #0]
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 fab0 	bl	8008a10 <xQueueGenericCreateStatic>
 80084b0:	61f8      	str	r0, [r7, #28]
 80084b2:	e008      	b.n	80084c6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d105      	bne.n	80084c6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80084ba:	2200      	movs	r2, #0
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 fb1e 	bl	8008b00 <xQueueGenericCreate>
 80084c4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00c      	beq.n	80084e6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <osMessageQueueNew+0xd0>
        name = attr->name;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	e001      	b.n	80084de <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80084de:	6979      	ldr	r1, [r7, #20]
 80084e0:	69f8      	ldr	r0, [r7, #28]
 80084e2:	f000 ffd5 	bl	8009490 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80084e6:	69fb      	ldr	r3, [r7, #28]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3720      	adds	r7, #32
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008504:	2300      	movs	r3, #0
 8008506:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008508:	f3ef 8305 	mrs	r3, IPSR
 800850c:	617b      	str	r3, [r7, #20]
  return(result);
 800850e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008510:	2b00      	cmp	r3, #0
 8008512:	d028      	beq.n	8008566 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d005      	beq.n	8008526 <osMessageQueuePut+0x36>
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <osMessageQueuePut+0x36>
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008526:	f06f 0303 	mvn.w	r3, #3
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e038      	b.n	80085a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800852e:	2300      	movs	r3, #0
 8008530:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008532:	f107 0210 	add.w	r2, r7, #16
 8008536:	2300      	movs	r3, #0
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	69b8      	ldr	r0, [r7, #24]
 800853c:	f000 fc3c 	bl	8008db8 <xQueueGenericSendFromISR>
 8008540:	4603      	mov	r3, r0
 8008542:	2b01      	cmp	r3, #1
 8008544:	d003      	beq.n	800854e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008546:	f06f 0302 	mvn.w	r3, #2
 800854a:	61fb      	str	r3, [r7, #28]
 800854c:	e028      	b.n	80085a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d025      	beq.n	80085a0 <osMessageQueuePut+0xb0>
 8008554:	4b15      	ldr	r3, [pc, #84]	; (80085ac <osMessageQueuePut+0xbc>)
 8008556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	e01c      	b.n	80085a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <osMessageQueuePut+0x82>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d103      	bne.n	800857a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008572:	f06f 0303 	mvn.w	r3, #3
 8008576:	61fb      	str	r3, [r7, #28]
 8008578:	e012      	b.n	80085a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800857a:	2300      	movs	r3, #0
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	68b9      	ldr	r1, [r7, #8]
 8008580:	69b8      	ldr	r0, [r7, #24]
 8008582:	f000 fb1b 	bl	8008bbc <xQueueGenericSend>
 8008586:	4603      	mov	r3, r0
 8008588:	2b01      	cmp	r3, #1
 800858a:	d009      	beq.n	80085a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008592:	f06f 0301 	mvn.w	r3, #1
 8008596:	61fb      	str	r3, [r7, #28]
 8008598:	e002      	b.n	80085a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800859a:	f06f 0302 	mvn.w	r3, #2
 800859e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80085a0:	69fb      	ldr	r3, [r7, #28]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3720      	adds	r7, #32
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	e000ed04 	.word	0xe000ed04

080085b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085c6:	f3ef 8305 	mrs	r3, IPSR
 80085ca:	617b      	str	r3, [r7, #20]
  return(result);
 80085cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d028      	beq.n	8008624 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d005      	beq.n	80085e4 <osMessageQueueGet+0x34>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <osMessageQueueGet+0x34>
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80085e4:	f06f 0303 	mvn.w	r3, #3
 80085e8:	61fb      	str	r3, [r7, #28]
 80085ea:	e037      	b.n	800865c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80085ec:	2300      	movs	r3, #0
 80085ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80085f0:	f107 0310 	add.w	r3, r7, #16
 80085f4:	461a      	mov	r2, r3
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	69b8      	ldr	r0, [r7, #24]
 80085fa:	f000 fd59 	bl	80090b0 <xQueueReceiveFromISR>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b01      	cmp	r3, #1
 8008602:	d003      	beq.n	800860c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008604:	f06f 0302 	mvn.w	r3, #2
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	e027      	b.n	800865c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d024      	beq.n	800865c <osMessageQueueGet+0xac>
 8008612:	4b15      	ldr	r3, [pc, #84]	; (8008668 <osMessageQueueGet+0xb8>)
 8008614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	e01b      	b.n	800865c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <osMessageQueueGet+0x80>
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d103      	bne.n	8008638 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008630:	f06f 0303 	mvn.w	r3, #3
 8008634:	61fb      	str	r3, [r7, #28]
 8008636:	e011      	b.n	800865c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	69b8      	ldr	r0, [r7, #24]
 800863e:	f000 fc57 	bl	8008ef0 <xQueueReceive>
 8008642:	4603      	mov	r3, r0
 8008644:	2b01      	cmp	r3, #1
 8008646:	d009      	beq.n	800865c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800864e:	f06f 0301 	mvn.w	r3, #1
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	e002      	b.n	800865c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008656:	f06f 0302 	mvn.w	r3, #2
 800865a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800865c:	69fb      	ldr	r3, [r7, #28]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3720      	adds	r7, #32
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	e000ed04 	.word	0xe000ed04

0800866c <osMessageQueueGetCapacity>:

uint32_t osMessageQueueGetCapacity (osMessageQueueId_t mq_id) {
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	60bb      	str	r3, [r7, #8]
  uint32_t capacity;

  if (mq == NULL) {
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d102      	bne.n	8008684 <osMessageQueueGetCapacity+0x18>
    capacity = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	e002      	b.n	800868a <osMessageQueueGetCapacity+0x1e>
  } else {
    /* capacity = pxQueue->uxLength */
    capacity = mq->uxDummy4[1];
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008688:	60fb      	str	r3, [r7, #12]
  }

  return (capacity);
 800868a:	68fb      	ldr	r3, [r7, #12]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <osMessageQueueGetMsgSize>:

uint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id) {
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60bb      	str	r3, [r7, #8]
  uint32_t size;

  if (mq == NULL) {
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d102      	bne.n	80086b0 <osMessageQueueGetMsgSize+0x18>
    size = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	e002      	b.n	80086b6 <osMessageQueueGetMsgSize+0x1e>
  } else {
    /* size = pxQueue->uxItemSize */
    size = mq->uxDummy4[2];
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	60fb      	str	r3, [r7, #12]
  }

  return (size);
 80086b6:	68fb      	ldr	r3, [r7, #12]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d102      	bne.n	80086dc <osMessageQueueGetCount+0x18>
    count = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	617b      	str	r3, [r7, #20]
 80086da:	e00e      	b.n	80086fa <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086dc:	f3ef 8305 	mrs	r3, IPSR
 80086e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80086e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d004      	beq.n	80086f2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80086e8:	6938      	ldr	r0, [r7, #16]
 80086ea:	f000 fda2 	bl	8009232 <uxQueueMessagesWaitingFromISR>
 80086ee:	6178      	str	r0, [r7, #20]
 80086f0:	e003      	b.n	80086fa <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80086f2:	6938      	ldr	r0, [r7, #16]
 80086f4:	f000 fd5c 	bl	80091b0 <uxQueueMessagesWaiting>
 80086f8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80086fa:	697b      	ldr	r3, [r7, #20]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	; 0x28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <osMessageQueueGetSpace+0x18>
    space = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
 800871a:	e023      	b.n	8008764 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800871c:	f3ef 8305 	mrs	r3, IPSR
 8008720:	61bb      	str	r3, [r7, #24]
  return(result);
 8008722:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8008724:	2b00      	cmp	r3, #0
 8008726:	d019      	beq.n	800875c <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008728:	f3ef 8211 	mrs	r2, BASEPRI
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	613a      	str	r2, [r7, #16]
 800873e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008740:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8008742:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800875a:	e003      	b.n	8008764 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800875c:	6a38      	ldr	r0, [r7, #32]
 800875e:	f000 fd45 	bl	80091ec <uxQueueSpacesAvailable>
 8008762:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008766:	4618      	mov	r0, r3
 8008768:	3728      	adds	r7, #40	; 0x28
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4a07      	ldr	r2, [pc, #28]	; (800879c <vApplicationGetIdleTaskMemory+0x2c>)
 8008780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	4a06      	ldr	r2, [pc, #24]	; (80087a0 <vApplicationGetIdleTaskMemory+0x30>)
 8008786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2280      	movs	r2, #128	; 0x80
 800878c:	601a      	str	r2, [r3, #0]
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	20001f14 	.word	0x20001f14
 80087a0:	20001f70 	.word	0x20001f70

080087a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a07      	ldr	r2, [pc, #28]	; (80087d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80087b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4a06      	ldr	r2, [pc, #24]	; (80087d4 <vApplicationGetTimerTaskMemory+0x30>)
 80087ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087c2:	601a      	str	r2, [r3, #0]
}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	20002170 	.word	0x20002170
 80087d4:	200021cc 	.word	0x200021cc

080087d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f103 0208 	add.w	r2, r3, #8
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f04f 32ff 	mov.w	r2, #4294967295
 80087f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f103 0208 	add.w	r2, r3, #8
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f103 0208 	add.w	r2, r3, #8
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	601a      	str	r2, [r3, #0]
}
 800886e:	bf00      	nop
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d103      	bne.n	800889a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e00c      	b.n	80088b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3308      	adds	r3, #8
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e002      	b.n	80088a8 <vListInsert+0x2e>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d2f6      	bcs.n	80088a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	601a      	str	r2, [r3, #0]
}
 80088e0:	bf00      	nop
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6892      	ldr	r2, [r2, #8]
 8008902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6852      	ldr	r2, [r2, #4]
 800890c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d103      	bne.n	8008920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	1e5a      	subs	r2, r3, #1
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10a      	bne.n	800896a <xQueueGenericReset+0x2a>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	60bb      	str	r3, [r7, #8]
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800896a:	f002 f96b 	bl	800ac44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800897a:	fb01 f303 	mul.w	r3, r1, r3
 800897e:	441a      	add	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899a:	3b01      	subs	r3, #1
 800899c:	68f9      	ldr	r1, [r7, #12]
 800899e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089a0:	fb01 f303 	mul.w	r3, r1, r3
 80089a4:	441a      	add	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	22ff      	movs	r2, #255	; 0xff
 80089ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	22ff      	movs	r2, #255	; 0xff
 80089b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d114      	bne.n	80089ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01a      	beq.n	80089fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3310      	adds	r3, #16
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 fa1d 	bl	8009e0c <xTaskRemoveFromEventList>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d012      	beq.n	80089fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <xQueueGenericReset+0xcc>)
 80089da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	e009      	b.n	80089fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3310      	adds	r3, #16
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff fef2 	bl	80087d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3324      	adds	r3, #36	; 0x24
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff feed 	bl	80087d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80089fe:	f002 f951 	bl	800aca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a02:	2301      	movs	r3, #1
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	e000ed04 	.word	0xe000ed04

08008a10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08e      	sub	sp, #56	; 0x38
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a36:	bf00      	nop
 8008a38:	e7fe      	b.n	8008a38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <xQueueGenericCreateStatic+0x52>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <xQueueGenericCreateStatic+0x56>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <xQueueGenericCreateStatic+0x58>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10a      	bne.n	8008a82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	623b      	str	r3, [r7, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <xQueueGenericCreateStatic+0x7e>
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <xQueueGenericCreateStatic+0x82>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e000      	b.n	8008a94 <xQueueGenericCreateStatic+0x84>
 8008a92:	2300      	movs	r3, #0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10a      	bne.n	8008aae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	61fb      	str	r3, [r7, #28]
}
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008aae:	2350      	movs	r3, #80	; 0x50
 8008ab0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b50      	cmp	r3, #80	; 0x50
 8008ab6:	d00a      	beq.n	8008ace <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	61bb      	str	r3, [r7, #24]
}
 8008aca:	bf00      	nop
 8008acc:	e7fe      	b.n	8008acc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ace:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00d      	beq.n	8008af6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ae2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	4613      	mov	r3, r2
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	68b9      	ldr	r1, [r7, #8]
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 f83f 	bl	8008b74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3730      	adds	r7, #48	; 0x30
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08a      	sub	sp, #40	; 0x28
 8008b04:	af02      	add	r7, sp, #8
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10a      	bne.n	8008b2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	613b      	str	r3, [r7, #16]
}
 8008b26:	bf00      	nop
 8008b28:	e7fe      	b.n	8008b28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	3350      	adds	r3, #80	; 0x50
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f002 f9a5 	bl	800ae88 <pvPortMalloc>
 8008b3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d011      	beq.n	8008b6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	3350      	adds	r3, #80	; 0x50
 8008b4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b58:	79fa      	ldrb	r2, [r7, #7]
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f805 	bl	8008b74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b6a:	69bb      	ldr	r3, [r7, #24]
	}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3720      	adds	r7, #32
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d103      	bne.n	8008b90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	e002      	b.n	8008b96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	69b8      	ldr	r0, [r7, #24]
 8008ba6:	f7ff fecb 	bl	8008940 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	78fa      	ldrb	r2, [r7, #3]
 8008bae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08e      	sub	sp, #56	; 0x38
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xQueueGenericSend+0x32>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d103      	bne.n	8008bfc <xQueueGenericSend+0x40>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <xQueueGenericSend+0x44>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <xQueueGenericSend+0x46>
 8008c00:	2300      	movs	r3, #0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <xQueueGenericSend+0x60>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c18:	bf00      	nop
 8008c1a:	e7fe      	b.n	8008c1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d103      	bne.n	8008c2a <xQueueGenericSend+0x6e>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d101      	bne.n	8008c2e <xQueueGenericSend+0x72>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <xQueueGenericSend+0x74>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xQueueGenericSend+0x8e>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	623b      	str	r3, [r7, #32]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c4a:	f001 fa9d 	bl	800a188 <xTaskGetSchedulerState>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d102      	bne.n	8008c5a <xQueueGenericSend+0x9e>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <xQueueGenericSend+0xa2>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <xQueueGenericSend+0xa4>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <xQueueGenericSend+0xbe>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	61fb      	str	r3, [r7, #28]
}
 8008c76:	bf00      	nop
 8008c78:	e7fe      	b.n	8008c78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c7a:	f001 ffe3 	bl	800ac44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d302      	bcc.n	8008c90 <xQueueGenericSend+0xd4>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d129      	bne.n	8008ce4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	68b9      	ldr	r1, [r7, #8]
 8008c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c96:	f000 faea 	bl	800926e <prvCopyDataToQueue>
 8008c9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d010      	beq.n	8008cc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca6:	3324      	adds	r3, #36	; 0x24
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 f8af 	bl	8009e0c <xTaskRemoveFromEventList>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d013      	beq.n	8008cdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008cb4:	4b3f      	ldr	r3, [pc, #252]	; (8008db4 <xQueueGenericSend+0x1f8>)
 8008cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	e00a      	b.n	8008cdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ccc:	4b39      	ldr	r3, [pc, #228]	; (8008db4 <xQueueGenericSend+0x1f8>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008cdc:	f001 ffe2 	bl	800aca4 <vPortExitCritical>
				return pdPASS;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e063      	b.n	8008dac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cea:	f001 ffdb 	bl	800aca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e05c      	b.n	8008dac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cf8:	f107 0314 	add.w	r3, r7, #20
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 f8e9 	bl	8009ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d02:	2301      	movs	r3, #1
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d06:	f001 ffcd 	bl	800aca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d0a:	f000 fe5b 	bl	80099c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d0e:	f001 ff99 	bl	800ac44 <vPortEnterCritical>
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d18:	b25b      	sxtb	r3, r3
 8008d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1e:	d103      	bne.n	8008d28 <xQueueGenericSend+0x16c>
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d2e:	b25b      	sxtb	r3, r3
 8008d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d34:	d103      	bne.n	8008d3e <xQueueGenericSend+0x182>
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d3e:	f001 ffb1 	bl	800aca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d42:	1d3a      	adds	r2, r7, #4
 8008d44:	f107 0314 	add.w	r3, r7, #20
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 f8d8 	bl	8009f00 <xTaskCheckForTimeOut>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d124      	bne.n	8008da0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d58:	f000 fb81 	bl	800945e <prvIsQueueFull>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d018      	beq.n	8008d94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	3310      	adds	r3, #16
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 fffe 	bl	8009d6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d72:	f000 fb0c 	bl	800938e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d76:	f000 fe33 	bl	80099e0 <xTaskResumeAll>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f47f af7c 	bne.w	8008c7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008d82:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <xQueueGenericSend+0x1f8>)
 8008d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	e772      	b.n	8008c7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d96:	f000 fafa 	bl	800938e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d9a:	f000 fe21 	bl	80099e0 <xTaskResumeAll>
 8008d9e:	e76c      	b.n	8008c7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008da2:	f000 faf4 	bl	800938e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008da6:	f000 fe1b 	bl	80099e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008daa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3738      	adds	r7, #56	; 0x38
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	e000ed04 	.word	0xe000ed04

08008db8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b090      	sub	sp, #64	; 0x40
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d103      	bne.n	8008df4 <xQueueGenericSendFromISR+0x3c>
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <xQueueGenericSendFromISR+0x40>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e000      	b.n	8008dfa <xQueueGenericSendFromISR+0x42>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d103      	bne.n	8008e22 <xQueueGenericSendFromISR+0x6a>
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <xQueueGenericSendFromISR+0x6e>
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <xQueueGenericSendFromISR+0x70>
 8008e26:	2300      	movs	r3, #0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10a      	bne.n	8008e42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	623b      	str	r3, [r7, #32]
}
 8008e3e:	bf00      	nop
 8008e40:	e7fe      	b.n	8008e40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e42:	f001 ffe1 	bl	800ae08 <vPortValidateInterruptPriority>
	__asm volatile
 8008e46:	f3ef 8211 	mrs	r2, BASEPRI
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	61fa      	str	r2, [r7, #28]
 8008e5c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d302      	bcc.n	8008e74 <xQueueGenericSendFromISR+0xbc>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d12f      	bne.n	8008ed4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e8a:	f000 f9f0 	bl	800926e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e96:	d112      	bne.n	8008ebe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d016      	beq.n	8008ece <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	3324      	adds	r3, #36	; 0x24
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 ffb1 	bl	8009e0c <xTaskRemoveFromEventList>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00e      	beq.n	8008ece <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00b      	beq.n	8008ece <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	e007      	b.n	8008ece <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ebe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	b25a      	sxtb	r2, r3
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008ed2:	e001      	b.n	8008ed8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f383 8811 	msr	BASEPRI, r3
}
 8008ee2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3740      	adds	r7, #64	; 0x40
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08c      	sub	sp, #48	; 0x30
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10a      	bne.n	8008f20 <xQueueReceive+0x30>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	623b      	str	r3, [r7, #32]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d103      	bne.n	8008f2e <xQueueReceive+0x3e>
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <xQueueReceive+0x42>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <xQueueReceive+0x44>
 8008f32:	2300      	movs	r3, #0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <xQueueReceive+0x5e>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	61fb      	str	r3, [r7, #28]
}
 8008f4a:	bf00      	nop
 8008f4c:	e7fe      	b.n	8008f4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f4e:	f001 f91b 	bl	800a188 <xTaskGetSchedulerState>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d102      	bne.n	8008f5e <xQueueReceive+0x6e>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <xQueueReceive+0x72>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <xQueueReceive+0x74>
 8008f62:	2300      	movs	r3, #0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <xQueueReceive+0x8e>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	61bb      	str	r3, [r7, #24]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f7e:	f001 fe61 	bl	800ac44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d01f      	beq.n	8008fce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f92:	f000 f9d6 	bl	8009342 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	1e5a      	subs	r2, r3, #1
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00f      	beq.n	8008fc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	3310      	adds	r3, #16
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 ff2e 	bl	8009e0c <xTaskRemoveFromEventList>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d007      	beq.n	8008fc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008fb6:	4b3d      	ldr	r3, [pc, #244]	; (80090ac <xQueueReceive+0x1bc>)
 8008fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fc6:	f001 fe6d 	bl	800aca4 <vPortExitCritical>
				return pdPASS;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e069      	b.n	80090a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fd4:	f001 fe66 	bl	800aca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e062      	b.n	80090a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fe2:	f107 0310 	add.w	r3, r7, #16
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 ff74 	bl	8009ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fec:	2301      	movs	r3, #1
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ff0:	f001 fe58 	bl	800aca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ff4:	f000 fce6 	bl	80099c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ff8:	f001 fe24 	bl	800ac44 <vPortEnterCritical>
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009002:	b25b      	sxtb	r3, r3
 8009004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009008:	d103      	bne.n	8009012 <xQueueReceive+0x122>
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009018:	b25b      	sxtb	r3, r3
 800901a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901e:	d103      	bne.n	8009028 <xQueueReceive+0x138>
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009028:	f001 fe3c 	bl	800aca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800902c:	1d3a      	adds	r2, r7, #4
 800902e:	f107 0310 	add.w	r3, r7, #16
 8009032:	4611      	mov	r1, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f000 ff63 	bl	8009f00 <xTaskCheckForTimeOut>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d123      	bne.n	8009088 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009042:	f000 f9f6 	bl	8009432 <prvIsQueueEmpty>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d017      	beq.n	800907c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	3324      	adds	r3, #36	; 0x24
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fe89 	bl	8009d6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800905a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905c:	f000 f997 	bl	800938e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009060:	f000 fcbe 	bl	80099e0 <xTaskResumeAll>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d189      	bne.n	8008f7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800906a:	4b10      	ldr	r3, [pc, #64]	; (80090ac <xQueueReceive+0x1bc>)
 800906c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	e780      	b.n	8008f7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800907c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800907e:	f000 f986 	bl	800938e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009082:	f000 fcad 	bl	80099e0 <xTaskResumeAll>
 8009086:	e77a      	b.n	8008f7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800908a:	f000 f980 	bl	800938e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800908e:	f000 fca7 	bl	80099e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009094:	f000 f9cd 	bl	8009432 <prvIsQueueEmpty>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	f43f af6f 	beq.w	8008f7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3730      	adds	r7, #48	; 0x30
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	e000ed04 	.word	0xe000ed04

080090b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08e      	sub	sp, #56	; 0x38
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	623b      	str	r3, [r7, #32]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d103      	bne.n	80090ea <xQueueReceiveFromISR+0x3a>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <xQueueReceiveFromISR+0x3e>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e000      	b.n	80090f0 <xQueueReceiveFromISR+0x40>
 80090ee:	2300      	movs	r3, #0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	61fb      	str	r3, [r7, #28]
}
 8009106:	bf00      	nop
 8009108:	e7fe      	b.n	8009108 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800910a:	f001 fe7d 	bl	800ae08 <vPortValidateInterruptPriority>
	__asm volatile
 800910e:	f3ef 8211 	mrs	r2, BASEPRI
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	61ba      	str	r2, [r7, #24]
 8009124:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009126:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009128:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	2b00      	cmp	r3, #0
 8009134:	d02f      	beq.n	8009196 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800913c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009144:	f000 f8fd 	bl	8009342 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	1e5a      	subs	r2, r3, #1
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009150:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009158:	d112      	bne.n	8009180 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d016      	beq.n	8009190 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	3310      	adds	r3, #16
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fe50 	bl	8009e0c <xTaskRemoveFromEventList>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00e      	beq.n	8009190 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	e007      	b.n	8009190 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009184:	3301      	adds	r3, #1
 8009186:	b2db      	uxtb	r3, r3
 8009188:	b25a      	sxtb	r2, r3
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009190:	2301      	movs	r3, #1
 8009192:	637b      	str	r3, [r7, #52]	; 0x34
 8009194:	e001      	b.n	800919a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009196:	2300      	movs	r3, #0
 8009198:	637b      	str	r3, [r7, #52]	; 0x34
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f383 8811 	msr	BASEPRI, r3
}
 80091a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3738      	adds	r7, #56	; 0x38
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10a      	bne.n	80091d4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	60bb      	str	r3, [r7, #8]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80091d4:	f001 fd36 	bl	800ac44 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091dc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80091de:	f001 fd61 	bl	800aca4 <vPortExitCritical>

	return uxReturn;
 80091e2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10a      	bne.n	8009214 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	60fb      	str	r3, [r7, #12]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8009214:	f001 fd16 	bl	800ac44 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009224:	f001 fd3e 	bl	800aca4 <vPortExitCritical>

	return uxReturn;
 8009228:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009232:	b480      	push	{r7}
 8009234:	b087      	sub	sp, #28
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10a      	bne.n	800925a <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	60fb      	str	r3, [r7, #12]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009260:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009262:	4618      	mov	r0, r3
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b086      	sub	sp, #24
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800927a:	2300      	movs	r3, #0
 800927c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009282:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10d      	bne.n	80092a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d14d      	bne.n	8009330 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	4618      	mov	r0, r3
 800929a:	f000 ff93 	bl	800a1c4 <xTaskPriorityDisinherit>
 800929e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	609a      	str	r2, [r3, #8]
 80092a6:	e043      	b.n	8009330 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d119      	bne.n	80092e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6858      	ldr	r0, [r3, #4]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b6:	461a      	mov	r2, r3
 80092b8:	68b9      	ldr	r1, [r7, #8]
 80092ba:	f002 f80d 	bl	800b2d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	441a      	add	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d32b      	bcc.n	8009330 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	605a      	str	r2, [r3, #4]
 80092e0:	e026      	b.n	8009330 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	68d8      	ldr	r0, [r3, #12]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ea:	461a      	mov	r2, r3
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	f001 fff3 	bl	800b2d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	425b      	negs	r3, r3
 80092fc:	441a      	add	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	68da      	ldr	r2, [r3, #12]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	d207      	bcs.n	800931e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	425b      	negs	r3, r3
 8009318:	441a      	add	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d105      	bne.n	8009330 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	3b01      	subs	r3, #1
 800932e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009338:	697b      	ldr	r3, [r7, #20]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009350:	2b00      	cmp	r3, #0
 8009352:	d018      	beq.n	8009386 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68da      	ldr	r2, [r3, #12]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935c:	441a      	add	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	429a      	cmp	r2, r3
 800936c:	d303      	bcc.n	8009376 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68d9      	ldr	r1, [r3, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937e:	461a      	mov	r2, r3
 8009380:	6838      	ldr	r0, [r7, #0]
 8009382:	f001 ffa9 	bl	800b2d8 <memcpy>
	}
}
 8009386:	bf00      	nop
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009396:	f001 fc55 	bl	800ac44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093a2:	e011      	b.n	80093c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d012      	beq.n	80093d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3324      	adds	r3, #36	; 0x24
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 fd2b 	bl	8009e0c <xTaskRemoveFromEventList>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093bc:	f000 fe02 	bl	8009fc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	dce9      	bgt.n	80093a4 <prvUnlockQueue+0x16>
 80093d0:	e000      	b.n	80093d4 <prvUnlockQueue+0x46>
					break;
 80093d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	22ff      	movs	r2, #255	; 0xff
 80093d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093dc:	f001 fc62 	bl	800aca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093e0:	f001 fc30 	bl	800ac44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093ec:	e011      	b.n	8009412 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d012      	beq.n	800941c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3310      	adds	r3, #16
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fd06 	bl	8009e0c <xTaskRemoveFromEventList>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009406:	f000 fddd 	bl	8009fc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	3b01      	subs	r3, #1
 800940e:	b2db      	uxtb	r3, r3
 8009410:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009416:	2b00      	cmp	r3, #0
 8009418:	dce9      	bgt.n	80093ee <prvUnlockQueue+0x60>
 800941a:	e000      	b.n	800941e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800941c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	22ff      	movs	r2, #255	; 0xff
 8009422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009426:	f001 fc3d 	bl	800aca4 <vPortExitCritical>
}
 800942a:	bf00      	nop
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800943a:	f001 fc03 	bl	800ac44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009442:	2b00      	cmp	r3, #0
 8009444:	d102      	bne.n	800944c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009446:	2301      	movs	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	e001      	b.n	8009450 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800944c:	2300      	movs	r3, #0
 800944e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009450:	f001 fc28 	bl	800aca4 <vPortExitCritical>

	return xReturn;
 8009454:	68fb      	ldr	r3, [r7, #12]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009466:	f001 fbed 	bl	800ac44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009472:	429a      	cmp	r2, r3
 8009474:	d102      	bne.n	800947c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009476:	2301      	movs	r3, #1
 8009478:	60fb      	str	r3, [r7, #12]
 800947a:	e001      	b.n	8009480 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009480:	f001 fc10 	bl	800aca4 <vPortExitCritical>

	return xReturn;
 8009484:	68fb      	ldr	r3, [r7, #12]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800949a:	2300      	movs	r3, #0
 800949c:	60fb      	str	r3, [r7, #12]
 800949e:	e014      	b.n	80094ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094a0:	4a0f      	ldr	r2, [pc, #60]	; (80094e0 <vQueueAddToRegistry+0x50>)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094ac:	490c      	ldr	r1, [pc, #48]	; (80094e0 <vQueueAddToRegistry+0x50>)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80094b6:	4a0a      	ldr	r2, [pc, #40]	; (80094e0 <vQueueAddToRegistry+0x50>)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	4413      	add	r3, r2
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094c2:	e006      	b.n	80094d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3301      	adds	r3, #1
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b07      	cmp	r3, #7
 80094ce:	d9e7      	bls.n	80094a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	200025cc 	.word	0x200025cc

080094e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094f4:	f001 fba6 	bl	800ac44 <vPortEnterCritical>
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094fe:	b25b      	sxtb	r3, r3
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009504:	d103      	bne.n	800950e <vQueueWaitForMessageRestricted+0x2a>
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009514:	b25b      	sxtb	r3, r3
 8009516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951a:	d103      	bne.n	8009524 <vQueueWaitForMessageRestricted+0x40>
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009524:	f001 fbbe 	bl	800aca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	3324      	adds	r3, #36	; 0x24
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fc3b 	bl	8009db4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800953e:	6978      	ldr	r0, [r7, #20]
 8009540:	f7ff ff25 	bl	800938e <prvUnlockQueue>
	}
 8009544:	bf00      	nop
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08e      	sub	sp, #56	; 0x38
 8009550:	af04      	add	r7, sp, #16
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800955a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	623b      	str	r3, [r7, #32]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <xTaskCreateStatic+0x46>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	61fb      	str	r3, [r7, #28]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009592:	235c      	movs	r3, #92	; 0x5c
 8009594:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b5c      	cmp	r3, #92	; 0x5c
 800959a:	d00a      	beq.n	80095b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	61bb      	str	r3, [r7, #24]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d01e      	beq.n	80095f8 <xTaskCreateStatic+0xac>
 80095ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d01b      	beq.n	80095f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	2202      	movs	r2, #2
 80095ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095d2:	2300      	movs	r3, #0
 80095d4:	9303      	str	r3, [sp, #12]
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	9302      	str	r3, [sp, #8]
 80095da:	f107 0314 	add.w	r3, r7, #20
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f000 f850 	bl	8009690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095f2:	f000 f8dd 	bl	80097b0 <prvAddNewTaskToReadyList>
 80095f6:	e001      	b.n	80095fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095fc:	697b      	ldr	r3, [r7, #20]
	}
 80095fe:	4618      	mov	r0, r3
 8009600:	3728      	adds	r7, #40	; 0x28
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009606:	b580      	push	{r7, lr}
 8009608:	b08c      	sub	sp, #48	; 0x30
 800960a:	af04      	add	r7, sp, #16
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	4613      	mov	r3, r2
 8009614:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009616:	88fb      	ldrh	r3, [r7, #6]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4618      	mov	r0, r3
 800961c:	f001 fc34 	bl	800ae88 <pvPortMalloc>
 8009620:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00e      	beq.n	8009646 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009628:	205c      	movs	r0, #92	; 0x5c
 800962a:	f001 fc2d 	bl	800ae88 <pvPortMalloc>
 800962e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	631a      	str	r2, [r3, #48]	; 0x30
 800963c:	e005      	b.n	800964a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800963e:	6978      	ldr	r0, [r7, #20]
 8009640:	f001 fcee 	bl	800b020 <vPortFree>
 8009644:	e001      	b.n	800964a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d017      	beq.n	8009680 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009658:	88fa      	ldrh	r2, [r7, #6]
 800965a:	2300      	movs	r3, #0
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f80e 	bl	8009690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009674:	69f8      	ldr	r0, [r7, #28]
 8009676:	f000 f89b 	bl	80097b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800967a:	2301      	movs	r3, #1
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	e002      	b.n	8009686 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009680:	f04f 33ff 	mov.w	r3, #4294967295
 8009684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009686:	69bb      	ldr	r3, [r7, #24]
	}
 8009688:	4618      	mov	r0, r3
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	461a      	mov	r2, r3
 80096a8:	21a5      	movs	r1, #165	; 0xa5
 80096aa:	f001 fe23 	bl	800b2f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80096b8:	3b01      	subs	r3, #1
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	f023 0307 	bic.w	r3, r3, #7
 80096c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	617b      	str	r3, [r7, #20]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d01f      	beq.n	800972e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096ee:	2300      	movs	r3, #0
 80096f0:	61fb      	str	r3, [r7, #28]
 80096f2:	e012      	b.n	800971a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	4413      	add	r3, r2
 80096fa:	7819      	ldrb	r1, [r3, #0]
 80096fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4413      	add	r3, r2
 8009702:	3334      	adds	r3, #52	; 0x34
 8009704:	460a      	mov	r2, r1
 8009706:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d006      	beq.n	8009722 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	3301      	adds	r3, #1
 8009718:	61fb      	str	r3, [r7, #28]
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	2b0f      	cmp	r3, #15
 800971e:	d9e9      	bls.n	80096f4 <prvInitialiseNewTask+0x64>
 8009720:	e000      	b.n	8009724 <prvInitialiseNewTask+0x94>
			{
				break;
 8009722:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800972c:	e003      	b.n	8009736 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	2200      	movs	r2, #0
 8009732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	2b37      	cmp	r3, #55	; 0x37
 800973a:	d901      	bls.n	8009740 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800973c:	2337      	movs	r3, #55	; 0x37
 800973e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009744:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800974a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	2200      	movs	r2, #0
 8009750:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	3304      	adds	r3, #4
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff f85e 	bl	8008818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	3318      	adds	r3, #24
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff f859 	bl	8008818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800976a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800977a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	2200      	movs	r2, #0
 8009780:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	68f9      	ldr	r1, [r7, #12]
 800978e:	69b8      	ldr	r0, [r7, #24]
 8009790:	f001 f928 	bl	800a9e4 <pxPortInitialiseStack>
 8009794:	4602      	mov	r2, r0
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097a6:	bf00      	nop
 80097a8:	3720      	adds	r7, #32
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097b8:	f001 fa44 	bl	800ac44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097bc:	4b2d      	ldr	r3, [pc, #180]	; (8009874 <prvAddNewTaskToReadyList+0xc4>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3301      	adds	r3, #1
 80097c2:	4a2c      	ldr	r2, [pc, #176]	; (8009874 <prvAddNewTaskToReadyList+0xc4>)
 80097c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097c6:	4b2c      	ldr	r3, [pc, #176]	; (8009878 <prvAddNewTaskToReadyList+0xc8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d109      	bne.n	80097e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097ce:	4a2a      	ldr	r2, [pc, #168]	; (8009878 <prvAddNewTaskToReadyList+0xc8>)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097d4:	4b27      	ldr	r3, [pc, #156]	; (8009874 <prvAddNewTaskToReadyList+0xc4>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d110      	bne.n	80097fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097dc:	f000 fc16 	bl	800a00c <prvInitialiseTaskLists>
 80097e0:	e00d      	b.n	80097fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097e2:	4b26      	ldr	r3, [pc, #152]	; (800987c <prvAddNewTaskToReadyList+0xcc>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d109      	bne.n	80097fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097ea:	4b23      	ldr	r3, [pc, #140]	; (8009878 <prvAddNewTaskToReadyList+0xc8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d802      	bhi.n	80097fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097f8:	4a1f      	ldr	r2, [pc, #124]	; (8009878 <prvAddNewTaskToReadyList+0xc8>)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097fe:	4b20      	ldr	r3, [pc, #128]	; (8009880 <prvAddNewTaskToReadyList+0xd0>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	4a1e      	ldr	r2, [pc, #120]	; (8009880 <prvAddNewTaskToReadyList+0xd0>)
 8009806:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009808:	4b1d      	ldr	r3, [pc, #116]	; (8009880 <prvAddNewTaskToReadyList+0xd0>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009814:	4b1b      	ldr	r3, [pc, #108]	; (8009884 <prvAddNewTaskToReadyList+0xd4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	d903      	bls.n	8009824 <prvAddNewTaskToReadyList+0x74>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	4a18      	ldr	r2, [pc, #96]	; (8009884 <prvAddNewTaskToReadyList+0xd4>)
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4a15      	ldr	r2, [pc, #84]	; (8009888 <prvAddNewTaskToReadyList+0xd8>)
 8009832:	441a      	add	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3304      	adds	r3, #4
 8009838:	4619      	mov	r1, r3
 800983a:	4610      	mov	r0, r2
 800983c:	f7fe fff9 	bl	8008832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009840:	f001 fa30 	bl	800aca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009844:	4b0d      	ldr	r3, [pc, #52]	; (800987c <prvAddNewTaskToReadyList+0xcc>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00e      	beq.n	800986a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <prvAddNewTaskToReadyList+0xc8>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	429a      	cmp	r2, r3
 8009858:	d207      	bcs.n	800986a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800985a:	4b0c      	ldr	r3, [pc, #48]	; (800988c <prvAddNewTaskToReadyList+0xdc>)
 800985c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20002ae0 	.word	0x20002ae0
 8009878:	2000260c 	.word	0x2000260c
 800987c:	20002aec 	.word	0x20002aec
 8009880:	20002afc 	.word	0x20002afc
 8009884:	20002ae8 	.word	0x20002ae8
 8009888:	20002610 	.word	0x20002610
 800988c:	e000ed04 	.word	0xe000ed04

08009890 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d017      	beq.n	80098d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098a2:	4b13      	ldr	r3, [pc, #76]	; (80098f0 <vTaskDelay+0x60>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00a      	beq.n	80098c0 <vTaskDelay+0x30>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	60bb      	str	r3, [r7, #8]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80098c0:	f000 f880 	bl	80099c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098c4:	2100      	movs	r1, #0
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fcea 	bl	800a2a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098cc:	f000 f888 	bl	80099e0 <xTaskResumeAll>
 80098d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d107      	bne.n	80098e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80098d8:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <vTaskDelay+0x64>)
 80098da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20002b08 	.word	0x20002b08
 80098f4:	e000ed04 	.word	0xe000ed04

080098f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08a      	sub	sp, #40	; 0x28
 80098fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009902:	2300      	movs	r3, #0
 8009904:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009906:	463a      	mov	r2, r7
 8009908:	1d39      	adds	r1, r7, #4
 800990a:	f107 0308 	add.w	r3, r7, #8
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe ff2e 	bl	8008770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	9202      	str	r2, [sp, #8]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	2300      	movs	r3, #0
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	2300      	movs	r3, #0
 8009924:	460a      	mov	r2, r1
 8009926:	4921      	ldr	r1, [pc, #132]	; (80099ac <vTaskStartScheduler+0xb4>)
 8009928:	4821      	ldr	r0, [pc, #132]	; (80099b0 <vTaskStartScheduler+0xb8>)
 800992a:	f7ff fe0f 	bl	800954c <xTaskCreateStatic>
 800992e:	4603      	mov	r3, r0
 8009930:	4a20      	ldr	r2, [pc, #128]	; (80099b4 <vTaskStartScheduler+0xbc>)
 8009932:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009934:	4b1f      	ldr	r3, [pc, #124]	; (80099b4 <vTaskStartScheduler+0xbc>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
 8009940:	e001      	b.n	8009946 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009942:	2300      	movs	r3, #0
 8009944:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d102      	bne.n	8009952 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800994c:	f000 fcfc 	bl	800a348 <xTimerCreateTimerTask>
 8009950:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d116      	bne.n	8009986 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	613b      	str	r3, [r7, #16]
}
 800996a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800996c:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <vTaskStartScheduler+0xc0>)
 800996e:	f04f 32ff 	mov.w	r2, #4294967295
 8009972:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009974:	4b11      	ldr	r3, [pc, #68]	; (80099bc <vTaskStartScheduler+0xc4>)
 8009976:	2201      	movs	r2, #1
 8009978:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800997a:	4b11      	ldr	r3, [pc, #68]	; (80099c0 <vTaskStartScheduler+0xc8>)
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009980:	f001 f8be 	bl	800ab00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009984:	e00e      	b.n	80099a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998c:	d10a      	bne.n	80099a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	60fb      	str	r3, [r7, #12]
}
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <vTaskStartScheduler+0xaa>
}
 80099a4:	bf00      	nop
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	0800f570 	.word	0x0800f570
 80099b0:	08009fdd 	.word	0x08009fdd
 80099b4:	20002b04 	.word	0x20002b04
 80099b8:	20002b00 	.word	0x20002b00
 80099bc:	20002aec 	.word	0x20002aec
 80099c0:	20002ae4 	.word	0x20002ae4

080099c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099c8:	4b04      	ldr	r3, [pc, #16]	; (80099dc <vTaskSuspendAll+0x18>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3301      	adds	r3, #1
 80099ce:	4a03      	ldr	r2, [pc, #12]	; (80099dc <vTaskSuspendAll+0x18>)
 80099d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80099d2:	bf00      	nop
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	20002b08 	.word	0x20002b08

080099e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099ee:	4b42      	ldr	r3, [pc, #264]	; (8009af8 <xTaskResumeAll+0x118>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10a      	bne.n	8009a0c <xTaskResumeAll+0x2c>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	603b      	str	r3, [r7, #0]
}
 8009a08:	bf00      	nop
 8009a0a:	e7fe      	b.n	8009a0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a0c:	f001 f91a 	bl	800ac44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a10:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <xTaskResumeAll+0x118>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	4a38      	ldr	r2, [pc, #224]	; (8009af8 <xTaskResumeAll+0x118>)
 8009a18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a1a:	4b37      	ldr	r3, [pc, #220]	; (8009af8 <xTaskResumeAll+0x118>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d162      	bne.n	8009ae8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a22:	4b36      	ldr	r3, [pc, #216]	; (8009afc <xTaskResumeAll+0x11c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d05e      	beq.n	8009ae8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a2a:	e02f      	b.n	8009a8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2c:	4b34      	ldr	r3, [pc, #208]	; (8009b00 <xTaskResumeAll+0x120>)
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3318      	adds	r3, #24
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe ff57 	bl	80088ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3304      	adds	r3, #4
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe ff52 	bl	80088ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4c:	4b2d      	ldr	r3, [pc, #180]	; (8009b04 <xTaskResumeAll+0x124>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d903      	bls.n	8009a5c <xTaskResumeAll+0x7c>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a58:	4a2a      	ldr	r2, [pc, #168]	; (8009b04 <xTaskResumeAll+0x124>)
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a60:	4613      	mov	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4a27      	ldr	r2, [pc, #156]	; (8009b08 <xTaskResumeAll+0x128>)
 8009a6a:	441a      	add	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f7fe fedd 	bl	8008832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	4b23      	ldr	r3, [pc, #140]	; (8009b0c <xTaskResumeAll+0x12c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d302      	bcc.n	8009a8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009a86:	4b22      	ldr	r3, [pc, #136]	; (8009b10 <xTaskResumeAll+0x130>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a8c:	4b1c      	ldr	r3, [pc, #112]	; (8009b00 <xTaskResumeAll+0x120>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1cb      	bne.n	8009a2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a9a:	f000 fb55 	bl	800a148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a9e:	4b1d      	ldr	r3, [pc, #116]	; (8009b14 <xTaskResumeAll+0x134>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d010      	beq.n	8009acc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009aaa:	f000 f847 	bl	8009b3c <xTaskIncrementTick>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ab4:	4b16      	ldr	r3, [pc, #88]	; (8009b10 <xTaskResumeAll+0x130>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1f1      	bne.n	8009aaa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009ac6:	4b13      	ldr	r3, [pc, #76]	; (8009b14 <xTaskResumeAll+0x134>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009acc:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <xTaskResumeAll+0x130>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d009      	beq.n	8009ae8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ad8:	4b0f      	ldr	r3, [pc, #60]	; (8009b18 <xTaskResumeAll+0x138>)
 8009ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ae8:	f001 f8dc 	bl	800aca4 <vPortExitCritical>

	return xAlreadyYielded;
 8009aec:	68bb      	ldr	r3, [r7, #8]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20002b08 	.word	0x20002b08
 8009afc:	20002ae0 	.word	0x20002ae0
 8009b00:	20002aa0 	.word	0x20002aa0
 8009b04:	20002ae8 	.word	0x20002ae8
 8009b08:	20002610 	.word	0x20002610
 8009b0c:	2000260c 	.word	0x2000260c
 8009b10:	20002af4 	.word	0x20002af4
 8009b14:	20002af0 	.word	0x20002af0
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <xTaskGetTickCount+0x1c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b28:	687b      	ldr	r3, [r7, #4]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20002ae4 	.word	0x20002ae4

08009b3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b46:	4b4f      	ldr	r3, [pc, #316]	; (8009c84 <xTaskIncrementTick+0x148>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f040 808f 	bne.w	8009c6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b50:	4b4d      	ldr	r3, [pc, #308]	; (8009c88 <xTaskIncrementTick+0x14c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b58:	4a4b      	ldr	r2, [pc, #300]	; (8009c88 <xTaskIncrementTick+0x14c>)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d120      	bne.n	8009ba6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b64:	4b49      	ldr	r3, [pc, #292]	; (8009c8c <xTaskIncrementTick+0x150>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <xTaskIncrementTick+0x48>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	603b      	str	r3, [r7, #0]
}
 8009b80:	bf00      	nop
 8009b82:	e7fe      	b.n	8009b82 <xTaskIncrementTick+0x46>
 8009b84:	4b41      	ldr	r3, [pc, #260]	; (8009c8c <xTaskIncrementTick+0x150>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	4b41      	ldr	r3, [pc, #260]	; (8009c90 <xTaskIncrementTick+0x154>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a3f      	ldr	r2, [pc, #252]	; (8009c8c <xTaskIncrementTick+0x150>)
 8009b90:	6013      	str	r3, [r2, #0]
 8009b92:	4a3f      	ldr	r2, [pc, #252]	; (8009c90 <xTaskIncrementTick+0x154>)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	4b3e      	ldr	r3, [pc, #248]	; (8009c94 <xTaskIncrementTick+0x158>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	4a3d      	ldr	r2, [pc, #244]	; (8009c94 <xTaskIncrementTick+0x158>)
 8009ba0:	6013      	str	r3, [r2, #0]
 8009ba2:	f000 fad1 	bl	800a148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ba6:	4b3c      	ldr	r3, [pc, #240]	; (8009c98 <xTaskIncrementTick+0x15c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d349      	bcc.n	8009c44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bb0:	4b36      	ldr	r3, [pc, #216]	; (8009c8c <xTaskIncrementTick+0x150>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d104      	bne.n	8009bc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bba:	4b37      	ldr	r3, [pc, #220]	; (8009c98 <xTaskIncrementTick+0x15c>)
 8009bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc0:	601a      	str	r2, [r3, #0]
					break;
 8009bc2:	e03f      	b.n	8009c44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bc4:	4b31      	ldr	r3, [pc, #196]	; (8009c8c <xTaskIncrementTick+0x150>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d203      	bcs.n	8009be4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bdc:	4a2e      	ldr	r2, [pc, #184]	; (8009c98 <xTaskIncrementTick+0x15c>)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009be2:	e02f      	b.n	8009c44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	3304      	adds	r3, #4
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe fe7f 	bl	80088ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d004      	beq.n	8009c00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	3318      	adds	r3, #24
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fe fe76 	bl	80088ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c04:	4b25      	ldr	r3, [pc, #148]	; (8009c9c <xTaskIncrementTick+0x160>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d903      	bls.n	8009c14 <xTaskIncrementTick+0xd8>
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c10:	4a22      	ldr	r2, [pc, #136]	; (8009c9c <xTaskIncrementTick+0x160>)
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <xTaskIncrementTick+0x164>)
 8009c22:	441a      	add	r2, r3
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	f7fe fe01 	bl	8008832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c34:	4b1b      	ldr	r3, [pc, #108]	; (8009ca4 <xTaskIncrementTick+0x168>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d3b8      	bcc.n	8009bb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c42:	e7b5      	b.n	8009bb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c44:	4b17      	ldr	r3, [pc, #92]	; (8009ca4 <xTaskIncrementTick+0x168>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4a:	4915      	ldr	r1, [pc, #84]	; (8009ca0 <xTaskIncrementTick+0x164>)
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	440b      	add	r3, r1
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d901      	bls.n	8009c60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c60:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <xTaskIncrementTick+0x16c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d007      	beq.n	8009c78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	617b      	str	r3, [r7, #20]
 8009c6c:	e004      	b.n	8009c78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c6e:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <xTaskIncrementTick+0x170>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3301      	adds	r3, #1
 8009c74:	4a0d      	ldr	r2, [pc, #52]	; (8009cac <xTaskIncrementTick+0x170>)
 8009c76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c78:	697b      	ldr	r3, [r7, #20]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	20002b08 	.word	0x20002b08
 8009c88:	20002ae4 	.word	0x20002ae4
 8009c8c:	20002a98 	.word	0x20002a98
 8009c90:	20002a9c 	.word	0x20002a9c
 8009c94:	20002af8 	.word	0x20002af8
 8009c98:	20002b00 	.word	0x20002b00
 8009c9c:	20002ae8 	.word	0x20002ae8
 8009ca0:	20002610 	.word	0x20002610
 8009ca4:	2000260c 	.word	0x2000260c
 8009ca8:	20002af4 	.word	0x20002af4
 8009cac:	20002af0 	.word	0x20002af0

08009cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cb6:	4b28      	ldr	r3, [pc, #160]	; (8009d58 <vTaskSwitchContext+0xa8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cbe:	4b27      	ldr	r3, [pc, #156]	; (8009d5c <vTaskSwitchContext+0xac>)
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cc4:	e041      	b.n	8009d4a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009cc6:	4b25      	ldr	r3, [pc, #148]	; (8009d5c <vTaskSwitchContext+0xac>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ccc:	4b24      	ldr	r3, [pc, #144]	; (8009d60 <vTaskSwitchContext+0xb0>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	e010      	b.n	8009cf6 <vTaskSwitchContext+0x46>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <vTaskSwitchContext+0x40>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	607b      	str	r3, [r7, #4]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <vTaskSwitchContext+0x3e>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	491b      	ldr	r1, [pc, #108]	; (8009d64 <vTaskSwitchContext+0xb4>)
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0e4      	beq.n	8009cd4 <vTaskSwitchContext+0x24>
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4a13      	ldr	r2, [pc, #76]	; (8009d64 <vTaskSwitchContext+0xb4>)
 8009d16:	4413      	add	r3, r2
 8009d18:	60bb      	str	r3, [r7, #8]
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	605a      	str	r2, [r3, #4]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d104      	bne.n	8009d3a <vTaskSwitchContext+0x8a>
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	605a      	str	r2, [r3, #4]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	4a09      	ldr	r2, [pc, #36]	; (8009d68 <vTaskSwitchContext+0xb8>)
 8009d42:	6013      	str	r3, [r2, #0]
 8009d44:	4a06      	ldr	r2, [pc, #24]	; (8009d60 <vTaskSwitchContext+0xb0>)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6013      	str	r3, [r2, #0]
}
 8009d4a:	bf00      	nop
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	20002b08 	.word	0x20002b08
 8009d5c:	20002af4 	.word	0x20002af4
 8009d60:	20002ae8 	.word	0x20002ae8
 8009d64:	20002610 	.word	0x20002610
 8009d68:	2000260c 	.word	0x2000260c

08009d6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	60fb      	str	r3, [r7, #12]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d92:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <vTaskPlaceOnEventList+0x44>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3318      	adds	r3, #24
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7fe fd6d 	bl	800887a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009da0:	2101      	movs	r1, #1
 8009da2:	6838      	ldr	r0, [r7, #0]
 8009da4:	f000 fa7c 	bl	800a2a0 <prvAddCurrentTaskToDelayedList>
}
 8009da8:	bf00      	nop
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	2000260c 	.word	0x2000260c

08009db4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10a      	bne.n	8009ddc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	617b      	str	r3, [r7, #20]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <vTaskPlaceOnEventListRestricted+0x54>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3318      	adds	r3, #24
 8009de2:	4619      	mov	r1, r3
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f7fe fd24 	bl	8008832 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009df0:	f04f 33ff 	mov.w	r3, #4294967295
 8009df4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	68b8      	ldr	r0, [r7, #8]
 8009dfa:	f000 fa51 	bl	800a2a0 <prvAddCurrentTaskToDelayedList>
	}
 8009dfe:	bf00      	nop
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	2000260c 	.word	0x2000260c

08009e0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10a      	bne.n	8009e38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	60fb      	str	r3, [r7, #12]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	3318      	adds	r3, #24
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe fd55 	bl	80088ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e42:	4b1e      	ldr	r3, [pc, #120]	; (8009ebc <xTaskRemoveFromEventList+0xb0>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d11d      	bne.n	8009e86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fd4c 	bl	80088ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e58:	4b19      	ldr	r3, [pc, #100]	; (8009ec0 <xTaskRemoveFromEventList+0xb4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d903      	bls.n	8009e68 <xTaskRemoveFromEventList+0x5c>
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e64:	4a16      	ldr	r2, [pc, #88]	; (8009ec0 <xTaskRemoveFromEventList+0xb4>)
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4a13      	ldr	r2, [pc, #76]	; (8009ec4 <xTaskRemoveFromEventList+0xb8>)
 8009e76:	441a      	add	r2, r3
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7fe fcd7 	bl	8008832 <vListInsertEnd>
 8009e84:	e005      	b.n	8009e92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	3318      	adds	r3, #24
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	480e      	ldr	r0, [pc, #56]	; (8009ec8 <xTaskRemoveFromEventList+0xbc>)
 8009e8e:	f7fe fcd0 	bl	8008832 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e96:	4b0d      	ldr	r3, [pc, #52]	; (8009ecc <xTaskRemoveFromEventList+0xc0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d905      	bls.n	8009eac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ea4:	4b0a      	ldr	r3, [pc, #40]	; (8009ed0 <xTaskRemoveFromEventList+0xc4>)
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	e001      	b.n	8009eb0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009eac:	2300      	movs	r3, #0
 8009eae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009eb0:	697b      	ldr	r3, [r7, #20]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20002b08 	.word	0x20002b08
 8009ec0:	20002ae8 	.word	0x20002ae8
 8009ec4:	20002610 	.word	0x20002610
 8009ec8:	20002aa0 	.word	0x20002aa0
 8009ecc:	2000260c 	.word	0x2000260c
 8009ed0:	20002af4 	.word	0x20002af4

08009ed4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009edc:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <vTaskInternalSetTimeOutState+0x24>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <vTaskInternalSetTimeOutState+0x28>)
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	605a      	str	r2, [r3, #4]
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	20002af8 	.word	0x20002af8
 8009efc:	20002ae4 	.word	0x20002ae4

08009f00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10a      	bne.n	8009f26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	613b      	str	r3, [r7, #16]
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	60fb      	str	r3, [r7, #12]
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f42:	f000 fe7f 	bl	800ac44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f46:	4b1d      	ldr	r3, [pc, #116]	; (8009fbc <xTaskCheckForTimeOut+0xbc>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	69ba      	ldr	r2, [r7, #24]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5e:	d102      	bne.n	8009f66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	e023      	b.n	8009fae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	4b15      	ldr	r3, [pc, #84]	; (8009fc0 <xTaskCheckForTimeOut+0xc0>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d007      	beq.n	8009f82 <xTaskCheckForTimeOut+0x82>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d302      	bcc.n	8009f82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	e015      	b.n	8009fae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d20b      	bcs.n	8009fa4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	1ad2      	subs	r2, r2, r3
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff ff9b 	bl	8009ed4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	61fb      	str	r3, [r7, #28]
 8009fa2:	e004      	b.n	8009fae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009faa:	2301      	movs	r3, #1
 8009fac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009fae:	f000 fe79 	bl	800aca4 <vPortExitCritical>

	return xReturn;
 8009fb2:	69fb      	ldr	r3, [r7, #28]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3720      	adds	r7, #32
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	20002ae4 	.word	0x20002ae4
 8009fc0:	20002af8 	.word	0x20002af8

08009fc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fc8:	4b03      	ldr	r3, [pc, #12]	; (8009fd8 <vTaskMissedYield+0x14>)
 8009fca:	2201      	movs	r2, #1
 8009fcc:	601a      	str	r2, [r3, #0]
}
 8009fce:	bf00      	nop
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	20002af4 	.word	0x20002af4

08009fdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009fe4:	f000 f852 	bl	800a08c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fe8:	4b06      	ldr	r3, [pc, #24]	; (800a004 <prvIdleTask+0x28>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d9f9      	bls.n	8009fe4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <prvIdleTask+0x2c>)
 8009ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff6:	601a      	str	r2, [r3, #0]
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a000:	e7f0      	b.n	8009fe4 <prvIdleTask+0x8>
 800a002:	bf00      	nop
 800a004:	20002610 	.word	0x20002610
 800a008:	e000ed04 	.word	0xe000ed04

0800a00c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a012:	2300      	movs	r3, #0
 800a014:	607b      	str	r3, [r7, #4]
 800a016:	e00c      	b.n	800a032 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	4613      	mov	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4a12      	ldr	r2, [pc, #72]	; (800a06c <prvInitialiseTaskLists+0x60>)
 800a024:	4413      	add	r3, r2
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fbd6 	bl	80087d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	3301      	adds	r3, #1
 800a030:	607b      	str	r3, [r7, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b37      	cmp	r3, #55	; 0x37
 800a036:	d9ef      	bls.n	800a018 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a038:	480d      	ldr	r0, [pc, #52]	; (800a070 <prvInitialiseTaskLists+0x64>)
 800a03a:	f7fe fbcd 	bl	80087d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a03e:	480d      	ldr	r0, [pc, #52]	; (800a074 <prvInitialiseTaskLists+0x68>)
 800a040:	f7fe fbca 	bl	80087d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a044:	480c      	ldr	r0, [pc, #48]	; (800a078 <prvInitialiseTaskLists+0x6c>)
 800a046:	f7fe fbc7 	bl	80087d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a04a:	480c      	ldr	r0, [pc, #48]	; (800a07c <prvInitialiseTaskLists+0x70>)
 800a04c:	f7fe fbc4 	bl	80087d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a050:	480b      	ldr	r0, [pc, #44]	; (800a080 <prvInitialiseTaskLists+0x74>)
 800a052:	f7fe fbc1 	bl	80087d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a056:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <prvInitialiseTaskLists+0x78>)
 800a058:	4a05      	ldr	r2, [pc, #20]	; (800a070 <prvInitialiseTaskLists+0x64>)
 800a05a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a05c:	4b0a      	ldr	r3, [pc, #40]	; (800a088 <prvInitialiseTaskLists+0x7c>)
 800a05e:	4a05      	ldr	r2, [pc, #20]	; (800a074 <prvInitialiseTaskLists+0x68>)
 800a060:	601a      	str	r2, [r3, #0]
}
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20002610 	.word	0x20002610
 800a070:	20002a70 	.word	0x20002a70
 800a074:	20002a84 	.word	0x20002a84
 800a078:	20002aa0 	.word	0x20002aa0
 800a07c:	20002ab4 	.word	0x20002ab4
 800a080:	20002acc 	.word	0x20002acc
 800a084:	20002a98 	.word	0x20002a98
 800a088:	20002a9c 	.word	0x20002a9c

0800a08c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a092:	e019      	b.n	800a0c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a094:	f000 fdd6 	bl	800ac44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a098:	4b10      	ldr	r3, [pc, #64]	; (800a0dc <prvCheckTasksWaitingTermination+0x50>)
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe fc21 	bl	80088ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0aa:	4b0d      	ldr	r3, [pc, #52]	; (800a0e0 <prvCheckTasksWaitingTermination+0x54>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	4a0b      	ldr	r2, [pc, #44]	; (800a0e0 <prvCheckTasksWaitingTermination+0x54>)
 800a0b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0b4:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <prvCheckTasksWaitingTermination+0x58>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	4a0a      	ldr	r2, [pc, #40]	; (800a0e4 <prvCheckTasksWaitingTermination+0x58>)
 800a0bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0be:	f000 fdf1 	bl	800aca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f810 	bl	800a0e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0c8:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <prvCheckTasksWaitingTermination+0x58>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e1      	bne.n	800a094 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0d0:	bf00      	nop
 800a0d2:	bf00      	nop
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20002ab4 	.word	0x20002ab4
 800a0e0:	20002ae0 	.word	0x20002ae0
 800a0e4:	20002ac8 	.word	0x20002ac8

0800a0e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d108      	bne.n	800a10c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 ff8e 	bl	800b020 <vPortFree>
				vPortFree( pxTCB );
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 ff8b 	bl	800b020 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a10a:	e018      	b.n	800a13e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a112:	2b01      	cmp	r3, #1
 800a114:	d103      	bne.n	800a11e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 ff82 	bl	800b020 <vPortFree>
	}
 800a11c:	e00f      	b.n	800a13e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a124:	2b02      	cmp	r3, #2
 800a126:	d00a      	beq.n	800a13e <prvDeleteTCB+0x56>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	60fb      	str	r3, [r7, #12]
}
 800a13a:	bf00      	nop
 800a13c:	e7fe      	b.n	800a13c <prvDeleteTCB+0x54>
	}
 800a13e:	bf00      	nop
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
	...

0800a148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a14e:	4b0c      	ldr	r3, [pc, #48]	; (800a180 <prvResetNextTaskUnblockTime+0x38>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <prvResetNextTaskUnblockTime+0x3c>)
 800a15a:	f04f 32ff 	mov.w	r2, #4294967295
 800a15e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a160:	e008      	b.n	800a174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a162:	4b07      	ldr	r3, [pc, #28]	; (800a180 <prvResetNextTaskUnblockTime+0x38>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	4a04      	ldr	r2, [pc, #16]	; (800a184 <prvResetNextTaskUnblockTime+0x3c>)
 800a172:	6013      	str	r3, [r2, #0]
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	20002a98 	.word	0x20002a98
 800a184:	20002b00 	.word	0x20002b00

0800a188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a18e:	4b0b      	ldr	r3, [pc, #44]	; (800a1bc <xTaskGetSchedulerState+0x34>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a196:	2301      	movs	r3, #1
 800a198:	607b      	str	r3, [r7, #4]
 800a19a:	e008      	b.n	800a1ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a19c:	4b08      	ldr	r3, [pc, #32]	; (800a1c0 <xTaskGetSchedulerState+0x38>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	607b      	str	r3, [r7, #4]
 800a1a8:	e001      	b.n	800a1ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1ae:	687b      	ldr	r3, [r7, #4]
	}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	20002aec 	.word	0x20002aec
 800a1c0:	20002b08 	.word	0x20002b08

0800a1c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d056      	beq.n	800a288 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a1da:	4b2e      	ldr	r3, [pc, #184]	; (800a294 <xTaskPriorityDisinherit+0xd0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d00a      	beq.n	800a1fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	60fb      	str	r3, [r7, #12]
}
 800a1f6:	bf00      	nop
 800a1f8:	e7fe      	b.n	800a1f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	60bb      	str	r3, [r7, #8]
}
 800a214:	bf00      	nop
 800a216:	e7fe      	b.n	800a216 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a21c:	1e5a      	subs	r2, r3, #1
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d02c      	beq.n	800a288 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a232:	2b00      	cmp	r3, #0
 800a234:	d128      	bne.n	800a288 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	3304      	adds	r3, #4
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fb56 	bl	80088ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a258:	4b0f      	ldr	r3, [pc, #60]	; (800a298 <xTaskPriorityDisinherit+0xd4>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d903      	bls.n	800a268 <xTaskPriorityDisinherit+0xa4>
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a264:	4a0c      	ldr	r2, [pc, #48]	; (800a298 <xTaskPriorityDisinherit+0xd4>)
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26c:	4613      	mov	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4a09      	ldr	r2, [pc, #36]	; (800a29c <xTaskPriorityDisinherit+0xd8>)
 800a276:	441a      	add	r2, r3
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	3304      	adds	r3, #4
 800a27c:	4619      	mov	r1, r3
 800a27e:	4610      	mov	r0, r2
 800a280:	f7fe fad7 	bl	8008832 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a284:	2301      	movs	r3, #1
 800a286:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a288:	697b      	ldr	r3, [r7, #20]
	}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	2000260c 	.word	0x2000260c
 800a298:	20002ae8 	.word	0x20002ae8
 800a29c:	20002610 	.word	0x20002610

0800a2a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a2aa:	4b21      	ldr	r3, [pc, #132]	; (800a330 <prvAddCurrentTaskToDelayedList+0x90>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2b0:	4b20      	ldr	r3, [pc, #128]	; (800a334 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe fb18 	bl	80088ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c2:	d10a      	bne.n	800a2da <prvAddCurrentTaskToDelayedList+0x3a>
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d007      	beq.n	800a2da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2ca:	4b1a      	ldr	r3, [pc, #104]	; (800a334 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4819      	ldr	r0, [pc, #100]	; (800a338 <prvAddCurrentTaskToDelayedList+0x98>)
 800a2d4:	f7fe faad 	bl	8008832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2d8:	e026      	b.n	800a328 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4413      	add	r3, r2
 800a2e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2e2:	4b14      	ldr	r3, [pc, #80]	; (800a334 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d209      	bcs.n	800a306 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2f2:	4b12      	ldr	r3, [pc, #72]	; (800a33c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	4b0f      	ldr	r3, [pc, #60]	; (800a334 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4610      	mov	r0, r2
 800a300:	f7fe fabb 	bl	800887a <vListInsert>
}
 800a304:	e010      	b.n	800a328 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a306:	4b0e      	ldr	r3, [pc, #56]	; (800a340 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <prvAddCurrentTaskToDelayedList+0x94>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3304      	adds	r3, #4
 800a310:	4619      	mov	r1, r3
 800a312:	4610      	mov	r0, r2
 800a314:	f7fe fab1 	bl	800887a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a318:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d202      	bcs.n	800a328 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a322:	4a08      	ldr	r2, [pc, #32]	; (800a344 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	6013      	str	r3, [r2, #0]
}
 800a328:	bf00      	nop
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20002ae4 	.word	0x20002ae4
 800a334:	2000260c 	.word	0x2000260c
 800a338:	20002acc 	.word	0x20002acc
 800a33c:	20002a9c 	.word	0x20002a9c
 800a340:	20002a98 	.word	0x20002a98
 800a344:	20002b00 	.word	0x20002b00

0800a348 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08a      	sub	sp, #40	; 0x28
 800a34c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a34e:	2300      	movs	r3, #0
 800a350:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a352:	f000 fb07 	bl	800a964 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a356:	4b1c      	ldr	r3, [pc, #112]	; (800a3c8 <xTimerCreateTimerTask+0x80>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d021      	beq.n	800a3a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a35e:	2300      	movs	r3, #0
 800a360:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a362:	2300      	movs	r3, #0
 800a364:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a366:	1d3a      	adds	r2, r7, #4
 800a368:	f107 0108 	add.w	r1, r7, #8
 800a36c:	f107 030c 	add.w	r3, r7, #12
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fa17 	bl	80087a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	9202      	str	r2, [sp, #8]
 800a37e:	9301      	str	r3, [sp, #4]
 800a380:	2302      	movs	r3, #2
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	2300      	movs	r3, #0
 800a386:	460a      	mov	r2, r1
 800a388:	4910      	ldr	r1, [pc, #64]	; (800a3cc <xTimerCreateTimerTask+0x84>)
 800a38a:	4811      	ldr	r0, [pc, #68]	; (800a3d0 <xTimerCreateTimerTask+0x88>)
 800a38c:	f7ff f8de 	bl	800954c <xTaskCreateStatic>
 800a390:	4603      	mov	r3, r0
 800a392:	4a10      	ldr	r2, [pc, #64]	; (800a3d4 <xTimerCreateTimerTask+0x8c>)
 800a394:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a396:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <xTimerCreateTimerTask+0x8c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	613b      	str	r3, [r7, #16]
}
 800a3ba:	bf00      	nop
 800a3bc:	e7fe      	b.n	800a3bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a3be:	697b      	ldr	r3, [r7, #20]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20002b3c 	.word	0x20002b3c
 800a3cc:	0800f578 	.word	0x0800f578
 800a3d0:	0800a50d 	.word	0x0800a50d
 800a3d4:	20002b40 	.word	0x20002b40

0800a3d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b08a      	sub	sp, #40	; 0x28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10a      	bne.n	800a406 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	623b      	str	r3, [r7, #32]
}
 800a402:	bf00      	nop
 800a404:	e7fe      	b.n	800a404 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a406:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <xTimerGenericCommand+0x98>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d02a      	beq.n	800a464 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2b05      	cmp	r3, #5
 800a41e:	dc18      	bgt.n	800a452 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a420:	f7ff feb2 	bl	800a188 <xTaskGetSchedulerState>
 800a424:	4603      	mov	r3, r0
 800a426:	2b02      	cmp	r3, #2
 800a428:	d109      	bne.n	800a43e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a42a:	4b11      	ldr	r3, [pc, #68]	; (800a470 <xTimerGenericCommand+0x98>)
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	f107 0110 	add.w	r1, r7, #16
 800a432:	2300      	movs	r3, #0
 800a434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a436:	f7fe fbc1 	bl	8008bbc <xQueueGenericSend>
 800a43a:	6278      	str	r0, [r7, #36]	; 0x24
 800a43c:	e012      	b.n	800a464 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a43e:	4b0c      	ldr	r3, [pc, #48]	; (800a470 <xTimerGenericCommand+0x98>)
 800a440:	6818      	ldr	r0, [r3, #0]
 800a442:	f107 0110 	add.w	r1, r7, #16
 800a446:	2300      	movs	r3, #0
 800a448:	2200      	movs	r2, #0
 800a44a:	f7fe fbb7 	bl	8008bbc <xQueueGenericSend>
 800a44e:	6278      	str	r0, [r7, #36]	; 0x24
 800a450:	e008      	b.n	800a464 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a452:	4b07      	ldr	r3, [pc, #28]	; (800a470 <xTimerGenericCommand+0x98>)
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	f107 0110 	add.w	r1, r7, #16
 800a45a:	2300      	movs	r3, #0
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	f7fe fcab 	bl	8008db8 <xQueueGenericSendFromISR>
 800a462:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a466:	4618      	mov	r0, r3
 800a468:	3728      	adds	r7, #40	; 0x28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20002b3c 	.word	0x20002b3c

0800a474 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af02      	add	r7, sp, #8
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a47e:	4b22      	ldr	r3, [pc, #136]	; (800a508 <prvProcessExpiredTimer+0x94>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	3304      	adds	r3, #4
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fe fa2d 	bl	80088ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a498:	f003 0304 	and.w	r3, r3, #4
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d022      	beq.n	800a4e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	699a      	ldr	r2, [r3, #24]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	18d1      	adds	r1, r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	6978      	ldr	r0, [r7, #20]
 800a4ae:	f000 f8d1 	bl	800a654 <prvInsertTimerInActiveList>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d01f      	beq.n	800a4f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	2300      	movs	r3, #0
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	6978      	ldr	r0, [r7, #20]
 800a4c4:	f7ff ff88 	bl	800a3d8 <xTimerGenericCommand>
 800a4c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d113      	bne.n	800a4f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	60fb      	str	r3, [r7, #12]
}
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ec:	f023 0301 	bic.w	r3, r3, #1
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	6978      	ldr	r0, [r7, #20]
 800a4fe:	4798      	blx	r3
}
 800a500:	bf00      	nop
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	20002b34 	.word	0x20002b34

0800a50c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a514:	f107 0308 	add.w	r3, r7, #8
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 f857 	bl	800a5cc <prvGetNextExpireTime>
 800a51e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	4619      	mov	r1, r3
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f000 f803 	bl	800a530 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a52a:	f000 f8d5 	bl	800a6d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a52e:	e7f1      	b.n	800a514 <prvTimerTask+0x8>

0800a530 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a53a:	f7ff fa43 	bl	80099c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a53e:	f107 0308 	add.w	r3, r7, #8
 800a542:	4618      	mov	r0, r3
 800a544:	f000 f866 	bl	800a614 <prvSampleTimeNow>
 800a548:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d130      	bne.n	800a5b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <prvProcessTimerOrBlockTask+0x3c>
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d806      	bhi.n	800a56c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a55e:	f7ff fa3f 	bl	80099e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a562:	68f9      	ldr	r1, [r7, #12]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7ff ff85 	bl	800a474 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a56a:	e024      	b.n	800a5b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d008      	beq.n	800a584 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a572:	4b13      	ldr	r3, [pc, #76]	; (800a5c0 <prvProcessTimerOrBlockTask+0x90>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <prvProcessTimerOrBlockTask+0x50>
 800a57c:	2301      	movs	r3, #1
 800a57e:	e000      	b.n	800a582 <prvProcessTimerOrBlockTask+0x52>
 800a580:	2300      	movs	r3, #0
 800a582:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a584:	4b0f      	ldr	r3, [pc, #60]	; (800a5c4 <prvProcessTimerOrBlockTask+0x94>)
 800a586:	6818      	ldr	r0, [r3, #0]
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	4619      	mov	r1, r3
 800a592:	f7fe ffa7 	bl	80094e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a596:	f7ff fa23 	bl	80099e0 <xTaskResumeAll>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10a      	bne.n	800a5b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5a0:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <prvProcessTimerOrBlockTask+0x98>)
 800a5a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	f3bf 8f6f 	isb	sy
}
 800a5b0:	e001      	b.n	800a5b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5b2:	f7ff fa15 	bl	80099e0 <xTaskResumeAll>
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20002b38 	.word	0x20002b38
 800a5c4:	20002b3c 	.word	0x20002b3c
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5d4:	4b0e      	ldr	r3, [pc, #56]	; (800a610 <prvGetNextExpireTime+0x44>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <prvGetNextExpireTime+0x16>
 800a5de:	2201      	movs	r2, #1
 800a5e0:	e000      	b.n	800a5e4 <prvGetNextExpireTime+0x18>
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d105      	bne.n	800a5fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5f0:	4b07      	ldr	r3, [pc, #28]	; (800a610 <prvGetNextExpireTime+0x44>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	60fb      	str	r3, [r7, #12]
 800a5fa:	e001      	b.n	800a600 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a600:	68fb      	ldr	r3, [r7, #12]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	20002b34 	.word	0x20002b34

0800a614 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a61c:	f7ff fa7e 	bl	8009b1c <xTaskGetTickCount>
 800a620:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a622:	4b0b      	ldr	r3, [pc, #44]	; (800a650 <prvSampleTimeNow+0x3c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d205      	bcs.n	800a638 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a62c:	f000 f936 	bl	800a89c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	e002      	b.n	800a63e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a63e:	4a04      	ldr	r2, [pc, #16]	; (800a650 <prvSampleTimeNow+0x3c>)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a644:	68fb      	ldr	r3, [r7, #12]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	20002b44 	.word	0x20002b44

0800a654 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
 800a660:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a662:	2300      	movs	r3, #0
 800a664:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	429a      	cmp	r2, r3
 800a678:	d812      	bhi.n	800a6a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	1ad2      	subs	r2, r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	429a      	cmp	r2, r3
 800a686:	d302      	bcc.n	800a68e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a688:	2301      	movs	r3, #1
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	e01b      	b.n	800a6c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a68e:	4b10      	ldr	r3, [pc, #64]	; (800a6d0 <prvInsertTimerInActiveList+0x7c>)
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3304      	adds	r3, #4
 800a696:	4619      	mov	r1, r3
 800a698:	4610      	mov	r0, r2
 800a69a:	f7fe f8ee 	bl	800887a <vListInsert>
 800a69e:	e012      	b.n	800a6c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d206      	bcs.n	800a6b6 <prvInsertTimerInActiveList+0x62>
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d302      	bcc.n	800a6b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	617b      	str	r3, [r7, #20]
 800a6b4:	e007      	b.n	800a6c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6b6:	4b07      	ldr	r3, [pc, #28]	; (800a6d4 <prvInsertTimerInActiveList+0x80>)
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3304      	adds	r3, #4
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	f7fe f8da 	bl	800887a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6c6:	697b      	ldr	r3, [r7, #20]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20002b38 	.word	0x20002b38
 800a6d4:	20002b34 	.word	0x20002b34

0800a6d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08e      	sub	sp, #56	; 0x38
 800a6dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6de:	e0ca      	b.n	800a876 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	da18      	bge.n	800a718 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6e6:	1d3b      	adds	r3, r7, #4
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10a      	bne.n	800a708 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	61fb      	str	r3, [r7, #28]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a70e:	6850      	ldr	r0, [r2, #4]
 800a710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a712:	6892      	ldr	r2, [r2, #8]
 800a714:	4611      	mov	r1, r2
 800a716:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f2c0 80aa 	blt.w	800a874 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d004      	beq.n	800a736 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	3304      	adds	r3, #4
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe f8db 	bl	80088ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a736:	463b      	mov	r3, r7
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff ff6b 	bl	800a614 <prvSampleTimeNow>
 800a73e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b09      	cmp	r3, #9
 800a744:	f200 8097 	bhi.w	800a876 <prvProcessReceivedCommands+0x19e>
 800a748:	a201      	add	r2, pc, #4	; (adr r2, 800a750 <prvProcessReceivedCommands+0x78>)
 800a74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74e:	bf00      	nop
 800a750:	0800a779 	.word	0x0800a779
 800a754:	0800a779 	.word	0x0800a779
 800a758:	0800a779 	.word	0x0800a779
 800a75c:	0800a7ed 	.word	0x0800a7ed
 800a760:	0800a801 	.word	0x0800a801
 800a764:	0800a84b 	.word	0x0800a84b
 800a768:	0800a779 	.word	0x0800a779
 800a76c:	0800a779 	.word	0x0800a779
 800a770:	0800a7ed 	.word	0x0800a7ed
 800a774:	0800a801 	.word	0x0800a801
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a77e:	f043 0301 	orr.w	r3, r3, #1
 800a782:	b2da      	uxtb	r2, r3
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	18d1      	adds	r1, r2, r3
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a798:	f7ff ff5c 	bl	800a654 <prvInsertTimerInActiveList>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d069      	beq.n	800a876 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7b0:	f003 0304 	and.w	r3, r3, #4
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d05e      	beq.n	800a876 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	441a      	add	r2, r3
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ca:	f7ff fe05 	bl	800a3d8 <xTimerGenericCommand>
 800a7ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d14f      	bne.n	800a876 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	61bb      	str	r3, [r7, #24]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7f2:	f023 0301 	bic.w	r3, r3, #1
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a7fe:	e03a      	b.n	800a876 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a806:	f043 0301 	orr.w	r3, r3, #1
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a816:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10a      	bne.n	800a836 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	617b      	str	r3, [r7, #20]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	699a      	ldr	r2, [r3, #24]
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	18d1      	adds	r1, r2, r3
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a844:	f7ff ff06 	bl	800a654 <prvInsertTimerInActiveList>
					break;
 800a848:	e015      	b.n	800a876 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a850:	f003 0302 	and.w	r3, r3, #2
 800a854:	2b00      	cmp	r3, #0
 800a856:	d103      	bne.n	800a860 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a85a:	f000 fbe1 	bl	800b020 <vPortFree>
 800a85e:	e00a      	b.n	800a876 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a866:	f023 0301 	bic.w	r3, r3, #1
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a872:	e000      	b.n	800a876 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a874:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a876:	4b08      	ldr	r3, [pc, #32]	; (800a898 <prvProcessReceivedCommands+0x1c0>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	1d39      	adds	r1, r7, #4
 800a87c:	2200      	movs	r2, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe fb36 	bl	8008ef0 <xQueueReceive>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	f47f af2a 	bne.w	800a6e0 <prvProcessReceivedCommands+0x8>
	}
}
 800a88c:	bf00      	nop
 800a88e:	bf00      	nop
 800a890:	3730      	adds	r7, #48	; 0x30
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20002b3c 	.word	0x20002b3c

0800a89c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b088      	sub	sp, #32
 800a8a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8a2:	e048      	b.n	800a936 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8a4:	4b2d      	ldr	r3, [pc, #180]	; (800a95c <prvSwitchTimerLists+0xc0>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ae:	4b2b      	ldr	r3, [pc, #172]	; (800a95c <prvSwitchTimerLists+0xc0>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe f815 	bl	80088ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8d0:	f003 0304 	and.w	r3, r3, #4
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d02e      	beq.n	800a936 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	4413      	add	r3, r2
 800a8e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d90e      	bls.n	800a908 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8f6:	4b19      	ldr	r3, [pc, #100]	; (800a95c <prvSwitchTimerLists+0xc0>)
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	4619      	mov	r1, r3
 800a900:	4610      	mov	r0, r2
 800a902:	f7fd ffba 	bl	800887a <vListInsert>
 800a906:	e016      	b.n	800a936 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a908:	2300      	movs	r3, #0
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	2300      	movs	r3, #0
 800a90e:	693a      	ldr	r2, [r7, #16]
 800a910:	2100      	movs	r1, #0
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f7ff fd60 	bl	800a3d8 <xTimerGenericCommand>
 800a918:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	603b      	str	r3, [r7, #0]
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a936:	4b09      	ldr	r3, [pc, #36]	; (800a95c <prvSwitchTimerLists+0xc0>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1b1      	bne.n	800a8a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a940:	4b06      	ldr	r3, [pc, #24]	; (800a95c <prvSwitchTimerLists+0xc0>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a946:	4b06      	ldr	r3, [pc, #24]	; (800a960 <prvSwitchTimerLists+0xc4>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a04      	ldr	r2, [pc, #16]	; (800a95c <prvSwitchTimerLists+0xc0>)
 800a94c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a94e:	4a04      	ldr	r2, [pc, #16]	; (800a960 <prvSwitchTimerLists+0xc4>)
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	6013      	str	r3, [r2, #0]
}
 800a954:	bf00      	nop
 800a956:	3718      	adds	r7, #24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	20002b34 	.word	0x20002b34
 800a960:	20002b38 	.word	0x20002b38

0800a964 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a96a:	f000 f96b 	bl	800ac44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a96e:	4b15      	ldr	r3, [pc, #84]	; (800a9c4 <prvCheckForValidListAndQueue+0x60>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d120      	bne.n	800a9b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a976:	4814      	ldr	r0, [pc, #80]	; (800a9c8 <prvCheckForValidListAndQueue+0x64>)
 800a978:	f7fd ff2e 	bl	80087d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a97c:	4813      	ldr	r0, [pc, #76]	; (800a9cc <prvCheckForValidListAndQueue+0x68>)
 800a97e:	f7fd ff2b 	bl	80087d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a982:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <prvCheckForValidListAndQueue+0x6c>)
 800a984:	4a10      	ldr	r2, [pc, #64]	; (800a9c8 <prvCheckForValidListAndQueue+0x64>)
 800a986:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a988:	4b12      	ldr	r3, [pc, #72]	; (800a9d4 <prvCheckForValidListAndQueue+0x70>)
 800a98a:	4a10      	ldr	r2, [pc, #64]	; (800a9cc <prvCheckForValidListAndQueue+0x68>)
 800a98c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a98e:	2300      	movs	r3, #0
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	4b11      	ldr	r3, [pc, #68]	; (800a9d8 <prvCheckForValidListAndQueue+0x74>)
 800a994:	4a11      	ldr	r2, [pc, #68]	; (800a9dc <prvCheckForValidListAndQueue+0x78>)
 800a996:	2110      	movs	r1, #16
 800a998:	200a      	movs	r0, #10
 800a99a:	f7fe f839 	bl	8008a10 <xQueueGenericCreateStatic>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	4a08      	ldr	r2, [pc, #32]	; (800a9c4 <prvCheckForValidListAndQueue+0x60>)
 800a9a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9a4:	4b07      	ldr	r3, [pc, #28]	; (800a9c4 <prvCheckForValidListAndQueue+0x60>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d005      	beq.n	800a9b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9ac:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <prvCheckForValidListAndQueue+0x60>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	490b      	ldr	r1, [pc, #44]	; (800a9e0 <prvCheckForValidListAndQueue+0x7c>)
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fe fd6c 	bl	8009490 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9b8:	f000 f974 	bl	800aca4 <vPortExitCritical>
}
 800a9bc:	bf00      	nop
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20002b3c 	.word	0x20002b3c
 800a9c8:	20002b0c 	.word	0x20002b0c
 800a9cc:	20002b20 	.word	0x20002b20
 800a9d0:	20002b34 	.word	0x20002b34
 800a9d4:	20002b38 	.word	0x20002b38
 800a9d8:	20002be8 	.word	0x20002be8
 800a9dc:	20002b48 	.word	0x20002b48
 800a9e0:	0800f580 	.word	0x0800f580

0800a9e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3b04      	subs	r3, #4
 800a9f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	3b04      	subs	r3, #4
 800aa02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	f023 0201 	bic.w	r2, r3, #1
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3b04      	subs	r3, #4
 800aa12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa14:	4a0c      	ldr	r2, [pc, #48]	; (800aa48 <pxPortInitialiseStack+0x64>)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3b14      	subs	r3, #20
 800aa1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3b04      	subs	r3, #4
 800aa2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f06f 0202 	mvn.w	r2, #2
 800aa32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3b20      	subs	r3, #32
 800aa38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	0800aa4d 	.word	0x0800aa4d

0800aa4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa56:	4b12      	ldr	r3, [pc, #72]	; (800aaa0 <prvTaskExitError+0x54>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5e:	d00a      	beq.n	800aa76 <prvTaskExitError+0x2a>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	60fb      	str	r3, [r7, #12]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <prvTaskExitError+0x28>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	60bb      	str	r3, [r7, #8]
}
 800aa88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa8a:	bf00      	nop
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0fc      	beq.n	800aa8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa92:	bf00      	nop
 800aa94:	bf00      	nop
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	2000005c 	.word	0x2000005c
	...

0800aab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aab0:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <pxCurrentTCBConst2>)
 800aab2:	6819      	ldr	r1, [r3, #0]
 800aab4:	6808      	ldr	r0, [r1, #0]
 800aab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaba:	f380 8809 	msr	PSP, r0
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f04f 0000 	mov.w	r0, #0
 800aac6:	f380 8811 	msr	BASEPRI, r0
 800aaca:	4770      	bx	lr
 800aacc:	f3af 8000 	nop.w

0800aad0 <pxCurrentTCBConst2>:
 800aad0:	2000260c 	.word	0x2000260c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop

0800aad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aad8:	4808      	ldr	r0, [pc, #32]	; (800aafc <prvPortStartFirstTask+0x24>)
 800aada:	6800      	ldr	r0, [r0, #0]
 800aadc:	6800      	ldr	r0, [r0, #0]
 800aade:	f380 8808 	msr	MSP, r0
 800aae2:	f04f 0000 	mov.w	r0, #0
 800aae6:	f380 8814 	msr	CONTROL, r0
 800aaea:	b662      	cpsie	i
 800aaec:	b661      	cpsie	f
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	df00      	svc	0
 800aaf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aafa:	bf00      	nop
 800aafc:	e000ed08 	.word	0xe000ed08

0800ab00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab06:	4b46      	ldr	r3, [pc, #280]	; (800ac20 <xPortStartScheduler+0x120>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a46      	ldr	r2, [pc, #280]	; (800ac24 <xPortStartScheduler+0x124>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d10a      	bne.n	800ab26 <xPortStartScheduler+0x26>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	613b      	str	r3, [r7, #16]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab26:	4b3e      	ldr	r3, [pc, #248]	; (800ac20 <xPortStartScheduler+0x120>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a3f      	ldr	r2, [pc, #252]	; (800ac28 <xPortStartScheduler+0x128>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d10a      	bne.n	800ab46 <xPortStartScheduler+0x46>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	60fb      	str	r3, [r7, #12]
}
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab46:	4b39      	ldr	r3, [pc, #228]	; (800ac2c <xPortStartScheduler+0x12c>)
 800ab48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	22ff      	movs	r2, #255	; 0xff
 800ab56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <xPortStartScheduler+0x130>)
 800ab6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab6e:	4b31      	ldr	r3, [pc, #196]	; (800ac34 <xPortStartScheduler+0x134>)
 800ab70:	2207      	movs	r2, #7
 800ab72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab74:	e009      	b.n	800ab8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ab76:	4b2f      	ldr	r3, [pc, #188]	; (800ac34 <xPortStartScheduler+0x134>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	4a2d      	ldr	r2, [pc, #180]	; (800ac34 <xPortStartScheduler+0x134>)
 800ab7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab92:	2b80      	cmp	r3, #128	; 0x80
 800ab94:	d0ef      	beq.n	800ab76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab96:	4b27      	ldr	r3, [pc, #156]	; (800ac34 <xPortStartScheduler+0x134>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f1c3 0307 	rsb	r3, r3, #7
 800ab9e:	2b04      	cmp	r3, #4
 800aba0:	d00a      	beq.n	800abb8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	60bb      	str	r3, [r7, #8]
}
 800abb4:	bf00      	nop
 800abb6:	e7fe      	b.n	800abb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abb8:	4b1e      	ldr	r3, [pc, #120]	; (800ac34 <xPortStartScheduler+0x134>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	4a1d      	ldr	r2, [pc, #116]	; (800ac34 <xPortStartScheduler+0x134>)
 800abc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abc2:	4b1c      	ldr	r3, [pc, #112]	; (800ac34 <xPortStartScheduler+0x134>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abca:	4a1a      	ldr	r2, [pc, #104]	; (800ac34 <xPortStartScheduler+0x134>)
 800abcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abd6:	4b18      	ldr	r3, [pc, #96]	; (800ac38 <xPortStartScheduler+0x138>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <xPortStartScheduler+0x138>)
 800abdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abe2:	4b15      	ldr	r3, [pc, #84]	; (800ac38 <xPortStartScheduler+0x138>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a14      	ldr	r2, [pc, #80]	; (800ac38 <xPortStartScheduler+0x138>)
 800abe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800abec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800abee:	f000 f8dd 	bl	800adac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800abf2:	4b12      	ldr	r3, [pc, #72]	; (800ac3c <xPortStartScheduler+0x13c>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800abf8:	f000 f8fc 	bl	800adf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800abfc:	4b10      	ldr	r3, [pc, #64]	; (800ac40 <xPortStartScheduler+0x140>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a0f      	ldr	r2, [pc, #60]	; (800ac40 <xPortStartScheduler+0x140>)
 800ac02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac08:	f7ff ff66 	bl	800aad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac0c:	f7ff f850 	bl	8009cb0 <vTaskSwitchContext>
	prvTaskExitError();
 800ac10:	f7ff ff1c 	bl	800aa4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	e000ed00 	.word	0xe000ed00
 800ac24:	410fc271 	.word	0x410fc271
 800ac28:	410fc270 	.word	0x410fc270
 800ac2c:	e000e400 	.word	0xe000e400
 800ac30:	20002c38 	.word	0x20002c38
 800ac34:	20002c3c 	.word	0x20002c3c
 800ac38:	e000ed20 	.word	0xe000ed20
 800ac3c:	2000005c 	.word	0x2000005c
 800ac40:	e000ef34 	.word	0xe000ef34

0800ac44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	607b      	str	r3, [r7, #4]
}
 800ac5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <vPortEnterCritical+0x58>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3301      	adds	r3, #1
 800ac64:	4a0d      	ldr	r2, [pc, #52]	; (800ac9c <vPortEnterCritical+0x58>)
 800ac66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac68:	4b0c      	ldr	r3, [pc, #48]	; (800ac9c <vPortEnterCritical+0x58>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d10f      	bne.n	800ac90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac70:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <vPortEnterCritical+0x5c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	603b      	str	r3, [r7, #0]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <vPortEnterCritical+0x4a>
	}
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	2000005c 	.word	0x2000005c
 800aca0:	e000ed04 	.word	0xe000ed04

0800aca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acaa:	4b12      	ldr	r3, [pc, #72]	; (800acf4 <vPortExitCritical+0x50>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10a      	bne.n	800acc8 <vPortExitCritical+0x24>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	607b      	str	r3, [r7, #4]
}
 800acc4:	bf00      	nop
 800acc6:	e7fe      	b.n	800acc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800acc8:	4b0a      	ldr	r3, [pc, #40]	; (800acf4 <vPortExitCritical+0x50>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3b01      	subs	r3, #1
 800acce:	4a09      	ldr	r2, [pc, #36]	; (800acf4 <vPortExitCritical+0x50>)
 800acd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800acd2:	4b08      	ldr	r3, [pc, #32]	; (800acf4 <vPortExitCritical+0x50>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d105      	bne.n	800ace6 <vPortExitCritical+0x42>
 800acda:	2300      	movs	r3, #0
 800acdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	f383 8811 	msr	BASEPRI, r3
}
 800ace4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ace6:	bf00      	nop
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	2000005c 	.word	0x2000005c
	...

0800ad00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad00:	f3ef 8009 	mrs	r0, PSP
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	4b15      	ldr	r3, [pc, #84]	; (800ad60 <pxCurrentTCBConst>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	f01e 0f10 	tst.w	lr, #16
 800ad10:	bf08      	it	eq
 800ad12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1a:	6010      	str	r0, [r2, #0]
 800ad1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad24:	f380 8811 	msr	BASEPRI, r0
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f7fe ffbe 	bl	8009cb0 <vTaskSwitchContext>
 800ad34:	f04f 0000 	mov.w	r0, #0
 800ad38:	f380 8811 	msr	BASEPRI, r0
 800ad3c:	bc09      	pop	{r0, r3}
 800ad3e:	6819      	ldr	r1, [r3, #0]
 800ad40:	6808      	ldr	r0, [r1, #0]
 800ad42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad46:	f01e 0f10 	tst.w	lr, #16
 800ad4a:	bf08      	it	eq
 800ad4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad50:	f380 8809 	msr	PSP, r0
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	f3af 8000 	nop.w

0800ad60 <pxCurrentTCBConst>:
 800ad60:	2000260c 	.word	0x2000260c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop

0800ad68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	607b      	str	r3, [r7, #4]
}
 800ad80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad82:	f7fe fedb 	bl	8009b3c <xTaskIncrementTick>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad8c:	4b06      	ldr	r3, [pc, #24]	; (800ada8 <xPortSysTickHandler+0x40>)
 800ad8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	2300      	movs	r3, #0
 800ad96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	f383 8811 	msr	BASEPRI, r3
}
 800ad9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ada0:	bf00      	nop
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	e000ed04 	.word	0xe000ed04

0800adac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adac:	b480      	push	{r7}
 800adae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800adb0:	4b0b      	ldr	r3, [pc, #44]	; (800ade0 <vPortSetupTimerInterrupt+0x34>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800adb6:	4b0b      	ldr	r3, [pc, #44]	; (800ade4 <vPortSetupTimerInterrupt+0x38>)
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adbc:	4b0a      	ldr	r3, [pc, #40]	; (800ade8 <vPortSetupTimerInterrupt+0x3c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a0a      	ldr	r2, [pc, #40]	; (800adec <vPortSetupTimerInterrupt+0x40>)
 800adc2:	fba2 2303 	umull	r2, r3, r2, r3
 800adc6:	099b      	lsrs	r3, r3, #6
 800adc8:	4a09      	ldr	r2, [pc, #36]	; (800adf0 <vPortSetupTimerInterrupt+0x44>)
 800adca:	3b01      	subs	r3, #1
 800adcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adce:	4b04      	ldr	r3, [pc, #16]	; (800ade0 <vPortSetupTimerInterrupt+0x34>)
 800add0:	2207      	movs	r2, #7
 800add2:	601a      	str	r2, [r3, #0]
}
 800add4:	bf00      	nop
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	e000e010 	.word	0xe000e010
 800ade4:	e000e018 	.word	0xe000e018
 800ade8:	20000050 	.word	0x20000050
 800adec:	10624dd3 	.word	0x10624dd3
 800adf0:	e000e014 	.word	0xe000e014

0800adf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800adf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae04 <vPortEnableVFP+0x10>
 800adf8:	6801      	ldr	r1, [r0, #0]
 800adfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800adfe:	6001      	str	r1, [r0, #0]
 800ae00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae02:	bf00      	nop
 800ae04:	e000ed88 	.word	0xe000ed88

0800ae08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae0e:	f3ef 8305 	mrs	r3, IPSR
 800ae12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2b0f      	cmp	r3, #15
 800ae18:	d914      	bls.n	800ae44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae1a:	4a17      	ldr	r2, [pc, #92]	; (800ae78 <vPortValidateInterruptPriority+0x70>)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	4413      	add	r3, r2
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae24:	4b15      	ldr	r3, [pc, #84]	; (800ae7c <vPortValidateInterruptPriority+0x74>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	7afa      	ldrb	r2, [r7, #11]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d20a      	bcs.n	800ae44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	607b      	str	r3, [r7, #4]
}
 800ae40:	bf00      	nop
 800ae42:	e7fe      	b.n	800ae42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae44:	4b0e      	ldr	r3, [pc, #56]	; (800ae80 <vPortValidateInterruptPriority+0x78>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae4c:	4b0d      	ldr	r3, [pc, #52]	; (800ae84 <vPortValidateInterruptPriority+0x7c>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d90a      	bls.n	800ae6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	603b      	str	r3, [r7, #0]
}
 800ae66:	bf00      	nop
 800ae68:	e7fe      	b.n	800ae68 <vPortValidateInterruptPriority+0x60>
	}
 800ae6a:	bf00      	nop
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	e000e3f0 	.word	0xe000e3f0
 800ae7c:	20002c38 	.word	0x20002c38
 800ae80:	e000ed0c 	.word	0xe000ed0c
 800ae84:	20002c3c 	.word	0x20002c3c

0800ae88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08a      	sub	sp, #40	; 0x28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae90:	2300      	movs	r3, #0
 800ae92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae94:	f7fe fd96 	bl	80099c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae98:	4b5b      	ldr	r3, [pc, #364]	; (800b008 <pvPortMalloc+0x180>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aea0:	f000 f92c 	bl	800b0fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aea4:	4b59      	ldr	r3, [pc, #356]	; (800b00c <pvPortMalloc+0x184>)
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4013      	ands	r3, r2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f040 8093 	bne.w	800afd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d01d      	beq.n	800aef4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aeb8:	2208      	movs	r2, #8
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4413      	add	r3, r2
 800aebe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d014      	beq.n	800aef4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f023 0307 	bic.w	r3, r3, #7
 800aed0:	3308      	adds	r3, #8
 800aed2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f003 0307 	and.w	r3, r3, #7
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00a      	beq.n	800aef4 <pvPortMalloc+0x6c>
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	617b      	str	r3, [r7, #20]
}
 800aef0:	bf00      	nop
 800aef2:	e7fe      	b.n	800aef2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d06e      	beq.n	800afd8 <pvPortMalloc+0x150>
 800aefa:	4b45      	ldr	r3, [pc, #276]	; (800b010 <pvPortMalloc+0x188>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	429a      	cmp	r2, r3
 800af02:	d869      	bhi.n	800afd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af04:	4b43      	ldr	r3, [pc, #268]	; (800b014 <pvPortMalloc+0x18c>)
 800af06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af08:	4b42      	ldr	r3, [pc, #264]	; (800b014 <pvPortMalloc+0x18c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af0e:	e004      	b.n	800af1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	429a      	cmp	r2, r3
 800af22:	d903      	bls.n	800af2c <pvPortMalloc+0xa4>
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1f1      	bne.n	800af10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af2c:	4b36      	ldr	r3, [pc, #216]	; (800b008 <pvPortMalloc+0x180>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af32:	429a      	cmp	r2, r3
 800af34:	d050      	beq.n	800afd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af36:	6a3b      	ldr	r3, [r7, #32]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2208      	movs	r2, #8
 800af3c:	4413      	add	r3, r2
 800af3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	6a3b      	ldr	r3, [r7, #32]
 800af46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	1ad2      	subs	r2, r2, r3
 800af50:	2308      	movs	r3, #8
 800af52:	005b      	lsls	r3, r3, #1
 800af54:	429a      	cmp	r2, r3
 800af56:	d91f      	bls.n	800af98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4413      	add	r3, r2
 800af5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00a      	beq.n	800af80 <pvPortMalloc+0xf8>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	613b      	str	r3, [r7, #16]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	1ad2      	subs	r2, r2, r3
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af92:	69b8      	ldr	r0, [r7, #24]
 800af94:	f000 f914 	bl	800b1c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af98:	4b1d      	ldr	r3, [pc, #116]	; (800b010 <pvPortMalloc+0x188>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	4a1b      	ldr	r2, [pc, #108]	; (800b010 <pvPortMalloc+0x188>)
 800afa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afa6:	4b1a      	ldr	r3, [pc, #104]	; (800b010 <pvPortMalloc+0x188>)
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	4b1b      	ldr	r3, [pc, #108]	; (800b018 <pvPortMalloc+0x190>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d203      	bcs.n	800afba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800afb2:	4b17      	ldr	r3, [pc, #92]	; (800b010 <pvPortMalloc+0x188>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a18      	ldr	r2, [pc, #96]	; (800b018 <pvPortMalloc+0x190>)
 800afb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	685a      	ldr	r2, [r3, #4]
 800afbe:	4b13      	ldr	r3, [pc, #76]	; (800b00c <pvPortMalloc+0x184>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	431a      	orrs	r2, r3
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800afce:	4b13      	ldr	r3, [pc, #76]	; (800b01c <pvPortMalloc+0x194>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3301      	adds	r3, #1
 800afd4:	4a11      	ldr	r2, [pc, #68]	; (800b01c <pvPortMalloc+0x194>)
 800afd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800afd8:	f7fe fd02 	bl	80099e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	f003 0307 	and.w	r3, r3, #7
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00a      	beq.n	800affc <pvPortMalloc+0x174>
	__asm volatile
 800afe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	60fb      	str	r3, [r7, #12]
}
 800aff8:	bf00      	nop
 800affa:	e7fe      	b.n	800affa <pvPortMalloc+0x172>
	return pvReturn;
 800affc:	69fb      	ldr	r3, [r7, #28]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3728      	adds	r7, #40	; 0x28
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20006848 	.word	0x20006848
 800b00c:	2000685c 	.word	0x2000685c
 800b010:	2000684c 	.word	0x2000684c
 800b014:	20006840 	.word	0x20006840
 800b018:	20006850 	.word	0x20006850
 800b01c:	20006854 	.word	0x20006854

0800b020 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d04d      	beq.n	800b0ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b032:	2308      	movs	r3, #8
 800b034:	425b      	negs	r3, r3
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	4413      	add	r3, r2
 800b03a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	4b24      	ldr	r3, [pc, #144]	; (800b0d8 <vPortFree+0xb8>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4013      	ands	r3, r2
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10a      	bne.n	800b064 <vPortFree+0x44>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	60fb      	str	r3, [r7, #12]
}
 800b060:	bf00      	nop
 800b062:	e7fe      	b.n	800b062 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <vPortFree+0x62>
	__asm volatile
 800b06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	60bb      	str	r3, [r7, #8]
}
 800b07e:	bf00      	nop
 800b080:	e7fe      	b.n	800b080 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	685a      	ldr	r2, [r3, #4]
 800b086:	4b14      	ldr	r3, [pc, #80]	; (800b0d8 <vPortFree+0xb8>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4013      	ands	r3, r2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d01e      	beq.n	800b0ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d11a      	bne.n	800b0ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	4b0e      	ldr	r3, [pc, #56]	; (800b0d8 <vPortFree+0xb8>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	43db      	mvns	r3, r3
 800b0a2:	401a      	ands	r2, r3
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0a8:	f7fe fc8c 	bl	80099c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	685a      	ldr	r2, [r3, #4]
 800b0b0:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <vPortFree+0xbc>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	4a09      	ldr	r2, [pc, #36]	; (800b0dc <vPortFree+0xbc>)
 800b0b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0ba:	6938      	ldr	r0, [r7, #16]
 800b0bc:	f000 f880 	bl	800b1c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b0c0:	4b07      	ldr	r3, [pc, #28]	; (800b0e0 <vPortFree+0xc0>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	4a06      	ldr	r2, [pc, #24]	; (800b0e0 <vPortFree+0xc0>)
 800b0c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b0ca:	f7fe fc89 	bl	80099e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0ce:	bf00      	nop
 800b0d0:	3718      	adds	r7, #24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	2000685c 	.word	0x2000685c
 800b0dc:	2000684c 	.word	0x2000684c
 800b0e0:	20006858 	.word	0x20006858

0800b0e4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800b0e8:	4b03      	ldr	r3, [pc, #12]	; (800b0f8 <xPortGetFreeHeapSize+0x14>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	2000684c 	.word	0x2000684c

0800b0fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b102:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b106:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b108:	4b27      	ldr	r3, [pc, #156]	; (800b1a8 <prvHeapInit+0xac>)
 800b10a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f003 0307 	and.w	r3, r3, #7
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00c      	beq.n	800b130 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3307      	adds	r3, #7
 800b11a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f023 0307 	bic.w	r3, r3, #7
 800b122:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	4a1f      	ldr	r2, [pc, #124]	; (800b1a8 <prvHeapInit+0xac>)
 800b12c:	4413      	add	r3, r2
 800b12e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b134:	4a1d      	ldr	r2, [pc, #116]	; (800b1ac <prvHeapInit+0xb0>)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b13a:	4b1c      	ldr	r3, [pc, #112]	; (800b1ac <prvHeapInit+0xb0>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	4413      	add	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b148:	2208      	movs	r2, #8
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	1a9b      	subs	r3, r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f023 0307 	bic.w	r3, r3, #7
 800b156:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	4a15      	ldr	r2, [pc, #84]	; (800b1b0 <prvHeapInit+0xb4>)
 800b15c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b15e:	4b14      	ldr	r3, [pc, #80]	; (800b1b0 <prvHeapInit+0xb4>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2200      	movs	r2, #0
 800b164:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b166:	4b12      	ldr	r3, [pc, #72]	; (800b1b0 <prvHeapInit+0xb4>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2200      	movs	r2, #0
 800b16c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	1ad2      	subs	r2, r2, r3
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b17c:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <prvHeapInit+0xb4>)
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	4a0a      	ldr	r2, [pc, #40]	; (800b1b4 <prvHeapInit+0xb8>)
 800b18a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	4a09      	ldr	r2, [pc, #36]	; (800b1b8 <prvHeapInit+0xbc>)
 800b192:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b194:	4b09      	ldr	r3, [pc, #36]	; (800b1bc <prvHeapInit+0xc0>)
 800b196:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b19a:	601a      	str	r2, [r3, #0]
}
 800b19c:	bf00      	nop
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr
 800b1a8:	20002c40 	.word	0x20002c40
 800b1ac:	20006840 	.word	0x20006840
 800b1b0:	20006848 	.word	0x20006848
 800b1b4:	20006850 	.word	0x20006850
 800b1b8:	2000684c 	.word	0x2000684c
 800b1bc:	2000685c 	.word	0x2000685c

0800b1c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1c8:	4b28      	ldr	r3, [pc, #160]	; (800b26c <prvInsertBlockIntoFreeList+0xac>)
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	e002      	b.n	800b1d4 <prvInsertBlockIntoFreeList+0x14>
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d8f7      	bhi.n	800b1ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d108      	bne.n	800b202 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	441a      	add	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	441a      	add	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	429a      	cmp	r2, r3
 800b214:	d118      	bne.n	800b248 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	4b15      	ldr	r3, [pc, #84]	; (800b270 <prvInsertBlockIntoFreeList+0xb0>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d00d      	beq.n	800b23e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	441a      	add	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	e008      	b.n	800b250 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b23e:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <prvInsertBlockIntoFreeList+0xb0>)
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	e003      	b.n	800b250 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d002      	beq.n	800b25e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b25e:	bf00      	nop
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	20006840 	.word	0x20006840
 800b270:	20006848 	.word	0x20006848

0800b274 <__errno>:
 800b274:	4b01      	ldr	r3, [pc, #4]	; (800b27c <__errno+0x8>)
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	20000060 	.word	0x20000060

0800b280 <__libc_init_array>:
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	4d0d      	ldr	r5, [pc, #52]	; (800b2b8 <__libc_init_array+0x38>)
 800b284:	4c0d      	ldr	r4, [pc, #52]	; (800b2bc <__libc_init_array+0x3c>)
 800b286:	1b64      	subs	r4, r4, r5
 800b288:	10a4      	asrs	r4, r4, #2
 800b28a:	2600      	movs	r6, #0
 800b28c:	42a6      	cmp	r6, r4
 800b28e:	d109      	bne.n	800b2a4 <__libc_init_array+0x24>
 800b290:	4d0b      	ldr	r5, [pc, #44]	; (800b2c0 <__libc_init_array+0x40>)
 800b292:	4c0c      	ldr	r4, [pc, #48]	; (800b2c4 <__libc_init_array+0x44>)
 800b294:	f003 fbc4 	bl	800ea20 <_init>
 800b298:	1b64      	subs	r4, r4, r5
 800b29a:	10a4      	asrs	r4, r4, #2
 800b29c:	2600      	movs	r6, #0
 800b29e:	42a6      	cmp	r6, r4
 800b2a0:	d105      	bne.n	800b2ae <__libc_init_array+0x2e>
 800b2a2:	bd70      	pop	{r4, r5, r6, pc}
 800b2a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2a8:	4798      	blx	r3
 800b2aa:	3601      	adds	r6, #1
 800b2ac:	e7ee      	b.n	800b28c <__libc_init_array+0xc>
 800b2ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2b2:	4798      	blx	r3
 800b2b4:	3601      	adds	r6, #1
 800b2b6:	e7f2      	b.n	800b29e <__libc_init_array+0x1e>
 800b2b8:	0800fe68 	.word	0x0800fe68
 800b2bc:	0800fe68 	.word	0x0800fe68
 800b2c0:	0800fe68 	.word	0x0800fe68
 800b2c4:	0800fe6c 	.word	0x0800fe6c

0800b2c8 <isprint>:
 800b2c8:	4b02      	ldr	r3, [pc, #8]	; (800b2d4 <isprint+0xc>)
 800b2ca:	4418      	add	r0, r3
 800b2cc:	7840      	ldrb	r0, [r0, #1]
 800b2ce:	f000 0097 	and.w	r0, r0, #151	; 0x97
 800b2d2:	4770      	bx	lr
 800b2d4:	0800fa9e 	.word	0x0800fa9e

0800b2d8 <memcpy>:
 800b2d8:	440a      	add	r2, r1
 800b2da:	4291      	cmp	r1, r2
 800b2dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2e0:	d100      	bne.n	800b2e4 <memcpy+0xc>
 800b2e2:	4770      	bx	lr
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ee:	4291      	cmp	r1, r2
 800b2f0:	d1f9      	bne.n	800b2e6 <memcpy+0xe>
 800b2f2:	bd10      	pop	{r4, pc}

0800b2f4 <memset>:
 800b2f4:	4402      	add	r2, r0
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d100      	bne.n	800b2fe <memset+0xa>
 800b2fc:	4770      	bx	lr
 800b2fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b302:	e7f9      	b.n	800b2f8 <memset+0x4>

0800b304 <__cvt>:
 800b304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b308:	ec55 4b10 	vmov	r4, r5, d0
 800b30c:	2d00      	cmp	r5, #0
 800b30e:	460e      	mov	r6, r1
 800b310:	4619      	mov	r1, r3
 800b312:	462b      	mov	r3, r5
 800b314:	bfbb      	ittet	lt
 800b316:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b31a:	461d      	movlt	r5, r3
 800b31c:	2300      	movge	r3, #0
 800b31e:	232d      	movlt	r3, #45	; 0x2d
 800b320:	700b      	strb	r3, [r1, #0]
 800b322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b324:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b328:	4691      	mov	r9, r2
 800b32a:	f023 0820 	bic.w	r8, r3, #32
 800b32e:	bfbc      	itt	lt
 800b330:	4622      	movlt	r2, r4
 800b332:	4614      	movlt	r4, r2
 800b334:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b338:	d005      	beq.n	800b346 <__cvt+0x42>
 800b33a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b33e:	d100      	bne.n	800b342 <__cvt+0x3e>
 800b340:	3601      	adds	r6, #1
 800b342:	2102      	movs	r1, #2
 800b344:	e000      	b.n	800b348 <__cvt+0x44>
 800b346:	2103      	movs	r1, #3
 800b348:	ab03      	add	r3, sp, #12
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	ab02      	add	r3, sp, #8
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	ec45 4b10 	vmov	d0, r4, r5
 800b354:	4653      	mov	r3, sl
 800b356:	4632      	mov	r2, r6
 800b358:	f000 fd7e 	bl	800be58 <_dtoa_r>
 800b35c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b360:	4607      	mov	r7, r0
 800b362:	d102      	bne.n	800b36a <__cvt+0x66>
 800b364:	f019 0f01 	tst.w	r9, #1
 800b368:	d022      	beq.n	800b3b0 <__cvt+0xac>
 800b36a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b36e:	eb07 0906 	add.w	r9, r7, r6
 800b372:	d110      	bne.n	800b396 <__cvt+0x92>
 800b374:	783b      	ldrb	r3, [r7, #0]
 800b376:	2b30      	cmp	r3, #48	; 0x30
 800b378:	d10a      	bne.n	800b390 <__cvt+0x8c>
 800b37a:	2200      	movs	r2, #0
 800b37c:	2300      	movs	r3, #0
 800b37e:	4620      	mov	r0, r4
 800b380:	4629      	mov	r1, r5
 800b382:	f7f5 fbb9 	bl	8000af8 <__aeabi_dcmpeq>
 800b386:	b918      	cbnz	r0, 800b390 <__cvt+0x8c>
 800b388:	f1c6 0601 	rsb	r6, r6, #1
 800b38c:	f8ca 6000 	str.w	r6, [sl]
 800b390:	f8da 3000 	ldr.w	r3, [sl]
 800b394:	4499      	add	r9, r3
 800b396:	2200      	movs	r2, #0
 800b398:	2300      	movs	r3, #0
 800b39a:	4620      	mov	r0, r4
 800b39c:	4629      	mov	r1, r5
 800b39e:	f7f5 fbab 	bl	8000af8 <__aeabi_dcmpeq>
 800b3a2:	b108      	cbz	r0, 800b3a8 <__cvt+0xa4>
 800b3a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3a8:	2230      	movs	r2, #48	; 0x30
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	454b      	cmp	r3, r9
 800b3ae:	d307      	bcc.n	800b3c0 <__cvt+0xbc>
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3b4:	1bdb      	subs	r3, r3, r7
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	b004      	add	sp, #16
 800b3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c0:	1c59      	adds	r1, r3, #1
 800b3c2:	9103      	str	r1, [sp, #12]
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	e7f0      	b.n	800b3aa <__cvt+0xa6>

0800b3c8 <__exponent>:
 800b3c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2900      	cmp	r1, #0
 800b3ce:	bfb8      	it	lt
 800b3d0:	4249      	neglt	r1, r1
 800b3d2:	f803 2b02 	strb.w	r2, [r3], #2
 800b3d6:	bfb4      	ite	lt
 800b3d8:	222d      	movlt	r2, #45	; 0x2d
 800b3da:	222b      	movge	r2, #43	; 0x2b
 800b3dc:	2909      	cmp	r1, #9
 800b3de:	7042      	strb	r2, [r0, #1]
 800b3e0:	dd2a      	ble.n	800b438 <__exponent+0x70>
 800b3e2:	f10d 0407 	add.w	r4, sp, #7
 800b3e6:	46a4      	mov	ip, r4
 800b3e8:	270a      	movs	r7, #10
 800b3ea:	46a6      	mov	lr, r4
 800b3ec:	460a      	mov	r2, r1
 800b3ee:	fb91 f6f7 	sdiv	r6, r1, r7
 800b3f2:	fb07 1516 	mls	r5, r7, r6, r1
 800b3f6:	3530      	adds	r5, #48	; 0x30
 800b3f8:	2a63      	cmp	r2, #99	; 0x63
 800b3fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800b3fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b402:	4631      	mov	r1, r6
 800b404:	dcf1      	bgt.n	800b3ea <__exponent+0x22>
 800b406:	3130      	adds	r1, #48	; 0x30
 800b408:	f1ae 0502 	sub.w	r5, lr, #2
 800b40c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b410:	1c44      	adds	r4, r0, #1
 800b412:	4629      	mov	r1, r5
 800b414:	4561      	cmp	r1, ip
 800b416:	d30a      	bcc.n	800b42e <__exponent+0x66>
 800b418:	f10d 0209 	add.w	r2, sp, #9
 800b41c:	eba2 020e 	sub.w	r2, r2, lr
 800b420:	4565      	cmp	r5, ip
 800b422:	bf88      	it	hi
 800b424:	2200      	movhi	r2, #0
 800b426:	4413      	add	r3, r2
 800b428:	1a18      	subs	r0, r3, r0
 800b42a:	b003      	add	sp, #12
 800b42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b432:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b436:	e7ed      	b.n	800b414 <__exponent+0x4c>
 800b438:	2330      	movs	r3, #48	; 0x30
 800b43a:	3130      	adds	r1, #48	; 0x30
 800b43c:	7083      	strb	r3, [r0, #2]
 800b43e:	70c1      	strb	r1, [r0, #3]
 800b440:	1d03      	adds	r3, r0, #4
 800b442:	e7f1      	b.n	800b428 <__exponent+0x60>

0800b444 <_printf_float>:
 800b444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b448:	ed2d 8b02 	vpush	{d8}
 800b44c:	b08d      	sub	sp, #52	; 0x34
 800b44e:	460c      	mov	r4, r1
 800b450:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b454:	4616      	mov	r6, r2
 800b456:	461f      	mov	r7, r3
 800b458:	4605      	mov	r5, r0
 800b45a:	f001 faeb 	bl	800ca34 <_localeconv_r>
 800b45e:	f8d0 a000 	ldr.w	sl, [r0]
 800b462:	4650      	mov	r0, sl
 800b464:	f7f4 fec6 	bl	80001f4 <strlen>
 800b468:	2300      	movs	r3, #0
 800b46a:	930a      	str	r3, [sp, #40]	; 0x28
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	9305      	str	r3, [sp, #20]
 800b470:	f8d8 3000 	ldr.w	r3, [r8]
 800b474:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b478:	3307      	adds	r3, #7
 800b47a:	f023 0307 	bic.w	r3, r3, #7
 800b47e:	f103 0208 	add.w	r2, r3, #8
 800b482:	f8c8 2000 	str.w	r2, [r8]
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b48e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b492:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b496:	9307      	str	r3, [sp, #28]
 800b498:	f8cd 8018 	str.w	r8, [sp, #24]
 800b49c:	ee08 0a10 	vmov	s16, r0
 800b4a0:	4b9f      	ldr	r3, [pc, #636]	; (800b720 <_printf_float+0x2dc>)
 800b4a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4aa:	f7f5 fb57 	bl	8000b5c <__aeabi_dcmpun>
 800b4ae:	bb88      	cbnz	r0, 800b514 <_printf_float+0xd0>
 800b4b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4b4:	4b9a      	ldr	r3, [pc, #616]	; (800b720 <_printf_float+0x2dc>)
 800b4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ba:	f7f5 fb31 	bl	8000b20 <__aeabi_dcmple>
 800b4be:	bb48      	cbnz	r0, 800b514 <_printf_float+0xd0>
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	4640      	mov	r0, r8
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	f7f5 fb20 	bl	8000b0c <__aeabi_dcmplt>
 800b4cc:	b110      	cbz	r0, 800b4d4 <_printf_float+0x90>
 800b4ce:	232d      	movs	r3, #45	; 0x2d
 800b4d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4d4:	4b93      	ldr	r3, [pc, #588]	; (800b724 <_printf_float+0x2e0>)
 800b4d6:	4894      	ldr	r0, [pc, #592]	; (800b728 <_printf_float+0x2e4>)
 800b4d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b4dc:	bf94      	ite	ls
 800b4de:	4698      	movls	r8, r3
 800b4e0:	4680      	movhi	r8, r0
 800b4e2:	2303      	movs	r3, #3
 800b4e4:	6123      	str	r3, [r4, #16]
 800b4e6:	9b05      	ldr	r3, [sp, #20]
 800b4e8:	f023 0204 	bic.w	r2, r3, #4
 800b4ec:	6022      	str	r2, [r4, #0]
 800b4ee:	f04f 0900 	mov.w	r9, #0
 800b4f2:	9700      	str	r7, [sp, #0]
 800b4f4:	4633      	mov	r3, r6
 800b4f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f000 f9d8 	bl	800b8b0 <_printf_common>
 800b500:	3001      	adds	r0, #1
 800b502:	f040 8090 	bne.w	800b626 <_printf_float+0x1e2>
 800b506:	f04f 30ff 	mov.w	r0, #4294967295
 800b50a:	b00d      	add	sp, #52	; 0x34
 800b50c:	ecbd 8b02 	vpop	{d8}
 800b510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b514:	4642      	mov	r2, r8
 800b516:	464b      	mov	r3, r9
 800b518:	4640      	mov	r0, r8
 800b51a:	4649      	mov	r1, r9
 800b51c:	f7f5 fb1e 	bl	8000b5c <__aeabi_dcmpun>
 800b520:	b140      	cbz	r0, 800b534 <_printf_float+0xf0>
 800b522:	464b      	mov	r3, r9
 800b524:	2b00      	cmp	r3, #0
 800b526:	bfbc      	itt	lt
 800b528:	232d      	movlt	r3, #45	; 0x2d
 800b52a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b52e:	487f      	ldr	r0, [pc, #508]	; (800b72c <_printf_float+0x2e8>)
 800b530:	4b7f      	ldr	r3, [pc, #508]	; (800b730 <_printf_float+0x2ec>)
 800b532:	e7d1      	b.n	800b4d8 <_printf_float+0x94>
 800b534:	6863      	ldr	r3, [r4, #4]
 800b536:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b53a:	9206      	str	r2, [sp, #24]
 800b53c:	1c5a      	adds	r2, r3, #1
 800b53e:	d13f      	bne.n	800b5c0 <_printf_float+0x17c>
 800b540:	2306      	movs	r3, #6
 800b542:	6063      	str	r3, [r4, #4]
 800b544:	9b05      	ldr	r3, [sp, #20]
 800b546:	6861      	ldr	r1, [r4, #4]
 800b548:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b54c:	2300      	movs	r3, #0
 800b54e:	9303      	str	r3, [sp, #12]
 800b550:	ab0a      	add	r3, sp, #40	; 0x28
 800b552:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b556:	ab09      	add	r3, sp, #36	; 0x24
 800b558:	ec49 8b10 	vmov	d0, r8, r9
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	6022      	str	r2, [r4, #0]
 800b560:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b564:	4628      	mov	r0, r5
 800b566:	f7ff fecd 	bl	800b304 <__cvt>
 800b56a:	9b06      	ldr	r3, [sp, #24]
 800b56c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b56e:	2b47      	cmp	r3, #71	; 0x47
 800b570:	4680      	mov	r8, r0
 800b572:	d108      	bne.n	800b586 <_printf_float+0x142>
 800b574:	1cc8      	adds	r0, r1, #3
 800b576:	db02      	blt.n	800b57e <_printf_float+0x13a>
 800b578:	6863      	ldr	r3, [r4, #4]
 800b57a:	4299      	cmp	r1, r3
 800b57c:	dd41      	ble.n	800b602 <_printf_float+0x1be>
 800b57e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b582:	fa5f fb8b 	uxtb.w	fp, fp
 800b586:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b58a:	d820      	bhi.n	800b5ce <_printf_float+0x18a>
 800b58c:	3901      	subs	r1, #1
 800b58e:	465a      	mov	r2, fp
 800b590:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b594:	9109      	str	r1, [sp, #36]	; 0x24
 800b596:	f7ff ff17 	bl	800b3c8 <__exponent>
 800b59a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b59c:	1813      	adds	r3, r2, r0
 800b59e:	2a01      	cmp	r2, #1
 800b5a0:	4681      	mov	r9, r0
 800b5a2:	6123      	str	r3, [r4, #16]
 800b5a4:	dc02      	bgt.n	800b5ac <_printf_float+0x168>
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	07d2      	lsls	r2, r2, #31
 800b5aa:	d501      	bpl.n	800b5b0 <_printf_float+0x16c>
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	6123      	str	r3, [r4, #16]
 800b5b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d09c      	beq.n	800b4f2 <_printf_float+0xae>
 800b5b8:	232d      	movs	r3, #45	; 0x2d
 800b5ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5be:	e798      	b.n	800b4f2 <_printf_float+0xae>
 800b5c0:	9a06      	ldr	r2, [sp, #24]
 800b5c2:	2a47      	cmp	r2, #71	; 0x47
 800b5c4:	d1be      	bne.n	800b544 <_printf_float+0x100>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1bc      	bne.n	800b544 <_printf_float+0x100>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e7b9      	b.n	800b542 <_printf_float+0xfe>
 800b5ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b5d2:	d118      	bne.n	800b606 <_printf_float+0x1c2>
 800b5d4:	2900      	cmp	r1, #0
 800b5d6:	6863      	ldr	r3, [r4, #4]
 800b5d8:	dd0b      	ble.n	800b5f2 <_printf_float+0x1ae>
 800b5da:	6121      	str	r1, [r4, #16]
 800b5dc:	b913      	cbnz	r3, 800b5e4 <_printf_float+0x1a0>
 800b5de:	6822      	ldr	r2, [r4, #0]
 800b5e0:	07d0      	lsls	r0, r2, #31
 800b5e2:	d502      	bpl.n	800b5ea <_printf_float+0x1a6>
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	440b      	add	r3, r1
 800b5e8:	6123      	str	r3, [r4, #16]
 800b5ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800b5ec:	f04f 0900 	mov.w	r9, #0
 800b5f0:	e7de      	b.n	800b5b0 <_printf_float+0x16c>
 800b5f2:	b913      	cbnz	r3, 800b5fa <_printf_float+0x1b6>
 800b5f4:	6822      	ldr	r2, [r4, #0]
 800b5f6:	07d2      	lsls	r2, r2, #31
 800b5f8:	d501      	bpl.n	800b5fe <_printf_float+0x1ba>
 800b5fa:	3302      	adds	r3, #2
 800b5fc:	e7f4      	b.n	800b5e8 <_printf_float+0x1a4>
 800b5fe:	2301      	movs	r3, #1
 800b600:	e7f2      	b.n	800b5e8 <_printf_float+0x1a4>
 800b602:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b608:	4299      	cmp	r1, r3
 800b60a:	db05      	blt.n	800b618 <_printf_float+0x1d4>
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	6121      	str	r1, [r4, #16]
 800b610:	07d8      	lsls	r0, r3, #31
 800b612:	d5ea      	bpl.n	800b5ea <_printf_float+0x1a6>
 800b614:	1c4b      	adds	r3, r1, #1
 800b616:	e7e7      	b.n	800b5e8 <_printf_float+0x1a4>
 800b618:	2900      	cmp	r1, #0
 800b61a:	bfd4      	ite	le
 800b61c:	f1c1 0202 	rsble	r2, r1, #2
 800b620:	2201      	movgt	r2, #1
 800b622:	4413      	add	r3, r2
 800b624:	e7e0      	b.n	800b5e8 <_printf_float+0x1a4>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	055a      	lsls	r2, r3, #21
 800b62a:	d407      	bmi.n	800b63c <_printf_float+0x1f8>
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	4642      	mov	r2, r8
 800b630:	4631      	mov	r1, r6
 800b632:	4628      	mov	r0, r5
 800b634:	47b8      	blx	r7
 800b636:	3001      	adds	r0, #1
 800b638:	d12c      	bne.n	800b694 <_printf_float+0x250>
 800b63a:	e764      	b.n	800b506 <_printf_float+0xc2>
 800b63c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b640:	f240 80e0 	bls.w	800b804 <_printf_float+0x3c0>
 800b644:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b648:	2200      	movs	r2, #0
 800b64a:	2300      	movs	r3, #0
 800b64c:	f7f5 fa54 	bl	8000af8 <__aeabi_dcmpeq>
 800b650:	2800      	cmp	r0, #0
 800b652:	d034      	beq.n	800b6be <_printf_float+0x27a>
 800b654:	4a37      	ldr	r2, [pc, #220]	; (800b734 <_printf_float+0x2f0>)
 800b656:	2301      	movs	r3, #1
 800b658:	4631      	mov	r1, r6
 800b65a:	4628      	mov	r0, r5
 800b65c:	47b8      	blx	r7
 800b65e:	3001      	adds	r0, #1
 800b660:	f43f af51 	beq.w	800b506 <_printf_float+0xc2>
 800b664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b668:	429a      	cmp	r2, r3
 800b66a:	db02      	blt.n	800b672 <_printf_float+0x22e>
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	07d8      	lsls	r0, r3, #31
 800b670:	d510      	bpl.n	800b694 <_printf_float+0x250>
 800b672:	ee18 3a10 	vmov	r3, s16
 800b676:	4652      	mov	r2, sl
 800b678:	4631      	mov	r1, r6
 800b67a:	4628      	mov	r0, r5
 800b67c:	47b8      	blx	r7
 800b67e:	3001      	adds	r0, #1
 800b680:	f43f af41 	beq.w	800b506 <_printf_float+0xc2>
 800b684:	f04f 0800 	mov.w	r8, #0
 800b688:	f104 091a 	add.w	r9, r4, #26
 800b68c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b68e:	3b01      	subs	r3, #1
 800b690:	4543      	cmp	r3, r8
 800b692:	dc09      	bgt.n	800b6a8 <_printf_float+0x264>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	079b      	lsls	r3, r3, #30
 800b698:	f100 8105 	bmi.w	800b8a6 <_printf_float+0x462>
 800b69c:	68e0      	ldr	r0, [r4, #12]
 800b69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6a0:	4298      	cmp	r0, r3
 800b6a2:	bfb8      	it	lt
 800b6a4:	4618      	movlt	r0, r3
 800b6a6:	e730      	b.n	800b50a <_printf_float+0xc6>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	464a      	mov	r2, r9
 800b6ac:	4631      	mov	r1, r6
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	47b8      	blx	r7
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	f43f af27 	beq.w	800b506 <_printf_float+0xc2>
 800b6b8:	f108 0801 	add.w	r8, r8, #1
 800b6bc:	e7e6      	b.n	800b68c <_printf_float+0x248>
 800b6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	dc39      	bgt.n	800b738 <_printf_float+0x2f4>
 800b6c4:	4a1b      	ldr	r2, [pc, #108]	; (800b734 <_printf_float+0x2f0>)
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4631      	mov	r1, r6
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	47b8      	blx	r7
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	f43f af19 	beq.w	800b506 <_printf_float+0xc2>
 800b6d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	d102      	bne.n	800b6e2 <_printf_float+0x29e>
 800b6dc:	6823      	ldr	r3, [r4, #0]
 800b6de:	07d9      	lsls	r1, r3, #31
 800b6e0:	d5d8      	bpl.n	800b694 <_printf_float+0x250>
 800b6e2:	ee18 3a10 	vmov	r3, s16
 800b6e6:	4652      	mov	r2, sl
 800b6e8:	4631      	mov	r1, r6
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	47b8      	blx	r7
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	f43f af09 	beq.w	800b506 <_printf_float+0xc2>
 800b6f4:	f04f 0900 	mov.w	r9, #0
 800b6f8:	f104 0a1a 	add.w	sl, r4, #26
 800b6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fe:	425b      	negs	r3, r3
 800b700:	454b      	cmp	r3, r9
 800b702:	dc01      	bgt.n	800b708 <_printf_float+0x2c4>
 800b704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b706:	e792      	b.n	800b62e <_printf_float+0x1ea>
 800b708:	2301      	movs	r3, #1
 800b70a:	4652      	mov	r2, sl
 800b70c:	4631      	mov	r1, r6
 800b70e:	4628      	mov	r0, r5
 800b710:	47b8      	blx	r7
 800b712:	3001      	adds	r0, #1
 800b714:	f43f aef7 	beq.w	800b506 <_printf_float+0xc2>
 800b718:	f109 0901 	add.w	r9, r9, #1
 800b71c:	e7ee      	b.n	800b6fc <_printf_float+0x2b8>
 800b71e:	bf00      	nop
 800b720:	7fefffff 	.word	0x7fefffff
 800b724:	0800fa6c 	.word	0x0800fa6c
 800b728:	0800fa70 	.word	0x0800fa70
 800b72c:	0800fa78 	.word	0x0800fa78
 800b730:	0800fa74 	.word	0x0800fa74
 800b734:	0800fda1 	.word	0x0800fda1
 800b738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b73a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b73c:	429a      	cmp	r2, r3
 800b73e:	bfa8      	it	ge
 800b740:	461a      	movge	r2, r3
 800b742:	2a00      	cmp	r2, #0
 800b744:	4691      	mov	r9, r2
 800b746:	dc37      	bgt.n	800b7b8 <_printf_float+0x374>
 800b748:	f04f 0b00 	mov.w	fp, #0
 800b74c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b750:	f104 021a 	add.w	r2, r4, #26
 800b754:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b756:	9305      	str	r3, [sp, #20]
 800b758:	eba3 0309 	sub.w	r3, r3, r9
 800b75c:	455b      	cmp	r3, fp
 800b75e:	dc33      	bgt.n	800b7c8 <_printf_float+0x384>
 800b760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b764:	429a      	cmp	r2, r3
 800b766:	db3b      	blt.n	800b7e0 <_printf_float+0x39c>
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	07da      	lsls	r2, r3, #31
 800b76c:	d438      	bmi.n	800b7e0 <_printf_float+0x39c>
 800b76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b770:	9a05      	ldr	r2, [sp, #20]
 800b772:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b774:	1a9a      	subs	r2, r3, r2
 800b776:	eba3 0901 	sub.w	r9, r3, r1
 800b77a:	4591      	cmp	r9, r2
 800b77c:	bfa8      	it	ge
 800b77e:	4691      	movge	r9, r2
 800b780:	f1b9 0f00 	cmp.w	r9, #0
 800b784:	dc35      	bgt.n	800b7f2 <_printf_float+0x3ae>
 800b786:	f04f 0800 	mov.w	r8, #0
 800b78a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b78e:	f104 0a1a 	add.w	sl, r4, #26
 800b792:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b796:	1a9b      	subs	r3, r3, r2
 800b798:	eba3 0309 	sub.w	r3, r3, r9
 800b79c:	4543      	cmp	r3, r8
 800b79e:	f77f af79 	ble.w	800b694 <_printf_float+0x250>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	4652      	mov	r2, sl
 800b7a6:	4631      	mov	r1, r6
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	47b8      	blx	r7
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	f43f aeaa 	beq.w	800b506 <_printf_float+0xc2>
 800b7b2:	f108 0801 	add.w	r8, r8, #1
 800b7b6:	e7ec      	b.n	800b792 <_printf_float+0x34e>
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	4642      	mov	r2, r8
 800b7be:	4628      	mov	r0, r5
 800b7c0:	47b8      	blx	r7
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	d1c0      	bne.n	800b748 <_printf_float+0x304>
 800b7c6:	e69e      	b.n	800b506 <_printf_float+0xc2>
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	9205      	str	r2, [sp, #20]
 800b7d0:	47b8      	blx	r7
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	f43f ae97 	beq.w	800b506 <_printf_float+0xc2>
 800b7d8:	9a05      	ldr	r2, [sp, #20]
 800b7da:	f10b 0b01 	add.w	fp, fp, #1
 800b7de:	e7b9      	b.n	800b754 <_printf_float+0x310>
 800b7e0:	ee18 3a10 	vmov	r3, s16
 800b7e4:	4652      	mov	r2, sl
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b8      	blx	r7
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	d1be      	bne.n	800b76e <_printf_float+0x32a>
 800b7f0:	e689      	b.n	800b506 <_printf_float+0xc2>
 800b7f2:	9a05      	ldr	r2, [sp, #20]
 800b7f4:	464b      	mov	r3, r9
 800b7f6:	4442      	add	r2, r8
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	47b8      	blx	r7
 800b7fe:	3001      	adds	r0, #1
 800b800:	d1c1      	bne.n	800b786 <_printf_float+0x342>
 800b802:	e680      	b.n	800b506 <_printf_float+0xc2>
 800b804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b806:	2a01      	cmp	r2, #1
 800b808:	dc01      	bgt.n	800b80e <_printf_float+0x3ca>
 800b80a:	07db      	lsls	r3, r3, #31
 800b80c:	d538      	bpl.n	800b880 <_printf_float+0x43c>
 800b80e:	2301      	movs	r3, #1
 800b810:	4642      	mov	r2, r8
 800b812:	4631      	mov	r1, r6
 800b814:	4628      	mov	r0, r5
 800b816:	47b8      	blx	r7
 800b818:	3001      	adds	r0, #1
 800b81a:	f43f ae74 	beq.w	800b506 <_printf_float+0xc2>
 800b81e:	ee18 3a10 	vmov	r3, s16
 800b822:	4652      	mov	r2, sl
 800b824:	4631      	mov	r1, r6
 800b826:	4628      	mov	r0, r5
 800b828:	47b8      	blx	r7
 800b82a:	3001      	adds	r0, #1
 800b82c:	f43f ae6b 	beq.w	800b506 <_printf_float+0xc2>
 800b830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b834:	2200      	movs	r2, #0
 800b836:	2300      	movs	r3, #0
 800b838:	f7f5 f95e 	bl	8000af8 <__aeabi_dcmpeq>
 800b83c:	b9d8      	cbnz	r0, 800b876 <_printf_float+0x432>
 800b83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b840:	f108 0201 	add.w	r2, r8, #1
 800b844:	3b01      	subs	r3, #1
 800b846:	4631      	mov	r1, r6
 800b848:	4628      	mov	r0, r5
 800b84a:	47b8      	blx	r7
 800b84c:	3001      	adds	r0, #1
 800b84e:	d10e      	bne.n	800b86e <_printf_float+0x42a>
 800b850:	e659      	b.n	800b506 <_printf_float+0xc2>
 800b852:	2301      	movs	r3, #1
 800b854:	4652      	mov	r2, sl
 800b856:	4631      	mov	r1, r6
 800b858:	4628      	mov	r0, r5
 800b85a:	47b8      	blx	r7
 800b85c:	3001      	adds	r0, #1
 800b85e:	f43f ae52 	beq.w	800b506 <_printf_float+0xc2>
 800b862:	f108 0801 	add.w	r8, r8, #1
 800b866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b868:	3b01      	subs	r3, #1
 800b86a:	4543      	cmp	r3, r8
 800b86c:	dcf1      	bgt.n	800b852 <_printf_float+0x40e>
 800b86e:	464b      	mov	r3, r9
 800b870:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b874:	e6dc      	b.n	800b630 <_printf_float+0x1ec>
 800b876:	f04f 0800 	mov.w	r8, #0
 800b87a:	f104 0a1a 	add.w	sl, r4, #26
 800b87e:	e7f2      	b.n	800b866 <_printf_float+0x422>
 800b880:	2301      	movs	r3, #1
 800b882:	4642      	mov	r2, r8
 800b884:	e7df      	b.n	800b846 <_printf_float+0x402>
 800b886:	2301      	movs	r3, #1
 800b888:	464a      	mov	r2, r9
 800b88a:	4631      	mov	r1, r6
 800b88c:	4628      	mov	r0, r5
 800b88e:	47b8      	blx	r7
 800b890:	3001      	adds	r0, #1
 800b892:	f43f ae38 	beq.w	800b506 <_printf_float+0xc2>
 800b896:	f108 0801 	add.w	r8, r8, #1
 800b89a:	68e3      	ldr	r3, [r4, #12]
 800b89c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b89e:	1a5b      	subs	r3, r3, r1
 800b8a0:	4543      	cmp	r3, r8
 800b8a2:	dcf0      	bgt.n	800b886 <_printf_float+0x442>
 800b8a4:	e6fa      	b.n	800b69c <_printf_float+0x258>
 800b8a6:	f04f 0800 	mov.w	r8, #0
 800b8aa:	f104 0919 	add.w	r9, r4, #25
 800b8ae:	e7f4      	b.n	800b89a <_printf_float+0x456>

0800b8b0 <_printf_common>:
 800b8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	4616      	mov	r6, r2
 800b8b6:	4699      	mov	r9, r3
 800b8b8:	688a      	ldr	r2, [r1, #8]
 800b8ba:	690b      	ldr	r3, [r1, #16]
 800b8bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	bfb8      	it	lt
 800b8c4:	4613      	movlt	r3, r2
 800b8c6:	6033      	str	r3, [r6, #0]
 800b8c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	b10a      	cbz	r2, 800b8d6 <_printf_common+0x26>
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	6033      	str	r3, [r6, #0]
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	0699      	lsls	r1, r3, #26
 800b8da:	bf42      	ittt	mi
 800b8dc:	6833      	ldrmi	r3, [r6, #0]
 800b8de:	3302      	addmi	r3, #2
 800b8e0:	6033      	strmi	r3, [r6, #0]
 800b8e2:	6825      	ldr	r5, [r4, #0]
 800b8e4:	f015 0506 	ands.w	r5, r5, #6
 800b8e8:	d106      	bne.n	800b8f8 <_printf_common+0x48>
 800b8ea:	f104 0a19 	add.w	sl, r4, #25
 800b8ee:	68e3      	ldr	r3, [r4, #12]
 800b8f0:	6832      	ldr	r2, [r6, #0]
 800b8f2:	1a9b      	subs	r3, r3, r2
 800b8f4:	42ab      	cmp	r3, r5
 800b8f6:	dc26      	bgt.n	800b946 <_printf_common+0x96>
 800b8f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8fc:	1e13      	subs	r3, r2, #0
 800b8fe:	6822      	ldr	r2, [r4, #0]
 800b900:	bf18      	it	ne
 800b902:	2301      	movne	r3, #1
 800b904:	0692      	lsls	r2, r2, #26
 800b906:	d42b      	bmi.n	800b960 <_printf_common+0xb0>
 800b908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b90c:	4649      	mov	r1, r9
 800b90e:	4638      	mov	r0, r7
 800b910:	47c0      	blx	r8
 800b912:	3001      	adds	r0, #1
 800b914:	d01e      	beq.n	800b954 <_printf_common+0xa4>
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	68e5      	ldr	r5, [r4, #12]
 800b91a:	6832      	ldr	r2, [r6, #0]
 800b91c:	f003 0306 	and.w	r3, r3, #6
 800b920:	2b04      	cmp	r3, #4
 800b922:	bf08      	it	eq
 800b924:	1aad      	subeq	r5, r5, r2
 800b926:	68a3      	ldr	r3, [r4, #8]
 800b928:	6922      	ldr	r2, [r4, #16]
 800b92a:	bf0c      	ite	eq
 800b92c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b930:	2500      	movne	r5, #0
 800b932:	4293      	cmp	r3, r2
 800b934:	bfc4      	itt	gt
 800b936:	1a9b      	subgt	r3, r3, r2
 800b938:	18ed      	addgt	r5, r5, r3
 800b93a:	2600      	movs	r6, #0
 800b93c:	341a      	adds	r4, #26
 800b93e:	42b5      	cmp	r5, r6
 800b940:	d11a      	bne.n	800b978 <_printf_common+0xc8>
 800b942:	2000      	movs	r0, #0
 800b944:	e008      	b.n	800b958 <_printf_common+0xa8>
 800b946:	2301      	movs	r3, #1
 800b948:	4652      	mov	r2, sl
 800b94a:	4649      	mov	r1, r9
 800b94c:	4638      	mov	r0, r7
 800b94e:	47c0      	blx	r8
 800b950:	3001      	adds	r0, #1
 800b952:	d103      	bne.n	800b95c <_printf_common+0xac>
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b95c:	3501      	adds	r5, #1
 800b95e:	e7c6      	b.n	800b8ee <_printf_common+0x3e>
 800b960:	18e1      	adds	r1, r4, r3
 800b962:	1c5a      	adds	r2, r3, #1
 800b964:	2030      	movs	r0, #48	; 0x30
 800b966:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b96a:	4422      	add	r2, r4
 800b96c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b970:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b974:	3302      	adds	r3, #2
 800b976:	e7c7      	b.n	800b908 <_printf_common+0x58>
 800b978:	2301      	movs	r3, #1
 800b97a:	4622      	mov	r2, r4
 800b97c:	4649      	mov	r1, r9
 800b97e:	4638      	mov	r0, r7
 800b980:	47c0      	blx	r8
 800b982:	3001      	adds	r0, #1
 800b984:	d0e6      	beq.n	800b954 <_printf_common+0xa4>
 800b986:	3601      	adds	r6, #1
 800b988:	e7d9      	b.n	800b93e <_printf_common+0x8e>
	...

0800b98c <_printf_i>:
 800b98c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b990:	7e0f      	ldrb	r7, [r1, #24]
 800b992:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b994:	2f78      	cmp	r7, #120	; 0x78
 800b996:	4691      	mov	r9, r2
 800b998:	4680      	mov	r8, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	469a      	mov	sl, r3
 800b99e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9a2:	d807      	bhi.n	800b9b4 <_printf_i+0x28>
 800b9a4:	2f62      	cmp	r7, #98	; 0x62
 800b9a6:	d80a      	bhi.n	800b9be <_printf_i+0x32>
 800b9a8:	2f00      	cmp	r7, #0
 800b9aa:	f000 80d8 	beq.w	800bb5e <_printf_i+0x1d2>
 800b9ae:	2f58      	cmp	r7, #88	; 0x58
 800b9b0:	f000 80a3 	beq.w	800bafa <_printf_i+0x16e>
 800b9b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9bc:	e03a      	b.n	800ba34 <_printf_i+0xa8>
 800b9be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9c2:	2b15      	cmp	r3, #21
 800b9c4:	d8f6      	bhi.n	800b9b4 <_printf_i+0x28>
 800b9c6:	a101      	add	r1, pc, #4	; (adr r1, 800b9cc <_printf_i+0x40>)
 800b9c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9cc:	0800ba25 	.word	0x0800ba25
 800b9d0:	0800ba39 	.word	0x0800ba39
 800b9d4:	0800b9b5 	.word	0x0800b9b5
 800b9d8:	0800b9b5 	.word	0x0800b9b5
 800b9dc:	0800b9b5 	.word	0x0800b9b5
 800b9e0:	0800b9b5 	.word	0x0800b9b5
 800b9e4:	0800ba39 	.word	0x0800ba39
 800b9e8:	0800b9b5 	.word	0x0800b9b5
 800b9ec:	0800b9b5 	.word	0x0800b9b5
 800b9f0:	0800b9b5 	.word	0x0800b9b5
 800b9f4:	0800b9b5 	.word	0x0800b9b5
 800b9f8:	0800bb45 	.word	0x0800bb45
 800b9fc:	0800ba69 	.word	0x0800ba69
 800ba00:	0800bb27 	.word	0x0800bb27
 800ba04:	0800b9b5 	.word	0x0800b9b5
 800ba08:	0800b9b5 	.word	0x0800b9b5
 800ba0c:	0800bb67 	.word	0x0800bb67
 800ba10:	0800b9b5 	.word	0x0800b9b5
 800ba14:	0800ba69 	.word	0x0800ba69
 800ba18:	0800b9b5 	.word	0x0800b9b5
 800ba1c:	0800b9b5 	.word	0x0800b9b5
 800ba20:	0800bb2f 	.word	0x0800bb2f
 800ba24:	682b      	ldr	r3, [r5, #0]
 800ba26:	1d1a      	adds	r2, r3, #4
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	602a      	str	r2, [r5, #0]
 800ba2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba34:	2301      	movs	r3, #1
 800ba36:	e0a3      	b.n	800bb80 <_printf_i+0x1f4>
 800ba38:	6820      	ldr	r0, [r4, #0]
 800ba3a:	6829      	ldr	r1, [r5, #0]
 800ba3c:	0606      	lsls	r6, r0, #24
 800ba3e:	f101 0304 	add.w	r3, r1, #4
 800ba42:	d50a      	bpl.n	800ba5a <_printf_i+0xce>
 800ba44:	680e      	ldr	r6, [r1, #0]
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	2e00      	cmp	r6, #0
 800ba4a:	da03      	bge.n	800ba54 <_printf_i+0xc8>
 800ba4c:	232d      	movs	r3, #45	; 0x2d
 800ba4e:	4276      	negs	r6, r6
 800ba50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba54:	485e      	ldr	r0, [pc, #376]	; (800bbd0 <_printf_i+0x244>)
 800ba56:	230a      	movs	r3, #10
 800ba58:	e019      	b.n	800ba8e <_printf_i+0x102>
 800ba5a:	680e      	ldr	r6, [r1, #0]
 800ba5c:	602b      	str	r3, [r5, #0]
 800ba5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba62:	bf18      	it	ne
 800ba64:	b236      	sxthne	r6, r6
 800ba66:	e7ef      	b.n	800ba48 <_printf_i+0xbc>
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	6820      	ldr	r0, [r4, #0]
 800ba6c:	1d19      	adds	r1, r3, #4
 800ba6e:	6029      	str	r1, [r5, #0]
 800ba70:	0601      	lsls	r1, r0, #24
 800ba72:	d501      	bpl.n	800ba78 <_printf_i+0xec>
 800ba74:	681e      	ldr	r6, [r3, #0]
 800ba76:	e002      	b.n	800ba7e <_printf_i+0xf2>
 800ba78:	0646      	lsls	r6, r0, #25
 800ba7a:	d5fb      	bpl.n	800ba74 <_printf_i+0xe8>
 800ba7c:	881e      	ldrh	r6, [r3, #0]
 800ba7e:	4854      	ldr	r0, [pc, #336]	; (800bbd0 <_printf_i+0x244>)
 800ba80:	2f6f      	cmp	r7, #111	; 0x6f
 800ba82:	bf0c      	ite	eq
 800ba84:	2308      	moveq	r3, #8
 800ba86:	230a      	movne	r3, #10
 800ba88:	2100      	movs	r1, #0
 800ba8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba8e:	6865      	ldr	r5, [r4, #4]
 800ba90:	60a5      	str	r5, [r4, #8]
 800ba92:	2d00      	cmp	r5, #0
 800ba94:	bfa2      	ittt	ge
 800ba96:	6821      	ldrge	r1, [r4, #0]
 800ba98:	f021 0104 	bicge.w	r1, r1, #4
 800ba9c:	6021      	strge	r1, [r4, #0]
 800ba9e:	b90e      	cbnz	r6, 800baa4 <_printf_i+0x118>
 800baa0:	2d00      	cmp	r5, #0
 800baa2:	d04d      	beq.n	800bb40 <_printf_i+0x1b4>
 800baa4:	4615      	mov	r5, r2
 800baa6:	fbb6 f1f3 	udiv	r1, r6, r3
 800baaa:	fb03 6711 	mls	r7, r3, r1, r6
 800baae:	5dc7      	ldrb	r7, [r0, r7]
 800bab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bab4:	4637      	mov	r7, r6
 800bab6:	42bb      	cmp	r3, r7
 800bab8:	460e      	mov	r6, r1
 800baba:	d9f4      	bls.n	800baa6 <_printf_i+0x11a>
 800babc:	2b08      	cmp	r3, #8
 800babe:	d10b      	bne.n	800bad8 <_printf_i+0x14c>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	07de      	lsls	r6, r3, #31
 800bac4:	d508      	bpl.n	800bad8 <_printf_i+0x14c>
 800bac6:	6923      	ldr	r3, [r4, #16]
 800bac8:	6861      	ldr	r1, [r4, #4]
 800baca:	4299      	cmp	r1, r3
 800bacc:	bfde      	ittt	le
 800bace:	2330      	movle	r3, #48	; 0x30
 800bad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bad4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bad8:	1b52      	subs	r2, r2, r5
 800bada:	6122      	str	r2, [r4, #16]
 800badc:	f8cd a000 	str.w	sl, [sp]
 800bae0:	464b      	mov	r3, r9
 800bae2:	aa03      	add	r2, sp, #12
 800bae4:	4621      	mov	r1, r4
 800bae6:	4640      	mov	r0, r8
 800bae8:	f7ff fee2 	bl	800b8b0 <_printf_common>
 800baec:	3001      	adds	r0, #1
 800baee:	d14c      	bne.n	800bb8a <_printf_i+0x1fe>
 800baf0:	f04f 30ff 	mov.w	r0, #4294967295
 800baf4:	b004      	add	sp, #16
 800baf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafa:	4835      	ldr	r0, [pc, #212]	; (800bbd0 <_printf_i+0x244>)
 800bafc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb00:	6829      	ldr	r1, [r5, #0]
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb08:	6029      	str	r1, [r5, #0]
 800bb0a:	061d      	lsls	r5, r3, #24
 800bb0c:	d514      	bpl.n	800bb38 <_printf_i+0x1ac>
 800bb0e:	07df      	lsls	r7, r3, #31
 800bb10:	bf44      	itt	mi
 800bb12:	f043 0320 	orrmi.w	r3, r3, #32
 800bb16:	6023      	strmi	r3, [r4, #0]
 800bb18:	b91e      	cbnz	r6, 800bb22 <_printf_i+0x196>
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	f023 0320 	bic.w	r3, r3, #32
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	2310      	movs	r3, #16
 800bb24:	e7b0      	b.n	800ba88 <_printf_i+0xfc>
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	f043 0320 	orr.w	r3, r3, #32
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	2378      	movs	r3, #120	; 0x78
 800bb30:	4828      	ldr	r0, [pc, #160]	; (800bbd4 <_printf_i+0x248>)
 800bb32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb36:	e7e3      	b.n	800bb00 <_printf_i+0x174>
 800bb38:	0659      	lsls	r1, r3, #25
 800bb3a:	bf48      	it	mi
 800bb3c:	b2b6      	uxthmi	r6, r6
 800bb3e:	e7e6      	b.n	800bb0e <_printf_i+0x182>
 800bb40:	4615      	mov	r5, r2
 800bb42:	e7bb      	b.n	800babc <_printf_i+0x130>
 800bb44:	682b      	ldr	r3, [r5, #0]
 800bb46:	6826      	ldr	r6, [r4, #0]
 800bb48:	6961      	ldr	r1, [r4, #20]
 800bb4a:	1d18      	adds	r0, r3, #4
 800bb4c:	6028      	str	r0, [r5, #0]
 800bb4e:	0635      	lsls	r5, r6, #24
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	d501      	bpl.n	800bb58 <_printf_i+0x1cc>
 800bb54:	6019      	str	r1, [r3, #0]
 800bb56:	e002      	b.n	800bb5e <_printf_i+0x1d2>
 800bb58:	0670      	lsls	r0, r6, #25
 800bb5a:	d5fb      	bpl.n	800bb54 <_printf_i+0x1c8>
 800bb5c:	8019      	strh	r1, [r3, #0]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	6123      	str	r3, [r4, #16]
 800bb62:	4615      	mov	r5, r2
 800bb64:	e7ba      	b.n	800badc <_printf_i+0x150>
 800bb66:	682b      	ldr	r3, [r5, #0]
 800bb68:	1d1a      	adds	r2, r3, #4
 800bb6a:	602a      	str	r2, [r5, #0]
 800bb6c:	681d      	ldr	r5, [r3, #0]
 800bb6e:	6862      	ldr	r2, [r4, #4]
 800bb70:	2100      	movs	r1, #0
 800bb72:	4628      	mov	r0, r5
 800bb74:	f7f4 fb4c 	bl	8000210 <memchr>
 800bb78:	b108      	cbz	r0, 800bb7e <_printf_i+0x1f2>
 800bb7a:	1b40      	subs	r0, r0, r5
 800bb7c:	6060      	str	r0, [r4, #4]
 800bb7e:	6863      	ldr	r3, [r4, #4]
 800bb80:	6123      	str	r3, [r4, #16]
 800bb82:	2300      	movs	r3, #0
 800bb84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb88:	e7a8      	b.n	800badc <_printf_i+0x150>
 800bb8a:	6923      	ldr	r3, [r4, #16]
 800bb8c:	462a      	mov	r2, r5
 800bb8e:	4649      	mov	r1, r9
 800bb90:	4640      	mov	r0, r8
 800bb92:	47d0      	blx	sl
 800bb94:	3001      	adds	r0, #1
 800bb96:	d0ab      	beq.n	800baf0 <_printf_i+0x164>
 800bb98:	6823      	ldr	r3, [r4, #0]
 800bb9a:	079b      	lsls	r3, r3, #30
 800bb9c:	d413      	bmi.n	800bbc6 <_printf_i+0x23a>
 800bb9e:	68e0      	ldr	r0, [r4, #12]
 800bba0:	9b03      	ldr	r3, [sp, #12]
 800bba2:	4298      	cmp	r0, r3
 800bba4:	bfb8      	it	lt
 800bba6:	4618      	movlt	r0, r3
 800bba8:	e7a4      	b.n	800baf4 <_printf_i+0x168>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	4632      	mov	r2, r6
 800bbae:	4649      	mov	r1, r9
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	47d0      	blx	sl
 800bbb4:	3001      	adds	r0, #1
 800bbb6:	d09b      	beq.n	800baf0 <_printf_i+0x164>
 800bbb8:	3501      	adds	r5, #1
 800bbba:	68e3      	ldr	r3, [r4, #12]
 800bbbc:	9903      	ldr	r1, [sp, #12]
 800bbbe:	1a5b      	subs	r3, r3, r1
 800bbc0:	42ab      	cmp	r3, r5
 800bbc2:	dcf2      	bgt.n	800bbaa <_printf_i+0x21e>
 800bbc4:	e7eb      	b.n	800bb9e <_printf_i+0x212>
 800bbc6:	2500      	movs	r5, #0
 800bbc8:	f104 0619 	add.w	r6, r4, #25
 800bbcc:	e7f5      	b.n	800bbba <_printf_i+0x22e>
 800bbce:	bf00      	nop
 800bbd0:	0800fa7c 	.word	0x0800fa7c
 800bbd4:	0800fa8d 	.word	0x0800fa8d

0800bbd8 <siscanf>:
 800bbd8:	b40e      	push	{r1, r2, r3}
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	b09f      	sub	sp, #124	; 0x7c
 800bbde:	ac21      	add	r4, sp, #132	; 0x84
 800bbe0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bbe4:	f854 2b04 	ldr.w	r2, [r4], #4
 800bbe8:	9201      	str	r2, [sp, #4]
 800bbea:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bbee:	9004      	str	r0, [sp, #16]
 800bbf0:	9008      	str	r0, [sp, #32]
 800bbf2:	f7f4 faff 	bl	80001f4 <strlen>
 800bbf6:	4b0c      	ldr	r3, [pc, #48]	; (800bc28 <siscanf+0x50>)
 800bbf8:	9005      	str	r0, [sp, #20]
 800bbfa:	9009      	str	r0, [sp, #36]	; 0x24
 800bbfc:	930d      	str	r3, [sp, #52]	; 0x34
 800bbfe:	480b      	ldr	r0, [pc, #44]	; (800bc2c <siscanf+0x54>)
 800bc00:	9a01      	ldr	r2, [sp, #4]
 800bc02:	6800      	ldr	r0, [r0, #0]
 800bc04:	9403      	str	r4, [sp, #12]
 800bc06:	2300      	movs	r3, #0
 800bc08:	9311      	str	r3, [sp, #68]	; 0x44
 800bc0a:	9316      	str	r3, [sp, #88]	; 0x58
 800bc0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc10:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bc14:	a904      	add	r1, sp, #16
 800bc16:	4623      	mov	r3, r4
 800bc18:	f001 fd5a 	bl	800d6d0 <__ssvfiscanf_r>
 800bc1c:	b01f      	add	sp, #124	; 0x7c
 800bc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc22:	b003      	add	sp, #12
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	0800bc53 	.word	0x0800bc53
 800bc2c:	20000060 	.word	0x20000060

0800bc30 <__sread>:
 800bc30:	b510      	push	{r4, lr}
 800bc32:	460c      	mov	r4, r1
 800bc34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc38:	f002 f814 	bl	800dc64 <_read_r>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	bfab      	itete	ge
 800bc40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc42:	89a3      	ldrhlt	r3, [r4, #12]
 800bc44:	181b      	addge	r3, r3, r0
 800bc46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc4a:	bfac      	ite	ge
 800bc4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc4e:	81a3      	strhlt	r3, [r4, #12]
 800bc50:	bd10      	pop	{r4, pc}

0800bc52 <__seofread>:
 800bc52:	2000      	movs	r0, #0
 800bc54:	4770      	bx	lr

0800bc56 <__swrite>:
 800bc56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5a:	461f      	mov	r7, r3
 800bc5c:	898b      	ldrh	r3, [r1, #12]
 800bc5e:	05db      	lsls	r3, r3, #23
 800bc60:	4605      	mov	r5, r0
 800bc62:	460c      	mov	r4, r1
 800bc64:	4616      	mov	r6, r2
 800bc66:	d505      	bpl.n	800bc74 <__swrite+0x1e>
 800bc68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f000 fee4 	bl	800ca3c <_lseek_r>
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc7e:	81a3      	strh	r3, [r4, #12]
 800bc80:	4632      	mov	r2, r6
 800bc82:	463b      	mov	r3, r7
 800bc84:	4628      	mov	r0, r5
 800bc86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc8a:	f000 b837 	b.w	800bcfc <_write_r>

0800bc8e <__sseek>:
 800bc8e:	b510      	push	{r4, lr}
 800bc90:	460c      	mov	r4, r1
 800bc92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc96:	f000 fed1 	bl	800ca3c <_lseek_r>
 800bc9a:	1c43      	adds	r3, r0, #1
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	bf15      	itete	ne
 800bca0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcaa:	81a3      	strheq	r3, [r4, #12]
 800bcac:	bf18      	it	ne
 800bcae:	81a3      	strhne	r3, [r4, #12]
 800bcb0:	bd10      	pop	{r4, pc}

0800bcb2 <__sclose>:
 800bcb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb6:	f000 b833 	b.w	800bd20 <_close_r>
	...

0800bcbc <_vsiprintf_r>:
 800bcbc:	b500      	push	{lr}
 800bcbe:	b09b      	sub	sp, #108	; 0x6c
 800bcc0:	9100      	str	r1, [sp, #0]
 800bcc2:	9104      	str	r1, [sp, #16]
 800bcc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bcc8:	9105      	str	r1, [sp, #20]
 800bcca:	9102      	str	r1, [sp, #8]
 800bccc:	4905      	ldr	r1, [pc, #20]	; (800bce4 <_vsiprintf_r+0x28>)
 800bcce:	9103      	str	r1, [sp, #12]
 800bcd0:	4669      	mov	r1, sp
 800bcd2:	f001 fba3 	bl	800d41c <_svfiprintf_r>
 800bcd6:	9b00      	ldr	r3, [sp, #0]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	701a      	strb	r2, [r3, #0]
 800bcdc:	b01b      	add	sp, #108	; 0x6c
 800bcde:	f85d fb04 	ldr.w	pc, [sp], #4
 800bce2:	bf00      	nop
 800bce4:	ffff0208 	.word	0xffff0208

0800bce8 <vsiprintf>:
 800bce8:	4613      	mov	r3, r2
 800bcea:	460a      	mov	r2, r1
 800bcec:	4601      	mov	r1, r0
 800bcee:	4802      	ldr	r0, [pc, #8]	; (800bcf8 <vsiprintf+0x10>)
 800bcf0:	6800      	ldr	r0, [r0, #0]
 800bcf2:	f7ff bfe3 	b.w	800bcbc <_vsiprintf_r>
 800bcf6:	bf00      	nop
 800bcf8:	20000060 	.word	0x20000060

0800bcfc <_write_r>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	4d07      	ldr	r5, [pc, #28]	; (800bd1c <_write_r+0x20>)
 800bd00:	4604      	mov	r4, r0
 800bd02:	4608      	mov	r0, r1
 800bd04:	4611      	mov	r1, r2
 800bd06:	2200      	movs	r2, #0
 800bd08:	602a      	str	r2, [r5, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	f7f8 ffa1 	bl	8004c52 <_write>
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	d102      	bne.n	800bd1a <_write_r+0x1e>
 800bd14:	682b      	ldr	r3, [r5, #0]
 800bd16:	b103      	cbz	r3, 800bd1a <_write_r+0x1e>
 800bd18:	6023      	str	r3, [r4, #0]
 800bd1a:	bd38      	pop	{r3, r4, r5, pc}
 800bd1c:	20006868 	.word	0x20006868

0800bd20 <_close_r>:
 800bd20:	b538      	push	{r3, r4, r5, lr}
 800bd22:	4d06      	ldr	r5, [pc, #24]	; (800bd3c <_close_r+0x1c>)
 800bd24:	2300      	movs	r3, #0
 800bd26:	4604      	mov	r4, r0
 800bd28:	4608      	mov	r0, r1
 800bd2a:	602b      	str	r3, [r5, #0]
 800bd2c:	f7f8 ffad 	bl	8004c8a <_close>
 800bd30:	1c43      	adds	r3, r0, #1
 800bd32:	d102      	bne.n	800bd3a <_close_r+0x1a>
 800bd34:	682b      	ldr	r3, [r5, #0]
 800bd36:	b103      	cbz	r3, 800bd3a <_close_r+0x1a>
 800bd38:	6023      	str	r3, [r4, #0]
 800bd3a:	bd38      	pop	{r3, r4, r5, pc}
 800bd3c:	20006868 	.word	0x20006868

0800bd40 <quorem>:
 800bd40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	6903      	ldr	r3, [r0, #16]
 800bd46:	690c      	ldr	r4, [r1, #16]
 800bd48:	42a3      	cmp	r3, r4
 800bd4a:	4607      	mov	r7, r0
 800bd4c:	f2c0 8081 	blt.w	800be52 <quorem+0x112>
 800bd50:	3c01      	subs	r4, #1
 800bd52:	f101 0814 	add.w	r8, r1, #20
 800bd56:	f100 0514 	add.w	r5, r0, #20
 800bd5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd5e:	9301      	str	r3, [sp, #4]
 800bd60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bd70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd74:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd78:	d331      	bcc.n	800bdde <quorem+0x9e>
 800bd7a:	f04f 0e00 	mov.w	lr, #0
 800bd7e:	4640      	mov	r0, r8
 800bd80:	46ac      	mov	ip, r5
 800bd82:	46f2      	mov	sl, lr
 800bd84:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd88:	b293      	uxth	r3, r2
 800bd8a:	fb06 e303 	mla	r3, r6, r3, lr
 800bd8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	ebaa 0303 	sub.w	r3, sl, r3
 800bd98:	f8dc a000 	ldr.w	sl, [ip]
 800bd9c:	0c12      	lsrs	r2, r2, #16
 800bd9e:	fa13 f38a 	uxtah	r3, r3, sl
 800bda2:	fb06 e202 	mla	r2, r6, r2, lr
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	9b00      	ldr	r3, [sp, #0]
 800bdaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bdae:	b292      	uxth	r2, r2
 800bdb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bdb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bdb8:	f8bd 3000 	ldrh.w	r3, [sp]
 800bdbc:	4581      	cmp	r9, r0
 800bdbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdc2:	f84c 3b04 	str.w	r3, [ip], #4
 800bdc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bdca:	d2db      	bcs.n	800bd84 <quorem+0x44>
 800bdcc:	f855 300b 	ldr.w	r3, [r5, fp]
 800bdd0:	b92b      	cbnz	r3, 800bdde <quorem+0x9e>
 800bdd2:	9b01      	ldr	r3, [sp, #4]
 800bdd4:	3b04      	subs	r3, #4
 800bdd6:	429d      	cmp	r5, r3
 800bdd8:	461a      	mov	r2, r3
 800bdda:	d32e      	bcc.n	800be3a <quorem+0xfa>
 800bddc:	613c      	str	r4, [r7, #16]
 800bdde:	4638      	mov	r0, r7
 800bde0:	f001 f8c8 	bl	800cf74 <__mcmp>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	db24      	blt.n	800be32 <quorem+0xf2>
 800bde8:	3601      	adds	r6, #1
 800bdea:	4628      	mov	r0, r5
 800bdec:	f04f 0c00 	mov.w	ip, #0
 800bdf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bdf4:	f8d0 e000 	ldr.w	lr, [r0]
 800bdf8:	b293      	uxth	r3, r2
 800bdfa:	ebac 0303 	sub.w	r3, ip, r3
 800bdfe:	0c12      	lsrs	r2, r2, #16
 800be00:	fa13 f38e 	uxtah	r3, r3, lr
 800be04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800be08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be12:	45c1      	cmp	r9, r8
 800be14:	f840 3b04 	str.w	r3, [r0], #4
 800be18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800be1c:	d2e8      	bcs.n	800bdf0 <quorem+0xb0>
 800be1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be26:	b922      	cbnz	r2, 800be32 <quorem+0xf2>
 800be28:	3b04      	subs	r3, #4
 800be2a:	429d      	cmp	r5, r3
 800be2c:	461a      	mov	r2, r3
 800be2e:	d30a      	bcc.n	800be46 <quorem+0x106>
 800be30:	613c      	str	r4, [r7, #16]
 800be32:	4630      	mov	r0, r6
 800be34:	b003      	add	sp, #12
 800be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be3a:	6812      	ldr	r2, [r2, #0]
 800be3c:	3b04      	subs	r3, #4
 800be3e:	2a00      	cmp	r2, #0
 800be40:	d1cc      	bne.n	800bddc <quorem+0x9c>
 800be42:	3c01      	subs	r4, #1
 800be44:	e7c7      	b.n	800bdd6 <quorem+0x96>
 800be46:	6812      	ldr	r2, [r2, #0]
 800be48:	3b04      	subs	r3, #4
 800be4a:	2a00      	cmp	r2, #0
 800be4c:	d1f0      	bne.n	800be30 <quorem+0xf0>
 800be4e:	3c01      	subs	r4, #1
 800be50:	e7eb      	b.n	800be2a <quorem+0xea>
 800be52:	2000      	movs	r0, #0
 800be54:	e7ee      	b.n	800be34 <quorem+0xf4>
	...

0800be58 <_dtoa_r>:
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	ed2d 8b04 	vpush	{d8-d9}
 800be60:	ec57 6b10 	vmov	r6, r7, d0
 800be64:	b093      	sub	sp, #76	; 0x4c
 800be66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800be6c:	9106      	str	r1, [sp, #24]
 800be6e:	ee10 aa10 	vmov	sl, s0
 800be72:	4604      	mov	r4, r0
 800be74:	9209      	str	r2, [sp, #36]	; 0x24
 800be76:	930c      	str	r3, [sp, #48]	; 0x30
 800be78:	46bb      	mov	fp, r7
 800be7a:	b975      	cbnz	r5, 800be9a <_dtoa_r+0x42>
 800be7c:	2010      	movs	r0, #16
 800be7e:	f000 fdef 	bl	800ca60 <malloc>
 800be82:	4602      	mov	r2, r0
 800be84:	6260      	str	r0, [r4, #36]	; 0x24
 800be86:	b920      	cbnz	r0, 800be92 <_dtoa_r+0x3a>
 800be88:	4ba7      	ldr	r3, [pc, #668]	; (800c128 <_dtoa_r+0x2d0>)
 800be8a:	21ea      	movs	r1, #234	; 0xea
 800be8c:	48a7      	ldr	r0, [pc, #668]	; (800c12c <_dtoa_r+0x2d4>)
 800be8e:	f002 f875 	bl	800df7c <__assert_func>
 800be92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be96:	6005      	str	r5, [r0, #0]
 800be98:	60c5      	str	r5, [r0, #12]
 800be9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be9c:	6819      	ldr	r1, [r3, #0]
 800be9e:	b151      	cbz	r1, 800beb6 <_dtoa_r+0x5e>
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	604a      	str	r2, [r1, #4]
 800bea4:	2301      	movs	r3, #1
 800bea6:	4093      	lsls	r3, r2
 800bea8:	608b      	str	r3, [r1, #8]
 800beaa:	4620      	mov	r0, r4
 800beac:	f000 fe20 	bl	800caf0 <_Bfree>
 800beb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beb2:	2200      	movs	r2, #0
 800beb4:	601a      	str	r2, [r3, #0]
 800beb6:	1e3b      	subs	r3, r7, #0
 800beb8:	bfaa      	itet	ge
 800beba:	2300      	movge	r3, #0
 800bebc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bec0:	f8c8 3000 	strge.w	r3, [r8]
 800bec4:	4b9a      	ldr	r3, [pc, #616]	; (800c130 <_dtoa_r+0x2d8>)
 800bec6:	bfbc      	itt	lt
 800bec8:	2201      	movlt	r2, #1
 800beca:	f8c8 2000 	strlt.w	r2, [r8]
 800bece:	ea33 030b 	bics.w	r3, r3, fp
 800bed2:	d11b      	bne.n	800bf0c <_dtoa_r+0xb4>
 800bed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bed6:	f242 730f 	movw	r3, #9999	; 0x270f
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bee0:	4333      	orrs	r3, r6
 800bee2:	f000 8592 	beq.w	800ca0a <_dtoa_r+0xbb2>
 800bee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bee8:	b963      	cbnz	r3, 800bf04 <_dtoa_r+0xac>
 800beea:	4b92      	ldr	r3, [pc, #584]	; (800c134 <_dtoa_r+0x2dc>)
 800beec:	e022      	b.n	800bf34 <_dtoa_r+0xdc>
 800beee:	4b92      	ldr	r3, [pc, #584]	; (800c138 <_dtoa_r+0x2e0>)
 800bef0:	9301      	str	r3, [sp, #4]
 800bef2:	3308      	adds	r3, #8
 800bef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	9801      	ldr	r0, [sp, #4]
 800befa:	b013      	add	sp, #76	; 0x4c
 800befc:	ecbd 8b04 	vpop	{d8-d9}
 800bf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf04:	4b8b      	ldr	r3, [pc, #556]	; (800c134 <_dtoa_r+0x2dc>)
 800bf06:	9301      	str	r3, [sp, #4]
 800bf08:	3303      	adds	r3, #3
 800bf0a:	e7f3      	b.n	800bef4 <_dtoa_r+0x9c>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4650      	mov	r0, sl
 800bf12:	4659      	mov	r1, fp
 800bf14:	f7f4 fdf0 	bl	8000af8 <__aeabi_dcmpeq>
 800bf18:	ec4b ab19 	vmov	d9, sl, fp
 800bf1c:	4680      	mov	r8, r0
 800bf1e:	b158      	cbz	r0, 800bf38 <_dtoa_r+0xe0>
 800bf20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf22:	2301      	movs	r3, #1
 800bf24:	6013      	str	r3, [r2, #0]
 800bf26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 856b 	beq.w	800ca04 <_dtoa_r+0xbac>
 800bf2e:	4883      	ldr	r0, [pc, #524]	; (800c13c <_dtoa_r+0x2e4>)
 800bf30:	6018      	str	r0, [r3, #0]
 800bf32:	1e43      	subs	r3, r0, #1
 800bf34:	9301      	str	r3, [sp, #4]
 800bf36:	e7df      	b.n	800bef8 <_dtoa_r+0xa0>
 800bf38:	ec4b ab10 	vmov	d0, sl, fp
 800bf3c:	aa10      	add	r2, sp, #64	; 0x40
 800bf3e:	a911      	add	r1, sp, #68	; 0x44
 800bf40:	4620      	mov	r0, r4
 800bf42:	f001 f8bd 	bl	800d0c0 <__d2b>
 800bf46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bf4a:	ee08 0a10 	vmov	s16, r0
 800bf4e:	2d00      	cmp	r5, #0
 800bf50:	f000 8084 	beq.w	800c05c <_dtoa_r+0x204>
 800bf54:	ee19 3a90 	vmov	r3, s19
 800bf58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bf60:	4656      	mov	r6, sl
 800bf62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bf66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bf6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bf6e:	4b74      	ldr	r3, [pc, #464]	; (800c140 <_dtoa_r+0x2e8>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	4630      	mov	r0, r6
 800bf74:	4639      	mov	r1, r7
 800bf76:	f7f4 f99f 	bl	80002b8 <__aeabi_dsub>
 800bf7a:	a365      	add	r3, pc, #404	; (adr r3, 800c110 <_dtoa_r+0x2b8>)
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	f7f4 fb52 	bl	8000628 <__aeabi_dmul>
 800bf84:	a364      	add	r3, pc, #400	; (adr r3, 800c118 <_dtoa_r+0x2c0>)
 800bf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8a:	f7f4 f997 	bl	80002bc <__adddf3>
 800bf8e:	4606      	mov	r6, r0
 800bf90:	4628      	mov	r0, r5
 800bf92:	460f      	mov	r7, r1
 800bf94:	f7f4 fade 	bl	8000554 <__aeabi_i2d>
 800bf98:	a361      	add	r3, pc, #388	; (adr r3, 800c120 <_dtoa_r+0x2c8>)
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	f7f4 fb43 	bl	8000628 <__aeabi_dmul>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	4639      	mov	r1, r7
 800bfaa:	f7f4 f987 	bl	80002bc <__adddf3>
 800bfae:	4606      	mov	r6, r0
 800bfb0:	460f      	mov	r7, r1
 800bfb2:	f7f4 fde9 	bl	8000b88 <__aeabi_d2iz>
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	9000      	str	r0, [sp, #0]
 800bfba:	2300      	movs	r3, #0
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	4639      	mov	r1, r7
 800bfc0:	f7f4 fda4 	bl	8000b0c <__aeabi_dcmplt>
 800bfc4:	b150      	cbz	r0, 800bfdc <_dtoa_r+0x184>
 800bfc6:	9800      	ldr	r0, [sp, #0]
 800bfc8:	f7f4 fac4 	bl	8000554 <__aeabi_i2d>
 800bfcc:	4632      	mov	r2, r6
 800bfce:	463b      	mov	r3, r7
 800bfd0:	f7f4 fd92 	bl	8000af8 <__aeabi_dcmpeq>
 800bfd4:	b910      	cbnz	r0, 800bfdc <_dtoa_r+0x184>
 800bfd6:	9b00      	ldr	r3, [sp, #0]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	9b00      	ldr	r3, [sp, #0]
 800bfde:	2b16      	cmp	r3, #22
 800bfe0:	d85a      	bhi.n	800c098 <_dtoa_r+0x240>
 800bfe2:	9a00      	ldr	r2, [sp, #0]
 800bfe4:	4b57      	ldr	r3, [pc, #348]	; (800c144 <_dtoa_r+0x2ec>)
 800bfe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	ec51 0b19 	vmov	r0, r1, d9
 800bff2:	f7f4 fd8b 	bl	8000b0c <__aeabi_dcmplt>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d050      	beq.n	800c09c <_dtoa_r+0x244>
 800bffa:	9b00      	ldr	r3, [sp, #0]
 800bffc:	3b01      	subs	r3, #1
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	2300      	movs	r3, #0
 800c002:	930b      	str	r3, [sp, #44]	; 0x2c
 800c004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c006:	1b5d      	subs	r5, r3, r5
 800c008:	1e6b      	subs	r3, r5, #1
 800c00a:	9305      	str	r3, [sp, #20]
 800c00c:	bf45      	ittet	mi
 800c00e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c012:	9304      	strmi	r3, [sp, #16]
 800c014:	2300      	movpl	r3, #0
 800c016:	2300      	movmi	r3, #0
 800c018:	bf4c      	ite	mi
 800c01a:	9305      	strmi	r3, [sp, #20]
 800c01c:	9304      	strpl	r3, [sp, #16]
 800c01e:	9b00      	ldr	r3, [sp, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	db3d      	blt.n	800c0a0 <_dtoa_r+0x248>
 800c024:	9b05      	ldr	r3, [sp, #20]
 800c026:	9a00      	ldr	r2, [sp, #0]
 800c028:	920a      	str	r2, [sp, #40]	; 0x28
 800c02a:	4413      	add	r3, r2
 800c02c:	9305      	str	r3, [sp, #20]
 800c02e:	2300      	movs	r3, #0
 800c030:	9307      	str	r3, [sp, #28]
 800c032:	9b06      	ldr	r3, [sp, #24]
 800c034:	2b09      	cmp	r3, #9
 800c036:	f200 8089 	bhi.w	800c14c <_dtoa_r+0x2f4>
 800c03a:	2b05      	cmp	r3, #5
 800c03c:	bfc4      	itt	gt
 800c03e:	3b04      	subgt	r3, #4
 800c040:	9306      	strgt	r3, [sp, #24]
 800c042:	9b06      	ldr	r3, [sp, #24]
 800c044:	f1a3 0302 	sub.w	r3, r3, #2
 800c048:	bfcc      	ite	gt
 800c04a:	2500      	movgt	r5, #0
 800c04c:	2501      	movle	r5, #1
 800c04e:	2b03      	cmp	r3, #3
 800c050:	f200 8087 	bhi.w	800c162 <_dtoa_r+0x30a>
 800c054:	e8df f003 	tbb	[pc, r3]
 800c058:	59383a2d 	.word	0x59383a2d
 800c05c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c060:	441d      	add	r5, r3
 800c062:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c066:	2b20      	cmp	r3, #32
 800c068:	bfc1      	itttt	gt
 800c06a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c06e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c072:	fa0b f303 	lslgt.w	r3, fp, r3
 800c076:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c07a:	bfda      	itte	le
 800c07c:	f1c3 0320 	rsble	r3, r3, #32
 800c080:	fa06 f003 	lslle.w	r0, r6, r3
 800c084:	4318      	orrgt	r0, r3
 800c086:	f7f4 fa55 	bl	8000534 <__aeabi_ui2d>
 800c08a:	2301      	movs	r3, #1
 800c08c:	4606      	mov	r6, r0
 800c08e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c092:	3d01      	subs	r5, #1
 800c094:	930e      	str	r3, [sp, #56]	; 0x38
 800c096:	e76a      	b.n	800bf6e <_dtoa_r+0x116>
 800c098:	2301      	movs	r3, #1
 800c09a:	e7b2      	b.n	800c002 <_dtoa_r+0x1aa>
 800c09c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c09e:	e7b1      	b.n	800c004 <_dtoa_r+0x1ac>
 800c0a0:	9b04      	ldr	r3, [sp, #16]
 800c0a2:	9a00      	ldr	r2, [sp, #0]
 800c0a4:	1a9b      	subs	r3, r3, r2
 800c0a6:	9304      	str	r3, [sp, #16]
 800c0a8:	4253      	negs	r3, r2
 800c0aa:	9307      	str	r3, [sp, #28]
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c0b0:	e7bf      	b.n	800c032 <_dtoa_r+0x1da>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	9308      	str	r3, [sp, #32]
 800c0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	dc55      	bgt.n	800c168 <_dtoa_r+0x310>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c0c6:	e00c      	b.n	800c0e2 <_dtoa_r+0x28a>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e7f3      	b.n	800c0b4 <_dtoa_r+0x25c>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0d0:	9308      	str	r3, [sp, #32]
 800c0d2:	9b00      	ldr	r3, [sp, #0]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	9302      	str	r3, [sp, #8]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	9303      	str	r3, [sp, #12]
 800c0de:	bfb8      	it	lt
 800c0e0:	2301      	movlt	r3, #1
 800c0e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	6042      	str	r2, [r0, #4]
 800c0e8:	2204      	movs	r2, #4
 800c0ea:	f102 0614 	add.w	r6, r2, #20
 800c0ee:	429e      	cmp	r6, r3
 800c0f0:	6841      	ldr	r1, [r0, #4]
 800c0f2:	d93d      	bls.n	800c170 <_dtoa_r+0x318>
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f000 fcbb 	bl	800ca70 <_Balloc>
 800c0fa:	9001      	str	r0, [sp, #4]
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d13b      	bne.n	800c178 <_dtoa_r+0x320>
 800c100:	4b11      	ldr	r3, [pc, #68]	; (800c148 <_dtoa_r+0x2f0>)
 800c102:	4602      	mov	r2, r0
 800c104:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c108:	e6c0      	b.n	800be8c <_dtoa_r+0x34>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e7df      	b.n	800c0ce <_dtoa_r+0x276>
 800c10e:	bf00      	nop
 800c110:	636f4361 	.word	0x636f4361
 800c114:	3fd287a7 	.word	0x3fd287a7
 800c118:	8b60c8b3 	.word	0x8b60c8b3
 800c11c:	3fc68a28 	.word	0x3fc68a28
 800c120:	509f79fb 	.word	0x509f79fb
 800c124:	3fd34413 	.word	0x3fd34413
 800c128:	0800fbac 	.word	0x0800fbac
 800c12c:	0800fbc3 	.word	0x0800fbc3
 800c130:	7ff00000 	.word	0x7ff00000
 800c134:	0800fba8 	.word	0x0800fba8
 800c138:	0800fb9f 	.word	0x0800fb9f
 800c13c:	0800fda2 	.word	0x0800fda2
 800c140:	3ff80000 	.word	0x3ff80000
 800c144:	0800fcb8 	.word	0x0800fcb8
 800c148:	0800fc1e 	.word	0x0800fc1e
 800c14c:	2501      	movs	r5, #1
 800c14e:	2300      	movs	r3, #0
 800c150:	9306      	str	r3, [sp, #24]
 800c152:	9508      	str	r5, [sp, #32]
 800c154:	f04f 33ff 	mov.w	r3, #4294967295
 800c158:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c15c:	2200      	movs	r2, #0
 800c15e:	2312      	movs	r3, #18
 800c160:	e7b0      	b.n	800c0c4 <_dtoa_r+0x26c>
 800c162:	2301      	movs	r3, #1
 800c164:	9308      	str	r3, [sp, #32]
 800c166:	e7f5      	b.n	800c154 <_dtoa_r+0x2fc>
 800c168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c16a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c16e:	e7b8      	b.n	800c0e2 <_dtoa_r+0x28a>
 800c170:	3101      	adds	r1, #1
 800c172:	6041      	str	r1, [r0, #4]
 800c174:	0052      	lsls	r2, r2, #1
 800c176:	e7b8      	b.n	800c0ea <_dtoa_r+0x292>
 800c178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c17a:	9a01      	ldr	r2, [sp, #4]
 800c17c:	601a      	str	r2, [r3, #0]
 800c17e:	9b03      	ldr	r3, [sp, #12]
 800c180:	2b0e      	cmp	r3, #14
 800c182:	f200 809d 	bhi.w	800c2c0 <_dtoa_r+0x468>
 800c186:	2d00      	cmp	r5, #0
 800c188:	f000 809a 	beq.w	800c2c0 <_dtoa_r+0x468>
 800c18c:	9b00      	ldr	r3, [sp, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	dd32      	ble.n	800c1f8 <_dtoa_r+0x3a0>
 800c192:	4ab7      	ldr	r2, [pc, #732]	; (800c470 <_dtoa_r+0x618>)
 800c194:	f003 030f 	and.w	r3, r3, #15
 800c198:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c19c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1a0:	9b00      	ldr	r3, [sp, #0]
 800c1a2:	05d8      	lsls	r0, r3, #23
 800c1a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c1a8:	d516      	bpl.n	800c1d8 <_dtoa_r+0x380>
 800c1aa:	4bb2      	ldr	r3, [pc, #712]	; (800c474 <_dtoa_r+0x61c>)
 800c1ac:	ec51 0b19 	vmov	r0, r1, d9
 800c1b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1b4:	f7f4 fb62 	bl	800087c <__aeabi_ddiv>
 800c1b8:	f007 070f 	and.w	r7, r7, #15
 800c1bc:	4682      	mov	sl, r0
 800c1be:	468b      	mov	fp, r1
 800c1c0:	2503      	movs	r5, #3
 800c1c2:	4eac      	ldr	r6, [pc, #688]	; (800c474 <_dtoa_r+0x61c>)
 800c1c4:	b957      	cbnz	r7, 800c1dc <_dtoa_r+0x384>
 800c1c6:	4642      	mov	r2, r8
 800c1c8:	464b      	mov	r3, r9
 800c1ca:	4650      	mov	r0, sl
 800c1cc:	4659      	mov	r1, fp
 800c1ce:	f7f4 fb55 	bl	800087c <__aeabi_ddiv>
 800c1d2:	4682      	mov	sl, r0
 800c1d4:	468b      	mov	fp, r1
 800c1d6:	e028      	b.n	800c22a <_dtoa_r+0x3d2>
 800c1d8:	2502      	movs	r5, #2
 800c1da:	e7f2      	b.n	800c1c2 <_dtoa_r+0x36a>
 800c1dc:	07f9      	lsls	r1, r7, #31
 800c1de:	d508      	bpl.n	800c1f2 <_dtoa_r+0x39a>
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1e8:	f7f4 fa1e 	bl	8000628 <__aeabi_dmul>
 800c1ec:	3501      	adds	r5, #1
 800c1ee:	4680      	mov	r8, r0
 800c1f0:	4689      	mov	r9, r1
 800c1f2:	107f      	asrs	r7, r7, #1
 800c1f4:	3608      	adds	r6, #8
 800c1f6:	e7e5      	b.n	800c1c4 <_dtoa_r+0x36c>
 800c1f8:	f000 809b 	beq.w	800c332 <_dtoa_r+0x4da>
 800c1fc:	9b00      	ldr	r3, [sp, #0]
 800c1fe:	4f9d      	ldr	r7, [pc, #628]	; (800c474 <_dtoa_r+0x61c>)
 800c200:	425e      	negs	r6, r3
 800c202:	4b9b      	ldr	r3, [pc, #620]	; (800c470 <_dtoa_r+0x618>)
 800c204:	f006 020f 	and.w	r2, r6, #15
 800c208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	ec51 0b19 	vmov	r0, r1, d9
 800c214:	f7f4 fa08 	bl	8000628 <__aeabi_dmul>
 800c218:	1136      	asrs	r6, r6, #4
 800c21a:	4682      	mov	sl, r0
 800c21c:	468b      	mov	fp, r1
 800c21e:	2300      	movs	r3, #0
 800c220:	2502      	movs	r5, #2
 800c222:	2e00      	cmp	r6, #0
 800c224:	d17a      	bne.n	800c31c <_dtoa_r+0x4c4>
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1d3      	bne.n	800c1d2 <_dtoa_r+0x37a>
 800c22a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 8082 	beq.w	800c336 <_dtoa_r+0x4de>
 800c232:	4b91      	ldr	r3, [pc, #580]	; (800c478 <_dtoa_r+0x620>)
 800c234:	2200      	movs	r2, #0
 800c236:	4650      	mov	r0, sl
 800c238:	4659      	mov	r1, fp
 800c23a:	f7f4 fc67 	bl	8000b0c <__aeabi_dcmplt>
 800c23e:	2800      	cmp	r0, #0
 800c240:	d079      	beq.n	800c336 <_dtoa_r+0x4de>
 800c242:	9b03      	ldr	r3, [sp, #12]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d076      	beq.n	800c336 <_dtoa_r+0x4de>
 800c248:	9b02      	ldr	r3, [sp, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	dd36      	ble.n	800c2bc <_dtoa_r+0x464>
 800c24e:	9b00      	ldr	r3, [sp, #0]
 800c250:	4650      	mov	r0, sl
 800c252:	4659      	mov	r1, fp
 800c254:	1e5f      	subs	r7, r3, #1
 800c256:	2200      	movs	r2, #0
 800c258:	4b88      	ldr	r3, [pc, #544]	; (800c47c <_dtoa_r+0x624>)
 800c25a:	f7f4 f9e5 	bl	8000628 <__aeabi_dmul>
 800c25e:	9e02      	ldr	r6, [sp, #8]
 800c260:	4682      	mov	sl, r0
 800c262:	468b      	mov	fp, r1
 800c264:	3501      	adds	r5, #1
 800c266:	4628      	mov	r0, r5
 800c268:	f7f4 f974 	bl	8000554 <__aeabi_i2d>
 800c26c:	4652      	mov	r2, sl
 800c26e:	465b      	mov	r3, fp
 800c270:	f7f4 f9da 	bl	8000628 <__aeabi_dmul>
 800c274:	4b82      	ldr	r3, [pc, #520]	; (800c480 <_dtoa_r+0x628>)
 800c276:	2200      	movs	r2, #0
 800c278:	f7f4 f820 	bl	80002bc <__adddf3>
 800c27c:	46d0      	mov	r8, sl
 800c27e:	46d9      	mov	r9, fp
 800c280:	4682      	mov	sl, r0
 800c282:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c286:	2e00      	cmp	r6, #0
 800c288:	d158      	bne.n	800c33c <_dtoa_r+0x4e4>
 800c28a:	4b7e      	ldr	r3, [pc, #504]	; (800c484 <_dtoa_r+0x62c>)
 800c28c:	2200      	movs	r2, #0
 800c28e:	4640      	mov	r0, r8
 800c290:	4649      	mov	r1, r9
 800c292:	f7f4 f811 	bl	80002b8 <__aeabi_dsub>
 800c296:	4652      	mov	r2, sl
 800c298:	465b      	mov	r3, fp
 800c29a:	4680      	mov	r8, r0
 800c29c:	4689      	mov	r9, r1
 800c29e:	f7f4 fc53 	bl	8000b48 <__aeabi_dcmpgt>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	f040 8295 	bne.w	800c7d2 <_dtoa_r+0x97a>
 800c2a8:	4652      	mov	r2, sl
 800c2aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	f7f4 fc2b 	bl	8000b0c <__aeabi_dcmplt>
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f040 8289 	bne.w	800c7ce <_dtoa_r+0x976>
 800c2bc:	ec5b ab19 	vmov	sl, fp, d9
 800c2c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f2c0 8148 	blt.w	800c558 <_dtoa_r+0x700>
 800c2c8:	9a00      	ldr	r2, [sp, #0]
 800c2ca:	2a0e      	cmp	r2, #14
 800c2cc:	f300 8144 	bgt.w	800c558 <_dtoa_r+0x700>
 800c2d0:	4b67      	ldr	r3, [pc, #412]	; (800c470 <_dtoa_r+0x618>)
 800c2d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f280 80d5 	bge.w	800c48c <_dtoa_r+0x634>
 800c2e2:	9b03      	ldr	r3, [sp, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f300 80d1 	bgt.w	800c48c <_dtoa_r+0x634>
 800c2ea:	f040 826f 	bne.w	800c7cc <_dtoa_r+0x974>
 800c2ee:	4b65      	ldr	r3, [pc, #404]	; (800c484 <_dtoa_r+0x62c>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f4 f997 	bl	8000628 <__aeabi_dmul>
 800c2fa:	4652      	mov	r2, sl
 800c2fc:	465b      	mov	r3, fp
 800c2fe:	f7f4 fc19 	bl	8000b34 <__aeabi_dcmpge>
 800c302:	9e03      	ldr	r6, [sp, #12]
 800c304:	4637      	mov	r7, r6
 800c306:	2800      	cmp	r0, #0
 800c308:	f040 8245 	bne.w	800c796 <_dtoa_r+0x93e>
 800c30c:	9d01      	ldr	r5, [sp, #4]
 800c30e:	2331      	movs	r3, #49	; 0x31
 800c310:	f805 3b01 	strb.w	r3, [r5], #1
 800c314:	9b00      	ldr	r3, [sp, #0]
 800c316:	3301      	adds	r3, #1
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	e240      	b.n	800c79e <_dtoa_r+0x946>
 800c31c:	07f2      	lsls	r2, r6, #31
 800c31e:	d505      	bpl.n	800c32c <_dtoa_r+0x4d4>
 800c320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c324:	f7f4 f980 	bl	8000628 <__aeabi_dmul>
 800c328:	3501      	adds	r5, #1
 800c32a:	2301      	movs	r3, #1
 800c32c:	1076      	asrs	r6, r6, #1
 800c32e:	3708      	adds	r7, #8
 800c330:	e777      	b.n	800c222 <_dtoa_r+0x3ca>
 800c332:	2502      	movs	r5, #2
 800c334:	e779      	b.n	800c22a <_dtoa_r+0x3d2>
 800c336:	9f00      	ldr	r7, [sp, #0]
 800c338:	9e03      	ldr	r6, [sp, #12]
 800c33a:	e794      	b.n	800c266 <_dtoa_r+0x40e>
 800c33c:	9901      	ldr	r1, [sp, #4]
 800c33e:	4b4c      	ldr	r3, [pc, #304]	; (800c470 <_dtoa_r+0x618>)
 800c340:	4431      	add	r1, r6
 800c342:	910d      	str	r1, [sp, #52]	; 0x34
 800c344:	9908      	ldr	r1, [sp, #32]
 800c346:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c34a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c34e:	2900      	cmp	r1, #0
 800c350:	d043      	beq.n	800c3da <_dtoa_r+0x582>
 800c352:	494d      	ldr	r1, [pc, #308]	; (800c488 <_dtoa_r+0x630>)
 800c354:	2000      	movs	r0, #0
 800c356:	f7f4 fa91 	bl	800087c <__aeabi_ddiv>
 800c35a:	4652      	mov	r2, sl
 800c35c:	465b      	mov	r3, fp
 800c35e:	f7f3 ffab 	bl	80002b8 <__aeabi_dsub>
 800c362:	9d01      	ldr	r5, [sp, #4]
 800c364:	4682      	mov	sl, r0
 800c366:	468b      	mov	fp, r1
 800c368:	4649      	mov	r1, r9
 800c36a:	4640      	mov	r0, r8
 800c36c:	f7f4 fc0c 	bl	8000b88 <__aeabi_d2iz>
 800c370:	4606      	mov	r6, r0
 800c372:	f7f4 f8ef 	bl	8000554 <__aeabi_i2d>
 800c376:	4602      	mov	r2, r0
 800c378:	460b      	mov	r3, r1
 800c37a:	4640      	mov	r0, r8
 800c37c:	4649      	mov	r1, r9
 800c37e:	f7f3 ff9b 	bl	80002b8 <__aeabi_dsub>
 800c382:	3630      	adds	r6, #48	; 0x30
 800c384:	f805 6b01 	strb.w	r6, [r5], #1
 800c388:	4652      	mov	r2, sl
 800c38a:	465b      	mov	r3, fp
 800c38c:	4680      	mov	r8, r0
 800c38e:	4689      	mov	r9, r1
 800c390:	f7f4 fbbc 	bl	8000b0c <__aeabi_dcmplt>
 800c394:	2800      	cmp	r0, #0
 800c396:	d163      	bne.n	800c460 <_dtoa_r+0x608>
 800c398:	4642      	mov	r2, r8
 800c39a:	464b      	mov	r3, r9
 800c39c:	4936      	ldr	r1, [pc, #216]	; (800c478 <_dtoa_r+0x620>)
 800c39e:	2000      	movs	r0, #0
 800c3a0:	f7f3 ff8a 	bl	80002b8 <__aeabi_dsub>
 800c3a4:	4652      	mov	r2, sl
 800c3a6:	465b      	mov	r3, fp
 800c3a8:	f7f4 fbb0 	bl	8000b0c <__aeabi_dcmplt>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f040 80b5 	bne.w	800c51c <_dtoa_r+0x6c4>
 800c3b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3b4:	429d      	cmp	r5, r3
 800c3b6:	d081      	beq.n	800c2bc <_dtoa_r+0x464>
 800c3b8:	4b30      	ldr	r3, [pc, #192]	; (800c47c <_dtoa_r+0x624>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	4650      	mov	r0, sl
 800c3be:	4659      	mov	r1, fp
 800c3c0:	f7f4 f932 	bl	8000628 <__aeabi_dmul>
 800c3c4:	4b2d      	ldr	r3, [pc, #180]	; (800c47c <_dtoa_r+0x624>)
 800c3c6:	4682      	mov	sl, r0
 800c3c8:	468b      	mov	fp, r1
 800c3ca:	4640      	mov	r0, r8
 800c3cc:	4649      	mov	r1, r9
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f7f4 f92a 	bl	8000628 <__aeabi_dmul>
 800c3d4:	4680      	mov	r8, r0
 800c3d6:	4689      	mov	r9, r1
 800c3d8:	e7c6      	b.n	800c368 <_dtoa_r+0x510>
 800c3da:	4650      	mov	r0, sl
 800c3dc:	4659      	mov	r1, fp
 800c3de:	f7f4 f923 	bl	8000628 <__aeabi_dmul>
 800c3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3e4:	9d01      	ldr	r5, [sp, #4]
 800c3e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3e8:	4682      	mov	sl, r0
 800c3ea:	468b      	mov	fp, r1
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	4640      	mov	r0, r8
 800c3f0:	f7f4 fbca 	bl	8000b88 <__aeabi_d2iz>
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	f7f4 f8ad 	bl	8000554 <__aeabi_i2d>
 800c3fa:	3630      	adds	r6, #48	; 0x30
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	460b      	mov	r3, r1
 800c400:	4640      	mov	r0, r8
 800c402:	4649      	mov	r1, r9
 800c404:	f7f3 ff58 	bl	80002b8 <__aeabi_dsub>
 800c408:	f805 6b01 	strb.w	r6, [r5], #1
 800c40c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c40e:	429d      	cmp	r5, r3
 800c410:	4680      	mov	r8, r0
 800c412:	4689      	mov	r9, r1
 800c414:	f04f 0200 	mov.w	r2, #0
 800c418:	d124      	bne.n	800c464 <_dtoa_r+0x60c>
 800c41a:	4b1b      	ldr	r3, [pc, #108]	; (800c488 <_dtoa_r+0x630>)
 800c41c:	4650      	mov	r0, sl
 800c41e:	4659      	mov	r1, fp
 800c420:	f7f3 ff4c 	bl	80002bc <__adddf3>
 800c424:	4602      	mov	r2, r0
 800c426:	460b      	mov	r3, r1
 800c428:	4640      	mov	r0, r8
 800c42a:	4649      	mov	r1, r9
 800c42c:	f7f4 fb8c 	bl	8000b48 <__aeabi_dcmpgt>
 800c430:	2800      	cmp	r0, #0
 800c432:	d173      	bne.n	800c51c <_dtoa_r+0x6c4>
 800c434:	4652      	mov	r2, sl
 800c436:	465b      	mov	r3, fp
 800c438:	4913      	ldr	r1, [pc, #76]	; (800c488 <_dtoa_r+0x630>)
 800c43a:	2000      	movs	r0, #0
 800c43c:	f7f3 ff3c 	bl	80002b8 <__aeabi_dsub>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	4640      	mov	r0, r8
 800c446:	4649      	mov	r1, r9
 800c448:	f7f4 fb60 	bl	8000b0c <__aeabi_dcmplt>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	f43f af35 	beq.w	800c2bc <_dtoa_r+0x464>
 800c452:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c454:	1e6b      	subs	r3, r5, #1
 800c456:	930f      	str	r3, [sp, #60]	; 0x3c
 800c458:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c45c:	2b30      	cmp	r3, #48	; 0x30
 800c45e:	d0f8      	beq.n	800c452 <_dtoa_r+0x5fa>
 800c460:	9700      	str	r7, [sp, #0]
 800c462:	e049      	b.n	800c4f8 <_dtoa_r+0x6a0>
 800c464:	4b05      	ldr	r3, [pc, #20]	; (800c47c <_dtoa_r+0x624>)
 800c466:	f7f4 f8df 	bl	8000628 <__aeabi_dmul>
 800c46a:	4680      	mov	r8, r0
 800c46c:	4689      	mov	r9, r1
 800c46e:	e7bd      	b.n	800c3ec <_dtoa_r+0x594>
 800c470:	0800fcb8 	.word	0x0800fcb8
 800c474:	0800fc90 	.word	0x0800fc90
 800c478:	3ff00000 	.word	0x3ff00000
 800c47c:	40240000 	.word	0x40240000
 800c480:	401c0000 	.word	0x401c0000
 800c484:	40140000 	.word	0x40140000
 800c488:	3fe00000 	.word	0x3fe00000
 800c48c:	9d01      	ldr	r5, [sp, #4]
 800c48e:	4656      	mov	r6, sl
 800c490:	465f      	mov	r7, fp
 800c492:	4642      	mov	r2, r8
 800c494:	464b      	mov	r3, r9
 800c496:	4630      	mov	r0, r6
 800c498:	4639      	mov	r1, r7
 800c49a:	f7f4 f9ef 	bl	800087c <__aeabi_ddiv>
 800c49e:	f7f4 fb73 	bl	8000b88 <__aeabi_d2iz>
 800c4a2:	4682      	mov	sl, r0
 800c4a4:	f7f4 f856 	bl	8000554 <__aeabi_i2d>
 800c4a8:	4642      	mov	r2, r8
 800c4aa:	464b      	mov	r3, r9
 800c4ac:	f7f4 f8bc 	bl	8000628 <__aeabi_dmul>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c4bc:	f7f3 fefc 	bl	80002b8 <__aeabi_dsub>
 800c4c0:	f805 6b01 	strb.w	r6, [r5], #1
 800c4c4:	9e01      	ldr	r6, [sp, #4]
 800c4c6:	9f03      	ldr	r7, [sp, #12]
 800c4c8:	1bae      	subs	r6, r5, r6
 800c4ca:	42b7      	cmp	r7, r6
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	d135      	bne.n	800c53e <_dtoa_r+0x6e6>
 800c4d2:	f7f3 fef3 	bl	80002bc <__adddf3>
 800c4d6:	4642      	mov	r2, r8
 800c4d8:	464b      	mov	r3, r9
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460f      	mov	r7, r1
 800c4de:	f7f4 fb33 	bl	8000b48 <__aeabi_dcmpgt>
 800c4e2:	b9d0      	cbnz	r0, 800c51a <_dtoa_r+0x6c2>
 800c4e4:	4642      	mov	r2, r8
 800c4e6:	464b      	mov	r3, r9
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	4639      	mov	r1, r7
 800c4ec:	f7f4 fb04 	bl	8000af8 <__aeabi_dcmpeq>
 800c4f0:	b110      	cbz	r0, 800c4f8 <_dtoa_r+0x6a0>
 800c4f2:	f01a 0f01 	tst.w	sl, #1
 800c4f6:	d110      	bne.n	800c51a <_dtoa_r+0x6c2>
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	ee18 1a10 	vmov	r1, s16
 800c4fe:	f000 faf7 	bl	800caf0 <_Bfree>
 800c502:	2300      	movs	r3, #0
 800c504:	9800      	ldr	r0, [sp, #0]
 800c506:	702b      	strb	r3, [r5, #0]
 800c508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c50a:	3001      	adds	r0, #1
 800c50c:	6018      	str	r0, [r3, #0]
 800c50e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c510:	2b00      	cmp	r3, #0
 800c512:	f43f acf1 	beq.w	800bef8 <_dtoa_r+0xa0>
 800c516:	601d      	str	r5, [r3, #0]
 800c518:	e4ee      	b.n	800bef8 <_dtoa_r+0xa0>
 800c51a:	9f00      	ldr	r7, [sp, #0]
 800c51c:	462b      	mov	r3, r5
 800c51e:	461d      	mov	r5, r3
 800c520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c524:	2a39      	cmp	r2, #57	; 0x39
 800c526:	d106      	bne.n	800c536 <_dtoa_r+0x6de>
 800c528:	9a01      	ldr	r2, [sp, #4]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d1f7      	bne.n	800c51e <_dtoa_r+0x6c6>
 800c52e:	9901      	ldr	r1, [sp, #4]
 800c530:	2230      	movs	r2, #48	; 0x30
 800c532:	3701      	adds	r7, #1
 800c534:	700a      	strb	r2, [r1, #0]
 800c536:	781a      	ldrb	r2, [r3, #0]
 800c538:	3201      	adds	r2, #1
 800c53a:	701a      	strb	r2, [r3, #0]
 800c53c:	e790      	b.n	800c460 <_dtoa_r+0x608>
 800c53e:	4ba6      	ldr	r3, [pc, #664]	; (800c7d8 <_dtoa_r+0x980>)
 800c540:	2200      	movs	r2, #0
 800c542:	f7f4 f871 	bl	8000628 <__aeabi_dmul>
 800c546:	2200      	movs	r2, #0
 800c548:	2300      	movs	r3, #0
 800c54a:	4606      	mov	r6, r0
 800c54c:	460f      	mov	r7, r1
 800c54e:	f7f4 fad3 	bl	8000af8 <__aeabi_dcmpeq>
 800c552:	2800      	cmp	r0, #0
 800c554:	d09d      	beq.n	800c492 <_dtoa_r+0x63a>
 800c556:	e7cf      	b.n	800c4f8 <_dtoa_r+0x6a0>
 800c558:	9a08      	ldr	r2, [sp, #32]
 800c55a:	2a00      	cmp	r2, #0
 800c55c:	f000 80d7 	beq.w	800c70e <_dtoa_r+0x8b6>
 800c560:	9a06      	ldr	r2, [sp, #24]
 800c562:	2a01      	cmp	r2, #1
 800c564:	f300 80ba 	bgt.w	800c6dc <_dtoa_r+0x884>
 800c568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c56a:	2a00      	cmp	r2, #0
 800c56c:	f000 80b2 	beq.w	800c6d4 <_dtoa_r+0x87c>
 800c570:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c574:	9e07      	ldr	r6, [sp, #28]
 800c576:	9d04      	ldr	r5, [sp, #16]
 800c578:	9a04      	ldr	r2, [sp, #16]
 800c57a:	441a      	add	r2, r3
 800c57c:	9204      	str	r2, [sp, #16]
 800c57e:	9a05      	ldr	r2, [sp, #20]
 800c580:	2101      	movs	r1, #1
 800c582:	441a      	add	r2, r3
 800c584:	4620      	mov	r0, r4
 800c586:	9205      	str	r2, [sp, #20]
 800c588:	f000 fb6a 	bl	800cc60 <__i2b>
 800c58c:	4607      	mov	r7, r0
 800c58e:	2d00      	cmp	r5, #0
 800c590:	dd0c      	ble.n	800c5ac <_dtoa_r+0x754>
 800c592:	9b05      	ldr	r3, [sp, #20]
 800c594:	2b00      	cmp	r3, #0
 800c596:	dd09      	ble.n	800c5ac <_dtoa_r+0x754>
 800c598:	42ab      	cmp	r3, r5
 800c59a:	9a04      	ldr	r2, [sp, #16]
 800c59c:	bfa8      	it	ge
 800c59e:	462b      	movge	r3, r5
 800c5a0:	1ad2      	subs	r2, r2, r3
 800c5a2:	9204      	str	r2, [sp, #16]
 800c5a4:	9a05      	ldr	r2, [sp, #20]
 800c5a6:	1aed      	subs	r5, r5, r3
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	9305      	str	r3, [sp, #20]
 800c5ac:	9b07      	ldr	r3, [sp, #28]
 800c5ae:	b31b      	cbz	r3, 800c5f8 <_dtoa_r+0x7a0>
 800c5b0:	9b08      	ldr	r3, [sp, #32]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 80af 	beq.w	800c716 <_dtoa_r+0x8be>
 800c5b8:	2e00      	cmp	r6, #0
 800c5ba:	dd13      	ble.n	800c5e4 <_dtoa_r+0x78c>
 800c5bc:	4639      	mov	r1, r7
 800c5be:	4632      	mov	r2, r6
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 fc0d 	bl	800cde0 <__pow5mult>
 800c5c6:	ee18 2a10 	vmov	r2, s16
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	4607      	mov	r7, r0
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f000 fb5c 	bl	800cc8c <__multiply>
 800c5d4:	ee18 1a10 	vmov	r1, s16
 800c5d8:	4680      	mov	r8, r0
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f000 fa88 	bl	800caf0 <_Bfree>
 800c5e0:	ee08 8a10 	vmov	s16, r8
 800c5e4:	9b07      	ldr	r3, [sp, #28]
 800c5e6:	1b9a      	subs	r2, r3, r6
 800c5e8:	d006      	beq.n	800c5f8 <_dtoa_r+0x7a0>
 800c5ea:	ee18 1a10 	vmov	r1, s16
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f000 fbf6 	bl	800cde0 <__pow5mult>
 800c5f4:	ee08 0a10 	vmov	s16, r0
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f000 fb30 	bl	800cc60 <__i2b>
 800c600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c602:	2b00      	cmp	r3, #0
 800c604:	4606      	mov	r6, r0
 800c606:	f340 8088 	ble.w	800c71a <_dtoa_r+0x8c2>
 800c60a:	461a      	mov	r2, r3
 800c60c:	4601      	mov	r1, r0
 800c60e:	4620      	mov	r0, r4
 800c610:	f000 fbe6 	bl	800cde0 <__pow5mult>
 800c614:	9b06      	ldr	r3, [sp, #24]
 800c616:	2b01      	cmp	r3, #1
 800c618:	4606      	mov	r6, r0
 800c61a:	f340 8081 	ble.w	800c720 <_dtoa_r+0x8c8>
 800c61e:	f04f 0800 	mov.w	r8, #0
 800c622:	6933      	ldr	r3, [r6, #16]
 800c624:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c628:	6918      	ldr	r0, [r3, #16]
 800c62a:	f000 fac9 	bl	800cbc0 <__hi0bits>
 800c62e:	f1c0 0020 	rsb	r0, r0, #32
 800c632:	9b05      	ldr	r3, [sp, #20]
 800c634:	4418      	add	r0, r3
 800c636:	f010 001f 	ands.w	r0, r0, #31
 800c63a:	f000 8092 	beq.w	800c762 <_dtoa_r+0x90a>
 800c63e:	f1c0 0320 	rsb	r3, r0, #32
 800c642:	2b04      	cmp	r3, #4
 800c644:	f340 808a 	ble.w	800c75c <_dtoa_r+0x904>
 800c648:	f1c0 001c 	rsb	r0, r0, #28
 800c64c:	9b04      	ldr	r3, [sp, #16]
 800c64e:	4403      	add	r3, r0
 800c650:	9304      	str	r3, [sp, #16]
 800c652:	9b05      	ldr	r3, [sp, #20]
 800c654:	4403      	add	r3, r0
 800c656:	4405      	add	r5, r0
 800c658:	9305      	str	r3, [sp, #20]
 800c65a:	9b04      	ldr	r3, [sp, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	dd07      	ble.n	800c670 <_dtoa_r+0x818>
 800c660:	ee18 1a10 	vmov	r1, s16
 800c664:	461a      	mov	r2, r3
 800c666:	4620      	mov	r0, r4
 800c668:	f000 fc14 	bl	800ce94 <__lshift>
 800c66c:	ee08 0a10 	vmov	s16, r0
 800c670:	9b05      	ldr	r3, [sp, #20]
 800c672:	2b00      	cmp	r3, #0
 800c674:	dd05      	ble.n	800c682 <_dtoa_r+0x82a>
 800c676:	4631      	mov	r1, r6
 800c678:	461a      	mov	r2, r3
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 fc0a 	bl	800ce94 <__lshift>
 800c680:	4606      	mov	r6, r0
 800c682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c684:	2b00      	cmp	r3, #0
 800c686:	d06e      	beq.n	800c766 <_dtoa_r+0x90e>
 800c688:	ee18 0a10 	vmov	r0, s16
 800c68c:	4631      	mov	r1, r6
 800c68e:	f000 fc71 	bl	800cf74 <__mcmp>
 800c692:	2800      	cmp	r0, #0
 800c694:	da67      	bge.n	800c766 <_dtoa_r+0x90e>
 800c696:	9b00      	ldr	r3, [sp, #0]
 800c698:	3b01      	subs	r3, #1
 800c69a:	ee18 1a10 	vmov	r1, s16
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	220a      	movs	r2, #10
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 fa45 	bl	800cb34 <__multadd>
 800c6aa:	9b08      	ldr	r3, [sp, #32]
 800c6ac:	ee08 0a10 	vmov	s16, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f000 81b1 	beq.w	800ca18 <_dtoa_r+0xbc0>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	4639      	mov	r1, r7
 800c6ba:	220a      	movs	r2, #10
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f000 fa39 	bl	800cb34 <__multadd>
 800c6c2:	9b02      	ldr	r3, [sp, #8]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	4607      	mov	r7, r0
 800c6c8:	f300 808e 	bgt.w	800c7e8 <_dtoa_r+0x990>
 800c6cc:	9b06      	ldr	r3, [sp, #24]
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	dc51      	bgt.n	800c776 <_dtoa_r+0x91e>
 800c6d2:	e089      	b.n	800c7e8 <_dtoa_r+0x990>
 800c6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c6da:	e74b      	b.n	800c574 <_dtoa_r+0x71c>
 800c6dc:	9b03      	ldr	r3, [sp, #12]
 800c6de:	1e5e      	subs	r6, r3, #1
 800c6e0:	9b07      	ldr	r3, [sp, #28]
 800c6e2:	42b3      	cmp	r3, r6
 800c6e4:	bfbf      	itttt	lt
 800c6e6:	9b07      	ldrlt	r3, [sp, #28]
 800c6e8:	9607      	strlt	r6, [sp, #28]
 800c6ea:	1af2      	sublt	r2, r6, r3
 800c6ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c6ee:	bfb6      	itet	lt
 800c6f0:	189b      	addlt	r3, r3, r2
 800c6f2:	1b9e      	subge	r6, r3, r6
 800c6f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	bfb8      	it	lt
 800c6fa:	2600      	movlt	r6, #0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	bfb7      	itett	lt
 800c700:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c704:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c708:	1a9d      	sublt	r5, r3, r2
 800c70a:	2300      	movlt	r3, #0
 800c70c:	e734      	b.n	800c578 <_dtoa_r+0x720>
 800c70e:	9e07      	ldr	r6, [sp, #28]
 800c710:	9d04      	ldr	r5, [sp, #16]
 800c712:	9f08      	ldr	r7, [sp, #32]
 800c714:	e73b      	b.n	800c58e <_dtoa_r+0x736>
 800c716:	9a07      	ldr	r2, [sp, #28]
 800c718:	e767      	b.n	800c5ea <_dtoa_r+0x792>
 800c71a:	9b06      	ldr	r3, [sp, #24]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	dc18      	bgt.n	800c752 <_dtoa_r+0x8fa>
 800c720:	f1ba 0f00 	cmp.w	sl, #0
 800c724:	d115      	bne.n	800c752 <_dtoa_r+0x8fa>
 800c726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c72a:	b993      	cbnz	r3, 800c752 <_dtoa_r+0x8fa>
 800c72c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c730:	0d1b      	lsrs	r3, r3, #20
 800c732:	051b      	lsls	r3, r3, #20
 800c734:	b183      	cbz	r3, 800c758 <_dtoa_r+0x900>
 800c736:	9b04      	ldr	r3, [sp, #16]
 800c738:	3301      	adds	r3, #1
 800c73a:	9304      	str	r3, [sp, #16]
 800c73c:	9b05      	ldr	r3, [sp, #20]
 800c73e:	3301      	adds	r3, #1
 800c740:	9305      	str	r3, [sp, #20]
 800c742:	f04f 0801 	mov.w	r8, #1
 800c746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f47f af6a 	bne.w	800c622 <_dtoa_r+0x7ca>
 800c74e:	2001      	movs	r0, #1
 800c750:	e76f      	b.n	800c632 <_dtoa_r+0x7da>
 800c752:	f04f 0800 	mov.w	r8, #0
 800c756:	e7f6      	b.n	800c746 <_dtoa_r+0x8ee>
 800c758:	4698      	mov	r8, r3
 800c75a:	e7f4      	b.n	800c746 <_dtoa_r+0x8ee>
 800c75c:	f43f af7d 	beq.w	800c65a <_dtoa_r+0x802>
 800c760:	4618      	mov	r0, r3
 800c762:	301c      	adds	r0, #28
 800c764:	e772      	b.n	800c64c <_dtoa_r+0x7f4>
 800c766:	9b03      	ldr	r3, [sp, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	dc37      	bgt.n	800c7dc <_dtoa_r+0x984>
 800c76c:	9b06      	ldr	r3, [sp, #24]
 800c76e:	2b02      	cmp	r3, #2
 800c770:	dd34      	ble.n	800c7dc <_dtoa_r+0x984>
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	9302      	str	r3, [sp, #8]
 800c776:	9b02      	ldr	r3, [sp, #8]
 800c778:	b96b      	cbnz	r3, 800c796 <_dtoa_r+0x93e>
 800c77a:	4631      	mov	r1, r6
 800c77c:	2205      	movs	r2, #5
 800c77e:	4620      	mov	r0, r4
 800c780:	f000 f9d8 	bl	800cb34 <__multadd>
 800c784:	4601      	mov	r1, r0
 800c786:	4606      	mov	r6, r0
 800c788:	ee18 0a10 	vmov	r0, s16
 800c78c:	f000 fbf2 	bl	800cf74 <__mcmp>
 800c790:	2800      	cmp	r0, #0
 800c792:	f73f adbb 	bgt.w	800c30c <_dtoa_r+0x4b4>
 800c796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c798:	9d01      	ldr	r5, [sp, #4]
 800c79a:	43db      	mvns	r3, r3
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	f04f 0800 	mov.w	r8, #0
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f000 f9a3 	bl	800caf0 <_Bfree>
 800c7aa:	2f00      	cmp	r7, #0
 800c7ac:	f43f aea4 	beq.w	800c4f8 <_dtoa_r+0x6a0>
 800c7b0:	f1b8 0f00 	cmp.w	r8, #0
 800c7b4:	d005      	beq.n	800c7c2 <_dtoa_r+0x96a>
 800c7b6:	45b8      	cmp	r8, r7
 800c7b8:	d003      	beq.n	800c7c2 <_dtoa_r+0x96a>
 800c7ba:	4641      	mov	r1, r8
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f000 f997 	bl	800caf0 <_Bfree>
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f000 f993 	bl	800caf0 <_Bfree>
 800c7ca:	e695      	b.n	800c4f8 <_dtoa_r+0x6a0>
 800c7cc:	2600      	movs	r6, #0
 800c7ce:	4637      	mov	r7, r6
 800c7d0:	e7e1      	b.n	800c796 <_dtoa_r+0x93e>
 800c7d2:	9700      	str	r7, [sp, #0]
 800c7d4:	4637      	mov	r7, r6
 800c7d6:	e599      	b.n	800c30c <_dtoa_r+0x4b4>
 800c7d8:	40240000 	.word	0x40240000
 800c7dc:	9b08      	ldr	r3, [sp, #32]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f000 80ca 	beq.w	800c978 <_dtoa_r+0xb20>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	9302      	str	r3, [sp, #8]
 800c7e8:	2d00      	cmp	r5, #0
 800c7ea:	dd05      	ble.n	800c7f8 <_dtoa_r+0x9a0>
 800c7ec:	4639      	mov	r1, r7
 800c7ee:	462a      	mov	r2, r5
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f000 fb4f 	bl	800ce94 <__lshift>
 800c7f6:	4607      	mov	r7, r0
 800c7f8:	f1b8 0f00 	cmp.w	r8, #0
 800c7fc:	d05b      	beq.n	800c8b6 <_dtoa_r+0xa5e>
 800c7fe:	6879      	ldr	r1, [r7, #4]
 800c800:	4620      	mov	r0, r4
 800c802:	f000 f935 	bl	800ca70 <_Balloc>
 800c806:	4605      	mov	r5, r0
 800c808:	b928      	cbnz	r0, 800c816 <_dtoa_r+0x9be>
 800c80a:	4b87      	ldr	r3, [pc, #540]	; (800ca28 <_dtoa_r+0xbd0>)
 800c80c:	4602      	mov	r2, r0
 800c80e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c812:	f7ff bb3b 	b.w	800be8c <_dtoa_r+0x34>
 800c816:	693a      	ldr	r2, [r7, #16]
 800c818:	3202      	adds	r2, #2
 800c81a:	0092      	lsls	r2, r2, #2
 800c81c:	f107 010c 	add.w	r1, r7, #12
 800c820:	300c      	adds	r0, #12
 800c822:	f7fe fd59 	bl	800b2d8 <memcpy>
 800c826:	2201      	movs	r2, #1
 800c828:	4629      	mov	r1, r5
 800c82a:	4620      	mov	r0, r4
 800c82c:	f000 fb32 	bl	800ce94 <__lshift>
 800c830:	9b01      	ldr	r3, [sp, #4]
 800c832:	f103 0901 	add.w	r9, r3, #1
 800c836:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c83a:	4413      	add	r3, r2
 800c83c:	9305      	str	r3, [sp, #20]
 800c83e:	f00a 0301 	and.w	r3, sl, #1
 800c842:	46b8      	mov	r8, r7
 800c844:	9304      	str	r3, [sp, #16]
 800c846:	4607      	mov	r7, r0
 800c848:	4631      	mov	r1, r6
 800c84a:	ee18 0a10 	vmov	r0, s16
 800c84e:	f7ff fa77 	bl	800bd40 <quorem>
 800c852:	4641      	mov	r1, r8
 800c854:	9002      	str	r0, [sp, #8]
 800c856:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c85a:	ee18 0a10 	vmov	r0, s16
 800c85e:	f000 fb89 	bl	800cf74 <__mcmp>
 800c862:	463a      	mov	r2, r7
 800c864:	9003      	str	r0, [sp, #12]
 800c866:	4631      	mov	r1, r6
 800c868:	4620      	mov	r0, r4
 800c86a:	f000 fb9f 	bl	800cfac <__mdiff>
 800c86e:	68c2      	ldr	r2, [r0, #12]
 800c870:	f109 3bff 	add.w	fp, r9, #4294967295
 800c874:	4605      	mov	r5, r0
 800c876:	bb02      	cbnz	r2, 800c8ba <_dtoa_r+0xa62>
 800c878:	4601      	mov	r1, r0
 800c87a:	ee18 0a10 	vmov	r0, s16
 800c87e:	f000 fb79 	bl	800cf74 <__mcmp>
 800c882:	4602      	mov	r2, r0
 800c884:	4629      	mov	r1, r5
 800c886:	4620      	mov	r0, r4
 800c888:	9207      	str	r2, [sp, #28]
 800c88a:	f000 f931 	bl	800caf0 <_Bfree>
 800c88e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c892:	ea43 0102 	orr.w	r1, r3, r2
 800c896:	9b04      	ldr	r3, [sp, #16]
 800c898:	430b      	orrs	r3, r1
 800c89a:	464d      	mov	r5, r9
 800c89c:	d10f      	bne.n	800c8be <_dtoa_r+0xa66>
 800c89e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8a2:	d02a      	beq.n	800c8fa <_dtoa_r+0xaa2>
 800c8a4:	9b03      	ldr	r3, [sp, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	dd02      	ble.n	800c8b0 <_dtoa_r+0xa58>
 800c8aa:	9b02      	ldr	r3, [sp, #8]
 800c8ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c8b0:	f88b a000 	strb.w	sl, [fp]
 800c8b4:	e775      	b.n	800c7a2 <_dtoa_r+0x94a>
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	e7ba      	b.n	800c830 <_dtoa_r+0x9d8>
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	e7e2      	b.n	800c884 <_dtoa_r+0xa2c>
 800c8be:	9b03      	ldr	r3, [sp, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	db04      	blt.n	800c8ce <_dtoa_r+0xa76>
 800c8c4:	9906      	ldr	r1, [sp, #24]
 800c8c6:	430b      	orrs	r3, r1
 800c8c8:	9904      	ldr	r1, [sp, #16]
 800c8ca:	430b      	orrs	r3, r1
 800c8cc:	d122      	bne.n	800c914 <_dtoa_r+0xabc>
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	ddee      	ble.n	800c8b0 <_dtoa_r+0xa58>
 800c8d2:	ee18 1a10 	vmov	r1, s16
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 fadb 	bl	800ce94 <__lshift>
 800c8de:	4631      	mov	r1, r6
 800c8e0:	ee08 0a10 	vmov	s16, r0
 800c8e4:	f000 fb46 	bl	800cf74 <__mcmp>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	dc03      	bgt.n	800c8f4 <_dtoa_r+0xa9c>
 800c8ec:	d1e0      	bne.n	800c8b0 <_dtoa_r+0xa58>
 800c8ee:	f01a 0f01 	tst.w	sl, #1
 800c8f2:	d0dd      	beq.n	800c8b0 <_dtoa_r+0xa58>
 800c8f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8f8:	d1d7      	bne.n	800c8aa <_dtoa_r+0xa52>
 800c8fa:	2339      	movs	r3, #57	; 0x39
 800c8fc:	f88b 3000 	strb.w	r3, [fp]
 800c900:	462b      	mov	r3, r5
 800c902:	461d      	mov	r5, r3
 800c904:	3b01      	subs	r3, #1
 800c906:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c90a:	2a39      	cmp	r2, #57	; 0x39
 800c90c:	d071      	beq.n	800c9f2 <_dtoa_r+0xb9a>
 800c90e:	3201      	adds	r2, #1
 800c910:	701a      	strb	r2, [r3, #0]
 800c912:	e746      	b.n	800c7a2 <_dtoa_r+0x94a>
 800c914:	2a00      	cmp	r2, #0
 800c916:	dd07      	ble.n	800c928 <_dtoa_r+0xad0>
 800c918:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c91c:	d0ed      	beq.n	800c8fa <_dtoa_r+0xaa2>
 800c91e:	f10a 0301 	add.w	r3, sl, #1
 800c922:	f88b 3000 	strb.w	r3, [fp]
 800c926:	e73c      	b.n	800c7a2 <_dtoa_r+0x94a>
 800c928:	9b05      	ldr	r3, [sp, #20]
 800c92a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c92e:	4599      	cmp	r9, r3
 800c930:	d047      	beq.n	800c9c2 <_dtoa_r+0xb6a>
 800c932:	ee18 1a10 	vmov	r1, s16
 800c936:	2300      	movs	r3, #0
 800c938:	220a      	movs	r2, #10
 800c93a:	4620      	mov	r0, r4
 800c93c:	f000 f8fa 	bl	800cb34 <__multadd>
 800c940:	45b8      	cmp	r8, r7
 800c942:	ee08 0a10 	vmov	s16, r0
 800c946:	f04f 0300 	mov.w	r3, #0
 800c94a:	f04f 020a 	mov.w	r2, #10
 800c94e:	4641      	mov	r1, r8
 800c950:	4620      	mov	r0, r4
 800c952:	d106      	bne.n	800c962 <_dtoa_r+0xb0a>
 800c954:	f000 f8ee 	bl	800cb34 <__multadd>
 800c958:	4680      	mov	r8, r0
 800c95a:	4607      	mov	r7, r0
 800c95c:	f109 0901 	add.w	r9, r9, #1
 800c960:	e772      	b.n	800c848 <_dtoa_r+0x9f0>
 800c962:	f000 f8e7 	bl	800cb34 <__multadd>
 800c966:	4639      	mov	r1, r7
 800c968:	4680      	mov	r8, r0
 800c96a:	2300      	movs	r3, #0
 800c96c:	220a      	movs	r2, #10
 800c96e:	4620      	mov	r0, r4
 800c970:	f000 f8e0 	bl	800cb34 <__multadd>
 800c974:	4607      	mov	r7, r0
 800c976:	e7f1      	b.n	800c95c <_dtoa_r+0xb04>
 800c978:	9b03      	ldr	r3, [sp, #12]
 800c97a:	9302      	str	r3, [sp, #8]
 800c97c:	9d01      	ldr	r5, [sp, #4]
 800c97e:	ee18 0a10 	vmov	r0, s16
 800c982:	4631      	mov	r1, r6
 800c984:	f7ff f9dc 	bl	800bd40 <quorem>
 800c988:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c98c:	9b01      	ldr	r3, [sp, #4]
 800c98e:	f805 ab01 	strb.w	sl, [r5], #1
 800c992:	1aea      	subs	r2, r5, r3
 800c994:	9b02      	ldr	r3, [sp, #8]
 800c996:	4293      	cmp	r3, r2
 800c998:	dd09      	ble.n	800c9ae <_dtoa_r+0xb56>
 800c99a:	ee18 1a10 	vmov	r1, s16
 800c99e:	2300      	movs	r3, #0
 800c9a0:	220a      	movs	r2, #10
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f000 f8c6 	bl	800cb34 <__multadd>
 800c9a8:	ee08 0a10 	vmov	s16, r0
 800c9ac:	e7e7      	b.n	800c97e <_dtoa_r+0xb26>
 800c9ae:	9b02      	ldr	r3, [sp, #8]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	bfc8      	it	gt
 800c9b4:	461d      	movgt	r5, r3
 800c9b6:	9b01      	ldr	r3, [sp, #4]
 800c9b8:	bfd8      	it	le
 800c9ba:	2501      	movle	r5, #1
 800c9bc:	441d      	add	r5, r3
 800c9be:	f04f 0800 	mov.w	r8, #0
 800c9c2:	ee18 1a10 	vmov	r1, s16
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f000 fa63 	bl	800ce94 <__lshift>
 800c9ce:	4631      	mov	r1, r6
 800c9d0:	ee08 0a10 	vmov	s16, r0
 800c9d4:	f000 face 	bl	800cf74 <__mcmp>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	dc91      	bgt.n	800c900 <_dtoa_r+0xaa8>
 800c9dc:	d102      	bne.n	800c9e4 <_dtoa_r+0xb8c>
 800c9de:	f01a 0f01 	tst.w	sl, #1
 800c9e2:	d18d      	bne.n	800c900 <_dtoa_r+0xaa8>
 800c9e4:	462b      	mov	r3, r5
 800c9e6:	461d      	mov	r5, r3
 800c9e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9ec:	2a30      	cmp	r2, #48	; 0x30
 800c9ee:	d0fa      	beq.n	800c9e6 <_dtoa_r+0xb8e>
 800c9f0:	e6d7      	b.n	800c7a2 <_dtoa_r+0x94a>
 800c9f2:	9a01      	ldr	r2, [sp, #4]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d184      	bne.n	800c902 <_dtoa_r+0xaaa>
 800c9f8:	9b00      	ldr	r3, [sp, #0]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	9300      	str	r3, [sp, #0]
 800c9fe:	2331      	movs	r3, #49	; 0x31
 800ca00:	7013      	strb	r3, [r2, #0]
 800ca02:	e6ce      	b.n	800c7a2 <_dtoa_r+0x94a>
 800ca04:	4b09      	ldr	r3, [pc, #36]	; (800ca2c <_dtoa_r+0xbd4>)
 800ca06:	f7ff ba95 	b.w	800bf34 <_dtoa_r+0xdc>
 800ca0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f47f aa6e 	bne.w	800beee <_dtoa_r+0x96>
 800ca12:	4b07      	ldr	r3, [pc, #28]	; (800ca30 <_dtoa_r+0xbd8>)
 800ca14:	f7ff ba8e 	b.w	800bf34 <_dtoa_r+0xdc>
 800ca18:	9b02      	ldr	r3, [sp, #8]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	dcae      	bgt.n	800c97c <_dtoa_r+0xb24>
 800ca1e:	9b06      	ldr	r3, [sp, #24]
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	f73f aea8 	bgt.w	800c776 <_dtoa_r+0x91e>
 800ca26:	e7a9      	b.n	800c97c <_dtoa_r+0xb24>
 800ca28:	0800fc1e 	.word	0x0800fc1e
 800ca2c:	0800fda1 	.word	0x0800fda1
 800ca30:	0800fb9f 	.word	0x0800fb9f

0800ca34 <_localeconv_r>:
 800ca34:	4800      	ldr	r0, [pc, #0]	; (800ca38 <_localeconv_r+0x4>)
 800ca36:	4770      	bx	lr
 800ca38:	200001b4 	.word	0x200001b4

0800ca3c <_lseek_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4d07      	ldr	r5, [pc, #28]	; (800ca5c <_lseek_r+0x20>)
 800ca40:	4604      	mov	r4, r0
 800ca42:	4608      	mov	r0, r1
 800ca44:	4611      	mov	r1, r2
 800ca46:	2200      	movs	r2, #0
 800ca48:	602a      	str	r2, [r5, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f7f8 f944 	bl	8004cd8 <_lseek>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_lseek_r+0x1e>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_lseek_r+0x1e>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	20006868 	.word	0x20006868

0800ca60 <malloc>:
 800ca60:	4b02      	ldr	r3, [pc, #8]	; (800ca6c <malloc+0xc>)
 800ca62:	4601      	mov	r1, r0
 800ca64:	6818      	ldr	r0, [r3, #0]
 800ca66:	f000 bc09 	b.w	800d27c <_malloc_r>
 800ca6a:	bf00      	nop
 800ca6c:	20000060 	.word	0x20000060

0800ca70 <_Balloc>:
 800ca70:	b570      	push	{r4, r5, r6, lr}
 800ca72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca74:	4604      	mov	r4, r0
 800ca76:	460d      	mov	r5, r1
 800ca78:	b976      	cbnz	r6, 800ca98 <_Balloc+0x28>
 800ca7a:	2010      	movs	r0, #16
 800ca7c:	f7ff fff0 	bl	800ca60 <malloc>
 800ca80:	4602      	mov	r2, r0
 800ca82:	6260      	str	r0, [r4, #36]	; 0x24
 800ca84:	b920      	cbnz	r0, 800ca90 <_Balloc+0x20>
 800ca86:	4b18      	ldr	r3, [pc, #96]	; (800cae8 <_Balloc+0x78>)
 800ca88:	4818      	ldr	r0, [pc, #96]	; (800caec <_Balloc+0x7c>)
 800ca8a:	2166      	movs	r1, #102	; 0x66
 800ca8c:	f001 fa76 	bl	800df7c <__assert_func>
 800ca90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca94:	6006      	str	r6, [r0, #0]
 800ca96:	60c6      	str	r6, [r0, #12]
 800ca98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ca9a:	68f3      	ldr	r3, [r6, #12]
 800ca9c:	b183      	cbz	r3, 800cac0 <_Balloc+0x50>
 800ca9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800caa6:	b9b8      	cbnz	r0, 800cad8 <_Balloc+0x68>
 800caa8:	2101      	movs	r1, #1
 800caaa:	fa01 f605 	lsl.w	r6, r1, r5
 800caae:	1d72      	adds	r2, r6, #5
 800cab0:	0092      	lsls	r2, r2, #2
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 fb60 	bl	800d178 <_calloc_r>
 800cab8:	b160      	cbz	r0, 800cad4 <_Balloc+0x64>
 800caba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cabe:	e00e      	b.n	800cade <_Balloc+0x6e>
 800cac0:	2221      	movs	r2, #33	; 0x21
 800cac2:	2104      	movs	r1, #4
 800cac4:	4620      	mov	r0, r4
 800cac6:	f000 fb57 	bl	800d178 <_calloc_r>
 800caca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cacc:	60f0      	str	r0, [r6, #12]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1e4      	bne.n	800ca9e <_Balloc+0x2e>
 800cad4:	2000      	movs	r0, #0
 800cad6:	bd70      	pop	{r4, r5, r6, pc}
 800cad8:	6802      	ldr	r2, [r0, #0]
 800cada:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cade:	2300      	movs	r3, #0
 800cae0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cae4:	e7f7      	b.n	800cad6 <_Balloc+0x66>
 800cae6:	bf00      	nop
 800cae8:	0800fbac 	.word	0x0800fbac
 800caec:	0800fc2f 	.word	0x0800fc2f

0800caf0 <_Bfree>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800caf4:	4605      	mov	r5, r0
 800caf6:	460c      	mov	r4, r1
 800caf8:	b976      	cbnz	r6, 800cb18 <_Bfree+0x28>
 800cafa:	2010      	movs	r0, #16
 800cafc:	f7ff ffb0 	bl	800ca60 <malloc>
 800cb00:	4602      	mov	r2, r0
 800cb02:	6268      	str	r0, [r5, #36]	; 0x24
 800cb04:	b920      	cbnz	r0, 800cb10 <_Bfree+0x20>
 800cb06:	4b09      	ldr	r3, [pc, #36]	; (800cb2c <_Bfree+0x3c>)
 800cb08:	4809      	ldr	r0, [pc, #36]	; (800cb30 <_Bfree+0x40>)
 800cb0a:	218a      	movs	r1, #138	; 0x8a
 800cb0c:	f001 fa36 	bl	800df7c <__assert_func>
 800cb10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb14:	6006      	str	r6, [r0, #0]
 800cb16:	60c6      	str	r6, [r0, #12]
 800cb18:	b13c      	cbz	r4, 800cb2a <_Bfree+0x3a>
 800cb1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb1c:	6862      	ldr	r2, [r4, #4]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb24:	6021      	str	r1, [r4, #0]
 800cb26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb2a:	bd70      	pop	{r4, r5, r6, pc}
 800cb2c:	0800fbac 	.word	0x0800fbac
 800cb30:	0800fc2f 	.word	0x0800fc2f

0800cb34 <__multadd>:
 800cb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb38:	690d      	ldr	r5, [r1, #16]
 800cb3a:	4607      	mov	r7, r0
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	461e      	mov	r6, r3
 800cb40:	f101 0c14 	add.w	ip, r1, #20
 800cb44:	2000      	movs	r0, #0
 800cb46:	f8dc 3000 	ldr.w	r3, [ip]
 800cb4a:	b299      	uxth	r1, r3
 800cb4c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb50:	0c1e      	lsrs	r6, r3, #16
 800cb52:	0c0b      	lsrs	r3, r1, #16
 800cb54:	fb02 3306 	mla	r3, r2, r6, r3
 800cb58:	b289      	uxth	r1, r1
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb60:	4285      	cmp	r5, r0
 800cb62:	f84c 1b04 	str.w	r1, [ip], #4
 800cb66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb6a:	dcec      	bgt.n	800cb46 <__multadd+0x12>
 800cb6c:	b30e      	cbz	r6, 800cbb2 <__multadd+0x7e>
 800cb6e:	68a3      	ldr	r3, [r4, #8]
 800cb70:	42ab      	cmp	r3, r5
 800cb72:	dc19      	bgt.n	800cba8 <__multadd+0x74>
 800cb74:	6861      	ldr	r1, [r4, #4]
 800cb76:	4638      	mov	r0, r7
 800cb78:	3101      	adds	r1, #1
 800cb7a:	f7ff ff79 	bl	800ca70 <_Balloc>
 800cb7e:	4680      	mov	r8, r0
 800cb80:	b928      	cbnz	r0, 800cb8e <__multadd+0x5a>
 800cb82:	4602      	mov	r2, r0
 800cb84:	4b0c      	ldr	r3, [pc, #48]	; (800cbb8 <__multadd+0x84>)
 800cb86:	480d      	ldr	r0, [pc, #52]	; (800cbbc <__multadd+0x88>)
 800cb88:	21b5      	movs	r1, #181	; 0xb5
 800cb8a:	f001 f9f7 	bl	800df7c <__assert_func>
 800cb8e:	6922      	ldr	r2, [r4, #16]
 800cb90:	3202      	adds	r2, #2
 800cb92:	f104 010c 	add.w	r1, r4, #12
 800cb96:	0092      	lsls	r2, r2, #2
 800cb98:	300c      	adds	r0, #12
 800cb9a:	f7fe fb9d 	bl	800b2d8 <memcpy>
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4638      	mov	r0, r7
 800cba2:	f7ff ffa5 	bl	800caf0 <_Bfree>
 800cba6:	4644      	mov	r4, r8
 800cba8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbac:	3501      	adds	r5, #1
 800cbae:	615e      	str	r6, [r3, #20]
 800cbb0:	6125      	str	r5, [r4, #16]
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb8:	0800fc1e 	.word	0x0800fc1e
 800cbbc:	0800fc2f 	.word	0x0800fc2f

0800cbc0 <__hi0bits>:
 800cbc0:	0c03      	lsrs	r3, r0, #16
 800cbc2:	041b      	lsls	r3, r3, #16
 800cbc4:	b9d3      	cbnz	r3, 800cbfc <__hi0bits+0x3c>
 800cbc6:	0400      	lsls	r0, r0, #16
 800cbc8:	2310      	movs	r3, #16
 800cbca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cbce:	bf04      	itt	eq
 800cbd0:	0200      	lsleq	r0, r0, #8
 800cbd2:	3308      	addeq	r3, #8
 800cbd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cbd8:	bf04      	itt	eq
 800cbda:	0100      	lsleq	r0, r0, #4
 800cbdc:	3304      	addeq	r3, #4
 800cbde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cbe2:	bf04      	itt	eq
 800cbe4:	0080      	lsleq	r0, r0, #2
 800cbe6:	3302      	addeq	r3, #2
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	db05      	blt.n	800cbf8 <__hi0bits+0x38>
 800cbec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cbf0:	f103 0301 	add.w	r3, r3, #1
 800cbf4:	bf08      	it	eq
 800cbf6:	2320      	moveq	r3, #32
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	4770      	bx	lr
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	e7e4      	b.n	800cbca <__hi0bits+0xa>

0800cc00 <__lo0bits>:
 800cc00:	6803      	ldr	r3, [r0, #0]
 800cc02:	f013 0207 	ands.w	r2, r3, #7
 800cc06:	4601      	mov	r1, r0
 800cc08:	d00b      	beq.n	800cc22 <__lo0bits+0x22>
 800cc0a:	07da      	lsls	r2, r3, #31
 800cc0c:	d423      	bmi.n	800cc56 <__lo0bits+0x56>
 800cc0e:	0798      	lsls	r0, r3, #30
 800cc10:	bf49      	itett	mi
 800cc12:	085b      	lsrmi	r3, r3, #1
 800cc14:	089b      	lsrpl	r3, r3, #2
 800cc16:	2001      	movmi	r0, #1
 800cc18:	600b      	strmi	r3, [r1, #0]
 800cc1a:	bf5c      	itt	pl
 800cc1c:	600b      	strpl	r3, [r1, #0]
 800cc1e:	2002      	movpl	r0, #2
 800cc20:	4770      	bx	lr
 800cc22:	b298      	uxth	r0, r3
 800cc24:	b9a8      	cbnz	r0, 800cc52 <__lo0bits+0x52>
 800cc26:	0c1b      	lsrs	r3, r3, #16
 800cc28:	2010      	movs	r0, #16
 800cc2a:	b2da      	uxtb	r2, r3
 800cc2c:	b90a      	cbnz	r2, 800cc32 <__lo0bits+0x32>
 800cc2e:	3008      	adds	r0, #8
 800cc30:	0a1b      	lsrs	r3, r3, #8
 800cc32:	071a      	lsls	r2, r3, #28
 800cc34:	bf04      	itt	eq
 800cc36:	091b      	lsreq	r3, r3, #4
 800cc38:	3004      	addeq	r0, #4
 800cc3a:	079a      	lsls	r2, r3, #30
 800cc3c:	bf04      	itt	eq
 800cc3e:	089b      	lsreq	r3, r3, #2
 800cc40:	3002      	addeq	r0, #2
 800cc42:	07da      	lsls	r2, r3, #31
 800cc44:	d403      	bmi.n	800cc4e <__lo0bits+0x4e>
 800cc46:	085b      	lsrs	r3, r3, #1
 800cc48:	f100 0001 	add.w	r0, r0, #1
 800cc4c:	d005      	beq.n	800cc5a <__lo0bits+0x5a>
 800cc4e:	600b      	str	r3, [r1, #0]
 800cc50:	4770      	bx	lr
 800cc52:	4610      	mov	r0, r2
 800cc54:	e7e9      	b.n	800cc2a <__lo0bits+0x2a>
 800cc56:	2000      	movs	r0, #0
 800cc58:	4770      	bx	lr
 800cc5a:	2020      	movs	r0, #32
 800cc5c:	4770      	bx	lr
	...

0800cc60 <__i2b>:
 800cc60:	b510      	push	{r4, lr}
 800cc62:	460c      	mov	r4, r1
 800cc64:	2101      	movs	r1, #1
 800cc66:	f7ff ff03 	bl	800ca70 <_Balloc>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	b928      	cbnz	r0, 800cc7a <__i2b+0x1a>
 800cc6e:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <__i2b+0x24>)
 800cc70:	4805      	ldr	r0, [pc, #20]	; (800cc88 <__i2b+0x28>)
 800cc72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cc76:	f001 f981 	bl	800df7c <__assert_func>
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	6144      	str	r4, [r0, #20]
 800cc7e:	6103      	str	r3, [r0, #16]
 800cc80:	bd10      	pop	{r4, pc}
 800cc82:	bf00      	nop
 800cc84:	0800fc1e 	.word	0x0800fc1e
 800cc88:	0800fc2f 	.word	0x0800fc2f

0800cc8c <__multiply>:
 800cc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc90:	4691      	mov	r9, r2
 800cc92:	690a      	ldr	r2, [r1, #16]
 800cc94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	bfb8      	it	lt
 800cc9c:	460b      	movlt	r3, r1
 800cc9e:	460c      	mov	r4, r1
 800cca0:	bfbc      	itt	lt
 800cca2:	464c      	movlt	r4, r9
 800cca4:	4699      	movlt	r9, r3
 800cca6:	6927      	ldr	r7, [r4, #16]
 800cca8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ccac:	68a3      	ldr	r3, [r4, #8]
 800ccae:	6861      	ldr	r1, [r4, #4]
 800ccb0:	eb07 060a 	add.w	r6, r7, sl
 800ccb4:	42b3      	cmp	r3, r6
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	bfb8      	it	lt
 800ccba:	3101      	addlt	r1, #1
 800ccbc:	f7ff fed8 	bl	800ca70 <_Balloc>
 800ccc0:	b930      	cbnz	r0, 800ccd0 <__multiply+0x44>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	4b44      	ldr	r3, [pc, #272]	; (800cdd8 <__multiply+0x14c>)
 800ccc6:	4845      	ldr	r0, [pc, #276]	; (800cddc <__multiply+0x150>)
 800ccc8:	f240 115d 	movw	r1, #349	; 0x15d
 800cccc:	f001 f956 	bl	800df7c <__assert_func>
 800ccd0:	f100 0514 	add.w	r5, r0, #20
 800ccd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ccd8:	462b      	mov	r3, r5
 800ccda:	2200      	movs	r2, #0
 800ccdc:	4543      	cmp	r3, r8
 800ccde:	d321      	bcc.n	800cd24 <__multiply+0x98>
 800cce0:	f104 0314 	add.w	r3, r4, #20
 800cce4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cce8:	f109 0314 	add.w	r3, r9, #20
 800ccec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ccf0:	9202      	str	r2, [sp, #8]
 800ccf2:	1b3a      	subs	r2, r7, r4
 800ccf4:	3a15      	subs	r2, #21
 800ccf6:	f022 0203 	bic.w	r2, r2, #3
 800ccfa:	3204      	adds	r2, #4
 800ccfc:	f104 0115 	add.w	r1, r4, #21
 800cd00:	428f      	cmp	r7, r1
 800cd02:	bf38      	it	cc
 800cd04:	2204      	movcc	r2, #4
 800cd06:	9201      	str	r2, [sp, #4]
 800cd08:	9a02      	ldr	r2, [sp, #8]
 800cd0a:	9303      	str	r3, [sp, #12]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d80c      	bhi.n	800cd2a <__multiply+0x9e>
 800cd10:	2e00      	cmp	r6, #0
 800cd12:	dd03      	ble.n	800cd1c <__multiply+0x90>
 800cd14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d05a      	beq.n	800cdd2 <__multiply+0x146>
 800cd1c:	6106      	str	r6, [r0, #16]
 800cd1e:	b005      	add	sp, #20
 800cd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd24:	f843 2b04 	str.w	r2, [r3], #4
 800cd28:	e7d8      	b.n	800ccdc <__multiply+0x50>
 800cd2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd2e:	f1ba 0f00 	cmp.w	sl, #0
 800cd32:	d024      	beq.n	800cd7e <__multiply+0xf2>
 800cd34:	f104 0e14 	add.w	lr, r4, #20
 800cd38:	46a9      	mov	r9, r5
 800cd3a:	f04f 0c00 	mov.w	ip, #0
 800cd3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cd42:	f8d9 1000 	ldr.w	r1, [r9]
 800cd46:	fa1f fb82 	uxth.w	fp, r2
 800cd4a:	b289      	uxth	r1, r1
 800cd4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800cd50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cd54:	f8d9 2000 	ldr.w	r2, [r9]
 800cd58:	4461      	add	r1, ip
 800cd5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cd62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd66:	b289      	uxth	r1, r1
 800cd68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cd6c:	4577      	cmp	r7, lr
 800cd6e:	f849 1b04 	str.w	r1, [r9], #4
 800cd72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd76:	d8e2      	bhi.n	800cd3e <__multiply+0xb2>
 800cd78:	9a01      	ldr	r2, [sp, #4]
 800cd7a:	f845 c002 	str.w	ip, [r5, r2]
 800cd7e:	9a03      	ldr	r2, [sp, #12]
 800cd80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cd84:	3304      	adds	r3, #4
 800cd86:	f1b9 0f00 	cmp.w	r9, #0
 800cd8a:	d020      	beq.n	800cdce <__multiply+0x142>
 800cd8c:	6829      	ldr	r1, [r5, #0]
 800cd8e:	f104 0c14 	add.w	ip, r4, #20
 800cd92:	46ae      	mov	lr, r5
 800cd94:	f04f 0a00 	mov.w	sl, #0
 800cd98:	f8bc b000 	ldrh.w	fp, [ip]
 800cd9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cda0:	fb09 220b 	mla	r2, r9, fp, r2
 800cda4:	4492      	add	sl, r2
 800cda6:	b289      	uxth	r1, r1
 800cda8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cdac:	f84e 1b04 	str.w	r1, [lr], #4
 800cdb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cdb4:	f8be 1000 	ldrh.w	r1, [lr]
 800cdb8:	0c12      	lsrs	r2, r2, #16
 800cdba:	fb09 1102 	mla	r1, r9, r2, r1
 800cdbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cdc2:	4567      	cmp	r7, ip
 800cdc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cdc8:	d8e6      	bhi.n	800cd98 <__multiply+0x10c>
 800cdca:	9a01      	ldr	r2, [sp, #4]
 800cdcc:	50a9      	str	r1, [r5, r2]
 800cdce:	3504      	adds	r5, #4
 800cdd0:	e79a      	b.n	800cd08 <__multiply+0x7c>
 800cdd2:	3e01      	subs	r6, #1
 800cdd4:	e79c      	b.n	800cd10 <__multiply+0x84>
 800cdd6:	bf00      	nop
 800cdd8:	0800fc1e 	.word	0x0800fc1e
 800cddc:	0800fc2f 	.word	0x0800fc2f

0800cde0 <__pow5mult>:
 800cde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde4:	4615      	mov	r5, r2
 800cde6:	f012 0203 	ands.w	r2, r2, #3
 800cdea:	4606      	mov	r6, r0
 800cdec:	460f      	mov	r7, r1
 800cdee:	d007      	beq.n	800ce00 <__pow5mult+0x20>
 800cdf0:	4c25      	ldr	r4, [pc, #148]	; (800ce88 <__pow5mult+0xa8>)
 800cdf2:	3a01      	subs	r2, #1
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdfa:	f7ff fe9b 	bl	800cb34 <__multadd>
 800cdfe:	4607      	mov	r7, r0
 800ce00:	10ad      	asrs	r5, r5, #2
 800ce02:	d03d      	beq.n	800ce80 <__pow5mult+0xa0>
 800ce04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce06:	b97c      	cbnz	r4, 800ce28 <__pow5mult+0x48>
 800ce08:	2010      	movs	r0, #16
 800ce0a:	f7ff fe29 	bl	800ca60 <malloc>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	6270      	str	r0, [r6, #36]	; 0x24
 800ce12:	b928      	cbnz	r0, 800ce20 <__pow5mult+0x40>
 800ce14:	4b1d      	ldr	r3, [pc, #116]	; (800ce8c <__pow5mult+0xac>)
 800ce16:	481e      	ldr	r0, [pc, #120]	; (800ce90 <__pow5mult+0xb0>)
 800ce18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce1c:	f001 f8ae 	bl	800df7c <__assert_func>
 800ce20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce24:	6004      	str	r4, [r0, #0]
 800ce26:	60c4      	str	r4, [r0, #12]
 800ce28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ce2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce30:	b94c      	cbnz	r4, 800ce46 <__pow5mult+0x66>
 800ce32:	f240 2171 	movw	r1, #625	; 0x271
 800ce36:	4630      	mov	r0, r6
 800ce38:	f7ff ff12 	bl	800cc60 <__i2b>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce42:	4604      	mov	r4, r0
 800ce44:	6003      	str	r3, [r0, #0]
 800ce46:	f04f 0900 	mov.w	r9, #0
 800ce4a:	07eb      	lsls	r3, r5, #31
 800ce4c:	d50a      	bpl.n	800ce64 <__pow5mult+0x84>
 800ce4e:	4639      	mov	r1, r7
 800ce50:	4622      	mov	r2, r4
 800ce52:	4630      	mov	r0, r6
 800ce54:	f7ff ff1a 	bl	800cc8c <__multiply>
 800ce58:	4639      	mov	r1, r7
 800ce5a:	4680      	mov	r8, r0
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7ff fe47 	bl	800caf0 <_Bfree>
 800ce62:	4647      	mov	r7, r8
 800ce64:	106d      	asrs	r5, r5, #1
 800ce66:	d00b      	beq.n	800ce80 <__pow5mult+0xa0>
 800ce68:	6820      	ldr	r0, [r4, #0]
 800ce6a:	b938      	cbnz	r0, 800ce7c <__pow5mult+0x9c>
 800ce6c:	4622      	mov	r2, r4
 800ce6e:	4621      	mov	r1, r4
 800ce70:	4630      	mov	r0, r6
 800ce72:	f7ff ff0b 	bl	800cc8c <__multiply>
 800ce76:	6020      	str	r0, [r4, #0]
 800ce78:	f8c0 9000 	str.w	r9, [r0]
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	e7e4      	b.n	800ce4a <__pow5mult+0x6a>
 800ce80:	4638      	mov	r0, r7
 800ce82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce86:	bf00      	nop
 800ce88:	0800fd80 	.word	0x0800fd80
 800ce8c:	0800fbac 	.word	0x0800fbac
 800ce90:	0800fc2f 	.word	0x0800fc2f

0800ce94 <__lshift>:
 800ce94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce98:	460c      	mov	r4, r1
 800ce9a:	6849      	ldr	r1, [r1, #4]
 800ce9c:	6923      	ldr	r3, [r4, #16]
 800ce9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cea2:	68a3      	ldr	r3, [r4, #8]
 800cea4:	4607      	mov	r7, r0
 800cea6:	4691      	mov	r9, r2
 800cea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ceac:	f108 0601 	add.w	r6, r8, #1
 800ceb0:	42b3      	cmp	r3, r6
 800ceb2:	db0b      	blt.n	800cecc <__lshift+0x38>
 800ceb4:	4638      	mov	r0, r7
 800ceb6:	f7ff fddb 	bl	800ca70 <_Balloc>
 800ceba:	4605      	mov	r5, r0
 800cebc:	b948      	cbnz	r0, 800ced2 <__lshift+0x3e>
 800cebe:	4602      	mov	r2, r0
 800cec0:	4b2a      	ldr	r3, [pc, #168]	; (800cf6c <__lshift+0xd8>)
 800cec2:	482b      	ldr	r0, [pc, #172]	; (800cf70 <__lshift+0xdc>)
 800cec4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cec8:	f001 f858 	bl	800df7c <__assert_func>
 800cecc:	3101      	adds	r1, #1
 800cece:	005b      	lsls	r3, r3, #1
 800ced0:	e7ee      	b.n	800ceb0 <__lshift+0x1c>
 800ced2:	2300      	movs	r3, #0
 800ced4:	f100 0114 	add.w	r1, r0, #20
 800ced8:	f100 0210 	add.w	r2, r0, #16
 800cedc:	4618      	mov	r0, r3
 800cede:	4553      	cmp	r3, sl
 800cee0:	db37      	blt.n	800cf52 <__lshift+0xbe>
 800cee2:	6920      	ldr	r0, [r4, #16]
 800cee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cee8:	f104 0314 	add.w	r3, r4, #20
 800ceec:	f019 091f 	ands.w	r9, r9, #31
 800cef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cef4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cef8:	d02f      	beq.n	800cf5a <__lshift+0xc6>
 800cefa:	f1c9 0e20 	rsb	lr, r9, #32
 800cefe:	468a      	mov	sl, r1
 800cf00:	f04f 0c00 	mov.w	ip, #0
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	fa02 f209 	lsl.w	r2, r2, r9
 800cf0a:	ea42 020c 	orr.w	r2, r2, ip
 800cf0e:	f84a 2b04 	str.w	r2, [sl], #4
 800cf12:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf16:	4298      	cmp	r0, r3
 800cf18:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cf1c:	d8f2      	bhi.n	800cf04 <__lshift+0x70>
 800cf1e:	1b03      	subs	r3, r0, r4
 800cf20:	3b15      	subs	r3, #21
 800cf22:	f023 0303 	bic.w	r3, r3, #3
 800cf26:	3304      	adds	r3, #4
 800cf28:	f104 0215 	add.w	r2, r4, #21
 800cf2c:	4290      	cmp	r0, r2
 800cf2e:	bf38      	it	cc
 800cf30:	2304      	movcc	r3, #4
 800cf32:	f841 c003 	str.w	ip, [r1, r3]
 800cf36:	f1bc 0f00 	cmp.w	ip, #0
 800cf3a:	d001      	beq.n	800cf40 <__lshift+0xac>
 800cf3c:	f108 0602 	add.w	r6, r8, #2
 800cf40:	3e01      	subs	r6, #1
 800cf42:	4638      	mov	r0, r7
 800cf44:	612e      	str	r6, [r5, #16]
 800cf46:	4621      	mov	r1, r4
 800cf48:	f7ff fdd2 	bl	800caf0 <_Bfree>
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf52:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf56:	3301      	adds	r3, #1
 800cf58:	e7c1      	b.n	800cede <__lshift+0x4a>
 800cf5a:	3904      	subs	r1, #4
 800cf5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf60:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf64:	4298      	cmp	r0, r3
 800cf66:	d8f9      	bhi.n	800cf5c <__lshift+0xc8>
 800cf68:	e7ea      	b.n	800cf40 <__lshift+0xac>
 800cf6a:	bf00      	nop
 800cf6c:	0800fc1e 	.word	0x0800fc1e
 800cf70:	0800fc2f 	.word	0x0800fc2f

0800cf74 <__mcmp>:
 800cf74:	b530      	push	{r4, r5, lr}
 800cf76:	6902      	ldr	r2, [r0, #16]
 800cf78:	690c      	ldr	r4, [r1, #16]
 800cf7a:	1b12      	subs	r2, r2, r4
 800cf7c:	d10e      	bne.n	800cf9c <__mcmp+0x28>
 800cf7e:	f100 0314 	add.w	r3, r0, #20
 800cf82:	3114      	adds	r1, #20
 800cf84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cf88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cf8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cf90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cf94:	42a5      	cmp	r5, r4
 800cf96:	d003      	beq.n	800cfa0 <__mcmp+0x2c>
 800cf98:	d305      	bcc.n	800cfa6 <__mcmp+0x32>
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	4610      	mov	r0, r2
 800cf9e:	bd30      	pop	{r4, r5, pc}
 800cfa0:	4283      	cmp	r3, r0
 800cfa2:	d3f3      	bcc.n	800cf8c <__mcmp+0x18>
 800cfa4:	e7fa      	b.n	800cf9c <__mcmp+0x28>
 800cfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfaa:	e7f7      	b.n	800cf9c <__mcmp+0x28>

0800cfac <__mdiff>:
 800cfac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb0:	460c      	mov	r4, r1
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	4690      	mov	r8, r2
 800cfba:	f7ff ffdb 	bl	800cf74 <__mcmp>
 800cfbe:	1e05      	subs	r5, r0, #0
 800cfc0:	d110      	bne.n	800cfe4 <__mdiff+0x38>
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	f7ff fd53 	bl	800ca70 <_Balloc>
 800cfca:	b930      	cbnz	r0, 800cfda <__mdiff+0x2e>
 800cfcc:	4b3a      	ldr	r3, [pc, #232]	; (800d0b8 <__mdiff+0x10c>)
 800cfce:	4602      	mov	r2, r0
 800cfd0:	f240 2132 	movw	r1, #562	; 0x232
 800cfd4:	4839      	ldr	r0, [pc, #228]	; (800d0bc <__mdiff+0x110>)
 800cfd6:	f000 ffd1 	bl	800df7c <__assert_func>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cfe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe4:	bfa4      	itt	ge
 800cfe6:	4643      	movge	r3, r8
 800cfe8:	46a0      	movge	r8, r4
 800cfea:	4630      	mov	r0, r6
 800cfec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cff0:	bfa6      	itte	ge
 800cff2:	461c      	movge	r4, r3
 800cff4:	2500      	movge	r5, #0
 800cff6:	2501      	movlt	r5, #1
 800cff8:	f7ff fd3a 	bl	800ca70 <_Balloc>
 800cffc:	b920      	cbnz	r0, 800d008 <__mdiff+0x5c>
 800cffe:	4b2e      	ldr	r3, [pc, #184]	; (800d0b8 <__mdiff+0x10c>)
 800d000:	4602      	mov	r2, r0
 800d002:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d006:	e7e5      	b.n	800cfd4 <__mdiff+0x28>
 800d008:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d00c:	6926      	ldr	r6, [r4, #16]
 800d00e:	60c5      	str	r5, [r0, #12]
 800d010:	f104 0914 	add.w	r9, r4, #20
 800d014:	f108 0514 	add.w	r5, r8, #20
 800d018:	f100 0e14 	add.w	lr, r0, #20
 800d01c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d024:	f108 0210 	add.w	r2, r8, #16
 800d028:	46f2      	mov	sl, lr
 800d02a:	2100      	movs	r1, #0
 800d02c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d034:	fa1f f883 	uxth.w	r8, r3
 800d038:	fa11 f18b 	uxtah	r1, r1, fp
 800d03c:	0c1b      	lsrs	r3, r3, #16
 800d03e:	eba1 0808 	sub.w	r8, r1, r8
 800d042:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d046:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d04a:	fa1f f888 	uxth.w	r8, r8
 800d04e:	1419      	asrs	r1, r3, #16
 800d050:	454e      	cmp	r6, r9
 800d052:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d056:	f84a 3b04 	str.w	r3, [sl], #4
 800d05a:	d8e7      	bhi.n	800d02c <__mdiff+0x80>
 800d05c:	1b33      	subs	r3, r6, r4
 800d05e:	3b15      	subs	r3, #21
 800d060:	f023 0303 	bic.w	r3, r3, #3
 800d064:	3304      	adds	r3, #4
 800d066:	3415      	adds	r4, #21
 800d068:	42a6      	cmp	r6, r4
 800d06a:	bf38      	it	cc
 800d06c:	2304      	movcc	r3, #4
 800d06e:	441d      	add	r5, r3
 800d070:	4473      	add	r3, lr
 800d072:	469e      	mov	lr, r3
 800d074:	462e      	mov	r6, r5
 800d076:	4566      	cmp	r6, ip
 800d078:	d30e      	bcc.n	800d098 <__mdiff+0xec>
 800d07a:	f10c 0203 	add.w	r2, ip, #3
 800d07e:	1b52      	subs	r2, r2, r5
 800d080:	f022 0203 	bic.w	r2, r2, #3
 800d084:	3d03      	subs	r5, #3
 800d086:	45ac      	cmp	ip, r5
 800d088:	bf38      	it	cc
 800d08a:	2200      	movcc	r2, #0
 800d08c:	441a      	add	r2, r3
 800d08e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d092:	b17b      	cbz	r3, 800d0b4 <__mdiff+0x108>
 800d094:	6107      	str	r7, [r0, #16]
 800d096:	e7a3      	b.n	800cfe0 <__mdiff+0x34>
 800d098:	f856 8b04 	ldr.w	r8, [r6], #4
 800d09c:	fa11 f288 	uxtah	r2, r1, r8
 800d0a0:	1414      	asrs	r4, r2, #16
 800d0a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d0a6:	b292      	uxth	r2, r2
 800d0a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d0ac:	f84e 2b04 	str.w	r2, [lr], #4
 800d0b0:	1421      	asrs	r1, r4, #16
 800d0b2:	e7e0      	b.n	800d076 <__mdiff+0xca>
 800d0b4:	3f01      	subs	r7, #1
 800d0b6:	e7ea      	b.n	800d08e <__mdiff+0xe2>
 800d0b8:	0800fc1e 	.word	0x0800fc1e
 800d0bc:	0800fc2f 	.word	0x0800fc2f

0800d0c0 <__d2b>:
 800d0c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0c4:	4689      	mov	r9, r1
 800d0c6:	2101      	movs	r1, #1
 800d0c8:	ec57 6b10 	vmov	r6, r7, d0
 800d0cc:	4690      	mov	r8, r2
 800d0ce:	f7ff fccf 	bl	800ca70 <_Balloc>
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	b930      	cbnz	r0, 800d0e4 <__d2b+0x24>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	4b25      	ldr	r3, [pc, #148]	; (800d170 <__d2b+0xb0>)
 800d0da:	4826      	ldr	r0, [pc, #152]	; (800d174 <__d2b+0xb4>)
 800d0dc:	f240 310a 	movw	r1, #778	; 0x30a
 800d0e0:	f000 ff4c 	bl	800df7c <__assert_func>
 800d0e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d0e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d0ec:	bb35      	cbnz	r5, 800d13c <__d2b+0x7c>
 800d0ee:	2e00      	cmp	r6, #0
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	d028      	beq.n	800d146 <__d2b+0x86>
 800d0f4:	4668      	mov	r0, sp
 800d0f6:	9600      	str	r6, [sp, #0]
 800d0f8:	f7ff fd82 	bl	800cc00 <__lo0bits>
 800d0fc:	9900      	ldr	r1, [sp, #0]
 800d0fe:	b300      	cbz	r0, 800d142 <__d2b+0x82>
 800d100:	9a01      	ldr	r2, [sp, #4]
 800d102:	f1c0 0320 	rsb	r3, r0, #32
 800d106:	fa02 f303 	lsl.w	r3, r2, r3
 800d10a:	430b      	orrs	r3, r1
 800d10c:	40c2      	lsrs	r2, r0
 800d10e:	6163      	str	r3, [r4, #20]
 800d110:	9201      	str	r2, [sp, #4]
 800d112:	9b01      	ldr	r3, [sp, #4]
 800d114:	61a3      	str	r3, [r4, #24]
 800d116:	2b00      	cmp	r3, #0
 800d118:	bf14      	ite	ne
 800d11a:	2202      	movne	r2, #2
 800d11c:	2201      	moveq	r2, #1
 800d11e:	6122      	str	r2, [r4, #16]
 800d120:	b1d5      	cbz	r5, 800d158 <__d2b+0x98>
 800d122:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d126:	4405      	add	r5, r0
 800d128:	f8c9 5000 	str.w	r5, [r9]
 800d12c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d130:	f8c8 0000 	str.w	r0, [r8]
 800d134:	4620      	mov	r0, r4
 800d136:	b003      	add	sp, #12
 800d138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d13c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d140:	e7d5      	b.n	800d0ee <__d2b+0x2e>
 800d142:	6161      	str	r1, [r4, #20]
 800d144:	e7e5      	b.n	800d112 <__d2b+0x52>
 800d146:	a801      	add	r0, sp, #4
 800d148:	f7ff fd5a 	bl	800cc00 <__lo0bits>
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	6163      	str	r3, [r4, #20]
 800d150:	2201      	movs	r2, #1
 800d152:	6122      	str	r2, [r4, #16]
 800d154:	3020      	adds	r0, #32
 800d156:	e7e3      	b.n	800d120 <__d2b+0x60>
 800d158:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d15c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d160:	f8c9 0000 	str.w	r0, [r9]
 800d164:	6918      	ldr	r0, [r3, #16]
 800d166:	f7ff fd2b 	bl	800cbc0 <__hi0bits>
 800d16a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d16e:	e7df      	b.n	800d130 <__d2b+0x70>
 800d170:	0800fc1e 	.word	0x0800fc1e
 800d174:	0800fc2f 	.word	0x0800fc2f

0800d178 <_calloc_r>:
 800d178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d17a:	fba1 2402 	umull	r2, r4, r1, r2
 800d17e:	b94c      	cbnz	r4, 800d194 <_calloc_r+0x1c>
 800d180:	4611      	mov	r1, r2
 800d182:	9201      	str	r2, [sp, #4]
 800d184:	f000 f87a 	bl	800d27c <_malloc_r>
 800d188:	9a01      	ldr	r2, [sp, #4]
 800d18a:	4605      	mov	r5, r0
 800d18c:	b930      	cbnz	r0, 800d19c <_calloc_r+0x24>
 800d18e:	4628      	mov	r0, r5
 800d190:	b003      	add	sp, #12
 800d192:	bd30      	pop	{r4, r5, pc}
 800d194:	220c      	movs	r2, #12
 800d196:	6002      	str	r2, [r0, #0]
 800d198:	2500      	movs	r5, #0
 800d19a:	e7f8      	b.n	800d18e <_calloc_r+0x16>
 800d19c:	4621      	mov	r1, r4
 800d19e:	f7fe f8a9 	bl	800b2f4 <memset>
 800d1a2:	e7f4      	b.n	800d18e <_calloc_r+0x16>

0800d1a4 <_free_r>:
 800d1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1a6:	2900      	cmp	r1, #0
 800d1a8:	d044      	beq.n	800d234 <_free_r+0x90>
 800d1aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1ae:	9001      	str	r0, [sp, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f1a1 0404 	sub.w	r4, r1, #4
 800d1b6:	bfb8      	it	lt
 800d1b8:	18e4      	addlt	r4, r4, r3
 800d1ba:	f001 f8f5 	bl	800e3a8 <__malloc_lock>
 800d1be:	4a1e      	ldr	r2, [pc, #120]	; (800d238 <_free_r+0x94>)
 800d1c0:	9801      	ldr	r0, [sp, #4]
 800d1c2:	6813      	ldr	r3, [r2, #0]
 800d1c4:	b933      	cbnz	r3, 800d1d4 <_free_r+0x30>
 800d1c6:	6063      	str	r3, [r4, #4]
 800d1c8:	6014      	str	r4, [r2, #0]
 800d1ca:	b003      	add	sp, #12
 800d1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1d0:	f001 b8f0 	b.w	800e3b4 <__malloc_unlock>
 800d1d4:	42a3      	cmp	r3, r4
 800d1d6:	d908      	bls.n	800d1ea <_free_r+0x46>
 800d1d8:	6825      	ldr	r5, [r4, #0]
 800d1da:	1961      	adds	r1, r4, r5
 800d1dc:	428b      	cmp	r3, r1
 800d1de:	bf01      	itttt	eq
 800d1e0:	6819      	ldreq	r1, [r3, #0]
 800d1e2:	685b      	ldreq	r3, [r3, #4]
 800d1e4:	1949      	addeq	r1, r1, r5
 800d1e6:	6021      	streq	r1, [r4, #0]
 800d1e8:	e7ed      	b.n	800d1c6 <_free_r+0x22>
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	b10b      	cbz	r3, 800d1f4 <_free_r+0x50>
 800d1f0:	42a3      	cmp	r3, r4
 800d1f2:	d9fa      	bls.n	800d1ea <_free_r+0x46>
 800d1f4:	6811      	ldr	r1, [r2, #0]
 800d1f6:	1855      	adds	r5, r2, r1
 800d1f8:	42a5      	cmp	r5, r4
 800d1fa:	d10b      	bne.n	800d214 <_free_r+0x70>
 800d1fc:	6824      	ldr	r4, [r4, #0]
 800d1fe:	4421      	add	r1, r4
 800d200:	1854      	adds	r4, r2, r1
 800d202:	42a3      	cmp	r3, r4
 800d204:	6011      	str	r1, [r2, #0]
 800d206:	d1e0      	bne.n	800d1ca <_free_r+0x26>
 800d208:	681c      	ldr	r4, [r3, #0]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	6053      	str	r3, [r2, #4]
 800d20e:	4421      	add	r1, r4
 800d210:	6011      	str	r1, [r2, #0]
 800d212:	e7da      	b.n	800d1ca <_free_r+0x26>
 800d214:	d902      	bls.n	800d21c <_free_r+0x78>
 800d216:	230c      	movs	r3, #12
 800d218:	6003      	str	r3, [r0, #0]
 800d21a:	e7d6      	b.n	800d1ca <_free_r+0x26>
 800d21c:	6825      	ldr	r5, [r4, #0]
 800d21e:	1961      	adds	r1, r4, r5
 800d220:	428b      	cmp	r3, r1
 800d222:	bf04      	itt	eq
 800d224:	6819      	ldreq	r1, [r3, #0]
 800d226:	685b      	ldreq	r3, [r3, #4]
 800d228:	6063      	str	r3, [r4, #4]
 800d22a:	bf04      	itt	eq
 800d22c:	1949      	addeq	r1, r1, r5
 800d22e:	6021      	streq	r1, [r4, #0]
 800d230:	6054      	str	r4, [r2, #4]
 800d232:	e7ca      	b.n	800d1ca <_free_r+0x26>
 800d234:	b003      	add	sp, #12
 800d236:	bd30      	pop	{r4, r5, pc}
 800d238:	20006860 	.word	0x20006860

0800d23c <sbrk_aligned>:
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	4e0e      	ldr	r6, [pc, #56]	; (800d278 <sbrk_aligned+0x3c>)
 800d240:	460c      	mov	r4, r1
 800d242:	6831      	ldr	r1, [r6, #0]
 800d244:	4605      	mov	r5, r0
 800d246:	b911      	cbnz	r1, 800d24e <sbrk_aligned+0x12>
 800d248:	f000 fd1e 	bl	800dc88 <_sbrk_r>
 800d24c:	6030      	str	r0, [r6, #0]
 800d24e:	4621      	mov	r1, r4
 800d250:	4628      	mov	r0, r5
 800d252:	f000 fd19 	bl	800dc88 <_sbrk_r>
 800d256:	1c43      	adds	r3, r0, #1
 800d258:	d00a      	beq.n	800d270 <sbrk_aligned+0x34>
 800d25a:	1cc4      	adds	r4, r0, #3
 800d25c:	f024 0403 	bic.w	r4, r4, #3
 800d260:	42a0      	cmp	r0, r4
 800d262:	d007      	beq.n	800d274 <sbrk_aligned+0x38>
 800d264:	1a21      	subs	r1, r4, r0
 800d266:	4628      	mov	r0, r5
 800d268:	f000 fd0e 	bl	800dc88 <_sbrk_r>
 800d26c:	3001      	adds	r0, #1
 800d26e:	d101      	bne.n	800d274 <sbrk_aligned+0x38>
 800d270:	f04f 34ff 	mov.w	r4, #4294967295
 800d274:	4620      	mov	r0, r4
 800d276:	bd70      	pop	{r4, r5, r6, pc}
 800d278:	20006864 	.word	0x20006864

0800d27c <_malloc_r>:
 800d27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d280:	1ccd      	adds	r5, r1, #3
 800d282:	f025 0503 	bic.w	r5, r5, #3
 800d286:	3508      	adds	r5, #8
 800d288:	2d0c      	cmp	r5, #12
 800d28a:	bf38      	it	cc
 800d28c:	250c      	movcc	r5, #12
 800d28e:	2d00      	cmp	r5, #0
 800d290:	4607      	mov	r7, r0
 800d292:	db01      	blt.n	800d298 <_malloc_r+0x1c>
 800d294:	42a9      	cmp	r1, r5
 800d296:	d905      	bls.n	800d2a4 <_malloc_r+0x28>
 800d298:	230c      	movs	r3, #12
 800d29a:	603b      	str	r3, [r7, #0]
 800d29c:	2600      	movs	r6, #0
 800d29e:	4630      	mov	r0, r6
 800d2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a4:	4e2e      	ldr	r6, [pc, #184]	; (800d360 <_malloc_r+0xe4>)
 800d2a6:	f001 f87f 	bl	800e3a8 <__malloc_lock>
 800d2aa:	6833      	ldr	r3, [r6, #0]
 800d2ac:	461c      	mov	r4, r3
 800d2ae:	bb34      	cbnz	r4, 800d2fe <_malloc_r+0x82>
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	f7ff ffc2 	bl	800d23c <sbrk_aligned>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	d14d      	bne.n	800d35a <_malloc_r+0xde>
 800d2be:	6834      	ldr	r4, [r6, #0]
 800d2c0:	4626      	mov	r6, r4
 800d2c2:	2e00      	cmp	r6, #0
 800d2c4:	d140      	bne.n	800d348 <_malloc_r+0xcc>
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	4631      	mov	r1, r6
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	eb04 0803 	add.w	r8, r4, r3
 800d2d0:	f000 fcda 	bl	800dc88 <_sbrk_r>
 800d2d4:	4580      	cmp	r8, r0
 800d2d6:	d13a      	bne.n	800d34e <_malloc_r+0xd2>
 800d2d8:	6821      	ldr	r1, [r4, #0]
 800d2da:	3503      	adds	r5, #3
 800d2dc:	1a6d      	subs	r5, r5, r1
 800d2de:	f025 0503 	bic.w	r5, r5, #3
 800d2e2:	3508      	adds	r5, #8
 800d2e4:	2d0c      	cmp	r5, #12
 800d2e6:	bf38      	it	cc
 800d2e8:	250c      	movcc	r5, #12
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	4638      	mov	r0, r7
 800d2ee:	f7ff ffa5 	bl	800d23c <sbrk_aligned>
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	d02b      	beq.n	800d34e <_malloc_r+0xd2>
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	442b      	add	r3, r5
 800d2fa:	6023      	str	r3, [r4, #0]
 800d2fc:	e00e      	b.n	800d31c <_malloc_r+0xa0>
 800d2fe:	6822      	ldr	r2, [r4, #0]
 800d300:	1b52      	subs	r2, r2, r5
 800d302:	d41e      	bmi.n	800d342 <_malloc_r+0xc6>
 800d304:	2a0b      	cmp	r2, #11
 800d306:	d916      	bls.n	800d336 <_malloc_r+0xba>
 800d308:	1961      	adds	r1, r4, r5
 800d30a:	42a3      	cmp	r3, r4
 800d30c:	6025      	str	r5, [r4, #0]
 800d30e:	bf18      	it	ne
 800d310:	6059      	strne	r1, [r3, #4]
 800d312:	6863      	ldr	r3, [r4, #4]
 800d314:	bf08      	it	eq
 800d316:	6031      	streq	r1, [r6, #0]
 800d318:	5162      	str	r2, [r4, r5]
 800d31a:	604b      	str	r3, [r1, #4]
 800d31c:	4638      	mov	r0, r7
 800d31e:	f104 060b 	add.w	r6, r4, #11
 800d322:	f001 f847 	bl	800e3b4 <__malloc_unlock>
 800d326:	f026 0607 	bic.w	r6, r6, #7
 800d32a:	1d23      	adds	r3, r4, #4
 800d32c:	1af2      	subs	r2, r6, r3
 800d32e:	d0b6      	beq.n	800d29e <_malloc_r+0x22>
 800d330:	1b9b      	subs	r3, r3, r6
 800d332:	50a3      	str	r3, [r4, r2]
 800d334:	e7b3      	b.n	800d29e <_malloc_r+0x22>
 800d336:	6862      	ldr	r2, [r4, #4]
 800d338:	42a3      	cmp	r3, r4
 800d33a:	bf0c      	ite	eq
 800d33c:	6032      	streq	r2, [r6, #0]
 800d33e:	605a      	strne	r2, [r3, #4]
 800d340:	e7ec      	b.n	800d31c <_malloc_r+0xa0>
 800d342:	4623      	mov	r3, r4
 800d344:	6864      	ldr	r4, [r4, #4]
 800d346:	e7b2      	b.n	800d2ae <_malloc_r+0x32>
 800d348:	4634      	mov	r4, r6
 800d34a:	6876      	ldr	r6, [r6, #4]
 800d34c:	e7b9      	b.n	800d2c2 <_malloc_r+0x46>
 800d34e:	230c      	movs	r3, #12
 800d350:	603b      	str	r3, [r7, #0]
 800d352:	4638      	mov	r0, r7
 800d354:	f001 f82e 	bl	800e3b4 <__malloc_unlock>
 800d358:	e7a1      	b.n	800d29e <_malloc_r+0x22>
 800d35a:	6025      	str	r5, [r4, #0]
 800d35c:	e7de      	b.n	800d31c <_malloc_r+0xa0>
 800d35e:	bf00      	nop
 800d360:	20006860 	.word	0x20006860

0800d364 <__ssputs_r>:
 800d364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d368:	688e      	ldr	r6, [r1, #8]
 800d36a:	429e      	cmp	r6, r3
 800d36c:	4682      	mov	sl, r0
 800d36e:	460c      	mov	r4, r1
 800d370:	4690      	mov	r8, r2
 800d372:	461f      	mov	r7, r3
 800d374:	d838      	bhi.n	800d3e8 <__ssputs_r+0x84>
 800d376:	898a      	ldrh	r2, [r1, #12]
 800d378:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d37c:	d032      	beq.n	800d3e4 <__ssputs_r+0x80>
 800d37e:	6825      	ldr	r5, [r4, #0]
 800d380:	6909      	ldr	r1, [r1, #16]
 800d382:	eba5 0901 	sub.w	r9, r5, r1
 800d386:	6965      	ldr	r5, [r4, #20]
 800d388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d38c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d390:	3301      	adds	r3, #1
 800d392:	444b      	add	r3, r9
 800d394:	106d      	asrs	r5, r5, #1
 800d396:	429d      	cmp	r5, r3
 800d398:	bf38      	it	cc
 800d39a:	461d      	movcc	r5, r3
 800d39c:	0553      	lsls	r3, r2, #21
 800d39e:	d531      	bpl.n	800d404 <__ssputs_r+0xa0>
 800d3a0:	4629      	mov	r1, r5
 800d3a2:	f7ff ff6b 	bl	800d27c <_malloc_r>
 800d3a6:	4606      	mov	r6, r0
 800d3a8:	b950      	cbnz	r0, 800d3c0 <__ssputs_r+0x5c>
 800d3aa:	230c      	movs	r3, #12
 800d3ac:	f8ca 3000 	str.w	r3, [sl]
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3b6:	81a3      	strh	r3, [r4, #12]
 800d3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c0:	6921      	ldr	r1, [r4, #16]
 800d3c2:	464a      	mov	r2, r9
 800d3c4:	f7fd ff88 	bl	800b2d8 <memcpy>
 800d3c8:	89a3      	ldrh	r3, [r4, #12]
 800d3ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3d2:	81a3      	strh	r3, [r4, #12]
 800d3d4:	6126      	str	r6, [r4, #16]
 800d3d6:	6165      	str	r5, [r4, #20]
 800d3d8:	444e      	add	r6, r9
 800d3da:	eba5 0509 	sub.w	r5, r5, r9
 800d3de:	6026      	str	r6, [r4, #0]
 800d3e0:	60a5      	str	r5, [r4, #8]
 800d3e2:	463e      	mov	r6, r7
 800d3e4:	42be      	cmp	r6, r7
 800d3e6:	d900      	bls.n	800d3ea <__ssputs_r+0x86>
 800d3e8:	463e      	mov	r6, r7
 800d3ea:	6820      	ldr	r0, [r4, #0]
 800d3ec:	4632      	mov	r2, r6
 800d3ee:	4641      	mov	r1, r8
 800d3f0:	f000 ffc0 	bl	800e374 <memmove>
 800d3f4:	68a3      	ldr	r3, [r4, #8]
 800d3f6:	1b9b      	subs	r3, r3, r6
 800d3f8:	60a3      	str	r3, [r4, #8]
 800d3fa:	6823      	ldr	r3, [r4, #0]
 800d3fc:	4433      	add	r3, r6
 800d3fe:	6023      	str	r3, [r4, #0]
 800d400:	2000      	movs	r0, #0
 800d402:	e7db      	b.n	800d3bc <__ssputs_r+0x58>
 800d404:	462a      	mov	r2, r5
 800d406:	f000 ffdb 	bl	800e3c0 <_realloc_r>
 800d40a:	4606      	mov	r6, r0
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d1e1      	bne.n	800d3d4 <__ssputs_r+0x70>
 800d410:	6921      	ldr	r1, [r4, #16]
 800d412:	4650      	mov	r0, sl
 800d414:	f7ff fec6 	bl	800d1a4 <_free_r>
 800d418:	e7c7      	b.n	800d3aa <__ssputs_r+0x46>
	...

0800d41c <_svfiprintf_r>:
 800d41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d420:	4698      	mov	r8, r3
 800d422:	898b      	ldrh	r3, [r1, #12]
 800d424:	061b      	lsls	r3, r3, #24
 800d426:	b09d      	sub	sp, #116	; 0x74
 800d428:	4607      	mov	r7, r0
 800d42a:	460d      	mov	r5, r1
 800d42c:	4614      	mov	r4, r2
 800d42e:	d50e      	bpl.n	800d44e <_svfiprintf_r+0x32>
 800d430:	690b      	ldr	r3, [r1, #16]
 800d432:	b963      	cbnz	r3, 800d44e <_svfiprintf_r+0x32>
 800d434:	2140      	movs	r1, #64	; 0x40
 800d436:	f7ff ff21 	bl	800d27c <_malloc_r>
 800d43a:	6028      	str	r0, [r5, #0]
 800d43c:	6128      	str	r0, [r5, #16]
 800d43e:	b920      	cbnz	r0, 800d44a <_svfiprintf_r+0x2e>
 800d440:	230c      	movs	r3, #12
 800d442:	603b      	str	r3, [r7, #0]
 800d444:	f04f 30ff 	mov.w	r0, #4294967295
 800d448:	e0d1      	b.n	800d5ee <_svfiprintf_r+0x1d2>
 800d44a:	2340      	movs	r3, #64	; 0x40
 800d44c:	616b      	str	r3, [r5, #20]
 800d44e:	2300      	movs	r3, #0
 800d450:	9309      	str	r3, [sp, #36]	; 0x24
 800d452:	2320      	movs	r3, #32
 800d454:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d458:	f8cd 800c 	str.w	r8, [sp, #12]
 800d45c:	2330      	movs	r3, #48	; 0x30
 800d45e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d608 <_svfiprintf_r+0x1ec>
 800d462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d466:	f04f 0901 	mov.w	r9, #1
 800d46a:	4623      	mov	r3, r4
 800d46c:	469a      	mov	sl, r3
 800d46e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d472:	b10a      	cbz	r2, 800d478 <_svfiprintf_r+0x5c>
 800d474:	2a25      	cmp	r2, #37	; 0x25
 800d476:	d1f9      	bne.n	800d46c <_svfiprintf_r+0x50>
 800d478:	ebba 0b04 	subs.w	fp, sl, r4
 800d47c:	d00b      	beq.n	800d496 <_svfiprintf_r+0x7a>
 800d47e:	465b      	mov	r3, fp
 800d480:	4622      	mov	r2, r4
 800d482:	4629      	mov	r1, r5
 800d484:	4638      	mov	r0, r7
 800d486:	f7ff ff6d 	bl	800d364 <__ssputs_r>
 800d48a:	3001      	adds	r0, #1
 800d48c:	f000 80aa 	beq.w	800d5e4 <_svfiprintf_r+0x1c8>
 800d490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d492:	445a      	add	r2, fp
 800d494:	9209      	str	r2, [sp, #36]	; 0x24
 800d496:	f89a 3000 	ldrb.w	r3, [sl]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 80a2 	beq.w	800d5e4 <_svfiprintf_r+0x1c8>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4aa:	f10a 0a01 	add.w	sl, sl, #1
 800d4ae:	9304      	str	r3, [sp, #16]
 800d4b0:	9307      	str	r3, [sp, #28]
 800d4b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4b6:	931a      	str	r3, [sp, #104]	; 0x68
 800d4b8:	4654      	mov	r4, sl
 800d4ba:	2205      	movs	r2, #5
 800d4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4c0:	4851      	ldr	r0, [pc, #324]	; (800d608 <_svfiprintf_r+0x1ec>)
 800d4c2:	f7f2 fea5 	bl	8000210 <memchr>
 800d4c6:	9a04      	ldr	r2, [sp, #16]
 800d4c8:	b9d8      	cbnz	r0, 800d502 <_svfiprintf_r+0xe6>
 800d4ca:	06d0      	lsls	r0, r2, #27
 800d4cc:	bf44      	itt	mi
 800d4ce:	2320      	movmi	r3, #32
 800d4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d4:	0711      	lsls	r1, r2, #28
 800d4d6:	bf44      	itt	mi
 800d4d8:	232b      	movmi	r3, #43	; 0x2b
 800d4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4de:	f89a 3000 	ldrb.w	r3, [sl]
 800d4e2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4e4:	d015      	beq.n	800d512 <_svfiprintf_r+0xf6>
 800d4e6:	9a07      	ldr	r2, [sp, #28]
 800d4e8:	4654      	mov	r4, sl
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	f04f 0c0a 	mov.w	ip, #10
 800d4f0:	4621      	mov	r1, r4
 800d4f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4f6:	3b30      	subs	r3, #48	; 0x30
 800d4f8:	2b09      	cmp	r3, #9
 800d4fa:	d94e      	bls.n	800d59a <_svfiprintf_r+0x17e>
 800d4fc:	b1b0      	cbz	r0, 800d52c <_svfiprintf_r+0x110>
 800d4fe:	9207      	str	r2, [sp, #28]
 800d500:	e014      	b.n	800d52c <_svfiprintf_r+0x110>
 800d502:	eba0 0308 	sub.w	r3, r0, r8
 800d506:	fa09 f303 	lsl.w	r3, r9, r3
 800d50a:	4313      	orrs	r3, r2
 800d50c:	9304      	str	r3, [sp, #16]
 800d50e:	46a2      	mov	sl, r4
 800d510:	e7d2      	b.n	800d4b8 <_svfiprintf_r+0x9c>
 800d512:	9b03      	ldr	r3, [sp, #12]
 800d514:	1d19      	adds	r1, r3, #4
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	9103      	str	r1, [sp, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	bfbb      	ittet	lt
 800d51e:	425b      	neglt	r3, r3
 800d520:	f042 0202 	orrlt.w	r2, r2, #2
 800d524:	9307      	strge	r3, [sp, #28]
 800d526:	9307      	strlt	r3, [sp, #28]
 800d528:	bfb8      	it	lt
 800d52a:	9204      	strlt	r2, [sp, #16]
 800d52c:	7823      	ldrb	r3, [r4, #0]
 800d52e:	2b2e      	cmp	r3, #46	; 0x2e
 800d530:	d10c      	bne.n	800d54c <_svfiprintf_r+0x130>
 800d532:	7863      	ldrb	r3, [r4, #1]
 800d534:	2b2a      	cmp	r3, #42	; 0x2a
 800d536:	d135      	bne.n	800d5a4 <_svfiprintf_r+0x188>
 800d538:	9b03      	ldr	r3, [sp, #12]
 800d53a:	1d1a      	adds	r2, r3, #4
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	9203      	str	r2, [sp, #12]
 800d540:	2b00      	cmp	r3, #0
 800d542:	bfb8      	it	lt
 800d544:	f04f 33ff 	movlt.w	r3, #4294967295
 800d548:	3402      	adds	r4, #2
 800d54a:	9305      	str	r3, [sp, #20]
 800d54c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d618 <_svfiprintf_r+0x1fc>
 800d550:	7821      	ldrb	r1, [r4, #0]
 800d552:	2203      	movs	r2, #3
 800d554:	4650      	mov	r0, sl
 800d556:	f7f2 fe5b 	bl	8000210 <memchr>
 800d55a:	b140      	cbz	r0, 800d56e <_svfiprintf_r+0x152>
 800d55c:	2340      	movs	r3, #64	; 0x40
 800d55e:	eba0 000a 	sub.w	r0, r0, sl
 800d562:	fa03 f000 	lsl.w	r0, r3, r0
 800d566:	9b04      	ldr	r3, [sp, #16]
 800d568:	4303      	orrs	r3, r0
 800d56a:	3401      	adds	r4, #1
 800d56c:	9304      	str	r3, [sp, #16]
 800d56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d572:	4826      	ldr	r0, [pc, #152]	; (800d60c <_svfiprintf_r+0x1f0>)
 800d574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d578:	2206      	movs	r2, #6
 800d57a:	f7f2 fe49 	bl	8000210 <memchr>
 800d57e:	2800      	cmp	r0, #0
 800d580:	d038      	beq.n	800d5f4 <_svfiprintf_r+0x1d8>
 800d582:	4b23      	ldr	r3, [pc, #140]	; (800d610 <_svfiprintf_r+0x1f4>)
 800d584:	bb1b      	cbnz	r3, 800d5ce <_svfiprintf_r+0x1b2>
 800d586:	9b03      	ldr	r3, [sp, #12]
 800d588:	3307      	adds	r3, #7
 800d58a:	f023 0307 	bic.w	r3, r3, #7
 800d58e:	3308      	adds	r3, #8
 800d590:	9303      	str	r3, [sp, #12]
 800d592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d594:	4433      	add	r3, r6
 800d596:	9309      	str	r3, [sp, #36]	; 0x24
 800d598:	e767      	b.n	800d46a <_svfiprintf_r+0x4e>
 800d59a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d59e:	460c      	mov	r4, r1
 800d5a0:	2001      	movs	r0, #1
 800d5a2:	e7a5      	b.n	800d4f0 <_svfiprintf_r+0xd4>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	3401      	adds	r4, #1
 800d5a8:	9305      	str	r3, [sp, #20]
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	f04f 0c0a 	mov.w	ip, #10
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5b6:	3a30      	subs	r2, #48	; 0x30
 800d5b8:	2a09      	cmp	r2, #9
 800d5ba:	d903      	bls.n	800d5c4 <_svfiprintf_r+0x1a8>
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d0c5      	beq.n	800d54c <_svfiprintf_r+0x130>
 800d5c0:	9105      	str	r1, [sp, #20]
 800d5c2:	e7c3      	b.n	800d54c <_svfiprintf_r+0x130>
 800d5c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e7f0      	b.n	800d5b0 <_svfiprintf_r+0x194>
 800d5ce:	ab03      	add	r3, sp, #12
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	462a      	mov	r2, r5
 800d5d4:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <_svfiprintf_r+0x1f8>)
 800d5d6:	a904      	add	r1, sp, #16
 800d5d8:	4638      	mov	r0, r7
 800d5da:	f7fd ff33 	bl	800b444 <_printf_float>
 800d5de:	1c42      	adds	r2, r0, #1
 800d5e0:	4606      	mov	r6, r0
 800d5e2:	d1d6      	bne.n	800d592 <_svfiprintf_r+0x176>
 800d5e4:	89ab      	ldrh	r3, [r5, #12]
 800d5e6:	065b      	lsls	r3, r3, #25
 800d5e8:	f53f af2c 	bmi.w	800d444 <_svfiprintf_r+0x28>
 800d5ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5ee:	b01d      	add	sp, #116	; 0x74
 800d5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f4:	ab03      	add	r3, sp, #12
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	462a      	mov	r2, r5
 800d5fa:	4b06      	ldr	r3, [pc, #24]	; (800d614 <_svfiprintf_r+0x1f8>)
 800d5fc:	a904      	add	r1, sp, #16
 800d5fe:	4638      	mov	r0, r7
 800d600:	f7fe f9c4 	bl	800b98c <_printf_i>
 800d604:	e7eb      	b.n	800d5de <_svfiprintf_r+0x1c2>
 800d606:	bf00      	nop
 800d608:	0800fd8c 	.word	0x0800fd8c
 800d60c:	0800fd96 	.word	0x0800fd96
 800d610:	0800b445 	.word	0x0800b445
 800d614:	0800d365 	.word	0x0800d365
 800d618:	0800fd92 	.word	0x0800fd92

0800d61c <_sungetc_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	1c4b      	adds	r3, r1, #1
 800d620:	4614      	mov	r4, r2
 800d622:	d103      	bne.n	800d62c <_sungetc_r+0x10>
 800d624:	f04f 35ff 	mov.w	r5, #4294967295
 800d628:	4628      	mov	r0, r5
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	8993      	ldrh	r3, [r2, #12]
 800d62e:	f023 0320 	bic.w	r3, r3, #32
 800d632:	8193      	strh	r3, [r2, #12]
 800d634:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d636:	6852      	ldr	r2, [r2, #4]
 800d638:	b2cd      	uxtb	r5, r1
 800d63a:	b18b      	cbz	r3, 800d660 <_sungetc_r+0x44>
 800d63c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d63e:	4293      	cmp	r3, r2
 800d640:	dd08      	ble.n	800d654 <_sungetc_r+0x38>
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	1e5a      	subs	r2, r3, #1
 800d646:	6022      	str	r2, [r4, #0]
 800d648:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d64c:	6863      	ldr	r3, [r4, #4]
 800d64e:	3301      	adds	r3, #1
 800d650:	6063      	str	r3, [r4, #4]
 800d652:	e7e9      	b.n	800d628 <_sungetc_r+0xc>
 800d654:	4621      	mov	r1, r4
 800d656:	f000 fc57 	bl	800df08 <__submore>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d0f1      	beq.n	800d642 <_sungetc_r+0x26>
 800d65e:	e7e1      	b.n	800d624 <_sungetc_r+0x8>
 800d660:	6921      	ldr	r1, [r4, #16]
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	b151      	cbz	r1, 800d67c <_sungetc_r+0x60>
 800d666:	4299      	cmp	r1, r3
 800d668:	d208      	bcs.n	800d67c <_sungetc_r+0x60>
 800d66a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d66e:	42a9      	cmp	r1, r5
 800d670:	d104      	bne.n	800d67c <_sungetc_r+0x60>
 800d672:	3b01      	subs	r3, #1
 800d674:	3201      	adds	r2, #1
 800d676:	6023      	str	r3, [r4, #0]
 800d678:	6062      	str	r2, [r4, #4]
 800d67a:	e7d5      	b.n	800d628 <_sungetc_r+0xc>
 800d67c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d684:	6363      	str	r3, [r4, #52]	; 0x34
 800d686:	2303      	movs	r3, #3
 800d688:	63a3      	str	r3, [r4, #56]	; 0x38
 800d68a:	4623      	mov	r3, r4
 800d68c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d690:	6023      	str	r3, [r4, #0]
 800d692:	2301      	movs	r3, #1
 800d694:	e7dc      	b.n	800d650 <_sungetc_r+0x34>

0800d696 <__ssrefill_r>:
 800d696:	b510      	push	{r4, lr}
 800d698:	460c      	mov	r4, r1
 800d69a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d69c:	b169      	cbz	r1, 800d6ba <__ssrefill_r+0x24>
 800d69e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6a2:	4299      	cmp	r1, r3
 800d6a4:	d001      	beq.n	800d6aa <__ssrefill_r+0x14>
 800d6a6:	f7ff fd7d 	bl	800d1a4 <_free_r>
 800d6aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6ac:	6063      	str	r3, [r4, #4]
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	6360      	str	r0, [r4, #52]	; 0x34
 800d6b2:	b113      	cbz	r3, 800d6ba <__ssrefill_r+0x24>
 800d6b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d6b6:	6023      	str	r3, [r4, #0]
 800d6b8:	bd10      	pop	{r4, pc}
 800d6ba:	6923      	ldr	r3, [r4, #16]
 800d6bc:	6023      	str	r3, [r4, #0]
 800d6be:	2300      	movs	r3, #0
 800d6c0:	6063      	str	r3, [r4, #4]
 800d6c2:	89a3      	ldrh	r3, [r4, #12]
 800d6c4:	f043 0320 	orr.w	r3, r3, #32
 800d6c8:	81a3      	strh	r3, [r4, #12]
 800d6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ce:	e7f3      	b.n	800d6b8 <__ssrefill_r+0x22>

0800d6d0 <__ssvfiscanf_r>:
 800d6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d6da:	2100      	movs	r1, #0
 800d6dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d6e0:	49a6      	ldr	r1, [pc, #664]	; (800d97c <__ssvfiscanf_r+0x2ac>)
 800d6e2:	91a0      	str	r1, [sp, #640]	; 0x280
 800d6e4:	f10d 0804 	add.w	r8, sp, #4
 800d6e8:	49a5      	ldr	r1, [pc, #660]	; (800d980 <__ssvfiscanf_r+0x2b0>)
 800d6ea:	4fa6      	ldr	r7, [pc, #664]	; (800d984 <__ssvfiscanf_r+0x2b4>)
 800d6ec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d988 <__ssvfiscanf_r+0x2b8>
 800d6f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	91a1      	str	r1, [sp, #644]	; 0x284
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	7813      	ldrb	r3, [r2, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	f000 815a 	beq.w	800d9b6 <__ssvfiscanf_r+0x2e6>
 800d702:	5dd9      	ldrb	r1, [r3, r7]
 800d704:	f011 0108 	ands.w	r1, r1, #8
 800d708:	f102 0501 	add.w	r5, r2, #1
 800d70c:	d019      	beq.n	800d742 <__ssvfiscanf_r+0x72>
 800d70e:	6863      	ldr	r3, [r4, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	dd0f      	ble.n	800d734 <__ssvfiscanf_r+0x64>
 800d714:	6823      	ldr	r3, [r4, #0]
 800d716:	781a      	ldrb	r2, [r3, #0]
 800d718:	5cba      	ldrb	r2, [r7, r2]
 800d71a:	0712      	lsls	r2, r2, #28
 800d71c:	d401      	bmi.n	800d722 <__ssvfiscanf_r+0x52>
 800d71e:	462a      	mov	r2, r5
 800d720:	e7eb      	b.n	800d6fa <__ssvfiscanf_r+0x2a>
 800d722:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d724:	3201      	adds	r2, #1
 800d726:	9245      	str	r2, [sp, #276]	; 0x114
 800d728:	6862      	ldr	r2, [r4, #4]
 800d72a:	3301      	adds	r3, #1
 800d72c:	3a01      	subs	r2, #1
 800d72e:	6062      	str	r2, [r4, #4]
 800d730:	6023      	str	r3, [r4, #0]
 800d732:	e7ec      	b.n	800d70e <__ssvfiscanf_r+0x3e>
 800d734:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d736:	4621      	mov	r1, r4
 800d738:	4630      	mov	r0, r6
 800d73a:	4798      	blx	r3
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d0e9      	beq.n	800d714 <__ssvfiscanf_r+0x44>
 800d740:	e7ed      	b.n	800d71e <__ssvfiscanf_r+0x4e>
 800d742:	2b25      	cmp	r3, #37	; 0x25
 800d744:	d012      	beq.n	800d76c <__ssvfiscanf_r+0x9c>
 800d746:	469a      	mov	sl, r3
 800d748:	6863      	ldr	r3, [r4, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f340 8091 	ble.w	800d872 <__ssvfiscanf_r+0x1a2>
 800d750:	6822      	ldr	r2, [r4, #0]
 800d752:	7813      	ldrb	r3, [r2, #0]
 800d754:	4553      	cmp	r3, sl
 800d756:	f040 812e 	bne.w	800d9b6 <__ssvfiscanf_r+0x2e6>
 800d75a:	6863      	ldr	r3, [r4, #4]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	6063      	str	r3, [r4, #4]
 800d760:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d762:	3201      	adds	r2, #1
 800d764:	3301      	adds	r3, #1
 800d766:	6022      	str	r2, [r4, #0]
 800d768:	9345      	str	r3, [sp, #276]	; 0x114
 800d76a:	e7d8      	b.n	800d71e <__ssvfiscanf_r+0x4e>
 800d76c:	9141      	str	r1, [sp, #260]	; 0x104
 800d76e:	9143      	str	r1, [sp, #268]	; 0x10c
 800d770:	7853      	ldrb	r3, [r2, #1]
 800d772:	2b2a      	cmp	r3, #42	; 0x2a
 800d774:	bf02      	ittt	eq
 800d776:	2310      	moveq	r3, #16
 800d778:	1c95      	addeq	r5, r2, #2
 800d77a:	9341      	streq	r3, [sp, #260]	; 0x104
 800d77c:	220a      	movs	r2, #10
 800d77e:	46aa      	mov	sl, r5
 800d780:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d784:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d788:	2b09      	cmp	r3, #9
 800d78a:	d91d      	bls.n	800d7c8 <__ssvfiscanf_r+0xf8>
 800d78c:	487e      	ldr	r0, [pc, #504]	; (800d988 <__ssvfiscanf_r+0x2b8>)
 800d78e:	2203      	movs	r2, #3
 800d790:	f7f2 fd3e 	bl	8000210 <memchr>
 800d794:	b140      	cbz	r0, 800d7a8 <__ssvfiscanf_r+0xd8>
 800d796:	2301      	movs	r3, #1
 800d798:	eba0 0009 	sub.w	r0, r0, r9
 800d79c:	fa03 f000 	lsl.w	r0, r3, r0
 800d7a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d7a2:	4318      	orrs	r0, r3
 800d7a4:	9041      	str	r0, [sp, #260]	; 0x104
 800d7a6:	4655      	mov	r5, sl
 800d7a8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d7ac:	2b78      	cmp	r3, #120	; 0x78
 800d7ae:	d806      	bhi.n	800d7be <__ssvfiscanf_r+0xee>
 800d7b0:	2b57      	cmp	r3, #87	; 0x57
 800d7b2:	d810      	bhi.n	800d7d6 <__ssvfiscanf_r+0x106>
 800d7b4:	2b25      	cmp	r3, #37	; 0x25
 800d7b6:	d0c6      	beq.n	800d746 <__ssvfiscanf_r+0x76>
 800d7b8:	d856      	bhi.n	800d868 <__ssvfiscanf_r+0x198>
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d064      	beq.n	800d888 <__ssvfiscanf_r+0x1b8>
 800d7be:	2303      	movs	r3, #3
 800d7c0:	9347      	str	r3, [sp, #284]	; 0x11c
 800d7c2:	230a      	movs	r3, #10
 800d7c4:	9342      	str	r3, [sp, #264]	; 0x108
 800d7c6:	e071      	b.n	800d8ac <__ssvfiscanf_r+0x1dc>
 800d7c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d7ca:	fb02 1103 	mla	r1, r2, r3, r1
 800d7ce:	3930      	subs	r1, #48	; 0x30
 800d7d0:	9143      	str	r1, [sp, #268]	; 0x10c
 800d7d2:	4655      	mov	r5, sl
 800d7d4:	e7d3      	b.n	800d77e <__ssvfiscanf_r+0xae>
 800d7d6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d7da:	2a20      	cmp	r2, #32
 800d7dc:	d8ef      	bhi.n	800d7be <__ssvfiscanf_r+0xee>
 800d7de:	a101      	add	r1, pc, #4	; (adr r1, 800d7e4 <__ssvfiscanf_r+0x114>)
 800d7e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d7e4:	0800d897 	.word	0x0800d897
 800d7e8:	0800d7bf 	.word	0x0800d7bf
 800d7ec:	0800d7bf 	.word	0x0800d7bf
 800d7f0:	0800d8f5 	.word	0x0800d8f5
 800d7f4:	0800d7bf 	.word	0x0800d7bf
 800d7f8:	0800d7bf 	.word	0x0800d7bf
 800d7fc:	0800d7bf 	.word	0x0800d7bf
 800d800:	0800d7bf 	.word	0x0800d7bf
 800d804:	0800d7bf 	.word	0x0800d7bf
 800d808:	0800d7bf 	.word	0x0800d7bf
 800d80c:	0800d7bf 	.word	0x0800d7bf
 800d810:	0800d90b 	.word	0x0800d90b
 800d814:	0800d8e1 	.word	0x0800d8e1
 800d818:	0800d86f 	.word	0x0800d86f
 800d81c:	0800d86f 	.word	0x0800d86f
 800d820:	0800d86f 	.word	0x0800d86f
 800d824:	0800d7bf 	.word	0x0800d7bf
 800d828:	0800d8e5 	.word	0x0800d8e5
 800d82c:	0800d7bf 	.word	0x0800d7bf
 800d830:	0800d7bf 	.word	0x0800d7bf
 800d834:	0800d7bf 	.word	0x0800d7bf
 800d838:	0800d7bf 	.word	0x0800d7bf
 800d83c:	0800d91b 	.word	0x0800d91b
 800d840:	0800d8ed 	.word	0x0800d8ed
 800d844:	0800d88f 	.word	0x0800d88f
 800d848:	0800d7bf 	.word	0x0800d7bf
 800d84c:	0800d7bf 	.word	0x0800d7bf
 800d850:	0800d917 	.word	0x0800d917
 800d854:	0800d7bf 	.word	0x0800d7bf
 800d858:	0800d8e1 	.word	0x0800d8e1
 800d85c:	0800d7bf 	.word	0x0800d7bf
 800d860:	0800d7bf 	.word	0x0800d7bf
 800d864:	0800d897 	.word	0x0800d897
 800d868:	3b45      	subs	r3, #69	; 0x45
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d8a7      	bhi.n	800d7be <__ssvfiscanf_r+0xee>
 800d86e:	2305      	movs	r3, #5
 800d870:	e01b      	b.n	800d8aa <__ssvfiscanf_r+0x1da>
 800d872:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d874:	4621      	mov	r1, r4
 800d876:	4630      	mov	r0, r6
 800d878:	4798      	blx	r3
 800d87a:	2800      	cmp	r0, #0
 800d87c:	f43f af68 	beq.w	800d750 <__ssvfiscanf_r+0x80>
 800d880:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d882:	2800      	cmp	r0, #0
 800d884:	f040 808d 	bne.w	800d9a2 <__ssvfiscanf_r+0x2d2>
 800d888:	f04f 30ff 	mov.w	r0, #4294967295
 800d88c:	e08f      	b.n	800d9ae <__ssvfiscanf_r+0x2de>
 800d88e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d890:	f042 0220 	orr.w	r2, r2, #32
 800d894:	9241      	str	r2, [sp, #260]	; 0x104
 800d896:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d89c:	9241      	str	r2, [sp, #260]	; 0x104
 800d89e:	2210      	movs	r2, #16
 800d8a0:	2b6f      	cmp	r3, #111	; 0x6f
 800d8a2:	9242      	str	r2, [sp, #264]	; 0x108
 800d8a4:	bf34      	ite	cc
 800d8a6:	2303      	movcc	r3, #3
 800d8a8:	2304      	movcs	r3, #4
 800d8aa:	9347      	str	r3, [sp, #284]	; 0x11c
 800d8ac:	6863      	ldr	r3, [r4, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	dd42      	ble.n	800d938 <__ssvfiscanf_r+0x268>
 800d8b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d8b4:	0659      	lsls	r1, r3, #25
 800d8b6:	d404      	bmi.n	800d8c2 <__ssvfiscanf_r+0x1f2>
 800d8b8:	6823      	ldr	r3, [r4, #0]
 800d8ba:	781a      	ldrb	r2, [r3, #0]
 800d8bc:	5cba      	ldrb	r2, [r7, r2]
 800d8be:	0712      	lsls	r2, r2, #28
 800d8c0:	d441      	bmi.n	800d946 <__ssvfiscanf_r+0x276>
 800d8c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	dc50      	bgt.n	800d96a <__ssvfiscanf_r+0x29a>
 800d8c8:	466b      	mov	r3, sp
 800d8ca:	4622      	mov	r2, r4
 800d8cc:	a941      	add	r1, sp, #260	; 0x104
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	f000 f876 	bl	800d9c0 <_scanf_chars>
 800d8d4:	2801      	cmp	r0, #1
 800d8d6:	d06e      	beq.n	800d9b6 <__ssvfiscanf_r+0x2e6>
 800d8d8:	2802      	cmp	r0, #2
 800d8da:	f47f af20 	bne.w	800d71e <__ssvfiscanf_r+0x4e>
 800d8de:	e7cf      	b.n	800d880 <__ssvfiscanf_r+0x1b0>
 800d8e0:	220a      	movs	r2, #10
 800d8e2:	e7dd      	b.n	800d8a0 <__ssvfiscanf_r+0x1d0>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	9342      	str	r3, [sp, #264]	; 0x108
 800d8e8:	2303      	movs	r3, #3
 800d8ea:	e7de      	b.n	800d8aa <__ssvfiscanf_r+0x1da>
 800d8ec:	2308      	movs	r3, #8
 800d8ee:	9342      	str	r3, [sp, #264]	; 0x108
 800d8f0:	2304      	movs	r3, #4
 800d8f2:	e7da      	b.n	800d8aa <__ssvfiscanf_r+0x1da>
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	f000 f9d6 	bl	800dca8 <__sccl>
 800d8fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d902:	9341      	str	r3, [sp, #260]	; 0x104
 800d904:	4605      	mov	r5, r0
 800d906:	2301      	movs	r3, #1
 800d908:	e7cf      	b.n	800d8aa <__ssvfiscanf_r+0x1da>
 800d90a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d910:	9341      	str	r3, [sp, #260]	; 0x104
 800d912:	2300      	movs	r3, #0
 800d914:	e7c9      	b.n	800d8aa <__ssvfiscanf_r+0x1da>
 800d916:	2302      	movs	r3, #2
 800d918:	e7c7      	b.n	800d8aa <__ssvfiscanf_r+0x1da>
 800d91a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d91c:	06c3      	lsls	r3, r0, #27
 800d91e:	f53f aefe 	bmi.w	800d71e <__ssvfiscanf_r+0x4e>
 800d922:	9b00      	ldr	r3, [sp, #0]
 800d924:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d926:	1d19      	adds	r1, r3, #4
 800d928:	9100      	str	r1, [sp, #0]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f010 0f01 	tst.w	r0, #1
 800d930:	bf14      	ite	ne
 800d932:	801a      	strhne	r2, [r3, #0]
 800d934:	601a      	streq	r2, [r3, #0]
 800d936:	e6f2      	b.n	800d71e <__ssvfiscanf_r+0x4e>
 800d938:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d93a:	4621      	mov	r1, r4
 800d93c:	4630      	mov	r0, r6
 800d93e:	4798      	blx	r3
 800d940:	2800      	cmp	r0, #0
 800d942:	d0b6      	beq.n	800d8b2 <__ssvfiscanf_r+0x1e2>
 800d944:	e79c      	b.n	800d880 <__ssvfiscanf_r+0x1b0>
 800d946:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d948:	3201      	adds	r2, #1
 800d94a:	9245      	str	r2, [sp, #276]	; 0x114
 800d94c:	6862      	ldr	r2, [r4, #4]
 800d94e:	3a01      	subs	r2, #1
 800d950:	2a00      	cmp	r2, #0
 800d952:	6062      	str	r2, [r4, #4]
 800d954:	dd02      	ble.n	800d95c <__ssvfiscanf_r+0x28c>
 800d956:	3301      	adds	r3, #1
 800d958:	6023      	str	r3, [r4, #0]
 800d95a:	e7ad      	b.n	800d8b8 <__ssvfiscanf_r+0x1e8>
 800d95c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d95e:	4621      	mov	r1, r4
 800d960:	4630      	mov	r0, r6
 800d962:	4798      	blx	r3
 800d964:	2800      	cmp	r0, #0
 800d966:	d0a7      	beq.n	800d8b8 <__ssvfiscanf_r+0x1e8>
 800d968:	e78a      	b.n	800d880 <__ssvfiscanf_r+0x1b0>
 800d96a:	2b04      	cmp	r3, #4
 800d96c:	dc0e      	bgt.n	800d98c <__ssvfiscanf_r+0x2bc>
 800d96e:	466b      	mov	r3, sp
 800d970:	4622      	mov	r2, r4
 800d972:	a941      	add	r1, sp, #260	; 0x104
 800d974:	4630      	mov	r0, r6
 800d976:	f000 f87d 	bl	800da74 <_scanf_i>
 800d97a:	e7ab      	b.n	800d8d4 <__ssvfiscanf_r+0x204>
 800d97c:	0800d61d 	.word	0x0800d61d
 800d980:	0800d697 	.word	0x0800d697
 800d984:	0800fa9f 	.word	0x0800fa9f
 800d988:	0800fd92 	.word	0x0800fd92
 800d98c:	4b0b      	ldr	r3, [pc, #44]	; (800d9bc <__ssvfiscanf_r+0x2ec>)
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f43f aec5 	beq.w	800d71e <__ssvfiscanf_r+0x4e>
 800d994:	466b      	mov	r3, sp
 800d996:	4622      	mov	r2, r4
 800d998:	a941      	add	r1, sp, #260	; 0x104
 800d99a:	4630      	mov	r0, r6
 800d99c:	f3af 8000 	nop.w
 800d9a0:	e798      	b.n	800d8d4 <__ssvfiscanf_r+0x204>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d9a8:	bf18      	it	ne
 800d9aa:	f04f 30ff 	movne.w	r0, #4294967295
 800d9ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d9b8:	e7f9      	b.n	800d9ae <__ssvfiscanf_r+0x2de>
 800d9ba:	bf00      	nop
 800d9bc:	00000000 	.word	0x00000000

0800d9c0 <_scanf_chars>:
 800d9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9c4:	4615      	mov	r5, r2
 800d9c6:	688a      	ldr	r2, [r1, #8]
 800d9c8:	4680      	mov	r8, r0
 800d9ca:	460c      	mov	r4, r1
 800d9cc:	b932      	cbnz	r2, 800d9dc <_scanf_chars+0x1c>
 800d9ce:	698a      	ldr	r2, [r1, #24]
 800d9d0:	2a00      	cmp	r2, #0
 800d9d2:	bf0c      	ite	eq
 800d9d4:	2201      	moveq	r2, #1
 800d9d6:	f04f 32ff 	movne.w	r2, #4294967295
 800d9da:	608a      	str	r2, [r1, #8]
 800d9dc:	6822      	ldr	r2, [r4, #0]
 800d9de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800da70 <_scanf_chars+0xb0>
 800d9e2:	06d1      	lsls	r1, r2, #27
 800d9e4:	bf5f      	itttt	pl
 800d9e6:	681a      	ldrpl	r2, [r3, #0]
 800d9e8:	1d11      	addpl	r1, r2, #4
 800d9ea:	6019      	strpl	r1, [r3, #0]
 800d9ec:	6816      	ldrpl	r6, [r2, #0]
 800d9ee:	2700      	movs	r7, #0
 800d9f0:	69a0      	ldr	r0, [r4, #24]
 800d9f2:	b188      	cbz	r0, 800da18 <_scanf_chars+0x58>
 800d9f4:	2801      	cmp	r0, #1
 800d9f6:	d107      	bne.n	800da08 <_scanf_chars+0x48>
 800d9f8:	682a      	ldr	r2, [r5, #0]
 800d9fa:	7811      	ldrb	r1, [r2, #0]
 800d9fc:	6962      	ldr	r2, [r4, #20]
 800d9fe:	5c52      	ldrb	r2, [r2, r1]
 800da00:	b952      	cbnz	r2, 800da18 <_scanf_chars+0x58>
 800da02:	2f00      	cmp	r7, #0
 800da04:	d031      	beq.n	800da6a <_scanf_chars+0xaa>
 800da06:	e022      	b.n	800da4e <_scanf_chars+0x8e>
 800da08:	2802      	cmp	r0, #2
 800da0a:	d120      	bne.n	800da4e <_scanf_chars+0x8e>
 800da0c:	682b      	ldr	r3, [r5, #0]
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	f813 3009 	ldrb.w	r3, [r3, r9]
 800da14:	071b      	lsls	r3, r3, #28
 800da16:	d41a      	bmi.n	800da4e <_scanf_chars+0x8e>
 800da18:	6823      	ldr	r3, [r4, #0]
 800da1a:	06da      	lsls	r2, r3, #27
 800da1c:	bf5e      	ittt	pl
 800da1e:	682b      	ldrpl	r3, [r5, #0]
 800da20:	781b      	ldrbpl	r3, [r3, #0]
 800da22:	f806 3b01 	strbpl.w	r3, [r6], #1
 800da26:	682a      	ldr	r2, [r5, #0]
 800da28:	686b      	ldr	r3, [r5, #4]
 800da2a:	3201      	adds	r2, #1
 800da2c:	602a      	str	r2, [r5, #0]
 800da2e:	68a2      	ldr	r2, [r4, #8]
 800da30:	3b01      	subs	r3, #1
 800da32:	3a01      	subs	r2, #1
 800da34:	606b      	str	r3, [r5, #4]
 800da36:	3701      	adds	r7, #1
 800da38:	60a2      	str	r2, [r4, #8]
 800da3a:	b142      	cbz	r2, 800da4e <_scanf_chars+0x8e>
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	dcd7      	bgt.n	800d9f0 <_scanf_chars+0x30>
 800da40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800da44:	4629      	mov	r1, r5
 800da46:	4640      	mov	r0, r8
 800da48:	4798      	blx	r3
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d0d0      	beq.n	800d9f0 <_scanf_chars+0x30>
 800da4e:	6823      	ldr	r3, [r4, #0]
 800da50:	f013 0310 	ands.w	r3, r3, #16
 800da54:	d105      	bne.n	800da62 <_scanf_chars+0xa2>
 800da56:	68e2      	ldr	r2, [r4, #12]
 800da58:	3201      	adds	r2, #1
 800da5a:	60e2      	str	r2, [r4, #12]
 800da5c:	69a2      	ldr	r2, [r4, #24]
 800da5e:	b102      	cbz	r2, 800da62 <_scanf_chars+0xa2>
 800da60:	7033      	strb	r3, [r6, #0]
 800da62:	6923      	ldr	r3, [r4, #16]
 800da64:	443b      	add	r3, r7
 800da66:	6123      	str	r3, [r4, #16]
 800da68:	2000      	movs	r0, #0
 800da6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da6e:	bf00      	nop
 800da70:	0800fa9f 	.word	0x0800fa9f

0800da74 <_scanf_i>:
 800da74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da78:	4698      	mov	r8, r3
 800da7a:	4b76      	ldr	r3, [pc, #472]	; (800dc54 <_scanf_i+0x1e0>)
 800da7c:	460c      	mov	r4, r1
 800da7e:	4682      	mov	sl, r0
 800da80:	4616      	mov	r6, r2
 800da82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800da86:	b087      	sub	sp, #28
 800da88:	ab03      	add	r3, sp, #12
 800da8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800da8e:	4b72      	ldr	r3, [pc, #456]	; (800dc58 <_scanf_i+0x1e4>)
 800da90:	69a1      	ldr	r1, [r4, #24]
 800da92:	4a72      	ldr	r2, [pc, #456]	; (800dc5c <_scanf_i+0x1e8>)
 800da94:	2903      	cmp	r1, #3
 800da96:	bf18      	it	ne
 800da98:	461a      	movne	r2, r3
 800da9a:	68a3      	ldr	r3, [r4, #8]
 800da9c:	9201      	str	r2, [sp, #4]
 800da9e:	1e5a      	subs	r2, r3, #1
 800daa0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800daa4:	bf88      	it	hi
 800daa6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800daaa:	4627      	mov	r7, r4
 800daac:	bf82      	ittt	hi
 800daae:	eb03 0905 	addhi.w	r9, r3, r5
 800dab2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dab6:	60a3      	strhi	r3, [r4, #8]
 800dab8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dabc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800dac0:	bf98      	it	ls
 800dac2:	f04f 0900 	movls.w	r9, #0
 800dac6:	6023      	str	r3, [r4, #0]
 800dac8:	463d      	mov	r5, r7
 800daca:	f04f 0b00 	mov.w	fp, #0
 800dace:	6831      	ldr	r1, [r6, #0]
 800dad0:	ab03      	add	r3, sp, #12
 800dad2:	7809      	ldrb	r1, [r1, #0]
 800dad4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dad8:	2202      	movs	r2, #2
 800dada:	f7f2 fb99 	bl	8000210 <memchr>
 800dade:	b328      	cbz	r0, 800db2c <_scanf_i+0xb8>
 800dae0:	f1bb 0f01 	cmp.w	fp, #1
 800dae4:	d159      	bne.n	800db9a <_scanf_i+0x126>
 800dae6:	6862      	ldr	r2, [r4, #4]
 800dae8:	b92a      	cbnz	r2, 800daf6 <_scanf_i+0x82>
 800daea:	6822      	ldr	r2, [r4, #0]
 800daec:	2308      	movs	r3, #8
 800daee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800daf2:	6063      	str	r3, [r4, #4]
 800daf4:	6022      	str	r2, [r4, #0]
 800daf6:	6822      	ldr	r2, [r4, #0]
 800daf8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800dafc:	6022      	str	r2, [r4, #0]
 800dafe:	68a2      	ldr	r2, [r4, #8]
 800db00:	1e51      	subs	r1, r2, #1
 800db02:	60a1      	str	r1, [r4, #8]
 800db04:	b192      	cbz	r2, 800db2c <_scanf_i+0xb8>
 800db06:	6832      	ldr	r2, [r6, #0]
 800db08:	1c51      	adds	r1, r2, #1
 800db0a:	6031      	str	r1, [r6, #0]
 800db0c:	7812      	ldrb	r2, [r2, #0]
 800db0e:	f805 2b01 	strb.w	r2, [r5], #1
 800db12:	6872      	ldr	r2, [r6, #4]
 800db14:	3a01      	subs	r2, #1
 800db16:	2a00      	cmp	r2, #0
 800db18:	6072      	str	r2, [r6, #4]
 800db1a:	dc07      	bgt.n	800db2c <_scanf_i+0xb8>
 800db1c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800db20:	4631      	mov	r1, r6
 800db22:	4650      	mov	r0, sl
 800db24:	4790      	blx	r2
 800db26:	2800      	cmp	r0, #0
 800db28:	f040 8085 	bne.w	800dc36 <_scanf_i+0x1c2>
 800db2c:	f10b 0b01 	add.w	fp, fp, #1
 800db30:	f1bb 0f03 	cmp.w	fp, #3
 800db34:	d1cb      	bne.n	800dace <_scanf_i+0x5a>
 800db36:	6863      	ldr	r3, [r4, #4]
 800db38:	b90b      	cbnz	r3, 800db3e <_scanf_i+0xca>
 800db3a:	230a      	movs	r3, #10
 800db3c:	6063      	str	r3, [r4, #4]
 800db3e:	6863      	ldr	r3, [r4, #4]
 800db40:	4947      	ldr	r1, [pc, #284]	; (800dc60 <_scanf_i+0x1ec>)
 800db42:	6960      	ldr	r0, [r4, #20]
 800db44:	1ac9      	subs	r1, r1, r3
 800db46:	f000 f8af 	bl	800dca8 <__sccl>
 800db4a:	f04f 0b00 	mov.w	fp, #0
 800db4e:	68a3      	ldr	r3, [r4, #8]
 800db50:	6822      	ldr	r2, [r4, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d03d      	beq.n	800dbd2 <_scanf_i+0x15e>
 800db56:	6831      	ldr	r1, [r6, #0]
 800db58:	6960      	ldr	r0, [r4, #20]
 800db5a:	f891 c000 	ldrb.w	ip, [r1]
 800db5e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800db62:	2800      	cmp	r0, #0
 800db64:	d035      	beq.n	800dbd2 <_scanf_i+0x15e>
 800db66:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800db6a:	d124      	bne.n	800dbb6 <_scanf_i+0x142>
 800db6c:	0510      	lsls	r0, r2, #20
 800db6e:	d522      	bpl.n	800dbb6 <_scanf_i+0x142>
 800db70:	f10b 0b01 	add.w	fp, fp, #1
 800db74:	f1b9 0f00 	cmp.w	r9, #0
 800db78:	d003      	beq.n	800db82 <_scanf_i+0x10e>
 800db7a:	3301      	adds	r3, #1
 800db7c:	f109 39ff 	add.w	r9, r9, #4294967295
 800db80:	60a3      	str	r3, [r4, #8]
 800db82:	6873      	ldr	r3, [r6, #4]
 800db84:	3b01      	subs	r3, #1
 800db86:	2b00      	cmp	r3, #0
 800db88:	6073      	str	r3, [r6, #4]
 800db8a:	dd1b      	ble.n	800dbc4 <_scanf_i+0x150>
 800db8c:	6833      	ldr	r3, [r6, #0]
 800db8e:	3301      	adds	r3, #1
 800db90:	6033      	str	r3, [r6, #0]
 800db92:	68a3      	ldr	r3, [r4, #8]
 800db94:	3b01      	subs	r3, #1
 800db96:	60a3      	str	r3, [r4, #8]
 800db98:	e7d9      	b.n	800db4e <_scanf_i+0xda>
 800db9a:	f1bb 0f02 	cmp.w	fp, #2
 800db9e:	d1ae      	bne.n	800dafe <_scanf_i+0x8a>
 800dba0:	6822      	ldr	r2, [r4, #0]
 800dba2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800dba6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dbaa:	d1bf      	bne.n	800db2c <_scanf_i+0xb8>
 800dbac:	2310      	movs	r3, #16
 800dbae:	6063      	str	r3, [r4, #4]
 800dbb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dbb4:	e7a2      	b.n	800dafc <_scanf_i+0x88>
 800dbb6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800dbba:	6022      	str	r2, [r4, #0]
 800dbbc:	780b      	ldrb	r3, [r1, #0]
 800dbbe:	f805 3b01 	strb.w	r3, [r5], #1
 800dbc2:	e7de      	b.n	800db82 <_scanf_i+0x10e>
 800dbc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dbc8:	4631      	mov	r1, r6
 800dbca:	4650      	mov	r0, sl
 800dbcc:	4798      	blx	r3
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d0df      	beq.n	800db92 <_scanf_i+0x11e>
 800dbd2:	6823      	ldr	r3, [r4, #0]
 800dbd4:	05db      	lsls	r3, r3, #23
 800dbd6:	d50d      	bpl.n	800dbf4 <_scanf_i+0x180>
 800dbd8:	42bd      	cmp	r5, r7
 800dbda:	d909      	bls.n	800dbf0 <_scanf_i+0x17c>
 800dbdc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dbe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbe4:	4632      	mov	r2, r6
 800dbe6:	4650      	mov	r0, sl
 800dbe8:	4798      	blx	r3
 800dbea:	f105 39ff 	add.w	r9, r5, #4294967295
 800dbee:	464d      	mov	r5, r9
 800dbf0:	42bd      	cmp	r5, r7
 800dbf2:	d02d      	beq.n	800dc50 <_scanf_i+0x1dc>
 800dbf4:	6822      	ldr	r2, [r4, #0]
 800dbf6:	f012 0210 	ands.w	r2, r2, #16
 800dbfa:	d113      	bne.n	800dc24 <_scanf_i+0x1b0>
 800dbfc:	702a      	strb	r2, [r5, #0]
 800dbfe:	6863      	ldr	r3, [r4, #4]
 800dc00:	9e01      	ldr	r6, [sp, #4]
 800dc02:	4639      	mov	r1, r7
 800dc04:	4650      	mov	r0, sl
 800dc06:	47b0      	blx	r6
 800dc08:	6821      	ldr	r1, [r4, #0]
 800dc0a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc0e:	f011 0f20 	tst.w	r1, #32
 800dc12:	d013      	beq.n	800dc3c <_scanf_i+0x1c8>
 800dc14:	1d1a      	adds	r2, r3, #4
 800dc16:	f8c8 2000 	str.w	r2, [r8]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	6018      	str	r0, [r3, #0]
 800dc1e:	68e3      	ldr	r3, [r4, #12]
 800dc20:	3301      	adds	r3, #1
 800dc22:	60e3      	str	r3, [r4, #12]
 800dc24:	1bed      	subs	r5, r5, r7
 800dc26:	44ab      	add	fp, r5
 800dc28:	6925      	ldr	r5, [r4, #16]
 800dc2a:	445d      	add	r5, fp
 800dc2c:	6125      	str	r5, [r4, #16]
 800dc2e:	2000      	movs	r0, #0
 800dc30:	b007      	add	sp, #28
 800dc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc36:	f04f 0b00 	mov.w	fp, #0
 800dc3a:	e7ca      	b.n	800dbd2 <_scanf_i+0x15e>
 800dc3c:	1d1a      	adds	r2, r3, #4
 800dc3e:	f8c8 2000 	str.w	r2, [r8]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f011 0f01 	tst.w	r1, #1
 800dc48:	bf14      	ite	ne
 800dc4a:	8018      	strhne	r0, [r3, #0]
 800dc4c:	6018      	streq	r0, [r3, #0]
 800dc4e:	e7e6      	b.n	800dc1e <_scanf_i+0x1aa>
 800dc50:	2001      	movs	r0, #1
 800dc52:	e7ed      	b.n	800dc30 <_scanf_i+0x1bc>
 800dc54:	0800f588 	.word	0x0800f588
 800dc58:	0800df05 	.word	0x0800df05
 800dc5c:	0800de1d 	.word	0x0800de1d
 800dc60:	0800fdb6 	.word	0x0800fdb6

0800dc64 <_read_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4d07      	ldr	r5, [pc, #28]	; (800dc84 <_read_r+0x20>)
 800dc68:	4604      	mov	r4, r0
 800dc6a:	4608      	mov	r0, r1
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	2200      	movs	r2, #0
 800dc70:	602a      	str	r2, [r5, #0]
 800dc72:	461a      	mov	r2, r3
 800dc74:	f7f6 ffd0 	bl	8004c18 <_read>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d102      	bne.n	800dc82 <_read_r+0x1e>
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	b103      	cbz	r3, 800dc82 <_read_r+0x1e>
 800dc80:	6023      	str	r3, [r4, #0]
 800dc82:	bd38      	pop	{r3, r4, r5, pc}
 800dc84:	20006868 	.word	0x20006868

0800dc88 <_sbrk_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4d06      	ldr	r5, [pc, #24]	; (800dca4 <_sbrk_r+0x1c>)
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	4604      	mov	r4, r0
 800dc90:	4608      	mov	r0, r1
 800dc92:	602b      	str	r3, [r5, #0]
 800dc94:	f7f7 f82e 	bl	8004cf4 <_sbrk>
 800dc98:	1c43      	adds	r3, r0, #1
 800dc9a:	d102      	bne.n	800dca2 <_sbrk_r+0x1a>
 800dc9c:	682b      	ldr	r3, [r5, #0]
 800dc9e:	b103      	cbz	r3, 800dca2 <_sbrk_r+0x1a>
 800dca0:	6023      	str	r3, [r4, #0]
 800dca2:	bd38      	pop	{r3, r4, r5, pc}
 800dca4:	20006868 	.word	0x20006868

0800dca8 <__sccl>:
 800dca8:	b570      	push	{r4, r5, r6, lr}
 800dcaa:	780b      	ldrb	r3, [r1, #0]
 800dcac:	4604      	mov	r4, r0
 800dcae:	2b5e      	cmp	r3, #94	; 0x5e
 800dcb0:	bf0b      	itete	eq
 800dcb2:	784b      	ldrbeq	r3, [r1, #1]
 800dcb4:	1c48      	addne	r0, r1, #1
 800dcb6:	1c88      	addeq	r0, r1, #2
 800dcb8:	2200      	movne	r2, #0
 800dcba:	bf08      	it	eq
 800dcbc:	2201      	moveq	r2, #1
 800dcbe:	1e61      	subs	r1, r4, #1
 800dcc0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dcc4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800dcc8:	42a9      	cmp	r1, r5
 800dcca:	d1fb      	bne.n	800dcc4 <__sccl+0x1c>
 800dccc:	b90b      	cbnz	r3, 800dcd2 <__sccl+0x2a>
 800dcce:	3801      	subs	r0, #1
 800dcd0:	bd70      	pop	{r4, r5, r6, pc}
 800dcd2:	f082 0201 	eor.w	r2, r2, #1
 800dcd6:	54e2      	strb	r2, [r4, r3]
 800dcd8:	4605      	mov	r5, r0
 800dcda:	4628      	mov	r0, r5
 800dcdc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800dce0:	292d      	cmp	r1, #45	; 0x2d
 800dce2:	d006      	beq.n	800dcf2 <__sccl+0x4a>
 800dce4:	295d      	cmp	r1, #93	; 0x5d
 800dce6:	d0f3      	beq.n	800dcd0 <__sccl+0x28>
 800dce8:	b909      	cbnz	r1, 800dcee <__sccl+0x46>
 800dcea:	4628      	mov	r0, r5
 800dcec:	e7f0      	b.n	800dcd0 <__sccl+0x28>
 800dcee:	460b      	mov	r3, r1
 800dcf0:	e7f1      	b.n	800dcd6 <__sccl+0x2e>
 800dcf2:	786e      	ldrb	r6, [r5, #1]
 800dcf4:	2e5d      	cmp	r6, #93	; 0x5d
 800dcf6:	d0fa      	beq.n	800dcee <__sccl+0x46>
 800dcf8:	42b3      	cmp	r3, r6
 800dcfa:	dcf8      	bgt.n	800dcee <__sccl+0x46>
 800dcfc:	3502      	adds	r5, #2
 800dcfe:	4619      	mov	r1, r3
 800dd00:	3101      	adds	r1, #1
 800dd02:	428e      	cmp	r6, r1
 800dd04:	5462      	strb	r2, [r4, r1]
 800dd06:	dcfb      	bgt.n	800dd00 <__sccl+0x58>
 800dd08:	1af1      	subs	r1, r6, r3
 800dd0a:	3901      	subs	r1, #1
 800dd0c:	1c58      	adds	r0, r3, #1
 800dd0e:	42b3      	cmp	r3, r6
 800dd10:	bfa8      	it	ge
 800dd12:	2100      	movge	r1, #0
 800dd14:	1843      	adds	r3, r0, r1
 800dd16:	e7e0      	b.n	800dcda <__sccl+0x32>

0800dd18 <_strtol_l.constprop.0>:
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd1e:	d001      	beq.n	800dd24 <_strtol_l.constprop.0+0xc>
 800dd20:	2b24      	cmp	r3, #36	; 0x24
 800dd22:	d906      	bls.n	800dd32 <_strtol_l.constprop.0+0x1a>
 800dd24:	f7fd faa6 	bl	800b274 <__errno>
 800dd28:	2316      	movs	r3, #22
 800dd2a:	6003      	str	r3, [r0, #0]
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800de18 <_strtol_l.constprop.0+0x100>
 800dd36:	460d      	mov	r5, r1
 800dd38:	462e      	mov	r6, r5
 800dd3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dd42:	f017 0708 	ands.w	r7, r7, #8
 800dd46:	d1f7      	bne.n	800dd38 <_strtol_l.constprop.0+0x20>
 800dd48:	2c2d      	cmp	r4, #45	; 0x2d
 800dd4a:	d132      	bne.n	800ddb2 <_strtol_l.constprop.0+0x9a>
 800dd4c:	782c      	ldrb	r4, [r5, #0]
 800dd4e:	2701      	movs	r7, #1
 800dd50:	1cb5      	adds	r5, r6, #2
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d05b      	beq.n	800de0e <_strtol_l.constprop.0+0xf6>
 800dd56:	2b10      	cmp	r3, #16
 800dd58:	d109      	bne.n	800dd6e <_strtol_l.constprop.0+0x56>
 800dd5a:	2c30      	cmp	r4, #48	; 0x30
 800dd5c:	d107      	bne.n	800dd6e <_strtol_l.constprop.0+0x56>
 800dd5e:	782c      	ldrb	r4, [r5, #0]
 800dd60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dd64:	2c58      	cmp	r4, #88	; 0x58
 800dd66:	d14d      	bne.n	800de04 <_strtol_l.constprop.0+0xec>
 800dd68:	786c      	ldrb	r4, [r5, #1]
 800dd6a:	2310      	movs	r3, #16
 800dd6c:	3502      	adds	r5, #2
 800dd6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dd72:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd76:	f04f 0c00 	mov.w	ip, #0
 800dd7a:	fbb8 f9f3 	udiv	r9, r8, r3
 800dd7e:	4666      	mov	r6, ip
 800dd80:	fb03 8a19 	mls	sl, r3, r9, r8
 800dd84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dd88:	f1be 0f09 	cmp.w	lr, #9
 800dd8c:	d816      	bhi.n	800ddbc <_strtol_l.constprop.0+0xa4>
 800dd8e:	4674      	mov	r4, lr
 800dd90:	42a3      	cmp	r3, r4
 800dd92:	dd24      	ble.n	800ddde <_strtol_l.constprop.0+0xc6>
 800dd94:	f1bc 0f00 	cmp.w	ip, #0
 800dd98:	db1e      	blt.n	800ddd8 <_strtol_l.constprop.0+0xc0>
 800dd9a:	45b1      	cmp	r9, r6
 800dd9c:	d31c      	bcc.n	800ddd8 <_strtol_l.constprop.0+0xc0>
 800dd9e:	d101      	bne.n	800dda4 <_strtol_l.constprop.0+0x8c>
 800dda0:	45a2      	cmp	sl, r4
 800dda2:	db19      	blt.n	800ddd8 <_strtol_l.constprop.0+0xc0>
 800dda4:	fb06 4603 	mla	r6, r6, r3, r4
 800dda8:	f04f 0c01 	mov.w	ip, #1
 800ddac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddb0:	e7e8      	b.n	800dd84 <_strtol_l.constprop.0+0x6c>
 800ddb2:	2c2b      	cmp	r4, #43	; 0x2b
 800ddb4:	bf04      	itt	eq
 800ddb6:	782c      	ldrbeq	r4, [r5, #0]
 800ddb8:	1cb5      	addeq	r5, r6, #2
 800ddba:	e7ca      	b.n	800dd52 <_strtol_l.constprop.0+0x3a>
 800ddbc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ddc0:	f1be 0f19 	cmp.w	lr, #25
 800ddc4:	d801      	bhi.n	800ddca <_strtol_l.constprop.0+0xb2>
 800ddc6:	3c37      	subs	r4, #55	; 0x37
 800ddc8:	e7e2      	b.n	800dd90 <_strtol_l.constprop.0+0x78>
 800ddca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ddce:	f1be 0f19 	cmp.w	lr, #25
 800ddd2:	d804      	bhi.n	800ddde <_strtol_l.constprop.0+0xc6>
 800ddd4:	3c57      	subs	r4, #87	; 0x57
 800ddd6:	e7db      	b.n	800dd90 <_strtol_l.constprop.0+0x78>
 800ddd8:	f04f 3cff 	mov.w	ip, #4294967295
 800dddc:	e7e6      	b.n	800ddac <_strtol_l.constprop.0+0x94>
 800ddde:	f1bc 0f00 	cmp.w	ip, #0
 800dde2:	da05      	bge.n	800ddf0 <_strtol_l.constprop.0+0xd8>
 800dde4:	2322      	movs	r3, #34	; 0x22
 800dde6:	6003      	str	r3, [r0, #0]
 800dde8:	4646      	mov	r6, r8
 800ddea:	b942      	cbnz	r2, 800ddfe <_strtol_l.constprop.0+0xe6>
 800ddec:	4630      	mov	r0, r6
 800ddee:	e79e      	b.n	800dd2e <_strtol_l.constprop.0+0x16>
 800ddf0:	b107      	cbz	r7, 800ddf4 <_strtol_l.constprop.0+0xdc>
 800ddf2:	4276      	negs	r6, r6
 800ddf4:	2a00      	cmp	r2, #0
 800ddf6:	d0f9      	beq.n	800ddec <_strtol_l.constprop.0+0xd4>
 800ddf8:	f1bc 0f00 	cmp.w	ip, #0
 800ddfc:	d000      	beq.n	800de00 <_strtol_l.constprop.0+0xe8>
 800ddfe:	1e69      	subs	r1, r5, #1
 800de00:	6011      	str	r1, [r2, #0]
 800de02:	e7f3      	b.n	800ddec <_strtol_l.constprop.0+0xd4>
 800de04:	2430      	movs	r4, #48	; 0x30
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1b1      	bne.n	800dd6e <_strtol_l.constprop.0+0x56>
 800de0a:	2308      	movs	r3, #8
 800de0c:	e7af      	b.n	800dd6e <_strtol_l.constprop.0+0x56>
 800de0e:	2c30      	cmp	r4, #48	; 0x30
 800de10:	d0a5      	beq.n	800dd5e <_strtol_l.constprop.0+0x46>
 800de12:	230a      	movs	r3, #10
 800de14:	e7ab      	b.n	800dd6e <_strtol_l.constprop.0+0x56>
 800de16:	bf00      	nop
 800de18:	0800fa9f 	.word	0x0800fa9f

0800de1c <_strtol_r>:
 800de1c:	f7ff bf7c 	b.w	800dd18 <_strtol_l.constprop.0>

0800de20 <_strtoul_l.constprop.0>:
 800de20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de24:	4f36      	ldr	r7, [pc, #216]	; (800df00 <_strtoul_l.constprop.0+0xe0>)
 800de26:	4686      	mov	lr, r0
 800de28:	460d      	mov	r5, r1
 800de2a:	4628      	mov	r0, r5
 800de2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de30:	5de6      	ldrb	r6, [r4, r7]
 800de32:	f016 0608 	ands.w	r6, r6, #8
 800de36:	d1f8      	bne.n	800de2a <_strtoul_l.constprop.0+0xa>
 800de38:	2c2d      	cmp	r4, #45	; 0x2d
 800de3a:	d12f      	bne.n	800de9c <_strtoul_l.constprop.0+0x7c>
 800de3c:	782c      	ldrb	r4, [r5, #0]
 800de3e:	2601      	movs	r6, #1
 800de40:	1c85      	adds	r5, r0, #2
 800de42:	2b00      	cmp	r3, #0
 800de44:	d057      	beq.n	800def6 <_strtoul_l.constprop.0+0xd6>
 800de46:	2b10      	cmp	r3, #16
 800de48:	d109      	bne.n	800de5e <_strtoul_l.constprop.0+0x3e>
 800de4a:	2c30      	cmp	r4, #48	; 0x30
 800de4c:	d107      	bne.n	800de5e <_strtoul_l.constprop.0+0x3e>
 800de4e:	7828      	ldrb	r0, [r5, #0]
 800de50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800de54:	2858      	cmp	r0, #88	; 0x58
 800de56:	d149      	bne.n	800deec <_strtoul_l.constprop.0+0xcc>
 800de58:	786c      	ldrb	r4, [r5, #1]
 800de5a:	2310      	movs	r3, #16
 800de5c:	3502      	adds	r5, #2
 800de5e:	f04f 38ff 	mov.w	r8, #4294967295
 800de62:	2700      	movs	r7, #0
 800de64:	fbb8 f8f3 	udiv	r8, r8, r3
 800de68:	fb03 f908 	mul.w	r9, r3, r8
 800de6c:	ea6f 0909 	mvn.w	r9, r9
 800de70:	4638      	mov	r0, r7
 800de72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800de76:	f1bc 0f09 	cmp.w	ip, #9
 800de7a:	d814      	bhi.n	800dea6 <_strtoul_l.constprop.0+0x86>
 800de7c:	4664      	mov	r4, ip
 800de7e:	42a3      	cmp	r3, r4
 800de80:	dd22      	ble.n	800dec8 <_strtoul_l.constprop.0+0xa8>
 800de82:	2f00      	cmp	r7, #0
 800de84:	db1d      	blt.n	800dec2 <_strtoul_l.constprop.0+0xa2>
 800de86:	4580      	cmp	r8, r0
 800de88:	d31b      	bcc.n	800dec2 <_strtoul_l.constprop.0+0xa2>
 800de8a:	d101      	bne.n	800de90 <_strtoul_l.constprop.0+0x70>
 800de8c:	45a1      	cmp	r9, r4
 800de8e:	db18      	blt.n	800dec2 <_strtoul_l.constprop.0+0xa2>
 800de90:	fb00 4003 	mla	r0, r0, r3, r4
 800de94:	2701      	movs	r7, #1
 800de96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de9a:	e7ea      	b.n	800de72 <_strtoul_l.constprop.0+0x52>
 800de9c:	2c2b      	cmp	r4, #43	; 0x2b
 800de9e:	bf04      	itt	eq
 800dea0:	782c      	ldrbeq	r4, [r5, #0]
 800dea2:	1c85      	addeq	r5, r0, #2
 800dea4:	e7cd      	b.n	800de42 <_strtoul_l.constprop.0+0x22>
 800dea6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800deaa:	f1bc 0f19 	cmp.w	ip, #25
 800deae:	d801      	bhi.n	800deb4 <_strtoul_l.constprop.0+0x94>
 800deb0:	3c37      	subs	r4, #55	; 0x37
 800deb2:	e7e4      	b.n	800de7e <_strtoul_l.constprop.0+0x5e>
 800deb4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800deb8:	f1bc 0f19 	cmp.w	ip, #25
 800debc:	d804      	bhi.n	800dec8 <_strtoul_l.constprop.0+0xa8>
 800debe:	3c57      	subs	r4, #87	; 0x57
 800dec0:	e7dd      	b.n	800de7e <_strtoul_l.constprop.0+0x5e>
 800dec2:	f04f 37ff 	mov.w	r7, #4294967295
 800dec6:	e7e6      	b.n	800de96 <_strtoul_l.constprop.0+0x76>
 800dec8:	2f00      	cmp	r7, #0
 800deca:	da07      	bge.n	800dedc <_strtoul_l.constprop.0+0xbc>
 800decc:	2322      	movs	r3, #34	; 0x22
 800dece:	f8ce 3000 	str.w	r3, [lr]
 800ded2:	f04f 30ff 	mov.w	r0, #4294967295
 800ded6:	b932      	cbnz	r2, 800dee6 <_strtoul_l.constprop.0+0xc6>
 800ded8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dedc:	b106      	cbz	r6, 800dee0 <_strtoul_l.constprop.0+0xc0>
 800dede:	4240      	negs	r0, r0
 800dee0:	2a00      	cmp	r2, #0
 800dee2:	d0f9      	beq.n	800ded8 <_strtoul_l.constprop.0+0xb8>
 800dee4:	b107      	cbz	r7, 800dee8 <_strtoul_l.constprop.0+0xc8>
 800dee6:	1e69      	subs	r1, r5, #1
 800dee8:	6011      	str	r1, [r2, #0]
 800deea:	e7f5      	b.n	800ded8 <_strtoul_l.constprop.0+0xb8>
 800deec:	2430      	movs	r4, #48	; 0x30
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1b5      	bne.n	800de5e <_strtoul_l.constprop.0+0x3e>
 800def2:	2308      	movs	r3, #8
 800def4:	e7b3      	b.n	800de5e <_strtoul_l.constprop.0+0x3e>
 800def6:	2c30      	cmp	r4, #48	; 0x30
 800def8:	d0a9      	beq.n	800de4e <_strtoul_l.constprop.0+0x2e>
 800defa:	230a      	movs	r3, #10
 800defc:	e7af      	b.n	800de5e <_strtoul_l.constprop.0+0x3e>
 800defe:	bf00      	nop
 800df00:	0800fa9f 	.word	0x0800fa9f

0800df04 <_strtoul_r>:
 800df04:	f7ff bf8c 	b.w	800de20 <_strtoul_l.constprop.0>

0800df08 <__submore>:
 800df08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df0c:	460c      	mov	r4, r1
 800df0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800df10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df14:	4299      	cmp	r1, r3
 800df16:	d11d      	bne.n	800df54 <__submore+0x4c>
 800df18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800df1c:	f7ff f9ae 	bl	800d27c <_malloc_r>
 800df20:	b918      	cbnz	r0, 800df2a <__submore+0x22>
 800df22:	f04f 30ff 	mov.w	r0, #4294967295
 800df26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df2e:	63a3      	str	r3, [r4, #56]	; 0x38
 800df30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800df34:	6360      	str	r0, [r4, #52]	; 0x34
 800df36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800df3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800df3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800df42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800df46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800df4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800df4e:	6020      	str	r0, [r4, #0]
 800df50:	2000      	movs	r0, #0
 800df52:	e7e8      	b.n	800df26 <__submore+0x1e>
 800df54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800df56:	0077      	lsls	r7, r6, #1
 800df58:	463a      	mov	r2, r7
 800df5a:	f000 fa31 	bl	800e3c0 <_realloc_r>
 800df5e:	4605      	mov	r5, r0
 800df60:	2800      	cmp	r0, #0
 800df62:	d0de      	beq.n	800df22 <__submore+0x1a>
 800df64:	eb00 0806 	add.w	r8, r0, r6
 800df68:	4601      	mov	r1, r0
 800df6a:	4632      	mov	r2, r6
 800df6c:	4640      	mov	r0, r8
 800df6e:	f7fd f9b3 	bl	800b2d8 <memcpy>
 800df72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800df76:	f8c4 8000 	str.w	r8, [r4]
 800df7a:	e7e9      	b.n	800df50 <__submore+0x48>

0800df7c <__assert_func>:
 800df7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df7e:	4614      	mov	r4, r2
 800df80:	461a      	mov	r2, r3
 800df82:	4b09      	ldr	r3, [pc, #36]	; (800dfa8 <__assert_func+0x2c>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4605      	mov	r5, r0
 800df88:	68d8      	ldr	r0, [r3, #12]
 800df8a:	b14c      	cbz	r4, 800dfa0 <__assert_func+0x24>
 800df8c:	4b07      	ldr	r3, [pc, #28]	; (800dfac <__assert_func+0x30>)
 800df8e:	9100      	str	r1, [sp, #0]
 800df90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df94:	4906      	ldr	r1, [pc, #24]	; (800dfb0 <__assert_func+0x34>)
 800df96:	462b      	mov	r3, r5
 800df98:	f000 f9a6 	bl	800e2e8 <fiprintf>
 800df9c:	f000 fc66 	bl	800e86c <abort>
 800dfa0:	4b04      	ldr	r3, [pc, #16]	; (800dfb4 <__assert_func+0x38>)
 800dfa2:	461c      	mov	r4, r3
 800dfa4:	e7f3      	b.n	800df8e <__assert_func+0x12>
 800dfa6:	bf00      	nop
 800dfa8:	20000060 	.word	0x20000060
 800dfac:	0800fdb8 	.word	0x0800fdb8
 800dfb0:	0800fdc5 	.word	0x0800fdc5
 800dfb4:	0800fdf3 	.word	0x0800fdf3

0800dfb8 <__sflush_r>:
 800dfb8:	898a      	ldrh	r2, [r1, #12]
 800dfba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfbe:	4605      	mov	r5, r0
 800dfc0:	0710      	lsls	r0, r2, #28
 800dfc2:	460c      	mov	r4, r1
 800dfc4:	d458      	bmi.n	800e078 <__sflush_r+0xc0>
 800dfc6:	684b      	ldr	r3, [r1, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	dc05      	bgt.n	800dfd8 <__sflush_r+0x20>
 800dfcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	dc02      	bgt.n	800dfd8 <__sflush_r+0x20>
 800dfd2:	2000      	movs	r0, #0
 800dfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfda:	2e00      	cmp	r6, #0
 800dfdc:	d0f9      	beq.n	800dfd2 <__sflush_r+0x1a>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfe4:	682f      	ldr	r7, [r5, #0]
 800dfe6:	602b      	str	r3, [r5, #0]
 800dfe8:	d032      	beq.n	800e050 <__sflush_r+0x98>
 800dfea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfec:	89a3      	ldrh	r3, [r4, #12]
 800dfee:	075a      	lsls	r2, r3, #29
 800dff0:	d505      	bpl.n	800dffe <__sflush_r+0x46>
 800dff2:	6863      	ldr	r3, [r4, #4]
 800dff4:	1ac0      	subs	r0, r0, r3
 800dff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dff8:	b10b      	cbz	r3, 800dffe <__sflush_r+0x46>
 800dffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dffc:	1ac0      	subs	r0, r0, r3
 800dffe:	2300      	movs	r3, #0
 800e000:	4602      	mov	r2, r0
 800e002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e004:	6a21      	ldr	r1, [r4, #32]
 800e006:	4628      	mov	r0, r5
 800e008:	47b0      	blx	r6
 800e00a:	1c43      	adds	r3, r0, #1
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	d106      	bne.n	800e01e <__sflush_r+0x66>
 800e010:	6829      	ldr	r1, [r5, #0]
 800e012:	291d      	cmp	r1, #29
 800e014:	d82c      	bhi.n	800e070 <__sflush_r+0xb8>
 800e016:	4a2a      	ldr	r2, [pc, #168]	; (800e0c0 <__sflush_r+0x108>)
 800e018:	40ca      	lsrs	r2, r1
 800e01a:	07d6      	lsls	r6, r2, #31
 800e01c:	d528      	bpl.n	800e070 <__sflush_r+0xb8>
 800e01e:	2200      	movs	r2, #0
 800e020:	6062      	str	r2, [r4, #4]
 800e022:	04d9      	lsls	r1, r3, #19
 800e024:	6922      	ldr	r2, [r4, #16]
 800e026:	6022      	str	r2, [r4, #0]
 800e028:	d504      	bpl.n	800e034 <__sflush_r+0x7c>
 800e02a:	1c42      	adds	r2, r0, #1
 800e02c:	d101      	bne.n	800e032 <__sflush_r+0x7a>
 800e02e:	682b      	ldr	r3, [r5, #0]
 800e030:	b903      	cbnz	r3, 800e034 <__sflush_r+0x7c>
 800e032:	6560      	str	r0, [r4, #84]	; 0x54
 800e034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e036:	602f      	str	r7, [r5, #0]
 800e038:	2900      	cmp	r1, #0
 800e03a:	d0ca      	beq.n	800dfd2 <__sflush_r+0x1a>
 800e03c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e040:	4299      	cmp	r1, r3
 800e042:	d002      	beq.n	800e04a <__sflush_r+0x92>
 800e044:	4628      	mov	r0, r5
 800e046:	f7ff f8ad 	bl	800d1a4 <_free_r>
 800e04a:	2000      	movs	r0, #0
 800e04c:	6360      	str	r0, [r4, #52]	; 0x34
 800e04e:	e7c1      	b.n	800dfd4 <__sflush_r+0x1c>
 800e050:	6a21      	ldr	r1, [r4, #32]
 800e052:	2301      	movs	r3, #1
 800e054:	4628      	mov	r0, r5
 800e056:	47b0      	blx	r6
 800e058:	1c41      	adds	r1, r0, #1
 800e05a:	d1c7      	bne.n	800dfec <__sflush_r+0x34>
 800e05c:	682b      	ldr	r3, [r5, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d0c4      	beq.n	800dfec <__sflush_r+0x34>
 800e062:	2b1d      	cmp	r3, #29
 800e064:	d001      	beq.n	800e06a <__sflush_r+0xb2>
 800e066:	2b16      	cmp	r3, #22
 800e068:	d101      	bne.n	800e06e <__sflush_r+0xb6>
 800e06a:	602f      	str	r7, [r5, #0]
 800e06c:	e7b1      	b.n	800dfd2 <__sflush_r+0x1a>
 800e06e:	89a3      	ldrh	r3, [r4, #12]
 800e070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e074:	81a3      	strh	r3, [r4, #12]
 800e076:	e7ad      	b.n	800dfd4 <__sflush_r+0x1c>
 800e078:	690f      	ldr	r7, [r1, #16]
 800e07a:	2f00      	cmp	r7, #0
 800e07c:	d0a9      	beq.n	800dfd2 <__sflush_r+0x1a>
 800e07e:	0793      	lsls	r3, r2, #30
 800e080:	680e      	ldr	r6, [r1, #0]
 800e082:	bf08      	it	eq
 800e084:	694b      	ldreq	r3, [r1, #20]
 800e086:	600f      	str	r7, [r1, #0]
 800e088:	bf18      	it	ne
 800e08a:	2300      	movne	r3, #0
 800e08c:	eba6 0807 	sub.w	r8, r6, r7
 800e090:	608b      	str	r3, [r1, #8]
 800e092:	f1b8 0f00 	cmp.w	r8, #0
 800e096:	dd9c      	ble.n	800dfd2 <__sflush_r+0x1a>
 800e098:	6a21      	ldr	r1, [r4, #32]
 800e09a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e09c:	4643      	mov	r3, r8
 800e09e:	463a      	mov	r2, r7
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	47b0      	blx	r6
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	dc06      	bgt.n	800e0b6 <__sflush_r+0xfe>
 800e0a8:	89a3      	ldrh	r3, [r4, #12]
 800e0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0ae:	81a3      	strh	r3, [r4, #12]
 800e0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b4:	e78e      	b.n	800dfd4 <__sflush_r+0x1c>
 800e0b6:	4407      	add	r7, r0
 800e0b8:	eba8 0800 	sub.w	r8, r8, r0
 800e0bc:	e7e9      	b.n	800e092 <__sflush_r+0xda>
 800e0be:	bf00      	nop
 800e0c0:	20400001 	.word	0x20400001

0800e0c4 <_fflush_r>:
 800e0c4:	b538      	push	{r3, r4, r5, lr}
 800e0c6:	690b      	ldr	r3, [r1, #16]
 800e0c8:	4605      	mov	r5, r0
 800e0ca:	460c      	mov	r4, r1
 800e0cc:	b913      	cbnz	r3, 800e0d4 <_fflush_r+0x10>
 800e0ce:	2500      	movs	r5, #0
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	bd38      	pop	{r3, r4, r5, pc}
 800e0d4:	b118      	cbz	r0, 800e0de <_fflush_r+0x1a>
 800e0d6:	6983      	ldr	r3, [r0, #24]
 800e0d8:	b90b      	cbnz	r3, 800e0de <_fflush_r+0x1a>
 800e0da:	f000 f887 	bl	800e1ec <__sinit>
 800e0de:	4b14      	ldr	r3, [pc, #80]	; (800e130 <_fflush_r+0x6c>)
 800e0e0:	429c      	cmp	r4, r3
 800e0e2:	d11b      	bne.n	800e11c <_fflush_r+0x58>
 800e0e4:	686c      	ldr	r4, [r5, #4]
 800e0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d0ef      	beq.n	800e0ce <_fflush_r+0xa>
 800e0ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0f0:	07d0      	lsls	r0, r2, #31
 800e0f2:	d404      	bmi.n	800e0fe <_fflush_r+0x3a>
 800e0f4:	0599      	lsls	r1, r3, #22
 800e0f6:	d402      	bmi.n	800e0fe <_fflush_r+0x3a>
 800e0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0fa:	f000 f927 	bl	800e34c <__retarget_lock_acquire_recursive>
 800e0fe:	4628      	mov	r0, r5
 800e100:	4621      	mov	r1, r4
 800e102:	f7ff ff59 	bl	800dfb8 <__sflush_r>
 800e106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e108:	07da      	lsls	r2, r3, #31
 800e10a:	4605      	mov	r5, r0
 800e10c:	d4e0      	bmi.n	800e0d0 <_fflush_r+0xc>
 800e10e:	89a3      	ldrh	r3, [r4, #12]
 800e110:	059b      	lsls	r3, r3, #22
 800e112:	d4dd      	bmi.n	800e0d0 <_fflush_r+0xc>
 800e114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e116:	f000 f91a 	bl	800e34e <__retarget_lock_release_recursive>
 800e11a:	e7d9      	b.n	800e0d0 <_fflush_r+0xc>
 800e11c:	4b05      	ldr	r3, [pc, #20]	; (800e134 <_fflush_r+0x70>)
 800e11e:	429c      	cmp	r4, r3
 800e120:	d101      	bne.n	800e126 <_fflush_r+0x62>
 800e122:	68ac      	ldr	r4, [r5, #8]
 800e124:	e7df      	b.n	800e0e6 <_fflush_r+0x22>
 800e126:	4b04      	ldr	r3, [pc, #16]	; (800e138 <_fflush_r+0x74>)
 800e128:	429c      	cmp	r4, r3
 800e12a:	bf08      	it	eq
 800e12c:	68ec      	ldreq	r4, [r5, #12]
 800e12e:	e7da      	b.n	800e0e6 <_fflush_r+0x22>
 800e130:	0800fe14 	.word	0x0800fe14
 800e134:	0800fe34 	.word	0x0800fe34
 800e138:	0800fdf4 	.word	0x0800fdf4

0800e13c <std>:
 800e13c:	2300      	movs	r3, #0
 800e13e:	b510      	push	{r4, lr}
 800e140:	4604      	mov	r4, r0
 800e142:	e9c0 3300 	strd	r3, r3, [r0]
 800e146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e14a:	6083      	str	r3, [r0, #8]
 800e14c:	8181      	strh	r1, [r0, #12]
 800e14e:	6643      	str	r3, [r0, #100]	; 0x64
 800e150:	81c2      	strh	r2, [r0, #14]
 800e152:	6183      	str	r3, [r0, #24]
 800e154:	4619      	mov	r1, r3
 800e156:	2208      	movs	r2, #8
 800e158:	305c      	adds	r0, #92	; 0x5c
 800e15a:	f7fd f8cb 	bl	800b2f4 <memset>
 800e15e:	4b05      	ldr	r3, [pc, #20]	; (800e174 <std+0x38>)
 800e160:	6263      	str	r3, [r4, #36]	; 0x24
 800e162:	4b05      	ldr	r3, [pc, #20]	; (800e178 <std+0x3c>)
 800e164:	62a3      	str	r3, [r4, #40]	; 0x28
 800e166:	4b05      	ldr	r3, [pc, #20]	; (800e17c <std+0x40>)
 800e168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e16a:	4b05      	ldr	r3, [pc, #20]	; (800e180 <std+0x44>)
 800e16c:	6224      	str	r4, [r4, #32]
 800e16e:	6323      	str	r3, [r4, #48]	; 0x30
 800e170:	bd10      	pop	{r4, pc}
 800e172:	bf00      	nop
 800e174:	0800bc31 	.word	0x0800bc31
 800e178:	0800bc57 	.word	0x0800bc57
 800e17c:	0800bc8f 	.word	0x0800bc8f
 800e180:	0800bcb3 	.word	0x0800bcb3

0800e184 <_cleanup_r>:
 800e184:	4901      	ldr	r1, [pc, #4]	; (800e18c <_cleanup_r+0x8>)
 800e186:	f000 b8c1 	b.w	800e30c <_fwalk_reent>
 800e18a:	bf00      	nop
 800e18c:	0800e0c5 	.word	0x0800e0c5

0800e190 <__sfmoreglue>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	2268      	movs	r2, #104	; 0x68
 800e194:	1e4d      	subs	r5, r1, #1
 800e196:	4355      	muls	r5, r2
 800e198:	460e      	mov	r6, r1
 800e19a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e19e:	f7ff f86d 	bl	800d27c <_malloc_r>
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	b140      	cbz	r0, 800e1b8 <__sfmoreglue+0x28>
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	e9c0 1600 	strd	r1, r6, [r0]
 800e1ac:	300c      	adds	r0, #12
 800e1ae:	60a0      	str	r0, [r4, #8]
 800e1b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e1b4:	f7fd f89e 	bl	800b2f4 <memset>
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	bd70      	pop	{r4, r5, r6, pc}

0800e1bc <__sfp_lock_acquire>:
 800e1bc:	4801      	ldr	r0, [pc, #4]	; (800e1c4 <__sfp_lock_acquire+0x8>)
 800e1be:	f000 b8c5 	b.w	800e34c <__retarget_lock_acquire_recursive>
 800e1c2:	bf00      	nop
 800e1c4:	2000686d 	.word	0x2000686d

0800e1c8 <__sfp_lock_release>:
 800e1c8:	4801      	ldr	r0, [pc, #4]	; (800e1d0 <__sfp_lock_release+0x8>)
 800e1ca:	f000 b8c0 	b.w	800e34e <__retarget_lock_release_recursive>
 800e1ce:	bf00      	nop
 800e1d0:	2000686d 	.word	0x2000686d

0800e1d4 <__sinit_lock_acquire>:
 800e1d4:	4801      	ldr	r0, [pc, #4]	; (800e1dc <__sinit_lock_acquire+0x8>)
 800e1d6:	f000 b8b9 	b.w	800e34c <__retarget_lock_acquire_recursive>
 800e1da:	bf00      	nop
 800e1dc:	2000686e 	.word	0x2000686e

0800e1e0 <__sinit_lock_release>:
 800e1e0:	4801      	ldr	r0, [pc, #4]	; (800e1e8 <__sinit_lock_release+0x8>)
 800e1e2:	f000 b8b4 	b.w	800e34e <__retarget_lock_release_recursive>
 800e1e6:	bf00      	nop
 800e1e8:	2000686e 	.word	0x2000686e

0800e1ec <__sinit>:
 800e1ec:	b510      	push	{r4, lr}
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	f7ff fff0 	bl	800e1d4 <__sinit_lock_acquire>
 800e1f4:	69a3      	ldr	r3, [r4, #24]
 800e1f6:	b11b      	cbz	r3, 800e200 <__sinit+0x14>
 800e1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1fc:	f7ff bff0 	b.w	800e1e0 <__sinit_lock_release>
 800e200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e204:	6523      	str	r3, [r4, #80]	; 0x50
 800e206:	4b13      	ldr	r3, [pc, #76]	; (800e254 <__sinit+0x68>)
 800e208:	4a13      	ldr	r2, [pc, #76]	; (800e258 <__sinit+0x6c>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e20e:	42a3      	cmp	r3, r4
 800e210:	bf04      	itt	eq
 800e212:	2301      	moveq	r3, #1
 800e214:	61a3      	streq	r3, [r4, #24]
 800e216:	4620      	mov	r0, r4
 800e218:	f000 f820 	bl	800e25c <__sfp>
 800e21c:	6060      	str	r0, [r4, #4]
 800e21e:	4620      	mov	r0, r4
 800e220:	f000 f81c 	bl	800e25c <__sfp>
 800e224:	60a0      	str	r0, [r4, #8]
 800e226:	4620      	mov	r0, r4
 800e228:	f000 f818 	bl	800e25c <__sfp>
 800e22c:	2200      	movs	r2, #0
 800e22e:	60e0      	str	r0, [r4, #12]
 800e230:	2104      	movs	r1, #4
 800e232:	6860      	ldr	r0, [r4, #4]
 800e234:	f7ff ff82 	bl	800e13c <std>
 800e238:	68a0      	ldr	r0, [r4, #8]
 800e23a:	2201      	movs	r2, #1
 800e23c:	2109      	movs	r1, #9
 800e23e:	f7ff ff7d 	bl	800e13c <std>
 800e242:	68e0      	ldr	r0, [r4, #12]
 800e244:	2202      	movs	r2, #2
 800e246:	2112      	movs	r1, #18
 800e248:	f7ff ff78 	bl	800e13c <std>
 800e24c:	2301      	movs	r3, #1
 800e24e:	61a3      	str	r3, [r4, #24]
 800e250:	e7d2      	b.n	800e1f8 <__sinit+0xc>
 800e252:	bf00      	nop
 800e254:	0800fa68 	.word	0x0800fa68
 800e258:	0800e185 	.word	0x0800e185

0800e25c <__sfp>:
 800e25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e25e:	4607      	mov	r7, r0
 800e260:	f7ff ffac 	bl	800e1bc <__sfp_lock_acquire>
 800e264:	4b1e      	ldr	r3, [pc, #120]	; (800e2e0 <__sfp+0x84>)
 800e266:	681e      	ldr	r6, [r3, #0]
 800e268:	69b3      	ldr	r3, [r6, #24]
 800e26a:	b913      	cbnz	r3, 800e272 <__sfp+0x16>
 800e26c:	4630      	mov	r0, r6
 800e26e:	f7ff ffbd 	bl	800e1ec <__sinit>
 800e272:	3648      	adds	r6, #72	; 0x48
 800e274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e278:	3b01      	subs	r3, #1
 800e27a:	d503      	bpl.n	800e284 <__sfp+0x28>
 800e27c:	6833      	ldr	r3, [r6, #0]
 800e27e:	b30b      	cbz	r3, 800e2c4 <__sfp+0x68>
 800e280:	6836      	ldr	r6, [r6, #0]
 800e282:	e7f7      	b.n	800e274 <__sfp+0x18>
 800e284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e288:	b9d5      	cbnz	r5, 800e2c0 <__sfp+0x64>
 800e28a:	4b16      	ldr	r3, [pc, #88]	; (800e2e4 <__sfp+0x88>)
 800e28c:	60e3      	str	r3, [r4, #12]
 800e28e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e292:	6665      	str	r5, [r4, #100]	; 0x64
 800e294:	f000 f859 	bl	800e34a <__retarget_lock_init_recursive>
 800e298:	f7ff ff96 	bl	800e1c8 <__sfp_lock_release>
 800e29c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2a4:	6025      	str	r5, [r4, #0]
 800e2a6:	61a5      	str	r5, [r4, #24]
 800e2a8:	2208      	movs	r2, #8
 800e2aa:	4629      	mov	r1, r5
 800e2ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e2b0:	f7fd f820 	bl	800b2f4 <memset>
 800e2b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e2b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e2bc:	4620      	mov	r0, r4
 800e2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2c0:	3468      	adds	r4, #104	; 0x68
 800e2c2:	e7d9      	b.n	800e278 <__sfp+0x1c>
 800e2c4:	2104      	movs	r1, #4
 800e2c6:	4638      	mov	r0, r7
 800e2c8:	f7ff ff62 	bl	800e190 <__sfmoreglue>
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	6030      	str	r0, [r6, #0]
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d1d5      	bne.n	800e280 <__sfp+0x24>
 800e2d4:	f7ff ff78 	bl	800e1c8 <__sfp_lock_release>
 800e2d8:	230c      	movs	r3, #12
 800e2da:	603b      	str	r3, [r7, #0]
 800e2dc:	e7ee      	b.n	800e2bc <__sfp+0x60>
 800e2de:	bf00      	nop
 800e2e0:	0800fa68 	.word	0x0800fa68
 800e2e4:	ffff0001 	.word	0xffff0001

0800e2e8 <fiprintf>:
 800e2e8:	b40e      	push	{r1, r2, r3}
 800e2ea:	b503      	push	{r0, r1, lr}
 800e2ec:	4601      	mov	r1, r0
 800e2ee:	ab03      	add	r3, sp, #12
 800e2f0:	4805      	ldr	r0, [pc, #20]	; (800e308 <fiprintf+0x20>)
 800e2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2f6:	6800      	ldr	r0, [r0, #0]
 800e2f8:	9301      	str	r3, [sp, #4]
 800e2fa:	f000 f8b9 	bl	800e470 <_vfiprintf_r>
 800e2fe:	b002      	add	sp, #8
 800e300:	f85d eb04 	ldr.w	lr, [sp], #4
 800e304:	b003      	add	sp, #12
 800e306:	4770      	bx	lr
 800e308:	20000060 	.word	0x20000060

0800e30c <_fwalk_reent>:
 800e30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e310:	4606      	mov	r6, r0
 800e312:	4688      	mov	r8, r1
 800e314:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e318:	2700      	movs	r7, #0
 800e31a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e31e:	f1b9 0901 	subs.w	r9, r9, #1
 800e322:	d505      	bpl.n	800e330 <_fwalk_reent+0x24>
 800e324:	6824      	ldr	r4, [r4, #0]
 800e326:	2c00      	cmp	r4, #0
 800e328:	d1f7      	bne.n	800e31a <_fwalk_reent+0xe>
 800e32a:	4638      	mov	r0, r7
 800e32c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e330:	89ab      	ldrh	r3, [r5, #12]
 800e332:	2b01      	cmp	r3, #1
 800e334:	d907      	bls.n	800e346 <_fwalk_reent+0x3a>
 800e336:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e33a:	3301      	adds	r3, #1
 800e33c:	d003      	beq.n	800e346 <_fwalk_reent+0x3a>
 800e33e:	4629      	mov	r1, r5
 800e340:	4630      	mov	r0, r6
 800e342:	47c0      	blx	r8
 800e344:	4307      	orrs	r7, r0
 800e346:	3568      	adds	r5, #104	; 0x68
 800e348:	e7e9      	b.n	800e31e <_fwalk_reent+0x12>

0800e34a <__retarget_lock_init_recursive>:
 800e34a:	4770      	bx	lr

0800e34c <__retarget_lock_acquire_recursive>:
 800e34c:	4770      	bx	lr

0800e34e <__retarget_lock_release_recursive>:
 800e34e:	4770      	bx	lr

0800e350 <__ascii_mbtowc>:
 800e350:	b082      	sub	sp, #8
 800e352:	b901      	cbnz	r1, 800e356 <__ascii_mbtowc+0x6>
 800e354:	a901      	add	r1, sp, #4
 800e356:	b142      	cbz	r2, 800e36a <__ascii_mbtowc+0x1a>
 800e358:	b14b      	cbz	r3, 800e36e <__ascii_mbtowc+0x1e>
 800e35a:	7813      	ldrb	r3, [r2, #0]
 800e35c:	600b      	str	r3, [r1, #0]
 800e35e:	7812      	ldrb	r2, [r2, #0]
 800e360:	1e10      	subs	r0, r2, #0
 800e362:	bf18      	it	ne
 800e364:	2001      	movne	r0, #1
 800e366:	b002      	add	sp, #8
 800e368:	4770      	bx	lr
 800e36a:	4610      	mov	r0, r2
 800e36c:	e7fb      	b.n	800e366 <__ascii_mbtowc+0x16>
 800e36e:	f06f 0001 	mvn.w	r0, #1
 800e372:	e7f8      	b.n	800e366 <__ascii_mbtowc+0x16>

0800e374 <memmove>:
 800e374:	4288      	cmp	r0, r1
 800e376:	b510      	push	{r4, lr}
 800e378:	eb01 0402 	add.w	r4, r1, r2
 800e37c:	d902      	bls.n	800e384 <memmove+0x10>
 800e37e:	4284      	cmp	r4, r0
 800e380:	4623      	mov	r3, r4
 800e382:	d807      	bhi.n	800e394 <memmove+0x20>
 800e384:	1e43      	subs	r3, r0, #1
 800e386:	42a1      	cmp	r1, r4
 800e388:	d008      	beq.n	800e39c <memmove+0x28>
 800e38a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e38e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e392:	e7f8      	b.n	800e386 <memmove+0x12>
 800e394:	4402      	add	r2, r0
 800e396:	4601      	mov	r1, r0
 800e398:	428a      	cmp	r2, r1
 800e39a:	d100      	bne.n	800e39e <memmove+0x2a>
 800e39c:	bd10      	pop	{r4, pc}
 800e39e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3a6:	e7f7      	b.n	800e398 <memmove+0x24>

0800e3a8 <__malloc_lock>:
 800e3a8:	4801      	ldr	r0, [pc, #4]	; (800e3b0 <__malloc_lock+0x8>)
 800e3aa:	f7ff bfcf 	b.w	800e34c <__retarget_lock_acquire_recursive>
 800e3ae:	bf00      	nop
 800e3b0:	2000686c 	.word	0x2000686c

0800e3b4 <__malloc_unlock>:
 800e3b4:	4801      	ldr	r0, [pc, #4]	; (800e3bc <__malloc_unlock+0x8>)
 800e3b6:	f7ff bfca 	b.w	800e34e <__retarget_lock_release_recursive>
 800e3ba:	bf00      	nop
 800e3bc:	2000686c 	.word	0x2000686c

0800e3c0 <_realloc_r>:
 800e3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c4:	4680      	mov	r8, r0
 800e3c6:	4614      	mov	r4, r2
 800e3c8:	460e      	mov	r6, r1
 800e3ca:	b921      	cbnz	r1, 800e3d6 <_realloc_r+0x16>
 800e3cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	f7fe bf53 	b.w	800d27c <_malloc_r>
 800e3d6:	b92a      	cbnz	r2, 800e3e4 <_realloc_r+0x24>
 800e3d8:	f7fe fee4 	bl	800d1a4 <_free_r>
 800e3dc:	4625      	mov	r5, r4
 800e3de:	4628      	mov	r0, r5
 800e3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e4:	f000 faae 	bl	800e944 <_malloc_usable_size_r>
 800e3e8:	4284      	cmp	r4, r0
 800e3ea:	4607      	mov	r7, r0
 800e3ec:	d802      	bhi.n	800e3f4 <_realloc_r+0x34>
 800e3ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3f2:	d812      	bhi.n	800e41a <_realloc_r+0x5a>
 800e3f4:	4621      	mov	r1, r4
 800e3f6:	4640      	mov	r0, r8
 800e3f8:	f7fe ff40 	bl	800d27c <_malloc_r>
 800e3fc:	4605      	mov	r5, r0
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d0ed      	beq.n	800e3de <_realloc_r+0x1e>
 800e402:	42bc      	cmp	r4, r7
 800e404:	4622      	mov	r2, r4
 800e406:	4631      	mov	r1, r6
 800e408:	bf28      	it	cs
 800e40a:	463a      	movcs	r2, r7
 800e40c:	f7fc ff64 	bl	800b2d8 <memcpy>
 800e410:	4631      	mov	r1, r6
 800e412:	4640      	mov	r0, r8
 800e414:	f7fe fec6 	bl	800d1a4 <_free_r>
 800e418:	e7e1      	b.n	800e3de <_realloc_r+0x1e>
 800e41a:	4635      	mov	r5, r6
 800e41c:	e7df      	b.n	800e3de <_realloc_r+0x1e>

0800e41e <__sfputc_r>:
 800e41e:	6893      	ldr	r3, [r2, #8]
 800e420:	3b01      	subs	r3, #1
 800e422:	2b00      	cmp	r3, #0
 800e424:	b410      	push	{r4}
 800e426:	6093      	str	r3, [r2, #8]
 800e428:	da08      	bge.n	800e43c <__sfputc_r+0x1e>
 800e42a:	6994      	ldr	r4, [r2, #24]
 800e42c:	42a3      	cmp	r3, r4
 800e42e:	db01      	blt.n	800e434 <__sfputc_r+0x16>
 800e430:	290a      	cmp	r1, #10
 800e432:	d103      	bne.n	800e43c <__sfputc_r+0x1e>
 800e434:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e438:	f000 b94a 	b.w	800e6d0 <__swbuf_r>
 800e43c:	6813      	ldr	r3, [r2, #0]
 800e43e:	1c58      	adds	r0, r3, #1
 800e440:	6010      	str	r0, [r2, #0]
 800e442:	7019      	strb	r1, [r3, #0]
 800e444:	4608      	mov	r0, r1
 800e446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <__sfputs_r>:
 800e44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44e:	4606      	mov	r6, r0
 800e450:	460f      	mov	r7, r1
 800e452:	4614      	mov	r4, r2
 800e454:	18d5      	adds	r5, r2, r3
 800e456:	42ac      	cmp	r4, r5
 800e458:	d101      	bne.n	800e45e <__sfputs_r+0x12>
 800e45a:	2000      	movs	r0, #0
 800e45c:	e007      	b.n	800e46e <__sfputs_r+0x22>
 800e45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e462:	463a      	mov	r2, r7
 800e464:	4630      	mov	r0, r6
 800e466:	f7ff ffda 	bl	800e41e <__sfputc_r>
 800e46a:	1c43      	adds	r3, r0, #1
 800e46c:	d1f3      	bne.n	800e456 <__sfputs_r+0xa>
 800e46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e470 <_vfiprintf_r>:
 800e470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e474:	460d      	mov	r5, r1
 800e476:	b09d      	sub	sp, #116	; 0x74
 800e478:	4614      	mov	r4, r2
 800e47a:	4698      	mov	r8, r3
 800e47c:	4606      	mov	r6, r0
 800e47e:	b118      	cbz	r0, 800e488 <_vfiprintf_r+0x18>
 800e480:	6983      	ldr	r3, [r0, #24]
 800e482:	b90b      	cbnz	r3, 800e488 <_vfiprintf_r+0x18>
 800e484:	f7ff feb2 	bl	800e1ec <__sinit>
 800e488:	4b89      	ldr	r3, [pc, #548]	; (800e6b0 <_vfiprintf_r+0x240>)
 800e48a:	429d      	cmp	r5, r3
 800e48c:	d11b      	bne.n	800e4c6 <_vfiprintf_r+0x56>
 800e48e:	6875      	ldr	r5, [r6, #4]
 800e490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e492:	07d9      	lsls	r1, r3, #31
 800e494:	d405      	bmi.n	800e4a2 <_vfiprintf_r+0x32>
 800e496:	89ab      	ldrh	r3, [r5, #12]
 800e498:	059a      	lsls	r2, r3, #22
 800e49a:	d402      	bmi.n	800e4a2 <_vfiprintf_r+0x32>
 800e49c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e49e:	f7ff ff55 	bl	800e34c <__retarget_lock_acquire_recursive>
 800e4a2:	89ab      	ldrh	r3, [r5, #12]
 800e4a4:	071b      	lsls	r3, r3, #28
 800e4a6:	d501      	bpl.n	800e4ac <_vfiprintf_r+0x3c>
 800e4a8:	692b      	ldr	r3, [r5, #16]
 800e4aa:	b9eb      	cbnz	r3, 800e4e8 <_vfiprintf_r+0x78>
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	f000 f96e 	bl	800e790 <__swsetup_r>
 800e4b4:	b1c0      	cbz	r0, 800e4e8 <_vfiprintf_r+0x78>
 800e4b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4b8:	07dc      	lsls	r4, r3, #31
 800e4ba:	d50e      	bpl.n	800e4da <_vfiprintf_r+0x6a>
 800e4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c0:	b01d      	add	sp, #116	; 0x74
 800e4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c6:	4b7b      	ldr	r3, [pc, #492]	; (800e6b4 <_vfiprintf_r+0x244>)
 800e4c8:	429d      	cmp	r5, r3
 800e4ca:	d101      	bne.n	800e4d0 <_vfiprintf_r+0x60>
 800e4cc:	68b5      	ldr	r5, [r6, #8]
 800e4ce:	e7df      	b.n	800e490 <_vfiprintf_r+0x20>
 800e4d0:	4b79      	ldr	r3, [pc, #484]	; (800e6b8 <_vfiprintf_r+0x248>)
 800e4d2:	429d      	cmp	r5, r3
 800e4d4:	bf08      	it	eq
 800e4d6:	68f5      	ldreq	r5, [r6, #12]
 800e4d8:	e7da      	b.n	800e490 <_vfiprintf_r+0x20>
 800e4da:	89ab      	ldrh	r3, [r5, #12]
 800e4dc:	0598      	lsls	r0, r3, #22
 800e4de:	d4ed      	bmi.n	800e4bc <_vfiprintf_r+0x4c>
 800e4e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4e2:	f7ff ff34 	bl	800e34e <__retarget_lock_release_recursive>
 800e4e6:	e7e9      	b.n	800e4bc <_vfiprintf_r+0x4c>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ec:	2320      	movs	r3, #32
 800e4ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4f6:	2330      	movs	r3, #48	; 0x30
 800e4f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e6bc <_vfiprintf_r+0x24c>
 800e4fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e500:	f04f 0901 	mov.w	r9, #1
 800e504:	4623      	mov	r3, r4
 800e506:	469a      	mov	sl, r3
 800e508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e50c:	b10a      	cbz	r2, 800e512 <_vfiprintf_r+0xa2>
 800e50e:	2a25      	cmp	r2, #37	; 0x25
 800e510:	d1f9      	bne.n	800e506 <_vfiprintf_r+0x96>
 800e512:	ebba 0b04 	subs.w	fp, sl, r4
 800e516:	d00b      	beq.n	800e530 <_vfiprintf_r+0xc0>
 800e518:	465b      	mov	r3, fp
 800e51a:	4622      	mov	r2, r4
 800e51c:	4629      	mov	r1, r5
 800e51e:	4630      	mov	r0, r6
 800e520:	f7ff ff94 	bl	800e44c <__sfputs_r>
 800e524:	3001      	adds	r0, #1
 800e526:	f000 80aa 	beq.w	800e67e <_vfiprintf_r+0x20e>
 800e52a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e52c:	445a      	add	r2, fp
 800e52e:	9209      	str	r2, [sp, #36]	; 0x24
 800e530:	f89a 3000 	ldrb.w	r3, [sl]
 800e534:	2b00      	cmp	r3, #0
 800e536:	f000 80a2 	beq.w	800e67e <_vfiprintf_r+0x20e>
 800e53a:	2300      	movs	r3, #0
 800e53c:	f04f 32ff 	mov.w	r2, #4294967295
 800e540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e544:	f10a 0a01 	add.w	sl, sl, #1
 800e548:	9304      	str	r3, [sp, #16]
 800e54a:	9307      	str	r3, [sp, #28]
 800e54c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e550:	931a      	str	r3, [sp, #104]	; 0x68
 800e552:	4654      	mov	r4, sl
 800e554:	2205      	movs	r2, #5
 800e556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e55a:	4858      	ldr	r0, [pc, #352]	; (800e6bc <_vfiprintf_r+0x24c>)
 800e55c:	f7f1 fe58 	bl	8000210 <memchr>
 800e560:	9a04      	ldr	r2, [sp, #16]
 800e562:	b9d8      	cbnz	r0, 800e59c <_vfiprintf_r+0x12c>
 800e564:	06d1      	lsls	r1, r2, #27
 800e566:	bf44      	itt	mi
 800e568:	2320      	movmi	r3, #32
 800e56a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e56e:	0713      	lsls	r3, r2, #28
 800e570:	bf44      	itt	mi
 800e572:	232b      	movmi	r3, #43	; 0x2b
 800e574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e578:	f89a 3000 	ldrb.w	r3, [sl]
 800e57c:	2b2a      	cmp	r3, #42	; 0x2a
 800e57e:	d015      	beq.n	800e5ac <_vfiprintf_r+0x13c>
 800e580:	9a07      	ldr	r2, [sp, #28]
 800e582:	4654      	mov	r4, sl
 800e584:	2000      	movs	r0, #0
 800e586:	f04f 0c0a 	mov.w	ip, #10
 800e58a:	4621      	mov	r1, r4
 800e58c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e590:	3b30      	subs	r3, #48	; 0x30
 800e592:	2b09      	cmp	r3, #9
 800e594:	d94e      	bls.n	800e634 <_vfiprintf_r+0x1c4>
 800e596:	b1b0      	cbz	r0, 800e5c6 <_vfiprintf_r+0x156>
 800e598:	9207      	str	r2, [sp, #28]
 800e59a:	e014      	b.n	800e5c6 <_vfiprintf_r+0x156>
 800e59c:	eba0 0308 	sub.w	r3, r0, r8
 800e5a0:	fa09 f303 	lsl.w	r3, r9, r3
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	9304      	str	r3, [sp, #16]
 800e5a8:	46a2      	mov	sl, r4
 800e5aa:	e7d2      	b.n	800e552 <_vfiprintf_r+0xe2>
 800e5ac:	9b03      	ldr	r3, [sp, #12]
 800e5ae:	1d19      	adds	r1, r3, #4
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	9103      	str	r1, [sp, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	bfbb      	ittet	lt
 800e5b8:	425b      	neglt	r3, r3
 800e5ba:	f042 0202 	orrlt.w	r2, r2, #2
 800e5be:	9307      	strge	r3, [sp, #28]
 800e5c0:	9307      	strlt	r3, [sp, #28]
 800e5c2:	bfb8      	it	lt
 800e5c4:	9204      	strlt	r2, [sp, #16]
 800e5c6:	7823      	ldrb	r3, [r4, #0]
 800e5c8:	2b2e      	cmp	r3, #46	; 0x2e
 800e5ca:	d10c      	bne.n	800e5e6 <_vfiprintf_r+0x176>
 800e5cc:	7863      	ldrb	r3, [r4, #1]
 800e5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800e5d0:	d135      	bne.n	800e63e <_vfiprintf_r+0x1ce>
 800e5d2:	9b03      	ldr	r3, [sp, #12]
 800e5d4:	1d1a      	adds	r2, r3, #4
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	9203      	str	r2, [sp, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	bfb8      	it	lt
 800e5de:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5e2:	3402      	adds	r4, #2
 800e5e4:	9305      	str	r3, [sp, #20]
 800e5e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e6cc <_vfiprintf_r+0x25c>
 800e5ea:	7821      	ldrb	r1, [r4, #0]
 800e5ec:	2203      	movs	r2, #3
 800e5ee:	4650      	mov	r0, sl
 800e5f0:	f7f1 fe0e 	bl	8000210 <memchr>
 800e5f4:	b140      	cbz	r0, 800e608 <_vfiprintf_r+0x198>
 800e5f6:	2340      	movs	r3, #64	; 0x40
 800e5f8:	eba0 000a 	sub.w	r0, r0, sl
 800e5fc:	fa03 f000 	lsl.w	r0, r3, r0
 800e600:	9b04      	ldr	r3, [sp, #16]
 800e602:	4303      	orrs	r3, r0
 800e604:	3401      	adds	r4, #1
 800e606:	9304      	str	r3, [sp, #16]
 800e608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e60c:	482c      	ldr	r0, [pc, #176]	; (800e6c0 <_vfiprintf_r+0x250>)
 800e60e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e612:	2206      	movs	r2, #6
 800e614:	f7f1 fdfc 	bl	8000210 <memchr>
 800e618:	2800      	cmp	r0, #0
 800e61a:	d03f      	beq.n	800e69c <_vfiprintf_r+0x22c>
 800e61c:	4b29      	ldr	r3, [pc, #164]	; (800e6c4 <_vfiprintf_r+0x254>)
 800e61e:	bb1b      	cbnz	r3, 800e668 <_vfiprintf_r+0x1f8>
 800e620:	9b03      	ldr	r3, [sp, #12]
 800e622:	3307      	adds	r3, #7
 800e624:	f023 0307 	bic.w	r3, r3, #7
 800e628:	3308      	adds	r3, #8
 800e62a:	9303      	str	r3, [sp, #12]
 800e62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e62e:	443b      	add	r3, r7
 800e630:	9309      	str	r3, [sp, #36]	; 0x24
 800e632:	e767      	b.n	800e504 <_vfiprintf_r+0x94>
 800e634:	fb0c 3202 	mla	r2, ip, r2, r3
 800e638:	460c      	mov	r4, r1
 800e63a:	2001      	movs	r0, #1
 800e63c:	e7a5      	b.n	800e58a <_vfiprintf_r+0x11a>
 800e63e:	2300      	movs	r3, #0
 800e640:	3401      	adds	r4, #1
 800e642:	9305      	str	r3, [sp, #20]
 800e644:	4619      	mov	r1, r3
 800e646:	f04f 0c0a 	mov.w	ip, #10
 800e64a:	4620      	mov	r0, r4
 800e64c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e650:	3a30      	subs	r2, #48	; 0x30
 800e652:	2a09      	cmp	r2, #9
 800e654:	d903      	bls.n	800e65e <_vfiprintf_r+0x1ee>
 800e656:	2b00      	cmp	r3, #0
 800e658:	d0c5      	beq.n	800e5e6 <_vfiprintf_r+0x176>
 800e65a:	9105      	str	r1, [sp, #20]
 800e65c:	e7c3      	b.n	800e5e6 <_vfiprintf_r+0x176>
 800e65e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e662:	4604      	mov	r4, r0
 800e664:	2301      	movs	r3, #1
 800e666:	e7f0      	b.n	800e64a <_vfiprintf_r+0x1da>
 800e668:	ab03      	add	r3, sp, #12
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	462a      	mov	r2, r5
 800e66e:	4b16      	ldr	r3, [pc, #88]	; (800e6c8 <_vfiprintf_r+0x258>)
 800e670:	a904      	add	r1, sp, #16
 800e672:	4630      	mov	r0, r6
 800e674:	f7fc fee6 	bl	800b444 <_printf_float>
 800e678:	4607      	mov	r7, r0
 800e67a:	1c78      	adds	r0, r7, #1
 800e67c:	d1d6      	bne.n	800e62c <_vfiprintf_r+0x1bc>
 800e67e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e680:	07d9      	lsls	r1, r3, #31
 800e682:	d405      	bmi.n	800e690 <_vfiprintf_r+0x220>
 800e684:	89ab      	ldrh	r3, [r5, #12]
 800e686:	059a      	lsls	r2, r3, #22
 800e688:	d402      	bmi.n	800e690 <_vfiprintf_r+0x220>
 800e68a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e68c:	f7ff fe5f 	bl	800e34e <__retarget_lock_release_recursive>
 800e690:	89ab      	ldrh	r3, [r5, #12]
 800e692:	065b      	lsls	r3, r3, #25
 800e694:	f53f af12 	bmi.w	800e4bc <_vfiprintf_r+0x4c>
 800e698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e69a:	e711      	b.n	800e4c0 <_vfiprintf_r+0x50>
 800e69c:	ab03      	add	r3, sp, #12
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	462a      	mov	r2, r5
 800e6a2:	4b09      	ldr	r3, [pc, #36]	; (800e6c8 <_vfiprintf_r+0x258>)
 800e6a4:	a904      	add	r1, sp, #16
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f7fd f970 	bl	800b98c <_printf_i>
 800e6ac:	e7e4      	b.n	800e678 <_vfiprintf_r+0x208>
 800e6ae:	bf00      	nop
 800e6b0:	0800fe14 	.word	0x0800fe14
 800e6b4:	0800fe34 	.word	0x0800fe34
 800e6b8:	0800fdf4 	.word	0x0800fdf4
 800e6bc:	0800fd8c 	.word	0x0800fd8c
 800e6c0:	0800fd96 	.word	0x0800fd96
 800e6c4:	0800b445 	.word	0x0800b445
 800e6c8:	0800e44d 	.word	0x0800e44d
 800e6cc:	0800fd92 	.word	0x0800fd92

0800e6d0 <__swbuf_r>:
 800e6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d2:	460e      	mov	r6, r1
 800e6d4:	4614      	mov	r4, r2
 800e6d6:	4605      	mov	r5, r0
 800e6d8:	b118      	cbz	r0, 800e6e2 <__swbuf_r+0x12>
 800e6da:	6983      	ldr	r3, [r0, #24]
 800e6dc:	b90b      	cbnz	r3, 800e6e2 <__swbuf_r+0x12>
 800e6de:	f7ff fd85 	bl	800e1ec <__sinit>
 800e6e2:	4b21      	ldr	r3, [pc, #132]	; (800e768 <__swbuf_r+0x98>)
 800e6e4:	429c      	cmp	r4, r3
 800e6e6:	d12b      	bne.n	800e740 <__swbuf_r+0x70>
 800e6e8:	686c      	ldr	r4, [r5, #4]
 800e6ea:	69a3      	ldr	r3, [r4, #24]
 800e6ec:	60a3      	str	r3, [r4, #8]
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	071a      	lsls	r2, r3, #28
 800e6f2:	d52f      	bpl.n	800e754 <__swbuf_r+0x84>
 800e6f4:	6923      	ldr	r3, [r4, #16]
 800e6f6:	b36b      	cbz	r3, 800e754 <__swbuf_r+0x84>
 800e6f8:	6923      	ldr	r3, [r4, #16]
 800e6fa:	6820      	ldr	r0, [r4, #0]
 800e6fc:	1ac0      	subs	r0, r0, r3
 800e6fe:	6963      	ldr	r3, [r4, #20]
 800e700:	b2f6      	uxtb	r6, r6
 800e702:	4283      	cmp	r3, r0
 800e704:	4637      	mov	r7, r6
 800e706:	dc04      	bgt.n	800e712 <__swbuf_r+0x42>
 800e708:	4621      	mov	r1, r4
 800e70a:	4628      	mov	r0, r5
 800e70c:	f7ff fcda 	bl	800e0c4 <_fflush_r>
 800e710:	bb30      	cbnz	r0, 800e760 <__swbuf_r+0x90>
 800e712:	68a3      	ldr	r3, [r4, #8]
 800e714:	3b01      	subs	r3, #1
 800e716:	60a3      	str	r3, [r4, #8]
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	1c5a      	adds	r2, r3, #1
 800e71c:	6022      	str	r2, [r4, #0]
 800e71e:	701e      	strb	r6, [r3, #0]
 800e720:	6963      	ldr	r3, [r4, #20]
 800e722:	3001      	adds	r0, #1
 800e724:	4283      	cmp	r3, r0
 800e726:	d004      	beq.n	800e732 <__swbuf_r+0x62>
 800e728:	89a3      	ldrh	r3, [r4, #12]
 800e72a:	07db      	lsls	r3, r3, #31
 800e72c:	d506      	bpl.n	800e73c <__swbuf_r+0x6c>
 800e72e:	2e0a      	cmp	r6, #10
 800e730:	d104      	bne.n	800e73c <__swbuf_r+0x6c>
 800e732:	4621      	mov	r1, r4
 800e734:	4628      	mov	r0, r5
 800e736:	f7ff fcc5 	bl	800e0c4 <_fflush_r>
 800e73a:	b988      	cbnz	r0, 800e760 <__swbuf_r+0x90>
 800e73c:	4638      	mov	r0, r7
 800e73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e740:	4b0a      	ldr	r3, [pc, #40]	; (800e76c <__swbuf_r+0x9c>)
 800e742:	429c      	cmp	r4, r3
 800e744:	d101      	bne.n	800e74a <__swbuf_r+0x7a>
 800e746:	68ac      	ldr	r4, [r5, #8]
 800e748:	e7cf      	b.n	800e6ea <__swbuf_r+0x1a>
 800e74a:	4b09      	ldr	r3, [pc, #36]	; (800e770 <__swbuf_r+0xa0>)
 800e74c:	429c      	cmp	r4, r3
 800e74e:	bf08      	it	eq
 800e750:	68ec      	ldreq	r4, [r5, #12]
 800e752:	e7ca      	b.n	800e6ea <__swbuf_r+0x1a>
 800e754:	4621      	mov	r1, r4
 800e756:	4628      	mov	r0, r5
 800e758:	f000 f81a 	bl	800e790 <__swsetup_r>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d0cb      	beq.n	800e6f8 <__swbuf_r+0x28>
 800e760:	f04f 37ff 	mov.w	r7, #4294967295
 800e764:	e7ea      	b.n	800e73c <__swbuf_r+0x6c>
 800e766:	bf00      	nop
 800e768:	0800fe14 	.word	0x0800fe14
 800e76c:	0800fe34 	.word	0x0800fe34
 800e770:	0800fdf4 	.word	0x0800fdf4

0800e774 <__ascii_wctomb>:
 800e774:	b149      	cbz	r1, 800e78a <__ascii_wctomb+0x16>
 800e776:	2aff      	cmp	r2, #255	; 0xff
 800e778:	bf85      	ittet	hi
 800e77a:	238a      	movhi	r3, #138	; 0x8a
 800e77c:	6003      	strhi	r3, [r0, #0]
 800e77e:	700a      	strbls	r2, [r1, #0]
 800e780:	f04f 30ff 	movhi.w	r0, #4294967295
 800e784:	bf98      	it	ls
 800e786:	2001      	movls	r0, #1
 800e788:	4770      	bx	lr
 800e78a:	4608      	mov	r0, r1
 800e78c:	4770      	bx	lr
	...

0800e790 <__swsetup_r>:
 800e790:	4b32      	ldr	r3, [pc, #200]	; (800e85c <__swsetup_r+0xcc>)
 800e792:	b570      	push	{r4, r5, r6, lr}
 800e794:	681d      	ldr	r5, [r3, #0]
 800e796:	4606      	mov	r6, r0
 800e798:	460c      	mov	r4, r1
 800e79a:	b125      	cbz	r5, 800e7a6 <__swsetup_r+0x16>
 800e79c:	69ab      	ldr	r3, [r5, #24]
 800e79e:	b913      	cbnz	r3, 800e7a6 <__swsetup_r+0x16>
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	f7ff fd23 	bl	800e1ec <__sinit>
 800e7a6:	4b2e      	ldr	r3, [pc, #184]	; (800e860 <__swsetup_r+0xd0>)
 800e7a8:	429c      	cmp	r4, r3
 800e7aa:	d10f      	bne.n	800e7cc <__swsetup_r+0x3c>
 800e7ac:	686c      	ldr	r4, [r5, #4]
 800e7ae:	89a3      	ldrh	r3, [r4, #12]
 800e7b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7b4:	0719      	lsls	r1, r3, #28
 800e7b6:	d42c      	bmi.n	800e812 <__swsetup_r+0x82>
 800e7b8:	06dd      	lsls	r5, r3, #27
 800e7ba:	d411      	bmi.n	800e7e0 <__swsetup_r+0x50>
 800e7bc:	2309      	movs	r3, #9
 800e7be:	6033      	str	r3, [r6, #0]
 800e7c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7c4:	81a3      	strh	r3, [r4, #12]
 800e7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ca:	e03e      	b.n	800e84a <__swsetup_r+0xba>
 800e7cc:	4b25      	ldr	r3, [pc, #148]	; (800e864 <__swsetup_r+0xd4>)
 800e7ce:	429c      	cmp	r4, r3
 800e7d0:	d101      	bne.n	800e7d6 <__swsetup_r+0x46>
 800e7d2:	68ac      	ldr	r4, [r5, #8]
 800e7d4:	e7eb      	b.n	800e7ae <__swsetup_r+0x1e>
 800e7d6:	4b24      	ldr	r3, [pc, #144]	; (800e868 <__swsetup_r+0xd8>)
 800e7d8:	429c      	cmp	r4, r3
 800e7da:	bf08      	it	eq
 800e7dc:	68ec      	ldreq	r4, [r5, #12]
 800e7de:	e7e6      	b.n	800e7ae <__swsetup_r+0x1e>
 800e7e0:	0758      	lsls	r0, r3, #29
 800e7e2:	d512      	bpl.n	800e80a <__swsetup_r+0x7a>
 800e7e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7e6:	b141      	cbz	r1, 800e7fa <__swsetup_r+0x6a>
 800e7e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7ec:	4299      	cmp	r1, r3
 800e7ee:	d002      	beq.n	800e7f6 <__swsetup_r+0x66>
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	f7fe fcd7 	bl	800d1a4 <_free_r>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	6363      	str	r3, [r4, #52]	; 0x34
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e800:	81a3      	strh	r3, [r4, #12]
 800e802:	2300      	movs	r3, #0
 800e804:	6063      	str	r3, [r4, #4]
 800e806:	6923      	ldr	r3, [r4, #16]
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	89a3      	ldrh	r3, [r4, #12]
 800e80c:	f043 0308 	orr.w	r3, r3, #8
 800e810:	81a3      	strh	r3, [r4, #12]
 800e812:	6923      	ldr	r3, [r4, #16]
 800e814:	b94b      	cbnz	r3, 800e82a <__swsetup_r+0x9a>
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e81c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e820:	d003      	beq.n	800e82a <__swsetup_r+0x9a>
 800e822:	4621      	mov	r1, r4
 800e824:	4630      	mov	r0, r6
 800e826:	f000 f84d 	bl	800e8c4 <__smakebuf_r>
 800e82a:	89a0      	ldrh	r0, [r4, #12]
 800e82c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e830:	f010 0301 	ands.w	r3, r0, #1
 800e834:	d00a      	beq.n	800e84c <__swsetup_r+0xbc>
 800e836:	2300      	movs	r3, #0
 800e838:	60a3      	str	r3, [r4, #8]
 800e83a:	6963      	ldr	r3, [r4, #20]
 800e83c:	425b      	negs	r3, r3
 800e83e:	61a3      	str	r3, [r4, #24]
 800e840:	6923      	ldr	r3, [r4, #16]
 800e842:	b943      	cbnz	r3, 800e856 <__swsetup_r+0xc6>
 800e844:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e848:	d1ba      	bne.n	800e7c0 <__swsetup_r+0x30>
 800e84a:	bd70      	pop	{r4, r5, r6, pc}
 800e84c:	0781      	lsls	r1, r0, #30
 800e84e:	bf58      	it	pl
 800e850:	6963      	ldrpl	r3, [r4, #20]
 800e852:	60a3      	str	r3, [r4, #8]
 800e854:	e7f4      	b.n	800e840 <__swsetup_r+0xb0>
 800e856:	2000      	movs	r0, #0
 800e858:	e7f7      	b.n	800e84a <__swsetup_r+0xba>
 800e85a:	bf00      	nop
 800e85c:	20000060 	.word	0x20000060
 800e860:	0800fe14 	.word	0x0800fe14
 800e864:	0800fe34 	.word	0x0800fe34
 800e868:	0800fdf4 	.word	0x0800fdf4

0800e86c <abort>:
 800e86c:	b508      	push	{r3, lr}
 800e86e:	2006      	movs	r0, #6
 800e870:	f000 f898 	bl	800e9a4 <raise>
 800e874:	2001      	movs	r0, #1
 800e876:	f7f6 f9c5 	bl	8004c04 <_exit>

0800e87a <__swhatbuf_r>:
 800e87a:	b570      	push	{r4, r5, r6, lr}
 800e87c:	460e      	mov	r6, r1
 800e87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e882:	2900      	cmp	r1, #0
 800e884:	b096      	sub	sp, #88	; 0x58
 800e886:	4614      	mov	r4, r2
 800e888:	461d      	mov	r5, r3
 800e88a:	da08      	bge.n	800e89e <__swhatbuf_r+0x24>
 800e88c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e890:	2200      	movs	r2, #0
 800e892:	602a      	str	r2, [r5, #0]
 800e894:	061a      	lsls	r2, r3, #24
 800e896:	d410      	bmi.n	800e8ba <__swhatbuf_r+0x40>
 800e898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e89c:	e00e      	b.n	800e8bc <__swhatbuf_r+0x42>
 800e89e:	466a      	mov	r2, sp
 800e8a0:	f000 f89c 	bl	800e9dc <_fstat_r>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	dbf1      	blt.n	800e88c <__swhatbuf_r+0x12>
 800e8a8:	9a01      	ldr	r2, [sp, #4]
 800e8aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e8ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e8b2:	425a      	negs	r2, r3
 800e8b4:	415a      	adcs	r2, r3
 800e8b6:	602a      	str	r2, [r5, #0]
 800e8b8:	e7ee      	b.n	800e898 <__swhatbuf_r+0x1e>
 800e8ba:	2340      	movs	r3, #64	; 0x40
 800e8bc:	2000      	movs	r0, #0
 800e8be:	6023      	str	r3, [r4, #0]
 800e8c0:	b016      	add	sp, #88	; 0x58
 800e8c2:	bd70      	pop	{r4, r5, r6, pc}

0800e8c4 <__smakebuf_r>:
 800e8c4:	898b      	ldrh	r3, [r1, #12]
 800e8c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e8c8:	079d      	lsls	r5, r3, #30
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	d507      	bpl.n	800e8e0 <__smakebuf_r+0x1c>
 800e8d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	6123      	str	r3, [r4, #16]
 800e8d8:	2301      	movs	r3, #1
 800e8da:	6163      	str	r3, [r4, #20]
 800e8dc:	b002      	add	sp, #8
 800e8de:	bd70      	pop	{r4, r5, r6, pc}
 800e8e0:	ab01      	add	r3, sp, #4
 800e8e2:	466a      	mov	r2, sp
 800e8e4:	f7ff ffc9 	bl	800e87a <__swhatbuf_r>
 800e8e8:	9900      	ldr	r1, [sp, #0]
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	4630      	mov	r0, r6
 800e8ee:	f7fe fcc5 	bl	800d27c <_malloc_r>
 800e8f2:	b948      	cbnz	r0, 800e908 <__smakebuf_r+0x44>
 800e8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8f8:	059a      	lsls	r2, r3, #22
 800e8fa:	d4ef      	bmi.n	800e8dc <__smakebuf_r+0x18>
 800e8fc:	f023 0303 	bic.w	r3, r3, #3
 800e900:	f043 0302 	orr.w	r3, r3, #2
 800e904:	81a3      	strh	r3, [r4, #12]
 800e906:	e7e3      	b.n	800e8d0 <__smakebuf_r+0xc>
 800e908:	4b0d      	ldr	r3, [pc, #52]	; (800e940 <__smakebuf_r+0x7c>)
 800e90a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e90c:	89a3      	ldrh	r3, [r4, #12]
 800e90e:	6020      	str	r0, [r4, #0]
 800e910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e914:	81a3      	strh	r3, [r4, #12]
 800e916:	9b00      	ldr	r3, [sp, #0]
 800e918:	6163      	str	r3, [r4, #20]
 800e91a:	9b01      	ldr	r3, [sp, #4]
 800e91c:	6120      	str	r0, [r4, #16]
 800e91e:	b15b      	cbz	r3, 800e938 <__smakebuf_r+0x74>
 800e920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e924:	4630      	mov	r0, r6
 800e926:	f000 f86b 	bl	800ea00 <_isatty_r>
 800e92a:	b128      	cbz	r0, 800e938 <__smakebuf_r+0x74>
 800e92c:	89a3      	ldrh	r3, [r4, #12]
 800e92e:	f023 0303 	bic.w	r3, r3, #3
 800e932:	f043 0301 	orr.w	r3, r3, #1
 800e936:	81a3      	strh	r3, [r4, #12]
 800e938:	89a0      	ldrh	r0, [r4, #12]
 800e93a:	4305      	orrs	r5, r0
 800e93c:	81a5      	strh	r5, [r4, #12]
 800e93e:	e7cd      	b.n	800e8dc <__smakebuf_r+0x18>
 800e940:	0800e185 	.word	0x0800e185

0800e944 <_malloc_usable_size_r>:
 800e944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e948:	1f18      	subs	r0, r3, #4
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	bfbc      	itt	lt
 800e94e:	580b      	ldrlt	r3, [r1, r0]
 800e950:	18c0      	addlt	r0, r0, r3
 800e952:	4770      	bx	lr

0800e954 <_raise_r>:
 800e954:	291f      	cmp	r1, #31
 800e956:	b538      	push	{r3, r4, r5, lr}
 800e958:	4604      	mov	r4, r0
 800e95a:	460d      	mov	r5, r1
 800e95c:	d904      	bls.n	800e968 <_raise_r+0x14>
 800e95e:	2316      	movs	r3, #22
 800e960:	6003      	str	r3, [r0, #0]
 800e962:	f04f 30ff 	mov.w	r0, #4294967295
 800e966:	bd38      	pop	{r3, r4, r5, pc}
 800e968:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e96a:	b112      	cbz	r2, 800e972 <_raise_r+0x1e>
 800e96c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e970:	b94b      	cbnz	r3, 800e986 <_raise_r+0x32>
 800e972:	4620      	mov	r0, r4
 800e974:	f000 f830 	bl	800e9d8 <_getpid_r>
 800e978:	462a      	mov	r2, r5
 800e97a:	4601      	mov	r1, r0
 800e97c:	4620      	mov	r0, r4
 800e97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e982:	f000 b817 	b.w	800e9b4 <_kill_r>
 800e986:	2b01      	cmp	r3, #1
 800e988:	d00a      	beq.n	800e9a0 <_raise_r+0x4c>
 800e98a:	1c59      	adds	r1, r3, #1
 800e98c:	d103      	bne.n	800e996 <_raise_r+0x42>
 800e98e:	2316      	movs	r3, #22
 800e990:	6003      	str	r3, [r0, #0]
 800e992:	2001      	movs	r0, #1
 800e994:	e7e7      	b.n	800e966 <_raise_r+0x12>
 800e996:	2400      	movs	r4, #0
 800e998:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e99c:	4628      	mov	r0, r5
 800e99e:	4798      	blx	r3
 800e9a0:	2000      	movs	r0, #0
 800e9a2:	e7e0      	b.n	800e966 <_raise_r+0x12>

0800e9a4 <raise>:
 800e9a4:	4b02      	ldr	r3, [pc, #8]	; (800e9b0 <raise+0xc>)
 800e9a6:	4601      	mov	r1, r0
 800e9a8:	6818      	ldr	r0, [r3, #0]
 800e9aa:	f7ff bfd3 	b.w	800e954 <_raise_r>
 800e9ae:	bf00      	nop
 800e9b0:	20000060 	.word	0x20000060

0800e9b4 <_kill_r>:
 800e9b4:	b538      	push	{r3, r4, r5, lr}
 800e9b6:	4d07      	ldr	r5, [pc, #28]	; (800e9d4 <_kill_r+0x20>)
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	4608      	mov	r0, r1
 800e9be:	4611      	mov	r1, r2
 800e9c0:	602b      	str	r3, [r5, #0]
 800e9c2:	f7f6 f90f 	bl	8004be4 <_kill>
 800e9c6:	1c43      	adds	r3, r0, #1
 800e9c8:	d102      	bne.n	800e9d0 <_kill_r+0x1c>
 800e9ca:	682b      	ldr	r3, [r5, #0]
 800e9cc:	b103      	cbz	r3, 800e9d0 <_kill_r+0x1c>
 800e9ce:	6023      	str	r3, [r4, #0]
 800e9d0:	bd38      	pop	{r3, r4, r5, pc}
 800e9d2:	bf00      	nop
 800e9d4:	20006868 	.word	0x20006868

0800e9d8 <_getpid_r>:
 800e9d8:	f7f6 b8fc 	b.w	8004bd4 <_getpid>

0800e9dc <_fstat_r>:
 800e9dc:	b538      	push	{r3, r4, r5, lr}
 800e9de:	4d07      	ldr	r5, [pc, #28]	; (800e9fc <_fstat_r+0x20>)
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	4608      	mov	r0, r1
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	602b      	str	r3, [r5, #0]
 800e9ea:	f7f6 f95a 	bl	8004ca2 <_fstat>
 800e9ee:	1c43      	adds	r3, r0, #1
 800e9f0:	d102      	bne.n	800e9f8 <_fstat_r+0x1c>
 800e9f2:	682b      	ldr	r3, [r5, #0]
 800e9f4:	b103      	cbz	r3, 800e9f8 <_fstat_r+0x1c>
 800e9f6:	6023      	str	r3, [r4, #0]
 800e9f8:	bd38      	pop	{r3, r4, r5, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20006868 	.word	0x20006868

0800ea00 <_isatty_r>:
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	4d06      	ldr	r5, [pc, #24]	; (800ea1c <_isatty_r+0x1c>)
 800ea04:	2300      	movs	r3, #0
 800ea06:	4604      	mov	r4, r0
 800ea08:	4608      	mov	r0, r1
 800ea0a:	602b      	str	r3, [r5, #0]
 800ea0c:	f7f6 f959 	bl	8004cc2 <_isatty>
 800ea10:	1c43      	adds	r3, r0, #1
 800ea12:	d102      	bne.n	800ea1a <_isatty_r+0x1a>
 800ea14:	682b      	ldr	r3, [r5, #0]
 800ea16:	b103      	cbz	r3, 800ea1a <_isatty_r+0x1a>
 800ea18:	6023      	str	r3, [r4, #0]
 800ea1a:	bd38      	pop	{r3, r4, r5, pc}
 800ea1c:	20006868 	.word	0x20006868

0800ea20 <_init>:
 800ea20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea22:	bf00      	nop
 800ea24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea26:	bc08      	pop	{r3}
 800ea28:	469e      	mov	lr, r3
 800ea2a:	4770      	bx	lr

0800ea2c <_fini>:
 800ea2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea2e:	bf00      	nop
 800ea30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea32:	bc08      	pop	{r3}
 800ea34:	469e      	mov	lr, r3
 800ea36:	4770      	bx	lr
