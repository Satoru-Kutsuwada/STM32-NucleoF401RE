
TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c0  080059c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c8  080059c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b28  20000070  08005a40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b98  08005a40  00021b98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012567  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a14  00000000  00000000  00032607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00035020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00035f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d0d  00000000  00000000  00036da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128c1  00000000  00000000  0004eaad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e2e  00000000  00000000  0006136e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f519c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004774  00000000  00000000  000f51ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005538 	.word	0x08005538

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005538 	.word	0x08005538

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <debu_main>:

//=============================================================================
//
//=============================================================================
void debu_main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	char ch;

	if(read_line_streem() == INPUT_DATA_FIX){
 80005b8:	f000 fa50 	bl	8000a5c <read_line_streem>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d11c      	bne.n	80005fc <debu_main+0x48>

		input_char_step = INPUT_INIT;
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <debu_main+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

		switch(dev_menue_type){
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <debu_main+0x50>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d00c      	beq.n	80005ea <debu_main+0x36>
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	dc0d      	bgt.n	80005f0 <debu_main+0x3c>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <debu_main+0x2a>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d003      	beq.n	80005e4 <debu_main+0x30>
			break;
		case DEB_RS485_MENUE:
			DBmanue_rs485();
			break;
		default:
			break;
 80005dc:	e008      	b.n	80005f0 <debu_main+0x3c>
			DBmanue_prompt();
 80005de:	f000 f847 	bl	8000670 <DBmanue_prompt>
			break;
 80005e2:	e006      	b.n	80005f2 <debu_main+0x3e>
			DBmanue_log();
 80005e4:	f000 f862 	bl	80006ac <DBmanue_log>
			break;
 80005e8:	e003      	b.n	80005f2 <debu_main+0x3e>
			DBmanue_rs485();
 80005ea:	f000 f8d1 	bl	8000790 <DBmanue_rs485>
			break;
 80005ee:	e000      	b.n	80005f2 <debu_main+0x3e>
			break;
 80005f0:	bf00      	nop
		}

        // メニュを表示する
        DispMenue(dev_menue_type);
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <debu_main+0x50>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f806 	bl	8000608 <DispMenue>
	}
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000090 	.word	0x20000090
 8000604:	20000114 	.word	0x20000114

08000608 <DispMenue>:
//==============================================================================
//
//==============================================================================
void DispMenue(uint8_t type)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    if( type==DEB_PROMPT_MODE ){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d103      	bne.n	8000620 <DispMenue+0x18>
        SKprintf("ST> ");
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <DispMenue+0x5c>)
 800061a:	f000 fbd1 	bl	8000dc0 <SKprintf>
    else{
        for( i=0; i<MenueList[type-1].clumn; i++){
            SKprintf("%s\r\n", &MenueList[type-1].pt[i].name[0]);
        }
    }
}
 800061e:	e01d      	b.n	800065c <DispMenue+0x54>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e011      	b.n	800064a <DispMenue+0x42>
            SKprintf("%s\r\n", &MenueList[type-1].pt[i].name[0]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3b01      	subs	r3, #1
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <DispMenue+0x60>)
 800062c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	4613      	mov	r3, r2
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	440b      	add	r3, r1
 800063c:	4619      	mov	r1, r3
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <DispMenue+0x64>)
 8000640:	f000 fbbe 	bl	8000dc0 <SKprintf>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	3301      	adds	r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	3b01      	subs	r3, #1
 800064e:	4a06      	ldr	r2, [pc, #24]	; (8000668 <DispMenue+0x60>)
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	4413      	add	r3, r2
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	7bfa      	ldrb	r2, [r7, #15]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3e4      	bcc.n	8000626 <DispMenue+0x1e>
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	08005550 	.word	0x08005550
 8000668:	080057e8 	.word	0x080057e8
 800066c:	08005558 	.word	0x08005558

08000670 <DBmanue_prompt>:
//=============================================================================
//
//=============================================================================
void DBmanue_prompt(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    switch( input2menu() ){
 8000674:	f000 f8ee 	bl	8000854 <input2menu>
 8000678:	4603      	mov	r3, r0
 800067a:	2b02      	cmp	r3, #2
 800067c:	d00d      	beq.n	800069a <DBmanue_prompt+0x2a>
 800067e:	2b02      	cmp	r3, #2
 8000680:	dc0f      	bgt.n	80006a2 <DBmanue_prompt+0x32>
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <DBmanue_prompt+0x1c>
 8000686:	2b01      	cmp	r3, #1
 8000688:	d003      	beq.n	8000692 <DBmanue_prompt+0x22>
        break;
    case CMD_RS485:
        dev_menue_type = DEB_RS485_MENUE;
        break;
    default:
        break;
 800068a:	e00a      	b.n	80006a2 <DBmanue_prompt+0x32>
    	rtc_display();
 800068c:	f000 fc04 	bl	8000e98 <rtc_display>
        break;
 8000690:	e008      	b.n	80006a4 <DBmanue_prompt+0x34>
        dev_menue_type = DEB_LOG_MENUE;
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <DBmanue_prompt+0x38>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
        break;
 8000698:	e004      	b.n	80006a4 <DBmanue_prompt+0x34>
        dev_menue_type = DEB_RS485_MENUE;
 800069a:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <DBmanue_prompt+0x38>)
 800069c:	2202      	movs	r2, #2
 800069e:	701a      	strb	r2, [r3, #0]
        break;
 80006a0:	e000      	b.n	80006a4 <DBmanue_prompt+0x34>
        break;
 80006a2:	bf00      	nop
    }
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000114 	.word	0x20000114

080006ac <DBmanue_log>:

//=============================================================================
//
//=============================================================================
void DBmanue_log(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80006b0:	4b35      	ldr	r3, [pc, #212]	; (8000788 <DBmanue_log+0xdc>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b52      	cmp	r3, #82	; 0x52
 80006b6:	dc4b      	bgt.n	8000750 <DBmanue_log+0xa4>
 80006b8:	2b31      	cmp	r3, #49	; 0x31
 80006ba:	db61      	blt.n	8000780 <DBmanue_log+0xd4>
 80006bc:	3b31      	subs	r3, #49	; 0x31
 80006be:	2b21      	cmp	r3, #33	; 0x21
 80006c0:	d85e      	bhi.n	8000780 <DBmanue_log+0xd4>
 80006c2:	a201      	add	r2, pc, #4	; (adr r2, 80006c8 <DBmanue_log+0x1c>)
 80006c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c8:	08000757 	.word	0x08000757
 80006cc:	0800075d 	.word	0x0800075d
 80006d0:	08000763 	.word	0x08000763
 80006d4:	0800076b 	.word	0x0800076b
 80006d8:	08000773 	.word	0x08000773
 80006dc:	08000781 	.word	0x08000781
 80006e0:	08000781 	.word	0x08000781
 80006e4:	08000781 	.word	0x08000781
 80006e8:	08000781 	.word	0x08000781
 80006ec:	08000781 	.word	0x08000781
 80006f0:	08000781 	.word	0x08000781
 80006f4:	08000781 	.word	0x08000781
 80006f8:	08000781 	.word	0x08000781
 80006fc:	08000781 	.word	0x08000781
 8000700:	08000781 	.word	0x08000781
 8000704:	08000781 	.word	0x08000781
 8000708:	08000781 	.word	0x08000781
 800070c:	08000781 	.word	0x08000781
 8000710:	08000781 	.word	0x08000781
 8000714:	08000781 	.word	0x08000781
 8000718:	08000781 	.word	0x08000781
 800071c:	08000781 	.word	0x08000781
 8000720:	08000781 	.word	0x08000781
 8000724:	08000781 	.word	0x08000781
 8000728:	08000781 	.word	0x08000781
 800072c:	08000781 	.word	0x08000781
 8000730:	08000781 	.word	0x08000781
 8000734:	08000781 	.word	0x08000781
 8000738:	08000781 	.word	0x08000781
 800073c:	08000781 	.word	0x08000781
 8000740:	08000781 	.word	0x08000781
 8000744:	08000781 	.word	0x08000781
 8000748:	08000781 	.word	0x08000781
 800074c:	0800077b 	.word	0x0800077b
 8000750:	2b72      	cmp	r3, #114	; 0x72
 8000752:	d012      	beq.n	800077a <DBmanue_log+0xce>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000754:	e014      	b.n	8000780 <DBmanue_log+0xd4>
		LogInfo_display();
 8000756:	f000 fa77 	bl	8000c48 <LogInfo_display>
		break;
 800075a:	e012      	b.n	8000782 <DBmanue_log+0xd6>
		LogInfo_clear();
 800075c:	f000 fb1c 	bl	8000d98 <LogInfo_clear>
		break;
 8000760:	e00f      	b.n	8000782 <DBmanue_log+0xd6>
		Set_logflg(LF_NON_STOP);
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fa56 	bl	8000c14 <Set_logflg>
		break;
 8000768:	e00b      	b.n	8000782 <DBmanue_log+0xd6>
		Set_logflg(LF_IMMMEDIATE_STOP);
 800076a:	2001      	movs	r0, #1
 800076c:	f000 fa52 	bl	8000c14 <Set_logflg>
		break;
 8000770:	e007      	b.n	8000782 <DBmanue_log+0xd6>
		Set_logflg(LF_MAX_DATA_STOP);
 8000772:	2002      	movs	r0, #2
 8000774:	f000 fa4e 	bl	8000c14 <Set_logflg>
		break;
 8000778:	e003      	b.n	8000782 <DBmanue_log+0xd6>
		dev_menue_type = DEB_PROMPT_MODE;
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <DBmanue_log+0xe0>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
		break;
 8000780:	bf00      	nop
	}
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000094 	.word	0x20000094
 800078c:	20000114 	.word	0x20000114

08000790 <DBmanue_rs485>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <DBmanue_rs485+0xbc>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b52      	cmp	r3, #82	; 0x52
 800079a:	dc4b      	bgt.n	8000834 <DBmanue_rs485+0xa4>
 800079c:	2b31      	cmp	r3, #49	; 0x31
 800079e:	db4f      	blt.n	8000840 <DBmanue_rs485+0xb0>
 80007a0:	3b31      	subs	r3, #49	; 0x31
 80007a2:	2b21      	cmp	r3, #33	; 0x21
 80007a4:	d84c      	bhi.n	8000840 <DBmanue_rs485+0xb0>
 80007a6:	a201      	add	r2, pc, #4	; (adr r2, 80007ac <DBmanue_rs485+0x1c>)
 80007a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ac:	08000841 	.word	0x08000841
 80007b0:	08000841 	.word	0x08000841
 80007b4:	08000841 	.word	0x08000841
 80007b8:	08000841 	.word	0x08000841
 80007bc:	08000841 	.word	0x08000841
 80007c0:	08000841 	.word	0x08000841
 80007c4:	08000841 	.word	0x08000841
 80007c8:	08000841 	.word	0x08000841
 80007cc:	08000841 	.word	0x08000841
 80007d0:	08000841 	.word	0x08000841
 80007d4:	08000841 	.word	0x08000841
 80007d8:	08000841 	.word	0x08000841
 80007dc:	08000841 	.word	0x08000841
 80007e0:	08000841 	.word	0x08000841
 80007e4:	08000841 	.word	0x08000841
 80007e8:	08000841 	.word	0x08000841
 80007ec:	08000841 	.word	0x08000841
 80007f0:	08000841 	.word	0x08000841
 80007f4:	08000841 	.word	0x08000841
 80007f8:	08000841 	.word	0x08000841
 80007fc:	08000841 	.word	0x08000841
 8000800:	08000841 	.word	0x08000841
 8000804:	08000841 	.word	0x08000841
 8000808:	08000841 	.word	0x08000841
 800080c:	08000841 	.word	0x08000841
 8000810:	08000841 	.word	0x08000841
 8000814:	08000841 	.word	0x08000841
 8000818:	08000841 	.word	0x08000841
 800081c:	08000841 	.word	0x08000841
 8000820:	08000841 	.word	0x08000841
 8000824:	08000841 	.word	0x08000841
 8000828:	08000841 	.word	0x08000841
 800082c:	08000841 	.word	0x08000841
 8000830:	0800083b 	.word	0x0800083b
 8000834:	2b72      	cmp	r3, #114	; 0x72
 8000836:	d000      	beq.n	800083a <DBmanue_rs485+0xaa>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000838:	e002      	b.n	8000840 <DBmanue_rs485+0xb0>
		dev_menue_type = DEB_PROMPT_MODE;
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <DBmanue_rs485+0xc0>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
		break;
 8000840:	bf00      	nop
	}
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	20000094 	.word	0x20000094
 8000850:	20000114 	.word	0x20000114

08000854 <input2menu>:
//==============================================================================
//
//==============================================================================

COMMAND_MENUE input2menu(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
     uint16_t i = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	80fb      	strh	r3, [r7, #6]
    COMMAND_MENUE rtn = CMD_MAX;
 800085e:	2303      	movs	r3, #3
 8000860:	717b      	strb	r3, [r7, #5]

        while( com_list[i].pt != CMD_MAX ){
 8000862:	e01d      	b.n	80008a0 <input2menu+0x4c>
            if (strcmp(&input_string.main[0], &com_list[i].command[0]) == 0){
 8000864:	88fa      	ldrh	r2, [r7, #6]
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <input2menu+0x6c>)
 8000872:	4413      	add	r3, r2
 8000874:	3301      	adds	r3, #1
 8000876:	4619      	mov	r1, r3
 8000878:	4812      	ldr	r0, [pc, #72]	; (80008c4 <input2menu+0x70>)
 800087a:	f7ff fcb1 	bl	80001e0 <strcmp>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10a      	bne.n	800089a <input2menu+0x46>
                rtn = com_list[i].pt;
 8000884:	88fa      	ldrh	r2, [r7, #6]
 8000886:	490e      	ldr	r1, [pc, #56]	; (80008c0 <input2menu+0x6c>)
 8000888:	4613      	mov	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	4413      	add	r3, r2
 8000892:	440b      	add	r3, r1
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	717b      	strb	r3, [r7, #5]
                break;
 8000898:	e00d      	b.n	80008b6 <input2menu+0x62>
            }
            i++;
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	3301      	adds	r3, #1
 800089e:	80fb      	strh	r3, [r7, #6]
        while( com_list[i].pt != CMD_MAX ){
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	4907      	ldr	r1, [pc, #28]	; (80008c0 <input2menu+0x6c>)
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d1d6      	bne.n	8000864 <input2menu+0x10>
        }

    return rtn;
 80008b6:	797b      	ldrb	r3, [r7, #5]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	08005670 	.word	0x08005670
 80008c4:	20000094 	.word	0x20000094

080008c8 <command_split>:
//==============================================================================
//
//==============================================================================
void command_split(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
	int		i;
	int		j;
	char	moji = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	71fb      	strb	r3, [r7, #7]
	char 	*ptr;

	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	e008      	b.n	80008ea <command_split+0x22>
		input_string.sub_ptr[j] = 0;
 80008d8:	4a5d      	ldr	r2, [pc, #372]	; (8000a50 <command_split+0x188>)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	3308      	adds	r3, #8
 80008de:	2100      	movs	r1, #0
 80008e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	3301      	adds	r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	2b0e      	cmp	r3, #14
 80008ee:	ddf3      	ble.n	80008d8 <command_split+0x10>
	}

	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e027      	b.n	8000946 <command_split+0x7e>
		switch(input_string.main[i]){
 80008f6:	4a56      	ldr	r2, [pc, #344]	; (8000a50 <command_split+0x188>)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b2c      	cmp	r3, #44	; 0x2c
 8000900:	d005      	beq.n	800090e <command_split+0x46>
 8000902:	2b2c      	cmp	r3, #44	; 0x2c
 8000904:	dc0b      	bgt.n	800091e <command_split+0x56>
 8000906:	2b09      	cmp	r3, #9
 8000908:	d001      	beq.n	800090e <command_split+0x46>
 800090a:	2b20      	cmp	r3, #32
 800090c:	d107      	bne.n	800091e <command_split+0x56>
		case ' ':		// スペース
		case ',':		//　カンマ
		case '	':		//　タブ
			input_string.main[i] = '\0';
 800090e:	4a50      	ldr	r2, [pc, #320]	; (8000a50 <command_split+0x188>)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
			moji = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	71fb      	strb	r3, [r7, #7]
			break;
 800091c:	e010      	b.n	8000940 <command_split+0x78>
		default:
			if( moji == 0 ){
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10c      	bne.n	800093e <command_split+0x76>
				if( j < INPUT_BUF_SIZE/2){
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	2b0e      	cmp	r3, #14
 8000928:	dc07      	bgt.n	800093a <command_split+0x72>
					input_string.sub_ptr[j] = &input_string.main[i];
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4a48      	ldr	r2, [pc, #288]	; (8000a50 <command_split+0x188>)
 800092e:	441a      	add	r2, r3
 8000930:	4947      	ldr	r1, [pc, #284]	; (8000a50 <command_split+0x188>)
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	3308      	adds	r3, #8
 8000936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				moji = 1;
 800093a:	2301      	movs	r3, #1
 800093c:	71fb      	strb	r3, [r7, #7]
			}
			break;
 800093e:	bf00      	nop
	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3301      	adds	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2b1d      	cmp	r3, #29
 800094a:	ddd4      	ble.n	80008f6 <command_split+0x2e>
		}
	}

	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 800094c:	2301      	movs	r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	e074      	b.n	8000a3c <command_split+0x174>
		ptr = input_string.sub_ptr[j];
 8000952:	4a3f      	ldr	r2, [pc, #252]	; (8000a50 <command_split+0x188>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	3308      	adds	r3, #8
 8000958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095c:	603b      	str	r3, [r7, #0]
		moji = 1;
 800095e:	2301      	movs	r3, #1
 8000960:	71fb      	strb	r3, [r7, #7]
		if( ptr != 0 ){
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d06d      	beq.n	8000a44 <command_split+0x17c>
			if ( ptr[0] == '0' && ptr[1] == 'x'){
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b30      	cmp	r3, #48	; 0x30
 800096e:	d14c      	bne.n	8000a0a <command_split+0x142>
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	3301      	adds	r3, #1
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b78      	cmp	r3, #120	; 0x78
 8000978:	d147      	bne.n	8000a0a <command_split+0x142>
				ptr ++;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	603b      	str	r3, [r7, #0]
				ptr ++;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8000986:	e01c      	b.n	80009c2 <command_split+0xfa>
					if( ('0'<=*ptr && *ptr<='9') || ('A'<=*ptr && *ptr<='F') || ('a'<=*ptr && *ptr<='f')){
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b2f      	cmp	r3, #47	; 0x2f
 800098e:	d903      	bls.n	8000998 <command_split+0xd0>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b39      	cmp	r3, #57	; 0x39
 8000996:	d911      	bls.n	80009bc <command_split+0xf4>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b40      	cmp	r3, #64	; 0x40
 800099e:	d903      	bls.n	80009a8 <command_split+0xe0>
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b46      	cmp	r3, #70	; 0x46
 80009a6:	d909      	bls.n	80009bc <command_split+0xf4>
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b60      	cmp	r3, #96	; 0x60
 80009ae:	d903      	bls.n	80009b8 <command_split+0xf0>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b66      	cmp	r3, #102	; 0x66
 80009b6:	d901      	bls.n	80009bc <command_split+0xf4>

					}
					else{
						moji = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1de      	bne.n	8000988 <command_split+0xc0>
				}

				if( moji == 1 ){
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d132      	bne.n	8000a36 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%x", &input_string.data[j]);
 80009d0:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <command_split+0x188>)
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	3308      	adds	r3, #8
 80009d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	332c      	adds	r3, #44	; 0x2c
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <command_split+0x188>)
 80009e2:	4413      	add	r3, r2
 80009e4:	3304      	adds	r3, #4
 80009e6:	461a      	mov	r2, r3
 80009e8:	491a      	ldr	r1, [pc, #104]	; (8000a54 <command_split+0x18c>)
 80009ea:	f003 fc7b 	bl	80042e4 <siscanf>
				if( moji == 1 ){
 80009ee:	e022      	b.n	8000a36 <command_split+0x16e>
				}
			}
			else{
				while( *ptr != '\0' ){
					if( '0'<=*ptr && *ptr<='9'){
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b2f      	cmp	r3, #47	; 0x2f
 80009f6:	d903      	bls.n	8000a00 <command_split+0x138>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b39      	cmp	r3, #57	; 0x39
 80009fe:	d901      	bls.n	8000a04 <command_split+0x13c>
					}
					else{
						moji = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1ee      	bne.n	80009f0 <command_split+0x128>
				}

				if( moji == 1 ){
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10e      	bne.n	8000a36 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%d", &input_string.data[j]);
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <command_split+0x188>)
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	332c      	adds	r3, #44	; 0x2c
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <command_split+0x188>)
 8000a2a:	4413      	add	r3, r2
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4909      	ldr	r1, [pc, #36]	; (8000a58 <command_split+0x190>)
 8000a32:	f003 fc57 	bl	80042e4 <siscanf>
	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	2b0e      	cmp	r3, #14
 8000a40:	dd87      	ble.n	8000952 <command_split+0x8a>
		else{
			break;
		}
	}

}
 8000a42:	e000      	b.n	8000a46 <command_split+0x17e>
			break;
 8000a44:	bf00      	nop
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000094 	.word	0x20000094
 8000a54:	08005560 	.word	0x08005560
 8000a58:	08005564 	.word	0x08005564

08000a5c <read_line_streem>:

//==============================================================================
//
//==============================================================================
 INPUT_CHAR_STEP read_line_streem(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
    uint16_t keta;
    uint8_t num;
    uint8_t sub_cnt;
    char	string[2];

    string[0] = '\0';
 8000a62:	2300      	movs	r3, #0
 8000a64:	713b      	strb	r3, [r7, #4]
    string[1] = '\0';
 8000a66:	2300      	movs	r3, #0
 8000a68:	717b      	strb	r3, [r7, #5]


    c = (char)getch();
 8000a6a:	f000 fa55 	bl	8000f18 <getch>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]

    if( c != 0 ){
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d04b      	beq.n	8000b10 <read_line_streem+0xb4>

        switch(input_char_step){
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <read_line_streem+0xc8>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <read_line_streem+0x2a>
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d006      	beq.n	8000a92 <read_line_streem+0x36>
                    input_char_step = INPUT_DATA_FIX;

                    command_split();
                }
            default:
                break;
 8000a84:	e046      	b.n	8000b14 <read_line_streem+0xb8>
                input_pos = 0;
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <read_line_streem+0xcc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
                input_char_step = INPUT_SAVING;
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <read_line_streem+0xc8>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 fc15 	bl	80042c4 <isprint>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d015      	beq.n	8000acc <read_line_streem+0x70>
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <read_line_streem+0xcc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b1c      	cmp	r3, #28
 8000aa6:	dc11      	bgt.n	8000acc <read_line_streem+0x70>
                    input_string.main[input_pos] = c;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <read_line_streem+0xcc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	491f      	ldr	r1, [pc, #124]	; (8000b2c <read_line_streem+0xd0>)
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	54ca      	strb	r2, [r1, r3]
                    input_pos ++;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <read_line_streem+0xcc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <read_line_streem+0xcc>)
 8000aba:	6013      	str	r3, [r2, #0]
                    string[0] = c;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	713b      	strb	r3, [r7, #4]
                    SKprintf("%s",string);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481a      	ldr	r0, [pc, #104]	; (8000b30 <read_line_streem+0xd4>)
 8000ac6:	f000 f97b 	bl	8000dc0 <SKprintf>
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8000aca:	e020      	b.n	8000b0e <read_line_streem+0xb2>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b08      	cmp	r3, #8
 8000ad0:	d10c      	bne.n	8000aec <read_line_streem+0x90>
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <read_line_streem+0xcc>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	dd08      	ble.n	8000aec <read_line_streem+0x90>
                    input_pos --;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <read_line_streem+0xcc>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <read_line_streem+0xcc>)
 8000ae2:	6013      	str	r3, [r2, #0]
                    SKprintf("\x08 \x08");
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <read_line_streem+0xd8>)
 8000ae6:	f000 f96b 	bl	8000dc0 <SKprintf>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8000aea:	e010      	b.n	8000b0e <read_line_streem+0xb2>
                else if (c == '\r') {
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b0d      	cmp	r3, #13
 8000af0:	d110      	bne.n	8000b14 <read_line_streem+0xb8>
                    input_string.main[input_pos] = '\0';
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <read_line_streem+0xcc>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <read_line_streem+0xd0>)
 8000af8:	2100      	movs	r1, #0
 8000afa:	54d1      	strb	r1, [r2, r3]
                    SKprintf("\r\n");
 8000afc:	480e      	ldr	r0, [pc, #56]	; (8000b38 <read_line_streem+0xdc>)
 8000afe:	f000 f95f 	bl	8000dc0 <SKprintf>
                    input_char_step = INPUT_DATA_FIX;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <read_line_streem+0xc8>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	701a      	strb	r2, [r3, #0]
                    command_split();
 8000b08:	f7ff fede 	bl	80008c8 <command_split>
                break;
 8000b0c:	e002      	b.n	8000b14 <read_line_streem+0xb8>
 8000b0e:	e001      	b.n	8000b14 <read_line_streem+0xb8>
        }
    }
 8000b10:	bf00      	nop
 8000b12:	e000      	b.n	8000b16 <read_line_streem+0xba>
                break;
 8000b14:	bf00      	nop
    return(input_char_step);
 8000b16:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <read_line_streem+0xc8>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 }
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000090 	.word	0x20000090
 8000b28:	2000008c 	.word	0x2000008c
 8000b2c:	20000094 	.word	0x20000094
 8000b30:	08005568 	.word	0x08005568
 8000b34:	0800556c 	.word	0x0800556c
 8000b38:	08005570 	.word	0x08005570

08000b3c <HAL_RTCEx_WakeUpTimerEventCallback>:
//==============================================================================
//
//==============================================================================

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

	uint8_t	i;

	if( timer.start > TIMER_AV_NUM){
 8000b44:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b46:	7e5b      	ldrb	r3, [r3, #25]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d941      	bls.n	8000bd0 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>

		timer.dt_buf[timer.av_wcnt] = timer.dt;
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b4e:	7e1b      	ldrb	r3, [r3, #24]
 8000b50:	4618      	mov	r0, r3
 8000b52:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4926      	ldr	r1, [pc, #152]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b58:	0083      	lsls	r3, r0, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	605a      	str	r2, [r3, #4]
		timer.av_wcnt ++;
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b60:	7e1b      	ldrb	r3, [r3, #24]
 8000b62:	3301      	adds	r3, #1
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b68:	761a      	strb	r2, [r3, #24]

		if(timer.av_wcnt > TIMER_AV_NUM){
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b6c:	7e1b      	ldrb	r3, [r3, #24]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d920      	bls.n	8000bb4 <HAL_RTCEx_WakeUpTimerEventCallback+0x78>
			timer.av_wcnt = 0;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	761a      	strb	r2, [r3, #24]
			timer.dt_av = 0;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e00c      	b.n	8000b9e <HAL_RTCEx_WakeUpTimerEventCallback+0x62>
				timer.dt_av +=  timer.dt_buf[i];
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	4919      	ldr	r1, [pc, #100]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	440b      	add	r3, r1
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b96:	6153      	str	r3, [r2, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d9ef      	bls.n	8000b84 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>
			}
			timer.dt_av /= TIMER_AV_NUM;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <HAL_RTCEx_WakeUpTimerEventCallback+0xb8>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	085b      	lsrs	r3, r3, #1
 8000bb0:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bb2:	6153      	str	r3, [r2, #20]
		}

		if( timer.dt_max < timer.dt ){
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d203      	bcs.n	8000bc8 <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>
			timer.dt_max = timer.dt;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bc6:	6113      	str	r3, [r2, #16]
		}

		timer.dt = 0;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
	}
	else{
		timer.start ++;
		timer.dt = 0;
	}
}
 8000bce:	e008      	b.n	8000be2 <HAL_RTCEx_WakeUpTimerEventCallback+0xa6>
		timer.start ++;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bd2:	7e5b      	ldrb	r3, [r3, #25]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bda:	765a      	strb	r2, [r3, #25]
		timer.dt = 0;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000118 	.word	0x20000118
 8000bf4:	aaaaaaab 	.word	0xaaaaaaab

08000bf8 <usr_isr_tim1_up>:
//==============================================================================
//
//==============================================================================
void usr_isr_tim1_up(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	timer.dt += 10;
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <usr_isr_tim1_up+0x18>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	330a      	adds	r3, #10
 8000c02:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <usr_isr_tim1_up+0x18>)
 8000c04:	6013      	str	r3, [r2, #0]

}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	20000118 	.word	0x20000118

08000c14 <Set_logflg>:
//=============================================================================
//
//
//=============================================================================
void Set_logflg(LOG_FLAG flg)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]

	if( flg < LF_MAX){
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d808      	bhi.n	8000c36 <Set_logflg+0x22>
		log.flg = flg;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <Set_logflg+0x2c>)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	7193      	strb	r3, [r2, #6]
		SKprintf("log.flg=%d \r\n",log.flg);
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <Set_logflg+0x2c>)
 8000c2c:	799b      	ldrb	r3, [r3, #6]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <Set_logflg+0x30>)
 8000c32:	f000 f8c5 	bl	8000dc0 <SKprintf>
	}
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000013c 	.word	0x2000013c
 8000c44:	08005574 	.word	0x08005574

08000c48 <LogInfo_display>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_display(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
	uint16_t	i;
	uint16_t	msec;
	uint16_t	usec;
	uint32_t	dt;
	uint16_t	rptr = log.rptr;
 8000c4e:	4b4b      	ldr	r3, [pc, #300]	; (8000d7c <LogInfo_display+0x134>)
 8000c50:	885b      	ldrh	r3, [r3, #2]
 8000c52:	80fb      	strh	r3, [r7, #6]


	if( log.num != 0 ){
 8000c54:	4b49      	ldr	r3, [pc, #292]	; (8000d7c <LogInfo_display+0x134>)
 8000c56:	889b      	ldrh	r3, [r3, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 8086 	beq.w	8000d6a <LogInfo_display+0x122>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8000c5e:	2300      	movs	r3, #0
 8000c60:	81fb      	strh	r3, [r7, #14]
 8000c62:	e07d      	b.n	8000d60 <LogInfo_display+0x118>
			SKprintf("%02d:%02d:%02d.", log.rec[rptr].Hours, log.rec[rptr].Minutes, log.rec[rptr].Seconds);
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	4a45      	ldr	r2, [pc, #276]	; (8000d7c <LogInfo_display+0x134>)
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3308      	adds	r3, #8
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4a41      	ldr	r2, [pc, #260]	; (8000d7c <LogInfo_display+0x134>)
 8000c76:	019b      	lsls	r3, r3, #6
 8000c78:	4413      	add	r3, r2
 8000c7a:	3309      	adds	r3, #9
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	4a3e      	ldr	r2, [pc, #248]	; (8000d7c <LogInfo_display+0x134>)
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	4413      	add	r3, r2
 8000c88:	330a      	adds	r3, #10
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	483c      	ldr	r0, [pc, #240]	; (8000d80 <LogInfo_display+0x138>)
 8000c90:	f000 f896 	bl	8000dc0 <SKprintf>

			if(log.rec[rptr].dt <= log.rec[rptr].dt_av){
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	4a39      	ldr	r2, [pc, #228]	; (8000d7c <LogInfo_display+0x134>)
 8000c98:	019b      	lsls	r3, r3, #6
 8000c9a:	4413      	add	r3, r2
 8000c9c:	330c      	adds	r3, #12
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	4936      	ldr	r1, [pc, #216]	; (8000d7c <LogInfo_display+0x134>)
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	440b      	add	r3, r1
 8000ca8:	3310      	adds	r3, #16
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d812      	bhi.n	8000cd6 <LogInfo_display+0x8e>
				dt = 1000000 * log.rec[rptr].dt / log.rec[rptr].dt_av;
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	4a32      	ldr	r2, [pc, #200]	; (8000d7c <LogInfo_display+0x134>)
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	4413      	add	r3, r2
 8000cb8:	330c      	adds	r3, #12
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <LogInfo_display+0x13c>)
 8000cbe:	fb03 f202 	mul.w	r2, r3, r2
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	492d      	ldr	r1, [pc, #180]	; (8000d7c <LogInfo_display+0x134>)
 8000cc6:	019b      	lsls	r3, r3, #6
 8000cc8:	440b      	add	r3, r1
 8000cca:	3310      	adds	r3, #16
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	e012      	b.n	8000cfc <LogInfo_display+0xb4>
			}
			else{
				dt = 1000000 * log.rec[rptr].dt / (log.rec[rptr].dt + 1 );
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <LogInfo_display+0x134>)
 8000cda:	019b      	lsls	r3, r3, #6
 8000cdc:	4413      	add	r3, r2
 8000cde:	330c      	adds	r3, #12
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a28      	ldr	r2, [pc, #160]	; (8000d84 <LogInfo_display+0x13c>)
 8000ce4:	fb03 f202 	mul.w	r2, r3, r2
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4924      	ldr	r1, [pc, #144]	; (8000d7c <LogInfo_display+0x134>)
 8000cec:	019b      	lsls	r3, r3, #6
 8000cee:	440b      	add	r3, r1
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	60bb      	str	r3, [r7, #8]
			}
			msec = (uint16_t)( dt / 1000 );
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <LogInfo_display+0x140>)
 8000d00:	fba2 2303 	umull	r2, r3, r2, r3
 8000d04:	099b      	lsrs	r3, r3, #6
 8000d06:	80bb      	strh	r3, [r7, #4]
			usec = (uint16_t)( dt % 1000 );
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <LogInfo_display+0x140>)
 8000d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d10:	099b      	lsrs	r3, r3, #6
 8000d12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d16:	fb01 f303 	mul.w	r3, r1, r3
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	807b      	strh	r3, [r7, #2]
			SKprintf("%03d %03d ", msec,usec);
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	887a      	ldrh	r2, [r7, #2]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4819      	ldr	r0, [pc, #100]	; (8000d8c <LogInfo_display+0x144>)
 8000d26:	f000 f84b 	bl	8000dc0 <SKprintf>

			SKprintf("%s\r\n", &log.rec[log.wptr].string[0]);
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <LogInfo_display+0x134>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	019b      	lsls	r3, r3, #6
 8000d30:	3310      	adds	r3, #16
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <LogInfo_display+0x134>)
 8000d34:	4413      	add	r3, r2
 8000d36:	3304      	adds	r3, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4815      	ldr	r0, [pc, #84]	; (8000d90 <LogInfo_display+0x148>)
 8000d3c:	f000 f840 	bl	8000dc0 <SKprintf>

			rptr ++;
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	3301      	adds	r3, #1
 8000d44:	80fb      	strh	r3, [r7, #6]
			if( rptr > LOG_RECODE_MAX ){
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	2b64      	cmp	r3, #100	; 0x64
 8000d4a:	d901      	bls.n	8000d50 <LogInfo_display+0x108>
				rptr = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	80fb      	strh	r3, [r7, #6]
			}
			if( log.wptr == rptr ){
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <LogInfo_display+0x134>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	88fa      	ldrh	r2, [r7, #6]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d00b      	beq.n	8000d72 <LogInfo_display+0x12a>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8000d5a:	89fb      	ldrh	r3, [r7, #14]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	81fb      	strh	r3, [r7, #14]
 8000d60:	89fb      	ldrh	r3, [r7, #14]
 8000d62:	2b63      	cmp	r3, #99	; 0x63
 8000d64:	f67f af7e 	bls.w	8000c64 <LogInfo_display+0x1c>
		}
	}
	else{
		SKprintf("LOG NONE\r\n");
	}
}
 8000d68:	e004      	b.n	8000d74 <LogInfo_display+0x12c>
		SKprintf("LOG NONE\r\n");
 8000d6a:	480a      	ldr	r0, [pc, #40]	; (8000d94 <LogInfo_display+0x14c>)
 8000d6c:	f000 f828 	bl	8000dc0 <SKprintf>
}
 8000d70:	e000      	b.n	8000d74 <LogInfo_display+0x12c>
				break;
 8000d72:	bf00      	nop
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000013c 	.word	0x2000013c
 8000d80:	08005584 	.word	0x08005584
 8000d84:	000f4240 	.word	0x000f4240
 8000d88:	10624dd3 	.word	0x10624dd3
 8000d8c:	08005594 	.word	0x08005594
 8000d90:	080055a0 	.word	0x080055a0
 8000d94:	080055a8 	.word	0x080055a8

08000d98 <LogInfo_clear>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_clear(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

	log.rptr = 0;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <LogInfo_clear+0x20>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	805a      	strh	r2, [r3, #2]
	log.wptr = 0;
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <LogInfo_clear+0x20>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	801a      	strh	r2, [r3, #0]
	log.num = 0;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <LogInfo_clear+0x20>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	809a      	strh	r2, [r3, #4]

	SKprintf("LOG CLEAR \r\n");
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <LogInfo_clear+0x24>)
 8000db0:	f000 f806 	bl	8000dc0 <SKprintf>
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000013c 	.word	0x2000013c
 8000dbc:	080055b4 	.word	0x080055b4

08000dc0 <SKprintf>:
// 総和を求める関数（値は int 型を想定）
// n は、渡す引数の数、それ以降は計算する値です。
//==============================================================================

int	SKprintf (const char *string, ...)
{
 8000dc0:	b40f      	push	{r0, r1, r2, r3}
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b090      	sub	sp, #64	; 0x40
 8000dc6:	af00      	add	r7, sp, #0

	// 可変個引数の利用準備
	// -- １… va_list 構造体 ap
	// -- 2 … 可変個引数の直前にある引数

	va_start(ap, string);
 8000dc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
	vsprintf(buffer, string, ap);
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dd2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fac9 	bl	800436c <vsiprintf>
	va_end(ap);

	for(i=0; i<PRiNTF_BUFFMAX; i++){
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dde:	e008      	b.n	8000df2 <SKprintf+0x32>
		if(buffer[i] == '\0'){
 8000de0:	1d3a      	adds	r2, r7, #4
 8000de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000de4:	4413      	add	r3, r2
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <SKprintf+0x3a>
	for(i=0; i<PRiNTF_BUFFMAX; i++){
 8000dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dee:	3301      	adds	r3, #1
 8000df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df4:	2b31      	cmp	r3, #49	; 0x31
 8000df6:	ddf3      	ble.n	8000de0 <SKprintf+0x20>
 8000df8:	e000      	b.n	8000dfc <SKprintf+0x3c>
			break;
 8000dfa:	bf00      	nop
		}
	}
	HAL_UART_Transmit(&huart2, buffer, i, HAL_MAX_DELAY);
 8000dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	1d39      	adds	r1, r7, #4
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <SKprintf+0x5c>)
 8000e08:	f002 fe1b 	bl	8003a42 <HAL_UART_Transmit>
}
 8000e0c:	bf00      	nop
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3740      	adds	r7, #64	; 0x40
 8000e12:	46bd      	mov	sp, r7
 8000e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr
 8000e1c:	20001af4 	.word	0x20001af4

08000e20 <user_init>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	//LED_Flush(0);
	SKprintf("Initialize all configured peripherals\r\n");
 8000e24:	4815      	ldr	r0, [pc, #84]	; (8000e7c <user_init+0x5c>)
 8000e26:	f7ff ffcb 	bl	8000dc0 <SKprintf>
	SKprintf("******************\r\n");
 8000e2a:	4815      	ldr	r0, [pc, #84]	; (8000e80 <user_init+0x60>)
 8000e2c:	f7ff ffc8 	bl	8000dc0 <SKprintf>
	SKprintf("*** UART START ***\r\n");
 8000e30:	4814      	ldr	r0, [pc, #80]	; (8000e84 <user_init+0x64>)
 8000e32:	f7ff ffc5 	bl	8000dc0 <SKprintf>
	SKprintf("******************\r\n");
 8000e36:	4812      	ldr	r0, [pc, #72]	; (8000e80 <user_init+0x60>)
 8000e38:	f7ff ffc2 	bl	8000dc0 <SKprintf>


	//-----------------------------------------------
	// Log Timer Counter
	//-----------------------------------------------
	timer.usec = 0;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <user_init+0x68>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	835a      	strh	r2, [r3, #26]
	timer.msec = 0;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <user_init+0x68>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	839a      	strh	r2, [r3, #28]
	timer.usec_max = 0;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <user_init+0x68>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	83da      	strh	r2, [r3, #30]
	timer.msec_max = 0;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <user_init+0x68>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	841a      	strh	r2, [r3, #32]
	timer.dt = 0;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <user_init+0x68>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
	timer.dt_max = 0;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <user_init+0x68>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
	timer.dt_av = 0;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <user_init+0x68>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
	timer.start = 0;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <user_init+0x68>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	765a      	strb	r2, [r3, #25]
	timer.av_wcnt = 0;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <user_init+0x68>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	761a      	strb	r2, [r3, #24]

	//-----------------------------------------------
	// Log Info Init
	//-----------------------------------------------
	LogInfo_clear();
 8000e72:	f7ff ff91 	bl	8000d98 <LogInfo_clear>


}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	080055c4 	.word	0x080055c4
 8000e80:	080055ec 	.word	0x080055ec
 8000e84:	08005604 	.word	0x08005604
 8000e88:	20000118 	.word	0x20000118

08000e8c <user_main_loop>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_main_loop(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	debu_main();
 8000e90:	f7ff fb90 	bl	80005b4 <debu_main>
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <rtc_display>:

//==============================================================================
//
//==============================================================================
void rtc_display(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <rtc_display+0x6c>)
 8000ea6:	f001 fe67 	bl	8002b78 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4814      	ldr	r0, [pc, #80]	; (8000f04 <rtc_display+0x6c>)
 8000eb2:	f001 ff43 	bl	8002d3c <HAL_RTC_GetDate>
	SKprintf("20%02d.%02d.%02d %02d:%02d:%02d\r\n", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	787b      	ldrb	r3, [r7, #1]
 8000ebc:	461c      	mov	r4, r3
 8000ebe:	78bb      	ldrb	r3, [r7, #2]
 8000ec0:	461d      	mov	r5, r3
 8000ec2:	793b      	ldrb	r3, [r7, #4]
 8000ec4:	797a      	ldrb	r2, [r7, #5]
 8000ec6:	79b9      	ldrb	r1, [r7, #6]
 8000ec8:	9102      	str	r1, [sp, #8]
 8000eca:	9201      	str	r2, [sp, #4]
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	462b      	mov	r3, r5
 8000ed0:	4622      	mov	r2, r4
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <rtc_display+0x70>)
 8000ed6:	f7ff ff73 	bl	8000dc0 <SKprintf>
	SKprintf("av=%d max=%d\r\n",timer.dt_av,timer.dt_max);
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <rtc_display+0x74>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <rtc_display+0x74>)
 8000ee0:	6912      	ldr	r2, [r2, #16]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480a      	ldr	r0, [pc, #40]	; (8000f10 <rtc_display+0x78>)
 8000ee6:	f7ff ff6b 	bl	8000dc0 <SKprintf>
	SKprintf("dt_buf=%d, %d, %d\r\n", timer.dt_buf[0],timer.dt_buf[1],timer.dt_buf[2]);
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <rtc_display+0x74>)
 8000eec:	6859      	ldr	r1, [r3, #4]
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <rtc_display+0x74>)
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <rtc_display+0x74>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <rtc_display+0x7c>)
 8000ef8:	f7ff ff62 	bl	8000dc0 <SKprintf>
}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bdb0      	pop	{r4, r5, r7, pc}
 8000f04:	20001a44 	.word	0x20001a44
 8000f08:	0800561c 	.word	0x0800561c
 8000f0c:	20000118 	.word	0x20000118
 8000f10:	08005640 	.word	0x08005640
 8000f14:	08005650 	.word	0x08005650

08000f18 <getch>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
int getch(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0c2      	sub	sp, #264	; 0x108
 8000f1c:	af00      	add	r7, sp, #0
	uint8_t buffer[256];
	HAL_StatusTypeDef s;
	int rtn = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	s = HAL_UART_Receive(&huart2, buffer, 1, HAL_MAX_DELAY);
 8000f24:	4639      	mov	r1, r7
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	480f      	ldr	r0, [pc, #60]	; (8000f6c <getch+0x54>)
 8000f2e:	f002 fe1a 	bl	8003b66 <HAL_UART_Receive>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103

	switch(s){
 8000f38:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d005      	beq.n	8000f4c <getch+0x34>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0b      	blt.n	8000f5c <getch+0x44>
 8000f44:	3b01      	subs	r3, #1
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d808      	bhi.n	8000f5c <getch+0x44>
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:

		break;
 8000f4a:	e007      	b.n	8000f5c <getch+0x44>
		rtn = (int) buffer[0];
 8000f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		break;
 8000f5a:	bf00      	nop
	}

	return rtn;
 8000f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20001af4 	.word	0x20001af4

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f74:	f000 fc76 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f810 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f000 f9ac 	bl	80012d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f80:	f000 f980 	bl	8001284 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000f84:	f000 f878 	bl	8001078 <MX_RTC_Init>
  MX_TIM1_Init();
 8000f88:	f000 f8da 	bl	8001140 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f8c:	f000 f92c 	bl	80011e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  user_init();		// SK ADD
 8000f90:	f7ff ff46 	bl	8000e20 <user_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 user_main_loop();		// SK ADD
 8000f94:	f7ff ff7a 	bl	8000e8c <user_main_loop>
 8000f98:	e7fc      	b.n	8000f94 <main+0x24>
	...

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 f992 	bl	80042d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <SystemClock_Config+0xd4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a29      	ldr	r2, [pc, #164]	; (8001070 <SystemClock_Config+0xd4>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <SystemClock_Config+0xd4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <SystemClock_Config+0xd8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe8:	4a22      	ldr	r2, [pc, #136]	; (8001074 <SystemClock_Config+0xd8>)
 8000fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <SystemClock_Config+0xd8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001000:	2301      	movs	r3, #1
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001014:	2310      	movs	r3, #16
 8001016:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001018:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800101c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800101e:	2304      	movs	r3, #4
 8001020:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001022:	2307      	movs	r3, #7
 8001024:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fedc 	bl	8001de8 <HAL_RCC_OscConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001036:	f000 f9e3 	bl	8001400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103a:	230f      	movs	r3, #15
 800103c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	2302      	movs	r3, #2
 8001040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2102      	movs	r1, #2
 8001056:	4618      	mov	r0, r3
 8001058:	f001 f93e 	bl	80022d8 <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001062:	f000 f9cd 	bl	8001400 <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3750      	adds	r7, #80	; 0x50
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800108c:	2300      	movs	r3, #0
 800108e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <MX_RTC_Init+0xc0>)
 8001092:	4a2a      	ldr	r2, [pc, #168]	; (800113c <MX_RTC_Init+0xc4>)
 8001094:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <MX_RTC_Init+0xc0>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <MX_RTC_Init+0xc0>)
 800109e:	227f      	movs	r2, #127	; 0x7f
 80010a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <MX_RTC_Init+0xc0>)
 80010a4:	22ff      	movs	r2, #255	; 0xff
 80010a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_RTC_Init+0xc0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <MX_RTC_Init+0xc0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_RTC_Init+0xc0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ba:	481f      	ldr	r0, [pc, #124]	; (8001138 <MX_RTC_Init+0xc0>)
 80010bc:	f001 fc4c 	bl	8002958 <HAL_RTC_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80010c6:	f000 f99b 	bl	8001400 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <MX_RTC_Init+0xc0>)
 80010e6:	f001 fcad 	bl	8002a44 <HAL_RTC_SetTime>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80010f0:	f000 f986 	bl	8001400 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010f4:	2301      	movs	r3, #1
 80010f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010f8:	2301      	movs	r3, #1
 80010fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001100:	2300      	movs	r3, #0
 8001102:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	2201      	movs	r2, #1
 8001108:	4619      	mov	r1, r3
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <MX_RTC_Init+0xc0>)
 800110c:	f001 fd92 	bl	8002c34 <HAL_RTC_SetDate>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001116:	f000 f973 	bl	8001400 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800111a:	2204      	movs	r2, #4
 800111c:	2100      	movs	r1, #0
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_RTC_Init+0xc0>)
 8001120:	f001 ff18 	bl	8002f54 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 800112a:	f000 f969 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20001a44 	.word	0x20001a44
 800113c:	40002800 	.word	0x40002800

08001140 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_TIM1_Init+0xa0>)
 800115e:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <MX_TIM1_Init+0xa4>)
 8001160:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001164:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001168:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_TIM1_Init+0xa0>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001172:	f245 2207 	movw	r2, #20999	; 0x5207
 8001176:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_TIM1_Init+0xa0>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118a:	4815      	ldr	r0, [pc, #84]	; (80011e0 <MX_TIM1_Init+0xa0>)
 800118c:	f001 ffc6 	bl	800311c <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001196:	f000 f933 	bl	8001400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <MX_TIM1_Init+0xa0>)
 80011a8:	f002 f972 	bl	8003490 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011b2:	f000 f925 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <MX_TIM1_Init+0xa0>)
 80011c4:	f002 fb6e 	bl	80038a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011ce:	f000 f917 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);    // SK ADD
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <MX_TIM1_Init+0xa0>)
 80011d4:	f001 fff2 	bl	80031bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20001a64 	.word	0x20001a64
 80011e4:	40010000 	.word	0x40010000

080011e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_TIM2_Init+0x98>)
 8001206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_TIM2_Init+0x98>)
 800120e:	2203      	movs	r2, #3
 8001210:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_TIM2_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 209;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_TIM2_Init+0x98>)
 800121a:	22d1      	movs	r2, #209	; 0xd1
 800121c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_TIM2_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_TIM2_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <MX_TIM2_Init+0x98>)
 800122c:	f001 ff76 	bl	800311c <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001236:	f000 f8e3 	bl	8001400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	4619      	mov	r1, r3
 8001246:	480e      	ldr	r0, [pc, #56]	; (8001280 <MX_TIM2_Init+0x98>)
 8001248:	f002 f922 	bl	8003490 <HAL_TIM_ConfigClockSource>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001252:	f000 f8d5 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_TIM2_Init+0x98>)
 8001264:	f002 fb1e 	bl	80038a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800126e:	f000 f8c7 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);    // SK ADD
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <MX_TIM2_Init+0x98>)
 8001274:	f001 ffa2 	bl	80031bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20001aac 	.word	0x20001aac

08001284 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_USART2_UART_Init+0x50>)
 800128c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_USART2_UART_Init+0x4c>)
 80012bc:	f002 fb74 	bl	80039a8 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012c6:	f000 f89b 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20001af4 	.word	0x20001af4
 80012d4:	40004400 	.word	0x40004400

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <MX_GPIO_Init+0xf8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a36      	ldr	r2, [pc, #216]	; (80013d0 <MX_GPIO_Init+0xf8>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <MX_GPIO_Init+0xf8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_GPIO_Init+0xf8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <MX_GPIO_Init+0xf8>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_GPIO_Init+0xf8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIM1_PLS_GPIO_Port, TIM1_PLS_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2104      	movs	r1, #4
 8001362:	481c      	ldr	r0, [pc, #112]	; (80013d4 <MX_GPIO_Init+0xfc>)
 8001364:	f000 fd26 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2120      	movs	r1, #32
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <MX_GPIO_Init+0x100>)
 800136e:	f000 fd21 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001378:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4812      	ldr	r0, [pc, #72]	; (80013d4 <MX_GPIO_Init+0xfc>)
 800138a:	f000 fb8f 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM1_PLS_Pin */
  GPIO_InitStruct.Pin = TIM1_PLS_Pin;
 800138e:	2304      	movs	r3, #4
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIM1_PLS_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <MX_GPIO_Init+0xfc>)
 80013a6:	f000 fb81 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013aa:	2320      	movs	r3, #32
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_GPIO_Init+0x100>)
 80013c2:	f000 fb73 	bl	8001aac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020800 	.word	0x40020800
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ee:	f000 fa5b 	bl	80018a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40000c00 	.word	0x40000c00

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	e7fe      	b.n	8001408 <Error_Handler+0x8>
	...

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <HAL_MspInit+0x4c>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_MspInit+0x4c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <HAL_MspInit+0x4c>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_RTC_MspInit+0x60>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d119      	bne.n	80014b2 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800147e:	2302      	movs	r3, #2
 8001480:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001486:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	4618      	mov	r0, r3
 800148e:	f001 f975 	bl	800277c <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001498:	f7ff ffb2 	bl	8001400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_RTC_MspInit+0x64>)
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	2003      	movs	r0, #3
 80014a8:	f000 fad6 	bl	8001a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 faef 	bl	8001a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40002800 	.word	0x40002800
 80014c0:	42470e3c 	.word	0x42470e3c

080014c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <HAL_TIM_Base_MspInit+0x80>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d116      	bne.n	8001504 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a1a      	ldr	r2, [pc, #104]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2019      	movs	r0, #25
 80014f8:	f000 faae 	bl	8001a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014fc:	2019      	movs	r0, #25
 80014fe:	f000 fac7 	bl	8001a90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001502:	e01a      	b.n	800153a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150c:	d115      	bne.n	800153a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_TIM_Base_MspInit+0x84>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	201c      	movs	r0, #28
 8001530:	f000 fa92 	bl	8001a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001534:	201c      	movs	r0, #28
 8001536:	f000 faab 	bl	8001a90 <HAL_NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40010000 	.word	0x40010000
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_UART_MspInit+0x84>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12b      	bne.n	80015c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_UART_MspInit+0x88>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <HAL_UART_MspInit+0x88>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_UART_MspInit+0x88>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_UART_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <HAL_UART_MspInit+0x88>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_UART_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015a6:	230c      	movs	r3, #12
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b6:	2307      	movs	r3, #7
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_UART_MspInit+0x8c>)
 80015c2:	f000 fa73 	bl	8001aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40004400 	.word	0x40004400
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	; 0x38
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_InitTick+0xe4>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a32      	ldr	r2, [pc, #200]	; (80016c0 <HAL_InitTick+0xe4>)
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_InitTick+0xe4>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001608:	f107 0210 	add.w	r2, r7, #16
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f880 	bl	8002718 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	2b00      	cmp	r3, #0
 8001620:	d103      	bne.n	800162a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001622:	f001 f851 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8001626:	6378      	str	r0, [r7, #52]	; 0x34
 8001628:	e004      	b.n	8001634 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800162a:	f001 f84d 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 800162e:	4603      	mov	r3, r0
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001636:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <HAL_InitTick+0xe8>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	0c9b      	lsrs	r3, r3, #18
 800163e:	3b01      	subs	r3, #1
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_InitTick+0xec>)
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <HAL_InitTick+0xf0>)
 8001646:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_InitTick+0xec>)
 800164a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800164e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001650:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <HAL_InitTick+0xec>)
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <HAL_InitTick+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_InitTick+0xec>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_InitTick+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001668:	4817      	ldr	r0, [pc, #92]	; (80016c8 <HAL_InitTick+0xec>)
 800166a:	f001 fd57 	bl	800311c <HAL_TIM_Base_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001674:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001678:	2b00      	cmp	r3, #0
 800167a:	d11b      	bne.n	80016b4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800167c:	4812      	ldr	r0, [pc, #72]	; (80016c8 <HAL_InitTick+0xec>)
 800167e:	f001 fd9d 	bl	80031bc <HAL_TIM_Base_Start_IT>
 8001682:	4603      	mov	r3, r0
 8001684:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001688:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800168c:	2b00      	cmp	r3, #0
 800168e:	d111      	bne.n	80016b4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001690:	2032      	movs	r0, #50	; 0x32
 8001692:	f000 f9fd 	bl	8001a90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d808      	bhi.n	80016ae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	2032      	movs	r0, #50	; 0x32
 80016a2:	f000 f9d9 	bl	8001a58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_InitTick+0xf4>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	e002      	b.n	80016b4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3738      	adds	r7, #56	; 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40023800 	.word	0x40023800
 80016c4:	431bde83 	.word	0x431bde83
 80016c8:	20001b38 	.word	0x20001b38
 80016cc:	40000c00 	.word	0x40000c00
 80016d0:	20000004 	.word	0x20000004

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <RTC_WKUP_IRQHandler+0x10>)
 8001732:	f001 fccf 	bl	80030d4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20001a44 	.word	0x20001a44

08001740 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001746:	f001 fd9b 	bl	8003280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//  usr_isr_tim1_up();	// SK ADD
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20001a64 	.word	0x20001a64

08001754 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <TIM2_IRQHandler+0x14>)
 800175a:	f001 fd91 	bl	8003280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  usr_isr_tim1_up();	// SK ADD
 800175e:	f7ff fa4b 	bl	8000bf8 <usr_isr_tim1_up>

  /* USER CODE END TIM2_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20001aac 	.word	0x20001aac

0800176c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <TIM5_IRQHandler+0x10>)
 8001772:	f001 fd85 	bl	8003280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20001b38 	.word	0x20001b38

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f002 fd5e 	bl	8004270 <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20018000 	.word	0x20018000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	20001b80 	.word	0x20001b80
 80017e8:	20001b98 	.word	0x20001b98

080017ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001816:	490e      	ldr	r1, [pc, #56]	; (8001850 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800182c:	4c0b      	ldr	r4, [pc, #44]	; (800185c <LoopFillZerobss+0x26>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800183a:	f7ff ffd7 	bl	80017ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183e:	f002 fd1d 	bl	800427c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7ff fb95 	bl	8000f70 <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001848:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001854:	080059d0 	.word	0x080059d0
  ldr r2, =_sbss
 8001858:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800185c:	20001b98 	.word	0x20001b98

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_Init+0x40>)
 800186e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_Init+0x40>)
 800187a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_Init+0x40>)
 8001886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 f8d8 	bl	8001a42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	200f      	movs	r0, #15
 8001894:	f7ff fea2 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff fdb8 	bl	800140c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20001b84 	.word	0x20001b84

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20001b84 	.word	0x20001b84

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff4c 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6a:	f7ff ff61 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001a6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	68b9      	ldr	r1, [r7, #8]
 8001a74:	6978      	ldr	r0, [r7, #20]
 8001a76:	f7ff ffb1 	bl	80019dc <NVIC_EncodePriority>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff80 	bl	8001988 <__NVIC_SetPriority>
}
 8001a88:	bf00      	nop
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff54 	bl	800194c <__NVIC_EnableIRQ>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	e159      	b.n	8001d7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f040 8148 	bne.w	8001d76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d005      	beq.n	8001afe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d130      	bne.n	8001b60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 0201 	and.w	r2, r3, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d017      	beq.n	8001b9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d123      	bne.n	8001bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	08da      	lsrs	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3208      	adds	r2, #8
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a2 	beq.w	8001d76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b57      	ldr	r3, [pc, #348]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a56      	ldr	r2, [pc, #344]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b54      	ldr	r3, [pc, #336]	; (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4e:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_GPIO_Init+0x2ec>)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a49      	ldr	r2, [pc, #292]	; (8001d9c <HAL_GPIO_Init+0x2f0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_Init+0x202>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <HAL_GPIO_Init+0x2f4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0x1fe>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a47      	ldr	r2, [pc, #284]	; (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a46      	ldr	r2, [pc, #280]	; (8001da8 <HAL_GPIO_Init+0x2fc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0x1f6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a45      	ldr	r2, [pc, #276]	; (8001dac <HAL_GPIO_Init+0x300>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_Init+0x1f2>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	e008      	b.n	8001cb0 <HAL_GPIO_Init+0x204>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x204>
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e004      	b.n	8001cb0 <HAL_GPIO_Init+0x204>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e002      	b.n	8001cb0 <HAL_GPIO_Init+0x204>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_GPIO_Init+0x204>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f002 0203 	and.w	r2, r2, #3
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	4093      	lsls	r3, r2
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc0:	4935      	ldr	r1, [pc, #212]	; (8001d98 <HAL_GPIO_Init+0x2ec>)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cce:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <HAL_GPIO_Init+0x304>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf2:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <HAL_GPIO_Init+0x304>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf8:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <HAL_GPIO_Init+0x304>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d1c:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <HAL_GPIO_Init+0x304>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <HAL_GPIO_Init+0x304>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d46:	4a1a      	ldr	r2, [pc, #104]	; (8001db0 <HAL_GPIO_Init+0x304>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_GPIO_Init+0x304>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d70:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <HAL_GPIO_Init+0x304>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b0f      	cmp	r3, #15
 8001d80:	f67f aea2 	bls.w	8001ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40013800 	.word	0x40013800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40013c00 	.word	0x40013c00

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e267      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d075      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e06:	4b88      	ldr	r3, [pc, #544]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d00c      	beq.n	8001e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e12:	4b85      	ldr	r3, [pc, #532]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d112      	bne.n	8001e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1e:	4b82      	ldr	r3, [pc, #520]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e2a:	d10b      	bne.n	8001e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	4b7e      	ldr	r3, [pc, #504]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d05b      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x108>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d157      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e242      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d106      	bne.n	8001e5c <HAL_RCC_OscConfig+0x74>
 8001e4e:	4b76      	ldr	r3, [pc, #472]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a75      	ldr	r2, [pc, #468]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e01d      	b.n	8001e98 <HAL_RCC_OscConfig+0xb0>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x98>
 8001e66:	4b70      	ldr	r3, [pc, #448]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a6f      	ldr	r2, [pc, #444]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b6d      	ldr	r3, [pc, #436]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6c      	ldr	r2, [pc, #432]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCC_OscConfig+0xb0>
 8001e80:	4b69      	ldr	r3, [pc, #420]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a68      	ldr	r2, [pc, #416]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b66      	ldr	r3, [pc, #408]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a65      	ldr	r2, [pc, #404]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fd16 	bl	80018d0 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fd12 	bl	80018d0 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e207      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xc0>
 8001ec6:	e014      	b.n	8001ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fd02 	bl	80018d0 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fcfe 	bl	80018d0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1f3      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	4b51      	ldr	r3, [pc, #324]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xe8>
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d063      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001efe:	4b4a      	ldr	r3, [pc, #296]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f0a:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d11c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f16:	4b44      	ldr	r3, [pc, #272]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d116      	bne.n	8001f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_RCC_OscConfig+0x152>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e1c7      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4937      	ldr	r1, [pc, #220]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4e:	e03a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d020      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f58:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_RCC_OscConfig+0x244>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fcb7 	bl	80018d0 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f66:	f7ff fcb3 	bl	80018d0 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1a8      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f84:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4925      	ldr	r1, [pc, #148]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_OscConfig+0x244>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fc96 	bl	80018d0 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa8:	f7ff fc92 	bl	80018d0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e187      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fba:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d036      	beq.n	8002040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d016      	beq.n	8002008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_RCC_OscConfig+0x248>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff fc76 	bl	80018d0 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe8:	f7ff fc72 	bl	80018d0 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e167      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x200>
 8002006:	e01b      	b.n	8002040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_OscConfig+0x248>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff fc5f 	bl	80018d0 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	e00e      	b.n	8002034 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002016:	f7ff fc5b 	bl	80018d0 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d907      	bls.n	8002034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e150      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
 8002028:	40023800 	.word	0x40023800
 800202c:	42470000 	.word	0x42470000
 8002030:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	4b88      	ldr	r3, [pc, #544]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ea      	bne.n	8002016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8097 	beq.w	800217c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002052:	4b81      	ldr	r3, [pc, #516]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10f      	bne.n	800207e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	4b7d      	ldr	r3, [pc, #500]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a7c      	ldr	r2, [pc, #496]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b7a      	ldr	r3, [pc, #488]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	4b77      	ldr	r3, [pc, #476]	; (800225c <HAL_RCC_OscConfig+0x474>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d118      	bne.n	80020bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208a:	4b74      	ldr	r3, [pc, #464]	; (800225c <HAL_RCC_OscConfig+0x474>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a73      	ldr	r2, [pc, #460]	; (800225c <HAL_RCC_OscConfig+0x474>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002096:	f7ff fc1b 	bl	80018d0 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209e:	f7ff fc17 	bl	80018d0 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e10c      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	4b6a      	ldr	r3, [pc, #424]	; (800225c <HAL_RCC_OscConfig+0x474>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2ea>
 80020c4:	4b64      	ldr	r3, [pc, #400]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4a63      	ldr	r2, [pc, #396]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	; 0x70
 80020d0:	e01c      	b.n	800210c <HAL_RCC_OscConfig+0x324>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b05      	cmp	r3, #5
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x30c>
 80020da:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	4a5e      	ldr	r2, [pc, #376]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	6713      	str	r3, [r2, #112]	; 0x70
 80020e6:	4b5c      	ldr	r3, [pc, #368]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	4a5b      	ldr	r2, [pc, #364]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0x324>
 80020f4:	4b58      	ldr	r3, [pc, #352]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	4a57      	ldr	r2, [pc, #348]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002100:	4b55      	ldr	r3, [pc, #340]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	4a54      	ldr	r2, [pc, #336]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002106:	f023 0304 	bic.w	r3, r3, #4
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d015      	beq.n	8002140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7ff fbdc 	bl	80018d0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211a:	e00a      	b.n	8002132 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211c:	f7ff fbd8 	bl	80018d0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e0cb      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002132:	4b49      	ldr	r3, [pc, #292]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0ee      	beq.n	800211c <HAL_RCC_OscConfig+0x334>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002140:	f7ff fbc6 	bl	80018d0 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002146:	e00a      	b.n	800215e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7ff fbc2 	bl	80018d0 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e0b5      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215e:	4b3e      	ldr	r3, [pc, #248]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ee      	bne.n	8002148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216a:	7dfb      	ldrb	r3, [r7, #23]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	4a38      	ldr	r2, [pc, #224]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a1 	beq.w	80022c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b08      	cmp	r3, #8
 8002190:	d05c      	beq.n	800224c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d141      	bne.n	800221e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_OscConfig+0x478>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff fb96 	bl	80018d0 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff fb92 	bl	80018d0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e087      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	3b01      	subs	r3, #1
 80021e0:	041b      	lsls	r3, r3, #16
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	491b      	ldr	r1, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_RCC_OscConfig+0x478>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7ff fb6b 	bl	80018d0 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff fb67 	bl	80018d0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e05c      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x416>
 800221c:	e054      	b.n	80022c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCC_OscConfig+0x478>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff fb54 	bl	80018d0 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff fb50 	bl	80018d0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e045      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_OscConfig+0x470>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x444>
 800224a:	e03d      	b.n	80022c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d107      	bne.n	8002264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e038      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
 8002258:	40023800 	.word	0x40023800
 800225c:	40007000 	.word	0x40007000
 8002260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x4ec>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d028      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d121      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d11a      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002294:	4013      	ands	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800229a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800229c:	4293      	cmp	r3, r2
 800229e:	d111      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	3b01      	subs	r3, #1
 80022ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800

080022d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0cc      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b68      	ldr	r3, [pc, #416]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d90c      	bls.n	8002314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b65      	ldr	r3, [pc, #404]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b8      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4a58      	ldr	r2, [pc, #352]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002344:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a52      	ldr	r2, [pc, #328]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800234e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b50      	ldr	r3, [pc, #320]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	494d      	ldr	r1, [pc, #308]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d044      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d119      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d003      	beq.n	8002396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002392:	2b03      	cmp	r3, #3
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e06f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e067      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b37      	ldr	r3, [pc, #220]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4934      	ldr	r1, [pc, #208]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c8:	f7ff fa82 	bl	80018d0 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7ff fa7e 	bl	80018d0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e04f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d20c      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e032      	b.n	8002486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4916      	ldr	r1, [pc, #88]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	490e      	ldr	r1, [pc, #56]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800245e:	f000 f821 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8002462:	4602      	mov	r2, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	490a      	ldr	r1, [pc, #40]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	5ccb      	ldrb	r3, [r1, r3]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	4a09      	ldr	r2, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f8ac 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023c00 	.word	0x40023c00
 8002494:	40023800 	.word	0x40023800
 8002498:	080057f8 	.word	0x080057f8
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000004 	.word	0x20000004

080024a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a8:	b094      	sub	sp, #80	; 0x50
 80024aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	647b      	str	r3, [r7, #68]	; 0x44
 80024b0:	2300      	movs	r3, #0
 80024b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b4:	2300      	movs	r3, #0
 80024b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024bc:	4b79      	ldr	r3, [pc, #484]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d00d      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x40>
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	f200 80e1 	bhi.w	8002690 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x34>
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d003      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x3a>
 80024d6:	e0db      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d8:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024dc:	e0db      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_GetSysClockFreq+0x208>)
 80024e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024e2:	e0d8      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e4:	4b6f      	ldr	r3, [pc, #444]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ee:	4b6d      	ldr	r3, [pc, #436]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fa:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	099b      	lsrs	r3, r3, #6
 8002500:	2200      	movs	r2, #0
 8002502:	63bb      	str	r3, [r7, #56]	; 0x38
 8002504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
 800250e:	2300      	movs	r3, #0
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
 8002512:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002516:	4622      	mov	r2, r4
 8002518:	462b      	mov	r3, r5
 800251a:	f04f 0000 	mov.w	r0, #0
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	0159      	lsls	r1, r3, #5
 8002524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002528:	0150      	lsls	r0, r2, #5
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4621      	mov	r1, r4
 8002530:	1a51      	subs	r1, r2, r1
 8002532:	6139      	str	r1, [r7, #16]
 8002534:	4629      	mov	r1, r5
 8002536:	eb63 0301 	sbc.w	r3, r3, r1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002548:	4659      	mov	r1, fp
 800254a:	018b      	lsls	r3, r1, #6
 800254c:	4651      	mov	r1, sl
 800254e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002552:	4651      	mov	r1, sl
 8002554:	018a      	lsls	r2, r1, #6
 8002556:	4651      	mov	r1, sl
 8002558:	ebb2 0801 	subs.w	r8, r2, r1
 800255c:	4659      	mov	r1, fp
 800255e:	eb63 0901 	sbc.w	r9, r3, r1
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800256e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002576:	4690      	mov	r8, r2
 8002578:	4699      	mov	r9, r3
 800257a:	4623      	mov	r3, r4
 800257c:	eb18 0303 	adds.w	r3, r8, r3
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	462b      	mov	r3, r5
 8002584:	eb49 0303 	adc.w	r3, r9, r3
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002596:	4629      	mov	r1, r5
 8002598:	024b      	lsls	r3, r1, #9
 800259a:	4621      	mov	r1, r4
 800259c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025a0:	4621      	mov	r1, r4
 80025a2:	024a      	lsls	r2, r1, #9
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025aa:	2200      	movs	r2, #0
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025b4:	f7fd fe7c 	bl	80002b0 <__aeabi_uldivmod>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4613      	mov	r3, r2
 80025be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c0:	e058      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	2200      	movs	r2, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	4611      	mov	r1, r2
 80025ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025dc:	4642      	mov	r2, r8
 80025de:	464b      	mov	r3, r9
 80025e0:	f04f 0000 	mov.w	r0, #0
 80025e4:	f04f 0100 	mov.w	r1, #0
 80025e8:	0159      	lsls	r1, r3, #5
 80025ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ee:	0150      	lsls	r0, r2, #5
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4641      	mov	r1, r8
 80025f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80025fa:	4649      	mov	r1, r9
 80025fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800260c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002610:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002614:	ebb2 040a 	subs.w	r4, r2, sl
 8002618:	eb63 050b 	sbc.w	r5, r3, fp
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	00eb      	lsls	r3, r5, #3
 8002626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800262a:	00e2      	lsls	r2, r4, #3
 800262c:	4614      	mov	r4, r2
 800262e:	461d      	mov	r5, r3
 8002630:	4643      	mov	r3, r8
 8002632:	18e3      	adds	r3, r4, r3
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	464b      	mov	r3, r9
 8002638:	eb45 0303 	adc.w	r3, r5, r3
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800264a:	4629      	mov	r1, r5
 800264c:	028b      	lsls	r3, r1, #10
 800264e:	4621      	mov	r1, r4
 8002650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002654:	4621      	mov	r1, r4
 8002656:	028a      	lsls	r2, r1, #10
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265e:	2200      	movs	r2, #0
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	61fa      	str	r2, [r7, #28]
 8002664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002668:	f7fd fe22 	bl	80002b0 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	3301      	adds	r3, #1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800268e:	e002      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002692:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002698:	4618      	mov	r0, r3
 800269a:	3750      	adds	r7, #80	; 0x50
 800269c:	46bd      	mov	sp, r7
 800269e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	007a1200 	.word	0x007a1200

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a9b      	lsrs	r3, r3, #10
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08005808 	.word	0x08005808

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f4:	f7ff ffdc 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0b5b      	lsrs	r3, r3, #13
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	08005808 	.word	0x08005808

08002718 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	220f      	movs	r2, #15
 8002726:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_GetClockConfig+0x5c>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0203 	and.w	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_RCC_GetClockConfig+0x5c>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_RCC_GetClockConfig+0x5c>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_GetClockConfig+0x5c>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_RCC_GetClockConfig+0x60>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0207 	and.w	r2, r3, #7
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	601a      	str	r2, [r3, #0]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	40023c00 	.word	0x40023c00

0800277c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d035      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027a4:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027aa:	f7ff f891 	bl	80018d0 <HAL_GetTick>
 80027ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027b2:	f7ff f88d 	bl	80018d0 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e0ba      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027c4:	4b60      	ldr	r3, [pc, #384]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	019a      	lsls	r2, r3, #6
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	071b      	lsls	r3, r3, #28
 80027dc:	495a      	ldr	r1, [pc, #360]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027e4:	4b57      	ldr	r3, [pc, #348]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027ea:	f7ff f871 	bl	80018d0 <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027f2:	f7ff f86d 	bl	80018d0 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e09a      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8083 	beq.w	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a48      	ldr	r2, [pc, #288]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800283a:	4b44      	ldr	r3, [pc, #272]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a43      	ldr	r2, [pc, #268]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002846:	f7ff f843 	bl	80018d0 <HAL_GetTick>
 800284a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7ff f83f 	bl	80018d0 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e06c      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002860:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002874:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02f      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d028      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002892:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028a0:	4a29      	ldr	r2, [pc, #164]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d114      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80028b2:	f7ff f80d 	bl	80018d0 <HAL_GetTick>
 80028b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7ff f809 	bl	80018d0 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e034      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ee      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028e8:	d10d      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fe:	4912      	ldr	r1, [pc, #72]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]
 8002904:	e005      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800290c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002910:	6093      	str	r3, [r2, #8]
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291e:	490a      	ldr	r1, [pc, #40]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002920:	4313      	orrs	r3, r2
 8002922:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7c1a      	ldrb	r2, [r3, #16]
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002936:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	42470068 	.word	0x42470068
 8002948:	40023800 	.word	0x40023800
 800294c:	40007000 	.word	0x40007000
 8002950:	42470e40 	.word	0x42470e40
 8002954:	424711e0 	.word	0x424711e0

08002958 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e066      	b.n	8002a3c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7f5b      	ldrb	r3, [r3, #29]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe fd6c 	bl	800145c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	22ca      	movs	r2, #202	; 0xca
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2253      	movs	r2, #83	; 0x53
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa45 	bl	8002e2a <RTC_EnterInitMode>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d12c      	bne.n	8002a04 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80029b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029bc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	68d2      	ldr	r2, [r2, #12]
 80029e4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fa4c 	bl	8002e98 <RTC_ExitInitMode>
 8002a00:	4603      	mov	r3, r0
 8002a02:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d113      	bne.n	8002a32 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	7f1b      	ldrb	r3, [r3, #28]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_RTC_SetTime+0x1c>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e087      	b.n	8002b70 <HAL_RTC_SetTime+0x12c>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d126      	bne.n	8002ac0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fa29 	bl	8002ee2 <RTC_ByteToBcd2>
 8002a90:	4603      	mov	r3, r0
 8002a92:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fa22 	bl	8002ee2 <RTC_ByteToBcd2>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002aa2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	789b      	ldrb	r3, [r3, #2]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fa1a 	bl	8002ee2 <RTC_ByteToBcd2>
 8002aae:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ab0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	78db      	ldrb	r3, [r3, #3]
 8002ab8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e018      	b.n	8002af2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ae0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ae6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	78db      	ldrb	r3, [r3, #3]
 8002aec:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	22ca      	movs	r2, #202	; 0xca
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2253      	movs	r2, #83	; 0x53
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f991 	bl	8002e2a <RTC_EnterInitMode>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d120      	bne.n	8002b54 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002b1c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002b20:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f9a4 	bl	8002e98 <RTC_ExitInitMode>
 8002b50:	4603      	mov	r3, r0
 8002b52:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	22ff      	movs	r2, #255	; 0xff
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	771a      	strb	r2, [r3, #28]

  return status;
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd90      	pop	{r4, r7, pc}

08002b78 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002baa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002bae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	0d9b      	lsrs	r3, r3, #22
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d11a      	bne.n	8002c2a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f98f 	bl	8002f1c <RTC_Bcd2ToByte>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f986 	bl	8002f1c <RTC_Bcd2ToByte>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f97d 	bl	8002f1c <RTC_Bcd2ToByte>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	7f1b      	ldrb	r3, [r3, #28]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_RTC_SetDate+0x1c>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e071      	b.n	8002d34 <HAL_RTC_SetDate+0x100>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10e      	bne.n	8002c80 <HAL_RTC_SetDate+0x4c>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	785b      	ldrb	r3, [r3, #1]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	f023 0310 	bic.w	r3, r3, #16
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	330a      	adds	r3, #10
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11c      	bne.n	8002cc0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	78db      	ldrb	r3, [r3, #3]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f929 	bl	8002ee2 <RTC_ByteToBcd2>
 8002c90:	4603      	mov	r3, r0
 8002c92:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 f922 	bl	8002ee2 <RTC_ByteToBcd2>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ca2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	789b      	ldrb	r3, [r3, #2]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f91a 	bl	8002ee2 <RTC_ByteToBcd2>
 8002cae:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cb0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e00e      	b.n	8002cde <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	78db      	ldrb	r3, [r3, #3]
 8002cc4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ccc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002cd2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	22ca      	movs	r2, #202	; 0xca
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2253      	movs	r2, #83	; 0x53
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f89b 	bl	8002e2a <RTC_EnterInitMode>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d0c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f8c2 	bl	8002e98 <RTC_ExitInitMode>
 8002d14:	4603      	mov	r3, r0
 8002d16:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	22ff      	movs	r2, #255	; 0xff
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	771a      	strb	r2, [r3, #28]

  return status;
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}

08002d3c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	0c1b      	lsrs	r3, r3, #16
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	0b5b      	lsrs	r3, r3, #13
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11a      	bne.n	8002dd0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	78db      	ldrb	r3, [r3, #3]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f8bc 	bl	8002f1c <RTC_Bcd2ToByte>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 f8b3 	bl	8002f1c <RTC_Bcd2ToByte>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	789b      	ldrb	r3, [r3, #2]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f8aa 	bl	8002f1c <RTC_Bcd2ToByte>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002df4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df6:	f7fe fd6b 	bl	80018d0 <HAL_GetTick>
 8002dfa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002dfc:	e009      	b.n	8002e12 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dfe:	f7fe fd67 	bl	80018d0 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e0c:	d901      	bls.n	8002e12 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e007      	b.n	8002e22 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ee      	beq.n	8002dfe <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d122      	bne.n	8002e8e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fe fd3a 	bl	80018d0 <HAL_GetTick>
 8002e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e5e:	e00c      	b.n	8002e7a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e60:	f7fe fd36 	bl	80018d0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e6e:	d904      	bls.n	8002e7a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2204      	movs	r2, #4
 8002e74:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <RTC_EnterInitMode+0x64>
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d1e8      	bne.n	8002e60 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff89 	bl	8002dda <HAL_RTC_WaitForSynchro>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d004      	beq.n	8002ed8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002ef0:	e005      	b.n	8002efe <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	3b0a      	subs	r3, #10
 8002efc:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	d8f6      	bhi.n	8002ef2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	b2db      	uxtb	r3, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	0092      	lsls	r2, r2, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	4413      	add	r3, r2
 8002f46:	b2db      	uxtb	r3, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a59      	ldr	r2, [pc, #356]	; (80030cc <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0adb      	lsrs	r3, r3, #11
 8002f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	7f1b      	ldrb	r3, [r3, #28]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e09b      	b.n	80030ba <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	22ca      	movs	r2, #202	; 0xca
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2253      	movs	r2, #83	; 0x53
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d017      	beq.n	8002fdc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1e5a      	subs	r2, r3, #1
 8002fb0:	617a      	str	r2, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	22ff      	movs	r2, #255	; 0xff
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e075      	b.n	80030ba <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e7      	bne.n	8002fac <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fea:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002ffc:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a32      	ldr	r2, [pc, #200]	; (80030cc <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	0adb      	lsrs	r3, r3, #11
 800300a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1e5a      	subs	r2, r3, #1
 8003018:	617a      	str	r2, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10b      	bne.n	8003036 <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	22ff      	movs	r2, #255	; 0xff
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2203      	movs	r2, #3
 800302a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e041      	b.n	80030ba <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0e7      	beq.n	8003014 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0207 	bic.w	r2, r2, #7
 8003052:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	430a      	orrs	r2, r1
 8003062:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800306c:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003072:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003076:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800307e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003082:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003092:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	22ff      	movs	r2, #255	; 0xff
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000000 	.word	0x20000000
 80030cc:	10624dd3 	.word	0x10624dd3
 80030d0:	40013c00 	.word	0x40013c00

080030d4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fd26 	bl	8000b3c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003100:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003102:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003104:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003108:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	775a      	strb	r2, [r3, #29]
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40013c00 	.word	0x40013c00

0800311c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e041      	b.n	80031b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe f9be 	bl	80014c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3304      	adds	r3, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f000 fa88 	bl	8003670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d001      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e044      	b.n	800325e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1e      	ldr	r2, [pc, #120]	; (800326c <HAL_TIM_Base_Start_IT+0xb0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d018      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x6c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d013      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x6c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1a      	ldr	r2, [pc, #104]	; (8003270 <HAL_TIM_Base_Start_IT+0xb4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00e      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x6c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a19      	ldr	r2, [pc, #100]	; (8003274 <HAL_TIM_Base_Start_IT+0xb8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d009      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x6c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a17      	ldr	r2, [pc, #92]	; (8003278 <HAL_TIM_Base_Start_IT+0xbc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x6c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a16      	ldr	r2, [pc, #88]	; (800327c <HAL_TIM_Base_Start_IT+0xc0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d111      	bne.n	800324c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d010      	beq.n	800325c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0201 	orr.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324a:	e007      	b.n	800325c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40010000 	.word	0x40010000
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800
 8003278:	40000c00 	.word	0x40000c00
 800327c:	40014000 	.word	0x40014000

08003280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b02      	cmp	r3, #2
 8003294:	d122      	bne.n	80032dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d11b      	bne.n	80032dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0202 	mvn.w	r2, #2
 80032ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f9b5 	bl	8003632 <HAL_TIM_IC_CaptureCallback>
 80032c8:	e005      	b.n	80032d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f9a7 	bl	800361e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f9b8 	bl	8003646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d122      	bne.n	8003330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d11b      	bne.n	8003330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0204 	mvn.w	r2, #4
 8003300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f98b 	bl	8003632 <HAL_TIM_IC_CaptureCallback>
 800331c:	e005      	b.n	800332a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f97d 	bl	800361e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f98e 	bl	8003646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b08      	cmp	r3, #8
 800333c:	d122      	bne.n	8003384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b08      	cmp	r3, #8
 800334a:	d11b      	bne.n	8003384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0208 	mvn.w	r2, #8
 8003354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2204      	movs	r2, #4
 800335a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f961 	bl	8003632 <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f953 	bl	800361e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f964 	bl	8003646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b10      	cmp	r3, #16
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b10      	cmp	r3, #16
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0210 	mvn.w	r2, #16
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2208      	movs	r2, #8
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f937 	bl	8003632 <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f929 	bl	800361e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f93a 	bl	8003646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d10e      	bne.n	8003404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d107      	bne.n	8003404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0201 	mvn.w	r2, #1
 80033fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd ffec 	bl	80013dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b80      	cmp	r3, #128	; 0x80
 8003410:	d10e      	bne.n	8003430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341c:	2b80      	cmp	r3, #128	; 0x80
 800341e:	d107      	bne.n	8003430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fab2 	bl	8003994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d10e      	bne.n	800345c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d107      	bne.n	800345c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8ff 	bl	800365a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b20      	cmp	r3, #32
 8003468:	d10e      	bne.n	8003488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b20      	cmp	r3, #32
 8003476:	d107      	bne.n	8003488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0220 	mvn.w	r2, #32
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa7c 	bl	8003980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_TIM_ConfigClockSource+0x1c>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e0b4      	b.n	8003616 <HAL_TIM_ConfigClockSource+0x186>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e4:	d03e      	beq.n	8003564 <HAL_TIM_ConfigClockSource+0xd4>
 80034e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ea:	f200 8087 	bhi.w	80035fc <HAL_TIM_ConfigClockSource+0x16c>
 80034ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f2:	f000 8086 	beq.w	8003602 <HAL_TIM_ConfigClockSource+0x172>
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fa:	d87f      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x16c>
 80034fc:	2b70      	cmp	r3, #112	; 0x70
 80034fe:	d01a      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0xa6>
 8003500:	2b70      	cmp	r3, #112	; 0x70
 8003502:	d87b      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x16c>
 8003504:	2b60      	cmp	r3, #96	; 0x60
 8003506:	d050      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x11a>
 8003508:	2b60      	cmp	r3, #96	; 0x60
 800350a:	d877      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x16c>
 800350c:	2b50      	cmp	r3, #80	; 0x50
 800350e:	d03c      	beq.n	800358a <HAL_TIM_ConfigClockSource+0xfa>
 8003510:	2b50      	cmp	r3, #80	; 0x50
 8003512:	d873      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x16c>
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d058      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x13a>
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d86f      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x16c>
 800351c:	2b30      	cmp	r3, #48	; 0x30
 800351e:	d064      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x15a>
 8003520:	2b30      	cmp	r3, #48	; 0x30
 8003522:	d86b      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x16c>
 8003524:	2b20      	cmp	r3, #32
 8003526:	d060      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x15a>
 8003528:	2b20      	cmp	r3, #32
 800352a:	d867      	bhi.n	80035fc <HAL_TIM_ConfigClockSource+0x16c>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d05c      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x15a>
 8003530:	2b10      	cmp	r3, #16
 8003532:	d05a      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x15a>
 8003534:	e062      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6899      	ldr	r1, [r3, #8]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f000 f98d 	bl	8003864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003558:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	609a      	str	r2, [r3, #8]
      break;
 8003562:	e04f      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6899      	ldr	r1, [r3, #8]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f000 f976 	bl	8003864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003586:	609a      	str	r2, [r3, #8]
      break;
 8003588:	e03c      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	461a      	mov	r2, r3
 8003598:	f000 f8ea 	bl	8003770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2150      	movs	r1, #80	; 0x50
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f943 	bl	800382e <TIM_ITRx_SetConfig>
      break;
 80035a8:	e02c      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	461a      	mov	r2, r3
 80035b8:	f000 f909 	bl	80037ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2160      	movs	r1, #96	; 0x60
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f933 	bl	800382e <TIM_ITRx_SetConfig>
      break;
 80035c8:	e01c      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6859      	ldr	r1, [r3, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f000 f8ca 	bl	8003770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2140      	movs	r1, #64	; 0x40
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f923 	bl	800382e <TIM_ITRx_SetConfig>
      break;
 80035e8:	e00c      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f000 f91a 	bl	800382e <TIM_ITRx_SetConfig>
      break;
 80035fa:	e003      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003600:	e000      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003602:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a34      	ldr	r2, [pc, #208]	; (8003754 <TIM_Base_SetConfig+0xe4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00f      	beq.n	80036a8 <TIM_Base_SetConfig+0x38>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d00b      	beq.n	80036a8 <TIM_Base_SetConfig+0x38>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a31      	ldr	r2, [pc, #196]	; (8003758 <TIM_Base_SetConfig+0xe8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_Base_SetConfig+0x38>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a30      	ldr	r2, [pc, #192]	; (800375c <TIM_Base_SetConfig+0xec>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0x38>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a2f      	ldr	r2, [pc, #188]	; (8003760 <TIM_Base_SetConfig+0xf0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a25      	ldr	r2, [pc, #148]	; (8003754 <TIM_Base_SetConfig+0xe4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01b      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d017      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a22      	ldr	r2, [pc, #136]	; (8003758 <TIM_Base_SetConfig+0xe8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a21      	ldr	r2, [pc, #132]	; (800375c <TIM_Base_SetConfig+0xec>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00f      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a20      	ldr	r2, [pc, #128]	; (8003760 <TIM_Base_SetConfig+0xf0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00b      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <TIM_Base_SetConfig+0xf4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a1e      	ldr	r2, [pc, #120]	; (8003768 <TIM_Base_SetConfig+0xf8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_Base_SetConfig+0x8a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a1d      	ldr	r2, [pc, #116]	; (800376c <TIM_Base_SetConfig+0xfc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d108      	bne.n	800370c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a08      	ldr	r2, [pc, #32]	; (8003754 <TIM_Base_SetConfig+0xe4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d103      	bne.n	8003740 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	615a      	str	r2, [r3, #20]
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40010000 	.word	0x40010000
 8003758:	40000400 	.word	0x40000400
 800375c:	40000800 	.word	0x40000800
 8003760:	40000c00 	.word	0x40000c00
 8003764:	40014000 	.word	0x40014000
 8003768:	40014400 	.word	0x40014400
 800376c:	40014800 	.word	0x40014800

08003770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f023 0201 	bic.w	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800379a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f023 030a 	bic.w	r3, r3, #10
 80037ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b087      	sub	sp, #28
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f023 0210 	bic.w	r2, r3, #16
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	031b      	lsls	r3, r3, #12
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800380a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	f043 0307 	orr.w	r3, r3, #7
 8003850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	609a      	str	r2, [r3, #8]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800387e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	021a      	lsls	r2, r3, #8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	431a      	orrs	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4313      	orrs	r3, r2
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e050      	b.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1c      	ldr	r2, [pc, #112]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d013      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a18      	ldr	r2, [pc, #96]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a15      	ldr	r2, [pc, #84]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a13      	ldr	r2, [pc, #76]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10c      	bne.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40014000 	.word	0x40014000

08003980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e03f      	b.n	8003a3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fdbc 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	; 0x24
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f9cb 	bl	8003d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b08a      	sub	sp, #40	; 0x28
 8003a46:	af02      	add	r7, sp, #8
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d17c      	bne.n	8003b5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_UART_Transmit+0x2c>
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e075      	b.n	8003b5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_UART_Transmit+0x3e>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e06e      	b.n	8003b5e <HAL_UART_Transmit+0x11c>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2221      	movs	r2, #33	; 0x21
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a96:	f7fd ff1b 	bl	80018d0 <HAL_GetTick>
 8003a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d108      	bne.n	8003ac4 <HAL_UART_Transmit+0x82>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e003      	b.n	8003acc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ad4:	e02a      	b.n	8003b2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f8e2 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e036      	b.n	8003b5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3302      	adds	r3, #2
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	e007      	b.n	8003b1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1cf      	bne.n	8003ad6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2140      	movs	r1, #64	; 0x40
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f8b2 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e006      	b.n	8003b5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b08a      	sub	sp, #40	; 0x28
 8003b6a:	af02      	add	r7, sp, #8
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	4613      	mov	r3, r2
 8003b74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	f040 808c 	bne.w	8003ca0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_UART_Receive+0x2e>
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e084      	b.n	8003ca2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Receive+0x40>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e07d      	b.n	8003ca2 <HAL_UART_Receive+0x13c>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2222      	movs	r2, #34	; 0x22
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bc2:	f7fd fe85 	bl	80018d0 <HAL_GetTick>
 8003bc6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bdc:	d108      	bne.n	8003bf0 <HAL_UART_Receive+0x8a>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e003      	b.n	8003bf8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c00:	e043      	b.n	8003c8a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2120      	movs	r1, #32
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f84c 	bl	8003caa <UART_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e042      	b.n	8003ca2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	3302      	adds	r3, #2
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	e01f      	b.n	8003c7c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c44:	d007      	beq.n	8003c56 <HAL_UART_Receive+0xf0>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_UART_Receive+0xfe>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e008      	b.n	8003c76 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1b6      	bne.n	8003c02 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e000      	b.n	8003ca2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
  }
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b090      	sub	sp, #64	; 0x40
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cba:	e050      	b.n	8003d5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d04c      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x30>
 8003cca:	f7fd fe01 	bl	80018d0 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d241      	bcs.n	8003d5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cfa:	637a      	str	r2, [r7, #52]	; 0x34
 8003cfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e5      	bne.n	8003cda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3314      	adds	r3, #20
 8003d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d2e:	623a      	str	r2, [r7, #32]
 8003d30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	69f9      	ldr	r1, [r7, #28]
 8003d34:	6a3a      	ldr	r2, [r7, #32]
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e5      	bne.n	8003d0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e00f      	b.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4013      	ands	r3, r2
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	bf0c      	ite	eq
 8003d6e:	2301      	moveq	r3, #1
 8003d70:	2300      	movne	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d09f      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3740      	adds	r7, #64	; 0x40
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d8c:	b0c0      	sub	sp, #256	; 0x100
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	68d9      	ldr	r1, [r3, #12]
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	ea40 0301 	orr.w	r3, r0, r1
 8003db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003de0:	f021 010c 	bic.w	r1, r1, #12
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dee:	430b      	orrs	r3, r1
 8003df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e02:	6999      	ldr	r1, [r3, #24]
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	ea40 0301 	orr.w	r3, r0, r1
 8003e0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b8f      	ldr	r3, [pc, #572]	; (8004054 <UART_SetConfig+0x2cc>)
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d005      	beq.n	8003e28 <UART_SetConfig+0xa0>
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4b8d      	ldr	r3, [pc, #564]	; (8004058 <UART_SetConfig+0x2d0>)
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d104      	bne.n	8003e32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e28:	f7fe fc62 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8003e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e30:	e003      	b.n	8003e3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e32:	f7fe fc49 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003e36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e44:	f040 810c 	bne.w	8004060 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	1891      	adds	r1, r2, r2
 8003e60:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e62:	415b      	adcs	r3, r3
 8003e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	eb12 0801 	adds.w	r8, r2, r1
 8003e70:	4629      	mov	r1, r5
 8003e72:	eb43 0901 	adc.w	r9, r3, r1
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e8a:	4690      	mov	r8, r2
 8003e8c:	4699      	mov	r9, r3
 8003e8e:	4623      	mov	r3, r4
 8003e90:	eb18 0303 	adds.w	r3, r8, r3
 8003e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e98:	462b      	mov	r3, r5
 8003e9a:	eb49 0303 	adc.w	r3, r9, r3
 8003e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003eae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	18db      	adds	r3, r3, r3
 8003eba:	653b      	str	r3, [r7, #80]	; 0x50
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	eb42 0303 	adc.w	r3, r2, r3
 8003ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ec8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ecc:	f7fc f9f0 	bl	80002b0 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4b61      	ldr	r3, [pc, #388]	; (800405c <UART_SetConfig+0x2d4>)
 8003ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	011c      	lsls	r4, r3, #4
 8003ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ee8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003eec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	1891      	adds	r1, r2, r2
 8003ef6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ef8:	415b      	adcs	r3, r3
 8003efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f00:	4641      	mov	r1, r8
 8003f02:	eb12 0a01 	adds.w	sl, r2, r1
 8003f06:	4649      	mov	r1, r9
 8003f08:	eb43 0b01 	adc.w	fp, r3, r1
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f20:	4692      	mov	sl, r2
 8003f22:	469b      	mov	fp, r3
 8003f24:	4643      	mov	r3, r8
 8003f26:	eb1a 0303 	adds.w	r3, sl, r3
 8003f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	eb4b 0303 	adc.w	r3, fp, r3
 8003f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	18db      	adds	r3, r3, r3
 8003f50:	643b      	str	r3, [r7, #64]	; 0x40
 8003f52:	4613      	mov	r3, r2
 8003f54:	eb42 0303 	adc.w	r3, r2, r3
 8003f58:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f62:	f7fc f9a5 	bl	80002b0 <__aeabi_uldivmod>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <UART_SetConfig+0x2d4>)
 8003f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	2264      	movs	r2, #100	; 0x64
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	1acb      	subs	r3, r1, r3
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <UART_SetConfig+0x2d4>)
 8003f84:	fba3 2302 	umull	r2, r3, r3, r2
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f90:	441c      	add	r4, r3
 8003f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	1891      	adds	r1, r2, r2
 8003faa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fac:	415b      	adcs	r3, r3
 8003fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	1851      	adds	r1, r2, r1
 8003fb8:	6339      	str	r1, [r7, #48]	; 0x30
 8003fba:	4649      	mov	r1, r9
 8003fbc:	414b      	adcs	r3, r1
 8003fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fcc:	4659      	mov	r1, fp
 8003fce:	00cb      	lsls	r3, r1, #3
 8003fd0:	4651      	mov	r1, sl
 8003fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fd6:	4651      	mov	r1, sl
 8003fd8:	00ca      	lsls	r2, r1, #3
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	189b      	adds	r3, r3, r2
 8003fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fe8:	464b      	mov	r3, r9
 8003fea:	460a      	mov	r2, r1
 8003fec:	eb42 0303 	adc.w	r3, r2, r3
 8003ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004000:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004008:	460b      	mov	r3, r1
 800400a:	18db      	adds	r3, r3, r3
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
 800400e:	4613      	mov	r3, r2
 8004010:	eb42 0303 	adc.w	r3, r2, r3
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800401a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800401e:	f7fc f947 	bl	80002b0 <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4b0d      	ldr	r3, [pc, #52]	; (800405c <UART_SetConfig+0x2d4>)
 8004028:	fba3 1302 	umull	r1, r3, r3, r2
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	2164      	movs	r1, #100	; 0x64
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	3332      	adds	r3, #50	; 0x32
 800403a:	4a08      	ldr	r2, [pc, #32]	; (800405c <UART_SetConfig+0x2d4>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	f003 0207 	and.w	r2, r3, #7
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4422      	add	r2, r4
 800404e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004050:	e105      	b.n	800425e <UART_SetConfig+0x4d6>
 8004052:	bf00      	nop
 8004054:	40011000 	.word	0x40011000
 8004058:	40011400 	.word	0x40011400
 800405c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004064:	2200      	movs	r2, #0
 8004066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800406a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800406e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004072:	4642      	mov	r2, r8
 8004074:	464b      	mov	r3, r9
 8004076:	1891      	adds	r1, r2, r2
 8004078:	6239      	str	r1, [r7, #32]
 800407a:	415b      	adcs	r3, r3
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004082:	4641      	mov	r1, r8
 8004084:	1854      	adds	r4, r2, r1
 8004086:	4649      	mov	r1, r9
 8004088:	eb43 0501 	adc.w	r5, r3, r1
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	00eb      	lsls	r3, r5, #3
 8004096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800409a:	00e2      	lsls	r2, r4, #3
 800409c:	4614      	mov	r4, r2
 800409e:	461d      	mov	r5, r3
 80040a0:	4643      	mov	r3, r8
 80040a2:	18e3      	adds	r3, r4, r3
 80040a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040a8:	464b      	mov	r3, r9
 80040aa:	eb45 0303 	adc.w	r3, r5, r3
 80040ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040ce:	4629      	mov	r1, r5
 80040d0:	008b      	lsls	r3, r1, #2
 80040d2:	4621      	mov	r1, r4
 80040d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d8:	4621      	mov	r1, r4
 80040da:	008a      	lsls	r2, r1, #2
 80040dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040e0:	f7fc f8e6 	bl	80002b0 <__aeabi_uldivmod>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4b60      	ldr	r3, [pc, #384]	; (800426c <UART_SetConfig+0x4e4>)
 80040ea:	fba3 2302 	umull	r2, r3, r3, r2
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	011c      	lsls	r4, r3, #4
 80040f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004104:	4642      	mov	r2, r8
 8004106:	464b      	mov	r3, r9
 8004108:	1891      	adds	r1, r2, r2
 800410a:	61b9      	str	r1, [r7, #24]
 800410c:	415b      	adcs	r3, r3
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004114:	4641      	mov	r1, r8
 8004116:	1851      	adds	r1, r2, r1
 8004118:	6139      	str	r1, [r7, #16]
 800411a:	4649      	mov	r1, r9
 800411c:	414b      	adcs	r3, r1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800412c:	4659      	mov	r1, fp
 800412e:	00cb      	lsls	r3, r1, #3
 8004130:	4651      	mov	r1, sl
 8004132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004136:	4651      	mov	r1, sl
 8004138:	00ca      	lsls	r2, r1, #3
 800413a:	4610      	mov	r0, r2
 800413c:	4619      	mov	r1, r3
 800413e:	4603      	mov	r3, r0
 8004140:	4642      	mov	r2, r8
 8004142:	189b      	adds	r3, r3, r2
 8004144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004148:	464b      	mov	r3, r9
 800414a:	460a      	mov	r2, r1
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	67bb      	str	r3, [r7, #120]	; 0x78
 800415e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800416c:	4649      	mov	r1, r9
 800416e:	008b      	lsls	r3, r1, #2
 8004170:	4641      	mov	r1, r8
 8004172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004176:	4641      	mov	r1, r8
 8004178:	008a      	lsls	r2, r1, #2
 800417a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800417e:	f7fc f897 	bl	80002b0 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4b39      	ldr	r3, [pc, #228]	; (800426c <UART_SetConfig+0x4e4>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	; 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	3332      	adds	r3, #50	; 0x32
 800419a:	4a34      	ldr	r2, [pc, #208]	; (800426c <UART_SetConfig+0x4e4>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a6:	441c      	add	r4, r3
 80041a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ac:	2200      	movs	r2, #0
 80041ae:	673b      	str	r3, [r7, #112]	; 0x70
 80041b0:	677a      	str	r2, [r7, #116]	; 0x74
 80041b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041b6:	4642      	mov	r2, r8
 80041b8:	464b      	mov	r3, r9
 80041ba:	1891      	adds	r1, r2, r2
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	415b      	adcs	r3, r3
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c6:	4641      	mov	r1, r8
 80041c8:	1851      	adds	r1, r2, r1
 80041ca:	6039      	str	r1, [r7, #0]
 80041cc:	4649      	mov	r1, r9
 80041ce:	414b      	adcs	r3, r1
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041de:	4659      	mov	r1, fp
 80041e0:	00cb      	lsls	r3, r1, #3
 80041e2:	4651      	mov	r1, sl
 80041e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e8:	4651      	mov	r1, sl
 80041ea:	00ca      	lsls	r2, r1, #3
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	4603      	mov	r3, r0
 80041f2:	4642      	mov	r2, r8
 80041f4:	189b      	adds	r3, r3, r2
 80041f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041f8:	464b      	mov	r3, r9
 80041fa:	460a      	mov	r2, r1
 80041fc:	eb42 0303 	adc.w	r3, r2, r3
 8004200:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	663b      	str	r3, [r7, #96]	; 0x60
 800420c:	667a      	str	r2, [r7, #100]	; 0x64
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800421a:	4649      	mov	r1, r9
 800421c:	008b      	lsls	r3, r1, #2
 800421e:	4641      	mov	r1, r8
 8004220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004224:	4641      	mov	r1, r8
 8004226:	008a      	lsls	r2, r1, #2
 8004228:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800422c:	f7fc f840 	bl	80002b0 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4b0d      	ldr	r3, [pc, #52]	; (800426c <UART_SetConfig+0x4e4>)
 8004236:	fba3 1302 	umull	r1, r3, r3, r2
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2164      	movs	r1, #100	; 0x64
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	3332      	adds	r3, #50	; 0x32
 8004248:	4a08      	ldr	r2, [pc, #32]	; (800426c <UART_SetConfig+0x4e4>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	f003 020f 	and.w	r2, r3, #15
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4422      	add	r2, r4
 800425c:	609a      	str	r2, [r3, #8]
}
 800425e:	bf00      	nop
 8004260:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004264:	46bd      	mov	sp, r7
 8004266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800426a:	bf00      	nop
 800426c:	51eb851f 	.word	0x51eb851f

08004270 <__errno>:
 8004270:	4b01      	ldr	r3, [pc, #4]	; (8004278 <__errno+0x8>)
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	2000000c 	.word	0x2000000c

0800427c <__libc_init_array>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	4d0d      	ldr	r5, [pc, #52]	; (80042b4 <__libc_init_array+0x38>)
 8004280:	4c0d      	ldr	r4, [pc, #52]	; (80042b8 <__libc_init_array+0x3c>)
 8004282:	1b64      	subs	r4, r4, r5
 8004284:	10a4      	asrs	r4, r4, #2
 8004286:	2600      	movs	r6, #0
 8004288:	42a6      	cmp	r6, r4
 800428a:	d109      	bne.n	80042a0 <__libc_init_array+0x24>
 800428c:	4d0b      	ldr	r5, [pc, #44]	; (80042bc <__libc_init_array+0x40>)
 800428e:	4c0c      	ldr	r4, [pc, #48]	; (80042c0 <__libc_init_array+0x44>)
 8004290:	f001 f952 	bl	8005538 <_init>
 8004294:	1b64      	subs	r4, r4, r5
 8004296:	10a4      	asrs	r4, r4, #2
 8004298:	2600      	movs	r6, #0
 800429a:	42a6      	cmp	r6, r4
 800429c:	d105      	bne.n	80042aa <__libc_init_array+0x2e>
 800429e:	bd70      	pop	{r4, r5, r6, pc}
 80042a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a4:	4798      	blx	r3
 80042a6:	3601      	adds	r6, #1
 80042a8:	e7ee      	b.n	8004288 <__libc_init_array+0xc>
 80042aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ae:	4798      	blx	r3
 80042b0:	3601      	adds	r6, #1
 80042b2:	e7f2      	b.n	800429a <__libc_init_array+0x1e>
 80042b4:	080059c8 	.word	0x080059c8
 80042b8:	080059c8 	.word	0x080059c8
 80042bc:	080059c8 	.word	0x080059c8
 80042c0:	080059cc 	.word	0x080059cc

080042c4 <isprint>:
 80042c4:	4b02      	ldr	r3, [pc, #8]	; (80042d0 <isprint+0xc>)
 80042c6:	4418      	add	r0, r3
 80042c8:	7840      	ldrb	r0, [r0, #1]
 80042ca:	f000 0097 	and.w	r0, r0, #151	; 0x97
 80042ce:	4770      	bx	lr
 80042d0:	08005810 	.word	0x08005810

080042d4 <memset>:
 80042d4:	4402      	add	r2, r0
 80042d6:	4603      	mov	r3, r0
 80042d8:	4293      	cmp	r3, r2
 80042da:	d100      	bne.n	80042de <memset+0xa>
 80042dc:	4770      	bx	lr
 80042de:	f803 1b01 	strb.w	r1, [r3], #1
 80042e2:	e7f9      	b.n	80042d8 <memset+0x4>

080042e4 <siscanf>:
 80042e4:	b40e      	push	{r1, r2, r3}
 80042e6:	b510      	push	{r4, lr}
 80042e8:	b09f      	sub	sp, #124	; 0x7c
 80042ea:	ac21      	add	r4, sp, #132	; 0x84
 80042ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80042f0:	f854 2b04 	ldr.w	r2, [r4], #4
 80042f4:	9201      	str	r2, [sp, #4]
 80042f6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80042fa:	9004      	str	r0, [sp, #16]
 80042fc:	9008      	str	r0, [sp, #32]
 80042fe:	f7fb ff79 	bl	80001f4 <strlen>
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <siscanf+0x50>)
 8004304:	9005      	str	r0, [sp, #20]
 8004306:	9009      	str	r0, [sp, #36]	; 0x24
 8004308:	930d      	str	r3, [sp, #52]	; 0x34
 800430a:	480b      	ldr	r0, [pc, #44]	; (8004338 <siscanf+0x54>)
 800430c:	9a01      	ldr	r2, [sp, #4]
 800430e:	6800      	ldr	r0, [r0, #0]
 8004310:	9403      	str	r4, [sp, #12]
 8004312:	2300      	movs	r3, #0
 8004314:	9311      	str	r3, [sp, #68]	; 0x44
 8004316:	9316      	str	r3, [sp, #88]	; 0x58
 8004318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800431c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004320:	a904      	add	r1, sp, #16
 8004322:	4623      	mov	r3, r4
 8004324:	f000 f9e2 	bl	80046ec <__ssvfiscanf_r>
 8004328:	b01f      	add	sp, #124	; 0x7c
 800432a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800432e:	b003      	add	sp, #12
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	0800433d 	.word	0x0800433d
 8004338:	2000000c 	.word	0x2000000c

0800433c <__seofread>:
 800433c:	2000      	movs	r0, #0
 800433e:	4770      	bx	lr

08004340 <_vsiprintf_r>:
 8004340:	b500      	push	{lr}
 8004342:	b09b      	sub	sp, #108	; 0x6c
 8004344:	9100      	str	r1, [sp, #0]
 8004346:	9104      	str	r1, [sp, #16]
 8004348:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800434c:	9105      	str	r1, [sp, #20]
 800434e:	9102      	str	r1, [sp, #8]
 8004350:	4905      	ldr	r1, [pc, #20]	; (8004368 <_vsiprintf_r+0x28>)
 8004352:	9103      	str	r1, [sp, #12]
 8004354:	4669      	mov	r1, sp
 8004356:	f000 f86f 	bl	8004438 <_svfiprintf_r>
 800435a:	9b00      	ldr	r3, [sp, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	b01b      	add	sp, #108	; 0x6c
 8004362:	f85d fb04 	ldr.w	pc, [sp], #4
 8004366:	bf00      	nop
 8004368:	ffff0208 	.word	0xffff0208

0800436c <vsiprintf>:
 800436c:	4613      	mov	r3, r2
 800436e:	460a      	mov	r2, r1
 8004370:	4601      	mov	r1, r0
 8004372:	4802      	ldr	r0, [pc, #8]	; (800437c <vsiprintf+0x10>)
 8004374:	6800      	ldr	r0, [r0, #0]
 8004376:	f7ff bfe3 	b.w	8004340 <_vsiprintf_r>
 800437a:	bf00      	nop
 800437c:	2000000c 	.word	0x2000000c

08004380 <__ssputs_r>:
 8004380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004384:	688e      	ldr	r6, [r1, #8]
 8004386:	429e      	cmp	r6, r3
 8004388:	4682      	mov	sl, r0
 800438a:	460c      	mov	r4, r1
 800438c:	4690      	mov	r8, r2
 800438e:	461f      	mov	r7, r3
 8004390:	d838      	bhi.n	8004404 <__ssputs_r+0x84>
 8004392:	898a      	ldrh	r2, [r1, #12]
 8004394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004398:	d032      	beq.n	8004400 <__ssputs_r+0x80>
 800439a:	6825      	ldr	r5, [r4, #0]
 800439c:	6909      	ldr	r1, [r1, #16]
 800439e:	eba5 0901 	sub.w	r9, r5, r1
 80043a2:	6965      	ldr	r5, [r4, #20]
 80043a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043ac:	3301      	adds	r3, #1
 80043ae:	444b      	add	r3, r9
 80043b0:	106d      	asrs	r5, r5, #1
 80043b2:	429d      	cmp	r5, r3
 80043b4:	bf38      	it	cc
 80043b6:	461d      	movcc	r5, r3
 80043b8:	0553      	lsls	r3, r2, #21
 80043ba:	d531      	bpl.n	8004420 <__ssputs_r+0xa0>
 80043bc:	4629      	mov	r1, r5
 80043be:	f000 fff3 	bl	80053a8 <_malloc_r>
 80043c2:	4606      	mov	r6, r0
 80043c4:	b950      	cbnz	r0, 80043dc <__ssputs_r+0x5c>
 80043c6:	230c      	movs	r3, #12
 80043c8:	f8ca 3000 	str.w	r3, [sl]
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295
 80043d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043dc:	6921      	ldr	r1, [r4, #16]
 80043de:	464a      	mov	r2, r9
 80043e0:	f000 ff4e 	bl	8005280 <memcpy>
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ee:	81a3      	strh	r3, [r4, #12]
 80043f0:	6126      	str	r6, [r4, #16]
 80043f2:	6165      	str	r5, [r4, #20]
 80043f4:	444e      	add	r6, r9
 80043f6:	eba5 0509 	sub.w	r5, r5, r9
 80043fa:	6026      	str	r6, [r4, #0]
 80043fc:	60a5      	str	r5, [r4, #8]
 80043fe:	463e      	mov	r6, r7
 8004400:	42be      	cmp	r6, r7
 8004402:	d900      	bls.n	8004406 <__ssputs_r+0x86>
 8004404:	463e      	mov	r6, r7
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	4632      	mov	r2, r6
 800440a:	4641      	mov	r1, r8
 800440c:	f000 ff46 	bl	800529c <memmove>
 8004410:	68a3      	ldr	r3, [r4, #8]
 8004412:	1b9b      	subs	r3, r3, r6
 8004414:	60a3      	str	r3, [r4, #8]
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	4433      	add	r3, r6
 800441a:	6023      	str	r3, [r4, #0]
 800441c:	2000      	movs	r0, #0
 800441e:	e7db      	b.n	80043d8 <__ssputs_r+0x58>
 8004420:	462a      	mov	r2, r5
 8004422:	f001 f835 	bl	8005490 <_realloc_r>
 8004426:	4606      	mov	r6, r0
 8004428:	2800      	cmp	r0, #0
 800442a:	d1e1      	bne.n	80043f0 <__ssputs_r+0x70>
 800442c:	6921      	ldr	r1, [r4, #16]
 800442e:	4650      	mov	r0, sl
 8004430:	f000 ff4e 	bl	80052d0 <_free_r>
 8004434:	e7c7      	b.n	80043c6 <__ssputs_r+0x46>
	...

08004438 <_svfiprintf_r>:
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443c:	4698      	mov	r8, r3
 800443e:	898b      	ldrh	r3, [r1, #12]
 8004440:	061b      	lsls	r3, r3, #24
 8004442:	b09d      	sub	sp, #116	; 0x74
 8004444:	4607      	mov	r7, r0
 8004446:	460d      	mov	r5, r1
 8004448:	4614      	mov	r4, r2
 800444a:	d50e      	bpl.n	800446a <_svfiprintf_r+0x32>
 800444c:	690b      	ldr	r3, [r1, #16]
 800444e:	b963      	cbnz	r3, 800446a <_svfiprintf_r+0x32>
 8004450:	2140      	movs	r1, #64	; 0x40
 8004452:	f000 ffa9 	bl	80053a8 <_malloc_r>
 8004456:	6028      	str	r0, [r5, #0]
 8004458:	6128      	str	r0, [r5, #16]
 800445a:	b920      	cbnz	r0, 8004466 <_svfiprintf_r+0x2e>
 800445c:	230c      	movs	r3, #12
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	f04f 30ff 	mov.w	r0, #4294967295
 8004464:	e0d1      	b.n	800460a <_svfiprintf_r+0x1d2>
 8004466:	2340      	movs	r3, #64	; 0x40
 8004468:	616b      	str	r3, [r5, #20]
 800446a:	2300      	movs	r3, #0
 800446c:	9309      	str	r3, [sp, #36]	; 0x24
 800446e:	2320      	movs	r3, #32
 8004470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004474:	f8cd 800c 	str.w	r8, [sp, #12]
 8004478:	2330      	movs	r3, #48	; 0x30
 800447a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004624 <_svfiprintf_r+0x1ec>
 800447e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004482:	f04f 0901 	mov.w	r9, #1
 8004486:	4623      	mov	r3, r4
 8004488:	469a      	mov	sl, r3
 800448a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800448e:	b10a      	cbz	r2, 8004494 <_svfiprintf_r+0x5c>
 8004490:	2a25      	cmp	r2, #37	; 0x25
 8004492:	d1f9      	bne.n	8004488 <_svfiprintf_r+0x50>
 8004494:	ebba 0b04 	subs.w	fp, sl, r4
 8004498:	d00b      	beq.n	80044b2 <_svfiprintf_r+0x7a>
 800449a:	465b      	mov	r3, fp
 800449c:	4622      	mov	r2, r4
 800449e:	4629      	mov	r1, r5
 80044a0:	4638      	mov	r0, r7
 80044a2:	f7ff ff6d 	bl	8004380 <__ssputs_r>
 80044a6:	3001      	adds	r0, #1
 80044a8:	f000 80aa 	beq.w	8004600 <_svfiprintf_r+0x1c8>
 80044ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044ae:	445a      	add	r2, fp
 80044b0:	9209      	str	r2, [sp, #36]	; 0x24
 80044b2:	f89a 3000 	ldrb.w	r3, [sl]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80a2 	beq.w	8004600 <_svfiprintf_r+0x1c8>
 80044bc:	2300      	movs	r3, #0
 80044be:	f04f 32ff 	mov.w	r2, #4294967295
 80044c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044c6:	f10a 0a01 	add.w	sl, sl, #1
 80044ca:	9304      	str	r3, [sp, #16]
 80044cc:	9307      	str	r3, [sp, #28]
 80044ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044d2:	931a      	str	r3, [sp, #104]	; 0x68
 80044d4:	4654      	mov	r4, sl
 80044d6:	2205      	movs	r2, #5
 80044d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044dc:	4851      	ldr	r0, [pc, #324]	; (8004624 <_svfiprintf_r+0x1ec>)
 80044de:	f7fb fe97 	bl	8000210 <memchr>
 80044e2:	9a04      	ldr	r2, [sp, #16]
 80044e4:	b9d8      	cbnz	r0, 800451e <_svfiprintf_r+0xe6>
 80044e6:	06d0      	lsls	r0, r2, #27
 80044e8:	bf44      	itt	mi
 80044ea:	2320      	movmi	r3, #32
 80044ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044f0:	0711      	lsls	r1, r2, #28
 80044f2:	bf44      	itt	mi
 80044f4:	232b      	movmi	r3, #43	; 0x2b
 80044f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044fa:	f89a 3000 	ldrb.w	r3, [sl]
 80044fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004500:	d015      	beq.n	800452e <_svfiprintf_r+0xf6>
 8004502:	9a07      	ldr	r2, [sp, #28]
 8004504:	4654      	mov	r4, sl
 8004506:	2000      	movs	r0, #0
 8004508:	f04f 0c0a 	mov.w	ip, #10
 800450c:	4621      	mov	r1, r4
 800450e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004512:	3b30      	subs	r3, #48	; 0x30
 8004514:	2b09      	cmp	r3, #9
 8004516:	d94e      	bls.n	80045b6 <_svfiprintf_r+0x17e>
 8004518:	b1b0      	cbz	r0, 8004548 <_svfiprintf_r+0x110>
 800451a:	9207      	str	r2, [sp, #28]
 800451c:	e014      	b.n	8004548 <_svfiprintf_r+0x110>
 800451e:	eba0 0308 	sub.w	r3, r0, r8
 8004522:	fa09 f303 	lsl.w	r3, r9, r3
 8004526:	4313      	orrs	r3, r2
 8004528:	9304      	str	r3, [sp, #16]
 800452a:	46a2      	mov	sl, r4
 800452c:	e7d2      	b.n	80044d4 <_svfiprintf_r+0x9c>
 800452e:	9b03      	ldr	r3, [sp, #12]
 8004530:	1d19      	adds	r1, r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	9103      	str	r1, [sp, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	bfbb      	ittet	lt
 800453a:	425b      	neglt	r3, r3
 800453c:	f042 0202 	orrlt.w	r2, r2, #2
 8004540:	9307      	strge	r3, [sp, #28]
 8004542:	9307      	strlt	r3, [sp, #28]
 8004544:	bfb8      	it	lt
 8004546:	9204      	strlt	r2, [sp, #16]
 8004548:	7823      	ldrb	r3, [r4, #0]
 800454a:	2b2e      	cmp	r3, #46	; 0x2e
 800454c:	d10c      	bne.n	8004568 <_svfiprintf_r+0x130>
 800454e:	7863      	ldrb	r3, [r4, #1]
 8004550:	2b2a      	cmp	r3, #42	; 0x2a
 8004552:	d135      	bne.n	80045c0 <_svfiprintf_r+0x188>
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	1d1a      	adds	r2, r3, #4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	9203      	str	r2, [sp, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	bfb8      	it	lt
 8004560:	f04f 33ff 	movlt.w	r3, #4294967295
 8004564:	3402      	adds	r4, #2
 8004566:	9305      	str	r3, [sp, #20]
 8004568:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004634 <_svfiprintf_r+0x1fc>
 800456c:	7821      	ldrb	r1, [r4, #0]
 800456e:	2203      	movs	r2, #3
 8004570:	4650      	mov	r0, sl
 8004572:	f7fb fe4d 	bl	8000210 <memchr>
 8004576:	b140      	cbz	r0, 800458a <_svfiprintf_r+0x152>
 8004578:	2340      	movs	r3, #64	; 0x40
 800457a:	eba0 000a 	sub.w	r0, r0, sl
 800457e:	fa03 f000 	lsl.w	r0, r3, r0
 8004582:	9b04      	ldr	r3, [sp, #16]
 8004584:	4303      	orrs	r3, r0
 8004586:	3401      	adds	r4, #1
 8004588:	9304      	str	r3, [sp, #16]
 800458a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458e:	4826      	ldr	r0, [pc, #152]	; (8004628 <_svfiprintf_r+0x1f0>)
 8004590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004594:	2206      	movs	r2, #6
 8004596:	f7fb fe3b 	bl	8000210 <memchr>
 800459a:	2800      	cmp	r0, #0
 800459c:	d038      	beq.n	8004610 <_svfiprintf_r+0x1d8>
 800459e:	4b23      	ldr	r3, [pc, #140]	; (800462c <_svfiprintf_r+0x1f4>)
 80045a0:	bb1b      	cbnz	r3, 80045ea <_svfiprintf_r+0x1b2>
 80045a2:	9b03      	ldr	r3, [sp, #12]
 80045a4:	3307      	adds	r3, #7
 80045a6:	f023 0307 	bic.w	r3, r3, #7
 80045aa:	3308      	adds	r3, #8
 80045ac:	9303      	str	r3, [sp, #12]
 80045ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b0:	4433      	add	r3, r6
 80045b2:	9309      	str	r3, [sp, #36]	; 0x24
 80045b4:	e767      	b.n	8004486 <_svfiprintf_r+0x4e>
 80045b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80045ba:	460c      	mov	r4, r1
 80045bc:	2001      	movs	r0, #1
 80045be:	e7a5      	b.n	800450c <_svfiprintf_r+0xd4>
 80045c0:	2300      	movs	r3, #0
 80045c2:	3401      	adds	r4, #1
 80045c4:	9305      	str	r3, [sp, #20]
 80045c6:	4619      	mov	r1, r3
 80045c8:	f04f 0c0a 	mov.w	ip, #10
 80045cc:	4620      	mov	r0, r4
 80045ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045d2:	3a30      	subs	r2, #48	; 0x30
 80045d4:	2a09      	cmp	r2, #9
 80045d6:	d903      	bls.n	80045e0 <_svfiprintf_r+0x1a8>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0c5      	beq.n	8004568 <_svfiprintf_r+0x130>
 80045dc:	9105      	str	r1, [sp, #20]
 80045de:	e7c3      	b.n	8004568 <_svfiprintf_r+0x130>
 80045e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045e4:	4604      	mov	r4, r0
 80045e6:	2301      	movs	r3, #1
 80045e8:	e7f0      	b.n	80045cc <_svfiprintf_r+0x194>
 80045ea:	ab03      	add	r3, sp, #12
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	462a      	mov	r2, r5
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <_svfiprintf_r+0x1f8>)
 80045f2:	a904      	add	r1, sp, #16
 80045f4:	4638      	mov	r0, r7
 80045f6:	f3af 8000 	nop.w
 80045fa:	1c42      	adds	r2, r0, #1
 80045fc:	4606      	mov	r6, r0
 80045fe:	d1d6      	bne.n	80045ae <_svfiprintf_r+0x176>
 8004600:	89ab      	ldrh	r3, [r5, #12]
 8004602:	065b      	lsls	r3, r3, #25
 8004604:	f53f af2c 	bmi.w	8004460 <_svfiprintf_r+0x28>
 8004608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800460a:	b01d      	add	sp, #116	; 0x74
 800460c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004610:	ab03      	add	r3, sp, #12
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	462a      	mov	r2, r5
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <_svfiprintf_r+0x1f8>)
 8004618:	a904      	add	r1, sp, #16
 800461a:	4638      	mov	r0, r7
 800461c:	f000 fa4c 	bl	8004ab8 <_printf_i>
 8004620:	e7eb      	b.n	80045fa <_svfiprintf_r+0x1c2>
 8004622:	bf00      	nop
 8004624:	08005911 	.word	0x08005911
 8004628:	0800591b 	.word	0x0800591b
 800462c:	00000000 	.word	0x00000000
 8004630:	08004381 	.word	0x08004381
 8004634:	08005917 	.word	0x08005917

08004638 <_sungetc_r>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	1c4b      	adds	r3, r1, #1
 800463c:	4614      	mov	r4, r2
 800463e:	d103      	bne.n	8004648 <_sungetc_r+0x10>
 8004640:	f04f 35ff 	mov.w	r5, #4294967295
 8004644:	4628      	mov	r0, r5
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	8993      	ldrh	r3, [r2, #12]
 800464a:	f023 0320 	bic.w	r3, r3, #32
 800464e:	8193      	strh	r3, [r2, #12]
 8004650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004652:	6852      	ldr	r2, [r2, #4]
 8004654:	b2cd      	uxtb	r5, r1
 8004656:	b18b      	cbz	r3, 800467c <_sungetc_r+0x44>
 8004658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800465a:	4293      	cmp	r3, r2
 800465c:	dd08      	ble.n	8004670 <_sungetc_r+0x38>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	1e5a      	subs	r2, r3, #1
 8004662:	6022      	str	r2, [r4, #0]
 8004664:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	3301      	adds	r3, #1
 800466c:	6063      	str	r3, [r4, #4]
 800466e:	e7e9      	b.n	8004644 <_sungetc_r+0xc>
 8004670:	4621      	mov	r1, r4
 8004672:	f000 fdc9 	bl	8005208 <__submore>
 8004676:	2800      	cmp	r0, #0
 8004678:	d0f1      	beq.n	800465e <_sungetc_r+0x26>
 800467a:	e7e1      	b.n	8004640 <_sungetc_r+0x8>
 800467c:	6921      	ldr	r1, [r4, #16]
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	b151      	cbz	r1, 8004698 <_sungetc_r+0x60>
 8004682:	4299      	cmp	r1, r3
 8004684:	d208      	bcs.n	8004698 <_sungetc_r+0x60>
 8004686:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800468a:	42a9      	cmp	r1, r5
 800468c:	d104      	bne.n	8004698 <_sungetc_r+0x60>
 800468e:	3b01      	subs	r3, #1
 8004690:	3201      	adds	r2, #1
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	6062      	str	r2, [r4, #4]
 8004696:	e7d5      	b.n	8004644 <_sungetc_r+0xc>
 8004698:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800469c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046a0:	6363      	str	r3, [r4, #52]	; 0x34
 80046a2:	2303      	movs	r3, #3
 80046a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80046a6:	4623      	mov	r3, r4
 80046a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	2301      	movs	r3, #1
 80046b0:	e7dc      	b.n	800466c <_sungetc_r+0x34>

080046b2 <__ssrefill_r>:
 80046b2:	b510      	push	{r4, lr}
 80046b4:	460c      	mov	r4, r1
 80046b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80046b8:	b169      	cbz	r1, 80046d6 <__ssrefill_r+0x24>
 80046ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046be:	4299      	cmp	r1, r3
 80046c0:	d001      	beq.n	80046c6 <__ssrefill_r+0x14>
 80046c2:	f000 fe05 	bl	80052d0 <_free_r>
 80046c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	2000      	movs	r0, #0
 80046cc:	6360      	str	r0, [r4, #52]	; 0x34
 80046ce:	b113      	cbz	r3, 80046d6 <__ssrefill_r+0x24>
 80046d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046d2:	6023      	str	r3, [r4, #0]
 80046d4:	bd10      	pop	{r4, pc}
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	2300      	movs	r3, #0
 80046dc:	6063      	str	r3, [r4, #4]
 80046de:	89a3      	ldrh	r3, [r4, #12]
 80046e0:	f043 0320 	orr.w	r3, r3, #32
 80046e4:	81a3      	strh	r3, [r4, #12]
 80046e6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ea:	e7f3      	b.n	80046d4 <__ssrefill_r+0x22>

080046ec <__ssvfiscanf_r>:
 80046ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	460c      	mov	r4, r1
 80046f2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80046f6:	2100      	movs	r1, #0
 80046f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80046fc:	49a6      	ldr	r1, [pc, #664]	; (8004998 <__ssvfiscanf_r+0x2ac>)
 80046fe:	91a0      	str	r1, [sp, #640]	; 0x280
 8004700:	f10d 0804 	add.w	r8, sp, #4
 8004704:	49a5      	ldr	r1, [pc, #660]	; (800499c <__ssvfiscanf_r+0x2b0>)
 8004706:	4fa6      	ldr	r7, [pc, #664]	; (80049a0 <__ssvfiscanf_r+0x2b4>)
 8004708:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80049a4 <__ssvfiscanf_r+0x2b8>
 800470c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004710:	4606      	mov	r6, r0
 8004712:	91a1      	str	r1, [sp, #644]	; 0x284
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	7813      	ldrb	r3, [r2, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 815a 	beq.w	80049d2 <__ssvfiscanf_r+0x2e6>
 800471e:	5dd9      	ldrb	r1, [r3, r7]
 8004720:	f011 0108 	ands.w	r1, r1, #8
 8004724:	f102 0501 	add.w	r5, r2, #1
 8004728:	d019      	beq.n	800475e <__ssvfiscanf_r+0x72>
 800472a:	6863      	ldr	r3, [r4, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	dd0f      	ble.n	8004750 <__ssvfiscanf_r+0x64>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	5cba      	ldrb	r2, [r7, r2]
 8004736:	0712      	lsls	r2, r2, #28
 8004738:	d401      	bmi.n	800473e <__ssvfiscanf_r+0x52>
 800473a:	462a      	mov	r2, r5
 800473c:	e7eb      	b.n	8004716 <__ssvfiscanf_r+0x2a>
 800473e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004740:	3201      	adds	r2, #1
 8004742:	9245      	str	r2, [sp, #276]	; 0x114
 8004744:	6862      	ldr	r2, [r4, #4]
 8004746:	3301      	adds	r3, #1
 8004748:	3a01      	subs	r2, #1
 800474a:	6062      	str	r2, [r4, #4]
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	e7ec      	b.n	800472a <__ssvfiscanf_r+0x3e>
 8004750:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004752:	4621      	mov	r1, r4
 8004754:	4630      	mov	r0, r6
 8004756:	4798      	blx	r3
 8004758:	2800      	cmp	r0, #0
 800475a:	d0e9      	beq.n	8004730 <__ssvfiscanf_r+0x44>
 800475c:	e7ed      	b.n	800473a <__ssvfiscanf_r+0x4e>
 800475e:	2b25      	cmp	r3, #37	; 0x25
 8004760:	d012      	beq.n	8004788 <__ssvfiscanf_r+0x9c>
 8004762:	469a      	mov	sl, r3
 8004764:	6863      	ldr	r3, [r4, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f340 8091 	ble.w	800488e <__ssvfiscanf_r+0x1a2>
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	7813      	ldrb	r3, [r2, #0]
 8004770:	4553      	cmp	r3, sl
 8004772:	f040 812e 	bne.w	80049d2 <__ssvfiscanf_r+0x2e6>
 8004776:	6863      	ldr	r3, [r4, #4]
 8004778:	3b01      	subs	r3, #1
 800477a:	6063      	str	r3, [r4, #4]
 800477c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800477e:	3201      	adds	r2, #1
 8004780:	3301      	adds	r3, #1
 8004782:	6022      	str	r2, [r4, #0]
 8004784:	9345      	str	r3, [sp, #276]	; 0x114
 8004786:	e7d8      	b.n	800473a <__ssvfiscanf_r+0x4e>
 8004788:	9141      	str	r1, [sp, #260]	; 0x104
 800478a:	9143      	str	r1, [sp, #268]	; 0x10c
 800478c:	7853      	ldrb	r3, [r2, #1]
 800478e:	2b2a      	cmp	r3, #42	; 0x2a
 8004790:	bf02      	ittt	eq
 8004792:	2310      	moveq	r3, #16
 8004794:	1c95      	addeq	r5, r2, #2
 8004796:	9341      	streq	r3, [sp, #260]	; 0x104
 8004798:	220a      	movs	r2, #10
 800479a:	46aa      	mov	sl, r5
 800479c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80047a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80047a4:	2b09      	cmp	r3, #9
 80047a6:	d91d      	bls.n	80047e4 <__ssvfiscanf_r+0xf8>
 80047a8:	487e      	ldr	r0, [pc, #504]	; (80049a4 <__ssvfiscanf_r+0x2b8>)
 80047aa:	2203      	movs	r2, #3
 80047ac:	f7fb fd30 	bl	8000210 <memchr>
 80047b0:	b140      	cbz	r0, 80047c4 <__ssvfiscanf_r+0xd8>
 80047b2:	2301      	movs	r3, #1
 80047b4:	eba0 0009 	sub.w	r0, r0, r9
 80047b8:	fa03 f000 	lsl.w	r0, r3, r0
 80047bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80047be:	4318      	orrs	r0, r3
 80047c0:	9041      	str	r0, [sp, #260]	; 0x104
 80047c2:	4655      	mov	r5, sl
 80047c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80047c8:	2b78      	cmp	r3, #120	; 0x78
 80047ca:	d806      	bhi.n	80047da <__ssvfiscanf_r+0xee>
 80047cc:	2b57      	cmp	r3, #87	; 0x57
 80047ce:	d810      	bhi.n	80047f2 <__ssvfiscanf_r+0x106>
 80047d0:	2b25      	cmp	r3, #37	; 0x25
 80047d2:	d0c6      	beq.n	8004762 <__ssvfiscanf_r+0x76>
 80047d4:	d856      	bhi.n	8004884 <__ssvfiscanf_r+0x198>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d064      	beq.n	80048a4 <__ssvfiscanf_r+0x1b8>
 80047da:	2303      	movs	r3, #3
 80047dc:	9347      	str	r3, [sp, #284]	; 0x11c
 80047de:	230a      	movs	r3, #10
 80047e0:	9342      	str	r3, [sp, #264]	; 0x108
 80047e2:	e071      	b.n	80048c8 <__ssvfiscanf_r+0x1dc>
 80047e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80047e6:	fb02 1103 	mla	r1, r2, r3, r1
 80047ea:	3930      	subs	r1, #48	; 0x30
 80047ec:	9143      	str	r1, [sp, #268]	; 0x10c
 80047ee:	4655      	mov	r5, sl
 80047f0:	e7d3      	b.n	800479a <__ssvfiscanf_r+0xae>
 80047f2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80047f6:	2a20      	cmp	r2, #32
 80047f8:	d8ef      	bhi.n	80047da <__ssvfiscanf_r+0xee>
 80047fa:	a101      	add	r1, pc, #4	; (adr r1, 8004800 <__ssvfiscanf_r+0x114>)
 80047fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004800:	080048b3 	.word	0x080048b3
 8004804:	080047db 	.word	0x080047db
 8004808:	080047db 	.word	0x080047db
 800480c:	08004911 	.word	0x08004911
 8004810:	080047db 	.word	0x080047db
 8004814:	080047db 	.word	0x080047db
 8004818:	080047db 	.word	0x080047db
 800481c:	080047db 	.word	0x080047db
 8004820:	080047db 	.word	0x080047db
 8004824:	080047db 	.word	0x080047db
 8004828:	080047db 	.word	0x080047db
 800482c:	08004927 	.word	0x08004927
 8004830:	080048fd 	.word	0x080048fd
 8004834:	0800488b 	.word	0x0800488b
 8004838:	0800488b 	.word	0x0800488b
 800483c:	0800488b 	.word	0x0800488b
 8004840:	080047db 	.word	0x080047db
 8004844:	08004901 	.word	0x08004901
 8004848:	080047db 	.word	0x080047db
 800484c:	080047db 	.word	0x080047db
 8004850:	080047db 	.word	0x080047db
 8004854:	080047db 	.word	0x080047db
 8004858:	08004937 	.word	0x08004937
 800485c:	08004909 	.word	0x08004909
 8004860:	080048ab 	.word	0x080048ab
 8004864:	080047db 	.word	0x080047db
 8004868:	080047db 	.word	0x080047db
 800486c:	08004933 	.word	0x08004933
 8004870:	080047db 	.word	0x080047db
 8004874:	080048fd 	.word	0x080048fd
 8004878:	080047db 	.word	0x080047db
 800487c:	080047db 	.word	0x080047db
 8004880:	080048b3 	.word	0x080048b3
 8004884:	3b45      	subs	r3, #69	; 0x45
 8004886:	2b02      	cmp	r3, #2
 8004888:	d8a7      	bhi.n	80047da <__ssvfiscanf_r+0xee>
 800488a:	2305      	movs	r3, #5
 800488c:	e01b      	b.n	80048c6 <__ssvfiscanf_r+0x1da>
 800488e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004890:	4621      	mov	r1, r4
 8004892:	4630      	mov	r0, r6
 8004894:	4798      	blx	r3
 8004896:	2800      	cmp	r0, #0
 8004898:	f43f af68 	beq.w	800476c <__ssvfiscanf_r+0x80>
 800489c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800489e:	2800      	cmp	r0, #0
 80048a0:	f040 808d 	bne.w	80049be <__ssvfiscanf_r+0x2d2>
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	e08f      	b.n	80049ca <__ssvfiscanf_r+0x2de>
 80048aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80048ac:	f042 0220 	orr.w	r2, r2, #32
 80048b0:	9241      	str	r2, [sp, #260]	; 0x104
 80048b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80048b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b8:	9241      	str	r2, [sp, #260]	; 0x104
 80048ba:	2210      	movs	r2, #16
 80048bc:	2b6f      	cmp	r3, #111	; 0x6f
 80048be:	9242      	str	r2, [sp, #264]	; 0x108
 80048c0:	bf34      	ite	cc
 80048c2:	2303      	movcc	r3, #3
 80048c4:	2304      	movcs	r3, #4
 80048c6:	9347      	str	r3, [sp, #284]	; 0x11c
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	dd42      	ble.n	8004954 <__ssvfiscanf_r+0x268>
 80048ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80048d0:	0659      	lsls	r1, r3, #25
 80048d2:	d404      	bmi.n	80048de <__ssvfiscanf_r+0x1f2>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	5cba      	ldrb	r2, [r7, r2]
 80048da:	0712      	lsls	r2, r2, #28
 80048dc:	d441      	bmi.n	8004962 <__ssvfiscanf_r+0x276>
 80048de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	dc50      	bgt.n	8004986 <__ssvfiscanf_r+0x29a>
 80048e4:	466b      	mov	r3, sp
 80048e6:	4622      	mov	r2, r4
 80048e8:	a941      	add	r1, sp, #260	; 0x104
 80048ea:	4630      	mov	r0, r6
 80048ec:	f000 fa0a 	bl	8004d04 <_scanf_chars>
 80048f0:	2801      	cmp	r0, #1
 80048f2:	d06e      	beq.n	80049d2 <__ssvfiscanf_r+0x2e6>
 80048f4:	2802      	cmp	r0, #2
 80048f6:	f47f af20 	bne.w	800473a <__ssvfiscanf_r+0x4e>
 80048fa:	e7cf      	b.n	800489c <__ssvfiscanf_r+0x1b0>
 80048fc:	220a      	movs	r2, #10
 80048fe:	e7dd      	b.n	80048bc <__ssvfiscanf_r+0x1d0>
 8004900:	2300      	movs	r3, #0
 8004902:	9342      	str	r3, [sp, #264]	; 0x108
 8004904:	2303      	movs	r3, #3
 8004906:	e7de      	b.n	80048c6 <__ssvfiscanf_r+0x1da>
 8004908:	2308      	movs	r3, #8
 800490a:	9342      	str	r3, [sp, #264]	; 0x108
 800490c:	2304      	movs	r3, #4
 800490e:	e7da      	b.n	80048c6 <__ssvfiscanf_r+0x1da>
 8004910:	4629      	mov	r1, r5
 8004912:	4640      	mov	r0, r8
 8004914:	f000 fb48 	bl	8004fa8 <__sccl>
 8004918:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800491a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491e:	9341      	str	r3, [sp, #260]	; 0x104
 8004920:	4605      	mov	r5, r0
 8004922:	2301      	movs	r3, #1
 8004924:	e7cf      	b.n	80048c6 <__ssvfiscanf_r+0x1da>
 8004926:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800492c:	9341      	str	r3, [sp, #260]	; 0x104
 800492e:	2300      	movs	r3, #0
 8004930:	e7c9      	b.n	80048c6 <__ssvfiscanf_r+0x1da>
 8004932:	2302      	movs	r3, #2
 8004934:	e7c7      	b.n	80048c6 <__ssvfiscanf_r+0x1da>
 8004936:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004938:	06c3      	lsls	r3, r0, #27
 800493a:	f53f aefe 	bmi.w	800473a <__ssvfiscanf_r+0x4e>
 800493e:	9b00      	ldr	r3, [sp, #0]
 8004940:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004942:	1d19      	adds	r1, r3, #4
 8004944:	9100      	str	r1, [sp, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f010 0f01 	tst.w	r0, #1
 800494c:	bf14      	ite	ne
 800494e:	801a      	strhne	r2, [r3, #0]
 8004950:	601a      	streq	r2, [r3, #0]
 8004952:	e6f2      	b.n	800473a <__ssvfiscanf_r+0x4e>
 8004954:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004956:	4621      	mov	r1, r4
 8004958:	4630      	mov	r0, r6
 800495a:	4798      	blx	r3
 800495c:	2800      	cmp	r0, #0
 800495e:	d0b6      	beq.n	80048ce <__ssvfiscanf_r+0x1e2>
 8004960:	e79c      	b.n	800489c <__ssvfiscanf_r+0x1b0>
 8004962:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004964:	3201      	adds	r2, #1
 8004966:	9245      	str	r2, [sp, #276]	; 0x114
 8004968:	6862      	ldr	r2, [r4, #4]
 800496a:	3a01      	subs	r2, #1
 800496c:	2a00      	cmp	r2, #0
 800496e:	6062      	str	r2, [r4, #4]
 8004970:	dd02      	ble.n	8004978 <__ssvfiscanf_r+0x28c>
 8004972:	3301      	adds	r3, #1
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	e7ad      	b.n	80048d4 <__ssvfiscanf_r+0x1e8>
 8004978:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800497a:	4621      	mov	r1, r4
 800497c:	4630      	mov	r0, r6
 800497e:	4798      	blx	r3
 8004980:	2800      	cmp	r0, #0
 8004982:	d0a7      	beq.n	80048d4 <__ssvfiscanf_r+0x1e8>
 8004984:	e78a      	b.n	800489c <__ssvfiscanf_r+0x1b0>
 8004986:	2b04      	cmp	r3, #4
 8004988:	dc0e      	bgt.n	80049a8 <__ssvfiscanf_r+0x2bc>
 800498a:	466b      	mov	r3, sp
 800498c:	4622      	mov	r2, r4
 800498e:	a941      	add	r1, sp, #260	; 0x104
 8004990:	4630      	mov	r0, r6
 8004992:	f000 fa11 	bl	8004db8 <_scanf_i>
 8004996:	e7ab      	b.n	80048f0 <__ssvfiscanf_r+0x204>
 8004998:	08004639 	.word	0x08004639
 800499c:	080046b3 	.word	0x080046b3
 80049a0:	08005811 	.word	0x08005811
 80049a4:	08005917 	.word	0x08005917
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <__ssvfiscanf_r+0x2ec>)
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f43f aec5 	beq.w	800473a <__ssvfiscanf_r+0x4e>
 80049b0:	466b      	mov	r3, sp
 80049b2:	4622      	mov	r2, r4
 80049b4:	a941      	add	r1, sp, #260	; 0x104
 80049b6:	4630      	mov	r0, r6
 80049b8:	f3af 8000 	nop.w
 80049bc:	e798      	b.n	80048f0 <__ssvfiscanf_r+0x204>
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049c4:	bf18      	it	ne
 80049c6:	f04f 30ff 	movne.w	r0, #4294967295
 80049ca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80049ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80049d4:	e7f9      	b.n	80049ca <__ssvfiscanf_r+0x2de>
 80049d6:	bf00      	nop
 80049d8:	00000000 	.word	0x00000000

080049dc <_printf_common>:
 80049dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e0:	4616      	mov	r6, r2
 80049e2:	4699      	mov	r9, r3
 80049e4:	688a      	ldr	r2, [r1, #8]
 80049e6:	690b      	ldr	r3, [r1, #16]
 80049e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049ec:	4293      	cmp	r3, r2
 80049ee:	bfb8      	it	lt
 80049f0:	4613      	movlt	r3, r2
 80049f2:	6033      	str	r3, [r6, #0]
 80049f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049f8:	4607      	mov	r7, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	b10a      	cbz	r2, 8004a02 <_printf_common+0x26>
 80049fe:	3301      	adds	r3, #1
 8004a00:	6033      	str	r3, [r6, #0]
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	0699      	lsls	r1, r3, #26
 8004a06:	bf42      	ittt	mi
 8004a08:	6833      	ldrmi	r3, [r6, #0]
 8004a0a:	3302      	addmi	r3, #2
 8004a0c:	6033      	strmi	r3, [r6, #0]
 8004a0e:	6825      	ldr	r5, [r4, #0]
 8004a10:	f015 0506 	ands.w	r5, r5, #6
 8004a14:	d106      	bne.n	8004a24 <_printf_common+0x48>
 8004a16:	f104 0a19 	add.w	sl, r4, #25
 8004a1a:	68e3      	ldr	r3, [r4, #12]
 8004a1c:	6832      	ldr	r2, [r6, #0]
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	42ab      	cmp	r3, r5
 8004a22:	dc26      	bgt.n	8004a72 <_printf_common+0x96>
 8004a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a28:	1e13      	subs	r3, r2, #0
 8004a2a:	6822      	ldr	r2, [r4, #0]
 8004a2c:	bf18      	it	ne
 8004a2e:	2301      	movne	r3, #1
 8004a30:	0692      	lsls	r2, r2, #26
 8004a32:	d42b      	bmi.n	8004a8c <_printf_common+0xb0>
 8004a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	47c0      	blx	r8
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d01e      	beq.n	8004a80 <_printf_common+0xa4>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	68e5      	ldr	r5, [r4, #12]
 8004a46:	6832      	ldr	r2, [r6, #0]
 8004a48:	f003 0306 	and.w	r3, r3, #6
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	bf08      	it	eq
 8004a50:	1aad      	subeq	r5, r5, r2
 8004a52:	68a3      	ldr	r3, [r4, #8]
 8004a54:	6922      	ldr	r2, [r4, #16]
 8004a56:	bf0c      	ite	eq
 8004a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a5c:	2500      	movne	r5, #0
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	bfc4      	itt	gt
 8004a62:	1a9b      	subgt	r3, r3, r2
 8004a64:	18ed      	addgt	r5, r5, r3
 8004a66:	2600      	movs	r6, #0
 8004a68:	341a      	adds	r4, #26
 8004a6a:	42b5      	cmp	r5, r6
 8004a6c:	d11a      	bne.n	8004aa4 <_printf_common+0xc8>
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e008      	b.n	8004a84 <_printf_common+0xa8>
 8004a72:	2301      	movs	r3, #1
 8004a74:	4652      	mov	r2, sl
 8004a76:	4649      	mov	r1, r9
 8004a78:	4638      	mov	r0, r7
 8004a7a:	47c0      	blx	r8
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d103      	bne.n	8004a88 <_printf_common+0xac>
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a88:	3501      	adds	r5, #1
 8004a8a:	e7c6      	b.n	8004a1a <_printf_common+0x3e>
 8004a8c:	18e1      	adds	r1, r4, r3
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	2030      	movs	r0, #48	; 0x30
 8004a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a96:	4422      	add	r2, r4
 8004a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	e7c7      	b.n	8004a34 <_printf_common+0x58>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	4638      	mov	r0, r7
 8004aac:	47c0      	blx	r8
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d0e6      	beq.n	8004a80 <_printf_common+0xa4>
 8004ab2:	3601      	adds	r6, #1
 8004ab4:	e7d9      	b.n	8004a6a <_printf_common+0x8e>
	...

08004ab8 <_printf_i>:
 8004ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	7e0f      	ldrb	r7, [r1, #24]
 8004abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ac0:	2f78      	cmp	r7, #120	; 0x78
 8004ac2:	4691      	mov	r9, r2
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	469a      	mov	sl, r3
 8004aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ace:	d807      	bhi.n	8004ae0 <_printf_i+0x28>
 8004ad0:	2f62      	cmp	r7, #98	; 0x62
 8004ad2:	d80a      	bhi.n	8004aea <_printf_i+0x32>
 8004ad4:	2f00      	cmp	r7, #0
 8004ad6:	f000 80d8 	beq.w	8004c8a <_printf_i+0x1d2>
 8004ada:	2f58      	cmp	r7, #88	; 0x58
 8004adc:	f000 80a3 	beq.w	8004c26 <_printf_i+0x16e>
 8004ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ae8:	e03a      	b.n	8004b60 <_printf_i+0xa8>
 8004aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aee:	2b15      	cmp	r3, #21
 8004af0:	d8f6      	bhi.n	8004ae0 <_printf_i+0x28>
 8004af2:	a101      	add	r1, pc, #4	; (adr r1, 8004af8 <_printf_i+0x40>)
 8004af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004af8:	08004b51 	.word	0x08004b51
 8004afc:	08004b65 	.word	0x08004b65
 8004b00:	08004ae1 	.word	0x08004ae1
 8004b04:	08004ae1 	.word	0x08004ae1
 8004b08:	08004ae1 	.word	0x08004ae1
 8004b0c:	08004ae1 	.word	0x08004ae1
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004ae1 	.word	0x08004ae1
 8004b18:	08004ae1 	.word	0x08004ae1
 8004b1c:	08004ae1 	.word	0x08004ae1
 8004b20:	08004ae1 	.word	0x08004ae1
 8004b24:	08004c71 	.word	0x08004c71
 8004b28:	08004b95 	.word	0x08004b95
 8004b2c:	08004c53 	.word	0x08004c53
 8004b30:	08004ae1 	.word	0x08004ae1
 8004b34:	08004ae1 	.word	0x08004ae1
 8004b38:	08004c93 	.word	0x08004c93
 8004b3c:	08004ae1 	.word	0x08004ae1
 8004b40:	08004b95 	.word	0x08004b95
 8004b44:	08004ae1 	.word	0x08004ae1
 8004b48:	08004ae1 	.word	0x08004ae1
 8004b4c:	08004c5b 	.word	0x08004c5b
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	1d1a      	adds	r2, r3, #4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	602a      	str	r2, [r5, #0]
 8004b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0a3      	b.n	8004cac <_printf_i+0x1f4>
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	6829      	ldr	r1, [r5, #0]
 8004b68:	0606      	lsls	r6, r0, #24
 8004b6a:	f101 0304 	add.w	r3, r1, #4
 8004b6e:	d50a      	bpl.n	8004b86 <_printf_i+0xce>
 8004b70:	680e      	ldr	r6, [r1, #0]
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	2e00      	cmp	r6, #0
 8004b76:	da03      	bge.n	8004b80 <_printf_i+0xc8>
 8004b78:	232d      	movs	r3, #45	; 0x2d
 8004b7a:	4276      	negs	r6, r6
 8004b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b80:	485e      	ldr	r0, [pc, #376]	; (8004cfc <_printf_i+0x244>)
 8004b82:	230a      	movs	r3, #10
 8004b84:	e019      	b.n	8004bba <_printf_i+0x102>
 8004b86:	680e      	ldr	r6, [r1, #0]
 8004b88:	602b      	str	r3, [r5, #0]
 8004b8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b8e:	bf18      	it	ne
 8004b90:	b236      	sxthne	r6, r6
 8004b92:	e7ef      	b.n	8004b74 <_printf_i+0xbc>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	6820      	ldr	r0, [r4, #0]
 8004b98:	1d19      	adds	r1, r3, #4
 8004b9a:	6029      	str	r1, [r5, #0]
 8004b9c:	0601      	lsls	r1, r0, #24
 8004b9e:	d501      	bpl.n	8004ba4 <_printf_i+0xec>
 8004ba0:	681e      	ldr	r6, [r3, #0]
 8004ba2:	e002      	b.n	8004baa <_printf_i+0xf2>
 8004ba4:	0646      	lsls	r6, r0, #25
 8004ba6:	d5fb      	bpl.n	8004ba0 <_printf_i+0xe8>
 8004ba8:	881e      	ldrh	r6, [r3, #0]
 8004baa:	4854      	ldr	r0, [pc, #336]	; (8004cfc <_printf_i+0x244>)
 8004bac:	2f6f      	cmp	r7, #111	; 0x6f
 8004bae:	bf0c      	ite	eq
 8004bb0:	2308      	moveq	r3, #8
 8004bb2:	230a      	movne	r3, #10
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bba:	6865      	ldr	r5, [r4, #4]
 8004bbc:	60a5      	str	r5, [r4, #8]
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	bfa2      	ittt	ge
 8004bc2:	6821      	ldrge	r1, [r4, #0]
 8004bc4:	f021 0104 	bicge.w	r1, r1, #4
 8004bc8:	6021      	strge	r1, [r4, #0]
 8004bca:	b90e      	cbnz	r6, 8004bd0 <_printf_i+0x118>
 8004bcc:	2d00      	cmp	r5, #0
 8004bce:	d04d      	beq.n	8004c6c <_printf_i+0x1b4>
 8004bd0:	4615      	mov	r5, r2
 8004bd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bd6:	fb03 6711 	mls	r7, r3, r1, r6
 8004bda:	5dc7      	ldrb	r7, [r0, r7]
 8004bdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004be0:	4637      	mov	r7, r6
 8004be2:	42bb      	cmp	r3, r7
 8004be4:	460e      	mov	r6, r1
 8004be6:	d9f4      	bls.n	8004bd2 <_printf_i+0x11a>
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d10b      	bne.n	8004c04 <_printf_i+0x14c>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	07de      	lsls	r6, r3, #31
 8004bf0:	d508      	bpl.n	8004c04 <_printf_i+0x14c>
 8004bf2:	6923      	ldr	r3, [r4, #16]
 8004bf4:	6861      	ldr	r1, [r4, #4]
 8004bf6:	4299      	cmp	r1, r3
 8004bf8:	bfde      	ittt	le
 8004bfa:	2330      	movle	r3, #48	; 0x30
 8004bfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c04:	1b52      	subs	r2, r2, r5
 8004c06:	6122      	str	r2, [r4, #16]
 8004c08:	f8cd a000 	str.w	sl, [sp]
 8004c0c:	464b      	mov	r3, r9
 8004c0e:	aa03      	add	r2, sp, #12
 8004c10:	4621      	mov	r1, r4
 8004c12:	4640      	mov	r0, r8
 8004c14:	f7ff fee2 	bl	80049dc <_printf_common>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d14c      	bne.n	8004cb6 <_printf_i+0x1fe>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	b004      	add	sp, #16
 8004c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c26:	4835      	ldr	r0, [pc, #212]	; (8004cfc <_printf_i+0x244>)
 8004c28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c2c:	6829      	ldr	r1, [r5, #0]
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c34:	6029      	str	r1, [r5, #0]
 8004c36:	061d      	lsls	r5, r3, #24
 8004c38:	d514      	bpl.n	8004c64 <_printf_i+0x1ac>
 8004c3a:	07df      	lsls	r7, r3, #31
 8004c3c:	bf44      	itt	mi
 8004c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c42:	6023      	strmi	r3, [r4, #0]
 8004c44:	b91e      	cbnz	r6, 8004c4e <_printf_i+0x196>
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	f023 0320 	bic.w	r3, r3, #32
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	2310      	movs	r3, #16
 8004c50:	e7b0      	b.n	8004bb4 <_printf_i+0xfc>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	f043 0320 	orr.w	r3, r3, #32
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	2378      	movs	r3, #120	; 0x78
 8004c5c:	4828      	ldr	r0, [pc, #160]	; (8004d00 <_printf_i+0x248>)
 8004c5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c62:	e7e3      	b.n	8004c2c <_printf_i+0x174>
 8004c64:	0659      	lsls	r1, r3, #25
 8004c66:	bf48      	it	mi
 8004c68:	b2b6      	uxthmi	r6, r6
 8004c6a:	e7e6      	b.n	8004c3a <_printf_i+0x182>
 8004c6c:	4615      	mov	r5, r2
 8004c6e:	e7bb      	b.n	8004be8 <_printf_i+0x130>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	6826      	ldr	r6, [r4, #0]
 8004c74:	6961      	ldr	r1, [r4, #20]
 8004c76:	1d18      	adds	r0, r3, #4
 8004c78:	6028      	str	r0, [r5, #0]
 8004c7a:	0635      	lsls	r5, r6, #24
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	d501      	bpl.n	8004c84 <_printf_i+0x1cc>
 8004c80:	6019      	str	r1, [r3, #0]
 8004c82:	e002      	b.n	8004c8a <_printf_i+0x1d2>
 8004c84:	0670      	lsls	r0, r6, #25
 8004c86:	d5fb      	bpl.n	8004c80 <_printf_i+0x1c8>
 8004c88:	8019      	strh	r1, [r3, #0]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	6123      	str	r3, [r4, #16]
 8004c8e:	4615      	mov	r5, r2
 8004c90:	e7ba      	b.n	8004c08 <_printf_i+0x150>
 8004c92:	682b      	ldr	r3, [r5, #0]
 8004c94:	1d1a      	adds	r2, r3, #4
 8004c96:	602a      	str	r2, [r5, #0]
 8004c98:	681d      	ldr	r5, [r3, #0]
 8004c9a:	6862      	ldr	r2, [r4, #4]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f7fb fab6 	bl	8000210 <memchr>
 8004ca4:	b108      	cbz	r0, 8004caa <_printf_i+0x1f2>
 8004ca6:	1b40      	subs	r0, r0, r5
 8004ca8:	6060      	str	r0, [r4, #4]
 8004caa:	6863      	ldr	r3, [r4, #4]
 8004cac:	6123      	str	r3, [r4, #16]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb4:	e7a8      	b.n	8004c08 <_printf_i+0x150>
 8004cb6:	6923      	ldr	r3, [r4, #16]
 8004cb8:	462a      	mov	r2, r5
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	47d0      	blx	sl
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d0ab      	beq.n	8004c1c <_printf_i+0x164>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	079b      	lsls	r3, r3, #30
 8004cc8:	d413      	bmi.n	8004cf2 <_printf_i+0x23a>
 8004cca:	68e0      	ldr	r0, [r4, #12]
 8004ccc:	9b03      	ldr	r3, [sp, #12]
 8004cce:	4298      	cmp	r0, r3
 8004cd0:	bfb8      	it	lt
 8004cd2:	4618      	movlt	r0, r3
 8004cd4:	e7a4      	b.n	8004c20 <_printf_i+0x168>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4632      	mov	r2, r6
 8004cda:	4649      	mov	r1, r9
 8004cdc:	4640      	mov	r0, r8
 8004cde:	47d0      	blx	sl
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d09b      	beq.n	8004c1c <_printf_i+0x164>
 8004ce4:	3501      	adds	r5, #1
 8004ce6:	68e3      	ldr	r3, [r4, #12]
 8004ce8:	9903      	ldr	r1, [sp, #12]
 8004cea:	1a5b      	subs	r3, r3, r1
 8004cec:	42ab      	cmp	r3, r5
 8004cee:	dcf2      	bgt.n	8004cd6 <_printf_i+0x21e>
 8004cf0:	e7eb      	b.n	8004cca <_printf_i+0x212>
 8004cf2:	2500      	movs	r5, #0
 8004cf4:	f104 0619 	add.w	r6, r4, #25
 8004cf8:	e7f5      	b.n	8004ce6 <_printf_i+0x22e>
 8004cfa:	bf00      	nop
 8004cfc:	08005922 	.word	0x08005922
 8004d00:	08005933 	.word	0x08005933

08004d04 <_scanf_chars>:
 8004d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d08:	4615      	mov	r5, r2
 8004d0a:	688a      	ldr	r2, [r1, #8]
 8004d0c:	4680      	mov	r8, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	b932      	cbnz	r2, 8004d20 <_scanf_chars+0x1c>
 8004d12:	698a      	ldr	r2, [r1, #24]
 8004d14:	2a00      	cmp	r2, #0
 8004d16:	bf0c      	ite	eq
 8004d18:	2201      	moveq	r2, #1
 8004d1a:	f04f 32ff 	movne.w	r2, #4294967295
 8004d1e:	608a      	str	r2, [r1, #8]
 8004d20:	6822      	ldr	r2, [r4, #0]
 8004d22:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004db4 <_scanf_chars+0xb0>
 8004d26:	06d1      	lsls	r1, r2, #27
 8004d28:	bf5f      	itttt	pl
 8004d2a:	681a      	ldrpl	r2, [r3, #0]
 8004d2c:	1d11      	addpl	r1, r2, #4
 8004d2e:	6019      	strpl	r1, [r3, #0]
 8004d30:	6816      	ldrpl	r6, [r2, #0]
 8004d32:	2700      	movs	r7, #0
 8004d34:	69a0      	ldr	r0, [r4, #24]
 8004d36:	b188      	cbz	r0, 8004d5c <_scanf_chars+0x58>
 8004d38:	2801      	cmp	r0, #1
 8004d3a:	d107      	bne.n	8004d4c <_scanf_chars+0x48>
 8004d3c:	682a      	ldr	r2, [r5, #0]
 8004d3e:	7811      	ldrb	r1, [r2, #0]
 8004d40:	6962      	ldr	r2, [r4, #20]
 8004d42:	5c52      	ldrb	r2, [r2, r1]
 8004d44:	b952      	cbnz	r2, 8004d5c <_scanf_chars+0x58>
 8004d46:	2f00      	cmp	r7, #0
 8004d48:	d031      	beq.n	8004dae <_scanf_chars+0xaa>
 8004d4a:	e022      	b.n	8004d92 <_scanf_chars+0x8e>
 8004d4c:	2802      	cmp	r0, #2
 8004d4e:	d120      	bne.n	8004d92 <_scanf_chars+0x8e>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004d58:	071b      	lsls	r3, r3, #28
 8004d5a:	d41a      	bmi.n	8004d92 <_scanf_chars+0x8e>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	06da      	lsls	r2, r3, #27
 8004d60:	bf5e      	ittt	pl
 8004d62:	682b      	ldrpl	r3, [r5, #0]
 8004d64:	781b      	ldrbpl	r3, [r3, #0]
 8004d66:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004d6a:	682a      	ldr	r2, [r5, #0]
 8004d6c:	686b      	ldr	r3, [r5, #4]
 8004d6e:	3201      	adds	r2, #1
 8004d70:	602a      	str	r2, [r5, #0]
 8004d72:	68a2      	ldr	r2, [r4, #8]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	3a01      	subs	r2, #1
 8004d78:	606b      	str	r3, [r5, #4]
 8004d7a:	3701      	adds	r7, #1
 8004d7c:	60a2      	str	r2, [r4, #8]
 8004d7e:	b142      	cbz	r2, 8004d92 <_scanf_chars+0x8e>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dcd7      	bgt.n	8004d34 <_scanf_chars+0x30>
 8004d84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	4798      	blx	r3
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d0d0      	beq.n	8004d34 <_scanf_chars+0x30>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	f013 0310 	ands.w	r3, r3, #16
 8004d98:	d105      	bne.n	8004da6 <_scanf_chars+0xa2>
 8004d9a:	68e2      	ldr	r2, [r4, #12]
 8004d9c:	3201      	adds	r2, #1
 8004d9e:	60e2      	str	r2, [r4, #12]
 8004da0:	69a2      	ldr	r2, [r4, #24]
 8004da2:	b102      	cbz	r2, 8004da6 <_scanf_chars+0xa2>
 8004da4:	7033      	strb	r3, [r6, #0]
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	443b      	add	r3, r7
 8004daa:	6123      	str	r3, [r4, #16]
 8004dac:	2000      	movs	r0, #0
 8004dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db2:	bf00      	nop
 8004db4:	08005811 	.word	0x08005811

08004db8 <_scanf_i>:
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	4698      	mov	r8, r3
 8004dbe:	4b76      	ldr	r3, [pc, #472]	; (8004f98 <_scanf_i+0x1e0>)
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	4682      	mov	sl, r0
 8004dc4:	4616      	mov	r6, r2
 8004dc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	ab03      	add	r3, sp, #12
 8004dce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004dd2:	4b72      	ldr	r3, [pc, #456]	; (8004f9c <_scanf_i+0x1e4>)
 8004dd4:	69a1      	ldr	r1, [r4, #24]
 8004dd6:	4a72      	ldr	r2, [pc, #456]	; (8004fa0 <_scanf_i+0x1e8>)
 8004dd8:	2903      	cmp	r1, #3
 8004dda:	bf18      	it	ne
 8004ddc:	461a      	movne	r2, r3
 8004dde:	68a3      	ldr	r3, [r4, #8]
 8004de0:	9201      	str	r2, [sp, #4]
 8004de2:	1e5a      	subs	r2, r3, #1
 8004de4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004de8:	bf88      	it	hi
 8004dea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004dee:	4627      	mov	r7, r4
 8004df0:	bf82      	ittt	hi
 8004df2:	eb03 0905 	addhi.w	r9, r3, r5
 8004df6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004dfa:	60a3      	strhi	r3, [r4, #8]
 8004dfc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004e00:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004e04:	bf98      	it	ls
 8004e06:	f04f 0900 	movls.w	r9, #0
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	463d      	mov	r5, r7
 8004e0e:	f04f 0b00 	mov.w	fp, #0
 8004e12:	6831      	ldr	r1, [r6, #0]
 8004e14:	ab03      	add	r3, sp, #12
 8004e16:	7809      	ldrb	r1, [r1, #0]
 8004e18:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f7fb f9f7 	bl	8000210 <memchr>
 8004e22:	b328      	cbz	r0, 8004e70 <_scanf_i+0xb8>
 8004e24:	f1bb 0f01 	cmp.w	fp, #1
 8004e28:	d159      	bne.n	8004ede <_scanf_i+0x126>
 8004e2a:	6862      	ldr	r2, [r4, #4]
 8004e2c:	b92a      	cbnz	r2, 8004e3a <_scanf_i+0x82>
 8004e2e:	6822      	ldr	r2, [r4, #0]
 8004e30:	2308      	movs	r3, #8
 8004e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e36:	6063      	str	r3, [r4, #4]
 8004e38:	6022      	str	r2, [r4, #0]
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004e40:	6022      	str	r2, [r4, #0]
 8004e42:	68a2      	ldr	r2, [r4, #8]
 8004e44:	1e51      	subs	r1, r2, #1
 8004e46:	60a1      	str	r1, [r4, #8]
 8004e48:	b192      	cbz	r2, 8004e70 <_scanf_i+0xb8>
 8004e4a:	6832      	ldr	r2, [r6, #0]
 8004e4c:	1c51      	adds	r1, r2, #1
 8004e4e:	6031      	str	r1, [r6, #0]
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	f805 2b01 	strb.w	r2, [r5], #1
 8004e56:	6872      	ldr	r2, [r6, #4]
 8004e58:	3a01      	subs	r2, #1
 8004e5a:	2a00      	cmp	r2, #0
 8004e5c:	6072      	str	r2, [r6, #4]
 8004e5e:	dc07      	bgt.n	8004e70 <_scanf_i+0xb8>
 8004e60:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004e64:	4631      	mov	r1, r6
 8004e66:	4650      	mov	r0, sl
 8004e68:	4790      	blx	r2
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	f040 8085 	bne.w	8004f7a <_scanf_i+0x1c2>
 8004e70:	f10b 0b01 	add.w	fp, fp, #1
 8004e74:	f1bb 0f03 	cmp.w	fp, #3
 8004e78:	d1cb      	bne.n	8004e12 <_scanf_i+0x5a>
 8004e7a:	6863      	ldr	r3, [r4, #4]
 8004e7c:	b90b      	cbnz	r3, 8004e82 <_scanf_i+0xca>
 8004e7e:	230a      	movs	r3, #10
 8004e80:	6063      	str	r3, [r4, #4]
 8004e82:	6863      	ldr	r3, [r4, #4]
 8004e84:	4947      	ldr	r1, [pc, #284]	; (8004fa4 <_scanf_i+0x1ec>)
 8004e86:	6960      	ldr	r0, [r4, #20]
 8004e88:	1ac9      	subs	r1, r1, r3
 8004e8a:	f000 f88d 	bl	8004fa8 <__sccl>
 8004e8e:	f04f 0b00 	mov.w	fp, #0
 8004e92:	68a3      	ldr	r3, [r4, #8]
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d03d      	beq.n	8004f16 <_scanf_i+0x15e>
 8004e9a:	6831      	ldr	r1, [r6, #0]
 8004e9c:	6960      	ldr	r0, [r4, #20]
 8004e9e:	f891 c000 	ldrb.w	ip, [r1]
 8004ea2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d035      	beq.n	8004f16 <_scanf_i+0x15e>
 8004eaa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004eae:	d124      	bne.n	8004efa <_scanf_i+0x142>
 8004eb0:	0510      	lsls	r0, r2, #20
 8004eb2:	d522      	bpl.n	8004efa <_scanf_i+0x142>
 8004eb4:	f10b 0b01 	add.w	fp, fp, #1
 8004eb8:	f1b9 0f00 	cmp.w	r9, #0
 8004ebc:	d003      	beq.n	8004ec6 <_scanf_i+0x10e>
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	f109 39ff 	add.w	r9, r9, #4294967295
 8004ec4:	60a3      	str	r3, [r4, #8]
 8004ec6:	6873      	ldr	r3, [r6, #4]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	6073      	str	r3, [r6, #4]
 8004ece:	dd1b      	ble.n	8004f08 <_scanf_i+0x150>
 8004ed0:	6833      	ldr	r3, [r6, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	6033      	str	r3, [r6, #0]
 8004ed6:	68a3      	ldr	r3, [r4, #8]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	60a3      	str	r3, [r4, #8]
 8004edc:	e7d9      	b.n	8004e92 <_scanf_i+0xda>
 8004ede:	f1bb 0f02 	cmp.w	fp, #2
 8004ee2:	d1ae      	bne.n	8004e42 <_scanf_i+0x8a>
 8004ee4:	6822      	ldr	r2, [r4, #0]
 8004ee6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004eea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004eee:	d1bf      	bne.n	8004e70 <_scanf_i+0xb8>
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	6063      	str	r3, [r4, #4]
 8004ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ef8:	e7a2      	b.n	8004e40 <_scanf_i+0x88>
 8004efa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004efe:	6022      	str	r2, [r4, #0]
 8004f00:	780b      	ldrb	r3, [r1, #0]
 8004f02:	f805 3b01 	strb.w	r3, [r5], #1
 8004f06:	e7de      	b.n	8004ec6 <_scanf_i+0x10e>
 8004f08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4650      	mov	r0, sl
 8004f10:	4798      	blx	r3
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d0df      	beq.n	8004ed6 <_scanf_i+0x11e>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	05db      	lsls	r3, r3, #23
 8004f1a:	d50d      	bpl.n	8004f38 <_scanf_i+0x180>
 8004f1c:	42bd      	cmp	r5, r7
 8004f1e:	d909      	bls.n	8004f34 <_scanf_i+0x17c>
 8004f20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004f24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f28:	4632      	mov	r2, r6
 8004f2a:	4650      	mov	r0, sl
 8004f2c:	4798      	blx	r3
 8004f2e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004f32:	464d      	mov	r5, r9
 8004f34:	42bd      	cmp	r5, r7
 8004f36:	d02d      	beq.n	8004f94 <_scanf_i+0x1dc>
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	f012 0210 	ands.w	r2, r2, #16
 8004f3e:	d113      	bne.n	8004f68 <_scanf_i+0x1b0>
 8004f40:	702a      	strb	r2, [r5, #0]
 8004f42:	6863      	ldr	r3, [r4, #4]
 8004f44:	9e01      	ldr	r6, [sp, #4]
 8004f46:	4639      	mov	r1, r7
 8004f48:	4650      	mov	r0, sl
 8004f4a:	47b0      	blx	r6
 8004f4c:	6821      	ldr	r1, [r4, #0]
 8004f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f52:	f011 0f20 	tst.w	r1, #32
 8004f56:	d013      	beq.n	8004f80 <_scanf_i+0x1c8>
 8004f58:	1d1a      	adds	r2, r3, #4
 8004f5a:	f8c8 2000 	str.w	r2, [r8]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6018      	str	r0, [r3, #0]
 8004f62:	68e3      	ldr	r3, [r4, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60e3      	str	r3, [r4, #12]
 8004f68:	1bed      	subs	r5, r5, r7
 8004f6a:	44ab      	add	fp, r5
 8004f6c:	6925      	ldr	r5, [r4, #16]
 8004f6e:	445d      	add	r5, fp
 8004f70:	6125      	str	r5, [r4, #16]
 8004f72:	2000      	movs	r0, #0
 8004f74:	b007      	add	sp, #28
 8004f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7a:	f04f 0b00 	mov.w	fp, #0
 8004f7e:	e7ca      	b.n	8004f16 <_scanf_i+0x15e>
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	f8c8 2000 	str.w	r2, [r8]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f011 0f01 	tst.w	r1, #1
 8004f8c:	bf14      	ite	ne
 8004f8e:	8018      	strhne	r0, [r3, #0]
 8004f90:	6018      	streq	r0, [r3, #0]
 8004f92:	e7e6      	b.n	8004f62 <_scanf_i+0x1aa>
 8004f94:	2001      	movs	r0, #1
 8004f96:	e7ed      	b.n	8004f74 <_scanf_i+0x1bc>
 8004f98:	08005664 	.word	0x08005664
 8004f9c:	08005205 	.word	0x08005205
 8004fa0:	0800511d 	.word	0x0800511d
 8004fa4:	0800595d 	.word	0x0800595d

08004fa8 <__sccl>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	780b      	ldrb	r3, [r1, #0]
 8004fac:	4604      	mov	r4, r0
 8004fae:	2b5e      	cmp	r3, #94	; 0x5e
 8004fb0:	bf0b      	itete	eq
 8004fb2:	784b      	ldrbeq	r3, [r1, #1]
 8004fb4:	1c48      	addne	r0, r1, #1
 8004fb6:	1c88      	addeq	r0, r1, #2
 8004fb8:	2200      	movne	r2, #0
 8004fba:	bf08      	it	eq
 8004fbc:	2201      	moveq	r2, #1
 8004fbe:	1e61      	subs	r1, r4, #1
 8004fc0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004fc4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004fc8:	42a9      	cmp	r1, r5
 8004fca:	d1fb      	bne.n	8004fc4 <__sccl+0x1c>
 8004fcc:	b90b      	cbnz	r3, 8004fd2 <__sccl+0x2a>
 8004fce:	3801      	subs	r0, #1
 8004fd0:	bd70      	pop	{r4, r5, r6, pc}
 8004fd2:	f082 0201 	eor.w	r2, r2, #1
 8004fd6:	54e2      	strb	r2, [r4, r3]
 8004fd8:	4605      	mov	r5, r0
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004fe0:	292d      	cmp	r1, #45	; 0x2d
 8004fe2:	d006      	beq.n	8004ff2 <__sccl+0x4a>
 8004fe4:	295d      	cmp	r1, #93	; 0x5d
 8004fe6:	d0f3      	beq.n	8004fd0 <__sccl+0x28>
 8004fe8:	b909      	cbnz	r1, 8004fee <__sccl+0x46>
 8004fea:	4628      	mov	r0, r5
 8004fec:	e7f0      	b.n	8004fd0 <__sccl+0x28>
 8004fee:	460b      	mov	r3, r1
 8004ff0:	e7f1      	b.n	8004fd6 <__sccl+0x2e>
 8004ff2:	786e      	ldrb	r6, [r5, #1]
 8004ff4:	2e5d      	cmp	r6, #93	; 0x5d
 8004ff6:	d0fa      	beq.n	8004fee <__sccl+0x46>
 8004ff8:	42b3      	cmp	r3, r6
 8004ffa:	dcf8      	bgt.n	8004fee <__sccl+0x46>
 8004ffc:	3502      	adds	r5, #2
 8004ffe:	4619      	mov	r1, r3
 8005000:	3101      	adds	r1, #1
 8005002:	428e      	cmp	r6, r1
 8005004:	5462      	strb	r2, [r4, r1]
 8005006:	dcfb      	bgt.n	8005000 <__sccl+0x58>
 8005008:	1af1      	subs	r1, r6, r3
 800500a:	3901      	subs	r1, #1
 800500c:	1c58      	adds	r0, r3, #1
 800500e:	42b3      	cmp	r3, r6
 8005010:	bfa8      	it	ge
 8005012:	2100      	movge	r1, #0
 8005014:	1843      	adds	r3, r0, r1
 8005016:	e7e0      	b.n	8004fda <__sccl+0x32>

08005018 <_strtol_l.constprop.0>:
 8005018:	2b01      	cmp	r3, #1
 800501a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800501e:	d001      	beq.n	8005024 <_strtol_l.constprop.0+0xc>
 8005020:	2b24      	cmp	r3, #36	; 0x24
 8005022:	d906      	bls.n	8005032 <_strtol_l.constprop.0+0x1a>
 8005024:	f7ff f924 	bl	8004270 <__errno>
 8005028:	2316      	movs	r3, #22
 800502a:	6003      	str	r3, [r0, #0]
 800502c:	2000      	movs	r0, #0
 800502e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005032:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005118 <_strtol_l.constprop.0+0x100>
 8005036:	460d      	mov	r5, r1
 8005038:	462e      	mov	r6, r5
 800503a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800503e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005042:	f017 0708 	ands.w	r7, r7, #8
 8005046:	d1f7      	bne.n	8005038 <_strtol_l.constprop.0+0x20>
 8005048:	2c2d      	cmp	r4, #45	; 0x2d
 800504a:	d132      	bne.n	80050b2 <_strtol_l.constprop.0+0x9a>
 800504c:	782c      	ldrb	r4, [r5, #0]
 800504e:	2701      	movs	r7, #1
 8005050:	1cb5      	adds	r5, r6, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d05b      	beq.n	800510e <_strtol_l.constprop.0+0xf6>
 8005056:	2b10      	cmp	r3, #16
 8005058:	d109      	bne.n	800506e <_strtol_l.constprop.0+0x56>
 800505a:	2c30      	cmp	r4, #48	; 0x30
 800505c:	d107      	bne.n	800506e <_strtol_l.constprop.0+0x56>
 800505e:	782c      	ldrb	r4, [r5, #0]
 8005060:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005064:	2c58      	cmp	r4, #88	; 0x58
 8005066:	d14d      	bne.n	8005104 <_strtol_l.constprop.0+0xec>
 8005068:	786c      	ldrb	r4, [r5, #1]
 800506a:	2310      	movs	r3, #16
 800506c:	3502      	adds	r5, #2
 800506e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005072:	f108 38ff 	add.w	r8, r8, #4294967295
 8005076:	f04f 0c00 	mov.w	ip, #0
 800507a:	fbb8 f9f3 	udiv	r9, r8, r3
 800507e:	4666      	mov	r6, ip
 8005080:	fb03 8a19 	mls	sl, r3, r9, r8
 8005084:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005088:	f1be 0f09 	cmp.w	lr, #9
 800508c:	d816      	bhi.n	80050bc <_strtol_l.constprop.0+0xa4>
 800508e:	4674      	mov	r4, lr
 8005090:	42a3      	cmp	r3, r4
 8005092:	dd24      	ble.n	80050de <_strtol_l.constprop.0+0xc6>
 8005094:	f1bc 0f00 	cmp.w	ip, #0
 8005098:	db1e      	blt.n	80050d8 <_strtol_l.constprop.0+0xc0>
 800509a:	45b1      	cmp	r9, r6
 800509c:	d31c      	bcc.n	80050d8 <_strtol_l.constprop.0+0xc0>
 800509e:	d101      	bne.n	80050a4 <_strtol_l.constprop.0+0x8c>
 80050a0:	45a2      	cmp	sl, r4
 80050a2:	db19      	blt.n	80050d8 <_strtol_l.constprop.0+0xc0>
 80050a4:	fb06 4603 	mla	r6, r6, r3, r4
 80050a8:	f04f 0c01 	mov.w	ip, #1
 80050ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050b0:	e7e8      	b.n	8005084 <_strtol_l.constprop.0+0x6c>
 80050b2:	2c2b      	cmp	r4, #43	; 0x2b
 80050b4:	bf04      	itt	eq
 80050b6:	782c      	ldrbeq	r4, [r5, #0]
 80050b8:	1cb5      	addeq	r5, r6, #2
 80050ba:	e7ca      	b.n	8005052 <_strtol_l.constprop.0+0x3a>
 80050bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80050c0:	f1be 0f19 	cmp.w	lr, #25
 80050c4:	d801      	bhi.n	80050ca <_strtol_l.constprop.0+0xb2>
 80050c6:	3c37      	subs	r4, #55	; 0x37
 80050c8:	e7e2      	b.n	8005090 <_strtol_l.constprop.0+0x78>
 80050ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80050ce:	f1be 0f19 	cmp.w	lr, #25
 80050d2:	d804      	bhi.n	80050de <_strtol_l.constprop.0+0xc6>
 80050d4:	3c57      	subs	r4, #87	; 0x57
 80050d6:	e7db      	b.n	8005090 <_strtol_l.constprop.0+0x78>
 80050d8:	f04f 3cff 	mov.w	ip, #4294967295
 80050dc:	e7e6      	b.n	80050ac <_strtol_l.constprop.0+0x94>
 80050de:	f1bc 0f00 	cmp.w	ip, #0
 80050e2:	da05      	bge.n	80050f0 <_strtol_l.constprop.0+0xd8>
 80050e4:	2322      	movs	r3, #34	; 0x22
 80050e6:	6003      	str	r3, [r0, #0]
 80050e8:	4646      	mov	r6, r8
 80050ea:	b942      	cbnz	r2, 80050fe <_strtol_l.constprop.0+0xe6>
 80050ec:	4630      	mov	r0, r6
 80050ee:	e79e      	b.n	800502e <_strtol_l.constprop.0+0x16>
 80050f0:	b107      	cbz	r7, 80050f4 <_strtol_l.constprop.0+0xdc>
 80050f2:	4276      	negs	r6, r6
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	d0f9      	beq.n	80050ec <_strtol_l.constprop.0+0xd4>
 80050f8:	f1bc 0f00 	cmp.w	ip, #0
 80050fc:	d000      	beq.n	8005100 <_strtol_l.constprop.0+0xe8>
 80050fe:	1e69      	subs	r1, r5, #1
 8005100:	6011      	str	r1, [r2, #0]
 8005102:	e7f3      	b.n	80050ec <_strtol_l.constprop.0+0xd4>
 8005104:	2430      	movs	r4, #48	; 0x30
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1b1      	bne.n	800506e <_strtol_l.constprop.0+0x56>
 800510a:	2308      	movs	r3, #8
 800510c:	e7af      	b.n	800506e <_strtol_l.constprop.0+0x56>
 800510e:	2c30      	cmp	r4, #48	; 0x30
 8005110:	d0a5      	beq.n	800505e <_strtol_l.constprop.0+0x46>
 8005112:	230a      	movs	r3, #10
 8005114:	e7ab      	b.n	800506e <_strtol_l.constprop.0+0x56>
 8005116:	bf00      	nop
 8005118:	08005811 	.word	0x08005811

0800511c <_strtol_r>:
 800511c:	f7ff bf7c 	b.w	8005018 <_strtol_l.constprop.0>

08005120 <_strtoul_l.constprop.0>:
 8005120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005124:	4f36      	ldr	r7, [pc, #216]	; (8005200 <_strtoul_l.constprop.0+0xe0>)
 8005126:	4686      	mov	lr, r0
 8005128:	460d      	mov	r5, r1
 800512a:	4628      	mov	r0, r5
 800512c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005130:	5de6      	ldrb	r6, [r4, r7]
 8005132:	f016 0608 	ands.w	r6, r6, #8
 8005136:	d1f8      	bne.n	800512a <_strtoul_l.constprop.0+0xa>
 8005138:	2c2d      	cmp	r4, #45	; 0x2d
 800513a:	d12f      	bne.n	800519c <_strtoul_l.constprop.0+0x7c>
 800513c:	782c      	ldrb	r4, [r5, #0]
 800513e:	2601      	movs	r6, #1
 8005140:	1c85      	adds	r5, r0, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d057      	beq.n	80051f6 <_strtoul_l.constprop.0+0xd6>
 8005146:	2b10      	cmp	r3, #16
 8005148:	d109      	bne.n	800515e <_strtoul_l.constprop.0+0x3e>
 800514a:	2c30      	cmp	r4, #48	; 0x30
 800514c:	d107      	bne.n	800515e <_strtoul_l.constprop.0+0x3e>
 800514e:	7828      	ldrb	r0, [r5, #0]
 8005150:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005154:	2858      	cmp	r0, #88	; 0x58
 8005156:	d149      	bne.n	80051ec <_strtoul_l.constprop.0+0xcc>
 8005158:	786c      	ldrb	r4, [r5, #1]
 800515a:	2310      	movs	r3, #16
 800515c:	3502      	adds	r5, #2
 800515e:	f04f 38ff 	mov.w	r8, #4294967295
 8005162:	2700      	movs	r7, #0
 8005164:	fbb8 f8f3 	udiv	r8, r8, r3
 8005168:	fb03 f908 	mul.w	r9, r3, r8
 800516c:	ea6f 0909 	mvn.w	r9, r9
 8005170:	4638      	mov	r0, r7
 8005172:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005176:	f1bc 0f09 	cmp.w	ip, #9
 800517a:	d814      	bhi.n	80051a6 <_strtoul_l.constprop.0+0x86>
 800517c:	4664      	mov	r4, ip
 800517e:	42a3      	cmp	r3, r4
 8005180:	dd22      	ble.n	80051c8 <_strtoul_l.constprop.0+0xa8>
 8005182:	2f00      	cmp	r7, #0
 8005184:	db1d      	blt.n	80051c2 <_strtoul_l.constprop.0+0xa2>
 8005186:	4580      	cmp	r8, r0
 8005188:	d31b      	bcc.n	80051c2 <_strtoul_l.constprop.0+0xa2>
 800518a:	d101      	bne.n	8005190 <_strtoul_l.constprop.0+0x70>
 800518c:	45a1      	cmp	r9, r4
 800518e:	db18      	blt.n	80051c2 <_strtoul_l.constprop.0+0xa2>
 8005190:	fb00 4003 	mla	r0, r0, r3, r4
 8005194:	2701      	movs	r7, #1
 8005196:	f815 4b01 	ldrb.w	r4, [r5], #1
 800519a:	e7ea      	b.n	8005172 <_strtoul_l.constprop.0+0x52>
 800519c:	2c2b      	cmp	r4, #43	; 0x2b
 800519e:	bf04      	itt	eq
 80051a0:	782c      	ldrbeq	r4, [r5, #0]
 80051a2:	1c85      	addeq	r5, r0, #2
 80051a4:	e7cd      	b.n	8005142 <_strtoul_l.constprop.0+0x22>
 80051a6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80051aa:	f1bc 0f19 	cmp.w	ip, #25
 80051ae:	d801      	bhi.n	80051b4 <_strtoul_l.constprop.0+0x94>
 80051b0:	3c37      	subs	r4, #55	; 0x37
 80051b2:	e7e4      	b.n	800517e <_strtoul_l.constprop.0+0x5e>
 80051b4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80051b8:	f1bc 0f19 	cmp.w	ip, #25
 80051bc:	d804      	bhi.n	80051c8 <_strtoul_l.constprop.0+0xa8>
 80051be:	3c57      	subs	r4, #87	; 0x57
 80051c0:	e7dd      	b.n	800517e <_strtoul_l.constprop.0+0x5e>
 80051c2:	f04f 37ff 	mov.w	r7, #4294967295
 80051c6:	e7e6      	b.n	8005196 <_strtoul_l.constprop.0+0x76>
 80051c8:	2f00      	cmp	r7, #0
 80051ca:	da07      	bge.n	80051dc <_strtoul_l.constprop.0+0xbc>
 80051cc:	2322      	movs	r3, #34	; 0x22
 80051ce:	f8ce 3000 	str.w	r3, [lr]
 80051d2:	f04f 30ff 	mov.w	r0, #4294967295
 80051d6:	b932      	cbnz	r2, 80051e6 <_strtoul_l.constprop.0+0xc6>
 80051d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051dc:	b106      	cbz	r6, 80051e0 <_strtoul_l.constprop.0+0xc0>
 80051de:	4240      	negs	r0, r0
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d0f9      	beq.n	80051d8 <_strtoul_l.constprop.0+0xb8>
 80051e4:	b107      	cbz	r7, 80051e8 <_strtoul_l.constprop.0+0xc8>
 80051e6:	1e69      	subs	r1, r5, #1
 80051e8:	6011      	str	r1, [r2, #0]
 80051ea:	e7f5      	b.n	80051d8 <_strtoul_l.constprop.0+0xb8>
 80051ec:	2430      	movs	r4, #48	; 0x30
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1b5      	bne.n	800515e <_strtoul_l.constprop.0+0x3e>
 80051f2:	2308      	movs	r3, #8
 80051f4:	e7b3      	b.n	800515e <_strtoul_l.constprop.0+0x3e>
 80051f6:	2c30      	cmp	r4, #48	; 0x30
 80051f8:	d0a9      	beq.n	800514e <_strtoul_l.constprop.0+0x2e>
 80051fa:	230a      	movs	r3, #10
 80051fc:	e7af      	b.n	800515e <_strtoul_l.constprop.0+0x3e>
 80051fe:	bf00      	nop
 8005200:	08005811 	.word	0x08005811

08005204 <_strtoul_r>:
 8005204:	f7ff bf8c 	b.w	8005120 <_strtoul_l.constprop.0>

08005208 <__submore>:
 8005208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800520c:	460c      	mov	r4, r1
 800520e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005214:	4299      	cmp	r1, r3
 8005216:	d11d      	bne.n	8005254 <__submore+0x4c>
 8005218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800521c:	f000 f8c4 	bl	80053a8 <_malloc_r>
 8005220:	b918      	cbnz	r0, 800522a <__submore+0x22>
 8005222:	f04f 30ff 	mov.w	r0, #4294967295
 8005226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800522a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800522e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005230:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005234:	6360      	str	r0, [r4, #52]	; 0x34
 8005236:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800523a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800523e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005242:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005246:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800524a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800524e:	6020      	str	r0, [r4, #0]
 8005250:	2000      	movs	r0, #0
 8005252:	e7e8      	b.n	8005226 <__submore+0x1e>
 8005254:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005256:	0077      	lsls	r7, r6, #1
 8005258:	463a      	mov	r2, r7
 800525a:	f000 f919 	bl	8005490 <_realloc_r>
 800525e:	4605      	mov	r5, r0
 8005260:	2800      	cmp	r0, #0
 8005262:	d0de      	beq.n	8005222 <__submore+0x1a>
 8005264:	eb00 0806 	add.w	r8, r0, r6
 8005268:	4601      	mov	r1, r0
 800526a:	4632      	mov	r2, r6
 800526c:	4640      	mov	r0, r8
 800526e:	f000 f807 	bl	8005280 <memcpy>
 8005272:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005276:	f8c4 8000 	str.w	r8, [r4]
 800527a:	e7e9      	b.n	8005250 <__submore+0x48>

0800527c <__retarget_lock_acquire_recursive>:
 800527c:	4770      	bx	lr

0800527e <__retarget_lock_release_recursive>:
 800527e:	4770      	bx	lr

08005280 <memcpy>:
 8005280:	440a      	add	r2, r1
 8005282:	4291      	cmp	r1, r2
 8005284:	f100 33ff 	add.w	r3, r0, #4294967295
 8005288:	d100      	bne.n	800528c <memcpy+0xc>
 800528a:	4770      	bx	lr
 800528c:	b510      	push	{r4, lr}
 800528e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005296:	4291      	cmp	r1, r2
 8005298:	d1f9      	bne.n	800528e <memcpy+0xe>
 800529a:	bd10      	pop	{r4, pc}

0800529c <memmove>:
 800529c:	4288      	cmp	r0, r1
 800529e:	b510      	push	{r4, lr}
 80052a0:	eb01 0402 	add.w	r4, r1, r2
 80052a4:	d902      	bls.n	80052ac <memmove+0x10>
 80052a6:	4284      	cmp	r4, r0
 80052a8:	4623      	mov	r3, r4
 80052aa:	d807      	bhi.n	80052bc <memmove+0x20>
 80052ac:	1e43      	subs	r3, r0, #1
 80052ae:	42a1      	cmp	r1, r4
 80052b0:	d008      	beq.n	80052c4 <memmove+0x28>
 80052b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ba:	e7f8      	b.n	80052ae <memmove+0x12>
 80052bc:	4402      	add	r2, r0
 80052be:	4601      	mov	r1, r0
 80052c0:	428a      	cmp	r2, r1
 80052c2:	d100      	bne.n	80052c6 <memmove+0x2a>
 80052c4:	bd10      	pop	{r4, pc}
 80052c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052ce:	e7f7      	b.n	80052c0 <memmove+0x24>

080052d0 <_free_r>:
 80052d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052d2:	2900      	cmp	r1, #0
 80052d4:	d044      	beq.n	8005360 <_free_r+0x90>
 80052d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052da:	9001      	str	r0, [sp, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f1a1 0404 	sub.w	r4, r1, #4
 80052e2:	bfb8      	it	lt
 80052e4:	18e4      	addlt	r4, r4, r3
 80052e6:	f000 f913 	bl	8005510 <__malloc_lock>
 80052ea:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <_free_r+0x94>)
 80052ec:	9801      	ldr	r0, [sp, #4]
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	b933      	cbnz	r3, 8005300 <_free_r+0x30>
 80052f2:	6063      	str	r3, [r4, #4]
 80052f4:	6014      	str	r4, [r2, #0]
 80052f6:	b003      	add	sp, #12
 80052f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052fc:	f000 b90e 	b.w	800551c <__malloc_unlock>
 8005300:	42a3      	cmp	r3, r4
 8005302:	d908      	bls.n	8005316 <_free_r+0x46>
 8005304:	6825      	ldr	r5, [r4, #0]
 8005306:	1961      	adds	r1, r4, r5
 8005308:	428b      	cmp	r3, r1
 800530a:	bf01      	itttt	eq
 800530c:	6819      	ldreq	r1, [r3, #0]
 800530e:	685b      	ldreq	r3, [r3, #4]
 8005310:	1949      	addeq	r1, r1, r5
 8005312:	6021      	streq	r1, [r4, #0]
 8005314:	e7ed      	b.n	80052f2 <_free_r+0x22>
 8005316:	461a      	mov	r2, r3
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	b10b      	cbz	r3, 8005320 <_free_r+0x50>
 800531c:	42a3      	cmp	r3, r4
 800531e:	d9fa      	bls.n	8005316 <_free_r+0x46>
 8005320:	6811      	ldr	r1, [r2, #0]
 8005322:	1855      	adds	r5, r2, r1
 8005324:	42a5      	cmp	r5, r4
 8005326:	d10b      	bne.n	8005340 <_free_r+0x70>
 8005328:	6824      	ldr	r4, [r4, #0]
 800532a:	4421      	add	r1, r4
 800532c:	1854      	adds	r4, r2, r1
 800532e:	42a3      	cmp	r3, r4
 8005330:	6011      	str	r1, [r2, #0]
 8005332:	d1e0      	bne.n	80052f6 <_free_r+0x26>
 8005334:	681c      	ldr	r4, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	6053      	str	r3, [r2, #4]
 800533a:	4421      	add	r1, r4
 800533c:	6011      	str	r1, [r2, #0]
 800533e:	e7da      	b.n	80052f6 <_free_r+0x26>
 8005340:	d902      	bls.n	8005348 <_free_r+0x78>
 8005342:	230c      	movs	r3, #12
 8005344:	6003      	str	r3, [r0, #0]
 8005346:	e7d6      	b.n	80052f6 <_free_r+0x26>
 8005348:	6825      	ldr	r5, [r4, #0]
 800534a:	1961      	adds	r1, r4, r5
 800534c:	428b      	cmp	r3, r1
 800534e:	bf04      	itt	eq
 8005350:	6819      	ldreq	r1, [r3, #0]
 8005352:	685b      	ldreq	r3, [r3, #4]
 8005354:	6063      	str	r3, [r4, #4]
 8005356:	bf04      	itt	eq
 8005358:	1949      	addeq	r1, r1, r5
 800535a:	6021      	streq	r1, [r4, #0]
 800535c:	6054      	str	r4, [r2, #4]
 800535e:	e7ca      	b.n	80052f6 <_free_r+0x26>
 8005360:	b003      	add	sp, #12
 8005362:	bd30      	pop	{r4, r5, pc}
 8005364:	20001b90 	.word	0x20001b90

08005368 <sbrk_aligned>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4e0e      	ldr	r6, [pc, #56]	; (80053a4 <sbrk_aligned+0x3c>)
 800536c:	460c      	mov	r4, r1
 800536e:	6831      	ldr	r1, [r6, #0]
 8005370:	4605      	mov	r5, r0
 8005372:	b911      	cbnz	r1, 800537a <sbrk_aligned+0x12>
 8005374:	f000 f8bc 	bl	80054f0 <_sbrk_r>
 8005378:	6030      	str	r0, [r6, #0]
 800537a:	4621      	mov	r1, r4
 800537c:	4628      	mov	r0, r5
 800537e:	f000 f8b7 	bl	80054f0 <_sbrk_r>
 8005382:	1c43      	adds	r3, r0, #1
 8005384:	d00a      	beq.n	800539c <sbrk_aligned+0x34>
 8005386:	1cc4      	adds	r4, r0, #3
 8005388:	f024 0403 	bic.w	r4, r4, #3
 800538c:	42a0      	cmp	r0, r4
 800538e:	d007      	beq.n	80053a0 <sbrk_aligned+0x38>
 8005390:	1a21      	subs	r1, r4, r0
 8005392:	4628      	mov	r0, r5
 8005394:	f000 f8ac 	bl	80054f0 <_sbrk_r>
 8005398:	3001      	adds	r0, #1
 800539a:	d101      	bne.n	80053a0 <sbrk_aligned+0x38>
 800539c:	f04f 34ff 	mov.w	r4, #4294967295
 80053a0:	4620      	mov	r0, r4
 80053a2:	bd70      	pop	{r4, r5, r6, pc}
 80053a4:	20001b94 	.word	0x20001b94

080053a8 <_malloc_r>:
 80053a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ac:	1ccd      	adds	r5, r1, #3
 80053ae:	f025 0503 	bic.w	r5, r5, #3
 80053b2:	3508      	adds	r5, #8
 80053b4:	2d0c      	cmp	r5, #12
 80053b6:	bf38      	it	cc
 80053b8:	250c      	movcc	r5, #12
 80053ba:	2d00      	cmp	r5, #0
 80053bc:	4607      	mov	r7, r0
 80053be:	db01      	blt.n	80053c4 <_malloc_r+0x1c>
 80053c0:	42a9      	cmp	r1, r5
 80053c2:	d905      	bls.n	80053d0 <_malloc_r+0x28>
 80053c4:	230c      	movs	r3, #12
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	2600      	movs	r6, #0
 80053ca:	4630      	mov	r0, r6
 80053cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d0:	4e2e      	ldr	r6, [pc, #184]	; (800548c <_malloc_r+0xe4>)
 80053d2:	f000 f89d 	bl	8005510 <__malloc_lock>
 80053d6:	6833      	ldr	r3, [r6, #0]
 80053d8:	461c      	mov	r4, r3
 80053da:	bb34      	cbnz	r4, 800542a <_malloc_r+0x82>
 80053dc:	4629      	mov	r1, r5
 80053de:	4638      	mov	r0, r7
 80053e0:	f7ff ffc2 	bl	8005368 <sbrk_aligned>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	4604      	mov	r4, r0
 80053e8:	d14d      	bne.n	8005486 <_malloc_r+0xde>
 80053ea:	6834      	ldr	r4, [r6, #0]
 80053ec:	4626      	mov	r6, r4
 80053ee:	2e00      	cmp	r6, #0
 80053f0:	d140      	bne.n	8005474 <_malloc_r+0xcc>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	4631      	mov	r1, r6
 80053f6:	4638      	mov	r0, r7
 80053f8:	eb04 0803 	add.w	r8, r4, r3
 80053fc:	f000 f878 	bl	80054f0 <_sbrk_r>
 8005400:	4580      	cmp	r8, r0
 8005402:	d13a      	bne.n	800547a <_malloc_r+0xd2>
 8005404:	6821      	ldr	r1, [r4, #0]
 8005406:	3503      	adds	r5, #3
 8005408:	1a6d      	subs	r5, r5, r1
 800540a:	f025 0503 	bic.w	r5, r5, #3
 800540e:	3508      	adds	r5, #8
 8005410:	2d0c      	cmp	r5, #12
 8005412:	bf38      	it	cc
 8005414:	250c      	movcc	r5, #12
 8005416:	4629      	mov	r1, r5
 8005418:	4638      	mov	r0, r7
 800541a:	f7ff ffa5 	bl	8005368 <sbrk_aligned>
 800541e:	3001      	adds	r0, #1
 8005420:	d02b      	beq.n	800547a <_malloc_r+0xd2>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	442b      	add	r3, r5
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	e00e      	b.n	8005448 <_malloc_r+0xa0>
 800542a:	6822      	ldr	r2, [r4, #0]
 800542c:	1b52      	subs	r2, r2, r5
 800542e:	d41e      	bmi.n	800546e <_malloc_r+0xc6>
 8005430:	2a0b      	cmp	r2, #11
 8005432:	d916      	bls.n	8005462 <_malloc_r+0xba>
 8005434:	1961      	adds	r1, r4, r5
 8005436:	42a3      	cmp	r3, r4
 8005438:	6025      	str	r5, [r4, #0]
 800543a:	bf18      	it	ne
 800543c:	6059      	strne	r1, [r3, #4]
 800543e:	6863      	ldr	r3, [r4, #4]
 8005440:	bf08      	it	eq
 8005442:	6031      	streq	r1, [r6, #0]
 8005444:	5162      	str	r2, [r4, r5]
 8005446:	604b      	str	r3, [r1, #4]
 8005448:	4638      	mov	r0, r7
 800544a:	f104 060b 	add.w	r6, r4, #11
 800544e:	f000 f865 	bl	800551c <__malloc_unlock>
 8005452:	f026 0607 	bic.w	r6, r6, #7
 8005456:	1d23      	adds	r3, r4, #4
 8005458:	1af2      	subs	r2, r6, r3
 800545a:	d0b6      	beq.n	80053ca <_malloc_r+0x22>
 800545c:	1b9b      	subs	r3, r3, r6
 800545e:	50a3      	str	r3, [r4, r2]
 8005460:	e7b3      	b.n	80053ca <_malloc_r+0x22>
 8005462:	6862      	ldr	r2, [r4, #4]
 8005464:	42a3      	cmp	r3, r4
 8005466:	bf0c      	ite	eq
 8005468:	6032      	streq	r2, [r6, #0]
 800546a:	605a      	strne	r2, [r3, #4]
 800546c:	e7ec      	b.n	8005448 <_malloc_r+0xa0>
 800546e:	4623      	mov	r3, r4
 8005470:	6864      	ldr	r4, [r4, #4]
 8005472:	e7b2      	b.n	80053da <_malloc_r+0x32>
 8005474:	4634      	mov	r4, r6
 8005476:	6876      	ldr	r6, [r6, #4]
 8005478:	e7b9      	b.n	80053ee <_malloc_r+0x46>
 800547a:	230c      	movs	r3, #12
 800547c:	603b      	str	r3, [r7, #0]
 800547e:	4638      	mov	r0, r7
 8005480:	f000 f84c 	bl	800551c <__malloc_unlock>
 8005484:	e7a1      	b.n	80053ca <_malloc_r+0x22>
 8005486:	6025      	str	r5, [r4, #0]
 8005488:	e7de      	b.n	8005448 <_malloc_r+0xa0>
 800548a:	bf00      	nop
 800548c:	20001b90 	.word	0x20001b90

08005490 <_realloc_r>:
 8005490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005494:	4680      	mov	r8, r0
 8005496:	4614      	mov	r4, r2
 8005498:	460e      	mov	r6, r1
 800549a:	b921      	cbnz	r1, 80054a6 <_realloc_r+0x16>
 800549c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a0:	4611      	mov	r1, r2
 80054a2:	f7ff bf81 	b.w	80053a8 <_malloc_r>
 80054a6:	b92a      	cbnz	r2, 80054b4 <_realloc_r+0x24>
 80054a8:	f7ff ff12 	bl	80052d0 <_free_r>
 80054ac:	4625      	mov	r5, r4
 80054ae:	4628      	mov	r0, r5
 80054b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b4:	f000 f838 	bl	8005528 <_malloc_usable_size_r>
 80054b8:	4284      	cmp	r4, r0
 80054ba:	4607      	mov	r7, r0
 80054bc:	d802      	bhi.n	80054c4 <_realloc_r+0x34>
 80054be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054c2:	d812      	bhi.n	80054ea <_realloc_r+0x5a>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4640      	mov	r0, r8
 80054c8:	f7ff ff6e 	bl	80053a8 <_malloc_r>
 80054cc:	4605      	mov	r5, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d0ed      	beq.n	80054ae <_realloc_r+0x1e>
 80054d2:	42bc      	cmp	r4, r7
 80054d4:	4622      	mov	r2, r4
 80054d6:	4631      	mov	r1, r6
 80054d8:	bf28      	it	cs
 80054da:	463a      	movcs	r2, r7
 80054dc:	f7ff fed0 	bl	8005280 <memcpy>
 80054e0:	4631      	mov	r1, r6
 80054e2:	4640      	mov	r0, r8
 80054e4:	f7ff fef4 	bl	80052d0 <_free_r>
 80054e8:	e7e1      	b.n	80054ae <_realloc_r+0x1e>
 80054ea:	4635      	mov	r5, r6
 80054ec:	e7df      	b.n	80054ae <_realloc_r+0x1e>
	...

080054f0 <_sbrk_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4d06      	ldr	r5, [pc, #24]	; (800550c <_sbrk_r+0x1c>)
 80054f4:	2300      	movs	r3, #0
 80054f6:	4604      	mov	r4, r0
 80054f8:	4608      	mov	r0, r1
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	f7fc f940 	bl	8001780 <_sbrk>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_sbrk_r+0x1a>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_sbrk_r+0x1a>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	20001b88 	.word	0x20001b88

08005510 <__malloc_lock>:
 8005510:	4801      	ldr	r0, [pc, #4]	; (8005518 <__malloc_lock+0x8>)
 8005512:	f7ff beb3 	b.w	800527c <__retarget_lock_acquire_recursive>
 8005516:	bf00      	nop
 8005518:	20001b8c 	.word	0x20001b8c

0800551c <__malloc_unlock>:
 800551c:	4801      	ldr	r0, [pc, #4]	; (8005524 <__malloc_unlock+0x8>)
 800551e:	f7ff beae 	b.w	800527e <__retarget_lock_release_recursive>
 8005522:	bf00      	nop
 8005524:	20001b8c 	.word	0x20001b8c

08005528 <_malloc_usable_size_r>:
 8005528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800552c:	1f18      	subs	r0, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	bfbc      	itt	lt
 8005532:	580b      	ldrlt	r3, [r1, r0]
 8005534:	18c0      	addlt	r0, r0, r3
 8005536:	4770      	bx	lr

08005538 <_init>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr

08005544 <_fini>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr
