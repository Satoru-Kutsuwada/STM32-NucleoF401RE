
TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  0800a14c  0800a14c  0001a14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad64  0800ad64  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad64  0800ad64  0001ad64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad6c  0800ad6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad6c  0800ad6c  0001ad6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad70  0800ad70  0001ad70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ad74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000066a0  20000074  0800ade8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006714  0800ade8  00026714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f424  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000472a  00000000  00000000  0003f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00043bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  000454d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4d2  00000000  00000000  00046bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d593  00000000  00000000  000610c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f6f2  00000000  00000000  0007e655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011dd47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fc0  00000000  00000000  0011dd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a134 	.word	0x0800a134

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800a134 	.word	0x0800a134

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <debu_main>:

//=============================================================================
//
//=============================================================================
void debu_main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	//char ch;

	if(read_line_streem() == INPUT_DATA_FIX){
 80005b8:	f000 fc92 	bl	8000ee0 <read_line_streem>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d129      	bne.n	8000616 <debu_main+0x62>

		input_char_step = INPUT_INIT;
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <debu_main+0x68>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

		//SKprintf("debu_main:001\r\n");

		switch(dev_menue_type){
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <debu_main+0x6c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d81c      	bhi.n	800060a <debu_main+0x56>
 80005d0:	a201      	add	r2, pc, #4	; (adr r2, 80005d8 <debu_main+0x24>)
 80005d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d6:	bf00      	nop
 80005d8:	080005ed 	.word	0x080005ed
 80005dc:	080005f3 	.word	0x080005f3
 80005e0:	080005f9 	.word	0x080005f9
 80005e4:	080005ff 	.word	0x080005ff
 80005e8:	08000605 	.word	0x08000605
		case DEB_PROMPT_MODE:
			DBmanue_prompt();
 80005ec:	f000 f84e 	bl	800068c <DBmanue_prompt>
			break;
 80005f0:	e00c      	b.n	800060c <debu_main+0x58>
		case DEB_LOG_MENUE:
			DBmanue_log();
 80005f2:	f000 f871 	bl	80006d8 <DBmanue_log>
			break;
 80005f6:	e009      	b.n	800060c <debu_main+0x58>
		case DEB_RS485_MENUE:
			DBmanue_rs485();
 80005f8:	f000 f8e0 	bl	80007bc <DBmanue_rs485>
			break;
 80005fc:	e006      	b.n	800060c <debu_main+0x58>
		case DEB_MEM_MENUE:
			DBmanue_memdump();
 80005fe:	f000 f93f 	bl	8000880 <DBmanue_memdump>
			break;
 8000602:	e003      	b.n	800060c <debu_main+0x58>
		case DEB_MEM_INPUT_MENUE:
			DBmanue_mem_input();
 8000604:	f000 fa34 	bl	8000a70 <DBmanue_mem_input>
			break;
 8000608:	e000      	b.n	800060c <debu_main+0x58>
		default:
			break;
 800060a:	bf00      	nop
		}

		//SKprintf("debu_main:002\r\n");
        // メニュを表示する
        DispMenue(dev_menue_type);
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <debu_main+0x6c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f807 	bl	8000624 <DispMenue>
        //SKprintf("debu_main:003\r\n");

	}
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000098 	.word	0x20000098
 8000620:	2000011c 	.word	0x2000011c

08000624 <DispMenue>:
//==============================================================================
//
//==============================================================================
void DispMenue(uint8_t type)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    if( type==DEB_PROMPT_MODE ){
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d103      	bne.n	800063c <DispMenue+0x18>
        SKprintf("ST> ");
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <DispMenue+0x5c>)
 8000636:	f001 fddf 	bl	80021f8 <SKprintf>
    else{
        for( i=0; i<MenueList[type-1].clumn; i++){
            SKprintf("%s", &MenueList[type-1].pt[i].name[0]);
        }
    }
}
 800063a:	e01d      	b.n	8000678 <DispMenue+0x54>
        for( i=0; i<MenueList[type-1].clumn; i++){
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
 8000640:	e011      	b.n	8000666 <DispMenue+0x42>
            SKprintf("%s", &MenueList[type-1].pt[i].name[0]);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	3b01      	subs	r3, #1
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <DispMenue+0x60>)
 8000648:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800064c:	7bfa      	ldrb	r2, [r7, #15]
 800064e:	4613      	mov	r3, r2
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	440b      	add	r3, r1
 8000658:	4619      	mov	r1, r3
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <DispMenue+0x64>)
 800065c:	f001 fdcc 	bl	80021f8 <SKprintf>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	3301      	adds	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	3b01      	subs	r3, #1
 800066a:	4a06      	ldr	r2, [pc, #24]	; (8000684 <DispMenue+0x60>)
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	4413      	add	r3, r2
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	7bfa      	ldrb	r2, [r7, #15]
 8000674:	429a      	cmp	r2, r3
 8000676:	d3e4      	bcc.n	8000642 <DispMenue+0x1e>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	0800a14c 	.word	0x0800a14c
 8000684:	0800aa5c 	.word	0x0800aa5c
 8000688:	0800a154 	.word	0x0800a154

0800068c <DBmanue_prompt>:
//=============================================================================
//
//=============================================================================
void DBmanue_prompt(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    switch( input2menu() ){
 8000690:	f000 fb22 	bl	8000cd8 <input2menu>
 8000694:	4603      	mov	r3, r0
 8000696:	2b03      	cmp	r3, #3
 8000698:	d819      	bhi.n	80006ce <DBmanue_prompt+0x42>
 800069a:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <DBmanue_prompt+0x14>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	080006b1 	.word	0x080006b1
 80006a4:	080006b7 	.word	0x080006b7
 80006a8:	080006bf 	.word	0x080006bf
 80006ac:	080006c7 	.word	0x080006c7
    case CMD_RTC:
    	rtc_display();
 80006b0:	f001 f84c 	bl	800174c <rtc_display>
        break;
 80006b4:	e00c      	b.n	80006d0 <DBmanue_prompt+0x44>
    case CMD_LOG:
        dev_menue_type = DEB_LOG_MENUE;
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <DBmanue_prompt+0x48>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
        break;
 80006bc:	e008      	b.n	80006d0 <DBmanue_prompt+0x44>
    case CMD_RS485:
        dev_menue_type = DEB_RS485_MENUE;
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <DBmanue_prompt+0x48>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	701a      	strb	r2, [r3, #0]
        break;
 80006c4:	e004      	b.n	80006d0 <DBmanue_prompt+0x44>
    case CMD_MEM_DUMP:
        dev_menue_type = DEB_MEM_MENUE;
 80006c6:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <DBmanue_prompt+0x48>)
 80006c8:	2203      	movs	r2, #3
 80006ca:	701a      	strb	r2, [r3, #0]
    	break;
 80006cc:	e000      	b.n	80006d0 <DBmanue_prompt+0x44>

    default:
        break;
 80006ce:	bf00      	nop
    }
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000011c 	.word	0x2000011c

080006d8 <DBmanue_log>:

//=============================================================================
//
//=============================================================================
void DBmanue_log(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80006dc:	4b35      	ldr	r3, [pc, #212]	; (80007b4 <DBmanue_log+0xdc>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b52      	cmp	r3, #82	; 0x52
 80006e2:	dc4b      	bgt.n	800077c <DBmanue_log+0xa4>
 80006e4:	2b31      	cmp	r3, #49	; 0x31
 80006e6:	db61      	blt.n	80007ac <DBmanue_log+0xd4>
 80006e8:	3b31      	subs	r3, #49	; 0x31
 80006ea:	2b21      	cmp	r3, #33	; 0x21
 80006ec:	d85e      	bhi.n	80007ac <DBmanue_log+0xd4>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <DBmanue_log+0x1c>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000783 	.word	0x08000783
 80006f8:	08000789 	.word	0x08000789
 80006fc:	0800078f 	.word	0x0800078f
 8000700:	08000797 	.word	0x08000797
 8000704:	0800079f 	.word	0x0800079f
 8000708:	080007ad 	.word	0x080007ad
 800070c:	080007ad 	.word	0x080007ad
 8000710:	080007ad 	.word	0x080007ad
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007ad 	.word	0x080007ad
 800071c:	080007ad 	.word	0x080007ad
 8000720:	080007ad 	.word	0x080007ad
 8000724:	080007ad 	.word	0x080007ad
 8000728:	080007ad 	.word	0x080007ad
 800072c:	080007ad 	.word	0x080007ad
 8000730:	080007ad 	.word	0x080007ad
 8000734:	080007ad 	.word	0x080007ad
 8000738:	080007ad 	.word	0x080007ad
 800073c:	080007ad 	.word	0x080007ad
 8000740:	080007ad 	.word	0x080007ad
 8000744:	080007ad 	.word	0x080007ad
 8000748:	080007ad 	.word	0x080007ad
 800074c:	080007ad 	.word	0x080007ad
 8000750:	080007ad 	.word	0x080007ad
 8000754:	080007ad 	.word	0x080007ad
 8000758:	080007ad 	.word	0x080007ad
 800075c:	080007ad 	.word	0x080007ad
 8000760:	080007ad 	.word	0x080007ad
 8000764:	080007ad 	.word	0x080007ad
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007ad 	.word	0x080007ad
 8000770:	080007ad 	.word	0x080007ad
 8000774:	080007ad 	.word	0x080007ad
 8000778:	080007a7 	.word	0x080007a7
 800077c:	2b72      	cmp	r3, #114	; 0x72
 800077e:	d012      	beq.n	80007a6 <DBmanue_log+0xce>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000780:	e014      	b.n	80007ac <DBmanue_log+0xd4>
		LogInfo_display();
 8000782:	f000 fca3 	bl	80010cc <LogInfo_display>
		break;
 8000786:	e012      	b.n	80007ae <DBmanue_log+0xd6>
		LogInfo_clear();
 8000788:	f000 fd48 	bl	800121c <LogInfo_clear>
		break;
 800078c:	e00f      	b.n	80007ae <DBmanue_log+0xd6>
		Set_logflg(LF_NON_STOP);
 800078e:	2000      	movs	r0, #0
 8000790:	f000 fc82 	bl	8001098 <Set_logflg>
		break;
 8000794:	e00b      	b.n	80007ae <DBmanue_log+0xd6>
		Set_logflg(LF_IMMMEDIATE_STOP);
 8000796:	2001      	movs	r0, #1
 8000798:	f000 fc7e 	bl	8001098 <Set_logflg>
		break;
 800079c:	e007      	b.n	80007ae <DBmanue_log+0xd6>
		Set_logflg(LF_MAX_DATA_STOP);
 800079e:	2002      	movs	r0, #2
 80007a0:	f000 fc7a 	bl	8001098 <Set_logflg>
		break;
 80007a4:	e003      	b.n	80007ae <DBmanue_log+0xd6>
		dev_menue_type = DEB_PROMPT_MODE;
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <DBmanue_log+0xe0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
		break;
 80007ac:	bf00      	nop
	}
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000009c 	.word	0x2000009c
 80007b8:	2000011c 	.word	0x2000011c

080007bc <DBmanue_rs485>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <DBmanue_rs485+0xbc>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b52      	cmp	r3, #82	; 0x52
 80007c6:	dc4b      	bgt.n	8000860 <DBmanue_rs485+0xa4>
 80007c8:	2b31      	cmp	r3, #49	; 0x31
 80007ca:	db4f      	blt.n	800086c <DBmanue_rs485+0xb0>
 80007cc:	3b31      	subs	r3, #49	; 0x31
 80007ce:	2b21      	cmp	r3, #33	; 0x21
 80007d0:	d84c      	bhi.n	800086c <DBmanue_rs485+0xb0>
 80007d2:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <DBmanue_rs485+0x1c>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	0800086d 	.word	0x0800086d
 80007dc:	0800086d 	.word	0x0800086d
 80007e0:	0800086d 	.word	0x0800086d
 80007e4:	0800086d 	.word	0x0800086d
 80007e8:	0800086d 	.word	0x0800086d
 80007ec:	0800086d 	.word	0x0800086d
 80007f0:	0800086d 	.word	0x0800086d
 80007f4:	0800086d 	.word	0x0800086d
 80007f8:	0800086d 	.word	0x0800086d
 80007fc:	0800086d 	.word	0x0800086d
 8000800:	0800086d 	.word	0x0800086d
 8000804:	0800086d 	.word	0x0800086d
 8000808:	0800086d 	.word	0x0800086d
 800080c:	0800086d 	.word	0x0800086d
 8000810:	0800086d 	.word	0x0800086d
 8000814:	0800086d 	.word	0x0800086d
 8000818:	0800086d 	.word	0x0800086d
 800081c:	0800086d 	.word	0x0800086d
 8000820:	0800086d 	.word	0x0800086d
 8000824:	0800086d 	.word	0x0800086d
 8000828:	0800086d 	.word	0x0800086d
 800082c:	0800086d 	.word	0x0800086d
 8000830:	0800086d 	.word	0x0800086d
 8000834:	0800086d 	.word	0x0800086d
 8000838:	0800086d 	.word	0x0800086d
 800083c:	0800086d 	.word	0x0800086d
 8000840:	0800086d 	.word	0x0800086d
 8000844:	0800086d 	.word	0x0800086d
 8000848:	0800086d 	.word	0x0800086d
 800084c:	0800086d 	.word	0x0800086d
 8000850:	0800086d 	.word	0x0800086d
 8000854:	0800086d 	.word	0x0800086d
 8000858:	0800086d 	.word	0x0800086d
 800085c:	08000867 	.word	0x08000867
 8000860:	2b72      	cmp	r3, #114	; 0x72
 8000862:	d000      	beq.n	8000866 <DBmanue_rs485+0xaa>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000864:	e002      	b.n	800086c <DBmanue_rs485+0xb0>
		dev_menue_type = DEB_PROMPT_MODE;
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <DBmanue_rs485+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
		break;
 800086c:	bf00      	nop
	}
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	2000009c 	.word	0x2000009c
 800087c:	2000011c 	.word	0x2000011c

08000880 <DBmanue_memdump>:

//==============================================================================
//
//==============================================================================
void DBmanue_memdump(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
	STACK_INFO stack;

	switch( input_string.main[0] ){
 8000886:	4b77      	ldr	r3, [pc, #476]	; (8000a64 <DBmanue_memdump+0x1e4>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	3b31      	subs	r3, #49	; 0x31
 800088c:	2b41      	cmp	r3, #65	; 0x41
 800088e:	f200 80df 	bhi.w	8000a50 <DBmanue_memdump+0x1d0>
 8000892:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <DBmanue_memdump+0x18>)
 8000894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000898:	080009a1 	.word	0x080009a1
 800089c:	080009a9 	.word	0x080009a9
 80008a0:	080009c7 	.word	0x080009c7
 80008a4:	080009e5 	.word	0x080009e5
 80008a8:	08000a51 	.word	0x08000a51
 80008ac:	08000a51 	.word	0x08000a51
 80008b0:	08000a51 	.word	0x08000a51
 80008b4:	08000a51 	.word	0x08000a51
 80008b8:	08000a51 	.word	0x08000a51
 80008bc:	08000a51 	.word	0x08000a51
 80008c0:	08000a51 	.word	0x08000a51
 80008c4:	08000a51 	.word	0x08000a51
 80008c8:	08000a51 	.word	0x08000a51
 80008cc:	08000a51 	.word	0x08000a51
 80008d0:	08000a51 	.word	0x08000a51
 80008d4:	08000a51 	.word	0x08000a51
 80008d8:	08000a51 	.word	0x08000a51
 80008dc:	08000a51 	.word	0x08000a51
 80008e0:	08000a51 	.word	0x08000a51
 80008e4:	08000a51 	.word	0x08000a51
 80008e8:	08000a51 	.word	0x08000a51
 80008ec:	08000a51 	.word	0x08000a51
 80008f0:	08000a51 	.word	0x08000a51
 80008f4:	08000a51 	.word	0x08000a51
 80008f8:	08000a51 	.word	0x08000a51
 80008fc:	08000a51 	.word	0x08000a51
 8000900:	08000a51 	.word	0x08000a51
 8000904:	08000a51 	.word	0x08000a51
 8000908:	08000a51 	.word	0x08000a51
 800090c:	08000a51 	.word	0x08000a51
 8000910:	08000a51 	.word	0x08000a51
 8000914:	08000a51 	.word	0x08000a51
 8000918:	08000a51 	.word	0x08000a51
 800091c:	08000a4b 	.word	0x08000a4b
 8000920:	08000a51 	.word	0x08000a51
 8000924:	08000a51 	.word	0x08000a51
 8000928:	08000a51 	.word	0x08000a51
 800092c:	08000a51 	.word	0x08000a51
 8000930:	08000a51 	.word	0x08000a51
 8000934:	08000a51 	.word	0x08000a51
 8000938:	08000a51 	.word	0x08000a51
 800093c:	08000a51 	.word	0x08000a51
 8000940:	08000a51 	.word	0x08000a51
 8000944:	08000a51 	.word	0x08000a51
 8000948:	08000a51 	.word	0x08000a51
 800094c:	08000a51 	.word	0x08000a51
 8000950:	08000a51 	.word	0x08000a51
 8000954:	08000a51 	.word	0x08000a51
 8000958:	08000a51 	.word	0x08000a51
 800095c:	08000a27 	.word	0x08000a27
 8000960:	08000a51 	.word	0x08000a51
 8000964:	08000a51 	.word	0x08000a51
 8000968:	08000a51 	.word	0x08000a51
 800096c:	08000a03 	.word	0x08000a03
 8000970:	08000a51 	.word	0x08000a51
 8000974:	08000a51 	.word	0x08000a51
 8000978:	08000a51 	.word	0x08000a51
 800097c:	08000a51 	.word	0x08000a51
 8000980:	08000a51 	.word	0x08000a51
 8000984:	08000a51 	.word	0x08000a51
 8000988:	08000a51 	.word	0x08000a51
 800098c:	08000a51 	.word	0x08000a51
 8000990:	08000a51 	.word	0x08000a51
 8000994:	08000a51 	.word	0x08000a51
 8000998:	08000a51 	.word	0x08000a51
 800099c:	08000a4b 	.word	0x08000a4b
	case '1':
		dev_menue_type = DEB_MEM_INPUT_MENUE;
 80009a0:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <DBmanue_memdump+0x1e8>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	701a      	strb	r2, [r3, #0]
		break;
 80009a6:	e058      	b.n	8000a5a <DBmanue_memdump+0x1da>
	case '2':
		Disp_task_info(SK_TASK_main);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 fd9f 	bl	80014ec <Disp_task_info>
		Get_task_stackptr(SK_TASK_main,&stack);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 fe38 	bl	8001628 <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	89ba      	ldrh	r2, [r7, #12]
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f8b6 	bl	8000b30 <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 80009c4:	e049      	b.n	8000a5a <DBmanue_memdump+0x1da>
	case '3':
		Disp_task_info(SK_TASK_sub1);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f000 fd90 	bl	80014ec <Disp_task_info>
		Get_task_stackptr(SK_TASK_sub1,&stack);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	2001      	movs	r0, #1
 80009d2:	f000 fe29 	bl	8001628 <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	89ba      	ldrh	r2, [r7, #12]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f8a7 	bl	8000b30 <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 80009e2:	e03a      	b.n	8000a5a <DBmanue_memdump+0x1da>
	case '4':
		Disp_task_info(SK_TASK_sub2);
 80009e4:	2002      	movs	r0, #2
 80009e6:	f000 fd81 	bl	80014ec <Disp_task_info>
		Get_task_stackptr(SK_TASK_sub2,&stack);
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	2002      	movs	r0, #2
 80009f0:	f000 fe1a 	bl	8001628 <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	89ba      	ldrh	r2, [r7, #12]
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f898 	bl	8000b30 <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 8000a00:	e02b      	b.n	8000a5a <DBmanue_memdump+0x1da>
	case '5':
		break;
	case 'f':
		if(sk_mem_dump != NULL){
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <DBmanue_memdump+0x1ec>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d024      	beq.n	8000a54 <DBmanue_memdump+0x1d4>
			sk_mem_dump += 128*4;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <DBmanue_memdump+0x1ec>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <DBmanue_memdump+0x1ec>)
 8000a14:	6013      	str	r3, [r2, #0]
			hex_dmp(sk_mem_dump, 128*4);
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <DBmanue_memdump+0x1ec>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f886 	bl	8000b30 <hex_dmp>
		}
		break;
 8000a24:	e016      	b.n	8000a54 <DBmanue_memdump+0x1d4>
	case 'b':
		if(sk_mem_dump != NULL){
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <DBmanue_memdump+0x1ec>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d014      	beq.n	8000a58 <DBmanue_memdump+0x1d8>
			sk_mem_dump -= 128*4;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <DBmanue_memdump+0x1ec>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000a36:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <DBmanue_memdump+0x1ec>)
 8000a38:	6013      	str	r3, [r2, #0]
			hex_dmp(sk_mem_dump, 128*4);
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <DBmanue_memdump+0x1ec>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f874 	bl	8000b30 <hex_dmp>
		}
		break;
 8000a48:	e006      	b.n	8000a58 <DBmanue_memdump+0x1d8>
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <DBmanue_memdump+0x1e8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
	default:
		break;
 8000a50:	bf00      	nop
 8000a52:	e002      	b.n	8000a5a <DBmanue_memdump+0x1da>
		break;
 8000a54:	bf00      	nop
 8000a56:	e000      	b.n	8000a5a <DBmanue_memdump+0x1da>
		break;
 8000a58:	bf00      	nop
	}

}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000009c 	.word	0x2000009c
 8000a68:	2000011c 	.word	0x2000011c
 8000a6c:	20000094 	.word	0x20000094

08000a70 <DBmanue_mem_input>:

//==============================================================================
//
//==============================================================================
void DBmanue_mem_input(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
	int 		i = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
	uint32_t	dt = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
	uint8_t		c = input_string.main[0];
 8000a7e:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <DBmanue_mem_input+0xb4>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]

	if( c == 'r' || c == 'R' ){
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b72      	cmp	r3, #114	; 0x72
 8000a88:	d044      	beq.n	8000b14 <DBmanue_mem_input+0xa4>
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b52      	cmp	r3, #82	; 0x52
 8000a8e:	d041      	beq.n	8000b14 <DBmanue_mem_input+0xa4>

	}
	else{
		while( input_string.main[i] != '\0'){
 8000a90:	e030      	b.n	8000af4 <DBmanue_mem_input+0x84>
			c= input_string.main[i];
 8000a92:	4a24      	ldr	r2, [pc, #144]	; (8000b24 <DBmanue_mem_input+0xb4>)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]

			dt <<= 4;
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	60bb      	str	r3, [r7, #8]

			if( c >= '0'  && c <= '9' ){
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b2f      	cmp	r3, #47	; 0x2f
 8000aa6:	d909      	bls.n	8000abc <DBmanue_mem_input+0x4c>
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b39      	cmp	r3, #57	; 0x39
 8000aac:	d806      	bhi.n	8000abc <DBmanue_mem_input+0x4c>
				dt |= ( c - '0');
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	3b30      	subs	r3, #48	; 0x30
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	e018      	b.n	8000aee <DBmanue_mem_input+0x7e>
			}
			else if( c >= 'a'  && c <= 'f' ){
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b60      	cmp	r3, #96	; 0x60
 8000ac0:	d909      	bls.n	8000ad6 <DBmanue_mem_input+0x66>
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b66      	cmp	r3, #102	; 0x66
 8000ac6:	d806      	bhi.n	8000ad6 <DBmanue_mem_input+0x66>
				dt |= ( c - 'a' + 10);
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	3b57      	subs	r3, #87	; 0x57
 8000acc:	461a      	mov	r2, r3
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	e00b      	b.n	8000aee <DBmanue_mem_input+0x7e>
			}
			else if( c >= 'A'  && c <= 'F' ){
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b40      	cmp	r3, #64	; 0x40
 8000ada:	d908      	bls.n	8000aee <DBmanue_mem_input+0x7e>
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b46      	cmp	r3, #70	; 0x46
 8000ae0:	d805      	bhi.n	8000aee <DBmanue_mem_input+0x7e>
				dt |= ( c - 'A' + 10);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	3b37      	subs	r3, #55	; 0x37
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	60bb      	str	r3, [r7, #8]
			}

			i++;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3301      	adds	r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
		while( input_string.main[i] != '\0'){
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <DBmanue_mem_input+0xb4>)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1c8      	bne.n	8000a92 <DBmanue_mem_input+0x22>
		}

		SKprintf("dt=%lx",dt);
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <DBmanue_mem_input+0xb8>)
 8000b04:	f001 fb78 	bl	80021f8 <SKprintf>
		hex_dmp((uint8_t *)dt, 128*4);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f80e 	bl	8000b30 <hex_dmp>
	}

	dev_menue_type = DEB_MEM_MENUE;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <DBmanue_mem_input+0xbc>)
 8000b16:	2203      	movs	r2, #3
 8000b18:	701a      	strb	r2, [r3, #0]

}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000009c 	.word	0x2000009c
 8000b28:	0800a158 	.word	0x0800a158
 8000b2c:	2000011c 	.word	0x2000011c

08000b30 <hex_dmp>:

//==============================================================================
//
//==============================================================================
void hex_dmp(uint8_t *buf, uint16_t size)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	; 0x38
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
    uint16_t	size_plus;
    uint32_t pp;



   p = buf;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
   pp = (uint32_t)buf;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	623b      	str	r3, [r7, #32]
   p_disp = (uint8_t *)(pp & 0xfffffff0);
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	f023 030f 	bic.w	r3, r3, #15
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   p = p_disp;
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24

   pre_data = (uint8_t)pp & 0x0000000F;
 8000b50:	6a3b      	ldr	r3, [r7, #32]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	83fb      	strh	r3, [r7, #30]
   sk_mem_dump = p_disp;
 8000b5c:	4a54      	ldr	r2, [pc, #336]	; (8000cb0 <hex_dmp+0x180>)
 8000b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b60:	6013      	str	r3, [r2, #0]

   size_plus = size + pre_data;
 8000b62:	887a      	ldrh	r2, [r7, #2]
 8000b64:	8bfb      	ldrh	r3, [r7, #30]
 8000b66:	4413      	add	r3, r2
 8000b68:	853b      	strh	r3, [r7, #40]	; 0x28
   if(( size_plus % 16 ) != 0){
 8000b6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <hex_dmp+0x52>
    	   size_plus = size_plus + 16 - (size_plus % 16);
 8000b76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b78:	f023 030f 	bic.w	r3, r3, #15
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	3310      	adds	r3, #16
 8000b80:	853b      	strh	r3, [r7, #40]	; 0x28
    }


    SKprintf("\r\n%p -->>\r\n",p);
 8000b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b84:	484b      	ldr	r0, [pc, #300]	; (8000cb4 <hex_dmp+0x184>)
 8000b86:	f001 fb37 	bl	80021f8 <SKprintf>
    SKprintf("            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F    -- ASCII --\r\n");
 8000b8a:	484b      	ldr	r0, [pc, #300]	; (8000cb8 <hex_dmp+0x188>)
 8000b8c:	f001 fb34 	bl	80021f8 <SKprintf>
    SKprintf("-----------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-----------------\r\n");
 8000b90:	484a      	ldr	r0, [pc, #296]	; (8000cbc <hex_dmp+0x18c>)
 8000b92:	f001 fb31 	bl	80021f8 <SKprintf>


    for (i=0; i<size_plus; i++) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
 8000b9a:	e070      	b.n	8000c7e <hex_dmp+0x14e>

    	if(( i % 16)== 0){
 8000b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d114      	bne.n	8000bd0 <hex_dmp+0xa0>
    	    SKprintf("%08p  ",p_disp);
 8000ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000ba8:	4845      	ldr	r0, [pc, #276]	; (8000cc0 <hex_dmp+0x190>)
 8000baa:	f001 fb25 	bl	80021f8 <SKprintf>
    	    if( p_disp != &p[i] ){
 8000bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bb2:	4413      	add	r3, r2
 8000bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d007      	beq.n	8000bca <hex_dmp+0x9a>
    	    	SKprintf("\r\nERROR p_disp=%p,p=%p\r\n",p_disp,&p[i]);
 8000bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bbe:	4413      	add	r3, r2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bc4:	483f      	ldr	r0, [pc, #252]	; (8000cc4 <hex_dmp+0x194>)
 8000bc6:	f001 fb17 	bl	80021f8 <SKprintf>
    	    }
    	    p_disp += 16;
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	3310      	adds	r3, #16
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    	}


		j = i % 16;
 8000bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd2:	425a      	negs	r2, r3
 8000bd4:	f003 030f 	and.w	r3, r3, #15
 8000bd8:	f002 020f 	and.w	r2, r2, #15
 8000bdc:	bf58      	it	pl
 8000bde:	4253      	negpl	r3, r2
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30

		if( i < (size + pre_data) ){
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	8bfb      	ldrh	r3, [r7, #30]
 8000be6:	4413      	add	r3, r2
 8000be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bea:	429a      	cmp	r2, r3
 8000bec:	da20      	bge.n	8000c30 <hex_dmp+0x100>
			SKprintf("%02x ", p[i]);
 8000bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4833      	ldr	r0, [pc, #204]	; (8000cc8 <hex_dmp+0x198>)
 8000bfa:	f001 fafd 	bl	80021f8 <SKprintf>
			tmp[j] = (uint8_t)((p[i]<0x20||p[i]>=0x7f)? '.': p[i]);
 8000bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c02:	4413      	add	r3, r2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b1f      	cmp	r3, #31
 8000c08:	d90a      	bls.n	8000c20 <hex_dmp+0xf0>
 8000c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b7e      	cmp	r3, #126	; 0x7e
 8000c14:	d804      	bhi.n	8000c20 <hex_dmp+0xf0>
 8000c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c1a:	4413      	add	r3, r2
 8000c1c:	7819      	ldrb	r1, [r3, #0]
 8000c1e:	e000      	b.n	8000c22 <hex_dmp+0xf2>
 8000c20:	212e      	movs	r1, #46	; 0x2e
 8000c22:	f107 020c 	add.w	r2, r7, #12
 8000c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c28:	4413      	add	r3, r2
 8000c2a:	460a      	mov	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e008      	b.n	8000c42 <hex_dmp+0x112>
					}
		else{
			SKprintf("   ");
 8000c30:	4826      	ldr	r0, [pc, #152]	; (8000ccc <hex_dmp+0x19c>)
 8000c32:	f001 fae1 	bl	80021f8 <SKprintf>
			tmp[j] = ' ';
 8000c36:	f107 020c 	add.w	r2, r7, #12
 8000c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2220      	movs	r2, #32
 8000c40:	701a      	strb	r2, [r3, #0]
		}

		flg = 1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	857b      	strh	r3, [r7, #42]	; 0x2a
		if(( i % 16)==15 ){
 8000c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c48:	425a      	negs	r2, r3
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	f002 020f 	and.w	r2, r2, #15
 8000c52:	bf58      	it	pl
 8000c54:	4253      	negpl	r3, r2
 8000c56:	2b0f      	cmp	r3, #15
 8000c58:	d10e      	bne.n	8000c78 <hex_dmp+0x148>
			flg = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	857b      	strh	r3, [r7, #42]	; 0x2a
			tmp[j+1] = '\0';
 8000c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c60:	3301      	adds	r3, #1
 8000c62:	3338      	adds	r3, #56	; 0x38
 8000c64:	443b      	add	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	f803 2c2c 	strb.w	r2, [r3, #-44]
			SKprintf(" %s\r\n", tmp);
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <hex_dmp+0x1a0>)
 8000c74:	f001 fac0 	bl	80021f8 <SKprintf>
    for (i=0; i<size_plus; i++) {
 8000c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c82:	429a      	cmp	r2, r3
 8000c84:	db8a      	blt.n	8000b9c <hex_dmp+0x6c>
		}
    }

    if( flg == 1 ){
 8000c86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d10c      	bne.n	8000ca6 <hex_dmp+0x176>
		tmp[j+1] = '\0';
 8000c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8e:	3301      	adds	r3, #1
 8000c90:	3338      	adds	r3, #56	; 0x38
 8000c92:	443b      	add	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	f803 2c2c 	strb.w	r2, [r3, #-44]
		SKprintf("%s\r\n", tmp);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <hex_dmp+0x1a4>)
 8000ca2:	f001 faa9 	bl	80021f8 <SKprintf>
    }

}
 8000ca6:	bf00      	nop
 8000ca8:	3738      	adds	r7, #56	; 0x38
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000094 	.word	0x20000094
 8000cb4:	0800a160 	.word	0x0800a160
 8000cb8:	0800a16c 	.word	0x0800a16c
 8000cbc:	0800a1b8 	.word	0x0800a1b8
 8000cc0:	0800a208 	.word	0x0800a208
 8000cc4:	0800a210 	.word	0x0800a210
 8000cc8:	0800a22c 	.word	0x0800a22c
 8000ccc:	0800a234 	.word	0x0800a234
 8000cd0:	0800a238 	.word	0x0800a238
 8000cd4:	0800a240 	.word	0x0800a240

08000cd8 <input2menu>:
//==============================================================================
//
//==============================================================================

COMMAND_MENUE input2menu(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
     uint16_t i = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	80fb      	strh	r3, [r7, #6]
    COMMAND_MENUE rtn = CMD_MAX;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	717b      	strb	r3, [r7, #5]

        while( com_list[i].pt != CMD_MAX ){
 8000ce6:	e01d      	b.n	8000d24 <input2menu+0x4c>
            if (strcmp(&input_string.main[0], &com_list[i].command[0]) == 0){
 8000ce8:	88fa      	ldrh	r2, [r7, #6]
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <input2menu+0x6c>)
 8000cf6:	4413      	add	r3, r2
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4812      	ldr	r0, [pc, #72]	; (8000d48 <input2menu+0x70>)
 8000cfe:	f7ff fa6f 	bl	80001e0 <strcmp>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10a      	bne.n	8000d1e <input2menu+0x46>
                rtn = com_list[i].pt;
 8000d08:	88fa      	ldrh	r2, [r7, #6]
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <input2menu+0x6c>)
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	717b      	strb	r3, [r7, #5]
                break;
 8000d1c:	e00d      	b.n	8000d3a <input2menu+0x62>
            }
            i++;
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	3301      	adds	r3, #1
 8000d22:	80fb      	strh	r3, [r7, #6]
        while( com_list[i].pt != CMD_MAX ){
 8000d24:	88fa      	ldrh	r2, [r7, #6]
 8000d26:	4907      	ldr	r1, [pc, #28]	; (8000d44 <input2menu+0x6c>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d1d6      	bne.n	8000ce8 <input2menu+0x10>
        }

    return rtn;
 8000d3a:	797b      	ldrb	r3, [r7, #5]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	0800a7ac 	.word	0x0800a7ac
 8000d48:	2000009c 	.word	0x2000009c

08000d4c <command_split>:
//==============================================================================
//
//==============================================================================
void command_split(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
	int		i;
	int		j;
	char	moji = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
	char 	*ptr;

	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	e008      	b.n	8000d6e <command_split+0x22>
		input_string.sub_ptr[j] = 0;
 8000d5c:	4a5d      	ldr	r2, [pc, #372]	; (8000ed4 <command_split+0x188>)
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	3308      	adds	r3, #8
 8000d62:	2100      	movs	r1, #0
 8000d64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	2b0e      	cmp	r3, #14
 8000d72:	ddf3      	ble.n	8000d5c <command_split+0x10>
	}

	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e027      	b.n	8000dca <command_split+0x7e>
		switch(input_string.main[i]){
 8000d7a:	4a56      	ldr	r2, [pc, #344]	; (8000ed4 <command_split+0x188>)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b2c      	cmp	r3, #44	; 0x2c
 8000d84:	d005      	beq.n	8000d92 <command_split+0x46>
 8000d86:	2b2c      	cmp	r3, #44	; 0x2c
 8000d88:	dc0b      	bgt.n	8000da2 <command_split+0x56>
 8000d8a:	2b09      	cmp	r3, #9
 8000d8c:	d001      	beq.n	8000d92 <command_split+0x46>
 8000d8e:	2b20      	cmp	r3, #32
 8000d90:	d107      	bne.n	8000da2 <command_split+0x56>
		case ' ':		// スペース
		case ',':		//　カンマ
		case '	':		//　タブ
			input_string.main[i] = '\0';
 8000d92:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <command_split+0x188>)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
			moji = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	71fb      	strb	r3, [r7, #7]
			break;
 8000da0:	e010      	b.n	8000dc4 <command_split+0x78>
		default:
			if( moji == 0 ){
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10c      	bne.n	8000dc2 <command_split+0x76>
				if( j < INPUT_BUF_SIZE/2){
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	2b0e      	cmp	r3, #14
 8000dac:	dc07      	bgt.n	8000dbe <command_split+0x72>
					input_string.sub_ptr[j] = &input_string.main[i];
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4a48      	ldr	r2, [pc, #288]	; (8000ed4 <command_split+0x188>)
 8000db2:	441a      	add	r2, r3
 8000db4:	4947      	ldr	r1, [pc, #284]	; (8000ed4 <command_split+0x188>)
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3308      	adds	r3, #8
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				moji = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8000dc2:	bf00      	nop
	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2b1d      	cmp	r3, #29
 8000dce:	ddd4      	ble.n	8000d7a <command_split+0x2e>
		}
	}

	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	e074      	b.n	8000ec0 <command_split+0x174>
		ptr = input_string.sub_ptr[j];
 8000dd6:	4a3f      	ldr	r2, [pc, #252]	; (8000ed4 <command_split+0x188>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	3308      	adds	r3, #8
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	603b      	str	r3, [r7, #0]
		moji = 1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	71fb      	strb	r3, [r7, #7]
		if( ptr != 0 ){
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d06d      	beq.n	8000ec8 <command_split+0x17c>
			if ( ptr[0] == '0' && ptr[1] == 'x'){
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b30      	cmp	r3, #48	; 0x30
 8000df2:	d14c      	bne.n	8000e8e <command_split+0x142>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b78      	cmp	r3, #120	; 0x78
 8000dfc:	d147      	bne.n	8000e8e <command_split+0x142>
				ptr ++;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	603b      	str	r3, [r7, #0]
				ptr ++;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8000e0a:	e01c      	b.n	8000e46 <command_split+0xfa>
					if( ('0'<=*ptr && *ptr<='9') || ('A'<=*ptr && *ptr<='F') || ('a'<=*ptr && *ptr<='f')){
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b2f      	cmp	r3, #47	; 0x2f
 8000e12:	d903      	bls.n	8000e1c <command_split+0xd0>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b39      	cmp	r3, #57	; 0x39
 8000e1a:	d911      	bls.n	8000e40 <command_split+0xf4>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b40      	cmp	r3, #64	; 0x40
 8000e22:	d903      	bls.n	8000e2c <command_split+0xe0>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b46      	cmp	r3, #70	; 0x46
 8000e2a:	d909      	bls.n	8000e40 <command_split+0xf4>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b60      	cmp	r3, #96	; 0x60
 8000e32:	d903      	bls.n	8000e3c <command_split+0xf0>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b66      	cmp	r3, #102	; 0x66
 8000e3a:	d901      	bls.n	8000e40 <command_split+0xf4>

					}
					else{
						moji = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1de      	bne.n	8000e0c <command_split+0xc0>
				}

				if( moji == 1 ){
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d132      	bne.n	8000eba <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%x", &input_string.data[j]);
 8000e54:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <command_split+0x188>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	3308      	adds	r3, #8
 8000e5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	332c      	adds	r3, #44	; 0x2c
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <command_split+0x188>)
 8000e66:	4413      	add	r3, r2
 8000e68:	3304      	adds	r3, #4
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	491a      	ldr	r1, [pc, #104]	; (8000ed8 <command_split+0x18c>)
 8000e6e:	f008 f845 	bl	8008efc <siscanf>
				if( moji == 1 ){
 8000e72:	e022      	b.n	8000eba <command_split+0x16e>
				}
			}
			else{
				while( *ptr != '\0' ){
					if( '0'<=*ptr && *ptr<='9'){
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b2f      	cmp	r3, #47	; 0x2f
 8000e7a:	d903      	bls.n	8000e84 <command_split+0x138>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b39      	cmp	r3, #57	; 0x39
 8000e82:	d901      	bls.n	8000e88 <command_split+0x13c>
					}
					else{
						moji = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1ee      	bne.n	8000e74 <command_split+0x128>
				}

				if( moji == 1 ){
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10e      	bne.n	8000eba <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%d", &input_string.data[j]);
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <command_split+0x188>)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3308      	adds	r3, #8
 8000ea2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	332c      	adds	r3, #44	; 0x2c
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <command_split+0x188>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4909      	ldr	r1, [pc, #36]	; (8000edc <command_split+0x190>)
 8000eb6:	f008 f821 	bl	8008efc <siscanf>
	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b0e      	cmp	r3, #14
 8000ec4:	dd87      	ble.n	8000dd6 <command_split+0x8a>
		else{
			break;
		}
	}

}
 8000ec6:	e000      	b.n	8000eca <command_split+0x17e>
			break;
 8000ec8:	bf00      	nop
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000009c 	.word	0x2000009c
 8000ed8:	0800a248 	.word	0x0800a248
 8000edc:	0800a24c 	.word	0x0800a24c

08000ee0 <read_line_streem>:

//==============================================================================
//
//==============================================================================
 INPUT_CHAR_STEP read_line_streem(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
    uint8_t num;
    uint8_t sub_cnt;
#endif	// ___NOP
    char	string[2];

    string[0] = '\0';
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	713b      	strb	r3, [r7, #4]
    string[1] = '\0';
 8000eea:	2300      	movs	r3, #0
 8000eec:	717b      	strb	r3, [r7, #5]


    c = (char)getch(SK_UART2_DEBUG);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f001 f9ca 	bl	8002288 <getch>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]

    //SKprintf("read_line_streem()\r\n");

    if( c != 0 ){
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d04b      	beq.n	8000f96 <read_line_streem+0xb6>



        switch(input_char_step){
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <read_line_streem+0xc8>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <read_line_streem+0x2c>
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d006      	beq.n	8000f18 <read_line_streem+0x38>
                    input_char_step = INPUT_DATA_FIX;

                    command_split();
                }
            default:
                break;
 8000f0a:	e046      	b.n	8000f9a <read_line_streem+0xba>
                input_pos = 0;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <read_line_streem+0xcc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
                input_char_step = INPUT_SAVING;
 8000f12:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <read_line_streem+0xc8>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f007 ffd0 	bl	8008ec0 <isprint>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d015      	beq.n	8000f52 <read_line_streem+0x72>
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <read_line_streem+0xcc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b1c      	cmp	r3, #28
 8000f2c:	dc11      	bgt.n	8000f52 <read_line_streem+0x72>
                    input_string.main[input_pos] = c;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <read_line_streem+0xcc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	491f      	ldr	r1, [pc, #124]	; (8000fb0 <read_line_streem+0xd0>)
 8000f34:	79fa      	ldrb	r2, [r7, #7]
 8000f36:	54ca      	strb	r2, [r1, r3]
                    input_pos ++;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <read_line_streem+0xcc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <read_line_streem+0xcc>)
 8000f40:	6013      	str	r3, [r2, #0]
                    string[0] = c;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	713b      	strb	r3, [r7, #4]
                    SKprintf("%s",string);
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <read_line_streem+0xd4>)
 8000f4c:	f001 f954 	bl	80021f8 <SKprintf>
 8000f50:	e020      	b.n	8000f94 <read_line_streem+0xb4>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d10c      	bne.n	8000f72 <read_line_streem+0x92>
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <read_line_streem+0xcc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dd08      	ble.n	8000f72 <read_line_streem+0x92>
                    input_pos --;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <read_line_streem+0xcc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <read_line_streem+0xcc>)
 8000f68:	6013      	str	r3, [r2, #0]
                    SKprintf("\x08 \x08");
 8000f6a:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <read_line_streem+0xd8>)
 8000f6c:	f001 f944 	bl	80021f8 <SKprintf>
 8000f70:	e010      	b.n	8000f94 <read_line_streem+0xb4>
                else if (c == '\r') {
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b0d      	cmp	r3, #13
 8000f76:	d110      	bne.n	8000f9a <read_line_streem+0xba>
                    input_string.main[input_pos] = '\0';
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <read_line_streem+0xcc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <read_line_streem+0xd0>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	54d1      	strb	r1, [r2, r3]
                    SKprintf("\r\n");
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <read_line_streem+0xdc>)
 8000f84:	f001 f938 	bl	80021f8 <SKprintf>
                    input_char_step = INPUT_DATA_FIX;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <read_line_streem+0xc8>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	701a      	strb	r2, [r3, #0]
                    command_split();
 8000f8e:	f7ff fedd 	bl	8000d4c <command_split>
                break;
 8000f92:	e002      	b.n	8000f9a <read_line_streem+0xba>
 8000f94:	e001      	b.n	8000f9a <read_line_streem+0xba>
        }
    }
 8000f96:	bf00      	nop
 8000f98:	e000      	b.n	8000f9c <read_line_streem+0xbc>
                break;
 8000f9a:	bf00      	nop
    return(input_char_step);
 8000f9c:	4b02      	ldr	r3, [pc, #8]	; (8000fa8 <read_line_streem+0xc8>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 }
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000098 	.word	0x20000098
 8000fac:	20000090 	.word	0x20000090
 8000fb0:	2000009c 	.word	0x2000009c
 8000fb4:	0800a154 	.word	0x0800a154
 8000fb8:	0800a250 	.word	0x0800a250
 8000fbc:	0800a254 	.word	0x0800a254

08000fc0 <HAL_RTCEx_WakeUpTimerEventCallback>:
//==============================================================================
//
//==============================================================================

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	uint8_t	i;

	if( timer.start > TIMER_AV_NUM){
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000fca:	7e5b      	ldrb	r3, [r3, #25]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d941      	bls.n	8001054 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>

		timer.dt_buf[timer.av_wcnt] = timer.dt;
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000fd2:	7e1b      	ldrb	r3, [r3, #24]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	4b27      	ldr	r3, [pc, #156]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4926      	ldr	r1, [pc, #152]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000fdc:	0083      	lsls	r3, r0, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	605a      	str	r2, [r3, #4]
		timer.av_wcnt ++;
 8000fe2:	4b24      	ldr	r3, [pc, #144]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000fe4:	7e1b      	ldrb	r3, [r3, #24]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000fec:	761a      	strb	r2, [r3, #24]

		if(timer.av_wcnt > TIMER_AV_NUM){
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000ff0:	7e1b      	ldrb	r3, [r3, #24]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d920      	bls.n	8001038 <HAL_RTCEx_WakeUpTimerEventCallback+0x78>
			timer.av_wcnt = 0;
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	761a      	strb	r2, [r3, #24]
			timer.dt_av = 0;
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e00c      	b.n	8001022 <HAL_RTCEx_WakeUpTimerEventCallback+0x62>
				timer.dt_av +=  timer.dt_buf[i];
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	4919      	ldr	r1, [pc, #100]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	440b      	add	r3, r1
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4413      	add	r3, r2
 8001018:	4a16      	ldr	r2, [pc, #88]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800101a:	6153      	str	r3, [r2, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	3301      	adds	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d9ef      	bls.n	8001008 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>
			}
			timer.dt_av /= TIMER_AV_NUM;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4a12      	ldr	r2, [pc, #72]	; (8001078 <HAL_RTCEx_WakeUpTimerEventCallback+0xb8>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	085b      	lsrs	r3, r3, #1
 8001034:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001036:	6153      	str	r3, [r2, #20]
		}

		if( timer.dt_max < timer.dt ){
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d203      	bcs.n	800104c <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>
			timer.dt_max = timer.dt;
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800104a:	6113      	str	r3, [r2, #16]
		}

		timer.dt = 0;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
	}
	else{
		timer.start ++;
		timer.dt = 0;
	}
}
 8001052:	e008      	b.n	8001066 <HAL_RTCEx_WakeUpTimerEventCallback+0xa6>
		timer.start ++;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001056:	7e5b      	ldrb	r3, [r3, #25]
 8001058:	3301      	adds	r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800105e:	765a      	strb	r2, [r3, #25]
		timer.dt = 0;
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000120 	.word	0x20000120
 8001078:	aaaaaaab 	.word	0xaaaaaaab

0800107c <usr_isr_tim1_up>:

//==============================================================================
//
//==============================================================================
void usr_isr_tim1_up(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	timer.dt += 10;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <usr_isr_tim1_up+0x18>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	330a      	adds	r3, #10
 8001086:	4a03      	ldr	r2, [pc, #12]	; (8001094 <usr_isr_tim1_up+0x18>)
 8001088:	6013      	str	r3, [r2, #0]

}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	20000120 	.word	0x20000120

08001098 <Set_logflg>:
//=============================================================================
//
//
//=============================================================================
void Set_logflg(LOG_FLAG flg)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]

	if( flg < LF_MAX){
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d808      	bhi.n	80010ba <Set_logflg+0x22>
		log.flg = flg;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <Set_logflg+0x2c>)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	7193      	strb	r3, [r2, #6]
		SKprintf("log.flg=%d \r\n",log.flg);
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <Set_logflg+0x2c>)
 80010b0:	799b      	ldrb	r3, [r3, #6]
 80010b2:	4619      	mov	r1, r3
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <Set_logflg+0x30>)
 80010b6:	f001 f89f 	bl	80021f8 <SKprintf>
	}
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000144 	.word	0x20000144
 80010c8:	0800a258 	.word	0x0800a258

080010cc <LogInfo_display>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_display(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
	uint16_t	i;
	uint16_t	msec;
	uint16_t	usec;
	uint32_t	dt;
	uint16_t	rptr = log.rptr;
 80010d2:	4b4b      	ldr	r3, [pc, #300]	; (8001200 <LogInfo_display+0x134>)
 80010d4:	885b      	ldrh	r3, [r3, #2]
 80010d6:	80fb      	strh	r3, [r7, #6]


	if( log.num != 0 ){
 80010d8:	4b49      	ldr	r3, [pc, #292]	; (8001200 <LogInfo_display+0x134>)
 80010da:	889b      	ldrh	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 8086 	beq.w	80011ee <LogInfo_display+0x122>
		for(i=0; i<LOG_RECODE_MAX; i++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	81fb      	strh	r3, [r7, #14]
 80010e6:	e07d      	b.n	80011e4 <LogInfo_display+0x118>
			SKprintf("%02d:%02d:%02d.", log.rec[rptr].Hours, log.rec[rptr].Minutes, log.rec[rptr].Seconds);
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	4a45      	ldr	r2, [pc, #276]	; (8001200 <LogInfo_display+0x134>)
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	4413      	add	r3, r2
 80010f0:	3308      	adds	r3, #8
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	4a41      	ldr	r2, [pc, #260]	; (8001200 <LogInfo_display+0x134>)
 80010fa:	019b      	lsls	r3, r3, #6
 80010fc:	4413      	add	r3, r2
 80010fe:	3309      	adds	r3, #9
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	4a3e      	ldr	r2, [pc, #248]	; (8001200 <LogInfo_display+0x134>)
 8001108:	019b      	lsls	r3, r3, #6
 800110a:	4413      	add	r3, r2
 800110c:	330a      	adds	r3, #10
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4602      	mov	r2, r0
 8001112:	483c      	ldr	r0, [pc, #240]	; (8001204 <LogInfo_display+0x138>)
 8001114:	f001 f870 	bl	80021f8 <SKprintf>

			if(log.rec[rptr].dt <= log.rec[rptr].dt_av){
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	4a39      	ldr	r2, [pc, #228]	; (8001200 <LogInfo_display+0x134>)
 800111c:	019b      	lsls	r3, r3, #6
 800111e:	4413      	add	r3, r2
 8001120:	330c      	adds	r3, #12
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	4936      	ldr	r1, [pc, #216]	; (8001200 <LogInfo_display+0x134>)
 8001128:	019b      	lsls	r3, r3, #6
 800112a:	440b      	add	r3, r1
 800112c:	3310      	adds	r3, #16
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d812      	bhi.n	800115a <LogInfo_display+0x8e>
				dt = 1000000 * log.rec[rptr].dt / log.rec[rptr].dt_av;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	4a32      	ldr	r2, [pc, #200]	; (8001200 <LogInfo_display+0x134>)
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	4413      	add	r3, r2
 800113c:	330c      	adds	r3, #12
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a31      	ldr	r2, [pc, #196]	; (8001208 <LogInfo_display+0x13c>)
 8001142:	fb03 f202 	mul.w	r2, r3, r2
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	492d      	ldr	r1, [pc, #180]	; (8001200 <LogInfo_display+0x134>)
 800114a:	019b      	lsls	r3, r3, #6
 800114c:	440b      	add	r3, r1
 800114e:	3310      	adds	r3, #16
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	e012      	b.n	8001180 <LogInfo_display+0xb4>
			}
			else{
				dt = 1000000 * log.rec[rptr].dt / (log.rec[rptr].dt + 1 );
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	4a28      	ldr	r2, [pc, #160]	; (8001200 <LogInfo_display+0x134>)
 800115e:	019b      	lsls	r3, r3, #6
 8001160:	4413      	add	r3, r2
 8001162:	330c      	adds	r3, #12
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a28      	ldr	r2, [pc, #160]	; (8001208 <LogInfo_display+0x13c>)
 8001168:	fb03 f202 	mul.w	r2, r3, r2
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	4924      	ldr	r1, [pc, #144]	; (8001200 <LogInfo_display+0x134>)
 8001170:	019b      	lsls	r3, r3, #6
 8001172:	440b      	add	r3, r1
 8001174:	330c      	adds	r3, #12
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	60bb      	str	r3, [r7, #8]
			}
			msec = (uint16_t)( dt / 1000 );
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4a22      	ldr	r2, [pc, #136]	; (800120c <LogInfo_display+0x140>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	099b      	lsrs	r3, r3, #6
 800118a:	80bb      	strh	r3, [r7, #4]
			usec = (uint16_t)( dt % 1000 );
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <LogInfo_display+0x140>)
 8001190:	fba3 1302 	umull	r1, r3, r3, r2
 8001194:	099b      	lsrs	r3, r3, #6
 8001196:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	807b      	strh	r3, [r7, #2]
			SKprintf("%03d %03d ", msec,usec);
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4819      	ldr	r0, [pc, #100]	; (8001210 <LogInfo_display+0x144>)
 80011aa:	f001 f825 	bl	80021f8 <SKprintf>

			SKprintf("%s\r\n", &log.rec[log.wptr].string[0]);
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <LogInfo_display+0x134>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	019b      	lsls	r3, r3, #6
 80011b4:	3310      	adds	r3, #16
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <LogInfo_display+0x134>)
 80011b8:	4413      	add	r3, r2
 80011ba:	3304      	adds	r3, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4815      	ldr	r0, [pc, #84]	; (8001214 <LogInfo_display+0x148>)
 80011c0:	f001 f81a 	bl	80021f8 <SKprintf>

			rptr ++;
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	3301      	adds	r3, #1
 80011c8:	80fb      	strh	r3, [r7, #6]
			if( rptr > LOG_RECODE_MAX ){
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	2b64      	cmp	r3, #100	; 0x64
 80011ce:	d901      	bls.n	80011d4 <LogInfo_display+0x108>
				rptr = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	80fb      	strh	r3, [r7, #6]
			}
			if( log.wptr == rptr ){
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <LogInfo_display+0x134>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d00b      	beq.n	80011f6 <LogInfo_display+0x12a>
		for(i=0; i<LOG_RECODE_MAX; i++){
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	3301      	adds	r3, #1
 80011e2:	81fb      	strh	r3, [r7, #14]
 80011e4:	89fb      	ldrh	r3, [r7, #14]
 80011e6:	2b63      	cmp	r3, #99	; 0x63
 80011e8:	f67f af7e 	bls.w	80010e8 <LogInfo_display+0x1c>
		}
	}
	else{
		SKprintf("LOG NONE\r\n");
	}
}
 80011ec:	e004      	b.n	80011f8 <LogInfo_display+0x12c>
		SKprintf("LOG NONE\r\n");
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <LogInfo_display+0x14c>)
 80011f0:	f001 f802 	bl	80021f8 <SKprintf>
}
 80011f4:	e000      	b.n	80011f8 <LogInfo_display+0x12c>
				break;
 80011f6:	bf00      	nop
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000144 	.word	0x20000144
 8001204:	0800a268 	.word	0x0800a268
 8001208:	000f4240 	.word	0x000f4240
 800120c:	10624dd3 	.word	0x10624dd3
 8001210:	0800a278 	.word	0x0800a278
 8001214:	0800a284 	.word	0x0800a284
 8001218:	0800a28c 	.word	0x0800a28c

0800121c <LogInfo_clear>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_clear(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

	log.rptr = 0;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <LogInfo_clear+0x20>)
 8001222:	2200      	movs	r2, #0
 8001224:	805a      	strh	r2, [r3, #2]
	log.wptr = 0;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <LogInfo_clear+0x20>)
 8001228:	2200      	movs	r2, #0
 800122a:	801a      	strh	r2, [r3, #0]
	log.num = 0;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <LogInfo_clear+0x20>)
 800122e:	2200      	movs	r2, #0
 8001230:	809a      	strh	r2, [r3, #4]

	SKprintf("LOG CLEAR \r\n");
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <LogInfo_clear+0x24>)
 8001234:	f000 ffe0 	bl	80021f8 <SKprintf>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000144 	.word	0x20000144
 8001240:	0800a298 	.word	0x0800a298

08001244 <task_chk_init>:

//==============================================================================
//
//==============================================================================
void task_chk_init(void)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
	uint32_t 			*dtp;
	int		i;
	int		j;


	SKprintf("task_chk_init()\r\n");
 800124a:	4864      	ldr	r0, [pc, #400]	; (80013dc <task_chk_init+0x198>)
 800124c:	f000 ffd4 	bl	80021f8 <SKprintf>

	for( i=0; i < SK_TASK_MAX; i++ ){
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e0b8      	b.n	80013c8 <task_chk_init+0x184>
		switch(i){
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d013      	beq.n	8001284 <task_chk_init+0x40>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b02      	cmp	r3, #2
 8001260:	dc15      	bgt.n	800128e <task_chk_init+0x4a>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <task_chk_init+0x2c>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d005      	beq.n	800127a <task_chk_init+0x36>
 800126e:	e00e      	b.n	800128e <task_chk_init+0x4a>
		case SK_TASK_main:
			dtp = &Task_mainHandle;
 8001270:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <task_chk_init+0x19c>)
 8001272:	613b      	str	r3, [r7, #16]
			attr = &Task_main_attributes;
 8001274:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <task_chk_init+0x1a0>)
 8001276:	617b      	str	r3, [r7, #20]
			break;
 8001278:	e00d      	b.n	8001296 <task_chk_init+0x52>
		case SK_TASK_sub1:
			dtp = &Task_sub1Handle;
 800127a:	4b5b      	ldr	r3, [pc, #364]	; (80013e8 <task_chk_init+0x1a4>)
 800127c:	613b      	str	r3, [r7, #16]
			attr = &Task_sub1_attributes;
 800127e:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <task_chk_init+0x1a8>)
 8001280:	617b      	str	r3, [r7, #20]
			break;
 8001282:	e008      	b.n	8001296 <task_chk_init+0x52>
		case SK_TASK_sub2:
			dtp = &Task_sub2Handle;
 8001284:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <task_chk_init+0x1ac>)
 8001286:	613b      	str	r3, [r7, #16]
			attr = &Task_sub2_attributes;
 8001288:	4b5a      	ldr	r3, [pc, #360]	; (80013f4 <task_chk_init+0x1b0>)
 800128a:	617b      	str	r3, [r7, #20]
			break;
 800128c:	e003      	b.n	8001296 <task_chk_init+0x52>
		default:
			SKprintf("Error taskid\r\n");
 800128e:	485a      	ldr	r0, [pc, #360]	; (80013f8 <task_chk_init+0x1b4>)
 8001290:	f000 ffb2 	bl	80021f8 <SKprintf>
			break;
 8001294:	bf00      	nop
		}
		hTask = (TaskHandle_t *)*dtp;
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	607b      	str	r3, [r7, #4]

		for( j=0; j < configMAX_TASK_NAME_LEN; j++ ){
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	e012      	b.n	80012c8 <task_chk_init+0x84>
			task_chk_table[i].name[j] = hTask->pcTaskName[j];
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4413      	add	r3, r2
 80012a8:	3334      	adds	r3, #52	; 0x34
 80012aa:	7818      	ldrb	r0, [r3, #0]
 80012ac:	4953      	ldr	r1, [pc, #332]	; (80013fc <task_chk_init+0x1b8>)
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	18ca      	adds	r2, r1, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	4413      	add	r3, r2
 80012be:	4602      	mov	r2, r0
 80012c0:	701a      	strb	r2, [r3, #0]
		for( j=0; j < configMAX_TASK_NAME_LEN; j++ ){
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	3301      	adds	r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b0f      	cmp	r3, #15
 80012cc:	dde9      	ble.n	80012a2 <task_chk_init+0x5e>
		}
		task_chk_table[i].name[j-1] = '\0';
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1e59      	subs	r1, r3, #1
 80012d2:	484a      	ldr	r0, [pc, #296]	; (80013fc <task_chk_init+0x1b8>)
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4403      	add	r3, r0
 80012e0:	440b      	add	r3, r1
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]

		task_chk_table[i].chk_stack = hTask->pxStack;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ea:	4844      	ldr	r0, [pc, #272]	; (80013fc <task_chk_init+0x1b8>)
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4403      	add	r3, r0
 80012f8:	3310      	adds	r3, #16
 80012fa:	6019      	str	r1, [r3, #0]
		task_chk_table[i].size = attr->stack_size;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	b298      	uxth	r0, r3
 8001302:	493e      	ldr	r1, [pc, #248]	; (80013fc <task_chk_init+0x1b8>)
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	3314      	adds	r3, #20
 8001312:	4602      	mov	r2, r0
 8001314:	801a      	strh	r2, [r3, #0]
		task_chk_table[i].used = 0;
 8001316:	4939      	ldr	r1, [pc, #228]	; (80013fc <task_chk_init+0x1b8>)
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	440b      	add	r3, r1
 8001324:	3316      	adds	r3, #22
 8001326:	2200      	movs	r2, #0
 8001328:	801a      	strh	r2, [r3, #0]

		SKprintf(" %s\r\n", &task_chk_table[i].name[0]);
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4a31      	ldr	r2, [pc, #196]	; (80013fc <task_chk_init+0x1b8>)
 8001336:	4413      	add	r3, r2
 8001338:	4619      	mov	r1, r3
 800133a:	4831      	ldr	r0, [pc, #196]	; (8001400 <task_chk_init+0x1bc>)
 800133c:	f000 ff5c 	bl	80021f8 <SKprintf>
		SKprintf("  Check Start Address = %p\r\n", task_chk_table[i].chk_stack);
 8001340:	492e      	ldr	r1, [pc, #184]	; (80013fc <task_chk_init+0x1b8>)
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	3310      	adds	r3, #16
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	482b      	ldr	r0, [pc, #172]	; (8001404 <task_chk_init+0x1c0>)
 8001356:	f000 ff4f 	bl	80021f8 <SKprintf>
		SKprintf("  Size          = %d\r\n", task_chk_table[i].size);
 800135a:	4928      	ldr	r1, [pc, #160]	; (80013fc <task_chk_init+0x1b8>)
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	3314      	adds	r3, #20
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	4826      	ldr	r0, [pc, #152]	; (8001408 <task_chk_init+0x1c4>)
 8001370:	f000 ff42 	bl	80021f8 <SKprintf>
		SKprintf("  Used Size     = %d(%d%%)\r\n\r\n", task_chk_table[i].used, 100*task_chk_table[i].used/task_chk_table[i].size);
 8001374:	4921      	ldr	r1, [pc, #132]	; (80013fc <task_chk_init+0x1b8>)
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	3316      	adds	r3, #22
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	461c      	mov	r4, r3
 8001388:	491c      	ldr	r1, [pc, #112]	; (80013fc <task_chk_init+0x1b8>)
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	3316      	adds	r3, #22
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	2364      	movs	r3, #100	; 0x64
 800139e:	fb03 f102 	mul.w	r1, r3, r2
 80013a2:	4816      	ldr	r0, [pc, #88]	; (80013fc <task_chk_init+0x1b8>)
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4403      	add	r3, r0
 80013b0:	3314      	adds	r3, #20
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	fb91 f3f3 	sdiv	r3, r1, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	4621      	mov	r1, r4
 80013bc:	4813      	ldr	r0, [pc, #76]	; (800140c <task_chk_init+0x1c8>)
 80013be:	f000 ff1b 	bl	80021f8 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3301      	adds	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	f77f af43 	ble.w	8001256 <task_chk_init+0x12>

	}
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	bf00      	nop
 80013dc:	0800a2a8 	.word	0x0800a2a8
 80013e0:	20001d4c 	.word	0x20001d4c
 80013e4:	0800aae8 	.word	0x0800aae8
 80013e8:	20001d50 	.word	0x20001d50
 80013ec:	0800ab0c 	.word	0x0800ab0c
 80013f0:	20001d54 	.word	0x20001d54
 80013f4:	0800ab30 	.word	0x0800ab30
 80013f8:	0800a2bc 	.word	0x0800a2bc
 80013fc:	20001a4c 	.word	0x20001a4c
 8001400:	0800a2cc 	.word	0x0800a2cc
 8001404:	0800a2d4 	.word	0x0800a2d4
 8001408:	0800a2f4 	.word	0x0800a2f4
 800140c:	0800a30c 	.word	0x0800a30c

08001410 <task_stack_chk>:

//==============================================================================
//
//==============================================================================
void task_stack_chk(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
#ifdef ___TASK_CHK_DISPLAY
	SKprintf_uart1("\r\ntask_stack_chk()\r\n");
	SKprintf("\r\ntask_stack_chk()\r\n");
#endif	// ___TASK_CHK_DISPLAY

	for( i=0; i < SK_TASK_MAX; i++ ){
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e059      	b.n	80014d0 <task_stack_chk+0xc0>

		for( j= 0; j < task_chk_table[i].size; j++){
 800141c:	2300      	movs	r3, #0
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	e010      	b.n	8001444 <task_stack_chk+0x34>
			if(task_chk_table[i].chk_stack[j] != 0xa5){
 8001422:	492f      	ldr	r1, [pc, #188]	; (80014e0 <task_stack_chk+0xd0>)
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	3310      	adds	r3, #16
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2ba5      	cmp	r3, #165	; 0xa5
 800143c:	d110      	bne.n	8001460 <task_stack_chk+0x50>
		for( j= 0; j < task_chk_table[i].size; j++){
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	4926      	ldr	r1, [pc, #152]	; (80014e0 <task_stack_chk+0xd0>)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3314      	adds	r3, #20
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4293      	cmp	r3, r2
 800145c:	dbe1      	blt.n	8001422 <task_stack_chk+0x12>
 800145e:	e000      	b.n	8001462 <task_stack_chk+0x52>
				break;
 8001460:	bf00      	nop
			}
		}
		task_chk_table[i].used = task_chk_table[i].size - j;
 8001462:	491f      	ldr	r1, [pc, #124]	; (80014e0 <task_stack_chk+0xd0>)
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3314      	adds	r3, #20
 8001472:	881a      	ldrh	r2, [r3, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	b298      	uxth	r0, r3
 800147c:	4918      	ldr	r1, [pc, #96]	; (80014e0 <task_stack_chk+0xd0>)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3316      	adds	r3, #22
 800148c:	4602      	mov	r2, r0
 800148e:	801a      	strh	r2, [r3, #0]

#ifdef ___TASK_CHK_DISPLAY
		SKprintf(" %s:Used Size= %d(%d%%)\r\n", &task_chk_table[i].name[0], task_chk_table[i].used, (100*task_chk_table[i].used/task_chk_table[i].size));
#endif	// ___TASK_CHK_DISPLAY

		if( j < (task_chk_table[i].size/10) ){
 8001490:	4913      	ldr	r1, [pc, #76]	; (80014e0 <task_stack_chk+0xd0>)
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	3314      	adds	r3, #20
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <task_stack_chk+0xd4>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	08db      	lsrs	r3, r3, #3
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	4293      	cmp	r3, r2
 80014b2:	da0a      	bge.n	80014ca <task_stack_chk+0xba>
			SKprintf("WARNING:STACK FULL  %s\r\n", &task_chk_table[i].name[0]);
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <task_stack_chk+0xd0>)
 80014c0:	4413      	add	r3, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <task_stack_chk+0xd8>)
 80014c6:	f000 fe97 	bl	80021f8 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	dda2      	ble.n	800141c <task_stack_chk+0xc>
		}

	}
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20001a4c 	.word	0x20001a4c
 80014e4:	cccccccd 	.word	0xcccccccd
 80014e8:	0800a32c 	.word	0x0800a32c

080014ec <Disp_task_info>:
//==============================================================================
//
//==============================================================================
void Disp_task_info(SK_TASK taskid)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	SKtskTaskControlBlock *hTask;
	osThreadAttr_t		*attr;
	uint32_t 			*dtp;

	switch(taskid){
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d016      	beq.n	800152a <Disp_task_info+0x3e>
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	dc1c      	bgt.n	800153a <Disp_task_info+0x4e>
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <Disp_task_info+0x1e>
 8001504:	2b01      	cmp	r3, #1
 8001506:	d008      	beq.n	800151a <Disp_task_info+0x2e>
 8001508:	e017      	b.n	800153a <Disp_task_info+0x4e>
	case SK_TASK_main:
		dtp = &Task_mainHandle;
 800150a:	4b34      	ldr	r3, [pc, #208]	; (80015dc <Disp_task_info+0xf0>)
 800150c:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	617b      	str	r3, [r7, #20]
		attr = &Task_main_attributes;
 8001514:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <Disp_task_info+0xf4>)
 8001516:	613b      	str	r3, [r7, #16]
		break;
 8001518:	e013      	b.n	8001542 <Disp_task_info+0x56>
	case SK_TASK_sub1:
		dtp = &Task_sub1Handle;
 800151a:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <Disp_task_info+0xf8>)
 800151c:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	617b      	str	r3, [r7, #20]
		attr = &Task_sub1_attributes;
 8001524:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <Disp_task_info+0xfc>)
 8001526:	613b      	str	r3, [r7, #16]
		break;
 8001528:	e00b      	b.n	8001542 <Disp_task_info+0x56>
	case SK_TASK_sub2:
		dtp = &Task_sub2Handle;
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <Disp_task_info+0x100>)
 800152c:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	617b      	str	r3, [r7, #20]
		attr = &Task_sub2_attributes;
 8001534:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <Disp_task_info+0x104>)
 8001536:	613b      	str	r3, [r7, #16]
		break;
 8001538:	e003      	b.n	8001542 <Disp_task_info+0x56>
	default:
		SKprintf("Error taskid\r\n");
 800153a:	482e      	ldr	r0, [pc, #184]	; (80015f4 <Disp_task_info+0x108>)
 800153c:	f000 fe5c 	bl	80021f8 <SKprintf>
		break;
 8001540:	bf00      	nop
	}

	SKprintf("<<< %s >>>\r\n" ,attr->name);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	482b      	ldr	r0, [pc, #172]	; (80015f8 <Disp_task_info+0x10c>)
 800154a:	f000 fe55 	bl	80021f8 <SKprintf>
	SKprintf(" TCB Address           = %p\r\n" ,hTask);
 800154e:	6979      	ldr	r1, [r7, #20]
 8001550:	482a      	ldr	r0, [pc, #168]	; (80015fc <Disp_task_info+0x110>)
 8001552:	f000 fe51 	bl	80021f8 <SKprintf>
	SKprintf(" Stack Botom Address   = 0x%lx\r\n", hTask->pxTopOfStack );
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	4828      	ldr	r0, [pc, #160]	; (8001600 <Disp_task_info+0x114>)
 800155e:	f000 fe4b 	bl	80021f8 <SKprintf>
	SKprintf(" Stack top Address     = 0x%lx\r\n", hTask->pxStack );
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4619      	mov	r1, r3
 8001568:	4826      	ldr	r0, [pc, #152]	; (8001604 <Disp_task_info+0x118>)
 800156a:	f000 fe45 	bl	80021f8 <SKprintf>
	SKprintf(" stack_size            = %lx\r\n" ,attr->stack_size);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4619      	mov	r1, r3
 8001574:	4824      	ldr	r0, [pc, #144]	; (8001608 <Disp_task_info+0x11c>)
 8001576:	f000 fe3f 	bl	80021f8 <SKprintf>
	SKprintf(" uxTCBNumber           = %lx\r\n", hTask->uxTCBNumber );
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4619      	mov	r1, r3
 8001580:	4822      	ldr	r0, [pc, #136]	; (800160c <Disp_task_info+0x120>)
 8001582:	f000 fe39 	bl	80021f8 <SKprintf>
	SKprintf(" uxTaskNumber          = %lx\r\n", hTask->uxTaskNumber );
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158a:	4619      	mov	r1, r3
 800158c:	4820      	ldr	r0, [pc, #128]	; (8001610 <Disp_task_info+0x124>)
 800158e:	f000 fe33 	bl	80021f8 <SKprintf>
	SKprintf(" uxBasePriority        = %lx\r\n", hTask->uxBasePriority );
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4619      	mov	r1, r3
 8001598:	481e      	ldr	r0, [pc, #120]	; (8001614 <Disp_task_info+0x128>)
 800159a:	f000 fe2d 	bl	80021f8 <SKprintf>
	SKprintf(" uxMutexesHeld         = %lx\r\n", hTask->uxMutexesHeld );
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a2:	4619      	mov	r1, r3
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <Disp_task_info+0x12c>)
 80015a6:	f000 fe27 	bl	80021f8 <SKprintf>
	SKprintf(" ulNotifiedValue       = %lx\r\n", hTask->ulNotifiedValue );
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	4619      	mov	r1, r3
 80015b0:	481a      	ldr	r0, [pc, #104]	; (800161c <Disp_task_info+0x130>)
 80015b2:	f000 fe21 	bl	80021f8 <SKprintf>
	SKprintf(" ucNotifyState         = %lx\r\n", hTask->ucNotifyState );
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	4817      	ldr	r0, [pc, #92]	; (8001620 <Disp_task_info+0x134>)
 80015c2:	f000 fe19 	bl	80021f8 <SKprintf>
	SKprintf(" ucStaticallyAllocated = %lx\r\n", hTask->ucStaticallyAllocated );
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80015cc:	4619      	mov	r1, r3
 80015ce:	4815      	ldr	r0, [pc, #84]	; (8001624 <Disp_task_info+0x138>)
 80015d0:	f000 fe12 	bl	80021f8 <SKprintf>
	SKprintf(" tz_module = %lx\r\n" ,attr->tz_module);
	SKprintf(" reserved = %lx\r\n" ,attr->reserved);
#endif	// ___NOP


}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20001d4c 	.word	0x20001d4c
 80015e0:	0800aae8 	.word	0x0800aae8
 80015e4:	20001d50 	.word	0x20001d50
 80015e8:	0800ab0c 	.word	0x0800ab0c
 80015ec:	20001d54 	.word	0x20001d54
 80015f0:	0800ab30 	.word	0x0800ab30
 80015f4:	0800a2bc 	.word	0x0800a2bc
 80015f8:	0800a348 	.word	0x0800a348
 80015fc:	0800a358 	.word	0x0800a358
 8001600:	0800a378 	.word	0x0800a378
 8001604:	0800a39c 	.word	0x0800a39c
 8001608:	0800a3c0 	.word	0x0800a3c0
 800160c:	0800a3e0 	.word	0x0800a3e0
 8001610:	0800a400 	.word	0x0800a400
 8001614:	0800a420 	.word	0x0800a420
 8001618:	0800a440 	.word	0x0800a440
 800161c:	0800a460 	.word	0x0800a460
 8001620:	0800a480 	.word	0x0800a480
 8001624:	0800a4a0 	.word	0x0800a4a0

08001628 <Get_task_stackptr>:

//==============================================================================
//
//==============================================================================
void Get_task_stackptr(SK_TASK taskid, STACK_INFO *ptr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
	SKtskTaskControlBlock *hTask;
	uint32_t 			*dtp;

	switch(taskid){
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d014      	beq.n	8001664 <Get_task_stackptr+0x3c>
 800163a:	2b02      	cmp	r3, #2
 800163c:	dc18      	bgt.n	8001670 <Get_task_stackptr+0x48>
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <Get_task_stackptr+0x20>
 8001642:	2b01      	cmp	r3, #1
 8001644:	d006      	beq.n	8001654 <Get_task_stackptr+0x2c>
 8001646:	e013      	b.n	8001670 <Get_task_stackptr+0x48>
	case SK_TASK_main:
		dtp = &Task_mainHandle;
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <Get_task_stackptr+0x90>)
 800164a:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
		break;
 8001652:	e011      	b.n	8001678 <Get_task_stackptr+0x50>
	case SK_TASK_sub1:
		hTask = (TaskHandle_t)&Task_sub1Handle;
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <Get_task_stackptr+0x94>)
 8001656:	60fb      	str	r3, [r7, #12]
		dtp = &Task_sub1Handle;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <Get_task_stackptr+0x94>)
 800165a:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
		break;
 8001662:	e009      	b.n	8001678 <Get_task_stackptr+0x50>
	case SK_TASK_sub2:
		dtp = &Task_sub2Handle;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <Get_task_stackptr+0x98>)
 8001666:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
		break;
 800166e:	e003      	b.n	8001678 <Get_task_stackptr+0x50>
	default:
		SKprintf("Error taskid\r\n");
 8001670:	4814      	ldr	r0, [pc, #80]	; (80016c4 <Get_task_stackptr+0x9c>)
 8001672:	f000 fdc1 	bl	80021f8 <SKprintf>
		break;
 8001676:	bf00      	nop
	}

	SKprintf(" Stack top Address     = 0x%lx\r\n", hTask->pxStack );
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4619      	mov	r1, r3
 800167e:	4812      	ldr	r0, [pc, #72]	; (80016c8 <Get_task_stackptr+0xa0>)
 8001680:	f000 fdba 	bl	80021f8 <SKprintf>



	ptr->pxStack = (char *)hTask->pxStack;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	605a      	str	r2, [r3, #4]
	ptr->pxTopOfStack = (char *)hTask->pxTopOfStack;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	601a      	str	r2, [r3, #0]
	ptr->size = (uint16_t)(128*4);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	811a      	strh	r2, [r3, #8]

	SKprintf("pxStack=%p,pxTopOfStack=%p,size=%d\r\n", ptr->pxStack,ptr->pxTopOfStack,ptr->size);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	891b      	ldrh	r3, [r3, #8]
 80016a8:	4808      	ldr	r0, [pc, #32]	; (80016cc <Get_task_stackptr+0xa4>)
 80016aa:	f000 fda5 	bl	80021f8 <SKprintf>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20001d4c 	.word	0x20001d4c
 80016bc:	20001d50 	.word	0x20001d50
 80016c0:	20001d54 	.word	0x20001d54
 80016c4:	0800a2bc 	.word	0x0800a2bc
 80016c8:	0800a39c 	.word	0x0800a39c
 80016cc:	0800a4c0 	.word	0x0800a4c0

080016d0 <user_init>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
	RETURN_STATUS	status = RET_TRUE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	71fb      	strb	r3, [r7, #7]

	//LED_Flush(0);
	SKprintf("Initialize all configured peripherals\r\n");
 80016da:	4818      	ldr	r0, [pc, #96]	; (800173c <user_init+0x6c>)
 80016dc:	f000 fd8c 	bl	80021f8 <SKprintf>
	SKprintf("******************\r\n");
 80016e0:	4817      	ldr	r0, [pc, #92]	; (8001740 <user_init+0x70>)
 80016e2:	f000 fd89 	bl	80021f8 <SKprintf>
	SKprintf("*** UART START ***\r\n");
 80016e6:	4817      	ldr	r0, [pc, #92]	; (8001744 <user_init+0x74>)
 80016e8:	f000 fd86 	bl	80021f8 <SKprintf>
	SKprintf("******************\r\n");
 80016ec:	4814      	ldr	r0, [pc, #80]	; (8001740 <user_init+0x70>)
 80016ee:	f000 fd83 	bl	80021f8 <SKprintf>


	//-----------------------------------------------
	// Log Timer Counter
	//-----------------------------------------------
	timer.usec = 0;
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <user_init+0x78>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	835a      	strh	r2, [r3, #26]
	timer.msec = 0;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <user_init+0x78>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	839a      	strh	r2, [r3, #28]
	timer.usec_max = 0;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <user_init+0x78>)
 8001700:	2200      	movs	r2, #0
 8001702:	83da      	strh	r2, [r3, #30]
	timer.msec_max = 0;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <user_init+0x78>)
 8001706:	2200      	movs	r2, #0
 8001708:	841a      	strh	r2, [r3, #32]
	timer.dt = 0;
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <user_init+0x78>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
	timer.dt_max = 0;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <user_init+0x78>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
	timer.dt_av = 0;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <user_init+0x78>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
	timer.start = 0;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <user_init+0x78>)
 800171e:	2200      	movs	r2, #0
 8001720:	765a      	strb	r2, [r3, #25]
	timer.av_wcnt = 0;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <user_init+0x78>)
 8001724:	2200      	movs	r2, #0
 8001726:	761a      	strb	r2, [r3, #24]

	//-----------------------------------------------
	// Log Info Init
	//-----------------------------------------------
	LogInfo_clear();
 8001728:	f7ff fd78 	bl	800121c <LogInfo_clear>

	//-----------------------------------------------
	// 受信割込み準備
	//-----------------------------------------------
	// 受信準備
	status = Recive_rs485_prepaer();
 800172c:	f000 f84e 	bl	80017cc <Recive_rs485_prepaer>
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]

}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	0800a4e8 	.word	0x0800a4e8
 8001740:	0800a510 	.word	0x0800a510
 8001744:	0800a528 	.word	0x0800a528
 8001748:	20000120 	.word	0x20000120

0800174c <rtc_display>:

//==============================================================================
//
//==============================================================================
void rtc_display(void)
{
 800174c:	b5b0      	push	{r4, r5, r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	4817      	ldr	r0, [pc, #92]	; (80017b8 <rtc_display+0x6c>)
 800175a:	f002 fd87 	bl	800426c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	4619      	mov	r1, r3
 8001764:	4814      	ldr	r0, [pc, #80]	; (80017b8 <rtc_display+0x6c>)
 8001766:	f002 fe63 	bl	8004430 <HAL_RTC_GetDate>
	SKprintf("20%02d.%02d.%02d %02d:%02d:%02d\r\n", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	4618      	mov	r0, r3
 800176e:	787b      	ldrb	r3, [r7, #1]
 8001770:	461c      	mov	r4, r3
 8001772:	78bb      	ldrb	r3, [r7, #2]
 8001774:	461d      	mov	r5, r3
 8001776:	793b      	ldrb	r3, [r7, #4]
 8001778:	797a      	ldrb	r2, [r7, #5]
 800177a:	79b9      	ldrb	r1, [r7, #6]
 800177c:	9102      	str	r1, [sp, #8]
 800177e:	9201      	str	r2, [sp, #4]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	462b      	mov	r3, r5
 8001784:	4622      	mov	r2, r4
 8001786:	4601      	mov	r1, r0
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <rtc_display+0x70>)
 800178a:	f000 fd35 	bl	80021f8 <SKprintf>
	SKprintf("av=%d max=%d\r\n",timer.dt_av,timer.dt_max);
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <rtc_display+0x74>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <rtc_display+0x74>)
 8001794:	6912      	ldr	r2, [r2, #16]
 8001796:	4619      	mov	r1, r3
 8001798:	480a      	ldr	r0, [pc, #40]	; (80017c4 <rtc_display+0x78>)
 800179a:	f000 fd2d 	bl	80021f8 <SKprintf>
	SKprintf("dt_buf=%d, %d, %d\r\n", timer.dt_buf[0],timer.dt_buf[1],timer.dt_buf[2]);
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <rtc_display+0x74>)
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <rtc_display+0x74>)
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <rtc_display+0x74>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <rtc_display+0x7c>)
 80017ac:	f000 fd24 	bl	80021f8 <SKprintf>
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bdb0      	pop	{r4, r5, r7, pc}
 80017b8:	20001c14 	.word	0x20001c14
 80017bc:	0800a540 	.word	0x0800a540
 80017c0:	20000120 	.word	0x20000120
 80017c4:	0800a564 	.word	0x0800a564
 80017c8:	0800a574 	.word	0x0800a574

080017cc <Recive_rs485_prepaer>:
uint8_t Get_rcv_data(void);
//==============================================================================
//
//==============================================================================
void Recive_rs485_prepaer(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef s;

		// 受信準備
		s= HAL_UART_Receive_IT(Get_huart(), rcv_dt, 1);
 80017d2:	f000 fc55 	bl	8002080 <Get_huart>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2201      	movs	r2, #1
 80017da:	490a      	ldr	r1, [pc, #40]	; (8001804 <Recive_rs485_prepaer+0x38>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 fd6e 	bl	80052be <HAL_UART_Receive_IT>
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]

		switch(s){
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <Recive_rs485_prepaer+0x2c>
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db04      	blt.n	80017fa <Recive_rs485_prepaer+0x2e>
 80017f0:	3b01      	subs	r3, #1
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d801      	bhi.n	80017fa <Recive_rs485_prepaer+0x2e>
			break;
		case HAL_ERROR:
		case HAL_BUSY:
		case HAL_TIMEOUT:
			// SKprintf("ERROR %s RS485 RECIVE = %d\r\n",UartList[SK_UART1_RS485].name, s);
			break;
 80017f6:	e000      	b.n	80017fa <Recive_rs485_prepaer+0x2e>
			break;
 80017f8:	bf00      	nop
		}
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20001a94 	.word	0x20001a94

08001808 <Set_rcv_data>:
//==============================================================================
//
//==============================================================================

void Set_rcv_data(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
    rcvbuf[rcv_wpt] = rcv_dt[0];
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <Set_rcv_data+0x44>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <Set_rcv_data+0x48>)
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <Set_rcv_data+0x4c>)
 8001818:	5499      	strb	r1, [r3, r2]
    rcvnum ++;
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <Set_rcv_data+0x50>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <Set_rcv_data+0x50>)
 8001824:	701a      	strb	r2, [r3, #0]
    rcv_wpt ++ ;
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <Set_rcv_data+0x44>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <Set_rcv_data+0x44>)
 8001830:	701a      	strb	r2, [r3, #0]
    if( rcv_wpt > RCV_BUF_SIZE ){
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <Set_rcv_data+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b80      	cmp	r3, #128	; 0x80
 8001838:	d902      	bls.n	8001840 <Set_rcv_data+0x38>
        rcv_wpt = 0;
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <Set_rcv_data+0x44>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
    }
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20001b99 	.word	0x20001b99
 8001850:	20001a94 	.word	0x20001a94
 8001854:	20001a98 	.word	0x20001a98
 8001858:	20001b98 	.word	0x20001b98

0800185c <HAL_UART_RxCpltCallback>:

//==============================================================================
//
//==============================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	Set_rcv_data();
 8001864:	f7ff ffd0 	bl	8001808 <Set_rcv_data>
	Recive_rs485_prepaer();
 8001868:	f7ff ffb0 	bl	80017cc <Recive_rs485_prepaer>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <Get_rcv_data>:
//==============================================================================
//
//==============================================================================

uint8_t Get_rcv_data(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
    uint8_t dt;
    rcvnum --;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <Get_rcv_data+0x48>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	3b01      	subs	r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <Get_rcv_data+0x48>)
 8001884:	701a      	strb	r2, [r3, #0]
    dt =  rcvbuf[rcv_rpt];
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <Get_rcv_data+0x4c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <Get_rcv_data+0x50>)
 800188e:	5c9b      	ldrb	r3, [r3, r2]
 8001890:	71fb      	strb	r3, [r7, #7]
    rcv_rpt ++ ;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <Get_rcv_data+0x4c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <Get_rcv_data+0x4c>)
 800189c:	701a      	strb	r2, [r3, #0]
    if( rcv_rpt > RCV_BUF_SIZE ){
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <Get_rcv_data+0x4c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b80      	cmp	r3, #128	; 0x80
 80018a4:	d902      	bls.n	80018ac <Get_rcv_data+0x38>
        rcv_rpt = 0;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <Get_rcv_data+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
    }
    return dt;
 80018ac:	79fb      	ldrb	r3, [r7, #7]

}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20001b98 	.word	0x20001b98
 80018c0:	20001b9a 	.word	0x20001b9a
 80018c4:	20001a98 	.word	0x20001a98

080018c8 <rs485_com_task>:
//==============================================================================
//
//==============================================================================
void rs485_com_task(void)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
		RETURN_STATUS		status = RET_TRUE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	71fb      	strb	r3, [r7, #7]
		CMD_MSG				com_msg;
		COM_PROTOCOL_STEP	cp_step = COM_PROTOCOL_SEND;
 80018d2:	2300      	movs	r3, #0
 80018d4:	71bb      	strb	r3, [r7, #6]
		uint8_t 			num = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	717b      	strb	r3, [r7, #5]
		uint8_t dt;

	while(1){

		switch( cp_step ){
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	f000 8086 	beq.w	80019ee <rs485_com_task+0x126>
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	f300 80b8 	bgt.w	8001a58 <rs485_com_task+0x190>
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <rs485_com_task+0x2a>
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d079      	beq.n	80019e4 <rs485_com_task+0x11c>
			}

			break;

		default:
			break;
 80018f0:	e0b2      	b.n	8001a58 <rs485_com_task+0x190>
			if( com[cmd_ptr].command != RS485_CMD_MAX ){
 80018f2:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <rs485_com_task+0x19c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <rs485_com_task+0x1a0>)
 80018fa:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d01c      	beq.n	800193c <rs485_com_task+0x74>
				com_msg.command = com[cmd_ptr].command;
 8001902:	4b58      	ldr	r3, [pc, #352]	; (8001a64 <rs485_com_task+0x19c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <rs485_com_task+0x1a0>)
 800190a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800190e:	703b      	strb	r3, [r7, #0]
				com_msg.address = com[cmd_ptr].address;
 8001910:	4b54      	ldr	r3, [pc, #336]	; (8001a64 <rs485_com_task+0x19c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4a54      	ldr	r2, [pc, #336]	; (8001a68 <rs485_com_task+0x1a0>)
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	785b      	ldrb	r3, [r3, #1]
 800191c:	707b      	strb	r3, [r7, #1]
				com_msg.sub1 = com[cmd_ptr].sub1;
 800191e:	4b51      	ldr	r3, [pc, #324]	; (8001a64 <rs485_com_task+0x19c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <rs485_com_task+0x1a0>)
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	789b      	ldrb	r3, [r3, #2]
 800192a:	70bb      	strb	r3, [r7, #2]
				com_msg.rcv_byte = com[cmd_ptr].rcv_byte;
 800192c:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <rs485_com_task+0x19c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <rs485_com_task+0x1a0>)
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	78db      	ldrb	r3, [r3, #3]
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	e01e      	b.n	800197a <rs485_com_task+0xb2>
				cmd_ptr = 0;
 800193c:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <rs485_com_task+0x19c>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
				com_msg.command = com[cmd_ptr].command;
 8001942:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <rs485_com_task+0x19c>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <rs485_com_task+0x1a0>)
 800194a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800194e:	703b      	strb	r3, [r7, #0]
				com_msg.address = com[cmd_ptr].address;
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <rs485_com_task+0x19c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4a44      	ldr	r2, [pc, #272]	; (8001a68 <rs485_com_task+0x1a0>)
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	785b      	ldrb	r3, [r3, #1]
 800195c:	707b      	strb	r3, [r7, #1]
				com_msg.sub1 = com[cmd_ptr].sub1;
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <rs485_com_task+0x19c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <rs485_com_task+0x1a0>)
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	789b      	ldrb	r3, [r3, #2]
 800196a:	70bb      	strb	r3, [r7, #2]
				com_msg.rcv_byte = com[cmd_ptr].rcv_byte;
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <rs485_com_task+0x19c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4a3d      	ldr	r2, [pc, #244]	; (8001a68 <rs485_com_task+0x1a0>)
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	78db      	ldrb	r3, [r3, #3]
 8001978:	70fb      	strb	r3, [r7, #3]
			status = Send_rx485_cmd_message( &com_msg );
 800197a:	463b      	mov	r3, r7
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f9d9 	bl	8001d34 <Send_rx485_cmd_message>
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
			if( status == RET_TRUE ){
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d167      	bne.n	8001a5c <rs485_com_task+0x194>
				cp_step = COM_PROTOCOL_RECIVE;
 800198c:	2301      	movs	r3, #1
 800198e:	71bb      	strb	r3, [r7, #6]
                num = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	717b      	strb	r3, [r7, #5]
			break;
 8001994:	e062      	b.n	8001a5c <rs485_com_task+0x194>
				work_buf[num ++] = Get_rcv_data();
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	717a      	strb	r2, [r7, #5]
 800199c:	461c      	mov	r4, r3
 800199e:	f7ff ff69 	bl	8001874 <Get_rcv_data>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <rs485_com_task+0x1a4>)
 80019a8:	551a      	strb	r2, [r3, r4]
				if( Get_end_test_pt(num, work_buf) != 0 ){
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	492f      	ldr	r1, [pc, #188]	; (8001a6c <rs485_com_task+0x1a4>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f871 	bl	8001a98 <Get_end_test_pt>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <rs485_com_task+0x11c>
					SKprintf("Respons Recive\r\n");
 80019bc:	482c      	ldr	r0, [pc, #176]	; (8001a70 <rs485_com_task+0x1a8>)
 80019be:	f000 fc1b 	bl	80021f8 <SKprintf>
					 Set_Res_Message(num, work_buf, Res_mesg);
 80019c2:	797b      	ldrb	r3, [r7, #5]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4a2b      	ldr	r2, [pc, #172]	; (8001a74 <rs485_com_task+0x1ac>)
 80019c8:	4928      	ldr	r1, [pc, #160]	; (8001a6c <rs485_com_task+0x1a4>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f8ba 	bl	8001b44 <Set_Res_Message>
					cp_step = COM_PROTOCOL_RESPONS;
 80019d0:	2302      	movs	r3, #2
 80019d2:	71bb      	strb	r3, [r7, #6]
					com_step_flg = COM_RCV_INIT;
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <rs485_com_task+0x1b0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
					res_ptr = 0;
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <rs485_com_task+0x1b4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
					break;
 80019e0:	bf00      	nop
			break;
 80019e2:	e03e      	b.n	8001a62 <rs485_com_task+0x19a>
			while( rcvnum  > 0 ){
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <rs485_com_task+0x1b8>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1d4      	bne.n	8001996 <rs485_com_task+0xce>
			break;
 80019ec:	e039      	b.n	8001a62 <rs485_com_task+0x19a>
			status = RET_TRUE;
 80019ee:	2301      	movs	r3, #1
 80019f0:	71fb      	strb	r3, [r7, #7]
			switch( Res_mesg[TEXT_LENGTH+RS485_CMD_ID+1] ){
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <rs485_com_task+0x1ac>)
 80019f4:	7a9b      	ldrb	r3, [r3, #10]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d81b      	bhi.n	8001a34 <rs485_com_task+0x16c>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <rs485_com_task+0x13c>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001a1d 	.word	0x08001a1d
 8001a0c:	08001a25 	.word	0x08001a25
 8001a10:	08001a2d 	.word	0x08001a2d
				SKprintf("RS485_CMD_STATUS\r\n");
 8001a14:	481b      	ldr	r0, [pc, #108]	; (8001a84 <rs485_com_task+0x1bc>)
 8001a16:	f000 fbef 	bl	80021f8 <SKprintf>
				break;
 8001a1a:	e011      	b.n	8001a40 <rs485_com_task+0x178>
				SKprintf("RS485_CMD_VERSION\r\n");
 8001a1c:	481a      	ldr	r0, [pc, #104]	; (8001a88 <rs485_com_task+0x1c0>)
 8001a1e:	f000 fbeb 	bl	80021f8 <SKprintf>
				break;
 8001a22:	e00d      	b.n	8001a40 <rs485_com_task+0x178>
				SKprintf("RS485_CMD_MESUR\r\n");
 8001a24:	4819      	ldr	r0, [pc, #100]	; (8001a8c <rs485_com_task+0x1c4>)
 8001a26:	f000 fbe7 	bl	80021f8 <SKprintf>
				break;
 8001a2a:	e009      	b.n	8001a40 <rs485_com_task+0x178>
				SKprintf("RS485_CMD_MESUR_DATA\r\n");
 8001a2c:	4818      	ldr	r0, [pc, #96]	; (8001a90 <rs485_com_task+0x1c8>)
 8001a2e:	f000 fbe3 	bl	80021f8 <SKprintf>
				break;
 8001a32:	e005      	b.n	8001a40 <rs485_com_task+0x178>
				status = RET_FALSE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	71fb      	strb	r3, [r7, #7]
				SKprintf("ERROR Recive Command None \r\n");
 8001a38:	4816      	ldr	r0, [pc, #88]	; (8001a94 <rs485_com_task+0x1cc>)
 8001a3a:	f000 fbdd 	bl	80021f8 <SKprintf>
				break;
 8001a3e:	bf00      	nop
			if( status == RET_TRUE ){
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10c      	bne.n	8001a60 <rs485_com_task+0x198>
				cp_step = COM_PROTOCOL_SEND;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71bb      	strb	r3, [r7, #6]
				cmd_ptr ++;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <rs485_com_task+0x19c>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <rs485_com_task+0x19c>)
 8001a54:	701a      	strb	r2, [r3, #0]
				break;
 8001a56:	e004      	b.n	8001a62 <rs485_com_task+0x19a>
			break;
 8001a58:	bf00      	nop
 8001a5a:	e73e      	b.n	80018da <rs485_com_task+0x12>
			break;
 8001a5c:	bf00      	nop
 8001a5e:	e73c      	b.n	80018da <rs485_com_task+0x12>
			break;
 8001a60:	bf00      	nop
		switch( cp_step ){
 8001a62:	e73a      	b.n	80018da <rs485_com_task+0x12>
 8001a64:	20001bfc 	.word	0x20001bfc
 8001a68:	0800aa8c 	.word	0x0800aa8c
 8001a6c:	20001b18 	.word	0x20001b18
 8001a70:	0800a588 	.word	0x0800a588
 8001a74:	20001bbc 	.word	0x20001bbc
 8001a78:	20001bfe 	.word	0x20001bfe
 8001a7c:	20001bfd 	.word	0x20001bfd
 8001a80:	20001b98 	.word	0x20001b98
 8001a84:	0800a59c 	.word	0x0800a59c
 8001a88:	0800a5b0 	.word	0x0800a5b0
 8001a8c:	0800a5c4 	.word	0x0800a5c4
 8001a90:	0800a5d8 	.word	0x0800a5d8
 8001a94:	0800a5f0 	.word	0x0800a5f0

08001a98 <Get_end_test_pt>:

//==============================================================================
//
//==============================================================================
uint16_t  Get_end_test_pt(uint16_t num,uint8_t *buf )
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	80fb      	strh	r3, [r7, #6]
	uint16_t	i;
	uint16_t	rtn;

	rtn = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	81bb      	strh	r3, [r7, #12]

	for( i=0; i<num; i++){
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	81fb      	strh	r3, [r7, #14]
 8001aac:	e03f      	b.n	8001b2e <Get_end_test_pt+0x96>
		if( (i+TEXT_LENGTH) > num ){
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	1d5a      	adds	r2, r3, #5
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	db02      	blt.n	8001abe <Get_end_test_pt+0x26>
			rtn = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	81bb      	strh	r3, [r7, #12]
			//SKprintf("None\r\n");
			break;
 8001abc:	e03b      	b.n	8001b36 <Get_end_test_pt+0x9e>
		}
		else if( buf[i] == message_end_text[0]
 8001abe:	89fb      	ldrh	r3, [r7, #14]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	224d      	movs	r2, #77	; 0x4d
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d12d      	bne.n	8001b28 <Get_end_test_pt+0x90>
				&& buf[i+1] == message_end_text[1]
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2253      	movs	r2, #83	; 0x53
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d125      	bne.n	8001b28 <Get_end_test_pt+0x90>
				&& buf[i+2] == message_end_text[2]
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2247      	movs	r2, #71	; 0x47
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d11d      	bne.n	8001b28 <Get_end_test_pt+0x90>
				&& buf[i+3] == message_end_text[3]
 8001aec:	89fb      	ldrh	r3, [r7, #14]
 8001aee:	3303      	adds	r3, #3
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2245      	movs	r2, #69	; 0x45
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d115      	bne.n	8001b28 <Get_end_test_pt+0x90>
				&& buf[i+4] == message_end_text[4]
 8001afc:	89fb      	ldrh	r3, [r7, #14]
 8001afe:	3304      	adds	r3, #4
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	224e      	movs	r2, #78	; 0x4e
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d10d      	bne.n	8001b28 <Get_end_test_pt+0x90>
				&& buf[i+5] == message_end_text[5] ){
 8001b0c:	89fb      	ldrh	r3, [r7, #14]
 8001b0e:	3305      	adds	r3, #5
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2244      	movs	r2, #68	; 0x44
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d105      	bne.n	8001b28 <Get_end_test_pt+0x90>

			SKprintf("FIX\r\n");
 8001b1c:	4808      	ldr	r0, [pc, #32]	; (8001b40 <Get_end_test_pt+0xa8>)
 8001b1e:	f000 fb6b 	bl	80021f8 <SKprintf>
			rtn = i;
 8001b22:	89fb      	ldrh	r3, [r7, #14]
 8001b24:	81bb      	strh	r3, [r7, #12]
			break;
 8001b26:	e006      	b.n	8001b36 <Get_end_test_pt+0x9e>
	for( i=0; i<num; i++){
 8001b28:	89fb      	ldrh	r3, [r7, #14]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	81fb      	strh	r3, [r7, #14]
 8001b2e:	89fa      	ldrh	r2, [r7, #14]
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d3bb      	bcc.n	8001aae <Get_end_test_pt+0x16>
		}
	}

	return rtn;
 8001b36:	89bb      	ldrh	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	0800a610 	.word	0x0800a610

08001b44 <Set_Res_Message>:
//==============================================================================
//
//==============================================================================
void  Set_Res_Message(uint16_t num, uint8_t *src, uint8_t *dist)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	81fb      	strh	r3, [r7, #14]
	uint16_t	start;
	uint16_t	end;
	uint8_t		c[2];


	for( i=0; i<num; i++){
 8001b52:	2300      	movs	r3, #0
 8001b54:	83fb      	strh	r3, [r7, #30]
 8001b56:	e034      	b.n	8001bc2 <Set_Res_Message+0x7e>
		if( src[i] == res_start_text[0]
 8001b58:	8bfb      	ldrh	r3, [r7, #30]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2252      	movs	r2, #82	; 0x52
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d12a      	bne.n	8001bbc <Set_Res_Message+0x78>
				&& src[i+1] == res_start_text[1]
 8001b66:	8bfb      	ldrh	r3, [r7, #30]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2245      	movs	r2, #69	; 0x45
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d122      	bne.n	8001bbc <Set_Res_Message+0x78>
				&& src[i+2] == res_start_text[2]
 8001b76:	8bfb      	ldrh	r3, [r7, #30]
 8001b78:	3302      	adds	r3, #2
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2253      	movs	r2, #83	; 0x53
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d11a      	bne.n	8001bbc <Set_Res_Message+0x78>
				&& src[i+3] == res_start_text[3]
 8001b86:	8bfb      	ldrh	r3, [r7, #30]
 8001b88:	3303      	adds	r3, #3
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	222d      	movs	r2, #45	; 0x2d
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d112      	bne.n	8001bbc <Set_Res_Message+0x78>
				&& src[i+4] == res_start_text[4]
 8001b96:	8bfb      	ldrh	r3, [r7, #30]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2253      	movs	r2, #83	; 0x53
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10a      	bne.n	8001bbc <Set_Res_Message+0x78>
				&& src[i+5] == res_start_text[5] ){
 8001ba6:	8bfb      	ldrh	r3, [r7, #30]
 8001ba8:	3305      	adds	r3, #5
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2254      	movs	r2, #84	; 0x54
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d102      	bne.n	8001bbc <Set_Res_Message+0x78>

			start = i;
 8001bb6:	8bfb      	ldrh	r3, [r7, #30]
 8001bb8:	837b      	strh	r3, [r7, #26]
			break;
 8001bba:	e006      	b.n	8001bca <Set_Res_Message+0x86>
	for( i=0; i<num; i++){
 8001bbc:	8bfb      	ldrh	r3, [r7, #30]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	83fb      	strh	r3, [r7, #30]
 8001bc2:	8bfa      	ldrh	r2, [r7, #30]
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d3c6      	bcc.n	8001b58 <Set_Res_Message+0x14>
		}
	}


	for( i=0; i<num; i++){
 8001bca:	2300      	movs	r3, #0
 8001bcc:	83fb      	strh	r3, [r7, #30]
 8001bce:	e035      	b.n	8001c3c <Set_Res_Message+0xf8>
		if( src[i] == message_end_text[0]
 8001bd0:	8bfb      	ldrh	r3, [r7, #30]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	224d      	movs	r2, #77	; 0x4d
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d12b      	bne.n	8001c36 <Set_Res_Message+0xf2>
				&& src[i+1] == message_end_text[1]
 8001bde:	8bfb      	ldrh	r3, [r7, #30]
 8001be0:	3301      	adds	r3, #1
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	4413      	add	r3, r2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2253      	movs	r2, #83	; 0x53
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d123      	bne.n	8001c36 <Set_Res_Message+0xf2>
				&& src[i+2] == message_end_text[2]
 8001bee:	8bfb      	ldrh	r3, [r7, #30]
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2247      	movs	r2, #71	; 0x47
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d11b      	bne.n	8001c36 <Set_Res_Message+0xf2>
				&& src[i+3] == message_end_text[3]
 8001bfe:	8bfb      	ldrh	r3, [r7, #30]
 8001c00:	3303      	adds	r3, #3
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	4413      	add	r3, r2
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2245      	movs	r2, #69	; 0x45
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d113      	bne.n	8001c36 <Set_Res_Message+0xf2>
				&& src[i+4] == message_end_text[4]
 8001c0e:	8bfb      	ldrh	r3, [r7, #30]
 8001c10:	3304      	adds	r3, #4
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	224e      	movs	r2, #78	; 0x4e
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10b      	bne.n	8001c36 <Set_Res_Message+0xf2>
				&& src[i+5] == message_end_text[5] ){
 8001c1e:	8bfb      	ldrh	r3, [r7, #30]
 8001c20:	3305      	adds	r3, #5
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	4413      	add	r3, r2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2244      	movs	r2, #68	; 0x44
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d103      	bne.n	8001c36 <Set_Res_Message+0xf2>

			end = i+5+1;
 8001c2e:	8bfb      	ldrh	r3, [r7, #30]
 8001c30:	3306      	adds	r3, #6
 8001c32:	833b      	strh	r3, [r7, #24]
			break;
 8001c34:	e006      	b.n	8001c44 <Set_Res_Message+0x100>
	for( i=0; i<num; i++){
 8001c36:	8bfb      	ldrh	r3, [r7, #30]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	83fb      	strh	r3, [r7, #30]
 8001c3c:	8bfa      	ldrh	r2, [r7, #30]
 8001c3e:	89fb      	ldrh	r3, [r7, #14]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d3c5      	bcc.n	8001bd0 <Set_Res_Message+0x8c>
		}
	}

	j = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	83bb      	strh	r3, [r7, #28]
	for( i=start; i < end; i++){
 8001c48:	8b7b      	ldrh	r3, [r7, #26]
 8001c4a:	83fb      	strh	r3, [r7, #30]
 8001c4c:	e00d      	b.n	8001c6a <Set_Res_Message+0x126>
		dist[j++] = src[i];
 8001c4e:	8bfb      	ldrh	r3, [r7, #30]
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	441a      	add	r2, r3
 8001c54:	8bbb      	ldrh	r3, [r7, #28]
 8001c56:	1c59      	adds	r1, r3, #1
 8001c58:	83b9      	strh	r1, [r7, #28]
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	440b      	add	r3, r1
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	701a      	strb	r2, [r3, #0]
	for( i=start; i < end; i++){
 8001c64:	8bfb      	ldrh	r3, [r7, #30]
 8001c66:	3301      	adds	r3, #1
 8001c68:	83fb      	strh	r3, [r7, #30]
 8001c6a:	8bfa      	ldrh	r2, [r7, #30]
 8001c6c:	8b3b      	ldrh	r3, [r7, #24]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d3ed      	bcc.n	8001c4e <Set_Res_Message+0x10a>
	}

	for( i=0; i < j; i++){
 8001c72:	2300      	movs	r3, #0
 8001c74:	83fb      	strh	r3, [r7, #30]
 8001c76:	e017      	b.n	8001ca8 <Set_Res_Message+0x164>
		cmd_char[i] = ((dist[i]<0x20||dist[i]>=0x7f)? '.': dist[i]);
 8001c78:	8bfb      	ldrh	r3, [r7, #30]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b1f      	cmp	r3, #31
 8001c82:	d90a      	bls.n	8001c9a <Set_Res_Message+0x156>
 8001c84:	8bfb      	ldrh	r3, [r7, #30]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b7e      	cmp	r3, #126	; 0x7e
 8001c8e:	d804      	bhi.n	8001c9a <Set_Res_Message+0x156>
 8001c90:	8bfb      	ldrh	r3, [r7, #30]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	e000      	b.n	8001c9c <Set_Res_Message+0x158>
 8001c9a:	222e      	movs	r2, #46	; 0x2e
 8001c9c:	8bfb      	ldrh	r3, [r7, #30]
 8001c9e:	491f      	ldr	r1, [pc, #124]	; (8001d1c <Set_Res_Message+0x1d8>)
 8001ca0:	54ca      	strb	r2, [r1, r3]
	for( i=0; i < j; i++){
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	83fb      	strh	r3, [r7, #30]
 8001ca8:	8bfa      	ldrh	r2, [r7, #30]
 8001caa:	8bbb      	ldrh	r3, [r7, #28]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d3e3      	bcc.n	8001c78 <Set_Res_Message+0x134>
	}


    SKprintf("\r\nRESPONS MESSAGE = \r\n ");
 8001cb0:	481b      	ldr	r0, [pc, #108]	; (8001d20 <Set_Res_Message+0x1dc>)
 8001cb2:	f000 faa1 	bl	80021f8 <SKprintf>
    for( i=0; i < j; i++){
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	83fb      	strh	r3, [r7, #30]
 8001cba:	e00a      	b.n	8001cd2 <Set_Res_Message+0x18e>
		SKprintf("%02x ",dist[i]);
 8001cbc:	8bfb      	ldrh	r3, [r7, #30]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4817      	ldr	r0, [pc, #92]	; (8001d24 <Set_Res_Message+0x1e0>)
 8001cc8:	f000 fa96 	bl	80021f8 <SKprintf>
    for( i=0; i < j; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	8bfa      	ldrh	r2, [r7, #30]
 8001cd4:	8bbb      	ldrh	r3, [r7, #28]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3f0      	bcc.n	8001cbc <Set_Res_Message+0x178>
	}
    SKprintf("\r\n ");
 8001cda:	4813      	ldr	r0, [pc, #76]	; (8001d28 <Set_Res_Message+0x1e4>)
 8001cdc:	f000 fa8c 	bl	80021f8 <SKprintf>
    c[1] = '\0';
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	757b      	strb	r3, [r7, #21]
    for( i=0; i < j; i++){
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	83fb      	strh	r3, [r7, #30]
 8001ce8:	e00c      	b.n	8001d04 <Set_Res_Message+0x1c0>
        c[0] = cmd_char[i];
 8001cea:	8bfb      	ldrh	r3, [r7, #30]
 8001cec:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <Set_Res_Message+0x1d8>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	753b      	strb	r3, [r7, #20]
		SKprintf(" %s ", c);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <Set_Res_Message+0x1e8>)
 8001cfa:	f000 fa7d 	bl	80021f8 <SKprintf>
    for( i=0; i < j; i++){
 8001cfe:	8bfb      	ldrh	r3, [r7, #30]
 8001d00:	3301      	adds	r3, #1
 8001d02:	83fb      	strh	r3, [r7, #30]
 8001d04:	8bfa      	ldrh	r2, [r7, #30]
 8001d06:	8bbb      	ldrh	r3, [r7, #28]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d3ee      	bcc.n	8001cea <Set_Res_Message+0x1a6>
	}
    SKprintf("\r\n");
 8001d0c:	4808      	ldr	r0, [pc, #32]	; (8001d30 <Set_Res_Message+0x1ec>)
 8001d0e:	f000 fa73 	bl	80021f8 <SKprintf>

}
 8001d12:	bf00      	nop
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20001bdc 	.word	0x20001bdc
 8001d20:	0800a618 	.word	0x0800a618
 8001d24:	0800a630 	.word	0x0800a630
 8001d28:	0800a638 	.word	0x0800a638
 8001d2c:	0800a63c 	.word	0x0800a63c
 8001d30:	0800a644 	.word	0x0800a644

08001d34 <Send_rx485_cmd_message>:
//==============================================================================
//
//==============================================================================

RETURN_STATUS Send_rx485_cmd_message( CMD_MSG	 *com_msg )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	RETURN_STATUS	status = RET_TRUE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
	uint8_t		i   = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73bb      	strb	r3, [r7, #14]
	uint8_t		sum = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	737b      	strb	r3, [r7, #13]
	uint8_t		num = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	733b      	strb	r3, [r7, #12]
	uint8_t		c[2];


	// START Text
	for( i=0; i < TEXT_LENGTH; i++ ){
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73bb      	strb	r3, [r7, #14]
 8001d50:	e008      	b.n	8001d64 <Send_rx485_cmd_message+0x30>
		cmd_mesg[i] = com_start_text[i];
 8001d52:	7bba      	ldrb	r2, [r7, #14]
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	49a7      	ldr	r1, [pc, #668]	; (8001ff4 <Send_rx485_cmd_message+0x2c0>)
 8001d58:	5c89      	ldrb	r1, [r1, r2]
 8001d5a:	4aa7      	ldr	r2, [pc, #668]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001d5c:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < TEXT_LENGTH; i++ ){
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
 8001d60:	3301      	adds	r3, #1
 8001d62:	73bb      	strb	r3, [r7, #14]
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d9f3      	bls.n	8001d52 <Send_rx485_cmd_message+0x1e>
	}


	num = TEXT_LENGTH;
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	733b      	strb	r3, [r7, #12]
	switch(com_msg->command){
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	f200 80c8 	bhi.w	8001f0a <Send_rx485_cmd_message+0x1d6>
 8001d7a:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <Send_rx485_cmd_message+0x4c>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001ddd 	.word	0x08001ddd
 8001d88:	08001e37 	.word	0x08001e37
 8001d8c:	08001ea1 	.word	0x08001ea1
	case RS485_CMD_STATUS:
		cmd_mesg[num++] = '#';
 8001d90:	7b3b      	ldrb	r3, [r7, #12]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	733a      	strb	r2, [r7, #12]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b97      	ldr	r3, [pc, #604]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001d9a:	2123      	movs	r1, #35	; 0x23
 8001d9c:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = com_msg->address;
 8001d9e:	7b3b      	ldrb	r3, [r7, #12]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	733a      	strb	r2, [r7, #12]
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7859      	ldrb	r1, [r3, #1]
 8001daa:	4b93      	ldr	r3, [pc, #588]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001dac:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = RS485_AD_MASTER;
 8001dae:	7b3b      	ldrb	r3, [r7, #12]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	733a      	strb	r2, [r7, #12]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b90      	ldr	r3, [pc, #576]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001db8:	2100      	movs	r1, #0
 8001dba:	5499      	strb	r1, [r3, r2]

		cmd_mesg[num++] = '*';
 8001dbc:	7b3b      	ldrb	r3, [r7, #12]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	733a      	strb	r2, [r7, #12]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001dc6:	212a      	movs	r1, #42	; 0x2a
 8001dc8:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = com_msg->command;
 8001dca:	7b3b      	ldrb	r3, [r7, #12]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	733a      	strb	r2, [r7, #12]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7819      	ldrb	r1, [r3, #0]
 8001dd6:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001dd8:	5499      	strb	r1, [r3, r2]
		break;
 8001dda:	e09c      	b.n	8001f16 <Send_rx485_cmd_message+0x1e2>
	case RS485_CMD_VERSION:
		cmd_mesg[num++] = '#';
 8001ddc:	7b3b      	ldrb	r3, [r7, #12]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	733a      	strb	r2, [r7, #12]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b84      	ldr	r3, [pc, #528]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001de6:	2123      	movs	r1, #35	; 0x23
 8001de8:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = com_msg->address;
 8001dea:	7b3b      	ldrb	r3, [r7, #12]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	733a      	strb	r2, [r7, #12]
 8001df0:	461a      	mov	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7859      	ldrb	r1, [r3, #1]
 8001df6:	4b80      	ldr	r3, [pc, #512]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001df8:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = RS485_AD_MASTER;
 8001dfa:	7b3b      	ldrb	r3, [r7, #12]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	733a      	strb	r2, [r7, #12]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b7d      	ldr	r3, [pc, #500]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e04:	2100      	movs	r1, #0
 8001e06:	5499      	strb	r1, [r3, r2]

		cmd_mesg[num++] = '*';
 8001e08:	7b3b      	ldrb	r3, [r7, #12]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	733a      	strb	r2, [r7, #12]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b79      	ldr	r3, [pc, #484]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e12:	212a      	movs	r1, #42	; 0x2a
 8001e14:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = com_msg->command;
 8001e16:	7b3b      	ldrb	r3, [r7, #12]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	733a      	strb	r2, [r7, #12]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7819      	ldrb	r1, [r3, #0]
 8001e22:	4b75      	ldr	r3, [pc, #468]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e24:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = '$';
 8001e26:	7b3b      	ldrb	r3, [r7, #12]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	733a      	strb	r2, [r7, #12]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b72      	ldr	r3, [pc, #456]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e30:	2124      	movs	r1, #36	; 0x24
 8001e32:	5499      	strb	r1, [r3, r2]
		break;
 8001e34:	e06f      	b.n	8001f16 <Send_rx485_cmd_message+0x1e2>
	case RS485_CMD_MESUR:
		cmd_mesg[num++] = '#';
 8001e36:	7b3b      	ldrb	r3, [r7, #12]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	733a      	strb	r2, [r7, #12]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e40:	2123      	movs	r1, #35	; 0x23
 8001e42:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = com_msg->address;
 8001e44:	7b3b      	ldrb	r3, [r7, #12]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	733a      	strb	r2, [r7, #12]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7859      	ldrb	r1, [r3, #1]
 8001e50:	4b69      	ldr	r3, [pc, #420]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e52:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = RS485_AD_MASTER;
 8001e54:	7b3b      	ldrb	r3, [r7, #12]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	733a      	strb	r2, [r7, #12]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	5499      	strb	r1, [r3, r2]

		cmd_mesg[num++] = '*';
 8001e62:	7b3b      	ldrb	r3, [r7, #12]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	733a      	strb	r2, [r7, #12]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e6c:	212a      	movs	r1, #42	; 0x2a
 8001e6e:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = com_msg->command;
 8001e70:	7b3b      	ldrb	r3, [r7, #12]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	733a      	strb	r2, [r7, #12]
 8001e76:	461a      	mov	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7819      	ldrb	r1, [r3, #0]
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e7e:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = com_msg->sub1;
 8001e80:	7b3b      	ldrb	r3, [r7, #12]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	733a      	strb	r2, [r7, #12]
 8001e86:	461a      	mov	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7899      	ldrb	r1, [r3, #2]
 8001e8c:	4b5a      	ldr	r3, [pc, #360]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e8e:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = '$';
 8001e90:	7b3b      	ldrb	r3, [r7, #12]
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	733a      	strb	r2, [r7, #12]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001e9a:	2124      	movs	r1, #36	; 0x24
 8001e9c:	5499      	strb	r1, [r3, r2]
		break;
 8001e9e:	e03a      	b.n	8001f16 <Send_rx485_cmd_message+0x1e2>
	case RS485_CMD_MESUR_DATA:
		cmd_mesg[num++] = '#';
 8001ea0:	7b3b      	ldrb	r3, [r7, #12]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	733a      	strb	r2, [r7, #12]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001eaa:	2123      	movs	r1, #35	; 0x23
 8001eac:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = com_msg->address;
 8001eae:	7b3b      	ldrb	r3, [r7, #12]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	733a      	strb	r2, [r7, #12]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7859      	ldrb	r1, [r3, #1]
 8001eba:	4b4f      	ldr	r3, [pc, #316]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001ebc:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = RS485_AD_MASTER;
 8001ebe:	7b3b      	ldrb	r3, [r7, #12]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	733a      	strb	r2, [r7, #12]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	5499      	strb	r1, [r3, r2]

		cmd_mesg[num++] = '*';
 8001ecc:	7b3b      	ldrb	r3, [r7, #12]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	733a      	strb	r2, [r7, #12]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001ed6:	212a      	movs	r1, #42	; 0x2a
 8001ed8:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = com_msg->command;
 8001eda:	7b3b      	ldrb	r3, [r7, #12]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	733a      	strb	r2, [r7, #12]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7819      	ldrb	r1, [r3, #0]
 8001ee6:	4b44      	ldr	r3, [pc, #272]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001ee8:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = com_msg->sub1;
 8001eea:	7b3b      	ldrb	r3, [r7, #12]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	733a      	strb	r2, [r7, #12]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7899      	ldrb	r1, [r3, #2]
 8001ef6:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001ef8:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = '$';
 8001efa:	7b3b      	ldrb	r3, [r7, #12]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	733a      	strb	r2, [r7, #12]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001f04:	2124      	movs	r1, #36	; 0x24
 8001f06:	5499      	strb	r1, [r3, r2]
		break;
 8001f08:	e005      	b.n	8001f16 <Send_rx485_cmd_message+0x1e2>
	default:
		SKprintf("ERROE RS485 COMMAND ERR\r\n");
 8001f0a:	483c      	ldr	r0, [pc, #240]	; (8001ffc <Send_rx485_cmd_message+0x2c8>)
 8001f0c:	f000 f974 	bl	80021f8 <SKprintf>
		status = RET_FALSE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
		break;
 8001f14:	bf00      	nop
	}

	// チェックサム計算
	if( status == RET_TRUE ){
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f040 80a1 	bne.w	8002060 <Send_rx485_cmd_message+0x32c>
		sum = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	737b      	strb	r3, [r7, #13]
		for( i=TEXT_LENGTH;  i < num; i++ ){
 8001f22:	2306      	movs	r3, #6
 8001f24:	73bb      	strb	r3, [r7, #14]
 8001f26:	e008      	b.n	8001f3a <Send_rx485_cmd_message+0x206>
			sum += cmd_mesg[i];
 8001f28:	7bbb      	ldrb	r3, [r7, #14]
 8001f2a:	4a33      	ldr	r2, [pc, #204]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001f2c:	5cd2      	ldrb	r2, [r2, r3]
 8001f2e:	7b7b      	ldrb	r3, [r7, #13]
 8001f30:	4413      	add	r3, r2
 8001f32:	737b      	strb	r3, [r7, #13]
		for( i=TEXT_LENGTH;  i < num; i++ ){
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
 8001f36:	3301      	adds	r3, #1
 8001f38:	73bb      	strb	r3, [r7, #14]
 8001f3a:	7bba      	ldrb	r2, [r7, #14]
 8001f3c:	7b3b      	ldrb	r3, [r7, #12]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d3f2      	bcc.n	8001f28 <Send_rx485_cmd_message+0x1f4>
		}
		cmd_mesg[num++] = '$';
 8001f42:	7b3b      	ldrb	r3, [r7, #12]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	733a      	strb	r2, [r7, #12]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001f4c:	2124      	movs	r1, #36	; 0x24
 8001f4e:	5499      	strb	r1, [r3, r2]
		cmd_mesg[num++] = sum;
 8001f50:	7b3b      	ldrb	r3, [r7, #12]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	733a      	strb	r2, [r7, #12]
 8001f56:	4619      	mov	r1, r3
 8001f58:	4a27      	ldr	r2, [pc, #156]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001f5a:	7b7b      	ldrb	r3, [r7, #13]
 8001f5c:	5453      	strb	r3, [r2, r1]

		// END Text
		for( i=0; i < TEXT_LENGTH; i++ ){
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73bb      	strb	r3, [r7, #14]
 8001f62:	e00b      	b.n	8001f7c <Send_rx485_cmd_message+0x248>
			cmd_mesg[num++] = message_end_text[i];
 8001f64:	7bba      	ldrb	r2, [r7, #14]
 8001f66:	7b3b      	ldrb	r3, [r7, #12]
 8001f68:	1c59      	adds	r1, r3, #1
 8001f6a:	7339      	strb	r1, [r7, #12]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <Send_rx485_cmd_message+0x2cc>)
 8001f70:	5c9a      	ldrb	r2, [r3, r2]
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001f74:	545a      	strb	r2, [r3, r1]
		for( i=0; i < TEXT_LENGTH; i++ ){
 8001f76:	7bbb      	ldrb	r3, [r7, #14]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	73bb      	strb	r3, [r7, #14]
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d9f0      	bls.n	8001f64 <Send_rx485_cmd_message+0x230>
		}

		// デバック用メッセージ
		for( i=0;  i < num; i++ ){
 8001f82:	2300      	movs	r3, #0
 8001f84:	73bb      	strb	r3, [r7, #14]
 8001f86:	e014      	b.n	8001fb2 <Send_rx485_cmd_message+0x27e>
			cmd_char[i] =  (uint8_t)((cmd_mesg[i]<0x20||cmd_mesg[i]>=0x7f)? '.': cmd_mesg[i]);
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	2b1f      	cmp	r3, #31
 8001f90:	d908      	bls.n	8001fa4 <Send_rx485_cmd_message+0x270>
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	2b7e      	cmp	r3, #126	; 0x7e
 8001f9a:	d803      	bhi.n	8001fa4 <Send_rx485_cmd_message+0x270>
 8001f9c:	7bbb      	ldrb	r3, [r7, #14]
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001fa0:	5cd2      	ldrb	r2, [r2, r3]
 8001fa2:	e000      	b.n	8001fa6 <Send_rx485_cmd_message+0x272>
 8001fa4:	222e      	movs	r2, #46	; 0x2e
 8001fa6:	7bbb      	ldrb	r3, [r7, #14]
 8001fa8:	4916      	ldr	r1, [pc, #88]	; (8002004 <Send_rx485_cmd_message+0x2d0>)
 8001faa:	54ca      	strb	r2, [r1, r3]
		for( i=0;  i < num; i++ ){
 8001fac:	7bbb      	ldrb	r3, [r7, #14]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	73bb      	strb	r3, [r7, #14]
 8001fb2:	7bba      	ldrb	r2, [r7, #14]
 8001fb4:	7b3b      	ldrb	r3, [r7, #12]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d3e6      	bcc.n	8001f88 <Send_rx485_cmd_message+0x254>
		}

	    SKprintf("\r\nCOMMAND MESSAGE = \r\n ");
 8001fba:	4813      	ldr	r0, [pc, #76]	; (8002008 <Send_rx485_cmd_message+0x2d4>)
 8001fbc:	f000 f91c 	bl	80021f8 <SKprintf>
	    for( i=0; i < num; i++){
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73bb      	strb	r3, [r7, #14]
 8001fc4:	e009      	b.n	8001fda <Send_rx485_cmd_message+0x2a6>
			SKprintf("%02x ",cmd_mesg[i]);
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <Send_rx485_cmd_message+0x2c4>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480f      	ldr	r0, [pc, #60]	; (800200c <Send_rx485_cmd_message+0x2d8>)
 8001fd0:	f000 f912 	bl	80021f8 <SKprintf>
	    for( i=0; i < num; i++){
 8001fd4:	7bbb      	ldrb	r3, [r7, #14]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	73bb      	strb	r3, [r7, #14]
 8001fda:	7bba      	ldrb	r2, [r7, #14]
 8001fdc:	7b3b      	ldrb	r3, [r7, #12]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d3f1      	bcc.n	8001fc6 <Send_rx485_cmd_message+0x292>
		}
	    SKprintf("\r\n ");
 8001fe2:	480b      	ldr	r0, [pc, #44]	; (8002010 <Send_rx485_cmd_message+0x2dc>)
 8001fe4:	f000 f908 	bl	80021f8 <SKprintf>
	    c[1] = '\0';
 8001fe8:	2300      	movs	r3, #0
 8001fea:	727b      	strb	r3, [r7, #9]
	    for( i=0; i < num; i++){
 8001fec:	2300      	movs	r3, #0
 8001fee:	73bb      	strb	r3, [r7, #14]
 8001ff0:	e01d      	b.n	800202e <Send_rx485_cmd_message+0x2fa>
 8001ff2:	bf00      	nop
 8001ff4:	0800aa7c 	.word	0x0800aa7c
 8001ff8:	20001b9c 	.word	0x20001b9c
 8001ffc:	0800a688 	.word	0x0800a688
 8002000:	0800aa84 	.word	0x0800aa84
 8002004:	20001bdc 	.word	0x20001bdc
 8002008:	0800a6a4 	.word	0x0800a6a4
 800200c:	0800a630 	.word	0x0800a630
 8002010:	0800a638 	.word	0x0800a638
	        c[0] = cmd_char[i];
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <Send_rx485_cmd_message+0x338>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	723b      	strb	r3, [r7, #8]
			SKprintf(" %s ", c);
 800201c:	f107 0308 	add.w	r3, r7, #8
 8002020:	4619      	mov	r1, r3
 8002022:	4813      	ldr	r0, [pc, #76]	; (8002070 <Send_rx485_cmd_message+0x33c>)
 8002024:	f000 f8e8 	bl	80021f8 <SKprintf>
	    for( i=0; i < num; i++){
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	3301      	adds	r3, #1
 800202c:	73bb      	strb	r3, [r7, #14]
 800202e:	7bba      	ldrb	r2, [r7, #14]
 8002030:	7b3b      	ldrb	r3, [r7, #12]
 8002032:	429a      	cmp	r2, r3
 8002034:	d3ee      	bcc.n	8002014 <Send_rx485_cmd_message+0x2e0>
		}
	    SKprintf("\r\n");
 8002036:	480f      	ldr	r0, [pc, #60]	; (8002074 <Send_rx485_cmd_message+0x340>)
 8002038:	f000 f8de 	bl	80021f8 <SKprintf>

		// コマンド送信
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RS485_TX);
 800203c:	2201      	movs	r2, #1
 800203e:	2120      	movs	r1, #32
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <Send_rx485_cmd_message+0x344>)
 8002042:	f001 fa31 	bl	80034a8 <HAL_GPIO_WritePin>
		status = Send_rs485(cmd_mesg, num );
 8002046:	7b3b      	ldrb	r3, [r7, #12]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4619      	mov	r1, r3
 800204c:	480b      	ldr	r0, [pc, #44]	; (800207c <Send_rx485_cmd_message+0x348>)
 800204e:	f000 f821 	bl	8002094 <Send_rs485>
 8002052:	4603      	mov	r3, r0
 8002054:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RS485_RX);
 8002056:	2200      	movs	r2, #0
 8002058:	2120      	movs	r1, #32
 800205a:	4807      	ldr	r0, [pc, #28]	; (8002078 <Send_rx485_cmd_message+0x344>)
 800205c:	f001 fa24 	bl	80034a8 <HAL_GPIO_WritePin>
	}

	return status;
 8002060:	7bfb      	ldrb	r3, [r7, #15]

}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20001bdc 	.word	0x20001bdc
 8002070:	0800a63c 	.word	0x0800a63c
 8002074:	0800a644 	.word	0x0800a644
 8002078:	40020000 	.word	0x40020000
 800207c:	20001b9c 	.word	0x20001b9c

08002080 <Get_huart>:


/* Private function prototypes -----------------------------------------------*/

UART_HandleTypeDef * Get_huart(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
	return UartList[SK_UART1_RS485].huart;
 8002084:	4b02      	ldr	r3, [pc, #8]	; (8002090 <Get_huart+0x10>)
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	20001cc4 	.word	0x20001cc4

08002094 <Send_rs485>:

//==============================================================================
//
//==============================================================================
RETURN_STATUS Send_rs485(uint8_t *pData, uint16_t Size)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
	RETURN_STATUS status = RET_TRUE;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef s;

	//SKprintf("Send_rs485() size=%d\r\n",Size);
	s= HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, pData, Size, HAL_MAX_DELAY);
 80020a4:	480f      	ldr	r0, [pc, #60]	; (80020e4 <Send_rs485+0x50>)
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	f003 f874 	bl	800519a <HAL_UART_Transmit>
 80020b2:	4603      	mov	r3, r0
 80020b4:	73bb      	strb	r3, [r7, #14]

	switch(s){
 80020b6:	7bbb      	ldrb	r3, [r7, #14]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <Send_rs485+0x44>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0c      	blt.n	80020da <Send_rs485+0x46>
 80020c0:	3b01      	subs	r3, #1
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d809      	bhi.n	80020da <Send_rs485+0x46>
	case HAL_OK:
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		status = RET_FALSE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
		SKprintf("ERROR %s RS485 TRANSMIT = %d\r\n",UartList[SK_UART1_RS485].name, s);
 80020ca:	7bbb      	ldrb	r3, [r7, #14]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4906      	ldr	r1, [pc, #24]	; (80020e8 <Send_rs485+0x54>)
 80020d0:	4806      	ldr	r0, [pc, #24]	; (80020ec <Send_rs485+0x58>)
 80020d2:	f000 f891 	bl	80021f8 <SKprintf>
		break;
 80020d6:	e000      	b.n	80020da <Send_rs485+0x46>
		break;
 80020d8:	bf00      	nop
	}

	return status;
 80020da:	7bfb      	ldrb	r3, [r7, #15]

}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20001cc4 	.word	0x20001cc4
 80020e8:	0800aab9 	.word	0x0800aab9
 80020ec:	0800a6bc 	.word	0x0800a6bc

080020f0 <uart_Rcv_init>:
//	huart2: デバックモニター用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
void uart_Rcv_init(SK_UART id)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef s;
	s= HAL_UART_Receive_IT(UartList[id].huart, UartList[id].rcvbuf, 1);
 80020fa:	79fa      	ldrb	r2, [r7, #7]
 80020fc:	4918      	ldr	r1, [pc, #96]	; (8002160 <uart_Rcv_init+0x70>)
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	330c      	adds	r3, #12
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	79fa      	ldrb	r2, [r7, #7]
 800210e:	4914      	ldr	r1, [pc, #80]	; (8002160 <uart_Rcv_init+0x70>)
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	3310      	adds	r3, #16
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2201      	movs	r2, #1
 8002120:	4619      	mov	r1, r3
 8002122:	f003 f8cc 	bl	80052be <HAL_UART_Receive_IT>
 8002126:	4603      	mov	r3, r0
 8002128:	73fb      	strb	r3, [r7, #15]

	switch(s){
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <uart_Rcv_init+0x66>
 8002130:	2b00      	cmp	r3, #0
 8002132:	db11      	blt.n	8002158 <uart_Rcv_init+0x68>
 8002134:	3b01      	subs	r3, #1
 8002136:	2b02      	cmp	r3, #2
 8002138:	d80e      	bhi.n	8002158 <uart_Rcv_init+0x68>
	case HAL_OK:
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		SKprintf("ERROR %s RECIVE = %d\r\n",UartList[id].name, s);
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4a06      	ldr	r2, [pc, #24]	; (8002160 <uart_Rcv_init+0x70>)
 8002146:	4413      	add	r3, r2
 8002148:	3301      	adds	r3, #1
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	4619      	mov	r1, r3
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <uart_Rcv_init+0x74>)
 8002150:	f000 f852 	bl	80021f8 <SKprintf>
		break;
 8002154:	e000      	b.n	8002158 <uart_Rcv_init+0x68>
		break;
 8002156:	bf00      	nop
	}
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	0800aab8 	.word	0x0800aab8
 8002164:	0800a6dc 	.word	0x0800a6dc

08002168 <SKprintf_uart1>:
//	huart1： RS485用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
int	SKprintf_uart1 (const char *string, ...)
{
 8002168:	b40f      	push	{r0, r1, r2, r3}
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );
 8002170:	bf00      	nop
 8002172:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <SKprintf_uart1+0x88>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1fb      	bne.n	8002172 <SKprintf_uart1+0xa>

	buffer = (char *)pvPortMalloc(CHARA_MAX);
 800217a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800217e:	f006 fc8b 	bl	8008a98 <pvPortMalloc>
 8002182:	60b8      	str	r0, [r7, #8]

	if( buffer != NULL ){
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d023      	beq.n	80021d2 <SKprintf_uart1+0x6a>

		Sem_Printf = 1;
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <SKprintf_uart1+0x88>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	607b      	str	r3, [r7, #4]
		vsprintf(buffer, string, ap);
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	69b9      	ldr	r1, [r7, #24]
 800219a:	68b8      	ldr	r0, [r7, #8]
 800219c:	f006 fef2 	bl	8008f84 <vsiprintf>
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e008      	b.n	80021b8 <SKprintf_uart1+0x50>
			if(buffer[i] == '\0'){
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	4413      	add	r3, r2
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <SKprintf_uart1+0x58>
		for(i=0; i<CHARA_MAX; i++){
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3301      	adds	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2bff      	cmp	r3, #255	; 0xff
 80021bc:	ddf3      	ble.n	80021a6 <SKprintf_uart1+0x3e>
 80021be:	e000      	b.n	80021c2 <SKprintf_uart1+0x5a>
				break;
 80021c0:	bf00      	nop
			}
		}
		HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, buffer, i, HAL_MAX_DELAY);
 80021c2:	480c      	ldr	r0, [pc, #48]	; (80021f4 <SKprintf_uart1+0x8c>)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	f002 ffe4 	bl	800519a <HAL_UART_Transmit>

	}

	vPortFree(buffer);
 80021d2:	68b8      	ldr	r0, [r7, #8]
 80021d4:	f006 fd2c 	bl	8008c30 <vPortFree>

	Sem_Printf = 0;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <SKprintf_uart1+0x88>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

}
 80021de:	bf00      	nop
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021ea:	b004      	add	sp, #16
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20001c00 	.word	0x20001c00
 80021f4:	20001cc4 	.word	0x20001cc4

080021f8 <SKprintf>:
// 総和を求める関数（値は int 型を想定）
// n は、渡す引数の数、それ以降は計算する値です。
//==============================================================================

int	SKprintf (const char *string, ...)
{
 80021f8:	b40f      	push	{r0, r1, r2, r3}
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );
 8002200:	bf00      	nop
 8002202:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <SKprintf+0x88>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1fb      	bne.n	8002202 <SKprintf+0xa>

	buffer = (char *)pvPortMalloc(CHARA_MAX);
 800220a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800220e:	f006 fc43 	bl	8008a98 <pvPortMalloc>
 8002212:	60b8      	str	r0, [r7, #8]

	if( buffer != NULL ){
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d023      	beq.n	8002262 <SKprintf+0x6a>

		Sem_Printf = 1;
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <SKprintf+0x88>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	607b      	str	r3, [r7, #4]
		vsprintf(buffer, string, ap);
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	69b9      	ldr	r1, [r7, #24]
 800222a:	68b8      	ldr	r0, [r7, #8]
 800222c:	f006 feaa 	bl	8008f84 <vsiprintf>
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e008      	b.n	8002248 <SKprintf+0x50>
			if(buffer[i] == '\0'){
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	4413      	add	r3, r2
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <SKprintf+0x58>
		for(i=0; i<CHARA_MAX; i++){
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3301      	adds	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2bff      	cmp	r3, #255	; 0xff
 800224c:	ddf3      	ble.n	8002236 <SKprintf+0x3e>
 800224e:	e000      	b.n	8002252 <SKprintf+0x5a>
				break;
 8002250:	bf00      	nop
			}
		}
		HAL_UART_Transmit(UartList[SK_UART2_DEBUG].huart, buffer, i, HAL_MAX_DELAY);
 8002252:	480c      	ldr	r0, [pc, #48]	; (8002284 <SKprintf+0x8c>)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	b29a      	uxth	r2, r3
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	f002 ff9c 	bl	800519a <HAL_UART_Transmit>

	}

	vPortFree(buffer);
 8002262:	68b8      	ldr	r0, [r7, #8]
 8002264:	f006 fce4 	bl	8008c30 <vPortFree>

	Sem_Printf = 0;
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SKprintf+0x88>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

}
 800226e:	bf00      	nop
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800227a:	b004      	add	sp, #16
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20001c00 	.word	0x20001c00
 8002284:	20001d08 	.word	0x20001d08

08002288 <getch>:
//==============================================================================
//
//
//==============================================================================
int getch(SK_UART id)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	int rtn = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]

	if( *UartList[id].RcvFlg == 1 ){
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	4914      	ldr	r1, [pc, #80]	; (80022ec <getch+0x64>)
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	3314      	adds	r3, #20
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d119      	bne.n	80022e2 <getch+0x5a>
		rtn = (int) UartList[id].rcvbuf[0];
 80022ae:	79fa      	ldrb	r2, [r7, #7]
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <getch+0x64>)
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3310      	adds	r3, #16
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]
		*UartList[id].RcvFlg = 0;
 80022c4:	79fa      	ldrb	r2, [r7, #7]
 80022c6:	4909      	ldr	r1, [pc, #36]	; (80022ec <getch+0x64>)
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	3314      	adds	r3, #20
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
		uart_Rcv_init(id);
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff07 	bl	80020f0 <uart_Rcv_init>
	}

	return rtn;
 80022e2:	68fb      	ldr	r3, [r7, #12]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	0800aab8 	.word	0x0800aab8

080022f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f4:	f000 fd9e 	bl	8002e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f8:	f000 f866 	bl	80023c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fc:	f000 fa6a 	bl	80027d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002300:	f000 fa3e 	bl	8002780 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002304:	f000 f8ce 	bl	80024a4 <MX_RTC_Init>
  MX_TIM1_Init();
 8002308:	f000 f96e 	bl	80025e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800230c:	f000 f9c0 	bl	8002690 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002310:	f000 fa0c 	bl	800272c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  user_init();		// SK ADDSKprint
 8002314:	f7ff f9dc 	bl	80016d0 <user_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002318:	f003 ffae 	bl	8006278 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint8_t), &myQueue01_attributes);
 800231c:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <main+0x98>)
 800231e:	2101      	movs	r1, #1
 8002320:	2010      	movs	r0, #16
 8002322:	f004 f8a0 	bl	8006466 <osMessageQueueNew>
 8002326:	4603      	mov	r3, r0
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <main+0x9c>)
 800232a:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(uint8_t), &myQueue02_attributes);
 800232c:	4a18      	ldr	r2, [pc, #96]	; (8002390 <main+0xa0>)
 800232e:	2101      	movs	r1, #1
 8002330:	2010      	movs	r0, #16
 8002332:	f004 f898 	bl	8006466 <osMessageQueueNew>
 8002336:	4603      	mov	r3, r0
 8002338:	4a16      	ldr	r2, [pc, #88]	; (8002394 <main+0xa4>)
 800233a:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (16, sizeof(uint8_t), &myQueue03_attributes);
 800233c:	4a16      	ldr	r2, [pc, #88]	; (8002398 <main+0xa8>)
 800233e:	2101      	movs	r1, #1
 8002340:	2010      	movs	r0, #16
 8002342:	f004 f890 	bl	8006466 <osMessageQueueNew>
 8002346:	4603      	mov	r3, r0
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <main+0xac>)
 800234a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_main */
  Task_mainHandle = osThreadNew(StartDefaultTask, NULL, &Task_main_attributes);
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <main+0xb0>)
 800234e:	2100      	movs	r1, #0
 8002350:	4814      	ldr	r0, [pc, #80]	; (80023a4 <main+0xb4>)
 8002352:	f003 ffdb 	bl	800630c <osThreadNew>
 8002356:	4603      	mov	r3, r0
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <main+0xb8>)
 800235a:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub1 */
  Task_sub1Handle = osThreadNew(StartTask02, NULL, &Task_sub1_attributes);
 800235c:	4a13      	ldr	r2, [pc, #76]	; (80023ac <main+0xbc>)
 800235e:	2100      	movs	r1, #0
 8002360:	4813      	ldr	r0, [pc, #76]	; (80023b0 <main+0xc0>)
 8002362:	f003 ffd3 	bl	800630c <osThreadNew>
 8002366:	4603      	mov	r3, r0
 8002368:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <main+0xc4>)
 800236a:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub2 */
  Task_sub2Handle = osThreadNew(StartTask03, NULL, &Task_sub2_attributes);
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <main+0xc8>)
 800236e:	2100      	movs	r1, #0
 8002370:	4812      	ldr	r0, [pc, #72]	; (80023bc <main+0xcc>)
 8002372:	f003 ffcb 	bl	800630c <osThreadNew>
 8002376:	4603      	mov	r3, r0
 8002378:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <main+0xd0>)
 800237a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  SKprintf("osKernelStart()\r\n");
 800237c:	4811      	ldr	r0, [pc, #68]	; (80023c4 <main+0xd4>)
 800237e:	f7ff ff3b 	bl	80021f8 <SKprintf>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002382:	f003 ff9d 	bl	80062c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002386:	e7fe      	b.n	8002386 <main+0x96>
 8002388:	0800ab54 	.word	0x0800ab54
 800238c:	20001d58 	.word	0x20001d58
 8002390:	0800ab6c 	.word	0x0800ab6c
 8002394:	20001d5c 	.word	0x20001d5c
 8002398:	0800ab84 	.word	0x0800ab84
 800239c:	20001d60 	.word	0x20001d60
 80023a0:	0800aae8 	.word	0x0800aae8
 80023a4:	080028d9 	.word	0x080028d9
 80023a8:	20001d4c 	.word	0x20001d4c
 80023ac:	0800ab0c 	.word	0x0800ab0c
 80023b0:	080028e9 	.word	0x080028e9
 80023b4:	20001d50 	.word	0x20001d50
 80023b8:	0800ab30 	.word	0x0800ab30
 80023bc:	08002921 	.word	0x08002921
 80023c0:	20001d54 	.word	0x20001d54
 80023c4:	0800a73c 	.word	0x0800a73c

080023c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b094      	sub	sp, #80	; 0x50
 80023cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ce:	f107 0320 	add.w	r3, r7, #32
 80023d2:	2230      	movs	r2, #48	; 0x30
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f006 fd88 	bl	8008eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	4b2a      	ldr	r3, [pc, #168]	; (800249c <SystemClock_Config+0xd4>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	4a29      	ldr	r2, [pc, #164]	; (800249c <SystemClock_Config+0xd4>)
 80023f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fa:	6413      	str	r3, [r2, #64]	; 0x40
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <SystemClock_Config+0xd4>)
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002408:	2300      	movs	r3, #0
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <SystemClock_Config+0xd8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002414:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <SystemClock_Config+0xd8>)
 8002416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <SystemClock_Config+0xd8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002428:	2306      	movs	r3, #6
 800242a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800242c:	2301      	movs	r3, #1
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002430:	2301      	movs	r3, #1
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002434:	2310      	movs	r3, #16
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002438:	2302      	movs	r3, #2
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800243c:	2300      	movs	r3, #0
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002440:	2310      	movs	r3, #16
 8002442:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002444:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002448:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800244a:	2304      	movs	r3, #4
 800244c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800244e:	2307      	movs	r3, #7
 8002450:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002452:	f107 0320 	add.w	r3, r7, #32
 8002456:	4618      	mov	r0, r3
 8002458:	f001 f840 	bl	80034dc <HAL_RCC_OscConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002462:	f000 fa7f 	bl	8002964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002466:	230f      	movs	r3, #15
 8002468:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800246a:	2302      	movs	r3, #2
 800246c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002476:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	2102      	movs	r1, #2
 8002482:	4618      	mov	r0, r3
 8002484:	f001 faa2 	bl	80039cc <HAL_RCC_ClockConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800248e:	f000 fa69 	bl	8002964 <Error_Handler>
  }
}
 8002492:	bf00      	nop
 8002494:	3750      	adds	r7, #80	; 0x50
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40007000 	.word	0x40007000

080024a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024be:	4b48      	ldr	r3, [pc, #288]	; (80025e0 <MX_RTC_Init+0x13c>)
 80024c0:	4a48      	ldr	r2, [pc, #288]	; (80025e4 <MX_RTC_Init+0x140>)
 80024c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024c4:	4b46      	ldr	r3, [pc, #280]	; (80025e0 <MX_RTC_Init+0x13c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80024ca:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <MX_RTC_Init+0x13c>)
 80024cc:	227f      	movs	r2, #127	; 0x7f
 80024ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80024d0:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <MX_RTC_Init+0x13c>)
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <MX_RTC_Init+0x13c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024dc:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <MX_RTC_Init+0x13c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <MX_RTC_Init+0x13c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024e8:	483d      	ldr	r0, [pc, #244]	; (80025e0 <MX_RTC_Init+0x13c>)
 80024ea:	f001 fdaf 	bl	800404c <HAL_RTC_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80024f4:	f000 fa36 	bl	8002964 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	773b      	strb	r3, [r7, #28]
  sTime.Minutes = 0x0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	777b      	strb	r3, [r7, #29]
  sTime.Seconds = 0x0;
 8002500:	2300      	movs	r3, #0
 8002502:	77bb      	strb	r3, [r7, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002504:	2300      	movs	r3, #0
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	2201      	movs	r2, #1
 8002512:	4619      	mov	r1, r3
 8002514:	4832      	ldr	r0, [pc, #200]	; (80025e0 <MX_RTC_Init+0x13c>)
 8002516:	f001 fe0f 	bl	8004138 <HAL_RTC_SetTime>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8002520:	f000 fa20 	bl	8002964 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002524:	2301      	movs	r3, #1
 8002526:	763b      	strb	r3, [r7, #24]
  sDate.Month = RTC_MONTH_JANUARY;
 8002528:	2301      	movs	r3, #1
 800252a:	767b      	strb	r3, [r7, #25]
  sDate.Date = 0x1;
 800252c:	2301      	movs	r3, #1
 800252e:	76bb      	strb	r3, [r7, #26]
  sDate.Year = 0x0;
 8002530:	2300      	movs	r3, #0
 8002532:	76fb      	strb	r3, [r7, #27]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002534:	f107 0318 	add.w	r3, r7, #24
 8002538:	2201      	movs	r2, #1
 800253a:	4619      	mov	r1, r3
 800253c:	4828      	ldr	r0, [pc, #160]	; (80025e0 <MX_RTC_Init+0x13c>)
 800253e:	f001 fef3 	bl	8004328 <HAL_RTC_SetDate>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002548:	f000 fa0c 	bl	8002964 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800254c:	2204      	movs	r2, #4
 800254e:	2100      	movs	r1, #0
 8002550:	4823      	ldr	r0, [pc, #140]	; (80025e0 <MX_RTC_Init+0x13c>)
 8002552:	f002 f879 	bl	8004648 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800255c:	f000 fa02 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#define MAGIC_NO 0x12a5			// SK ADD

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != MAGIC_NO)
 8002560:	2100      	movs	r1, #0
 8002562:	481f      	ldr	r0, [pc, #124]	; (80025e0 <MX_RTC_Init+0x13c>)
 8002564:	f002 f96e 	bl	8004844 <HAL_RTCEx_BKUPRead>
 8002568:	4603      	mov	r3, r0
 800256a:	f241 22a5 	movw	r2, #4773	; 0x12a5
 800256e:	4293      	cmp	r3, r2
 8002570:	d032      	beq.n	80025d8 <MX_RTC_Init+0x134>
  {
    RTC_TimeTypeDef sTime = {0};
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8002580:	2300      	movs	r3, #0
 8002582:	603b      	str	r3, [r7, #0]

    sTime.Hours = 1;
 8002584:	2301      	movs	r3, #1
 8002586:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	71bb      	strb	r3, [r7, #6]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	2200      	movs	r2, #0
 8002594:	4619      	mov	r1, r3
 8002596:	4812      	ldr	r0, [pc, #72]	; (80025e0 <MX_RTC_Init+0x13c>)
 8002598:	f001 fdce 	bl	8004138 <HAL_RTC_SetTime>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_RTC_Init+0x102>
    {
      Error_Handler();
 80025a2:	f000 f9df 	bl	8002964 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80025a6:	2303      	movs	r3, #3
 80025a8:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 80025aa:	2301      	movs	r3, #1
 80025ac:	707b      	strb	r3, [r7, #1]
    sDate.Date = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 20;
 80025b2:	2314      	movs	r3, #20
 80025b4:	70fb      	strb	r3, [r7, #3]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80025b6:	463b      	mov	r3, r7
 80025b8:	2200      	movs	r2, #0
 80025ba:	4619      	mov	r1, r3
 80025bc:	4808      	ldr	r0, [pc, #32]	; (80025e0 <MX_RTC_Init+0x13c>)
 80025be:	f001 feb3 	bl	8004328 <HAL_RTC_SetDate>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_RTC_Init+0x128>
    {
      Error_Handler();
 80025c8:	f000 f9cc 	bl	8002964 <Error_Handler>

    }
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, MAGIC_NO);
 80025cc:	f241 22a5 	movw	r2, #4773	; 0x12a5
 80025d0:	2100      	movs	r1, #0
 80025d2:	4803      	ldr	r0, [pc, #12]	; (80025e0 <MX_RTC_Init+0x13c>)
 80025d4:	f002 f91c 	bl	8004810 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	3730      	adds	r7, #48	; 0x30
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20001c14 	.word	0x20001c14
 80025e4:	40002800 	.word	0x40002800

080025e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ee:	f107 0308 	add.w	r3, r7, #8
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fc:	463b      	mov	r3, r7
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <MX_TIM1_Init+0xa0>)
 8002606:	4a21      	ldr	r2, [pc, #132]	; (800268c <MX_TIM1_Init+0xa4>)
 8002608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800260a:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <MX_TIM1_Init+0xa0>)
 800260c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002610:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <MX_TIM1_Init+0xa0>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <MX_TIM1_Init+0xa0>)
 800261a:	f245 2207 	movw	r2, #20999	; 0x5207
 800261e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <MX_TIM1_Init+0xa0>)
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <MX_TIM1_Init+0xa0>)
 8002628:	2200      	movs	r2, #0
 800262a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <MX_TIM1_Init+0xa0>)
 800262e:	2200      	movs	r2, #0
 8002630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002632:	4815      	ldr	r0, [pc, #84]	; (8002688 <MX_TIM1_Init+0xa0>)
 8002634:	f002 f91e 	bl	8004874 <HAL_TIM_Base_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800263e:	f000 f991 	bl	8002964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	4619      	mov	r1, r3
 800264e:	480e      	ldr	r0, [pc, #56]	; (8002688 <MX_TIM1_Init+0xa0>)
 8002650:	f002 faca 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800265a:	f000 f983 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002666:	463b      	mov	r3, r7
 8002668:	4619      	mov	r1, r3
 800266a:	4807      	ldr	r0, [pc, #28]	; (8002688 <MX_TIM1_Init+0xa0>)
 800266c:	f002 fcc6 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002676:	f000 f975 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);    // SK ADD
 800267a:	4803      	ldr	r0, [pc, #12]	; (8002688 <MX_TIM1_Init+0xa0>)
 800267c:	f002 f94a 	bl	8004914 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8002680:	bf00      	nop
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20001c34 	.word	0x20001c34
 800268c:	40010000 	.word	0x40010000

08002690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a4:	463b      	mov	r3, r7
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <MX_TIM2_Init+0x98>)
 80026ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <MX_TIM2_Init+0x98>)
 80026b6:	2203      	movs	r2, #3
 80026b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <MX_TIM2_Init+0x98>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 209;
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <MX_TIM2_Init+0x98>)
 80026c2:	22d1      	movs	r2, #209	; 0xd1
 80026c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <MX_TIM2_Init+0x98>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <MX_TIM2_Init+0x98>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026d2:	4815      	ldr	r0, [pc, #84]	; (8002728 <MX_TIM2_Init+0x98>)
 80026d4:	f002 f8ce 	bl	8004874 <HAL_TIM_Base_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80026de:	f000 f941 	bl	8002964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	4619      	mov	r1, r3
 80026ee:	480e      	ldr	r0, [pc, #56]	; (8002728 <MX_TIM2_Init+0x98>)
 80026f0:	f002 fa7a 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80026fa:	f000 f933 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002706:	463b      	mov	r3, r7
 8002708:	4619      	mov	r1, r3
 800270a:	4807      	ldr	r0, [pc, #28]	; (8002728 <MX_TIM2_Init+0x98>)
 800270c:	f002 fc76 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002716:	f000 f925 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);    // SK ADD
 800271a:	4803      	ldr	r0, [pc, #12]	; (8002728 <MX_TIM2_Init+0x98>)
 800271c:	f002 f8fa 	bl	8004914 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20001c7c 	.word	0x20001c7c

0800272c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_USART1_UART_Init+0x4c>)
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <MX_USART1_UART_Init+0x50>)
 8002734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <MX_USART1_UART_Init+0x4c>)
 8002738:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800273c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_USART1_UART_Init+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_USART1_UART_Init+0x4c>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <MX_USART1_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_USART1_UART_Init+0x4c>)
 8002752:	220c      	movs	r2, #12
 8002754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <MX_USART1_UART_Init+0x4c>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_USART1_UART_Init+0x4c>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002762:	4805      	ldr	r0, [pc, #20]	; (8002778 <MX_USART1_UART_Init+0x4c>)
 8002764:	f002 fccc 	bl	8005100 <HAL_UART_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800276e:	f000 f8f9 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20001cc4 	.word	0x20001cc4
 800277c:	40011000 	.word	0x40011000

08002780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <MX_USART2_UART_Init+0x4c>)
 8002786:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <MX_USART2_UART_Init+0x50>)
 8002788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <MX_USART2_UART_Init+0x4c>)
 800278c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <MX_USART2_UART_Init+0x4c>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <MX_USART2_UART_Init+0x4c>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <MX_USART2_UART_Init+0x4c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <MX_USART2_UART_Init+0x4c>)
 80027a6:	220c      	movs	r2, #12
 80027a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <MX_USART2_UART_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <MX_USART2_UART_Init+0x4c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027b6:	4805      	ldr	r0, [pc, #20]	; (80027cc <MX_USART2_UART_Init+0x4c>)
 80027b8:	f002 fca2 	bl	8005100 <HAL_UART_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027c2:	f000 f8cf 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20001d08 	.word	0x20001d08
 80027d0:	40004400 	.word	0x40004400

080027d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <MX_GPIO_Init+0xf8>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a36      	ldr	r2, [pc, #216]	; (80028cc <MX_GPIO_Init+0xf8>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b34      	ldr	r3, [pc, #208]	; (80028cc <MX_GPIO_Init+0xf8>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b30      	ldr	r3, [pc, #192]	; (80028cc <MX_GPIO_Init+0xf8>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a2f      	ldr	r2, [pc, #188]	; (80028cc <MX_GPIO_Init+0xf8>)
 8002810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <MX_GPIO_Init+0xf8>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	4b29      	ldr	r3, [pc, #164]	; (80028cc <MX_GPIO_Init+0xf8>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a28      	ldr	r2, [pc, #160]	; (80028cc <MX_GPIO_Init+0xf8>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <MX_GPIO_Init+0xf8>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	4b22      	ldr	r3, [pc, #136]	; (80028cc <MX_GPIO_Init+0xf8>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a21      	ldr	r2, [pc, #132]	; (80028cc <MX_GPIO_Init+0xf8>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <MX_GPIO_Init+0xf8>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIM1_PLS_GPIO_Port, TIM1_PLS_Pin, GPIO_PIN_RESET);
 800285a:	2200      	movs	r2, #0
 800285c:	2104      	movs	r1, #4
 800285e:	481c      	ldr	r0, [pc, #112]	; (80028d0 <MX_GPIO_Init+0xfc>)
 8002860:	f000 fe22 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002864:	2200      	movs	r2, #0
 8002866:	2120      	movs	r1, #32
 8002868:	481a      	ldr	r0, [pc, #104]	; (80028d4 <MX_GPIO_Init+0x100>)
 800286a:	f000 fe1d 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800286e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002874:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4619      	mov	r1, r3
 8002884:	4812      	ldr	r0, [pc, #72]	; (80028d0 <MX_GPIO_Init+0xfc>)
 8002886:	f000 fc8b 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM1_PLS_Pin */
  GPIO_InitStruct.Pin = TIM1_PLS_Pin;
 800288a:	2304      	movs	r3, #4
 800288c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288e:	2301      	movs	r3, #1
 8002890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIM1_PLS_GPIO_Port, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	480b      	ldr	r0, [pc, #44]	; (80028d0 <MX_GPIO_Init+0xfc>)
 80028a2:	f000 fc7d 	bl	80031a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028a6:	2320      	movs	r3, #32
 80028a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028aa:	2301      	movs	r3, #1
 80028ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_GPIO_Init+0x100>)
 80028be:	f000 fc6f 	bl	80031a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020800 	.word	0x40020800
 80028d4:	40020000 	.word	0x40020000

080028d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  rtc_display();
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    osDelay(200);
 80028e0:	20c8      	movs	r0, #200	; 0xc8
 80028e2:	f003 fda5 	bl	8006430 <osDelay>
 80028e6:	e7fb      	b.n	80028e0 <StartDefaultTask+0x8>

080028e8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	 SKprintf("task2 start()\r\n");
 80028f0:	4809      	ldr	r0, [pc, #36]	; (8002918 <StartTask02+0x30>)
 80028f2:	f7ff fc81 	bl	80021f8 <SKprintf>
		uart_Rcv_init(SK_UART2_DEBUG);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff fbfa 	bl	80020f0 <uart_Rcv_init>
	task_chk_init();
 80028fc:	f7fe fca2 	bl	8001244 <task_chk_init>


	 SKprintf("task2 loop()\r\n");
 8002900:	4806      	ldr	r0, [pc, #24]	; (800291c <StartTask02+0x34>)
 8002902:	f7ff fc79 	bl	80021f8 <SKprintf>
  /* Infinite loop */
  for(;;)
  {
	  task_stack_chk();
 8002906:	f7fe fd83 	bl	8001410 <task_stack_chk>
	  debu_main();
 800290a:	f7fd fe53 	bl	80005b4 <debu_main>

//	  user_main_loop();		// SK ADD
    osDelay(100);
 800290e:	2064      	movs	r0, #100	; 0x64
 8002910:	f003 fd8e 	bl	8006430 <osDelay>
	  task_stack_chk();
 8002914:	e7f7      	b.n	8002906 <StartTask02+0x1e>
 8002916:	bf00      	nop
 8002918:	0800a750 	.word	0x0800a750
 800291c:	0800a760 	.word	0x0800a760

08002920 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
__weak void StartTask03(void *argument)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
    osDelay(100);
 8002928:	2064      	movs	r0, #100	; 0x64
 800292a:	f003 fd81 	bl	8006430 <osDelay>
    //char c[2];

	//SKprintf_uart1("===================\r\n");
	SKprintf_uart1("=== UART1 START ===\r\n");
 800292e:	4803      	ldr	r0, [pc, #12]	; (800293c <StartTask03+0x1c>)
 8002930:	f7ff fc1a 	bl	8002168 <SKprintf_uart1>

	/* Infinite loop */

	for(;;)
	{
		rs485_com_task();
 8002934:	f7fe ffc8 	bl	80018c8 <rs485_com_task>
 8002938:	e7fc      	b.n	8002934 <StartTask03+0x14>
 800293a:	bf00      	nop
 800293c:	0800a770 	.word	0x0800a770

08002940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002952:	f000 fa91 	bl	8002e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40014400 	.word	0x40014400

08002964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002968:	b672      	cpsid	i
}
 800296a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800296c:	e7fe      	b.n	800296c <Error_Handler+0x8>
	...

08002970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_MspInit+0x54>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <HAL_MspInit+0x54>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_MspInit+0x54>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_MspInit+0x54>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_MspInit+0x54>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_MspInit+0x54>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	210f      	movs	r1, #15
 80029b2:	f06f 0001 	mvn.w	r0, #1
 80029b6:	f000 fb37 	bl	8003028 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_RTC_MspInit+0x60>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d119      	bne.n	8002a1e <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029ea:	2302      	movs	r3, #2
 80029ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80029ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fa39 	bl	8003e70 <HAL_RCCEx_PeriphCLKConfig>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002a04:	f7ff ffae 	bl	8002964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_RTC_MspInit+0x64>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2105      	movs	r1, #5
 8002a12:	2003      	movs	r0, #3
 8002a14:	f000 fb08 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f000 fb21 	bl	8003060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40002800 	.word	0x40002800
 8002a2c:	42470e3c 	.word	0x42470e3c

08002a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <HAL_TIM_Base_MspInit+0x80>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d116      	bne.n	8002a70 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6453      	str	r3, [r2, #68]	; 0x44
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	210f      	movs	r1, #15
 8002a62:	2019      	movs	r0, #25
 8002a64:	f000 fae0 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a68:	2019      	movs	r0, #25
 8002a6a:	f000 faf9 	bl	8003060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a6e:	e01a      	b.n	8002aa6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a78:	d115      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_TIM_Base_MspInit+0x84>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2105      	movs	r1, #5
 8002a9a:	201c      	movs	r0, #28
 8002a9c:	f000 fac4 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aa0:	201c      	movs	r0, #28
 8002aa2:	f000 fadd 	bl	8003060 <HAL_NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a3a      	ldr	r2, [pc, #232]	; (8002bc0 <HAL_UART_MspInit+0x108>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d135      	bne.n	8002b46 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	4a38      	ldr	r2, [pc, #224]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002ae4:	f043 0310 	orr.w	r3, r3, #16
 8002ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aea:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b24:	2307      	movs	r3, #7
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4826      	ldr	r0, [pc, #152]	; (8002bc8 <HAL_UART_MspInit+0x110>)
 8002b30:	f000 fb36 	bl	80031a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2105      	movs	r1, #5
 8002b38:	2025      	movs	r0, #37	; 0x25
 8002b3a:	f000 fa75 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b3e:	2025      	movs	r0, #37	; 0x25
 8002b40:	f000 fa8e 	bl	8003060 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b44:	e038      	b.n	8002bb8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a20      	ldr	r2, [pc, #128]	; (8002bcc <HAL_UART_MspInit+0x114>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d133      	bne.n	8002bb8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_UART_MspInit+0x10c>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b88:	230c      	movs	r3, #12
 8002b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b98:	2307      	movs	r3, #7
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4809      	ldr	r0, [pc, #36]	; (8002bc8 <HAL_UART_MspInit+0x110>)
 8002ba4:	f000 fafc 	bl	80031a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2105      	movs	r1, #5
 8002bac:	2026      	movs	r0, #38	; 0x26
 8002bae:	f000 fa3b 	bl	8003028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bb2:	2026      	movs	r0, #38	; 0x26
 8002bb4:	f000 fa54 	bl	8003060 <HAL_NVIC_EnableIRQ>
}
 8002bb8:	bf00      	nop
 8002bba:	3730      	adds	r7, #48	; 0x30
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	40004400 	.word	0x40004400

08002bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	; 0x30
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <HAL_InitTick+0xd0>)
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	4a2d      	ldr	r2, [pc, #180]	; (8002ca0 <HAL_InitTick+0xd0>)
 8002bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bee:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <HAL_InitTick+0xd0>)
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bfc:	f107 020c 	add.w	r2, r7, #12
 8002c00:	f107 0310 	add.w	r3, r7, #16
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 f900 	bl	8003e0c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c0c:	f001 f8ea 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 8002c10:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <HAL_InitTick+0xd4>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	0c9b      	lsrs	r3, r3, #18
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_InitTick+0xd8>)
 8002c22:	4a22      	ldr	r2, [pc, #136]	; (8002cac <HAL_InitTick+0xdc>)
 8002c24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_InitTick+0xd8>)
 8002c28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c2c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002c2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <HAL_InitTick+0xd8>)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002c34:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <HAL_InitTick+0xd8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_InitTick+0xd8>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_InitTick+0xd8>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8002c46:	4818      	ldr	r0, [pc, #96]	; (8002ca8 <HAL_InitTick+0xd8>)
 8002c48:	f001 fe14 	bl	8004874 <HAL_TIM_Base_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002c52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11b      	bne.n	8002c92 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002c5a:	4813      	ldr	r0, [pc, #76]	; (8002ca8 <HAL_InitTick+0xd8>)
 8002c5c:	f001 fe5a 	bl	8004914 <HAL_TIM_Base_Start_IT>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d111      	bne.n	8002c92 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c6e:	2019      	movs	r0, #25
 8002c70:	f000 f9f6 	bl	8003060 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	d808      	bhi.n	8002c8c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	2019      	movs	r0, #25
 8002c80:	f000 f9d2 	bl	8003028 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c84:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <HAL_InitTick+0xe0>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e002      	b.n	8002c92 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3730      	adds	r7, #48	; 0x30
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	431bde83 	.word	0x431bde83
 8002ca8:	20001d64 	.word	0x20001d64
 8002cac:	40014400 	.word	0x40014400
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb8:	e7fe      	b.n	8002cb8 <NMI_Handler+0x4>

08002cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cbe:	e7fe      	b.n	8002cbe <HardFault_Handler+0x4>

08002cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc4:	e7fe      	b.n	8002cc4 <MemManage_Handler+0x4>

08002cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cca:	e7fe      	b.n	8002cca <BusFault_Handler+0x4>

08002ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd0:	e7fe      	b.n	8002cd0 <UsageFault_Handler+0x4>

08002cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <RTC_WKUP_IRQHandler+0x10>)
 8002ce6:	f001 fd6f 	bl	80047c8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20001c14 	.word	0x20001c14

08002cf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cf8:	4803      	ldr	r0, [pc, #12]	; (8002d08 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002cfa:	f001 fe6d 	bl	80049d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002cfe:	4803      	ldr	r0, [pc, #12]	; (8002d0c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002d00:	f001 fe6a 	bl	80049d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//  usr_isr_tim1_up();	// SK ADD
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20001c34 	.word	0x20001c34
 8002d0c:	20001d64 	.word	0x20001d64

08002d10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d14:	4803      	ldr	r0, [pc, #12]	; (8002d24 <TIM2_IRQHandler+0x14>)
 8002d16:	f001 fe5f 	bl	80049d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  usr_isr_tim1_up();	// SK ADD
 8002d1a:	f7fe f9af 	bl	800107c <usr_isr_tim1_up>

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20001c7c 	.word	0x20001c7c

08002d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <USART1_IRQHandler+0x10>)
 8002d2e:	f002 faf7 	bl	8005320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20001cc4 	.word	0x20001cc4

08002d3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d40:	4802      	ldr	r0, [pc, #8]	; (8002d4c <USART2_IRQHandler+0x10>)
 8002d42:	f002 faed 	bl	8005320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20001d08 	.word	0x20001d08

08002d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <_sbrk+0x5c>)
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <_sbrk+0x60>)
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <_sbrk+0x64>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <_sbrk+0x64>)
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <_sbrk+0x68>)
 8002d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <_sbrk+0x64>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d207      	bcs.n	8002d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d80:	f006 f874 	bl	8008e6c <__errno>
 8002d84:	4603      	mov	r3, r0
 8002d86:	220c      	movs	r2, #12
 8002d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8e:	e009      	b.n	8002da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <_sbrk+0x64>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <_sbrk+0x64>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <_sbrk+0x64>)
 8002da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002da2:	68fb      	ldr	r3, [r7, #12]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20018000 	.word	0x20018000
 8002db0:	00000400 	.word	0x00000400
 8002db4:	20001dac 	.word	0x20001dac
 8002db8:	20006718 	.word	0x20006718

08002dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <SystemInit+0x20>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <SystemInit+0x20>)
 8002dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002de4:	480d      	ldr	r0, [pc, #52]	; (8002e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002de6:	490e      	ldr	r1, [pc, #56]	; (8002e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002de8:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dec:	e002      	b.n	8002df4 <LoopCopyDataInit>

08002dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002df2:	3304      	adds	r3, #4

08002df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df8:	d3f9      	bcc.n	8002dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dfa:	4a0b      	ldr	r2, [pc, #44]	; (8002e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dfc:	4c0b      	ldr	r4, [pc, #44]	; (8002e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e00:	e001      	b.n	8002e06 <LoopFillZerobss>

08002e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e04:	3204      	adds	r2, #4

08002e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e08:	d3fb      	bcc.n	8002e02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e0a:	f7ff ffd7 	bl	8002dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e0e:	f006 f833 	bl	8008e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e12:	f7ff fa6d 	bl	80022f0 <main>
  bx  lr    
 8002e16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002e24:	0800ad74 	.word	0x0800ad74
  ldr r2, =_sbss
 8002e28:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002e2c:	20006714 	.word	0x20006714

08002e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e30:	e7fe      	b.n	8002e30 <ADC_IRQHandler>
	...

08002e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e38:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_Init+0x40>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <HAL_Init+0x40>)
 8002e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_Init+0x40>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <HAL_Init+0x40>)
 8002e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <HAL_Init+0x40>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <HAL_Init+0x40>)
 8002e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e5c:	2003      	movs	r0, #3
 8002e5e:	f000 f8d8 	bl	8003012 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e62:	200f      	movs	r0, #15
 8002e64:	f7ff feb4 	bl	8002bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e68:	f7ff fd82 	bl	8002970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023c00 	.word	0x40023c00

08002e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_IncTick+0x20>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_IncTick+0x24>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_IncTick+0x24>)
 8002e8a:	6013      	str	r3, [r2, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000008 	.word	0x20000008
 8002e9c:	20001db0 	.word	0x20001db0

08002ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_GetTick+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20001db0 	.word	0x20001db0

08002eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eea:	4a04      	ldr	r2, [pc, #16]	; (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	60d3      	str	r3, [r2, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <__NVIC_GetPriorityGrouping+0x18>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 0307 	and.w	r3, r3, #7
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db0b      	blt.n	8002f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4907      	ldr	r1, [pc, #28]	; (8002f54 <__NVIC_EnableIRQ+0x38>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	db0a      	blt.n	8002f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	490c      	ldr	r1, [pc, #48]	; (8002fa4 <__NVIC_SetPriority+0x4c>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	0112      	lsls	r2, r2, #4
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f80:	e00a      	b.n	8002f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4908      	ldr	r1, [pc, #32]	; (8002fa8 <__NVIC_SetPriority+0x50>)
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	3b04      	subs	r3, #4
 8002f90:	0112      	lsls	r2, r2, #4
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	440b      	add	r3, r1
 8002f96:	761a      	strb	r2, [r3, #24]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000e100 	.word	0xe000e100
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	; 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f1c3 0307 	rsb	r3, r3, #7
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	bf28      	it	cs
 8002fca:	2304      	movcs	r3, #4
 8002fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d902      	bls.n	8002fdc <NVIC_EncodePriority+0x30>
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3b03      	subs	r3, #3
 8002fda:	e000      	b.n	8002fde <NVIC_EncodePriority+0x32>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	401a      	ands	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	43d9      	mvns	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	4313      	orrs	r3, r2
         );
}
 8003006:	4618      	mov	r0, r3
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff4c 	bl	8002eb8 <__NVIC_SetPriorityGrouping>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800303a:	f7ff ff61 	bl	8002f00 <__NVIC_GetPriorityGrouping>
 800303e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f7ff ffb1 	bl	8002fac <NVIC_EncodePriority>
 800304a:	4602      	mov	r2, r0
 800304c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff80 	bl	8002f58 <__NVIC_SetPriority>
}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff54 	bl	8002f1c <__NVIC_EnableIRQ>
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800308a:	f7ff ff09 	bl	8002ea0 <HAL_GetTick>
 800308e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d008      	beq.n	80030ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e052      	b.n	8003154 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0216 	bic.w	r2, r2, #22
 80030bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_DMA_Abort+0x62>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0208 	bic.w	r2, r2, #8
 80030ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030fe:	e013      	b.n	8003128 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003100:	f7ff fece 	bl	8002ea0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b05      	cmp	r3, #5
 800310c:	d90c      	bls.n	8003128 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2203      	movs	r2, #3
 8003118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e015      	b.n	8003154 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e4      	bne.n	8003100 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	223f      	movs	r2, #63	; 0x3f
 800313c:	409a      	lsls	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d004      	beq.n	800317a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00c      	b.n	8003194 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2205      	movs	r2, #5
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	; 0x24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	e159      	b.n	8003470 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f040 8148 	bne.w	800346a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d005      	beq.n	80031f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d130      	bne.n	8003254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 0201 	and.w	r2, r3, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b03      	cmp	r3, #3
 800325e:	d017      	beq.n	8003290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2203      	movs	r2, #3
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d123      	bne.n	80032e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	08da      	lsrs	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3208      	adds	r2, #8
 80032a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	08da      	lsrs	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3208      	adds	r2, #8
 80032de:	69b9      	ldr	r1, [r7, #24]
 80032e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80a2 	beq.w	800346a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4b57      	ldr	r3, [pc, #348]	; (8003488 <HAL_GPIO_Init+0x2e8>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	4a56      	ldr	r2, [pc, #344]	; (8003488 <HAL_GPIO_Init+0x2e8>)
 8003330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003334:	6453      	str	r3, [r2, #68]	; 0x44
 8003336:	4b54      	ldr	r3, [pc, #336]	; (8003488 <HAL_GPIO_Init+0x2e8>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003342:	4a52      	ldr	r2, [pc, #328]	; (800348c <HAL_GPIO_Init+0x2ec>)
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	3302      	adds	r3, #2
 800334a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	220f      	movs	r2, #15
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a49      	ldr	r2, [pc, #292]	; (8003490 <HAL_GPIO_Init+0x2f0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d019      	beq.n	80033a2 <HAL_GPIO_Init+0x202>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a48      	ldr	r2, [pc, #288]	; (8003494 <HAL_GPIO_Init+0x2f4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <HAL_GPIO_Init+0x1fe>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a47      	ldr	r2, [pc, #284]	; (8003498 <HAL_GPIO_Init+0x2f8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00d      	beq.n	800339a <HAL_GPIO_Init+0x1fa>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a46      	ldr	r2, [pc, #280]	; (800349c <HAL_GPIO_Init+0x2fc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d007      	beq.n	8003396 <HAL_GPIO_Init+0x1f6>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a45      	ldr	r2, [pc, #276]	; (80034a0 <HAL_GPIO_Init+0x300>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_GPIO_Init+0x1f2>
 800338e:	2304      	movs	r3, #4
 8003390:	e008      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 8003392:	2307      	movs	r3, #7
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 8003396:	2303      	movs	r3, #3
 8003398:	e004      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 800339a:	2302      	movs	r3, #2
 800339c:	e002      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_GPIO_Init+0x204>
 80033a2:	2300      	movs	r3, #0
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	f002 0203 	and.w	r2, r2, #3
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	4093      	lsls	r3, r2
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033b4:	4935      	ldr	r1, [pc, #212]	; (800348c <HAL_GPIO_Init+0x2ec>)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	3302      	adds	r3, #2
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033c2:	4b38      	ldr	r3, [pc, #224]	; (80034a4 <HAL_GPIO_Init+0x304>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033e6:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <HAL_GPIO_Init+0x304>)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ec:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <HAL_GPIO_Init+0x304>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003410:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <HAL_GPIO_Init+0x304>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003416:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <HAL_GPIO_Init+0x304>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343a:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <HAL_GPIO_Init+0x304>)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003440:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <HAL_GPIO_Init+0x304>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003464:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <HAL_GPIO_Init+0x304>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3301      	adds	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b0f      	cmp	r3, #15
 8003474:	f67f aea2 	bls.w	80031bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3724      	adds	r7, #36	; 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	40013800 	.word	0x40013800
 8003490:	40020000 	.word	0x40020000
 8003494:	40020400 	.word	0x40020400
 8003498:	40020800 	.word	0x40020800
 800349c:	40020c00 	.word	0x40020c00
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
 80034b4:	4613      	mov	r3, r2
 80034b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b8:	787b      	ldrb	r3, [r7, #1]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c4:	e003      	b.n	80034ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	041a      	lsls	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	619a      	str	r2, [r3, #24]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e267      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d075      	beq.n	80035e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034fa:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b04      	cmp	r3, #4
 8003504:	d00c      	beq.n	8003520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003506:	4b85      	ldr	r3, [pc, #532]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350e:	2b08      	cmp	r3, #8
 8003510:	d112      	bne.n	8003538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003512:	4b82      	ldr	r3, [pc, #520]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351e:	d10b      	bne.n	8003538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	4b7e      	ldr	r3, [pc, #504]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d05b      	beq.n	80035e4 <HAL_RCC_OscConfig+0x108>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d157      	bne.n	80035e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e242      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d106      	bne.n	8003550 <HAL_RCC_OscConfig+0x74>
 8003542:	4b76      	ldr	r3, [pc, #472]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a75      	ldr	r2, [pc, #468]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e01d      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x98>
 800355a:	4b70      	ldr	r3, [pc, #448]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6f      	ldr	r2, [pc, #444]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b6d      	ldr	r3, [pc, #436]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6c      	ldr	r2, [pc, #432]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0xb0>
 8003574:	4b69      	ldr	r3, [pc, #420]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a68      	ldr	r2, [pc, #416]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b66      	ldr	r3, [pc, #408]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a65      	ldr	r2, [pc, #404]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7ff fc84 	bl	8002ea0 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359c:	f7ff fc80 	bl	8002ea0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e207      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b5b      	ldr	r3, [pc, #364]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0xc0>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7ff fc70 	bl	8002ea0 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7ff fc6c 	bl	8002ea0 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e1f3      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0xe8>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d063      	beq.n	80036ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035f2:	4b4a      	ldr	r3, [pc, #296]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fe:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003606:	2b08      	cmp	r3, #8
 8003608:	d11c      	bne.n	8003644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d116      	bne.n	8003644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x152>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1c7      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4937      	ldr	r1, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	e03a      	b.n	80036ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <HAL_RCC_OscConfig+0x244>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7ff fc25 	bl	8002ea0 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365a:	f7ff fc21 	bl	8002ea0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1a8      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_RCC_OscConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4925      	ldr	r1, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x240>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_OscConfig+0x244>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7ff fc04 	bl	8002ea0 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369c:	f7ff fc00 	bl	8002ea0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e187      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d036      	beq.n	8003734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_RCC_OscConfig+0x248>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7ff fbe4 	bl	8002ea0 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036dc:	f7ff fbe0 	bl	8002ea0 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e167      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_OscConfig+0x240>)
 80036f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x200>
 80036fa:	e01b      	b.n	8003734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_OscConfig+0x248>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003702:	f7ff fbcd 	bl	8002ea0 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003708:	e00e      	b.n	8003728 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370a:	f7ff fbc9 	bl	8002ea0 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d907      	bls.n	8003728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e150      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
 800371c:	40023800 	.word	0x40023800
 8003720:	42470000 	.word	0x42470000
 8003724:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ea      	bne.n	800370a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8097 	beq.w	8003870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b81      	ldr	r3, [pc, #516]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	4b7d      	ldr	r3, [pc, #500]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a7c      	ldr	r2, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b7a      	ldr	r3, [pc, #488]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b77      	ldr	r3, [pc, #476]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b74      	ldr	r3, [pc, #464]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a73      	ldr	r2, [pc, #460]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7ff fb89 	bl	8002ea0 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7ff fb85 	bl	8002ea0 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e10c      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <HAL_RCC_OscConfig+0x474>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x2ea>
 80037b8:	4b64      	ldr	r3, [pc, #400]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4a63      	ldr	r2, [pc, #396]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	; 0x70
 80037c4:	e01c      	b.n	8003800 <HAL_RCC_OscConfig+0x324>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x30c>
 80037ce:	4b5f      	ldr	r3, [pc, #380]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a5e      	ldr	r2, [pc, #376]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
 80037da:	4b5c      	ldr	r3, [pc, #368]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a5b      	ldr	r2, [pc, #364]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0x324>
 80037e8:	4b58      	ldr	r3, [pc, #352]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a57      	ldr	r2, [pc, #348]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	4b55      	ldr	r3, [pc, #340]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a54      	ldr	r2, [pc, #336]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d015      	beq.n	8003834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7ff fb4a 	bl	8002ea0 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380e:	e00a      	b.n	8003826 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003810:	f7ff fb46 	bl	8002ea0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	; 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0cb      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ee      	beq.n	8003810 <HAL_RCC_OscConfig+0x334>
 8003832:	e014      	b.n	800385e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003834:	f7ff fb34 	bl	8002ea0 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7ff fb30 	bl	8002ea0 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0b5      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	4b3e      	ldr	r3, [pc, #248]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ee      	bne.n	800383c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a1 	beq.w	80039bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387a:	4b34      	ldr	r3, [pc, #208]	; (800394c <HAL_RCC_OscConfig+0x470>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b08      	cmp	r3, #8
 8003884:	d05c      	beq.n	8003940 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d141      	bne.n	8003912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7ff fb04 	bl	8002ea0 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389c:	f7ff fb00 	bl	8002ea0 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e087      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	3b01      	subs	r3, #1
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	491b      	ldr	r1, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x470>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7ff fad9 	bl	8002ea0 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f2:	f7ff fad5 	bl	8002ea0 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e05c      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x416>
 8003910:	e054      	b.n	80039bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_RCC_OscConfig+0x478>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7ff fac2 	bl	8002ea0 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7ff fabe 	bl	8002ea0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e045      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCC_OscConfig+0x470>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x444>
 800393e:	e03d      	b.n	80039bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e038      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000
 8003954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x4ec>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d028      	beq.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d121      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d11a      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	4293      	cmp	r3, r2
 8003992:	d111      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800

080039cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0cc      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b68      	ldr	r3, [pc, #416]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d90c      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b65      	ldr	r3, [pc, #404]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b8      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b50      	ldr	r3, [pc, #320]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	494d      	ldr	r1, [pc, #308]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d044      	beq.n	8003aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d119      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e07f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e06f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e067      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4934      	ldr	r1, [pc, #208]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003abc:	f7ff f9f0 	bl	8002ea0 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7ff f9ec 	bl	8002ea0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e04f      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aec:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d20c      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e032      	b.n	8003b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4916      	ldr	r1, [pc, #88]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b52:	f000 f821 	bl	8003b98 <HAL_RCC_GetSysClockFreq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	490a      	ldr	r1, [pc, #40]	; (8003b8c <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	5ccb      	ldrb	r3, [r1, r3]
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff f82c 	bl	8002bd0 <HAL_InitTick>

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023c00 	.word	0x40023c00
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	0800ab9c 	.word	0x0800ab9c
 8003b90:	20000000 	.word	0x20000000
 8003b94:	20000004 	.word	0x20000004

08003b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b094      	sub	sp, #80	; 0x50
 8003b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba8:	2300      	movs	r3, #0
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb0:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d00d      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	f200 80e1 	bhi.w	8003d84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x34>
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bca:	e0db      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bd0:	e0db      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd2:	4b73      	ldr	r3, [pc, #460]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd6:	e0d8      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be2:	4b6d      	ldr	r3, [pc, #436]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d063      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
 8003c02:	2300      	movs	r3, #0
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
 8003c06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	f04f 0000 	mov.w	r0, #0
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	0159      	lsls	r1, r3, #5
 8003c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c1c:	0150      	lsls	r0, r2, #5
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4621      	mov	r1, r4
 8003c24:	1a51      	subs	r1, r2, r1
 8003c26:	6139      	str	r1, [r7, #16]
 8003c28:	4629      	mov	r1, r5
 8003c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	018b      	lsls	r3, r1, #6
 8003c40:	4651      	mov	r1, sl
 8003c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c46:	4651      	mov	r1, sl
 8003c48:	018a      	lsls	r2, r1, #6
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c50:	4659      	mov	r1, fp
 8003c52:	eb63 0901 	sbc.w	r9, r3, r1
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c6a:	4690      	mov	r8, r2
 8003c6c:	4699      	mov	r9, r3
 8003c6e:	4623      	mov	r3, r4
 8003c70:	eb18 0303 	adds.w	r3, r8, r3
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	462b      	mov	r3, r5
 8003c78:	eb49 0303 	adc.w	r3, r9, r3
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	024b      	lsls	r3, r1, #9
 8003c8e:	4621      	mov	r1, r4
 8003c90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c94:	4621      	mov	r1, r4
 8003c96:	024a      	lsls	r2, r1, #9
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ca8:	f7fc fb02 	bl	80002b0 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	e058      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ccc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	f04f 0000 	mov.w	r0, #0
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	0159      	lsls	r1, r3, #5
 8003cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce2:	0150      	lsls	r0, r2, #5
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4641      	mov	r1, r8
 8003cea:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cee:	4649      	mov	r1, r9
 8003cf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d08:	ebb2 040a 	subs.w	r4, r2, sl
 8003d0c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	00eb      	lsls	r3, r5, #3
 8003d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d1e:	00e2      	lsls	r2, r4, #3
 8003d20:	4614      	mov	r4, r2
 8003d22:	461d      	mov	r5, r3
 8003d24:	4643      	mov	r3, r8
 8003d26:	18e3      	adds	r3, r4, r3
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	eb45 0303 	adc.w	r3, r5, r3
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d3e:	4629      	mov	r1, r5
 8003d40:	028b      	lsls	r3, r1, #10
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d48:	4621      	mov	r1, r4
 8003d4a:	028a      	lsls	r2, r1, #10
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d52:	2200      	movs	r2, #0
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	61fa      	str	r2, [r7, #28]
 8003d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d5c:	f7fc faa8 	bl	80002b0 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4613      	mov	r3, r2
 8003d66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	3301      	adds	r3, #1
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d82:	e002      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3750      	adds	r7, #80	; 0x50
 8003d90:	46bd      	mov	sp, r7
 8003d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	00f42400 	.word	0x00f42400
 8003da0:	007a1200 	.word	0x007a1200

08003da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20000000 	.word	0x20000000

08003dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dc0:	f7ff fff0 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	0a9b      	lsrs	r3, r3, #10
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	0800abac 	.word	0x0800abac

08003de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003de8:	f7ff ffdc 	bl	8003da4 <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0b5b      	lsrs	r3, r3, #13
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4903      	ldr	r1, [pc, #12]	; (8003e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40023800 	.word	0x40023800
 8003e08:	0800abac 	.word	0x0800abac

08003e0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	220f      	movs	r2, #15
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0203 	and.w	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <HAL_RCC_GetClockConfig+0x5c>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <HAL_RCC_GetClockConfig+0x60>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0207 	and.w	r2, r3, #7
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40023c00 	.word	0x40023c00

08003e70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d035      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e98:	4b67      	ldr	r3, [pc, #412]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e9e:	f7fe ffff 	bl	8002ea0 <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ea6:	f7fe fffb 	bl	8002ea0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0ba      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eb8:	4b60      	ldr	r3, [pc, #384]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f0      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	019a      	lsls	r2, r3, #6
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	071b      	lsls	r3, r3, #28
 8003ed0:	495a      	ldr	r1, [pc, #360]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ed8:	4b57      	ldr	r3, [pc, #348]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ede:	f7fe ffdf 	bl	8002ea0 <HAL_GetTick>
 8003ee2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ee6:	f7fe ffdb 	bl	8002ea0 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e09a      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8083 	beq.w	8004018 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	4b49      	ldr	r3, [pc, #292]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	4a48      	ldr	r2, [pc, #288]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6413      	str	r3, [r2, #64]	; 0x40
 8003f22:	4b46      	ldr	r3, [pc, #280]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f2e:	4b44      	ldr	r3, [pc, #272]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a43      	ldr	r2, [pc, #268]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f3a:	f7fe ffb1 	bl	8002ea0 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f42:	f7fe ffad 	bl	8002ea0 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e06c      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f54:	4b3a      	ldr	r3, [pc, #232]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f60:	4b36      	ldr	r3, [pc, #216]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02f      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d028      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f7e:	4b2f      	ldr	r3, [pc, #188]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f88:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f8e:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f9a:	4b28      	ldr	r3, [pc, #160]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d114      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fe ff7b 	bl	8002ea0 <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe ff77 	bl	8002ea0 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e034      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fdc:	d10d      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003fde:	4b17      	ldr	r3, [pc, #92]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff2:	4912      	ldr	r1, [pc, #72]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]
 8003ff8:	e005      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ffa:	4b10      	ldr	r3, [pc, #64]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004000:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004004:	6093      	str	r3, [r2, #8]
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004008:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004012:	490a      	ldr	r1, [pc, #40]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	7c1a      	ldrb	r2, [r3, #16]
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800402a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	42470068 	.word	0x42470068
 800403c:	40023800 	.word	0x40023800
 8004040:	40007000 	.word	0x40007000
 8004044:	42470e40 	.word	0x42470e40
 8004048:	424711e0 	.word	0x424711e0

0800404c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e066      	b.n	8004130 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7f5b      	ldrb	r3, [r3, #29]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fe fca8 	bl	80029c8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	22ca      	movs	r2, #202	; 0xca
 8004084:	625a      	str	r2, [r3, #36]	; 0x24
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2253      	movs	r2, #83	; 0x53
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa45 	bl	800451e <RTC_EnterInitMode>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d12c      	bne.n	80040f8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6899      	ldr	r1, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68d2      	ldr	r2, [r2, #12]
 80040d8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6919      	ldr	r1, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	041a      	lsls	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa4c 	bl	800458c <RTC_ExitInitMode>
 80040f4:	4603      	mov	r3, r0
 80040f6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d113      	bne.n	8004126 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	22ff      	movs	r2, #255	; 0xff
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	7f1b      	ldrb	r3, [r3, #28]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_RTC_SetTime+0x1c>
 8004150:	2302      	movs	r3, #2
 8004152:	e087      	b.n	8004264 <HAL_RTC_SetTime+0x12c>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2202      	movs	r2, #2
 800415e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d126      	bne.n	80041b4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fa29 	bl	80045d6 <RTC_ByteToBcd2>
 8004184:	4603      	mov	r3, r0
 8004186:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	785b      	ldrb	r3, [r3, #1]
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fa22 	bl	80045d6 <RTC_ByteToBcd2>
 8004192:	4603      	mov	r3, r0
 8004194:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004196:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	789b      	ldrb	r3, [r3, #2]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fa1a 	bl	80045d6 <RTC_ByteToBcd2>
 80041a2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041a4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	78db      	ldrb	r3, [r3, #3]
 80041ac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	e018      	b.n	80041e6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2200      	movs	r2, #0
 80041c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	785b      	ldrb	r3, [r3, #1]
 80041d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041d4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	78db      	ldrb	r3, [r3, #3]
 80041e0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	22ca      	movs	r2, #202	; 0xca
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2253      	movs	r2, #83	; 0x53
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f991 	bl	800451e <RTC_EnterInitMode>
 80041fc:	4603      	mov	r3, r0
 80041fe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d120      	bne.n	8004248 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004210:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004214:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004224:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6899      	ldr	r1, [r3, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f9a4 	bl	800458c <RTC_ExitInitMode>
 8004244:	4603      	mov	r3, r0
 8004246:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	22ff      	movs	r2, #255	; 0xff
 800425a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	771a      	strb	r2, [r3, #28]

  return status;
 8004262:	7cfb      	ldrb	r3, [r7, #19]
}
 8004264:	4618      	mov	r0, r3
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	bd90      	pop	{r4, r7, pc}

0800426c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800429e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	0d9b      	lsrs	r3, r3, #22
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d11a      	bne.n	800431e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 f98f 	bl	8004610 <RTC_Bcd2ToByte>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461a      	mov	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	785b      	ldrb	r3, [r3, #1]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f986 	bl	8004610 <RTC_Bcd2ToByte>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	789b      	ldrb	r3, [r3, #2]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f97d 	bl	8004610 <RTC_Bcd2ToByte>
 8004316:	4603      	mov	r3, r0
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	7f1b      	ldrb	r3, [r3, #28]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_RTC_SetDate+0x1c>
 8004340:	2302      	movs	r3, #2
 8004342:	e071      	b.n	8004428 <HAL_RTC_SetDate+0x100>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2202      	movs	r2, #2
 800434e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10e      	bne.n	8004374 <HAL_RTC_SetDate+0x4c>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	f023 0310 	bic.w	r3, r3, #16
 800436a:	b2db      	uxtb	r3, r3
 800436c:	330a      	adds	r3, #10
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11c      	bne.n	80043b4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	78db      	ldrb	r3, [r3, #3]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f929 	bl	80045d6 <RTC_ByteToBcd2>
 8004384:	4603      	mov	r3, r0
 8004386:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	4618      	mov	r0, r3
 800438e:	f000 f922 	bl	80045d6 <RTC_ByteToBcd2>
 8004392:	4603      	mov	r3, r0
 8004394:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004396:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	789b      	ldrb	r3, [r3, #2]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f91a 	bl	80045d6 <RTC_ByteToBcd2>
 80043a2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043a4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e00e      	b.n	80043d2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	78db      	ldrb	r3, [r3, #3]
 80043b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043c0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	22ca      	movs	r2, #202	; 0xca
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2253      	movs	r2, #83	; 0x53
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f89b 	bl	800451e <RTC_EnterInitMode>
 80043e8:	4603      	mov	r3, r0
 80043ea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80043ec:	7cfb      	ldrb	r3, [r7, #19]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10c      	bne.n	800440c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004400:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f8c2 	bl	800458c <RTC_ExitInitMode>
 8004408:	4603      	mov	r3, r0
 800440a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	22ff      	movs	r2, #255	; 0xff
 800441e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	771a      	strb	r2, [r3, #28]

  return status;
 8004426:	7cfb      	ldrb	r3, [r7, #19]
}
 8004428:	4618      	mov	r0, r3
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd90      	pop	{r4, r7, pc}

08004430 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800444a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800444e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	0a1b      	lsrs	r3, r3, #8
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004472:	b2da      	uxtb	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	0b5b      	lsrs	r3, r3, #13
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d11a      	bne.n	80044c4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	78db      	ldrb	r3, [r3, #3]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f8bc 	bl	8004610 <RTC_Bcd2ToByte>
 8004498:	4603      	mov	r3, r0
 800449a:	461a      	mov	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 f8b3 	bl	8004610 <RTC_Bcd2ToByte>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	789b      	ldrb	r3, [r3, #2]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f8aa 	bl	8004610 <RTC_Bcd2ToByte>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044e8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ea:	f7fe fcd9 	bl	8002ea0 <HAL_GetTick>
 80044ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044f0:	e009      	b.n	8004506 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044f2:	f7fe fcd5 	bl	8002ea0 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004500:	d901      	bls.n	8004506 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e007      	b.n	8004516 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ee      	beq.n	80044f2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d122      	bne.n	8004582 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800454a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800454c:	f7fe fca8 	bl	8002ea0 <HAL_GetTick>
 8004550:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004552:	e00c      	b.n	800456e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004554:	f7fe fca4 	bl	8002ea0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004562:	d904      	bls.n	800456e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2204      	movs	r2, #4
 8004568:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <RTC_EnterInitMode+0x64>
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d1e8      	bne.n	8004554 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff ff89 	bl	80044ce <HAL_RTC_WaitForSynchro>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2204      	movs	r2, #4
 80045c6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4603      	mov	r3, r0
 80045de:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80045e4:	e005      	b.n	80045f2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	3301      	adds	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	3b0a      	subs	r3, #10
 80045f0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	2b09      	cmp	r3, #9
 80045f6:	d8f6      	bhi.n	80045e6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	4313      	orrs	r3, r2
 8004602:	b2db      	uxtb	r3, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	b2db      	uxtb	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	0092      	lsls	r2, r2, #2
 8004628:	4413      	add	r3, r2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	b2da      	uxtb	r2, r3
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	4413      	add	r3, r2
 800463a:	b2db      	uxtb	r3, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a59      	ldr	r2, [pc, #356]	; (80047c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	0adb      	lsrs	r3, r3, #11
 8004660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	7f1b      	ldrb	r3, [r3, #28]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8004672:	2302      	movs	r3, #2
 8004674:	e09b      	b.n	80047ae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2202      	movs	r2, #2
 8004680:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	22ca      	movs	r2, #202	; 0xca
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2253      	movs	r2, #83	; 0x53
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d017      	beq.n	80046d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	1e5a      	subs	r2, r3, #1
 80046a4:	617a      	str	r2, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	22ff      	movs	r2, #255	; 0xff
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2203      	movs	r2, #3
 80046b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e075      	b.n	80047ae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e7      	bne.n	80046a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046de:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80046f0:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80046f2:	4b32      	ldr	r3, [pc, #200]	; (80047bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a32      	ldr	r2, [pc, #200]	; (80047c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	0adb      	lsrs	r3, r3, #11
 80046fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	1e5a      	subs	r2, r3, #1
 800470c:	617a      	str	r2, [r7, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	22ff      	movs	r2, #255	; 0xff
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2203      	movs	r2, #3
 800471e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e041      	b.n	80047ae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0e7      	beq.n	8004708 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0207 	bic.w	r2, r2, #7
 8004746:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6899      	ldr	r1, [r3, #8]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004760:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8004766:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800476a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800476c:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8004772:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004776:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004786:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004796:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	22ff      	movs	r2, #255	; 0xff
 800479e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000000 	.word	0x20000000
 80047c0:	10624dd3 	.word	0x10624dd3
 80047c4:	40013c00 	.word	0x40013c00

080047c8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc fbee 	bl	8000fc0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80047f4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 80047f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80047fc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	775a      	strb	r2, [r3, #29]
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40013c00 	.word	0x40013c00

08004810 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3350      	adds	r3, #80	; 0x50
 8004826:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4413      	add	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	601a      	str	r2, [r3, #0]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3350      	adds	r3, #80	; 0x50
 8004858:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e041      	b.n	800490a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fe f8c8 	bl	8002a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f000 fa88 	bl	8004dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d001      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e044      	b.n	80049b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d018      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x6c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004956:	d013      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x6c>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1a      	ldr	r2, [pc, #104]	; (80049c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00e      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x6c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a19      	ldr	r2, [pc, #100]	; (80049cc <HAL_TIM_Base_Start_IT+0xb8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d009      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x6c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x6c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d111      	bne.n	80049a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b06      	cmp	r3, #6
 8004990:	d010      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a2:	e007      	b.n	80049b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40014000 	.word	0x40014000

080049d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0202 	mvn.w	r2, #2
 8004a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f9b5 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f9a7 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f9b8 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0204 	mvn.w	r2, #4
 8004a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f98b 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f97d 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f98e 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0208 	mvn.w	r2, #8
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f961 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f953 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f964 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0210 	mvn.w	r2, #16
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2208      	movs	r2, #8
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f937 	bl	8004d8a <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f929 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f93a 	bl	8004d9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0201 	mvn.w	r2, #1
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fd fef2 	bl	8002940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b80      	cmp	r3, #128	; 0x80
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fab2 	bl	80050ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d10e      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b40      	cmp	r3, #64	; 0x40
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8ff 	bl	8004db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d10e      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d107      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0220 	mvn.w	r2, #32
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa7c 	bl	80050d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e0b4      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x186>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3c:	d03e      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0xd4>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	f200 8087 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	f000 8086 	beq.w	8004d5a <HAL_TIM_ConfigClockSource+0x172>
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d87f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b70      	cmp	r3, #112	; 0x70
 8004c56:	d01a      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xa6>
 8004c58:	2b70      	cmp	r3, #112	; 0x70
 8004c5a:	d87b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b60      	cmp	r3, #96	; 0x60
 8004c5e:	d050      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x11a>
 8004c60:	2b60      	cmp	r3, #96	; 0x60
 8004c62:	d877      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b50      	cmp	r3, #80	; 0x50
 8004c66:	d03c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c68:	2b50      	cmp	r3, #80	; 0x50
 8004c6a:	d873      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d058      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x13a>
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d86f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	d064      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b30      	cmp	r3, #48	; 0x30
 8004c7a:	d86b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d060      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d867      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05c      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d05a      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	e062      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f000 f98d 	bl	8004fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	609a      	str	r2, [r3, #8]
      break;
 8004cba:	e04f      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6899      	ldr	r1, [r3, #8]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f000 f976 	bl	8004fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cde:	609a      	str	r2, [r3, #8]
      break;
 8004ce0:	e03c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 f8ea 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2150      	movs	r1, #80	; 0x50
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f943 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004d00:	e02c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 f909 	bl	8004f26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2160      	movs	r1, #96	; 0x60
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f933 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004d20:	e01c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 f8ca 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2140      	movs	r1, #64	; 0x40
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f923 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004d40:	e00c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f000 f91a 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004d52:	e003      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e000      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a34      	ldr	r2, [pc, #208]	; (8004eac <TIM_Base_SetConfig+0xe4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a31      	ldr	r2, [pc, #196]	; (8004eb0 <TIM_Base_SetConfig+0xe8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a30      	ldr	r2, [pc, #192]	; (8004eb4 <TIM_Base_SetConfig+0xec>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x38>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a2f      	ldr	r2, [pc, #188]	; (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a25      	ldr	r2, [pc, #148]	; (8004eac <TIM_Base_SetConfig+0xe4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d017      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <TIM_Base_SetConfig+0xe8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <TIM_Base_SetConfig+0xec>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <TIM_Base_SetConfig+0xf0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <TIM_Base_SetConfig+0xf4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <TIM_Base_SetConfig+0xf8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <TIM_Base_SetConfig+0xfc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d108      	bne.n	8004e64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a08      	ldr	r2, [pc, #32]	; (8004eac <TIM_Base_SetConfig+0xe4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d103      	bne.n	8004e98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	615a      	str	r2, [r3, #20]
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40000c00 	.word	0x40000c00
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800

08004ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0201 	bic.w	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 030a 	bic.w	r3, r3, #10
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b087      	sub	sp, #28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0210 	bic.w	r2, r3, #16
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	031b      	lsls	r3, r3, #12
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f043 0307 	orr.w	r3, r3, #7
 8004fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005010:	2302      	movs	r3, #2
 8005012:	e050      	b.n	80050b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d018      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d013      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00e      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a16      	ldr	r2, [pc, #88]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d009      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d10c      	bne.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4313      	orrs	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40014000 	.word	0x40014000

080050d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e03f      	b.n	8005192 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fd fcc6 	bl	8002ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2224      	movs	r2, #36	; 0x24
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fddf 	bl	8005d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b08a      	sub	sp, #40	; 0x28
 800519e:	af02      	add	r7, sp, #8
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d17c      	bne.n	80052b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_UART_Transmit+0x2c>
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e075      	b.n	80052b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Transmit+0x3e>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e06e      	b.n	80052b6 <HAL_UART_Transmit+0x11c>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2221      	movs	r2, #33	; 0x21
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ee:	f7fd fe57 	bl	8002ea0 <HAL_GetTick>
 80051f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	88fa      	ldrh	r2, [r7, #6]
 80051fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005208:	d108      	bne.n	800521c <HAL_UART_Transmit+0x82>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d104      	bne.n	800521c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	e003      	b.n	8005224 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800522c:	e02a      	b.n	8005284 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2200      	movs	r2, #0
 8005236:	2180      	movs	r1, #128	; 0x80
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 fb1f 	bl	800587c <UART_WaitOnFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e036      	b.n	80052b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800525c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	3302      	adds	r3, #2
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	e007      	b.n	8005276 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	781a      	ldrb	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	3301      	adds	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1cf      	bne.n	800522e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2200      	movs	r2, #0
 8005296:	2140      	movs	r1, #64	; 0x40
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 faef 	bl	800587c <UART_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e006      	b.n	80052b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d11d      	bne.n	8005314 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_UART_Receive_IT+0x26>
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e016      	b.n	8005316 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Receive_IT+0x38>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e00f      	b.n	8005316 <HAL_UART_Receive_IT+0x58>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005304:	88fb      	ldrh	r3, [r7, #6]
 8005306:	461a      	mov	r2, r3
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fb24 	bl	8005958 <UART_Start_Receive_IT>
 8005310:	4603      	mov	r3, r0
 8005312:	e000      	b.n	8005316 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005314:	2302      	movs	r3, #2
  }
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b0ba      	sub	sp, #232	; 0xe8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005346:	2300      	movs	r3, #0
 8005348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800534c:	2300      	movs	r3, #0
 800534e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800535e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_UART_IRQHandler+0x66>
 8005372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fc07 	bl	8005b92 <UART_Receive_IT>
      return;
 8005384:	e256      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80de 	beq.w	800554c <HAL_UART_IRQHandler+0x22c>
 8005390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800539c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80d1 	beq.w	800554c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <HAL_UART_IRQHandler+0xae>
 80053b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f043 0201 	orr.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <HAL_UART_IRQHandler+0xd2>
 80053da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f043 0202 	orr.w	r2, r3, #2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_UART_IRQHandler+0xf6>
 80053fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f043 0204 	orr.w	r2, r3, #4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d011      	beq.n	8005446 <HAL_UART_IRQHandler+0x126>
 8005422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d105      	bne.n	800543a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800542e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f043 0208 	orr.w	r2, r3, #8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 81ed 	beq.w	800582a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_UART_IRQHandler+0x14e>
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fb92 	bl	8005b92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <HAL_UART_IRQHandler+0x17a>
 8005492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04f      	beq.n	800553a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa9a 	bl	80059d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d141      	bne.n	8005532 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3314      	adds	r3, #20
 80054b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3314      	adds	r3, #20
 80054d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1d9      	bne.n	80054ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d013      	beq.n	800552a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	4a7d      	ldr	r2, [pc, #500]	; (80056fc <HAL_UART_IRQHandler+0x3dc>)
 8005508:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	4618      	mov	r0, r3
 8005510:	f7fd fe24 	bl	800315c <HAL_DMA_Abort_IT>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d016      	beq.n	8005548 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005524:	4610      	mov	r0, r2
 8005526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	e00e      	b.n	8005548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f990 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	e00a      	b.n	8005548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f98c 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005538:	e006      	b.n	8005548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f988 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005546:	e170      	b.n	800582a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	bf00      	nop
    return;
 800554a:	e16e      	b.n	800582a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	2b01      	cmp	r3, #1
 8005552:	f040 814a 	bne.w	80057ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8143 	beq.w	80057ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 813c 	beq.w	80057ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	f040 80b4 	bne.w	8005700 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8140 	beq.w	800582e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055b6:	429a      	cmp	r2, r3
 80055b8:	f080 8139 	bcs.w	800582e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ce:	f000 8088 	beq.w	80056e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800560a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1d9      	bne.n	80055d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3314      	adds	r3, #20
 8005624:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800562e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3314      	adds	r3, #20
 800563e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005642:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005646:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800564a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e1      	bne.n	800561e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3314      	adds	r3, #20
 8005660:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800566a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3314      	adds	r3, #20
 800567a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800567e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005680:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005684:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800568c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e3      	bne.n	800565a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b2:	f023 0310 	bic.w	r3, r3, #16
 80056b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80056c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e3      	bne.n	80056a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fd fccd 	bl	800307c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f8b6 	bl	8005864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056f8:	e099      	b.n	800582e <HAL_UART_IRQHandler+0x50e>
 80056fa:	bf00      	nop
 80056fc:	08005a9b 	.word	0x08005a9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005708:	b29b      	uxth	r3, r3
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 808b 	beq.w	8005832 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800571c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8086 	beq.w	8005832 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800573c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800574a:	647a      	str	r2, [r7, #68]	; 0x44
 800574c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005750:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e3      	bne.n	8005726 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3314      	adds	r3, #20
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	623b      	str	r3, [r7, #32]
   return(result);
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3314      	adds	r3, #20
 800577e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005782:	633a      	str	r2, [r7, #48]	; 0x30
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e3      	bne.n	800575e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0310 	bic.w	r3, r3, #16
 80057ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057c8:	61fa      	str	r2, [r7, #28]
 80057ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	617b      	str	r3, [r7, #20]
   return(result);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e3      	bne.n	80057a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f83e 	bl	8005864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057e8:	e023      	b.n	8005832 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <HAL_UART_IRQHandler+0x4ea>
 80057f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f95d 	bl	8005ac2 <UART_Transmit_IT>
    return;
 8005808:	e014      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <HAL_UART_IRQHandler+0x514>
 8005816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f99d 	bl	8005b62 <UART_EndTransmit_IT>
    return;
 8005828:	e004      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
    return;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
      return;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
      return;
 8005832:	bf00      	nop
  }
}
 8005834:	37e8      	adds	r7, #232	; 0xe8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop

0800583c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b090      	sub	sp, #64	; 0x40
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800588c:	e050      	b.n	8005930 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d04c      	beq.n	8005930 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <UART_WaitOnFlagUntilTimeout+0x30>
 800589c:	f7fd fb00 	bl	8002ea0 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d241      	bcs.n	8005930 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	330c      	adds	r3, #12
 80058ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058cc:	637a      	str	r2, [r7, #52]	; 0x34
 80058ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e5      	bne.n	80058ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3314      	adds	r3, #20
 80058e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	e853 3f00 	ldrex	r3, [r3]
 80058ee:	613b      	str	r3, [r7, #16]
   return(result);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3314      	adds	r3, #20
 80058fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005900:	623a      	str	r2, [r7, #32]
 8005902:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005904:	69f9      	ldr	r1, [r7, #28]
 8005906:	6a3a      	ldr	r2, [r7, #32]
 8005908:	e841 2300 	strex	r3, r2, [r1]
 800590c:	61bb      	str	r3, [r7, #24]
   return(result);
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1e5      	bne.n	80058e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e00f      	b.n	8005950 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4013      	ands	r3, r2
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	429a      	cmp	r2, r3
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	429a      	cmp	r2, r3
 800594c:	d09f      	beq.n	800588e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3740      	adds	r7, #64	; 0x40
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	4613      	mov	r3, r2
 8005964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	88fa      	ldrh	r2, [r7, #6]
 8005970:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	88fa      	ldrh	r2, [r7, #6]
 8005976:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2222      	movs	r2, #34	; 0x22
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0201 	orr.w	r2, r2, #1
 80059b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0220 	orr.w	r2, r2, #32
 80059c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b095      	sub	sp, #84	; 0x54
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	330c      	adds	r3, #12
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	330c      	adds	r3, #12
 80059fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059fc:	643a      	str	r2, [r7, #64]	; 0x40
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e5      	bne.n	80059dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3314      	adds	r3, #20
 8005a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3314      	adds	r3, #20
 8005a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e5      	bne.n	8005a10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d119      	bne.n	8005a80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f023 0310 	bic.w	r3, r3, #16
 8005a62:	647b      	str	r3, [r7, #68]	; 0x44
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a6c:	61ba      	str	r2, [r7, #24]
 8005a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6979      	ldr	r1, [r7, #20]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e5      	bne.n	8005a4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a8e:	bf00      	nop
 8005a90:	3754      	adds	r7, #84	; 0x54
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff fecb 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b21      	cmp	r3, #33	; 0x21
 8005ad4:	d13e      	bne.n	8005b54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ade:	d114      	bne.n	8005b0a <UART_Transmit_IT+0x48>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d110      	bne.n	8005b0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005afc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	1c9a      	adds	r2, r3, #2
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	621a      	str	r2, [r3, #32]
 8005b08:	e008      	b.n	8005b1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	1c59      	adds	r1, r3, #1
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6211      	str	r1, [r2, #32]
 8005b14:	781a      	ldrb	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10f      	bne.n	8005b50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	e000      	b.n	8005b56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
  }
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff fe5a 	bl	800583c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b08c      	sub	sp, #48	; 0x30
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b22      	cmp	r3, #34	; 0x22
 8005ba4:	f040 80ab 	bne.w	8005cfe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	d117      	bne.n	8005be2 <UART_Receive_IT+0x50>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d113      	bne.n	8005be2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	1c9a      	adds	r2, r3, #2
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
 8005be0:	e026      	b.n	8005c30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf4:	d007      	beq.n	8005c06 <UART_Receive_IT+0x74>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10a      	bne.n	8005c14 <UART_Receive_IT+0x82>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e008      	b.n	8005c26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d15a      	bne.n	8005cfa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0220 	bic.w	r2, r2, #32
 8005c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0201 	bic.w	r2, r2, #1
 8005c72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d135      	bne.n	8005cf0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	613b      	str	r3, [r7, #16]
   return(result);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f023 0310 	bic.w	r3, r3, #16
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005caa:	623a      	str	r2, [r7, #32]
 8005cac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	69f9      	ldr	r1, [r7, #28]
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e5      	bne.n	8005c8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b10      	cmp	r3, #16
 8005cca:	d10a      	bne.n	8005ce2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff fdbb 	bl	8005864 <HAL_UARTEx_RxEventCallback>
 8005cee:	e002      	b.n	8005cf6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fb fdb3 	bl	800185c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e002      	b.n	8005d00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e000      	b.n	8005d00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005cfe:	2302      	movs	r3, #2
  }
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3730      	adds	r7, #48	; 0x30
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d0c:	b0c0      	sub	sp, #256	; 0x100
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d24:	68d9      	ldr	r1, [r3, #12]
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	ea40 0301 	orr.w	r3, r0, r1
 8005d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d60:	f021 010c 	bic.w	r1, r1, #12
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d82:	6999      	ldr	r1, [r3, #24]
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	ea40 0301 	orr.w	r3, r0, r1
 8005d8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b8f      	ldr	r3, [pc, #572]	; (8005fd4 <UART_SetConfig+0x2cc>)
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d005      	beq.n	8005da8 <UART_SetConfig+0xa0>
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b8d      	ldr	r3, [pc, #564]	; (8005fd8 <UART_SetConfig+0x2d0>)
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d104      	bne.n	8005db2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005da8:	f7fe f81c 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 8005dac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005db0:	e003      	b.n	8005dba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005db2:	f7fe f803 	bl	8003dbc <HAL_RCC_GetPCLK1Freq>
 8005db6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc4:	f040 810c 	bne.w	8005fe0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005dda:	4622      	mov	r2, r4
 8005ddc:	462b      	mov	r3, r5
 8005dde:	1891      	adds	r1, r2, r2
 8005de0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005de2:	415b      	adcs	r3, r3
 8005de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dea:	4621      	mov	r1, r4
 8005dec:	eb12 0801 	adds.w	r8, r2, r1
 8005df0:	4629      	mov	r1, r5
 8005df2:	eb43 0901 	adc.w	r9, r3, r1
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e0a:	4690      	mov	r8, r2
 8005e0c:	4699      	mov	r9, r3
 8005e0e:	4623      	mov	r3, r4
 8005e10:	eb18 0303 	adds.w	r3, r8, r3
 8005e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e18:	462b      	mov	r3, r5
 8005e1a:	eb49 0303 	adc.w	r3, r9, r3
 8005e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e36:	460b      	mov	r3, r1
 8005e38:	18db      	adds	r3, r3, r3
 8005e3a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	eb42 0303 	adc.w	r3, r2, r3
 8005e42:	657b      	str	r3, [r7, #84]	; 0x54
 8005e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e4c:	f7fa fa30 	bl	80002b0 <__aeabi_uldivmod>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4b61      	ldr	r3, [pc, #388]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005e56:	fba3 2302 	umull	r2, r3, r3, r2
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	011c      	lsls	r4, r3, #4
 8005e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	1891      	adds	r1, r2, r2
 8005e76:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e78:	415b      	adcs	r3, r3
 8005e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e80:	4641      	mov	r1, r8
 8005e82:	eb12 0a01 	adds.w	sl, r2, r1
 8005e86:	4649      	mov	r1, r9
 8005e88:	eb43 0b01 	adc.w	fp, r3, r1
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ea0:	4692      	mov	sl, r2
 8005ea2:	469b      	mov	fp, r3
 8005ea4:	4643      	mov	r3, r8
 8005ea6:	eb1a 0303 	adds.w	r3, sl, r3
 8005eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8005eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ec8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	18db      	adds	r3, r3, r3
 8005ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	eb42 0303 	adc.w	r3, r2, r3
 8005ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ede:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ee2:	f7fa f9e5 	bl	80002b0 <__aeabi_uldivmod>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	4b3b      	ldr	r3, [pc, #236]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005eee:	fba3 2301 	umull	r2, r3, r3, r1
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	2264      	movs	r2, #100	; 0x64
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	1acb      	subs	r3, r1, r3
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f02:	4b36      	ldr	r3, [pc, #216]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005f04:	fba3 2302 	umull	r2, r3, r3, r2
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f10:	441c      	add	r4, r3
 8005f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f24:	4642      	mov	r2, r8
 8005f26:	464b      	mov	r3, r9
 8005f28:	1891      	adds	r1, r2, r2
 8005f2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f2c:	415b      	adcs	r3, r3
 8005f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f34:	4641      	mov	r1, r8
 8005f36:	1851      	adds	r1, r2, r1
 8005f38:	6339      	str	r1, [r7, #48]	; 0x30
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	414b      	adcs	r3, r1
 8005f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	00cb      	lsls	r3, r1, #3
 8005f50:	4651      	mov	r1, sl
 8005f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f56:	4651      	mov	r1, sl
 8005f58:	00ca      	lsls	r2, r1, #3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4642      	mov	r2, r8
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f68:	464b      	mov	r3, r9
 8005f6a:	460a      	mov	r2, r1
 8005f6c:	eb42 0303 	adc.w	r3, r2, r3
 8005f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f88:	460b      	mov	r3, r1
 8005f8a:	18db      	adds	r3, r3, r3
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f8e:	4613      	mov	r3, r2
 8005f90:	eb42 0303 	adc.w	r3, r2, r3
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f9e:	f7fa f987 	bl	80002b0 <__aeabi_uldivmod>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	2164      	movs	r1, #100	; 0x64
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	3332      	adds	r3, #50	; 0x32
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <UART_SetConfig+0x2d4>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	f003 0207 	and.w	r2, r3, #7
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4422      	add	r2, r4
 8005fce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fd0:	e105      	b.n	80061de <UART_SetConfig+0x4d6>
 8005fd2:	bf00      	nop
 8005fd4:	40011000 	.word	0x40011000
 8005fd8:	40011400 	.word	0x40011400
 8005fdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ff2:	4642      	mov	r2, r8
 8005ff4:	464b      	mov	r3, r9
 8005ff6:	1891      	adds	r1, r2, r2
 8005ff8:	6239      	str	r1, [r7, #32]
 8005ffa:	415b      	adcs	r3, r3
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006002:	4641      	mov	r1, r8
 8006004:	1854      	adds	r4, r2, r1
 8006006:	4649      	mov	r1, r9
 8006008:	eb43 0501 	adc.w	r5, r3, r1
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	00eb      	lsls	r3, r5, #3
 8006016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800601a:	00e2      	lsls	r2, r4, #3
 800601c:	4614      	mov	r4, r2
 800601e:	461d      	mov	r5, r3
 8006020:	4643      	mov	r3, r8
 8006022:	18e3      	adds	r3, r4, r3
 8006024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006028:	464b      	mov	r3, r9
 800602a:	eb45 0303 	adc.w	r3, r5, r3
 800602e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800603e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800604e:	4629      	mov	r1, r5
 8006050:	008b      	lsls	r3, r1, #2
 8006052:	4621      	mov	r1, r4
 8006054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006058:	4621      	mov	r1, r4
 800605a:	008a      	lsls	r2, r1, #2
 800605c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006060:	f7fa f926 	bl	80002b0 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4b60      	ldr	r3, [pc, #384]	; (80061ec <UART_SetConfig+0x4e4>)
 800606a:	fba3 2302 	umull	r2, r3, r3, r2
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	011c      	lsls	r4, r3, #4
 8006072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006076:	2200      	movs	r2, #0
 8006078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800607c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006080:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006084:	4642      	mov	r2, r8
 8006086:	464b      	mov	r3, r9
 8006088:	1891      	adds	r1, r2, r2
 800608a:	61b9      	str	r1, [r7, #24]
 800608c:	415b      	adcs	r3, r3
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006094:	4641      	mov	r1, r8
 8006096:	1851      	adds	r1, r2, r1
 8006098:	6139      	str	r1, [r7, #16]
 800609a:	4649      	mov	r1, r9
 800609c:	414b      	adcs	r3, r1
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060ac:	4659      	mov	r1, fp
 80060ae:	00cb      	lsls	r3, r1, #3
 80060b0:	4651      	mov	r1, sl
 80060b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060b6:	4651      	mov	r1, sl
 80060b8:	00ca      	lsls	r2, r1, #3
 80060ba:	4610      	mov	r0, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	4603      	mov	r3, r0
 80060c0:	4642      	mov	r2, r8
 80060c2:	189b      	adds	r3, r3, r2
 80060c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060c8:	464b      	mov	r3, r9
 80060ca:	460a      	mov	r2, r1
 80060cc:	eb42 0303 	adc.w	r3, r2, r3
 80060d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80060de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060ec:	4649      	mov	r1, r9
 80060ee:	008b      	lsls	r3, r1, #2
 80060f0:	4641      	mov	r1, r8
 80060f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060f6:	4641      	mov	r1, r8
 80060f8:	008a      	lsls	r2, r1, #2
 80060fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060fe:	f7fa f8d7 	bl	80002b0 <__aeabi_uldivmod>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4b39      	ldr	r3, [pc, #228]	; (80061ec <UART_SetConfig+0x4e4>)
 8006108:	fba3 1302 	umull	r1, r3, r3, r2
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	2164      	movs	r1, #100	; 0x64
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	3332      	adds	r3, #50	; 0x32
 800611a:	4a34      	ldr	r2, [pc, #208]	; (80061ec <UART_SetConfig+0x4e4>)
 800611c:	fba2 2303 	umull	r2, r3, r2, r3
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006126:	441c      	add	r4, r3
 8006128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612c:	2200      	movs	r2, #0
 800612e:	673b      	str	r3, [r7, #112]	; 0x70
 8006130:	677a      	str	r2, [r7, #116]	; 0x74
 8006132:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006136:	4642      	mov	r2, r8
 8006138:	464b      	mov	r3, r9
 800613a:	1891      	adds	r1, r2, r2
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	415b      	adcs	r3, r3
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006146:	4641      	mov	r1, r8
 8006148:	1851      	adds	r1, r2, r1
 800614a:	6039      	str	r1, [r7, #0]
 800614c:	4649      	mov	r1, r9
 800614e:	414b      	adcs	r3, r1
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800615e:	4659      	mov	r1, fp
 8006160:	00cb      	lsls	r3, r1, #3
 8006162:	4651      	mov	r1, sl
 8006164:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006168:	4651      	mov	r1, sl
 800616a:	00ca      	lsls	r2, r1, #3
 800616c:	4610      	mov	r0, r2
 800616e:	4619      	mov	r1, r3
 8006170:	4603      	mov	r3, r0
 8006172:	4642      	mov	r2, r8
 8006174:	189b      	adds	r3, r3, r2
 8006176:	66bb      	str	r3, [r7, #104]	; 0x68
 8006178:	464b      	mov	r3, r9
 800617a:	460a      	mov	r2, r1
 800617c:	eb42 0303 	adc.w	r3, r2, r3
 8006180:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	663b      	str	r3, [r7, #96]	; 0x60
 800618c:	667a      	str	r2, [r7, #100]	; 0x64
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800619a:	4649      	mov	r1, r9
 800619c:	008b      	lsls	r3, r1, #2
 800619e:	4641      	mov	r1, r8
 80061a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061a4:	4641      	mov	r1, r8
 80061a6:	008a      	lsls	r2, r1, #2
 80061a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061ac:	f7fa f880 	bl	80002b0 <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4b0d      	ldr	r3, [pc, #52]	; (80061ec <UART_SetConfig+0x4e4>)
 80061b6:	fba3 1302 	umull	r1, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	2164      	movs	r1, #100	; 0x64
 80061be:	fb01 f303 	mul.w	r3, r1, r3
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	3332      	adds	r3, #50	; 0x32
 80061c8:	4a08      	ldr	r2, [pc, #32]	; (80061ec <UART_SetConfig+0x4e4>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	f003 020f 	and.w	r2, r3, #15
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4422      	add	r2, r4
 80061dc:	609a      	str	r2, [r3, #8]
}
 80061de:	bf00      	nop
 80061e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061e4:	46bd      	mov	sp, r7
 80061e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ea:	bf00      	nop
 80061ec:	51eb851f 	.word	0x51eb851f

080061f0 <__NVIC_SetPriority>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	6039      	str	r1, [r7, #0]
 80061fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006200:	2b00      	cmp	r3, #0
 8006202:	db0a      	blt.n	800621a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	490c      	ldr	r1, [pc, #48]	; (800623c <__NVIC_SetPriority+0x4c>)
 800620a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620e:	0112      	lsls	r2, r2, #4
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	440b      	add	r3, r1
 8006214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006218:	e00a      	b.n	8006230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	4908      	ldr	r1, [pc, #32]	; (8006240 <__NVIC_SetPriority+0x50>)
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	3b04      	subs	r3, #4
 8006228:	0112      	lsls	r2, r2, #4
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	440b      	add	r3, r1
 800622e:	761a      	strb	r2, [r3, #24]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	e000e100 	.word	0xe000e100
 8006240:	e000ed00 	.word	0xe000ed00

08006244 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <SysTick_Handler+0x1c>)
 800624a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800624c:	f001 fdaa 	bl	8007da4 <xTaskGetSchedulerState>
 8006250:	4603      	mov	r3, r0
 8006252:	2b01      	cmp	r3, #1
 8006254:	d001      	beq.n	800625a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006256:	f002 fb8f 	bl	8008978 <xPortSysTickHandler>
  }
}
 800625a:	bf00      	nop
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	e000e010 	.word	0xe000e010

08006264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006268:	2100      	movs	r1, #0
 800626a:	f06f 0004 	mvn.w	r0, #4
 800626e:	f7ff ffbf 	bl	80061f0 <__NVIC_SetPriority>
#endif
}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800627e:	f3ef 8305 	mrs	r3, IPSR
 8006282:	603b      	str	r3, [r7, #0]
  return(result);
 8006284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800628a:	f06f 0305 	mvn.w	r3, #5
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	e00c      	b.n	80062ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <osKernelInitialize+0x44>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d105      	bne.n	80062a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800629a:	4b08      	ldr	r3, [pc, #32]	; (80062bc <osKernelInitialize+0x44>)
 800629c:	2201      	movs	r2, #1
 800629e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	607b      	str	r3, [r7, #4]
 80062a4:	e002      	b.n	80062ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295
 80062aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062ac:	687b      	ldr	r3, [r7, #4]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20001db4 	.word	0x20001db4

080062c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c6:	f3ef 8305 	mrs	r3, IPSR
 80062ca:	603b      	str	r3, [r7, #0]
  return(result);
 80062cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <osKernelStart+0x1a>
    stat = osErrorISR;
 80062d2:	f06f 0305 	mvn.w	r3, #5
 80062d6:	607b      	str	r3, [r7, #4]
 80062d8:	e010      	b.n	80062fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062da:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <osKernelStart+0x48>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d109      	bne.n	80062f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062e2:	f7ff ffbf 	bl	8006264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062e6:	4b08      	ldr	r3, [pc, #32]	; (8006308 <osKernelStart+0x48>)
 80062e8:	2202      	movs	r2, #2
 80062ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062ec:	f001 f912 	bl	8007514 <vTaskStartScheduler>
      stat = osOK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	607b      	str	r3, [r7, #4]
 80062f4:	e002      	b.n	80062fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80062f6:	f04f 33ff 	mov.w	r3, #4294967295
 80062fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062fc:	687b      	ldr	r3, [r7, #4]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20001db4 	.word	0x20001db4

0800630c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b08e      	sub	sp, #56	; 0x38
 8006310:	af04      	add	r7, sp, #16
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800631c:	f3ef 8305 	mrs	r3, IPSR
 8006320:	617b      	str	r3, [r7, #20]
  return(result);
 8006322:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006324:	2b00      	cmp	r3, #0
 8006326:	d17e      	bne.n	8006426 <osThreadNew+0x11a>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d07b      	beq.n	8006426 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800632e:	2380      	movs	r3, #128	; 0x80
 8006330:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006332:	2318      	movs	r3, #24
 8006334:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800633a:	f04f 33ff 	mov.w	r3, #4294967295
 800633e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d045      	beq.n	80063d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <osThreadNew+0x48>
        name = attr->name;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <osThreadNew+0x6e>
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	2b38      	cmp	r3, #56	; 0x38
 800636c:	d805      	bhi.n	800637a <osThreadNew+0x6e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <osThreadNew+0x72>
        return (NULL);
 800637a:	2300      	movs	r3, #0
 800637c:	e054      	b.n	8006428 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	089b      	lsrs	r3, r3, #2
 800638c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00e      	beq.n	80063b4 <osThreadNew+0xa8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b5b      	cmp	r3, #91	; 0x5b
 800639c:	d90a      	bls.n	80063b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d006      	beq.n	80063b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <osThreadNew+0xa8>
        mem = 1;
 80063ae:	2301      	movs	r3, #1
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	e010      	b.n	80063d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10c      	bne.n	80063d6 <osThreadNew+0xca>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d108      	bne.n	80063d6 <osThreadNew+0xca>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <osThreadNew+0xca>
          mem = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	e001      	b.n	80063d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d110      	bne.n	80063fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063e4:	9202      	str	r2, [sp, #8]
 80063e6:	9301      	str	r3, [sp, #4]
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6a3a      	ldr	r2, [r7, #32]
 80063f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 feb8 	bl	8007168 <xTaskCreateStatic>
 80063f8:	4603      	mov	r3, r0
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	e013      	b.n	8006426 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d110      	bne.n	8006426 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	b29a      	uxth	r2, r3
 8006408:	f107 0310 	add.w	r3, r7, #16
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 ff03 	bl	8007222 <xTaskCreate>
 800641c:	4603      	mov	r3, r0
 800641e:	2b01      	cmp	r3, #1
 8006420:	d001      	beq.n	8006426 <osThreadNew+0x11a>
            hTask = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006426:	693b      	ldr	r3, [r7, #16]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3728      	adds	r7, #40	; 0x28
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006438:	f3ef 8305 	mrs	r3, IPSR
 800643c:	60bb      	str	r3, [r7, #8]
  return(result);
 800643e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <osDelay+0x1c>
    stat = osErrorISR;
 8006444:	f06f 0305 	mvn.w	r3, #5
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	e007      	b.n	800645c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 f828 	bl	80074ac <vTaskDelay>
    }
  }

  return (stat);
 800645c:	68fb      	ldr	r3, [r7, #12]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006466:	b580      	push	{r7, lr}
 8006468:	b08a      	sub	sp, #40	; 0x28
 800646a:	af02      	add	r7, sp, #8
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006476:	f3ef 8305 	mrs	r3, IPSR
 800647a:	613b      	str	r3, [r7, #16]
  return(result);
 800647c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800647e:	2b00      	cmp	r3, #0
 8006480:	d15f      	bne.n	8006542 <osMessageQueueNew+0xdc>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05c      	beq.n	8006542 <osMessageQueueNew+0xdc>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d059      	beq.n	8006542 <osMessageQueueNew+0xdc>
    mem = -1;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d029      	beq.n	80064ee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d012      	beq.n	80064c8 <osMessageQueueNew+0x62>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b4f      	cmp	r3, #79	; 0x4f
 80064a8:	d90e      	bls.n	80064c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695a      	ldr	r2, [r3, #20]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	429a      	cmp	r2, r3
 80064c0:	d302      	bcc.n	80064c8 <osMessageQueueNew+0x62>
        mem = 1;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e014      	b.n	80064f2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d110      	bne.n	80064f2 <osMessageQueueNew+0x8c>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10c      	bne.n	80064f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d108      	bne.n	80064f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d104      	bne.n	80064f2 <osMessageQueueNew+0x8c>
          mem = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	e001      	b.n	80064f2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d10b      	bne.n	8006510 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2100      	movs	r1, #0
 8006502:	9100      	str	r1, [sp, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f970 	bl	80067ec <xQueueGenericCreateStatic>
 800650c:	61f8      	str	r0, [r7, #28]
 800650e:	e008      	b.n	8006522 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d105      	bne.n	8006522 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006516:	2200      	movs	r2, #0
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f9de 	bl	80068dc <xQueueGenericCreate>
 8006520:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00c      	beq.n	8006542 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <osMessageQueueNew+0xd0>
        name = attr->name;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e001      	b.n	800653a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	69f8      	ldr	r0, [r7, #28]
 800653e:	f000 fdb5 	bl	80070ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006542:	69fb      	ldr	r3, [r7, #28]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3720      	adds	r7, #32
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a07      	ldr	r2, [pc, #28]	; (8006578 <vApplicationGetIdleTaskMemory+0x2c>)
 800655c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4a06      	ldr	r2, [pc, #24]	; (800657c <vApplicationGetIdleTaskMemory+0x30>)
 8006562:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2280      	movs	r2, #128	; 0x80
 8006568:	601a      	str	r2, [r3, #0]
}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	20001db8 	.word	0x20001db8
 800657c:	20001e14 	.word	0x20001e14

08006580 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4a07      	ldr	r2, [pc, #28]	; (80065ac <vApplicationGetTimerTaskMemory+0x2c>)
 8006590:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4a06      	ldr	r2, [pc, #24]	; (80065b0 <vApplicationGetTimerTaskMemory+0x30>)
 8006596:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800659e:	601a      	str	r2, [r3, #0]
}
 80065a0:	bf00      	nop
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20002014 	.word	0x20002014
 80065b0:	20002070 	.word	0x20002070

080065b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f103 0208 	add.w	r2, r3, #8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f04f 32ff 	mov.w	r2, #4294967295
 80065cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f103 0208 	add.w	r2, r3, #8
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f103 0208 	add.w	r2, r3, #8
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800660e:	b480      	push	{r7}
 8006610:	b085      	sub	sp, #20
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	601a      	str	r2, [r3, #0]
}
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d103      	bne.n	8006676 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	e00c      	b.n	8006690 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3308      	adds	r3, #8
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	e002      	b.n	8006684 <vListInsert+0x2e>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	429a      	cmp	r2, r3
 800668e:	d2f6      	bcs.n	800667e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	601a      	str	r2, [r3, #0]
}
 80066bc:	bf00      	nop
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6892      	ldr	r2, [r2, #8]
 80066de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6852      	ldr	r2, [r2, #4]
 80066e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d103      	bne.n	80066fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	1e5a      	subs	r2, r3, #1
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006746:	f002 f885 	bl	8008854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	68f9      	ldr	r1, [r7, #12]
 8006754:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	441a      	add	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	3b01      	subs	r3, #1
 8006778:	68f9      	ldr	r1, [r7, #12]
 800677a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800677c:	fb01 f303 	mul.w	r3, r1, r3
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	22ff      	movs	r2, #255	; 0xff
 800678a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	22ff      	movs	r2, #255	; 0xff
 8006792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d114      	bne.n	80067c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01a      	beq.n	80067da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3310      	adds	r3, #16
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 f93d 	bl	8007a28 <xTaskRemoveFromEventList>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d012      	beq.n	80067da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067b4:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <xQueueGenericReset+0xcc>)
 80067b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	e009      	b.n	80067da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3310      	adds	r3, #16
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fef2 	bl	80065b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3324      	adds	r3, #36	; 0x24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff feed 	bl	80065b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067da:	f002 f86b 	bl	80088b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067de:	2301      	movs	r3, #1
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08e      	sub	sp, #56	; 0x38
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <xQueueGenericCreateStatic+0x52>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <xQueueGenericCreateStatic+0x56>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <xQueueGenericCreateStatic+0x58>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	623b      	str	r3, [r7, #32]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <xQueueGenericCreateStatic+0x7e>
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <xQueueGenericCreateStatic+0x82>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <xQueueGenericCreateStatic+0x84>
 800686e:	2300      	movs	r3, #0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	61fb      	str	r3, [r7, #28]
}
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800688a:	2350      	movs	r3, #80	; 0x50
 800688c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b50      	cmp	r3, #80	; 0x50
 8006892:	d00a      	beq.n	80068aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	61bb      	str	r3, [r7, #24]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00d      	beq.n	80068d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4613      	mov	r3, r2
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f83f 	bl	8006950 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3730      	adds	r7, #48	; 0x30
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	; 0x28
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <xQueueGenericCreate+0x2a>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	613b      	str	r3, [r7, #16]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	fb02 f303 	mul.w	r3, r2, r3
 800690e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	3350      	adds	r3, #80	; 0x50
 8006914:	4618      	mov	r0, r3
 8006916:	f002 f8bf 	bl	8008a98 <pvPortMalloc>
 800691a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d011      	beq.n	8006946 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	3350      	adds	r3, #80	; 0x50
 800692a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006934:	79fa      	ldrb	r2, [r7, #7]
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4613      	mov	r3, r2
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f805 	bl	8006950 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006946:	69bb      	ldr	r3, [r7, #24]
	}
 8006948:	4618      	mov	r0, r3
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d103      	bne.n	800696c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e002      	b.n	8006972 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800697e:	2101      	movs	r1, #1
 8006980:	69b8      	ldr	r0, [r7, #24]
 8006982:	f7ff fecb 	bl	800671c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08e      	sub	sp, #56	; 0x38
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069a6:	2300      	movs	r3, #0
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xQueueGenericSend+0x32>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <xQueueGenericSend+0x40>
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <xQueueGenericSend+0x44>
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <xQueueGenericSend+0x46>
 80069dc:	2300      	movs	r3, #0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <xQueueGenericSend+0x60>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d103      	bne.n	8006a06 <xQueueGenericSend+0x6e>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <xQueueGenericSend+0x72>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueGenericSend+0x74>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xQueueGenericSend+0x8e>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	623b      	str	r3, [r7, #32]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a26:	f001 f9bd 	bl	8007da4 <xTaskGetSchedulerState>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <xQueueGenericSend+0x9e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <xQueueGenericSend+0xa2>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <xQueueGenericSend+0xa4>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xQueueGenericSend+0xbe>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	61fb      	str	r3, [r7, #28]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a56:	f001 fefd 	bl	8008854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d302      	bcc.n	8006a6c <xQueueGenericSend+0xd4>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d129      	bne.n	8006ac0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a72:	f000 fa0b 	bl	8006e8c <prvCopyDataToQueue>
 8006a76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d010      	beq.n	8006aa2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	3324      	adds	r3, #36	; 0x24
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 ffcf 	bl	8007a28 <xTaskRemoveFromEventList>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d013      	beq.n	8006ab8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a90:	4b3f      	ldr	r3, [pc, #252]	; (8006b90 <xQueueGenericSend+0x1f8>)
 8006a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	e00a      	b.n	8006ab8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006aa8:	4b39      	ldr	r3, [pc, #228]	; (8006b90 <xQueueGenericSend+0x1f8>)
 8006aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ab8:	f001 fefc 	bl	80088b4 <vPortExitCritical>
				return pdPASS;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e063      	b.n	8006b88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d103      	bne.n	8006ace <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ac6:	f001 fef5 	bl	80088b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e05c      	b.n	8006b88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d106      	bne.n	8006ae2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ad4:	f107 0314 	add.w	r3, r7, #20
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f809 	bl	8007af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ae2:	f001 fee7 	bl	80088b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ae6:	f000 fd7b 	bl	80075e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aea:	f001 feb3 	bl	8008854 <vPortEnterCritical>
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006af4:	b25b      	sxtb	r3, r3
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d103      	bne.n	8006b04 <xQueueGenericSend+0x16c>
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b0a:	b25b      	sxtb	r3, r3
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	d103      	bne.n	8006b1a <xQueueGenericSend+0x182>
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b1a:	f001 fecb 	bl	80088b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b1e:	1d3a      	adds	r2, r7, #4
 8006b20:	f107 0314 	add.w	r3, r7, #20
 8006b24:	4611      	mov	r1, r2
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fff8 	bl	8007b1c <xTaskCheckForTimeOut>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d124      	bne.n	8006b7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b34:	f000 faa2 	bl	800707c <prvIsQueueFull>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d018      	beq.n	8006b70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	3310      	adds	r3, #16
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	4611      	mov	r1, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 ff1e 	bl	8007988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b4e:	f000 fa2d 	bl	8006fac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b52:	f000 fd53 	bl	80075fc <xTaskResumeAll>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f47f af7c 	bne.w	8006a56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b5e:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <xQueueGenericSend+0x1f8>)
 8006b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	e772      	b.n	8006a56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b72:	f000 fa1b 	bl	8006fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b76:	f000 fd41 	bl	80075fc <xTaskResumeAll>
 8006b7a:	e76c      	b.n	8006a56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b7e:	f000 fa15 	bl	8006fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b82:	f000 fd3b 	bl	80075fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3738      	adds	r7, #56	; 0x38
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	e000ed04 	.word	0xe000ed04

08006b94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b090      	sub	sp, #64	; 0x40
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d103      	bne.n	8006bd0 <xQueueGenericSendFromISR+0x3c>
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <xQueueGenericSendFromISR+0x40>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <xQueueGenericSendFromISR+0x42>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d103      	bne.n	8006bfe <xQueueGenericSendFromISR+0x6a>
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <xQueueGenericSendFromISR+0x6e>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e000      	b.n	8006c04 <xQueueGenericSendFromISR+0x70>
 8006c02:	2300      	movs	r3, #0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	623b      	str	r3, [r7, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c1e:	f001 fefb 	bl	8008a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c22:	f3ef 8211 	mrs	r2, BASEPRI
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	61fa      	str	r2, [r7, #28]
 8006c38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d302      	bcc.n	8006c50 <xQueueGenericSendFromISR+0xbc>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d12f      	bne.n	8006cb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c66:	f000 f911 	bl	8006e8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c72:	d112      	bne.n	8006c9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d016      	beq.n	8006caa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7e:	3324      	adds	r3, #36	; 0x24
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fed1 	bl	8007a28 <xTaskRemoveFromEventList>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00e      	beq.n	8006caa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00b      	beq.n	8006caa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	e007      	b.n	8006caa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	b25a      	sxtb	r2, r3
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006caa:	2301      	movs	r3, #1
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006cae:	e001      	b.n	8006cb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3740      	adds	r7, #64	; 0x40
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08c      	sub	sp, #48	; 0x30
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <xQueueReceive+0x30>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	623b      	str	r3, [r7, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <xQueueReceive+0x3e>
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <xQueueReceive+0x42>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <xQueueReceive+0x44>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10a      	bne.n	8006d2a <xQueueReceive+0x5e>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	61fb      	str	r3, [r7, #28]
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d2a:	f001 f83b 	bl	8007da4 <xTaskGetSchedulerState>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <xQueueReceive+0x6e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <xQueueReceive+0x72>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueReceive+0x74>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xQueueReceive+0x8e>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	61bb      	str	r3, [r7, #24]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d5a:	f001 fd7b 	bl	8008854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01f      	beq.n	8006daa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6e:	f000 f8f7 	bl	8006f60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	1e5a      	subs	r2, r3, #1
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00f      	beq.n	8006da2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	3310      	adds	r3, #16
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fe4e 	bl	8007a28 <xTaskRemoveFromEventList>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d92:	4b3d      	ldr	r3, [pc, #244]	; (8006e88 <xQueueReceive+0x1bc>)
 8006d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006da2:	f001 fd87 	bl	80088b4 <vPortExitCritical>
				return pdPASS;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e069      	b.n	8006e7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006db0:	f001 fd80 	bl	80088b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006db4:	2300      	movs	r3, #0
 8006db6:	e062      	b.n	8006e7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dbe:	f107 0310 	add.w	r3, r7, #16
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fe94 	bl	8007af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dcc:	f001 fd72 	bl	80088b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dd0:	f000 fc06 	bl	80075e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dd4:	f001 fd3e 	bl	8008854 <vPortEnterCritical>
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dde:	b25b      	sxtb	r3, r3
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d103      	bne.n	8006dee <xQueueReceive+0x122>
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006df4:	b25b      	sxtb	r3, r3
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d103      	bne.n	8006e04 <xQueueReceive+0x138>
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e04:	f001 fd56 	bl	80088b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e08:	1d3a      	adds	r2, r7, #4
 8006e0a:	f107 0310 	add.w	r3, r7, #16
 8006e0e:	4611      	mov	r1, r2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fe83 	bl	8007b1c <xTaskCheckForTimeOut>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d123      	bne.n	8006e64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e1e:	f000 f917 	bl	8007050 <prvIsQueueEmpty>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d017      	beq.n	8006e58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	3324      	adds	r3, #36	; 0x24
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fda9 	bl	8007988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e38:	f000 f8b8 	bl	8006fac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e3c:	f000 fbde 	bl	80075fc <xTaskResumeAll>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d189      	bne.n	8006d5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <xQueueReceive+0x1bc>)
 8006e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	e780      	b.n	8006d5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e5a:	f000 f8a7 	bl	8006fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e5e:	f000 fbcd 	bl	80075fc <xTaskResumeAll>
 8006e62:	e77a      	b.n	8006d5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e66:	f000 f8a1 	bl	8006fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e6a:	f000 fbc7 	bl	80075fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e70:	f000 f8ee 	bl	8007050 <prvIsQueueEmpty>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f43f af6f 	beq.w	8006d5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3730      	adds	r7, #48	; 0x30
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10d      	bne.n	8006ec6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d14d      	bne.n	8006f4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 ff92 	bl	8007de0 <xTaskPriorityDisinherit>
 8006ebc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	e043      	b.n	8006f4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d119      	bne.n	8006f00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6858      	ldr	r0, [r3, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	f001 fffa 	bl	8008ed0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	441a      	add	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d32b      	bcc.n	8006f4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	605a      	str	r2, [r3, #4]
 8006efe:	e026      	b.n	8006f4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68d8      	ldr	r0, [r3, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	f001 ffe0 	bl	8008ed0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	425b      	negs	r3, r3
 8006f1a:	441a      	add	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d207      	bcs.n	8006f3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	425b      	negs	r3, r3
 8006f36:	441a      	add	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d105      	bne.n	8006f4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f56:	697b      	ldr	r3, [r7, #20]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d018      	beq.n	8006fa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	441a      	add	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d303      	bcc.n	8006f94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68d9      	ldr	r1, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6838      	ldr	r0, [r7, #0]
 8006fa0:	f001 ff96 	bl	8008ed0 <memcpy>
	}
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fb4:	f001 fc4e 	bl	8008854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fc0:	e011      	b.n	8006fe6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d012      	beq.n	8006ff0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3324      	adds	r3, #36	; 0x24
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fd2a 	bl	8007a28 <xTaskRemoveFromEventList>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fda:	f000 fe01 	bl	8007be0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	dce9      	bgt.n	8006fc2 <prvUnlockQueue+0x16>
 8006fee:	e000      	b.n	8006ff2 <prvUnlockQueue+0x46>
					break;
 8006ff0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	22ff      	movs	r2, #255	; 0xff
 8006ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ffa:	f001 fc5b 	bl	80088b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ffe:	f001 fc29 	bl	8008854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007008:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800700a:	e011      	b.n	8007030 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d012      	beq.n	800703a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3310      	adds	r3, #16
 8007018:	4618      	mov	r0, r3
 800701a:	f000 fd05 	bl	8007a28 <xTaskRemoveFromEventList>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007024:	f000 fddc 	bl	8007be0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	3b01      	subs	r3, #1
 800702c:	b2db      	uxtb	r3, r3
 800702e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007034:	2b00      	cmp	r3, #0
 8007036:	dce9      	bgt.n	800700c <prvUnlockQueue+0x60>
 8007038:	e000      	b.n	800703c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800703a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	22ff      	movs	r2, #255	; 0xff
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007044:	f001 fc36 	bl	80088b4 <vPortExitCritical>
}
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007058:	f001 fbfc 	bl	8008854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	2b00      	cmp	r3, #0
 8007062:	d102      	bne.n	800706a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007064:	2301      	movs	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	e001      	b.n	800706e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800706e:	f001 fc21 	bl	80088b4 <vPortExitCritical>

	return xReturn;
 8007072:	68fb      	ldr	r3, [r7, #12]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007084:	f001 fbe6 	bl	8008854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007090:	429a      	cmp	r2, r3
 8007092:	d102      	bne.n	800709a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	e001      	b.n	800709e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800709e:	f001 fc09 	bl	80088b4 <vPortExitCritical>

	return xReturn;
 80070a2:	68fb      	ldr	r3, [r7, #12]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	e014      	b.n	80070e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070bc:	4a0f      	ldr	r2, [pc, #60]	; (80070fc <vQueueAddToRegistry+0x50>)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10b      	bne.n	80070e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070c8:	490c      	ldr	r1, [pc, #48]	; (80070fc <vQueueAddToRegistry+0x50>)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070d2:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <vQueueAddToRegistry+0x50>)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4413      	add	r3, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070de:	e006      	b.n	80070ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b07      	cmp	r3, #7
 80070ea:	d9e7      	bls.n	80070bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20002470 	.word	0x20002470

08007100 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007110:	f001 fba0 	bl	8008854 <vPortEnterCritical>
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800711a:	b25b      	sxtb	r3, r3
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007120:	d103      	bne.n	800712a <vQueueWaitForMessageRestricted+0x2a>
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007130:	b25b      	sxtb	r3, r3
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d103      	bne.n	8007140 <vQueueWaitForMessageRestricted+0x40>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007140:	f001 fbb8 	bl	80088b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	3324      	adds	r3, #36	; 0x24
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fc3b 	bl	80079d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800715a:	6978      	ldr	r0, [r7, #20]
 800715c:	f7ff ff26 	bl	8006fac <prvUnlockQueue>
	}
 8007160:	bf00      	nop
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08e      	sub	sp, #56	; 0x38
 800716c:	af04      	add	r7, sp, #16
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <xTaskCreateStatic+0x2a>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	623b      	str	r3, [r7, #32]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10a      	bne.n	80071ae <xTaskCreateStatic+0x46>
	__asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	61fb      	str	r3, [r7, #28]
}
 80071aa:	bf00      	nop
 80071ac:	e7fe      	b.n	80071ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071ae:	235c      	movs	r3, #92	; 0x5c
 80071b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	2b5c      	cmp	r3, #92	; 0x5c
 80071b6:	d00a      	beq.n	80071ce <xTaskCreateStatic+0x66>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	61bb      	str	r3, [r7, #24]
}
 80071ca:	bf00      	nop
 80071cc:	e7fe      	b.n	80071cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01e      	beq.n	8007214 <xTaskCreateStatic+0xac>
 80071d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01b      	beq.n	8007214 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	2202      	movs	r2, #2
 80071ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071ee:	2300      	movs	r3, #0
 80071f0:	9303      	str	r3, [sp, #12]
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	9302      	str	r3, [sp, #8]
 80071f6:	f107 0314 	add.w	r3, r7, #20
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	68b9      	ldr	r1, [r7, #8]
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f850 	bl	80072ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800720c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800720e:	f000 f8dd 	bl	80073cc <prvAddNewTaskToReadyList>
 8007212:	e001      	b.n	8007218 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007218:	697b      	ldr	r3, [r7, #20]
	}
 800721a:	4618      	mov	r0, r3
 800721c:	3728      	adds	r7, #40	; 0x28
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007222:	b580      	push	{r7, lr}
 8007224:	b08c      	sub	sp, #48	; 0x30
 8007226:	af04      	add	r7, sp, #16
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	4613      	mov	r3, r2
 8007230:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4618      	mov	r0, r3
 8007238:	f001 fc2e 	bl	8008a98 <pvPortMalloc>
 800723c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00e      	beq.n	8007262 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007244:	205c      	movs	r0, #92	; 0x5c
 8007246:	f001 fc27 	bl	8008a98 <pvPortMalloc>
 800724a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	631a      	str	r2, [r3, #48]	; 0x30
 8007258:	e005      	b.n	8007266 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800725a:	6978      	ldr	r0, [r7, #20]
 800725c:	f001 fce8 	bl	8008c30 <vPortFree>
 8007260:	e001      	b.n	8007266 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d017      	beq.n	800729c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007274:	88fa      	ldrh	r2, [r7, #6]
 8007276:	2300      	movs	r3, #0
 8007278:	9303      	str	r3, [sp, #12]
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	9302      	str	r3, [sp, #8]
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f80e 	bl	80072ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007290:	69f8      	ldr	r0, [r7, #28]
 8007292:	f000 f89b 	bl	80073cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007296:	2301      	movs	r3, #1
 8007298:	61bb      	str	r3, [r7, #24]
 800729a:	e002      	b.n	80072a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800729c:	f04f 33ff 	mov.w	r3, #4294967295
 80072a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072a2:	69bb      	ldr	r3, [r7, #24]
	}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3720      	adds	r7, #32
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	461a      	mov	r2, r3
 80072c4:	21a5      	movs	r1, #165	; 0xa5
 80072c6:	f001 fe11 	bl	8008eec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072d4:	3b01      	subs	r3, #1
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	f023 0307 	bic.w	r3, r3, #7
 80072e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <prvInitialiseNewTask+0x58>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	617b      	str	r3, [r7, #20]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d01f      	beq.n	800734a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	e012      	b.n	8007336 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	7819      	ldrb	r1, [r3, #0]
 8007318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4413      	add	r3, r2
 800731e:	3334      	adds	r3, #52	; 0x34
 8007320:	460a      	mov	r2, r1
 8007322:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	4413      	add	r3, r2
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d006      	beq.n	800733e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	3301      	adds	r3, #1
 8007334:	61fb      	str	r3, [r7, #28]
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2b0f      	cmp	r3, #15
 800733a:	d9e9      	bls.n	8007310 <prvInitialiseNewTask+0x64>
 800733c:	e000      	b.n	8007340 <prvInitialiseNewTask+0x94>
			{
				break;
 800733e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007348:	e003      	b.n	8007352 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	2b37      	cmp	r3, #55	; 0x37
 8007356:	d901      	bls.n	800735c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007358:	2337      	movs	r3, #55	; 0x37
 800735a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007360:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007366:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	2200      	movs	r2, #0
 800736c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	3304      	adds	r3, #4
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff f93e 	bl	80065f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	3318      	adds	r3, #24
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff f939 	bl	80065f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007396:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	2200      	movs	r2, #0
 800739c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	68f9      	ldr	r1, [r7, #12]
 80073aa:	69b8      	ldr	r0, [r7, #24]
 80073ac:	f001 f928 	bl	8008600 <pxPortInitialiseStack>
 80073b0:	4602      	mov	r2, r0
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073c2:	bf00      	nop
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073d4:	f001 fa3e 	bl	8008854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073d8:	4b2d      	ldr	r3, [pc, #180]	; (8007490 <prvAddNewTaskToReadyList+0xc4>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3301      	adds	r3, #1
 80073de:	4a2c      	ldr	r2, [pc, #176]	; (8007490 <prvAddNewTaskToReadyList+0xc4>)
 80073e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073e2:	4b2c      	ldr	r3, [pc, #176]	; (8007494 <prvAddNewTaskToReadyList+0xc8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d109      	bne.n	80073fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073ea:	4a2a      	ldr	r2, [pc, #168]	; (8007494 <prvAddNewTaskToReadyList+0xc8>)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073f0:	4b27      	ldr	r3, [pc, #156]	; (8007490 <prvAddNewTaskToReadyList+0xc4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d110      	bne.n	800741a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073f8:	f000 fc16 	bl	8007c28 <prvInitialiseTaskLists>
 80073fc:	e00d      	b.n	800741a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073fe:	4b26      	ldr	r3, [pc, #152]	; (8007498 <prvAddNewTaskToReadyList+0xcc>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007406:	4b23      	ldr	r3, [pc, #140]	; (8007494 <prvAddNewTaskToReadyList+0xc8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	429a      	cmp	r2, r3
 8007412:	d802      	bhi.n	800741a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007414:	4a1f      	ldr	r2, [pc, #124]	; (8007494 <prvAddNewTaskToReadyList+0xc8>)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800741a:	4b20      	ldr	r3, [pc, #128]	; (800749c <prvAddNewTaskToReadyList+0xd0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3301      	adds	r3, #1
 8007420:	4a1e      	ldr	r2, [pc, #120]	; (800749c <prvAddNewTaskToReadyList+0xd0>)
 8007422:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007424:	4b1d      	ldr	r3, [pc, #116]	; (800749c <prvAddNewTaskToReadyList+0xd0>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	4b1b      	ldr	r3, [pc, #108]	; (80074a0 <prvAddNewTaskToReadyList+0xd4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d903      	bls.n	8007440 <prvAddNewTaskToReadyList+0x74>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <prvAddNewTaskToReadyList+0xd4>)
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <prvAddNewTaskToReadyList+0xd8>)
 800744e:	441a      	add	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3304      	adds	r3, #4
 8007454:	4619      	mov	r1, r3
 8007456:	4610      	mov	r0, r2
 8007458:	f7ff f8d9 	bl	800660e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800745c:	f001 fa2a 	bl	80088b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007460:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <prvAddNewTaskToReadyList+0xcc>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00e      	beq.n	8007486 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <prvAddNewTaskToReadyList+0xc8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	429a      	cmp	r2, r3
 8007474:	d207      	bcs.n	8007486 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007476:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <prvAddNewTaskToReadyList+0xdc>)
 8007478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20002984 	.word	0x20002984
 8007494:	200024b0 	.word	0x200024b0
 8007498:	20002990 	.word	0x20002990
 800749c:	200029a0 	.word	0x200029a0
 80074a0:	2000298c 	.word	0x2000298c
 80074a4:	200024b4 	.word	0x200024b4
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d017      	beq.n	80074ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <vTaskDelay+0x60>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <vTaskDelay+0x30>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	60bb      	str	r3, [r7, #8]
}
 80074d8:	bf00      	nop
 80074da:	e7fe      	b.n	80074da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80074dc:	f000 f880 	bl	80075e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fcea 	bl	8007ebc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074e8:	f000 f888 	bl	80075fc <xTaskResumeAll>
 80074ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d107      	bne.n	8007504 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80074f4:	4b06      	ldr	r3, [pc, #24]	; (8007510 <vTaskDelay+0x64>)
 80074f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007504:	bf00      	nop
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	200029ac 	.word	0x200029ac
 8007510:	e000ed04 	.word	0xe000ed04

08007514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007522:	463a      	mov	r2, r7
 8007524:	1d39      	adds	r1, r7, #4
 8007526:	f107 0308 	add.w	r3, r7, #8
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff f80e 	bl	800654c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	9202      	str	r2, [sp, #8]
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	2300      	movs	r3, #0
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	2300      	movs	r3, #0
 8007540:	460a      	mov	r2, r1
 8007542:	4921      	ldr	r1, [pc, #132]	; (80075c8 <vTaskStartScheduler+0xb4>)
 8007544:	4821      	ldr	r0, [pc, #132]	; (80075cc <vTaskStartScheduler+0xb8>)
 8007546:	f7ff fe0f 	bl	8007168 <xTaskCreateStatic>
 800754a:	4603      	mov	r3, r0
 800754c:	4a20      	ldr	r2, [pc, #128]	; (80075d0 <vTaskStartScheduler+0xbc>)
 800754e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007550:	4b1f      	ldr	r3, [pc, #124]	; (80075d0 <vTaskStartScheduler+0xbc>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007558:	2301      	movs	r3, #1
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	e001      	b.n	8007562 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d102      	bne.n	800756e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007568:	f000 fcfc 	bl	8007f64 <xTimerCreateTimerTask>
 800756c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d116      	bne.n	80075a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	613b      	str	r3, [r7, #16]
}
 8007586:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007588:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <vTaskStartScheduler+0xc0>)
 800758a:	f04f 32ff 	mov.w	r2, #4294967295
 800758e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <vTaskStartScheduler+0xc4>)
 8007592:	2201      	movs	r2, #1
 8007594:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007596:	4b11      	ldr	r3, [pc, #68]	; (80075dc <vTaskStartScheduler+0xc8>)
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800759c:	f001 f8b8 	bl	8008710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075a0:	e00e      	b.n	80075c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d10a      	bne.n	80075c0 <vTaskStartScheduler+0xac>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	60fb      	str	r3, [r7, #12]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <vTaskStartScheduler+0xaa>
}
 80075c0:	bf00      	nop
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	0800a788 	.word	0x0800a788
 80075cc:	08007bf9 	.word	0x08007bf9
 80075d0:	200029a8 	.word	0x200029a8
 80075d4:	200029a4 	.word	0x200029a4
 80075d8:	20002990 	.word	0x20002990
 80075dc:	20002988 	.word	0x20002988

080075e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80075e4:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <vTaskSuspendAll+0x18>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3301      	adds	r3, #1
 80075ea:	4a03      	ldr	r2, [pc, #12]	; (80075f8 <vTaskSuspendAll+0x18>)
 80075ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80075ee:	bf00      	nop
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	200029ac 	.word	0x200029ac

080075fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800760a:	4b42      	ldr	r3, [pc, #264]	; (8007714 <xTaskResumeAll+0x118>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <xTaskResumeAll+0x2c>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	603b      	str	r3, [r7, #0]
}
 8007624:	bf00      	nop
 8007626:	e7fe      	b.n	8007626 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007628:	f001 f914 	bl	8008854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800762c:	4b39      	ldr	r3, [pc, #228]	; (8007714 <xTaskResumeAll+0x118>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3b01      	subs	r3, #1
 8007632:	4a38      	ldr	r2, [pc, #224]	; (8007714 <xTaskResumeAll+0x118>)
 8007634:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007636:	4b37      	ldr	r3, [pc, #220]	; (8007714 <xTaskResumeAll+0x118>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d162      	bne.n	8007704 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800763e:	4b36      	ldr	r3, [pc, #216]	; (8007718 <xTaskResumeAll+0x11c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d05e      	beq.n	8007704 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007646:	e02f      	b.n	80076a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007648:	4b34      	ldr	r3, [pc, #208]	; (800771c <xTaskResumeAll+0x120>)
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3318      	adds	r3, #24
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff f837 	bl	80066c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3304      	adds	r3, #4
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff f832 	bl	80066c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007668:	4b2d      	ldr	r3, [pc, #180]	; (8007720 <xTaskResumeAll+0x124>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d903      	bls.n	8007678 <xTaskResumeAll+0x7c>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	4a2a      	ldr	r2, [pc, #168]	; (8007720 <xTaskResumeAll+0x124>)
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4a27      	ldr	r2, [pc, #156]	; (8007724 <xTaskResumeAll+0x128>)
 8007686:	441a      	add	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3304      	adds	r3, #4
 800768c:	4619      	mov	r1, r3
 800768e:	4610      	mov	r0, r2
 8007690:	f7fe ffbd 	bl	800660e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007698:	4b23      	ldr	r3, [pc, #140]	; (8007728 <xTaskResumeAll+0x12c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	429a      	cmp	r2, r3
 80076a0:	d302      	bcc.n	80076a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80076a2:	4b22      	ldr	r3, [pc, #136]	; (800772c <xTaskResumeAll+0x130>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076a8:	4b1c      	ldr	r3, [pc, #112]	; (800771c <xTaskResumeAll+0x120>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1cb      	bne.n	8007648 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076b6:	f000 fb55 	bl	8007d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076ba:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <xTaskResumeAll+0x134>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d010      	beq.n	80076e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076c6:	f000 f847 	bl	8007758 <xTaskIncrementTick>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80076d0:	4b16      	ldr	r3, [pc, #88]	; (800772c <xTaskResumeAll+0x130>)
 80076d2:	2201      	movs	r2, #1
 80076d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3b01      	subs	r3, #1
 80076da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1f1      	bne.n	80076c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80076e2:	4b13      	ldr	r3, [pc, #76]	; (8007730 <xTaskResumeAll+0x134>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076e8:	4b10      	ldr	r3, [pc, #64]	; (800772c <xTaskResumeAll+0x130>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d009      	beq.n	8007704 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076f0:	2301      	movs	r3, #1
 80076f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076f4:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <xTaskResumeAll+0x138>)
 80076f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007704:	f001 f8d6 	bl	80088b4 <vPortExitCritical>

	return xAlreadyYielded;
 8007708:	68bb      	ldr	r3, [r7, #8]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	200029ac 	.word	0x200029ac
 8007718:	20002984 	.word	0x20002984
 800771c:	20002944 	.word	0x20002944
 8007720:	2000298c 	.word	0x2000298c
 8007724:	200024b4 	.word	0x200024b4
 8007728:	200024b0 	.word	0x200024b0
 800772c:	20002998 	.word	0x20002998
 8007730:	20002994 	.word	0x20002994
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800773e:	4b05      	ldr	r3, [pc, #20]	; (8007754 <xTaskGetTickCount+0x1c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007744:	687b      	ldr	r3, [r7, #4]
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20002988 	.word	0x20002988

08007758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007762:	4b4f      	ldr	r3, [pc, #316]	; (80078a0 <xTaskIncrementTick+0x148>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f040 808f 	bne.w	800788a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800776c:	4b4d      	ldr	r3, [pc, #308]	; (80078a4 <xTaskIncrementTick+0x14c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3301      	adds	r3, #1
 8007772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007774:	4a4b      	ldr	r2, [pc, #300]	; (80078a4 <xTaskIncrementTick+0x14c>)
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d120      	bne.n	80077c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007780:	4b49      	ldr	r3, [pc, #292]	; (80078a8 <xTaskIncrementTick+0x150>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	603b      	str	r3, [r7, #0]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <xTaskIncrementTick+0x46>
 80077a0:	4b41      	ldr	r3, [pc, #260]	; (80078a8 <xTaskIncrementTick+0x150>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	4b41      	ldr	r3, [pc, #260]	; (80078ac <xTaskIncrementTick+0x154>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a3f      	ldr	r2, [pc, #252]	; (80078a8 <xTaskIncrementTick+0x150>)
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	4a3f      	ldr	r2, [pc, #252]	; (80078ac <xTaskIncrementTick+0x154>)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	4b3e      	ldr	r3, [pc, #248]	; (80078b0 <xTaskIncrementTick+0x158>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	4a3d      	ldr	r2, [pc, #244]	; (80078b0 <xTaskIncrementTick+0x158>)
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	f000 fad1 	bl	8007d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077c2:	4b3c      	ldr	r3, [pc, #240]	; (80078b4 <xTaskIncrementTick+0x15c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d349      	bcc.n	8007860 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077cc:	4b36      	ldr	r3, [pc, #216]	; (80078a8 <xTaskIncrementTick+0x150>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d6:	4b37      	ldr	r3, [pc, #220]	; (80078b4 <xTaskIncrementTick+0x15c>)
 80077d8:	f04f 32ff 	mov.w	r2, #4294967295
 80077dc:	601a      	str	r2, [r3, #0]
					break;
 80077de:	e03f      	b.n	8007860 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e0:	4b31      	ldr	r3, [pc, #196]	; (80078a8 <xTaskIncrementTick+0x150>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d203      	bcs.n	8007800 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077f8:	4a2e      	ldr	r2, [pc, #184]	; (80078b4 <xTaskIncrementTick+0x15c>)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077fe:	e02f      	b.n	8007860 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	3304      	adds	r3, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe ff5f 	bl	80066c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	3318      	adds	r3, #24
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe ff56 	bl	80066c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4b25      	ldr	r3, [pc, #148]	; (80078b8 <xTaskIncrementTick+0x160>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d903      	bls.n	8007830 <xTaskIncrementTick+0xd8>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	4a22      	ldr	r2, [pc, #136]	; (80078b8 <xTaskIncrementTick+0x160>)
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4a1f      	ldr	r2, [pc, #124]	; (80078bc <xTaskIncrementTick+0x164>)
 800783e:	441a      	add	r2, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7fe fee1 	bl	800660e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007850:	4b1b      	ldr	r3, [pc, #108]	; (80078c0 <xTaskIncrementTick+0x168>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	429a      	cmp	r2, r3
 8007858:	d3b8      	bcc.n	80077cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800785a:	2301      	movs	r3, #1
 800785c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800785e:	e7b5      	b.n	80077cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007860:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <xTaskIncrementTick+0x168>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007866:	4915      	ldr	r1, [pc, #84]	; (80078bc <xTaskIncrementTick+0x164>)
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d901      	bls.n	800787c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800787c:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <xTaskIncrementTick+0x16c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007884:	2301      	movs	r3, #1
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	e004      	b.n	8007894 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800788a:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <xTaskIncrementTick+0x170>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3301      	adds	r3, #1
 8007890:	4a0d      	ldr	r2, [pc, #52]	; (80078c8 <xTaskIncrementTick+0x170>)
 8007892:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007894:	697b      	ldr	r3, [r7, #20]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	200029ac 	.word	0x200029ac
 80078a4:	20002988 	.word	0x20002988
 80078a8:	2000293c 	.word	0x2000293c
 80078ac:	20002940 	.word	0x20002940
 80078b0:	2000299c 	.word	0x2000299c
 80078b4:	200029a4 	.word	0x200029a4
 80078b8:	2000298c 	.word	0x2000298c
 80078bc:	200024b4 	.word	0x200024b4
 80078c0:	200024b0 	.word	0x200024b0
 80078c4:	20002998 	.word	0x20002998
 80078c8:	20002994 	.word	0x20002994

080078cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078d2:	4b28      	ldr	r3, [pc, #160]	; (8007974 <vTaskSwitchContext+0xa8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078da:	4b27      	ldr	r3, [pc, #156]	; (8007978 <vTaskSwitchContext+0xac>)
 80078dc:	2201      	movs	r2, #1
 80078de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078e0:	e041      	b.n	8007966 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80078e2:	4b25      	ldr	r3, [pc, #148]	; (8007978 <vTaskSwitchContext+0xac>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e8:	4b24      	ldr	r3, [pc, #144]	; (800797c <vTaskSwitchContext+0xb0>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	e010      	b.n	8007912 <vTaskSwitchContext+0x46>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10a      	bne.n	800790c <vTaskSwitchContext+0x40>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	607b      	str	r3, [r7, #4]
}
 8007908:	bf00      	nop
 800790a:	e7fe      	b.n	800790a <vTaskSwitchContext+0x3e>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3b01      	subs	r3, #1
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	491b      	ldr	r1, [pc, #108]	; (8007980 <vTaskSwitchContext+0xb4>)
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	440b      	add	r3, r1
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0e4      	beq.n	80078f0 <vTaskSwitchContext+0x24>
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4613      	mov	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4a13      	ldr	r2, [pc, #76]	; (8007980 <vTaskSwitchContext+0xb4>)
 8007932:	4413      	add	r3, r2
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	605a      	str	r2, [r3, #4]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	3308      	adds	r3, #8
 8007948:	429a      	cmp	r2, r3
 800794a:	d104      	bne.n	8007956 <vTaskSwitchContext+0x8a>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	4a09      	ldr	r2, [pc, #36]	; (8007984 <vTaskSwitchContext+0xb8>)
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	4a06      	ldr	r2, [pc, #24]	; (800797c <vTaskSwitchContext+0xb0>)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6013      	str	r3, [r2, #0]
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	200029ac 	.word	0x200029ac
 8007978:	20002998 	.word	0x20002998
 800797c:	2000298c 	.word	0x2000298c
 8007980:	200024b4 	.word	0x200024b4
 8007984:	200024b0 	.word	0x200024b0

08007988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	60fb      	str	r3, [r7, #12]
}
 80079aa:	bf00      	nop
 80079ac:	e7fe      	b.n	80079ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079ae:	4b07      	ldr	r3, [pc, #28]	; (80079cc <vTaskPlaceOnEventList+0x44>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3318      	adds	r3, #24
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fe fe4d 	bl	8006656 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079bc:	2101      	movs	r1, #1
 80079be:	6838      	ldr	r0, [r7, #0]
 80079c0:	f000 fa7c 	bl	8007ebc <prvAddCurrentTaskToDelayedList>
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	200024b0 	.word	0x200024b0

080079d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	617b      	str	r3, [r7, #20]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <vTaskPlaceOnEventListRestricted+0x54>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3318      	adds	r3, #24
 80079fe:	4619      	mov	r1, r3
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7fe fe04 	bl	800660e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	68b8      	ldr	r0, [r7, #8]
 8007a16:	f000 fa51 	bl	8007ebc <prvAddCurrentTaskToDelayedList>
	}
 8007a1a:	bf00      	nop
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	200024b0 	.word	0x200024b0

08007a28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60fb      	str	r3, [r7, #12]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	3318      	adds	r3, #24
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fe35 	bl	80066c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a5e:	4b1e      	ldr	r3, [pc, #120]	; (8007ad8 <xTaskRemoveFromEventList+0xb0>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d11d      	bne.n	8007aa2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fe2c 	bl	80066c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a74:	4b19      	ldr	r3, [pc, #100]	; (8007adc <xTaskRemoveFromEventList+0xb4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d903      	bls.n	8007a84 <xTaskRemoveFromEventList+0x5c>
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	4a16      	ldr	r2, [pc, #88]	; (8007adc <xTaskRemoveFromEventList+0xb4>)
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <xTaskRemoveFromEventList+0xb8>)
 8007a92:	441a      	add	r2, r3
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	3304      	adds	r3, #4
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	f7fe fdb7 	bl	800660e <vListInsertEnd>
 8007aa0:	e005      	b.n	8007aae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	3318      	adds	r3, #24
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	480e      	ldr	r0, [pc, #56]	; (8007ae4 <xTaskRemoveFromEventList+0xbc>)
 8007aaa:	f7fe fdb0 	bl	800660e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <xTaskRemoveFromEventList+0xc0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d905      	bls.n	8007ac8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <xTaskRemoveFromEventList+0xc4>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e001      	b.n	8007acc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007acc:	697b      	ldr	r3, [r7, #20]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200029ac 	.word	0x200029ac
 8007adc:	2000298c 	.word	0x2000298c
 8007ae0:	200024b4 	.word	0x200024b4
 8007ae4:	20002944 	.word	0x20002944
 8007ae8:	200024b0 	.word	0x200024b0
 8007aec:	20002998 	.word	0x20002998

08007af0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007af8:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <vTaskInternalSetTimeOutState+0x24>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b00:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <vTaskInternalSetTimeOutState+0x28>)
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	605a      	str	r2, [r3, #4]
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	2000299c 	.word	0x2000299c
 8007b18:	20002988 	.word	0x20002988

08007b1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	613b      	str	r3, [r7, #16]
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10a      	bne.n	8007b5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	60fb      	str	r3, [r7, #12]
}
 8007b5a:	bf00      	nop
 8007b5c:	e7fe      	b.n	8007b5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007b5e:	f000 fe79 	bl	8008854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b62:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <xTaskCheckForTimeOut+0xbc>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7a:	d102      	bne.n	8007b82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	61fb      	str	r3, [r7, #28]
 8007b80:	e023      	b.n	8007bca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	4b15      	ldr	r3, [pc, #84]	; (8007bdc <xTaskCheckForTimeOut+0xc0>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d007      	beq.n	8007b9e <xTaskCheckForTimeOut+0x82>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d302      	bcc.n	8007b9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	e015      	b.n	8007bca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d20b      	bcs.n	8007bc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	1ad2      	subs	r2, r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff ff9b 	bl	8007af0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	e004      	b.n	8007bca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bca:	f000 fe73 	bl	80088b4 <vPortExitCritical>

	return xReturn;
 8007bce:	69fb      	ldr	r3, [r7, #28]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3720      	adds	r7, #32
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20002988 	.word	0x20002988
 8007bdc:	2000299c 	.word	0x2000299c

08007be0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007be4:	4b03      	ldr	r3, [pc, #12]	; (8007bf4 <vTaskMissedYield+0x14>)
 8007be6:	2201      	movs	r2, #1
 8007be8:	601a      	str	r2, [r3, #0]
}
 8007bea:	bf00      	nop
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	20002998 	.word	0x20002998

08007bf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c00:	f000 f852 	bl	8007ca8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c04:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <prvIdleTask+0x28>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d9f9      	bls.n	8007c00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <prvIdleTask+0x2c>)
 8007c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c1c:	e7f0      	b.n	8007c00 <prvIdleTask+0x8>
 8007c1e:	bf00      	nop
 8007c20:	200024b4 	.word	0x200024b4
 8007c24:	e000ed04 	.word	0xe000ed04

08007c28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c2e:	2300      	movs	r3, #0
 8007c30:	607b      	str	r3, [r7, #4]
 8007c32:	e00c      	b.n	8007c4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4a12      	ldr	r2, [pc, #72]	; (8007c88 <prvInitialiseTaskLists+0x60>)
 8007c40:	4413      	add	r3, r2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fcb6 	bl	80065b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	607b      	str	r3, [r7, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b37      	cmp	r3, #55	; 0x37
 8007c52:	d9ef      	bls.n	8007c34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c54:	480d      	ldr	r0, [pc, #52]	; (8007c8c <prvInitialiseTaskLists+0x64>)
 8007c56:	f7fe fcad 	bl	80065b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c5a:	480d      	ldr	r0, [pc, #52]	; (8007c90 <prvInitialiseTaskLists+0x68>)
 8007c5c:	f7fe fcaa 	bl	80065b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c60:	480c      	ldr	r0, [pc, #48]	; (8007c94 <prvInitialiseTaskLists+0x6c>)
 8007c62:	f7fe fca7 	bl	80065b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c66:	480c      	ldr	r0, [pc, #48]	; (8007c98 <prvInitialiseTaskLists+0x70>)
 8007c68:	f7fe fca4 	bl	80065b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c6c:	480b      	ldr	r0, [pc, #44]	; (8007c9c <prvInitialiseTaskLists+0x74>)
 8007c6e:	f7fe fca1 	bl	80065b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c72:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <prvInitialiseTaskLists+0x78>)
 8007c74:	4a05      	ldr	r2, [pc, #20]	; (8007c8c <prvInitialiseTaskLists+0x64>)
 8007c76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <prvInitialiseTaskLists+0x7c>)
 8007c7a:	4a05      	ldr	r2, [pc, #20]	; (8007c90 <prvInitialiseTaskLists+0x68>)
 8007c7c:	601a      	str	r2, [r3, #0]
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	200024b4 	.word	0x200024b4
 8007c8c:	20002914 	.word	0x20002914
 8007c90:	20002928 	.word	0x20002928
 8007c94:	20002944 	.word	0x20002944
 8007c98:	20002958 	.word	0x20002958
 8007c9c:	20002970 	.word	0x20002970
 8007ca0:	2000293c 	.word	0x2000293c
 8007ca4:	20002940 	.word	0x20002940

08007ca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cae:	e019      	b.n	8007ce4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cb0:	f000 fdd0 	bl	8008854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb4:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <prvCheckTasksWaitingTermination+0x50>)
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fd01 	bl	80066c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <prvCheckTasksWaitingTermination+0x54>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	4a0b      	ldr	r2, [pc, #44]	; (8007cfc <prvCheckTasksWaitingTermination+0x54>)
 8007cce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <prvCheckTasksWaitingTermination+0x58>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	4a0a      	ldr	r2, [pc, #40]	; (8007d00 <prvCheckTasksWaitingTermination+0x58>)
 8007cd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cda:	f000 fdeb 	bl	80088b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f810 	bl	8007d04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ce4:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <prvCheckTasksWaitingTermination+0x58>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e1      	bne.n	8007cb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20002958 	.word	0x20002958
 8007cfc:	20002984 	.word	0x20002984
 8007d00:	2000296c 	.word	0x2000296c

08007d04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d108      	bne.n	8007d28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 ff88 	bl	8008c30 <vPortFree>
				vPortFree( pxTCB );
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 ff85 	bl	8008c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d26:	e018      	b.n	8007d5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d103      	bne.n	8007d3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 ff7c 	bl	8008c30 <vPortFree>
	}
 8007d38:	e00f      	b.n	8007d5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d00a      	beq.n	8007d5a <prvDeleteTCB+0x56>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	60fb      	str	r3, [r7, #12]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <prvDeleteTCB+0x54>
	}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d6a:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <prvResetNextTaskUnblockTime+0x38>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d104      	bne.n	8007d7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d74:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <prvResetNextTaskUnblockTime+0x3c>)
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d7c:	e008      	b.n	8007d90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d7e:	4b07      	ldr	r3, [pc, #28]	; (8007d9c <prvResetNextTaskUnblockTime+0x38>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	4a04      	ldr	r2, [pc, #16]	; (8007da0 <prvResetNextTaskUnblockTime+0x3c>)
 8007d8e:	6013      	str	r3, [r2, #0]
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	2000293c 	.word	0x2000293c
 8007da0:	200029a4 	.word	0x200029a4

08007da4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007daa:	4b0b      	ldr	r3, [pc, #44]	; (8007dd8 <xTaskGetSchedulerState+0x34>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d102      	bne.n	8007db8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007db2:	2301      	movs	r3, #1
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	e008      	b.n	8007dca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db8:	4b08      	ldr	r3, [pc, #32]	; (8007ddc <xTaskGetSchedulerState+0x38>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d102      	bne.n	8007dc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	607b      	str	r3, [r7, #4]
 8007dc4:	e001      	b.n	8007dca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007dca:	687b      	ldr	r3, [r7, #4]
	}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	20002990 	.word	0x20002990
 8007ddc:	200029ac 	.word	0x200029ac

08007de0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d056      	beq.n	8007ea4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007df6:	4b2e      	ldr	r3, [pc, #184]	; (8007eb0 <xTaskPriorityDisinherit+0xd0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d00a      	beq.n	8007e16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	60fb      	str	r3, [r7, #12]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	60bb      	str	r3, [r7, #8]
}
 8007e30:	bf00      	nop
 8007e32:	e7fe      	b.n	8007e32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e38:	1e5a      	subs	r2, r3, #1
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d02c      	beq.n	8007ea4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d128      	bne.n	8007ea4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	3304      	adds	r3, #4
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fc36 	bl	80066c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e74:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <xTaskPriorityDisinherit+0xd4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d903      	bls.n	8007e84 <xTaskPriorityDisinherit+0xa4>
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	4a0c      	ldr	r2, [pc, #48]	; (8007eb4 <xTaskPriorityDisinherit+0xd4>)
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e88:	4613      	mov	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4a09      	ldr	r2, [pc, #36]	; (8007eb8 <xTaskPriorityDisinherit+0xd8>)
 8007e92:	441a      	add	r2, r3
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	3304      	adds	r3, #4
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	f7fe fbb7 	bl	800660e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ea4:	697b      	ldr	r3, [r7, #20]
	}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	200024b0 	.word	0x200024b0
 8007eb4:	2000298c 	.word	0x2000298c
 8007eb8:	200024b4 	.word	0x200024b4

08007ebc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ec6:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <prvAddCurrentTaskToDelayedList+0x90>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ecc:	4b20      	ldr	r3, [pc, #128]	; (8007f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fbf8 	bl	80066c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d10a      	bne.n	8007ef6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ee6:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4619      	mov	r1, r3
 8007eee:	4819      	ldr	r0, [pc, #100]	; (8007f54 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ef0:	f7fe fb8d 	bl	800660e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ef4:	e026      	b.n	8007f44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4413      	add	r3, r2
 8007efc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007efe:	4b14      	ldr	r3, [pc, #80]	; (8007f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d209      	bcs.n	8007f22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f0e:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	f7fe fb9b 	bl	8006656 <vListInsert>
}
 8007f20:	e010      	b.n	8007f44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f22:	4b0e      	ldr	r3, [pc, #56]	; (8007f5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	f7fe fb91 	bl	8006656 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f34:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d202      	bcs.n	8007f44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f3e:	4a08      	ldr	r2, [pc, #32]	; (8007f60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6013      	str	r3, [r2, #0]
}
 8007f44:	bf00      	nop
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20002988 	.word	0x20002988
 8007f50:	200024b0 	.word	0x200024b0
 8007f54:	20002970 	.word	0x20002970
 8007f58:	20002940 	.word	0x20002940
 8007f5c:	2000293c 	.word	0x2000293c
 8007f60:	200029a4 	.word	0x200029a4

08007f64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	; 0x28
 8007f68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f6e:	f000 fb07 	bl	8008580 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f72:	4b1c      	ldr	r3, [pc, #112]	; (8007fe4 <xTimerCreateTimerTask+0x80>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d021      	beq.n	8007fbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f82:	1d3a      	adds	r2, r7, #4
 8007f84:	f107 0108 	add.w	r1, r7, #8
 8007f88:	f107 030c 	add.w	r3, r7, #12
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fe faf7 	bl	8006580 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	9202      	str	r2, [sp, #8]
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	460a      	mov	r2, r1
 8007fa4:	4910      	ldr	r1, [pc, #64]	; (8007fe8 <xTimerCreateTimerTask+0x84>)
 8007fa6:	4811      	ldr	r0, [pc, #68]	; (8007fec <xTimerCreateTimerTask+0x88>)
 8007fa8:	f7ff f8de 	bl	8007168 <xTaskCreateStatic>
 8007fac:	4603      	mov	r3, r0
 8007fae:	4a10      	ldr	r2, [pc, #64]	; (8007ff0 <xTimerCreateTimerTask+0x8c>)
 8007fb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007fb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <xTimerCreateTimerTask+0x8c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10a      	bne.n	8007fda <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	613b      	str	r3, [r7, #16]
}
 8007fd6:	bf00      	nop
 8007fd8:	e7fe      	b.n	8007fd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007fda:	697b      	ldr	r3, [r7, #20]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200029e0 	.word	0x200029e0
 8007fe8:	0800a790 	.word	0x0800a790
 8007fec:	08008129 	.word	0x08008129
 8007ff0:	200029e4 	.word	0x200029e4

08007ff4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	; 0x28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008002:	2300      	movs	r3, #0
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <xTimerGenericCommand+0x2e>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	623b      	str	r3, [r7, #32]
}
 800801e:	bf00      	nop
 8008020:	e7fe      	b.n	8008020 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008022:	4b1a      	ldr	r3, [pc, #104]	; (800808c <xTimerGenericCommand+0x98>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d02a      	beq.n	8008080 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b05      	cmp	r3, #5
 800803a:	dc18      	bgt.n	800806e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800803c:	f7ff feb2 	bl	8007da4 <xTaskGetSchedulerState>
 8008040:	4603      	mov	r3, r0
 8008042:	2b02      	cmp	r3, #2
 8008044:	d109      	bne.n	800805a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008046:	4b11      	ldr	r3, [pc, #68]	; (800808c <xTimerGenericCommand+0x98>)
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	f107 0110 	add.w	r1, r7, #16
 800804e:	2300      	movs	r3, #0
 8008050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008052:	f7fe fca1 	bl	8006998 <xQueueGenericSend>
 8008056:	6278      	str	r0, [r7, #36]	; 0x24
 8008058:	e012      	b.n	8008080 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800805a:	4b0c      	ldr	r3, [pc, #48]	; (800808c <xTimerGenericCommand+0x98>)
 800805c:	6818      	ldr	r0, [r3, #0]
 800805e:	f107 0110 	add.w	r1, r7, #16
 8008062:	2300      	movs	r3, #0
 8008064:	2200      	movs	r2, #0
 8008066:	f7fe fc97 	bl	8006998 <xQueueGenericSend>
 800806a:	6278      	str	r0, [r7, #36]	; 0x24
 800806c:	e008      	b.n	8008080 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800806e:	4b07      	ldr	r3, [pc, #28]	; (800808c <xTimerGenericCommand+0x98>)
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f107 0110 	add.w	r1, r7, #16
 8008076:	2300      	movs	r3, #0
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	f7fe fd8b 	bl	8006b94 <xQueueGenericSendFromISR>
 800807e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008082:	4618      	mov	r0, r3
 8008084:	3728      	adds	r7, #40	; 0x28
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	200029e0 	.word	0x200029e0

08008090 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af02      	add	r7, sp, #8
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800809a:	4b22      	ldr	r3, [pc, #136]	; (8008124 <prvProcessExpiredTimer+0x94>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fb0d 	bl	80066c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d022      	beq.n	8008102 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	699a      	ldr	r2, [r3, #24]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	18d1      	adds	r1, r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	6978      	ldr	r0, [r7, #20]
 80080ca:	f000 f8d1 	bl	8008270 <prvInsertTimerInActiveList>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01f      	beq.n	8008114 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080d4:	2300      	movs	r3, #0
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	2300      	movs	r3, #0
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	2100      	movs	r1, #0
 80080de:	6978      	ldr	r0, [r7, #20]
 80080e0:	f7ff ff88 	bl	8007ff4 <xTimerGenericCommand>
 80080e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d113      	bne.n	8008114 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	60fb      	str	r3, [r7, #12]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008108:	f023 0301 	bic.w	r3, r3, #1
 800810c:	b2da      	uxtb	r2, r3
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	6978      	ldr	r0, [r7, #20]
 800811a:	4798      	blx	r3
}
 800811c:	bf00      	nop
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	200029d8 	.word	0x200029d8

08008128 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	4618      	mov	r0, r3
 8008136:	f000 f857 	bl	80081e8 <prvGetNextExpireTime>
 800813a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4619      	mov	r1, r3
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 f803 	bl	800814c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008146:	f000 f8d5 	bl	80082f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800814a:	e7f1      	b.n	8008130 <prvTimerTask+0x8>

0800814c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008156:	f7ff fa43 	bl	80075e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800815a:	f107 0308 	add.w	r3, r7, #8
 800815e:	4618      	mov	r0, r3
 8008160:	f000 f866 	bl	8008230 <prvSampleTimeNow>
 8008164:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d130      	bne.n	80081ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <prvProcessTimerOrBlockTask+0x3c>
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	429a      	cmp	r2, r3
 8008178:	d806      	bhi.n	8008188 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800817a:	f7ff fa3f 	bl	80075fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7ff ff85 	bl	8008090 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008186:	e024      	b.n	80081d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d008      	beq.n	80081a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800818e:	4b13      	ldr	r3, [pc, #76]	; (80081dc <prvProcessTimerOrBlockTask+0x90>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <prvProcessTimerOrBlockTask+0x50>
 8008198:	2301      	movs	r3, #1
 800819a:	e000      	b.n	800819e <prvProcessTimerOrBlockTask+0x52>
 800819c:	2300      	movs	r3, #0
 800819e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081a0:	4b0f      	ldr	r3, [pc, #60]	; (80081e0 <prvProcessTimerOrBlockTask+0x94>)
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	4619      	mov	r1, r3
 80081ae:	f7fe ffa7 	bl	8007100 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081b2:	f7ff fa23 	bl	80075fc <xTaskResumeAll>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80081bc:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <prvProcessTimerOrBlockTask+0x98>)
 80081be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	f3bf 8f6f 	isb	sy
}
 80081cc:	e001      	b.n	80081d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081ce:	f7ff fa15 	bl	80075fc <xTaskResumeAll>
}
 80081d2:	bf00      	nop
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	200029dc 	.word	0x200029dc
 80081e0:	200029e0 	.word	0x200029e0
 80081e4:	e000ed04 	.word	0xe000ed04

080081e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081f0:	4b0e      	ldr	r3, [pc, #56]	; (800822c <prvGetNextExpireTime+0x44>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <prvGetNextExpireTime+0x16>
 80081fa:	2201      	movs	r2, #1
 80081fc:	e000      	b.n	8008200 <prvGetNextExpireTime+0x18>
 80081fe:	2200      	movs	r2, #0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d105      	bne.n	8008218 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800820c:	4b07      	ldr	r3, [pc, #28]	; (800822c <prvGetNextExpireTime+0x44>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	e001      	b.n	800821c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800821c:	68fb      	ldr	r3, [r7, #12]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	200029d8 	.word	0x200029d8

08008230 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008238:	f7ff fa7e 	bl	8007738 <xTaskGetTickCount>
 800823c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800823e:	4b0b      	ldr	r3, [pc, #44]	; (800826c <prvSampleTimeNow+0x3c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	429a      	cmp	r2, r3
 8008246:	d205      	bcs.n	8008254 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008248:	f000 f936 	bl	80084b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	e002      	b.n	800825a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800825a:	4a04      	ldr	r2, [pc, #16]	; (800826c <prvSampleTimeNow+0x3c>)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008260:	68fb      	ldr	r3, [r7, #12]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	200029e8 	.word	0x200029e8

08008270 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	429a      	cmp	r2, r3
 8008294:	d812      	bhi.n	80082bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	1ad2      	subs	r2, r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d302      	bcc.n	80082aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082a4:	2301      	movs	r3, #1
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	e01b      	b.n	80082e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082aa:	4b10      	ldr	r3, [pc, #64]	; (80082ec <prvInsertTimerInActiveList+0x7c>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f7fe f9ce 	bl	8006656 <vListInsert>
 80082ba:	e012      	b.n	80082e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d206      	bcs.n	80082d2 <prvInsertTimerInActiveList+0x62>
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d302      	bcc.n	80082d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082cc:	2301      	movs	r3, #1
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e007      	b.n	80082e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082d2:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <prvInsertTimerInActiveList+0x80>)
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3304      	adds	r3, #4
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f7fe f9ba 	bl	8006656 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082e2:	697b      	ldr	r3, [r7, #20]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	200029dc 	.word	0x200029dc
 80082f0:	200029d8 	.word	0x200029d8

080082f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08e      	sub	sp, #56	; 0x38
 80082f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082fa:	e0ca      	b.n	8008492 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	da18      	bge.n	8008334 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008302:	1d3b      	adds	r3, r7, #4
 8008304:	3304      	adds	r3, #4
 8008306:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	61fb      	str	r3, [r7, #28]
}
 8008320:	bf00      	nop
 8008322:	e7fe      	b.n	8008322 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800832a:	6850      	ldr	r0, [r2, #4]
 800832c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800832e:	6892      	ldr	r2, [r2, #8]
 8008330:	4611      	mov	r1, r2
 8008332:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f2c0 80aa 	blt.w	8008490 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d004      	beq.n	8008352 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	3304      	adds	r3, #4
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe f9bb 	bl	80066c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008352:	463b      	mov	r3, r7
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff ff6b 	bl	8008230 <prvSampleTimeNow>
 800835a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b09      	cmp	r3, #9
 8008360:	f200 8097 	bhi.w	8008492 <prvProcessReceivedCommands+0x19e>
 8008364:	a201      	add	r2, pc, #4	; (adr r2, 800836c <prvProcessReceivedCommands+0x78>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	08008395 	.word	0x08008395
 8008370:	08008395 	.word	0x08008395
 8008374:	08008395 	.word	0x08008395
 8008378:	08008409 	.word	0x08008409
 800837c:	0800841d 	.word	0x0800841d
 8008380:	08008467 	.word	0x08008467
 8008384:	08008395 	.word	0x08008395
 8008388:	08008395 	.word	0x08008395
 800838c:	08008409 	.word	0x08008409
 8008390:	0800841d 	.word	0x0800841d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	18d1      	adds	r1, r2, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083b4:	f7ff ff5c 	bl	8008270 <prvInsertTimerInActiveList>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d069      	beq.n	8008492 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083cc:	f003 0304 	and.w	r3, r3, #4
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d05e      	beq.n	8008492 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	441a      	add	r2, r3
 80083dc:	2300      	movs	r3, #0
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	2300      	movs	r3, #0
 80083e2:	2100      	movs	r1, #0
 80083e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e6:	f7ff fe05 	bl	8007ff4 <xTimerGenericCommand>
 80083ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d14f      	bne.n	8008492 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	61bb      	str	r3, [r7, #24]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800840e:	f023 0301 	bic.w	r3, r3, #1
 8008412:	b2da      	uxtb	r2, r3
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800841a:	e03a      	b.n	8008492 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008422:	f043 0301 	orr.w	r3, r3, #1
 8008426:	b2da      	uxtb	r2, r3
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10a      	bne.n	8008452 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	617b      	str	r3, [r7, #20]
}
 800844e:	bf00      	nop
 8008450:	e7fe      	b.n	8008450 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	699a      	ldr	r2, [r3, #24]
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	18d1      	adds	r1, r2, r3
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008460:	f7ff ff06 	bl	8008270 <prvInsertTimerInActiveList>
					break;
 8008464:	e015      	b.n	8008492 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008476:	f000 fbdb 	bl	8008c30 <vPortFree>
 800847a:	e00a      	b.n	8008492 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008482:	f023 0301 	bic.w	r3, r3, #1
 8008486:	b2da      	uxtb	r2, r3
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800848e:	e000      	b.n	8008492 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008490:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008492:	4b08      	ldr	r3, [pc, #32]	; (80084b4 <prvProcessReceivedCommands+0x1c0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	1d39      	adds	r1, r7, #4
 8008498:	2200      	movs	r2, #0
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fc16 	bl	8006ccc <xQueueReceive>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f47f af2a 	bne.w	80082fc <prvProcessReceivedCommands+0x8>
	}
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	3730      	adds	r7, #48	; 0x30
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200029e0 	.word	0x200029e0

080084b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084be:	e048      	b.n	8008552 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084c0:	4b2d      	ldr	r3, [pc, #180]	; (8008578 <prvSwitchTimerLists+0xc0>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ca:	4b2b      	ldr	r3, [pc, #172]	; (8008578 <prvSwitchTimerLists+0xc0>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe f8f5 	bl	80066c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d02e      	beq.n	8008552 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4413      	add	r3, r2
 80084fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	429a      	cmp	r2, r3
 8008504:	d90e      	bls.n	8008524 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008512:	4b19      	ldr	r3, [pc, #100]	; (8008578 <prvSwitchTimerLists+0xc0>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3304      	adds	r3, #4
 800851a:	4619      	mov	r1, r3
 800851c:	4610      	mov	r0, r2
 800851e:	f7fe f89a 	bl	8006656 <vListInsert>
 8008522:	e016      	b.n	8008552 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008524:	2300      	movs	r3, #0
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	2300      	movs	r3, #0
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	2100      	movs	r1, #0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff fd60 	bl	8007ff4 <xTimerGenericCommand>
 8008534:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10a      	bne.n	8008552 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	603b      	str	r3, [r7, #0]
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008552:	4b09      	ldr	r3, [pc, #36]	; (8008578 <prvSwitchTimerLists+0xc0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1b1      	bne.n	80084c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800855c:	4b06      	ldr	r3, [pc, #24]	; (8008578 <prvSwitchTimerLists+0xc0>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008562:	4b06      	ldr	r3, [pc, #24]	; (800857c <prvSwitchTimerLists+0xc4>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a04      	ldr	r2, [pc, #16]	; (8008578 <prvSwitchTimerLists+0xc0>)
 8008568:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800856a:	4a04      	ldr	r2, [pc, #16]	; (800857c <prvSwitchTimerLists+0xc4>)
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	6013      	str	r3, [r2, #0]
}
 8008570:	bf00      	nop
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	200029d8 	.word	0x200029d8
 800857c:	200029dc 	.word	0x200029dc

08008580 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008586:	f000 f965 	bl	8008854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800858a:	4b15      	ldr	r3, [pc, #84]	; (80085e0 <prvCheckForValidListAndQueue+0x60>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d120      	bne.n	80085d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008592:	4814      	ldr	r0, [pc, #80]	; (80085e4 <prvCheckForValidListAndQueue+0x64>)
 8008594:	f7fe f80e 	bl	80065b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008598:	4813      	ldr	r0, [pc, #76]	; (80085e8 <prvCheckForValidListAndQueue+0x68>)
 800859a:	f7fe f80b 	bl	80065b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800859e:	4b13      	ldr	r3, [pc, #76]	; (80085ec <prvCheckForValidListAndQueue+0x6c>)
 80085a0:	4a10      	ldr	r2, [pc, #64]	; (80085e4 <prvCheckForValidListAndQueue+0x64>)
 80085a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085a4:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <prvCheckForValidListAndQueue+0x70>)
 80085a6:	4a10      	ldr	r2, [pc, #64]	; (80085e8 <prvCheckForValidListAndQueue+0x68>)
 80085a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085aa:	2300      	movs	r3, #0
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <prvCheckForValidListAndQueue+0x74>)
 80085b0:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <prvCheckForValidListAndQueue+0x78>)
 80085b2:	2110      	movs	r1, #16
 80085b4:	200a      	movs	r0, #10
 80085b6:	f7fe f919 	bl	80067ec <xQueueGenericCreateStatic>
 80085ba:	4603      	mov	r3, r0
 80085bc:	4a08      	ldr	r2, [pc, #32]	; (80085e0 <prvCheckForValidListAndQueue+0x60>)
 80085be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <prvCheckForValidListAndQueue+0x60>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <prvCheckForValidListAndQueue+0x60>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	490b      	ldr	r1, [pc, #44]	; (80085fc <prvCheckForValidListAndQueue+0x7c>)
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fd6c 	bl	80070ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085d4:	f000 f96e 	bl	80088b4 <vPortExitCritical>
}
 80085d8:	bf00      	nop
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	200029e0 	.word	0x200029e0
 80085e4:	200029b0 	.word	0x200029b0
 80085e8:	200029c4 	.word	0x200029c4
 80085ec:	200029d8 	.word	0x200029d8
 80085f0:	200029dc 	.word	0x200029dc
 80085f4:	20002a8c 	.word	0x20002a8c
 80085f8:	200029ec 	.word	0x200029ec
 80085fc:	0800a798 	.word	0x0800a798

08008600 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3b04      	subs	r3, #4
 8008610:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3b04      	subs	r3, #4
 800861e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f023 0201 	bic.w	r2, r3, #1
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3b04      	subs	r3, #4
 800862e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008630:	4a0c      	ldr	r2, [pc, #48]	; (8008664 <pxPortInitialiseStack+0x64>)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3b14      	subs	r3, #20
 800863a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3b04      	subs	r3, #4
 8008646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f06f 0202 	mvn.w	r2, #2
 800864e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3b20      	subs	r3, #32
 8008654:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008656:	68fb      	ldr	r3, [r7, #12]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	08008669 	.word	0x08008669

08008668 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008672:	4b12      	ldr	r3, [pc, #72]	; (80086bc <prvTaskExitError+0x54>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867a:	d00a      	beq.n	8008692 <prvTaskExitError+0x2a>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	60fb      	str	r3, [r7, #12]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <prvTaskExitError+0x28>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60bb      	str	r3, [r7, #8]
}
 80086a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086a6:	bf00      	nop
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0fc      	beq.n	80086a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	2000000c 	.word	0x2000000c

080086c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <pxCurrentTCBConst2>)
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	6808      	ldr	r0, [r1, #0]
 80086c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	f380 8809 	msr	PSP, r0
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f04f 0000 	mov.w	r0, #0
 80086d6:	f380 8811 	msr	BASEPRI, r0
 80086da:	4770      	bx	lr
 80086dc:	f3af 8000 	nop.w

080086e0 <pxCurrentTCBConst2>:
 80086e0:	200024b0 	.word	0x200024b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop

080086e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80086e8:	4808      	ldr	r0, [pc, #32]	; (800870c <prvPortStartFirstTask+0x24>)
 80086ea:	6800      	ldr	r0, [r0, #0]
 80086ec:	6800      	ldr	r0, [r0, #0]
 80086ee:	f380 8808 	msr	MSP, r0
 80086f2:	f04f 0000 	mov.w	r0, #0
 80086f6:	f380 8814 	msr	CONTROL, r0
 80086fa:	b662      	cpsie	i
 80086fc:	b661      	cpsie	f
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	df00      	svc	0
 8008708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800870a:	bf00      	nop
 800870c:	e000ed08 	.word	0xe000ed08

08008710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008716:	4b46      	ldr	r3, [pc, #280]	; (8008830 <xPortStartScheduler+0x120>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a46      	ldr	r2, [pc, #280]	; (8008834 <xPortStartScheduler+0x124>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d10a      	bne.n	8008736 <xPortStartScheduler+0x26>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	613b      	str	r3, [r7, #16]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008736:	4b3e      	ldr	r3, [pc, #248]	; (8008830 <xPortStartScheduler+0x120>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a3f      	ldr	r2, [pc, #252]	; (8008838 <xPortStartScheduler+0x128>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d10a      	bne.n	8008756 <xPortStartScheduler+0x46>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	60fb      	str	r3, [r7, #12]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008756:	4b39      	ldr	r3, [pc, #228]	; (800883c <xPortStartScheduler+0x12c>)
 8008758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	b2db      	uxtb	r3, r3
 8008760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	22ff      	movs	r2, #255	; 0xff
 8008766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	b2db      	uxtb	r3, r3
 8008774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008778:	b2da      	uxtb	r2, r3
 800877a:	4b31      	ldr	r3, [pc, #196]	; (8008840 <xPortStartScheduler+0x130>)
 800877c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800877e:	4b31      	ldr	r3, [pc, #196]	; (8008844 <xPortStartScheduler+0x134>)
 8008780:	2207      	movs	r2, #7
 8008782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008784:	e009      	b.n	800879a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008786:	4b2f      	ldr	r3, [pc, #188]	; (8008844 <xPortStartScheduler+0x134>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3b01      	subs	r3, #1
 800878c:	4a2d      	ldr	r2, [pc, #180]	; (8008844 <xPortStartScheduler+0x134>)
 800878e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	b2db      	uxtb	r3, r3
 8008798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a2:	2b80      	cmp	r3, #128	; 0x80
 80087a4:	d0ef      	beq.n	8008786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087a6:	4b27      	ldr	r3, [pc, #156]	; (8008844 <xPortStartScheduler+0x134>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f1c3 0307 	rsb	r3, r3, #7
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d00a      	beq.n	80087c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	60bb      	str	r3, [r7, #8]
}
 80087c4:	bf00      	nop
 80087c6:	e7fe      	b.n	80087c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087c8:	4b1e      	ldr	r3, [pc, #120]	; (8008844 <xPortStartScheduler+0x134>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	4a1d      	ldr	r2, [pc, #116]	; (8008844 <xPortStartScheduler+0x134>)
 80087d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087d2:	4b1c      	ldr	r3, [pc, #112]	; (8008844 <xPortStartScheduler+0x134>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087da:	4a1a      	ldr	r2, [pc, #104]	; (8008844 <xPortStartScheduler+0x134>)
 80087dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087e6:	4b18      	ldr	r3, [pc, #96]	; (8008848 <xPortStartScheduler+0x138>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a17      	ldr	r2, [pc, #92]	; (8008848 <xPortStartScheduler+0x138>)
 80087ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <xPortStartScheduler+0x138>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a14      	ldr	r2, [pc, #80]	; (8008848 <xPortStartScheduler+0x138>)
 80087f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087fe:	f000 f8dd 	bl	80089bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008802:	4b12      	ldr	r3, [pc, #72]	; (800884c <xPortStartScheduler+0x13c>)
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008808:	f000 f8fc 	bl	8008a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800880c:	4b10      	ldr	r3, [pc, #64]	; (8008850 <xPortStartScheduler+0x140>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a0f      	ldr	r2, [pc, #60]	; (8008850 <xPortStartScheduler+0x140>)
 8008812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008818:	f7ff ff66 	bl	80086e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800881c:	f7ff f856 	bl	80078cc <vTaskSwitchContext>
	prvTaskExitError();
 8008820:	f7ff ff22 	bl	8008668 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	e000ed00 	.word	0xe000ed00
 8008834:	410fc271 	.word	0x410fc271
 8008838:	410fc270 	.word	0x410fc270
 800883c:	e000e400 	.word	0xe000e400
 8008840:	20002adc 	.word	0x20002adc
 8008844:	20002ae0 	.word	0x20002ae0
 8008848:	e000ed20 	.word	0xe000ed20
 800884c:	2000000c 	.word	0x2000000c
 8008850:	e000ef34 	.word	0xe000ef34

08008854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	607b      	str	r3, [r7, #4]
}
 800886c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800886e:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <vPortEnterCritical+0x58>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3301      	adds	r3, #1
 8008874:	4a0d      	ldr	r2, [pc, #52]	; (80088ac <vPortEnterCritical+0x58>)
 8008876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008878:	4b0c      	ldr	r3, [pc, #48]	; (80088ac <vPortEnterCritical+0x58>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d10f      	bne.n	80088a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008880:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <vPortEnterCritical+0x5c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	603b      	str	r3, [r7, #0]
}
 800889c:	bf00      	nop
 800889e:	e7fe      	b.n	800889e <vPortEnterCritical+0x4a>
	}
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	2000000c 	.word	0x2000000c
 80088b0:	e000ed04 	.word	0xe000ed04

080088b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088ba:	4b12      	ldr	r3, [pc, #72]	; (8008904 <vPortExitCritical+0x50>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <vPortExitCritical+0x24>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	607b      	str	r3, [r7, #4]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088d8:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <vPortExitCritical+0x50>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3b01      	subs	r3, #1
 80088de:	4a09      	ldr	r2, [pc, #36]	; (8008904 <vPortExitCritical+0x50>)
 80088e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088e2:	4b08      	ldr	r3, [pc, #32]	; (8008904 <vPortExitCritical+0x50>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d105      	bne.n	80088f6 <vPortExitCritical+0x42>
 80088ea:	2300      	movs	r3, #0
 80088ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	f383 8811 	msr	BASEPRI, r3
}
 80088f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	2000000c 	.word	0x2000000c
	...

08008910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008910:	f3ef 8009 	mrs	r0, PSP
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	4b15      	ldr	r3, [pc, #84]	; (8008970 <pxCurrentTCBConst>)
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	f01e 0f10 	tst.w	lr, #16
 8008920:	bf08      	it	eq
 8008922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892a:	6010      	str	r0, [r2, #0]
 800892c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008934:	f380 8811 	msr	BASEPRI, r0
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f7fe ffc4 	bl	80078cc <vTaskSwitchContext>
 8008944:	f04f 0000 	mov.w	r0, #0
 8008948:	f380 8811 	msr	BASEPRI, r0
 800894c:	bc09      	pop	{r0, r3}
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	6808      	ldr	r0, [r1, #0]
 8008952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008956:	f01e 0f10 	tst.w	lr, #16
 800895a:	bf08      	it	eq
 800895c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008960:	f380 8809 	msr	PSP, r0
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	f3af 8000 	nop.w

08008970 <pxCurrentTCBConst>:
 8008970:	200024b0 	.word	0x200024b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop

08008978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	607b      	str	r3, [r7, #4]
}
 8008990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008992:	f7fe fee1 	bl	8007758 <xTaskIncrementTick>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800899c:	4b06      	ldr	r3, [pc, #24]	; (80089b8 <xPortSysTickHandler+0x40>)
 800899e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	2300      	movs	r3, #0
 80089a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	f383 8811 	msr	BASEPRI, r3
}
 80089ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089c0:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <vPortSetupTimerInterrupt+0x34>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089c6:	4b0b      	ldr	r3, [pc, #44]	; (80089f4 <vPortSetupTimerInterrupt+0x38>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089cc:	4b0a      	ldr	r3, [pc, #40]	; (80089f8 <vPortSetupTimerInterrupt+0x3c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a0a      	ldr	r2, [pc, #40]	; (80089fc <vPortSetupTimerInterrupt+0x40>)
 80089d2:	fba2 2303 	umull	r2, r3, r2, r3
 80089d6:	099b      	lsrs	r3, r3, #6
 80089d8:	4a09      	ldr	r2, [pc, #36]	; (8008a00 <vPortSetupTimerInterrupt+0x44>)
 80089da:	3b01      	subs	r3, #1
 80089dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089de:	4b04      	ldr	r3, [pc, #16]	; (80089f0 <vPortSetupTimerInterrupt+0x34>)
 80089e0:	2207      	movs	r2, #7
 80089e2:	601a      	str	r2, [r3, #0]
}
 80089e4:	bf00      	nop
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	e000e010 	.word	0xe000e010
 80089f4:	e000e018 	.word	0xe000e018
 80089f8:	20000000 	.word	0x20000000
 80089fc:	10624dd3 	.word	0x10624dd3
 8008a00:	e000e014 	.word	0xe000e014

08008a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a14 <vPortEnableVFP+0x10>
 8008a08:	6801      	ldr	r1, [r0, #0]
 8008a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a0e:	6001      	str	r1, [r0, #0]
 8008a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a12:	bf00      	nop
 8008a14:	e000ed88 	.word	0xe000ed88

08008a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a1e:	f3ef 8305 	mrs	r3, IPSR
 8008a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b0f      	cmp	r3, #15
 8008a28:	d914      	bls.n	8008a54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a2a:	4a17      	ldr	r2, [pc, #92]	; (8008a88 <vPortValidateInterruptPriority+0x70>)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4413      	add	r3, r2
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a34:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <vPortValidateInterruptPriority+0x74>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	7afa      	ldrb	r2, [r7, #11]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d20a      	bcs.n	8008a54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	607b      	str	r3, [r7, #4]
}
 8008a50:	bf00      	nop
 8008a52:	e7fe      	b.n	8008a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a54:	4b0e      	ldr	r3, [pc, #56]	; (8008a90 <vPortValidateInterruptPriority+0x78>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <vPortValidateInterruptPriority+0x7c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d90a      	bls.n	8008a7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	603b      	str	r3, [r7, #0]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <vPortValidateInterruptPriority+0x60>
	}
 8008a7a:	bf00      	nop
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	e000e3f0 	.word	0xe000e3f0
 8008a8c:	20002adc 	.word	0x20002adc
 8008a90:	e000ed0c 	.word	0xe000ed0c
 8008a94:	20002ae0 	.word	0x20002ae0

08008a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08a      	sub	sp, #40	; 0x28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008aa4:	f7fe fd9c 	bl	80075e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008aa8:	4b5b      	ldr	r3, [pc, #364]	; (8008c18 <pvPortMalloc+0x180>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ab0:	f000 f920 	bl	8008cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ab4:	4b59      	ldr	r3, [pc, #356]	; (8008c1c <pvPortMalloc+0x184>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f040 8093 	bne.w	8008be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d01d      	beq.n	8008b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ac8:	2208      	movs	r2, #8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d014      	beq.n	8008b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f023 0307 	bic.w	r3, r3, #7
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <pvPortMalloc+0x6c>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	617b      	str	r3, [r7, #20]
}
 8008b00:	bf00      	nop
 8008b02:	e7fe      	b.n	8008b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d06e      	beq.n	8008be8 <pvPortMalloc+0x150>
 8008b0a:	4b45      	ldr	r3, [pc, #276]	; (8008c20 <pvPortMalloc+0x188>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d869      	bhi.n	8008be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b14:	4b43      	ldr	r3, [pc, #268]	; (8008c24 <pvPortMalloc+0x18c>)
 8008b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b18:	4b42      	ldr	r3, [pc, #264]	; (8008c24 <pvPortMalloc+0x18c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b1e:	e004      	b.n	8008b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d903      	bls.n	8008b3c <pvPortMalloc+0xa4>
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1f1      	bne.n	8008b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b3c:	4b36      	ldr	r3, [pc, #216]	; (8008c18 <pvPortMalloc+0x180>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d050      	beq.n	8008be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2208      	movs	r2, #8
 8008b4c:	4413      	add	r3, r2
 8008b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	2308      	movs	r3, #8
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d91f      	bls.n	8008ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	f003 0307 	and.w	r3, r3, #7
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <pvPortMalloc+0xf8>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	613b      	str	r3, [r7, #16]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	1ad2      	subs	r2, r2, r3
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ba2:	69b8      	ldr	r0, [r7, #24]
 8008ba4:	f000 f908 	bl	8008db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ba8:	4b1d      	ldr	r3, [pc, #116]	; (8008c20 <pvPortMalloc+0x188>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	4a1b      	ldr	r2, [pc, #108]	; (8008c20 <pvPortMalloc+0x188>)
 8008bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bb6:	4b1a      	ldr	r3, [pc, #104]	; (8008c20 <pvPortMalloc+0x188>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	4b1b      	ldr	r3, [pc, #108]	; (8008c28 <pvPortMalloc+0x190>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d203      	bcs.n	8008bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bc2:	4b17      	ldr	r3, [pc, #92]	; (8008c20 <pvPortMalloc+0x188>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a18      	ldr	r2, [pc, #96]	; (8008c28 <pvPortMalloc+0x190>)
 8008bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	4b13      	ldr	r3, [pc, #76]	; (8008c1c <pvPortMalloc+0x184>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	431a      	orrs	r2, r3
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008bde:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <pvPortMalloc+0x194>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a11      	ldr	r2, [pc, #68]	; (8008c2c <pvPortMalloc+0x194>)
 8008be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008be8:	f7fe fd08 	bl	80075fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <pvPortMalloc+0x174>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	60fb      	str	r3, [r7, #12]
}
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <pvPortMalloc+0x172>
	return pvReturn;
 8008c0c:	69fb      	ldr	r3, [r7, #28]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3728      	adds	r7, #40	; 0x28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	200066ec 	.word	0x200066ec
 8008c1c:	20006700 	.word	0x20006700
 8008c20:	200066f0 	.word	0x200066f0
 8008c24:	200066e4 	.word	0x200066e4
 8008c28:	200066f4 	.word	0x200066f4
 8008c2c:	200066f8 	.word	0x200066f8

08008c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d04d      	beq.n	8008cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c42:	2308      	movs	r3, #8
 8008c44:	425b      	negs	r3, r3
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	4413      	add	r3, r2
 8008c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	4b24      	ldr	r3, [pc, #144]	; (8008ce8 <vPortFree+0xb8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10a      	bne.n	8008c74 <vPortFree+0x44>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	60fb      	str	r3, [r7, #12]
}
 8008c70:	bf00      	nop
 8008c72:	e7fe      	b.n	8008c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00a      	beq.n	8008c92 <vPortFree+0x62>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60bb      	str	r3, [r7, #8]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	4b14      	ldr	r3, [pc, #80]	; (8008ce8 <vPortFree+0xb8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01e      	beq.n	8008cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d11a      	bne.n	8008cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	4b0e      	ldr	r3, [pc, #56]	; (8008ce8 <vPortFree+0xb8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	43db      	mvns	r3, r3
 8008cb2:	401a      	ands	r2, r3
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cb8:	f7fe fc92 	bl	80075e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	4b0a      	ldr	r3, [pc, #40]	; (8008cec <vPortFree+0xbc>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	4a09      	ldr	r2, [pc, #36]	; (8008cec <vPortFree+0xbc>)
 8008cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cca:	6938      	ldr	r0, [r7, #16]
 8008ccc:	f000 f874 	bl	8008db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008cd0:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <vPortFree+0xc0>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	4a06      	ldr	r2, [pc, #24]	; (8008cf0 <vPortFree+0xc0>)
 8008cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008cda:	f7fe fc8f 	bl	80075fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cde:	bf00      	nop
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20006700 	.word	0x20006700
 8008cec:	200066f0 	.word	0x200066f0
 8008cf0:	200066fc 	.word	0x200066fc

08008cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d00:	4b27      	ldr	r3, [pc, #156]	; (8008da0 <prvHeapInit+0xac>)
 8008d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00c      	beq.n	8008d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3307      	adds	r3, #7
 8008d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f023 0307 	bic.w	r3, r3, #7
 8008d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	4a1f      	ldr	r2, [pc, #124]	; (8008da0 <prvHeapInit+0xac>)
 8008d24:	4413      	add	r3, r2
 8008d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d2c:	4a1d      	ldr	r2, [pc, #116]	; (8008da4 <prvHeapInit+0xb0>)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d32:	4b1c      	ldr	r3, [pc, #112]	; (8008da4 <prvHeapInit+0xb0>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d40:	2208      	movs	r2, #8
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	1a9b      	subs	r3, r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0307 	bic.w	r3, r3, #7
 8008d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4a15      	ldr	r2, [pc, #84]	; (8008da8 <prvHeapInit+0xb4>)
 8008d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d56:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <prvHeapInit+0xb4>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d5e:	4b12      	ldr	r3, [pc, #72]	; (8008da8 <prvHeapInit+0xb4>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	1ad2      	subs	r2, r2, r3
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d74:	4b0c      	ldr	r3, [pc, #48]	; (8008da8 <prvHeapInit+0xb4>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4a0a      	ldr	r2, [pc, #40]	; (8008dac <prvHeapInit+0xb8>)
 8008d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	4a09      	ldr	r2, [pc, #36]	; (8008db0 <prvHeapInit+0xbc>)
 8008d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d8c:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <prvHeapInit+0xc0>)
 8008d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d92:	601a      	str	r2, [r3, #0]
}
 8008d94:	bf00      	nop
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20002ae4 	.word	0x20002ae4
 8008da4:	200066e4 	.word	0x200066e4
 8008da8:	200066ec 	.word	0x200066ec
 8008dac:	200066f4 	.word	0x200066f4
 8008db0:	200066f0 	.word	0x200066f0
 8008db4:	20006700 	.word	0x20006700

08008db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008dc0:	4b28      	ldr	r3, [pc, #160]	; (8008e64 <prvInsertBlockIntoFreeList+0xac>)
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	e002      	b.n	8008dcc <prvInsertBlockIntoFreeList+0x14>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d8f7      	bhi.n	8008dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	4413      	add	r3, r2
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d108      	bne.n	8008dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	441a      	add	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	441a      	add	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d118      	bne.n	8008e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <prvInsertBlockIntoFreeList+0xb0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d00d      	beq.n	8008e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	441a      	add	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e008      	b.n	8008e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e36:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <prvInsertBlockIntoFreeList+0xb0>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	e003      	b.n	8008e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d002      	beq.n	8008e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e56:	bf00      	nop
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	200066e4 	.word	0x200066e4
 8008e68:	200066ec 	.word	0x200066ec

08008e6c <__errno>:
 8008e6c:	4b01      	ldr	r3, [pc, #4]	; (8008e74 <__errno+0x8>)
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	20000010 	.word	0x20000010

08008e78 <__libc_init_array>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4d0d      	ldr	r5, [pc, #52]	; (8008eb0 <__libc_init_array+0x38>)
 8008e7c:	4c0d      	ldr	r4, [pc, #52]	; (8008eb4 <__libc_init_array+0x3c>)
 8008e7e:	1b64      	subs	r4, r4, r5
 8008e80:	10a4      	asrs	r4, r4, #2
 8008e82:	2600      	movs	r6, #0
 8008e84:	42a6      	cmp	r6, r4
 8008e86:	d109      	bne.n	8008e9c <__libc_init_array+0x24>
 8008e88:	4d0b      	ldr	r5, [pc, #44]	; (8008eb8 <__libc_init_array+0x40>)
 8008e8a:	4c0c      	ldr	r4, [pc, #48]	; (8008ebc <__libc_init_array+0x44>)
 8008e8c:	f001 f952 	bl	800a134 <_init>
 8008e90:	1b64      	subs	r4, r4, r5
 8008e92:	10a4      	asrs	r4, r4, #2
 8008e94:	2600      	movs	r6, #0
 8008e96:	42a6      	cmp	r6, r4
 8008e98:	d105      	bne.n	8008ea6 <__libc_init_array+0x2e>
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea0:	4798      	blx	r3
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7ee      	b.n	8008e84 <__libc_init_array+0xc>
 8008ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eaa:	4798      	blx	r3
 8008eac:	3601      	adds	r6, #1
 8008eae:	e7f2      	b.n	8008e96 <__libc_init_array+0x1e>
 8008eb0:	0800ad6c 	.word	0x0800ad6c
 8008eb4:	0800ad6c 	.word	0x0800ad6c
 8008eb8:	0800ad6c 	.word	0x0800ad6c
 8008ebc:	0800ad70 	.word	0x0800ad70

08008ec0 <isprint>:
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <isprint+0xc>)
 8008ec2:	4418      	add	r0, r3
 8008ec4:	7840      	ldrb	r0, [r0, #1]
 8008ec6:	f000 0097 	and.w	r0, r0, #151	; 0x97
 8008eca:	4770      	bx	lr
 8008ecc:	0800abb4 	.word	0x0800abb4

08008ed0 <memcpy>:
 8008ed0:	440a      	add	r2, r1
 8008ed2:	4291      	cmp	r1, r2
 8008ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ed8:	d100      	bne.n	8008edc <memcpy+0xc>
 8008eda:	4770      	bx	lr
 8008edc:	b510      	push	{r4, lr}
 8008ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ee6:	4291      	cmp	r1, r2
 8008ee8:	d1f9      	bne.n	8008ede <memcpy+0xe>
 8008eea:	bd10      	pop	{r4, pc}

08008eec <memset>:
 8008eec:	4402      	add	r2, r0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d100      	bne.n	8008ef6 <memset+0xa>
 8008ef4:	4770      	bx	lr
 8008ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8008efa:	e7f9      	b.n	8008ef0 <memset+0x4>

08008efc <siscanf>:
 8008efc:	b40e      	push	{r1, r2, r3}
 8008efe:	b510      	push	{r4, lr}
 8008f00:	b09f      	sub	sp, #124	; 0x7c
 8008f02:	ac21      	add	r4, sp, #132	; 0x84
 8008f04:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008f08:	f854 2b04 	ldr.w	r2, [r4], #4
 8008f0c:	9201      	str	r2, [sp, #4]
 8008f0e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008f12:	9004      	str	r0, [sp, #16]
 8008f14:	9008      	str	r0, [sp, #32]
 8008f16:	f7f7 f96d 	bl	80001f4 <strlen>
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <siscanf+0x50>)
 8008f1c:	9005      	str	r0, [sp, #20]
 8008f1e:	9009      	str	r0, [sp, #36]	; 0x24
 8008f20:	930d      	str	r3, [sp, #52]	; 0x34
 8008f22:	480b      	ldr	r0, [pc, #44]	; (8008f50 <siscanf+0x54>)
 8008f24:	9a01      	ldr	r2, [sp, #4]
 8008f26:	6800      	ldr	r0, [r0, #0]
 8008f28:	9403      	str	r4, [sp, #12]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	9311      	str	r3, [sp, #68]	; 0x44
 8008f2e:	9316      	str	r3, [sp, #88]	; 0x58
 8008f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f34:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008f38:	a904      	add	r1, sp, #16
 8008f3a:	4623      	mov	r3, r4
 8008f3c:	f000 f9e2 	bl	8009304 <__ssvfiscanf_r>
 8008f40:	b01f      	add	sp, #124	; 0x7c
 8008f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f46:	b003      	add	sp, #12
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	08008f55 	.word	0x08008f55
 8008f50:	20000010 	.word	0x20000010

08008f54 <__seofread>:
 8008f54:	2000      	movs	r0, #0
 8008f56:	4770      	bx	lr

08008f58 <_vsiprintf_r>:
 8008f58:	b500      	push	{lr}
 8008f5a:	b09b      	sub	sp, #108	; 0x6c
 8008f5c:	9100      	str	r1, [sp, #0]
 8008f5e:	9104      	str	r1, [sp, #16]
 8008f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f64:	9105      	str	r1, [sp, #20]
 8008f66:	9102      	str	r1, [sp, #8]
 8008f68:	4905      	ldr	r1, [pc, #20]	; (8008f80 <_vsiprintf_r+0x28>)
 8008f6a:	9103      	str	r1, [sp, #12]
 8008f6c:	4669      	mov	r1, sp
 8008f6e:	f000 f86f 	bl	8009050 <_svfiprintf_r>
 8008f72:	9b00      	ldr	r3, [sp, #0]
 8008f74:	2200      	movs	r2, #0
 8008f76:	701a      	strb	r2, [r3, #0]
 8008f78:	b01b      	add	sp, #108	; 0x6c
 8008f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f7e:	bf00      	nop
 8008f80:	ffff0208 	.word	0xffff0208

08008f84 <vsiprintf>:
 8008f84:	4613      	mov	r3, r2
 8008f86:	460a      	mov	r2, r1
 8008f88:	4601      	mov	r1, r0
 8008f8a:	4802      	ldr	r0, [pc, #8]	; (8008f94 <vsiprintf+0x10>)
 8008f8c:	6800      	ldr	r0, [r0, #0]
 8008f8e:	f7ff bfe3 	b.w	8008f58 <_vsiprintf_r>
 8008f92:	bf00      	nop
 8008f94:	20000010 	.word	0x20000010

08008f98 <__ssputs_r>:
 8008f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9c:	688e      	ldr	r6, [r1, #8]
 8008f9e:	429e      	cmp	r6, r3
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	4690      	mov	r8, r2
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	d838      	bhi.n	800901c <__ssputs_r+0x84>
 8008faa:	898a      	ldrh	r2, [r1, #12]
 8008fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fb0:	d032      	beq.n	8009018 <__ssputs_r+0x80>
 8008fb2:	6825      	ldr	r5, [r4, #0]
 8008fb4:	6909      	ldr	r1, [r1, #16]
 8008fb6:	eba5 0901 	sub.w	r9, r5, r1
 8008fba:	6965      	ldr	r5, [r4, #20]
 8008fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	444b      	add	r3, r9
 8008fc8:	106d      	asrs	r5, r5, #1
 8008fca:	429d      	cmp	r5, r3
 8008fcc:	bf38      	it	cc
 8008fce:	461d      	movcc	r5, r3
 8008fd0:	0553      	lsls	r3, r2, #21
 8008fd2:	d531      	bpl.n	8009038 <__ssputs_r+0xa0>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	f000 ffe5 	bl	8009fa4 <_malloc_r>
 8008fda:	4606      	mov	r6, r0
 8008fdc:	b950      	cbnz	r0, 8008ff4 <__ssputs_r+0x5c>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	f8ca 3000 	str.w	r3, [sl]
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff4:	6921      	ldr	r1, [r4, #16]
 8008ff6:	464a      	mov	r2, r9
 8008ff8:	f7ff ff6a 	bl	8008ed0 <memcpy>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009006:	81a3      	strh	r3, [r4, #12]
 8009008:	6126      	str	r6, [r4, #16]
 800900a:	6165      	str	r5, [r4, #20]
 800900c:	444e      	add	r6, r9
 800900e:	eba5 0509 	sub.w	r5, r5, r9
 8009012:	6026      	str	r6, [r4, #0]
 8009014:	60a5      	str	r5, [r4, #8]
 8009016:	463e      	mov	r6, r7
 8009018:	42be      	cmp	r6, r7
 800901a:	d900      	bls.n	800901e <__ssputs_r+0x86>
 800901c:	463e      	mov	r6, r7
 800901e:	6820      	ldr	r0, [r4, #0]
 8009020:	4632      	mov	r2, r6
 8009022:	4641      	mov	r1, r8
 8009024:	f000 ff38 	bl	8009e98 <memmove>
 8009028:	68a3      	ldr	r3, [r4, #8]
 800902a:	1b9b      	subs	r3, r3, r6
 800902c:	60a3      	str	r3, [r4, #8]
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	4433      	add	r3, r6
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	2000      	movs	r0, #0
 8009036:	e7db      	b.n	8008ff0 <__ssputs_r+0x58>
 8009038:	462a      	mov	r2, r5
 800903a:	f001 f827 	bl	800a08c <_realloc_r>
 800903e:	4606      	mov	r6, r0
 8009040:	2800      	cmp	r0, #0
 8009042:	d1e1      	bne.n	8009008 <__ssputs_r+0x70>
 8009044:	6921      	ldr	r1, [r4, #16]
 8009046:	4650      	mov	r0, sl
 8009048:	f000 ff40 	bl	8009ecc <_free_r>
 800904c:	e7c7      	b.n	8008fde <__ssputs_r+0x46>
	...

08009050 <_svfiprintf_r>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	4698      	mov	r8, r3
 8009056:	898b      	ldrh	r3, [r1, #12]
 8009058:	061b      	lsls	r3, r3, #24
 800905a:	b09d      	sub	sp, #116	; 0x74
 800905c:	4607      	mov	r7, r0
 800905e:	460d      	mov	r5, r1
 8009060:	4614      	mov	r4, r2
 8009062:	d50e      	bpl.n	8009082 <_svfiprintf_r+0x32>
 8009064:	690b      	ldr	r3, [r1, #16]
 8009066:	b963      	cbnz	r3, 8009082 <_svfiprintf_r+0x32>
 8009068:	2140      	movs	r1, #64	; 0x40
 800906a:	f000 ff9b 	bl	8009fa4 <_malloc_r>
 800906e:	6028      	str	r0, [r5, #0]
 8009070:	6128      	str	r0, [r5, #16]
 8009072:	b920      	cbnz	r0, 800907e <_svfiprintf_r+0x2e>
 8009074:	230c      	movs	r3, #12
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	e0d1      	b.n	8009222 <_svfiprintf_r+0x1d2>
 800907e:	2340      	movs	r3, #64	; 0x40
 8009080:	616b      	str	r3, [r5, #20]
 8009082:	2300      	movs	r3, #0
 8009084:	9309      	str	r3, [sp, #36]	; 0x24
 8009086:	2320      	movs	r3, #32
 8009088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800908c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009090:	2330      	movs	r3, #48	; 0x30
 8009092:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800923c <_svfiprintf_r+0x1ec>
 8009096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800909a:	f04f 0901 	mov.w	r9, #1
 800909e:	4623      	mov	r3, r4
 80090a0:	469a      	mov	sl, r3
 80090a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a6:	b10a      	cbz	r2, 80090ac <_svfiprintf_r+0x5c>
 80090a8:	2a25      	cmp	r2, #37	; 0x25
 80090aa:	d1f9      	bne.n	80090a0 <_svfiprintf_r+0x50>
 80090ac:	ebba 0b04 	subs.w	fp, sl, r4
 80090b0:	d00b      	beq.n	80090ca <_svfiprintf_r+0x7a>
 80090b2:	465b      	mov	r3, fp
 80090b4:	4622      	mov	r2, r4
 80090b6:	4629      	mov	r1, r5
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff ff6d 	bl	8008f98 <__ssputs_r>
 80090be:	3001      	adds	r0, #1
 80090c0:	f000 80aa 	beq.w	8009218 <_svfiprintf_r+0x1c8>
 80090c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c6:	445a      	add	r2, fp
 80090c8:	9209      	str	r2, [sp, #36]	; 0x24
 80090ca:	f89a 3000 	ldrb.w	r3, [sl]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f000 80a2 	beq.w	8009218 <_svfiprintf_r+0x1c8>
 80090d4:	2300      	movs	r3, #0
 80090d6:	f04f 32ff 	mov.w	r2, #4294967295
 80090da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090de:	f10a 0a01 	add.w	sl, sl, #1
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	9307      	str	r3, [sp, #28]
 80090e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090ea:	931a      	str	r3, [sp, #104]	; 0x68
 80090ec:	4654      	mov	r4, sl
 80090ee:	2205      	movs	r2, #5
 80090f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f4:	4851      	ldr	r0, [pc, #324]	; (800923c <_svfiprintf_r+0x1ec>)
 80090f6:	f7f7 f88b 	bl	8000210 <memchr>
 80090fa:	9a04      	ldr	r2, [sp, #16]
 80090fc:	b9d8      	cbnz	r0, 8009136 <_svfiprintf_r+0xe6>
 80090fe:	06d0      	lsls	r0, r2, #27
 8009100:	bf44      	itt	mi
 8009102:	2320      	movmi	r3, #32
 8009104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009108:	0711      	lsls	r1, r2, #28
 800910a:	bf44      	itt	mi
 800910c:	232b      	movmi	r3, #43	; 0x2b
 800910e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009112:	f89a 3000 	ldrb.w	r3, [sl]
 8009116:	2b2a      	cmp	r3, #42	; 0x2a
 8009118:	d015      	beq.n	8009146 <_svfiprintf_r+0xf6>
 800911a:	9a07      	ldr	r2, [sp, #28]
 800911c:	4654      	mov	r4, sl
 800911e:	2000      	movs	r0, #0
 8009120:	f04f 0c0a 	mov.w	ip, #10
 8009124:	4621      	mov	r1, r4
 8009126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800912a:	3b30      	subs	r3, #48	; 0x30
 800912c:	2b09      	cmp	r3, #9
 800912e:	d94e      	bls.n	80091ce <_svfiprintf_r+0x17e>
 8009130:	b1b0      	cbz	r0, 8009160 <_svfiprintf_r+0x110>
 8009132:	9207      	str	r2, [sp, #28]
 8009134:	e014      	b.n	8009160 <_svfiprintf_r+0x110>
 8009136:	eba0 0308 	sub.w	r3, r0, r8
 800913a:	fa09 f303 	lsl.w	r3, r9, r3
 800913e:	4313      	orrs	r3, r2
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	46a2      	mov	sl, r4
 8009144:	e7d2      	b.n	80090ec <_svfiprintf_r+0x9c>
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	1d19      	adds	r1, r3, #4
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	9103      	str	r1, [sp, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfbb      	ittet	lt
 8009152:	425b      	neglt	r3, r3
 8009154:	f042 0202 	orrlt.w	r2, r2, #2
 8009158:	9307      	strge	r3, [sp, #28]
 800915a:	9307      	strlt	r3, [sp, #28]
 800915c:	bfb8      	it	lt
 800915e:	9204      	strlt	r2, [sp, #16]
 8009160:	7823      	ldrb	r3, [r4, #0]
 8009162:	2b2e      	cmp	r3, #46	; 0x2e
 8009164:	d10c      	bne.n	8009180 <_svfiprintf_r+0x130>
 8009166:	7863      	ldrb	r3, [r4, #1]
 8009168:	2b2a      	cmp	r3, #42	; 0x2a
 800916a:	d135      	bne.n	80091d8 <_svfiprintf_r+0x188>
 800916c:	9b03      	ldr	r3, [sp, #12]
 800916e:	1d1a      	adds	r2, r3, #4
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	9203      	str	r2, [sp, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	bfb8      	it	lt
 8009178:	f04f 33ff 	movlt.w	r3, #4294967295
 800917c:	3402      	adds	r4, #2
 800917e:	9305      	str	r3, [sp, #20]
 8009180:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800924c <_svfiprintf_r+0x1fc>
 8009184:	7821      	ldrb	r1, [r4, #0]
 8009186:	2203      	movs	r2, #3
 8009188:	4650      	mov	r0, sl
 800918a:	f7f7 f841 	bl	8000210 <memchr>
 800918e:	b140      	cbz	r0, 80091a2 <_svfiprintf_r+0x152>
 8009190:	2340      	movs	r3, #64	; 0x40
 8009192:	eba0 000a 	sub.w	r0, r0, sl
 8009196:	fa03 f000 	lsl.w	r0, r3, r0
 800919a:	9b04      	ldr	r3, [sp, #16]
 800919c:	4303      	orrs	r3, r0
 800919e:	3401      	adds	r4, #1
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a6:	4826      	ldr	r0, [pc, #152]	; (8009240 <_svfiprintf_r+0x1f0>)
 80091a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091ac:	2206      	movs	r2, #6
 80091ae:	f7f7 f82f 	bl	8000210 <memchr>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d038      	beq.n	8009228 <_svfiprintf_r+0x1d8>
 80091b6:	4b23      	ldr	r3, [pc, #140]	; (8009244 <_svfiprintf_r+0x1f4>)
 80091b8:	bb1b      	cbnz	r3, 8009202 <_svfiprintf_r+0x1b2>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	3307      	adds	r3, #7
 80091be:	f023 0307 	bic.w	r3, r3, #7
 80091c2:	3308      	adds	r3, #8
 80091c4:	9303      	str	r3, [sp, #12]
 80091c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c8:	4433      	add	r3, r6
 80091ca:	9309      	str	r3, [sp, #36]	; 0x24
 80091cc:	e767      	b.n	800909e <_svfiprintf_r+0x4e>
 80091ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d2:	460c      	mov	r4, r1
 80091d4:	2001      	movs	r0, #1
 80091d6:	e7a5      	b.n	8009124 <_svfiprintf_r+0xd4>
 80091d8:	2300      	movs	r3, #0
 80091da:	3401      	adds	r4, #1
 80091dc:	9305      	str	r3, [sp, #20]
 80091de:	4619      	mov	r1, r3
 80091e0:	f04f 0c0a 	mov.w	ip, #10
 80091e4:	4620      	mov	r0, r4
 80091e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ea:	3a30      	subs	r2, #48	; 0x30
 80091ec:	2a09      	cmp	r2, #9
 80091ee:	d903      	bls.n	80091f8 <_svfiprintf_r+0x1a8>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d0c5      	beq.n	8009180 <_svfiprintf_r+0x130>
 80091f4:	9105      	str	r1, [sp, #20]
 80091f6:	e7c3      	b.n	8009180 <_svfiprintf_r+0x130>
 80091f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fc:	4604      	mov	r4, r0
 80091fe:	2301      	movs	r3, #1
 8009200:	e7f0      	b.n	80091e4 <_svfiprintf_r+0x194>
 8009202:	ab03      	add	r3, sp, #12
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	462a      	mov	r2, r5
 8009208:	4b0f      	ldr	r3, [pc, #60]	; (8009248 <_svfiprintf_r+0x1f8>)
 800920a:	a904      	add	r1, sp, #16
 800920c:	4638      	mov	r0, r7
 800920e:	f3af 8000 	nop.w
 8009212:	1c42      	adds	r2, r0, #1
 8009214:	4606      	mov	r6, r0
 8009216:	d1d6      	bne.n	80091c6 <_svfiprintf_r+0x176>
 8009218:	89ab      	ldrh	r3, [r5, #12]
 800921a:	065b      	lsls	r3, r3, #25
 800921c:	f53f af2c 	bmi.w	8009078 <_svfiprintf_r+0x28>
 8009220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009222:	b01d      	add	sp, #116	; 0x74
 8009224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009228:	ab03      	add	r3, sp, #12
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	462a      	mov	r2, r5
 800922e:	4b06      	ldr	r3, [pc, #24]	; (8009248 <_svfiprintf_r+0x1f8>)
 8009230:	a904      	add	r1, sp, #16
 8009232:	4638      	mov	r0, r7
 8009234:	f000 fa4c 	bl	80096d0 <_printf_i>
 8009238:	e7eb      	b.n	8009212 <_svfiprintf_r+0x1c2>
 800923a:	bf00      	nop
 800923c:	0800acb5 	.word	0x0800acb5
 8009240:	0800acbf 	.word	0x0800acbf
 8009244:	00000000 	.word	0x00000000
 8009248:	08008f99 	.word	0x08008f99
 800924c:	0800acbb 	.word	0x0800acbb

08009250 <_sungetc_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	1c4b      	adds	r3, r1, #1
 8009254:	4614      	mov	r4, r2
 8009256:	d103      	bne.n	8009260 <_sungetc_r+0x10>
 8009258:	f04f 35ff 	mov.w	r5, #4294967295
 800925c:	4628      	mov	r0, r5
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	8993      	ldrh	r3, [r2, #12]
 8009262:	f023 0320 	bic.w	r3, r3, #32
 8009266:	8193      	strh	r3, [r2, #12]
 8009268:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800926a:	6852      	ldr	r2, [r2, #4]
 800926c:	b2cd      	uxtb	r5, r1
 800926e:	b18b      	cbz	r3, 8009294 <_sungetc_r+0x44>
 8009270:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009272:	4293      	cmp	r3, r2
 8009274:	dd08      	ble.n	8009288 <_sungetc_r+0x38>
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	1e5a      	subs	r2, r3, #1
 800927a:	6022      	str	r2, [r4, #0]
 800927c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009280:	6863      	ldr	r3, [r4, #4]
 8009282:	3301      	adds	r3, #1
 8009284:	6063      	str	r3, [r4, #4]
 8009286:	e7e9      	b.n	800925c <_sungetc_r+0xc>
 8009288:	4621      	mov	r1, r4
 800928a:	f000 fdc9 	bl	8009e20 <__submore>
 800928e:	2800      	cmp	r0, #0
 8009290:	d0f1      	beq.n	8009276 <_sungetc_r+0x26>
 8009292:	e7e1      	b.n	8009258 <_sungetc_r+0x8>
 8009294:	6921      	ldr	r1, [r4, #16]
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	b151      	cbz	r1, 80092b0 <_sungetc_r+0x60>
 800929a:	4299      	cmp	r1, r3
 800929c:	d208      	bcs.n	80092b0 <_sungetc_r+0x60>
 800929e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80092a2:	42a9      	cmp	r1, r5
 80092a4:	d104      	bne.n	80092b0 <_sungetc_r+0x60>
 80092a6:	3b01      	subs	r3, #1
 80092a8:	3201      	adds	r2, #1
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	6062      	str	r2, [r4, #4]
 80092ae:	e7d5      	b.n	800925c <_sungetc_r+0xc>
 80092b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80092b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092b8:	6363      	str	r3, [r4, #52]	; 0x34
 80092ba:	2303      	movs	r3, #3
 80092bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80092be:	4623      	mov	r3, r4
 80092c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	2301      	movs	r3, #1
 80092c8:	e7dc      	b.n	8009284 <_sungetc_r+0x34>

080092ca <__ssrefill_r>:
 80092ca:	b510      	push	{r4, lr}
 80092cc:	460c      	mov	r4, r1
 80092ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80092d0:	b169      	cbz	r1, 80092ee <__ssrefill_r+0x24>
 80092d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092d6:	4299      	cmp	r1, r3
 80092d8:	d001      	beq.n	80092de <__ssrefill_r+0x14>
 80092da:	f000 fdf7 	bl	8009ecc <_free_r>
 80092de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092e0:	6063      	str	r3, [r4, #4]
 80092e2:	2000      	movs	r0, #0
 80092e4:	6360      	str	r0, [r4, #52]	; 0x34
 80092e6:	b113      	cbz	r3, 80092ee <__ssrefill_r+0x24>
 80092e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	2300      	movs	r3, #0
 80092f4:	6063      	str	r3, [r4, #4]
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	f043 0320 	orr.w	r3, r3, #32
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009302:	e7f3      	b.n	80092ec <__ssrefill_r+0x22>

08009304 <__ssvfiscanf_r>:
 8009304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	460c      	mov	r4, r1
 800930a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800930e:	2100      	movs	r1, #0
 8009310:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009314:	49a6      	ldr	r1, [pc, #664]	; (80095b0 <__ssvfiscanf_r+0x2ac>)
 8009316:	91a0      	str	r1, [sp, #640]	; 0x280
 8009318:	f10d 0804 	add.w	r8, sp, #4
 800931c:	49a5      	ldr	r1, [pc, #660]	; (80095b4 <__ssvfiscanf_r+0x2b0>)
 800931e:	4fa6      	ldr	r7, [pc, #664]	; (80095b8 <__ssvfiscanf_r+0x2b4>)
 8009320:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80095bc <__ssvfiscanf_r+0x2b8>
 8009324:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009328:	4606      	mov	r6, r0
 800932a:	91a1      	str	r1, [sp, #644]	; 0x284
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	7813      	ldrb	r3, [r2, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 815a 	beq.w	80095ea <__ssvfiscanf_r+0x2e6>
 8009336:	5dd9      	ldrb	r1, [r3, r7]
 8009338:	f011 0108 	ands.w	r1, r1, #8
 800933c:	f102 0501 	add.w	r5, r2, #1
 8009340:	d019      	beq.n	8009376 <__ssvfiscanf_r+0x72>
 8009342:	6863      	ldr	r3, [r4, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd0f      	ble.n	8009368 <__ssvfiscanf_r+0x64>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	5cba      	ldrb	r2, [r7, r2]
 800934e:	0712      	lsls	r2, r2, #28
 8009350:	d401      	bmi.n	8009356 <__ssvfiscanf_r+0x52>
 8009352:	462a      	mov	r2, r5
 8009354:	e7eb      	b.n	800932e <__ssvfiscanf_r+0x2a>
 8009356:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009358:	3201      	adds	r2, #1
 800935a:	9245      	str	r2, [sp, #276]	; 0x114
 800935c:	6862      	ldr	r2, [r4, #4]
 800935e:	3301      	adds	r3, #1
 8009360:	3a01      	subs	r2, #1
 8009362:	6062      	str	r2, [r4, #4]
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	e7ec      	b.n	8009342 <__ssvfiscanf_r+0x3e>
 8009368:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800936a:	4621      	mov	r1, r4
 800936c:	4630      	mov	r0, r6
 800936e:	4798      	blx	r3
 8009370:	2800      	cmp	r0, #0
 8009372:	d0e9      	beq.n	8009348 <__ssvfiscanf_r+0x44>
 8009374:	e7ed      	b.n	8009352 <__ssvfiscanf_r+0x4e>
 8009376:	2b25      	cmp	r3, #37	; 0x25
 8009378:	d012      	beq.n	80093a0 <__ssvfiscanf_r+0x9c>
 800937a:	469a      	mov	sl, r3
 800937c:	6863      	ldr	r3, [r4, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	f340 8091 	ble.w	80094a6 <__ssvfiscanf_r+0x1a2>
 8009384:	6822      	ldr	r2, [r4, #0]
 8009386:	7813      	ldrb	r3, [r2, #0]
 8009388:	4553      	cmp	r3, sl
 800938a:	f040 812e 	bne.w	80095ea <__ssvfiscanf_r+0x2e6>
 800938e:	6863      	ldr	r3, [r4, #4]
 8009390:	3b01      	subs	r3, #1
 8009392:	6063      	str	r3, [r4, #4]
 8009394:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009396:	3201      	adds	r2, #1
 8009398:	3301      	adds	r3, #1
 800939a:	6022      	str	r2, [r4, #0]
 800939c:	9345      	str	r3, [sp, #276]	; 0x114
 800939e:	e7d8      	b.n	8009352 <__ssvfiscanf_r+0x4e>
 80093a0:	9141      	str	r1, [sp, #260]	; 0x104
 80093a2:	9143      	str	r1, [sp, #268]	; 0x10c
 80093a4:	7853      	ldrb	r3, [r2, #1]
 80093a6:	2b2a      	cmp	r3, #42	; 0x2a
 80093a8:	bf02      	ittt	eq
 80093aa:	2310      	moveq	r3, #16
 80093ac:	1c95      	addeq	r5, r2, #2
 80093ae:	9341      	streq	r3, [sp, #260]	; 0x104
 80093b0:	220a      	movs	r2, #10
 80093b2:	46aa      	mov	sl, r5
 80093b4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80093b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80093bc:	2b09      	cmp	r3, #9
 80093be:	d91d      	bls.n	80093fc <__ssvfiscanf_r+0xf8>
 80093c0:	487e      	ldr	r0, [pc, #504]	; (80095bc <__ssvfiscanf_r+0x2b8>)
 80093c2:	2203      	movs	r2, #3
 80093c4:	f7f6 ff24 	bl	8000210 <memchr>
 80093c8:	b140      	cbz	r0, 80093dc <__ssvfiscanf_r+0xd8>
 80093ca:	2301      	movs	r3, #1
 80093cc:	eba0 0009 	sub.w	r0, r0, r9
 80093d0:	fa03 f000 	lsl.w	r0, r3, r0
 80093d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093d6:	4318      	orrs	r0, r3
 80093d8:	9041      	str	r0, [sp, #260]	; 0x104
 80093da:	4655      	mov	r5, sl
 80093dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093e0:	2b78      	cmp	r3, #120	; 0x78
 80093e2:	d806      	bhi.n	80093f2 <__ssvfiscanf_r+0xee>
 80093e4:	2b57      	cmp	r3, #87	; 0x57
 80093e6:	d810      	bhi.n	800940a <__ssvfiscanf_r+0x106>
 80093e8:	2b25      	cmp	r3, #37	; 0x25
 80093ea:	d0c6      	beq.n	800937a <__ssvfiscanf_r+0x76>
 80093ec:	d856      	bhi.n	800949c <__ssvfiscanf_r+0x198>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d064      	beq.n	80094bc <__ssvfiscanf_r+0x1b8>
 80093f2:	2303      	movs	r3, #3
 80093f4:	9347      	str	r3, [sp, #284]	; 0x11c
 80093f6:	230a      	movs	r3, #10
 80093f8:	9342      	str	r3, [sp, #264]	; 0x108
 80093fa:	e071      	b.n	80094e0 <__ssvfiscanf_r+0x1dc>
 80093fc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80093fe:	fb02 1103 	mla	r1, r2, r3, r1
 8009402:	3930      	subs	r1, #48	; 0x30
 8009404:	9143      	str	r1, [sp, #268]	; 0x10c
 8009406:	4655      	mov	r5, sl
 8009408:	e7d3      	b.n	80093b2 <__ssvfiscanf_r+0xae>
 800940a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800940e:	2a20      	cmp	r2, #32
 8009410:	d8ef      	bhi.n	80093f2 <__ssvfiscanf_r+0xee>
 8009412:	a101      	add	r1, pc, #4	; (adr r1, 8009418 <__ssvfiscanf_r+0x114>)
 8009414:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009418:	080094cb 	.word	0x080094cb
 800941c:	080093f3 	.word	0x080093f3
 8009420:	080093f3 	.word	0x080093f3
 8009424:	08009529 	.word	0x08009529
 8009428:	080093f3 	.word	0x080093f3
 800942c:	080093f3 	.word	0x080093f3
 8009430:	080093f3 	.word	0x080093f3
 8009434:	080093f3 	.word	0x080093f3
 8009438:	080093f3 	.word	0x080093f3
 800943c:	080093f3 	.word	0x080093f3
 8009440:	080093f3 	.word	0x080093f3
 8009444:	0800953f 	.word	0x0800953f
 8009448:	08009515 	.word	0x08009515
 800944c:	080094a3 	.word	0x080094a3
 8009450:	080094a3 	.word	0x080094a3
 8009454:	080094a3 	.word	0x080094a3
 8009458:	080093f3 	.word	0x080093f3
 800945c:	08009519 	.word	0x08009519
 8009460:	080093f3 	.word	0x080093f3
 8009464:	080093f3 	.word	0x080093f3
 8009468:	080093f3 	.word	0x080093f3
 800946c:	080093f3 	.word	0x080093f3
 8009470:	0800954f 	.word	0x0800954f
 8009474:	08009521 	.word	0x08009521
 8009478:	080094c3 	.word	0x080094c3
 800947c:	080093f3 	.word	0x080093f3
 8009480:	080093f3 	.word	0x080093f3
 8009484:	0800954b 	.word	0x0800954b
 8009488:	080093f3 	.word	0x080093f3
 800948c:	08009515 	.word	0x08009515
 8009490:	080093f3 	.word	0x080093f3
 8009494:	080093f3 	.word	0x080093f3
 8009498:	080094cb 	.word	0x080094cb
 800949c:	3b45      	subs	r3, #69	; 0x45
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d8a7      	bhi.n	80093f2 <__ssvfiscanf_r+0xee>
 80094a2:	2305      	movs	r3, #5
 80094a4:	e01b      	b.n	80094de <__ssvfiscanf_r+0x1da>
 80094a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80094a8:	4621      	mov	r1, r4
 80094aa:	4630      	mov	r0, r6
 80094ac:	4798      	blx	r3
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f43f af68 	beq.w	8009384 <__ssvfiscanf_r+0x80>
 80094b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f040 808d 	bne.w	80095d6 <__ssvfiscanf_r+0x2d2>
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	e08f      	b.n	80095e2 <__ssvfiscanf_r+0x2de>
 80094c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80094c4:	f042 0220 	orr.w	r2, r2, #32
 80094c8:	9241      	str	r2, [sp, #260]	; 0x104
 80094ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80094cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094d0:	9241      	str	r2, [sp, #260]	; 0x104
 80094d2:	2210      	movs	r2, #16
 80094d4:	2b6f      	cmp	r3, #111	; 0x6f
 80094d6:	9242      	str	r2, [sp, #264]	; 0x108
 80094d8:	bf34      	ite	cc
 80094da:	2303      	movcc	r3, #3
 80094dc:	2304      	movcs	r3, #4
 80094de:	9347      	str	r3, [sp, #284]	; 0x11c
 80094e0:	6863      	ldr	r3, [r4, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	dd42      	ble.n	800956c <__ssvfiscanf_r+0x268>
 80094e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80094e8:	0659      	lsls	r1, r3, #25
 80094ea:	d404      	bmi.n	80094f6 <__ssvfiscanf_r+0x1f2>
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	5cba      	ldrb	r2, [r7, r2]
 80094f2:	0712      	lsls	r2, r2, #28
 80094f4:	d441      	bmi.n	800957a <__ssvfiscanf_r+0x276>
 80094f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	dc50      	bgt.n	800959e <__ssvfiscanf_r+0x29a>
 80094fc:	466b      	mov	r3, sp
 80094fe:	4622      	mov	r2, r4
 8009500:	a941      	add	r1, sp, #260	; 0x104
 8009502:	4630      	mov	r0, r6
 8009504:	f000 fa0a 	bl	800991c <_scanf_chars>
 8009508:	2801      	cmp	r0, #1
 800950a:	d06e      	beq.n	80095ea <__ssvfiscanf_r+0x2e6>
 800950c:	2802      	cmp	r0, #2
 800950e:	f47f af20 	bne.w	8009352 <__ssvfiscanf_r+0x4e>
 8009512:	e7cf      	b.n	80094b4 <__ssvfiscanf_r+0x1b0>
 8009514:	220a      	movs	r2, #10
 8009516:	e7dd      	b.n	80094d4 <__ssvfiscanf_r+0x1d0>
 8009518:	2300      	movs	r3, #0
 800951a:	9342      	str	r3, [sp, #264]	; 0x108
 800951c:	2303      	movs	r3, #3
 800951e:	e7de      	b.n	80094de <__ssvfiscanf_r+0x1da>
 8009520:	2308      	movs	r3, #8
 8009522:	9342      	str	r3, [sp, #264]	; 0x108
 8009524:	2304      	movs	r3, #4
 8009526:	e7da      	b.n	80094de <__ssvfiscanf_r+0x1da>
 8009528:	4629      	mov	r1, r5
 800952a:	4640      	mov	r0, r8
 800952c:	f000 fb48 	bl	8009bc0 <__sccl>
 8009530:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009536:	9341      	str	r3, [sp, #260]	; 0x104
 8009538:	4605      	mov	r5, r0
 800953a:	2301      	movs	r3, #1
 800953c:	e7cf      	b.n	80094de <__ssvfiscanf_r+0x1da>
 800953e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009544:	9341      	str	r3, [sp, #260]	; 0x104
 8009546:	2300      	movs	r3, #0
 8009548:	e7c9      	b.n	80094de <__ssvfiscanf_r+0x1da>
 800954a:	2302      	movs	r3, #2
 800954c:	e7c7      	b.n	80094de <__ssvfiscanf_r+0x1da>
 800954e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009550:	06c3      	lsls	r3, r0, #27
 8009552:	f53f aefe 	bmi.w	8009352 <__ssvfiscanf_r+0x4e>
 8009556:	9b00      	ldr	r3, [sp, #0]
 8009558:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800955a:	1d19      	adds	r1, r3, #4
 800955c:	9100      	str	r1, [sp, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f010 0f01 	tst.w	r0, #1
 8009564:	bf14      	ite	ne
 8009566:	801a      	strhne	r2, [r3, #0]
 8009568:	601a      	streq	r2, [r3, #0]
 800956a:	e6f2      	b.n	8009352 <__ssvfiscanf_r+0x4e>
 800956c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800956e:	4621      	mov	r1, r4
 8009570:	4630      	mov	r0, r6
 8009572:	4798      	blx	r3
 8009574:	2800      	cmp	r0, #0
 8009576:	d0b6      	beq.n	80094e6 <__ssvfiscanf_r+0x1e2>
 8009578:	e79c      	b.n	80094b4 <__ssvfiscanf_r+0x1b0>
 800957a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800957c:	3201      	adds	r2, #1
 800957e:	9245      	str	r2, [sp, #276]	; 0x114
 8009580:	6862      	ldr	r2, [r4, #4]
 8009582:	3a01      	subs	r2, #1
 8009584:	2a00      	cmp	r2, #0
 8009586:	6062      	str	r2, [r4, #4]
 8009588:	dd02      	ble.n	8009590 <__ssvfiscanf_r+0x28c>
 800958a:	3301      	adds	r3, #1
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	e7ad      	b.n	80094ec <__ssvfiscanf_r+0x1e8>
 8009590:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009592:	4621      	mov	r1, r4
 8009594:	4630      	mov	r0, r6
 8009596:	4798      	blx	r3
 8009598:	2800      	cmp	r0, #0
 800959a:	d0a7      	beq.n	80094ec <__ssvfiscanf_r+0x1e8>
 800959c:	e78a      	b.n	80094b4 <__ssvfiscanf_r+0x1b0>
 800959e:	2b04      	cmp	r3, #4
 80095a0:	dc0e      	bgt.n	80095c0 <__ssvfiscanf_r+0x2bc>
 80095a2:	466b      	mov	r3, sp
 80095a4:	4622      	mov	r2, r4
 80095a6:	a941      	add	r1, sp, #260	; 0x104
 80095a8:	4630      	mov	r0, r6
 80095aa:	f000 fa11 	bl	80099d0 <_scanf_i>
 80095ae:	e7ab      	b.n	8009508 <__ssvfiscanf_r+0x204>
 80095b0:	08009251 	.word	0x08009251
 80095b4:	080092cb 	.word	0x080092cb
 80095b8:	0800abb5 	.word	0x0800abb5
 80095bc:	0800acbb 	.word	0x0800acbb
 80095c0:	4b0b      	ldr	r3, [pc, #44]	; (80095f0 <__ssvfiscanf_r+0x2ec>)
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f43f aec5 	beq.w	8009352 <__ssvfiscanf_r+0x4e>
 80095c8:	466b      	mov	r3, sp
 80095ca:	4622      	mov	r2, r4
 80095cc:	a941      	add	r1, sp, #260	; 0x104
 80095ce:	4630      	mov	r0, r6
 80095d0:	f3af 8000 	nop.w
 80095d4:	e798      	b.n	8009508 <__ssvfiscanf_r+0x204>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80095dc:	bf18      	it	ne
 80095de:	f04f 30ff 	movne.w	r0, #4294967295
 80095e2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80095e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ea:	9844      	ldr	r0, [sp, #272]	; 0x110
 80095ec:	e7f9      	b.n	80095e2 <__ssvfiscanf_r+0x2de>
 80095ee:	bf00      	nop
 80095f0:	00000000 	.word	0x00000000

080095f4 <_printf_common>:
 80095f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f8:	4616      	mov	r6, r2
 80095fa:	4699      	mov	r9, r3
 80095fc:	688a      	ldr	r2, [r1, #8]
 80095fe:	690b      	ldr	r3, [r1, #16]
 8009600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009604:	4293      	cmp	r3, r2
 8009606:	bfb8      	it	lt
 8009608:	4613      	movlt	r3, r2
 800960a:	6033      	str	r3, [r6, #0]
 800960c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009610:	4607      	mov	r7, r0
 8009612:	460c      	mov	r4, r1
 8009614:	b10a      	cbz	r2, 800961a <_printf_common+0x26>
 8009616:	3301      	adds	r3, #1
 8009618:	6033      	str	r3, [r6, #0]
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	0699      	lsls	r1, r3, #26
 800961e:	bf42      	ittt	mi
 8009620:	6833      	ldrmi	r3, [r6, #0]
 8009622:	3302      	addmi	r3, #2
 8009624:	6033      	strmi	r3, [r6, #0]
 8009626:	6825      	ldr	r5, [r4, #0]
 8009628:	f015 0506 	ands.w	r5, r5, #6
 800962c:	d106      	bne.n	800963c <_printf_common+0x48>
 800962e:	f104 0a19 	add.w	sl, r4, #25
 8009632:	68e3      	ldr	r3, [r4, #12]
 8009634:	6832      	ldr	r2, [r6, #0]
 8009636:	1a9b      	subs	r3, r3, r2
 8009638:	42ab      	cmp	r3, r5
 800963a:	dc26      	bgt.n	800968a <_printf_common+0x96>
 800963c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009640:	1e13      	subs	r3, r2, #0
 8009642:	6822      	ldr	r2, [r4, #0]
 8009644:	bf18      	it	ne
 8009646:	2301      	movne	r3, #1
 8009648:	0692      	lsls	r2, r2, #26
 800964a:	d42b      	bmi.n	80096a4 <_printf_common+0xb0>
 800964c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009650:	4649      	mov	r1, r9
 8009652:	4638      	mov	r0, r7
 8009654:	47c0      	blx	r8
 8009656:	3001      	adds	r0, #1
 8009658:	d01e      	beq.n	8009698 <_printf_common+0xa4>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	68e5      	ldr	r5, [r4, #12]
 800965e:	6832      	ldr	r2, [r6, #0]
 8009660:	f003 0306 	and.w	r3, r3, #6
 8009664:	2b04      	cmp	r3, #4
 8009666:	bf08      	it	eq
 8009668:	1aad      	subeq	r5, r5, r2
 800966a:	68a3      	ldr	r3, [r4, #8]
 800966c:	6922      	ldr	r2, [r4, #16]
 800966e:	bf0c      	ite	eq
 8009670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009674:	2500      	movne	r5, #0
 8009676:	4293      	cmp	r3, r2
 8009678:	bfc4      	itt	gt
 800967a:	1a9b      	subgt	r3, r3, r2
 800967c:	18ed      	addgt	r5, r5, r3
 800967e:	2600      	movs	r6, #0
 8009680:	341a      	adds	r4, #26
 8009682:	42b5      	cmp	r5, r6
 8009684:	d11a      	bne.n	80096bc <_printf_common+0xc8>
 8009686:	2000      	movs	r0, #0
 8009688:	e008      	b.n	800969c <_printf_common+0xa8>
 800968a:	2301      	movs	r3, #1
 800968c:	4652      	mov	r2, sl
 800968e:	4649      	mov	r1, r9
 8009690:	4638      	mov	r0, r7
 8009692:	47c0      	blx	r8
 8009694:	3001      	adds	r0, #1
 8009696:	d103      	bne.n	80096a0 <_printf_common+0xac>
 8009698:	f04f 30ff 	mov.w	r0, #4294967295
 800969c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a0:	3501      	adds	r5, #1
 80096a2:	e7c6      	b.n	8009632 <_printf_common+0x3e>
 80096a4:	18e1      	adds	r1, r4, r3
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	2030      	movs	r0, #48	; 0x30
 80096aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096ae:	4422      	add	r2, r4
 80096b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096b8:	3302      	adds	r3, #2
 80096ba:	e7c7      	b.n	800964c <_printf_common+0x58>
 80096bc:	2301      	movs	r3, #1
 80096be:	4622      	mov	r2, r4
 80096c0:	4649      	mov	r1, r9
 80096c2:	4638      	mov	r0, r7
 80096c4:	47c0      	blx	r8
 80096c6:	3001      	adds	r0, #1
 80096c8:	d0e6      	beq.n	8009698 <_printf_common+0xa4>
 80096ca:	3601      	adds	r6, #1
 80096cc:	e7d9      	b.n	8009682 <_printf_common+0x8e>
	...

080096d0 <_printf_i>:
 80096d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096d4:	7e0f      	ldrb	r7, [r1, #24]
 80096d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096d8:	2f78      	cmp	r7, #120	; 0x78
 80096da:	4691      	mov	r9, r2
 80096dc:	4680      	mov	r8, r0
 80096de:	460c      	mov	r4, r1
 80096e0:	469a      	mov	sl, r3
 80096e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096e6:	d807      	bhi.n	80096f8 <_printf_i+0x28>
 80096e8:	2f62      	cmp	r7, #98	; 0x62
 80096ea:	d80a      	bhi.n	8009702 <_printf_i+0x32>
 80096ec:	2f00      	cmp	r7, #0
 80096ee:	f000 80d8 	beq.w	80098a2 <_printf_i+0x1d2>
 80096f2:	2f58      	cmp	r7, #88	; 0x58
 80096f4:	f000 80a3 	beq.w	800983e <_printf_i+0x16e>
 80096f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009700:	e03a      	b.n	8009778 <_printf_i+0xa8>
 8009702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009706:	2b15      	cmp	r3, #21
 8009708:	d8f6      	bhi.n	80096f8 <_printf_i+0x28>
 800970a:	a101      	add	r1, pc, #4	; (adr r1, 8009710 <_printf_i+0x40>)
 800970c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009710:	08009769 	.word	0x08009769
 8009714:	0800977d 	.word	0x0800977d
 8009718:	080096f9 	.word	0x080096f9
 800971c:	080096f9 	.word	0x080096f9
 8009720:	080096f9 	.word	0x080096f9
 8009724:	080096f9 	.word	0x080096f9
 8009728:	0800977d 	.word	0x0800977d
 800972c:	080096f9 	.word	0x080096f9
 8009730:	080096f9 	.word	0x080096f9
 8009734:	080096f9 	.word	0x080096f9
 8009738:	080096f9 	.word	0x080096f9
 800973c:	08009889 	.word	0x08009889
 8009740:	080097ad 	.word	0x080097ad
 8009744:	0800986b 	.word	0x0800986b
 8009748:	080096f9 	.word	0x080096f9
 800974c:	080096f9 	.word	0x080096f9
 8009750:	080098ab 	.word	0x080098ab
 8009754:	080096f9 	.word	0x080096f9
 8009758:	080097ad 	.word	0x080097ad
 800975c:	080096f9 	.word	0x080096f9
 8009760:	080096f9 	.word	0x080096f9
 8009764:	08009873 	.word	0x08009873
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	1d1a      	adds	r2, r3, #4
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	602a      	str	r2, [r5, #0]
 8009770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009778:	2301      	movs	r3, #1
 800977a:	e0a3      	b.n	80098c4 <_printf_i+0x1f4>
 800977c:	6820      	ldr	r0, [r4, #0]
 800977e:	6829      	ldr	r1, [r5, #0]
 8009780:	0606      	lsls	r6, r0, #24
 8009782:	f101 0304 	add.w	r3, r1, #4
 8009786:	d50a      	bpl.n	800979e <_printf_i+0xce>
 8009788:	680e      	ldr	r6, [r1, #0]
 800978a:	602b      	str	r3, [r5, #0]
 800978c:	2e00      	cmp	r6, #0
 800978e:	da03      	bge.n	8009798 <_printf_i+0xc8>
 8009790:	232d      	movs	r3, #45	; 0x2d
 8009792:	4276      	negs	r6, r6
 8009794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009798:	485e      	ldr	r0, [pc, #376]	; (8009914 <_printf_i+0x244>)
 800979a:	230a      	movs	r3, #10
 800979c:	e019      	b.n	80097d2 <_printf_i+0x102>
 800979e:	680e      	ldr	r6, [r1, #0]
 80097a0:	602b      	str	r3, [r5, #0]
 80097a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097a6:	bf18      	it	ne
 80097a8:	b236      	sxthne	r6, r6
 80097aa:	e7ef      	b.n	800978c <_printf_i+0xbc>
 80097ac:	682b      	ldr	r3, [r5, #0]
 80097ae:	6820      	ldr	r0, [r4, #0]
 80097b0:	1d19      	adds	r1, r3, #4
 80097b2:	6029      	str	r1, [r5, #0]
 80097b4:	0601      	lsls	r1, r0, #24
 80097b6:	d501      	bpl.n	80097bc <_printf_i+0xec>
 80097b8:	681e      	ldr	r6, [r3, #0]
 80097ba:	e002      	b.n	80097c2 <_printf_i+0xf2>
 80097bc:	0646      	lsls	r6, r0, #25
 80097be:	d5fb      	bpl.n	80097b8 <_printf_i+0xe8>
 80097c0:	881e      	ldrh	r6, [r3, #0]
 80097c2:	4854      	ldr	r0, [pc, #336]	; (8009914 <_printf_i+0x244>)
 80097c4:	2f6f      	cmp	r7, #111	; 0x6f
 80097c6:	bf0c      	ite	eq
 80097c8:	2308      	moveq	r3, #8
 80097ca:	230a      	movne	r3, #10
 80097cc:	2100      	movs	r1, #0
 80097ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097d2:	6865      	ldr	r5, [r4, #4]
 80097d4:	60a5      	str	r5, [r4, #8]
 80097d6:	2d00      	cmp	r5, #0
 80097d8:	bfa2      	ittt	ge
 80097da:	6821      	ldrge	r1, [r4, #0]
 80097dc:	f021 0104 	bicge.w	r1, r1, #4
 80097e0:	6021      	strge	r1, [r4, #0]
 80097e2:	b90e      	cbnz	r6, 80097e8 <_printf_i+0x118>
 80097e4:	2d00      	cmp	r5, #0
 80097e6:	d04d      	beq.n	8009884 <_printf_i+0x1b4>
 80097e8:	4615      	mov	r5, r2
 80097ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80097ee:	fb03 6711 	mls	r7, r3, r1, r6
 80097f2:	5dc7      	ldrb	r7, [r0, r7]
 80097f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097f8:	4637      	mov	r7, r6
 80097fa:	42bb      	cmp	r3, r7
 80097fc:	460e      	mov	r6, r1
 80097fe:	d9f4      	bls.n	80097ea <_printf_i+0x11a>
 8009800:	2b08      	cmp	r3, #8
 8009802:	d10b      	bne.n	800981c <_printf_i+0x14c>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	07de      	lsls	r6, r3, #31
 8009808:	d508      	bpl.n	800981c <_printf_i+0x14c>
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	6861      	ldr	r1, [r4, #4]
 800980e:	4299      	cmp	r1, r3
 8009810:	bfde      	ittt	le
 8009812:	2330      	movle	r3, #48	; 0x30
 8009814:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009818:	f105 35ff 	addle.w	r5, r5, #4294967295
 800981c:	1b52      	subs	r2, r2, r5
 800981e:	6122      	str	r2, [r4, #16]
 8009820:	f8cd a000 	str.w	sl, [sp]
 8009824:	464b      	mov	r3, r9
 8009826:	aa03      	add	r2, sp, #12
 8009828:	4621      	mov	r1, r4
 800982a:	4640      	mov	r0, r8
 800982c:	f7ff fee2 	bl	80095f4 <_printf_common>
 8009830:	3001      	adds	r0, #1
 8009832:	d14c      	bne.n	80098ce <_printf_i+0x1fe>
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	b004      	add	sp, #16
 800983a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983e:	4835      	ldr	r0, [pc, #212]	; (8009914 <_printf_i+0x244>)
 8009840:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009844:	6829      	ldr	r1, [r5, #0]
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	f851 6b04 	ldr.w	r6, [r1], #4
 800984c:	6029      	str	r1, [r5, #0]
 800984e:	061d      	lsls	r5, r3, #24
 8009850:	d514      	bpl.n	800987c <_printf_i+0x1ac>
 8009852:	07df      	lsls	r7, r3, #31
 8009854:	bf44      	itt	mi
 8009856:	f043 0320 	orrmi.w	r3, r3, #32
 800985a:	6023      	strmi	r3, [r4, #0]
 800985c:	b91e      	cbnz	r6, 8009866 <_printf_i+0x196>
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	f023 0320 	bic.w	r3, r3, #32
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	2310      	movs	r3, #16
 8009868:	e7b0      	b.n	80097cc <_printf_i+0xfc>
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	f043 0320 	orr.w	r3, r3, #32
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	2378      	movs	r3, #120	; 0x78
 8009874:	4828      	ldr	r0, [pc, #160]	; (8009918 <_printf_i+0x248>)
 8009876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800987a:	e7e3      	b.n	8009844 <_printf_i+0x174>
 800987c:	0659      	lsls	r1, r3, #25
 800987e:	bf48      	it	mi
 8009880:	b2b6      	uxthmi	r6, r6
 8009882:	e7e6      	b.n	8009852 <_printf_i+0x182>
 8009884:	4615      	mov	r5, r2
 8009886:	e7bb      	b.n	8009800 <_printf_i+0x130>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	6826      	ldr	r6, [r4, #0]
 800988c:	6961      	ldr	r1, [r4, #20]
 800988e:	1d18      	adds	r0, r3, #4
 8009890:	6028      	str	r0, [r5, #0]
 8009892:	0635      	lsls	r5, r6, #24
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	d501      	bpl.n	800989c <_printf_i+0x1cc>
 8009898:	6019      	str	r1, [r3, #0]
 800989a:	e002      	b.n	80098a2 <_printf_i+0x1d2>
 800989c:	0670      	lsls	r0, r6, #25
 800989e:	d5fb      	bpl.n	8009898 <_printf_i+0x1c8>
 80098a0:	8019      	strh	r1, [r3, #0]
 80098a2:	2300      	movs	r3, #0
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	4615      	mov	r5, r2
 80098a8:	e7ba      	b.n	8009820 <_printf_i+0x150>
 80098aa:	682b      	ldr	r3, [r5, #0]
 80098ac:	1d1a      	adds	r2, r3, #4
 80098ae:	602a      	str	r2, [r5, #0]
 80098b0:	681d      	ldr	r5, [r3, #0]
 80098b2:	6862      	ldr	r2, [r4, #4]
 80098b4:	2100      	movs	r1, #0
 80098b6:	4628      	mov	r0, r5
 80098b8:	f7f6 fcaa 	bl	8000210 <memchr>
 80098bc:	b108      	cbz	r0, 80098c2 <_printf_i+0x1f2>
 80098be:	1b40      	subs	r0, r0, r5
 80098c0:	6060      	str	r0, [r4, #4]
 80098c2:	6863      	ldr	r3, [r4, #4]
 80098c4:	6123      	str	r3, [r4, #16]
 80098c6:	2300      	movs	r3, #0
 80098c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098cc:	e7a8      	b.n	8009820 <_printf_i+0x150>
 80098ce:	6923      	ldr	r3, [r4, #16]
 80098d0:	462a      	mov	r2, r5
 80098d2:	4649      	mov	r1, r9
 80098d4:	4640      	mov	r0, r8
 80098d6:	47d0      	blx	sl
 80098d8:	3001      	adds	r0, #1
 80098da:	d0ab      	beq.n	8009834 <_printf_i+0x164>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	079b      	lsls	r3, r3, #30
 80098e0:	d413      	bmi.n	800990a <_printf_i+0x23a>
 80098e2:	68e0      	ldr	r0, [r4, #12]
 80098e4:	9b03      	ldr	r3, [sp, #12]
 80098e6:	4298      	cmp	r0, r3
 80098e8:	bfb8      	it	lt
 80098ea:	4618      	movlt	r0, r3
 80098ec:	e7a4      	b.n	8009838 <_printf_i+0x168>
 80098ee:	2301      	movs	r3, #1
 80098f0:	4632      	mov	r2, r6
 80098f2:	4649      	mov	r1, r9
 80098f4:	4640      	mov	r0, r8
 80098f6:	47d0      	blx	sl
 80098f8:	3001      	adds	r0, #1
 80098fa:	d09b      	beq.n	8009834 <_printf_i+0x164>
 80098fc:	3501      	adds	r5, #1
 80098fe:	68e3      	ldr	r3, [r4, #12]
 8009900:	9903      	ldr	r1, [sp, #12]
 8009902:	1a5b      	subs	r3, r3, r1
 8009904:	42ab      	cmp	r3, r5
 8009906:	dcf2      	bgt.n	80098ee <_printf_i+0x21e>
 8009908:	e7eb      	b.n	80098e2 <_printf_i+0x212>
 800990a:	2500      	movs	r5, #0
 800990c:	f104 0619 	add.w	r6, r4, #25
 8009910:	e7f5      	b.n	80098fe <_printf_i+0x22e>
 8009912:	bf00      	nop
 8009914:	0800acc6 	.word	0x0800acc6
 8009918:	0800acd7 	.word	0x0800acd7

0800991c <_scanf_chars>:
 800991c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009920:	4615      	mov	r5, r2
 8009922:	688a      	ldr	r2, [r1, #8]
 8009924:	4680      	mov	r8, r0
 8009926:	460c      	mov	r4, r1
 8009928:	b932      	cbnz	r2, 8009938 <_scanf_chars+0x1c>
 800992a:	698a      	ldr	r2, [r1, #24]
 800992c:	2a00      	cmp	r2, #0
 800992e:	bf0c      	ite	eq
 8009930:	2201      	moveq	r2, #1
 8009932:	f04f 32ff 	movne.w	r2, #4294967295
 8009936:	608a      	str	r2, [r1, #8]
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80099cc <_scanf_chars+0xb0>
 800993e:	06d1      	lsls	r1, r2, #27
 8009940:	bf5f      	itttt	pl
 8009942:	681a      	ldrpl	r2, [r3, #0]
 8009944:	1d11      	addpl	r1, r2, #4
 8009946:	6019      	strpl	r1, [r3, #0]
 8009948:	6816      	ldrpl	r6, [r2, #0]
 800994a:	2700      	movs	r7, #0
 800994c:	69a0      	ldr	r0, [r4, #24]
 800994e:	b188      	cbz	r0, 8009974 <_scanf_chars+0x58>
 8009950:	2801      	cmp	r0, #1
 8009952:	d107      	bne.n	8009964 <_scanf_chars+0x48>
 8009954:	682a      	ldr	r2, [r5, #0]
 8009956:	7811      	ldrb	r1, [r2, #0]
 8009958:	6962      	ldr	r2, [r4, #20]
 800995a:	5c52      	ldrb	r2, [r2, r1]
 800995c:	b952      	cbnz	r2, 8009974 <_scanf_chars+0x58>
 800995e:	2f00      	cmp	r7, #0
 8009960:	d031      	beq.n	80099c6 <_scanf_chars+0xaa>
 8009962:	e022      	b.n	80099aa <_scanf_chars+0x8e>
 8009964:	2802      	cmp	r0, #2
 8009966:	d120      	bne.n	80099aa <_scanf_chars+0x8e>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009970:	071b      	lsls	r3, r3, #28
 8009972:	d41a      	bmi.n	80099aa <_scanf_chars+0x8e>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	06da      	lsls	r2, r3, #27
 8009978:	bf5e      	ittt	pl
 800997a:	682b      	ldrpl	r3, [r5, #0]
 800997c:	781b      	ldrbpl	r3, [r3, #0]
 800997e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009982:	682a      	ldr	r2, [r5, #0]
 8009984:	686b      	ldr	r3, [r5, #4]
 8009986:	3201      	adds	r2, #1
 8009988:	602a      	str	r2, [r5, #0]
 800998a:	68a2      	ldr	r2, [r4, #8]
 800998c:	3b01      	subs	r3, #1
 800998e:	3a01      	subs	r2, #1
 8009990:	606b      	str	r3, [r5, #4]
 8009992:	3701      	adds	r7, #1
 8009994:	60a2      	str	r2, [r4, #8]
 8009996:	b142      	cbz	r2, 80099aa <_scanf_chars+0x8e>
 8009998:	2b00      	cmp	r3, #0
 800999a:	dcd7      	bgt.n	800994c <_scanf_chars+0x30>
 800999c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80099a0:	4629      	mov	r1, r5
 80099a2:	4640      	mov	r0, r8
 80099a4:	4798      	blx	r3
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d0d0      	beq.n	800994c <_scanf_chars+0x30>
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	f013 0310 	ands.w	r3, r3, #16
 80099b0:	d105      	bne.n	80099be <_scanf_chars+0xa2>
 80099b2:	68e2      	ldr	r2, [r4, #12]
 80099b4:	3201      	adds	r2, #1
 80099b6:	60e2      	str	r2, [r4, #12]
 80099b8:	69a2      	ldr	r2, [r4, #24]
 80099ba:	b102      	cbz	r2, 80099be <_scanf_chars+0xa2>
 80099bc:	7033      	strb	r3, [r6, #0]
 80099be:	6923      	ldr	r3, [r4, #16]
 80099c0:	443b      	add	r3, r7
 80099c2:	6123      	str	r3, [r4, #16]
 80099c4:	2000      	movs	r0, #0
 80099c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ca:	bf00      	nop
 80099cc:	0800abb5 	.word	0x0800abb5

080099d0 <_scanf_i>:
 80099d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	4698      	mov	r8, r3
 80099d6:	4b76      	ldr	r3, [pc, #472]	; (8009bb0 <_scanf_i+0x1e0>)
 80099d8:	460c      	mov	r4, r1
 80099da:	4682      	mov	sl, r0
 80099dc:	4616      	mov	r6, r2
 80099de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099e2:	b087      	sub	sp, #28
 80099e4:	ab03      	add	r3, sp, #12
 80099e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80099ea:	4b72      	ldr	r3, [pc, #456]	; (8009bb4 <_scanf_i+0x1e4>)
 80099ec:	69a1      	ldr	r1, [r4, #24]
 80099ee:	4a72      	ldr	r2, [pc, #456]	; (8009bb8 <_scanf_i+0x1e8>)
 80099f0:	2903      	cmp	r1, #3
 80099f2:	bf18      	it	ne
 80099f4:	461a      	movne	r2, r3
 80099f6:	68a3      	ldr	r3, [r4, #8]
 80099f8:	9201      	str	r2, [sp, #4]
 80099fa:	1e5a      	subs	r2, r3, #1
 80099fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009a00:	bf88      	it	hi
 8009a02:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009a06:	4627      	mov	r7, r4
 8009a08:	bf82      	ittt	hi
 8009a0a:	eb03 0905 	addhi.w	r9, r3, r5
 8009a0e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009a12:	60a3      	strhi	r3, [r4, #8]
 8009a14:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009a18:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009a1c:	bf98      	it	ls
 8009a1e:	f04f 0900 	movls.w	r9, #0
 8009a22:	6023      	str	r3, [r4, #0]
 8009a24:	463d      	mov	r5, r7
 8009a26:	f04f 0b00 	mov.w	fp, #0
 8009a2a:	6831      	ldr	r1, [r6, #0]
 8009a2c:	ab03      	add	r3, sp, #12
 8009a2e:	7809      	ldrb	r1, [r1, #0]
 8009a30:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009a34:	2202      	movs	r2, #2
 8009a36:	f7f6 fbeb 	bl	8000210 <memchr>
 8009a3a:	b328      	cbz	r0, 8009a88 <_scanf_i+0xb8>
 8009a3c:	f1bb 0f01 	cmp.w	fp, #1
 8009a40:	d159      	bne.n	8009af6 <_scanf_i+0x126>
 8009a42:	6862      	ldr	r2, [r4, #4]
 8009a44:	b92a      	cbnz	r2, 8009a52 <_scanf_i+0x82>
 8009a46:	6822      	ldr	r2, [r4, #0]
 8009a48:	2308      	movs	r3, #8
 8009a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a4e:	6063      	str	r3, [r4, #4]
 8009a50:	6022      	str	r2, [r4, #0]
 8009a52:	6822      	ldr	r2, [r4, #0]
 8009a54:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009a58:	6022      	str	r2, [r4, #0]
 8009a5a:	68a2      	ldr	r2, [r4, #8]
 8009a5c:	1e51      	subs	r1, r2, #1
 8009a5e:	60a1      	str	r1, [r4, #8]
 8009a60:	b192      	cbz	r2, 8009a88 <_scanf_i+0xb8>
 8009a62:	6832      	ldr	r2, [r6, #0]
 8009a64:	1c51      	adds	r1, r2, #1
 8009a66:	6031      	str	r1, [r6, #0]
 8009a68:	7812      	ldrb	r2, [r2, #0]
 8009a6a:	f805 2b01 	strb.w	r2, [r5], #1
 8009a6e:	6872      	ldr	r2, [r6, #4]
 8009a70:	3a01      	subs	r2, #1
 8009a72:	2a00      	cmp	r2, #0
 8009a74:	6072      	str	r2, [r6, #4]
 8009a76:	dc07      	bgt.n	8009a88 <_scanf_i+0xb8>
 8009a78:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4650      	mov	r0, sl
 8009a80:	4790      	blx	r2
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f040 8085 	bne.w	8009b92 <_scanf_i+0x1c2>
 8009a88:	f10b 0b01 	add.w	fp, fp, #1
 8009a8c:	f1bb 0f03 	cmp.w	fp, #3
 8009a90:	d1cb      	bne.n	8009a2a <_scanf_i+0x5a>
 8009a92:	6863      	ldr	r3, [r4, #4]
 8009a94:	b90b      	cbnz	r3, 8009a9a <_scanf_i+0xca>
 8009a96:	230a      	movs	r3, #10
 8009a98:	6063      	str	r3, [r4, #4]
 8009a9a:	6863      	ldr	r3, [r4, #4]
 8009a9c:	4947      	ldr	r1, [pc, #284]	; (8009bbc <_scanf_i+0x1ec>)
 8009a9e:	6960      	ldr	r0, [r4, #20]
 8009aa0:	1ac9      	subs	r1, r1, r3
 8009aa2:	f000 f88d 	bl	8009bc0 <__sccl>
 8009aa6:	f04f 0b00 	mov.w	fp, #0
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	6822      	ldr	r2, [r4, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d03d      	beq.n	8009b2e <_scanf_i+0x15e>
 8009ab2:	6831      	ldr	r1, [r6, #0]
 8009ab4:	6960      	ldr	r0, [r4, #20]
 8009ab6:	f891 c000 	ldrb.w	ip, [r1]
 8009aba:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d035      	beq.n	8009b2e <_scanf_i+0x15e>
 8009ac2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009ac6:	d124      	bne.n	8009b12 <_scanf_i+0x142>
 8009ac8:	0510      	lsls	r0, r2, #20
 8009aca:	d522      	bpl.n	8009b12 <_scanf_i+0x142>
 8009acc:	f10b 0b01 	add.w	fp, fp, #1
 8009ad0:	f1b9 0f00 	cmp.w	r9, #0
 8009ad4:	d003      	beq.n	8009ade <_scanf_i+0x10e>
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	f109 39ff 	add.w	r9, r9, #4294967295
 8009adc:	60a3      	str	r3, [r4, #8]
 8009ade:	6873      	ldr	r3, [r6, #4]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	6073      	str	r3, [r6, #4]
 8009ae6:	dd1b      	ble.n	8009b20 <_scanf_i+0x150>
 8009ae8:	6833      	ldr	r3, [r6, #0]
 8009aea:	3301      	adds	r3, #1
 8009aec:	6033      	str	r3, [r6, #0]
 8009aee:	68a3      	ldr	r3, [r4, #8]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	60a3      	str	r3, [r4, #8]
 8009af4:	e7d9      	b.n	8009aaa <_scanf_i+0xda>
 8009af6:	f1bb 0f02 	cmp.w	fp, #2
 8009afa:	d1ae      	bne.n	8009a5a <_scanf_i+0x8a>
 8009afc:	6822      	ldr	r2, [r4, #0]
 8009afe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009b02:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009b06:	d1bf      	bne.n	8009a88 <_scanf_i+0xb8>
 8009b08:	2310      	movs	r3, #16
 8009b0a:	6063      	str	r3, [r4, #4]
 8009b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b10:	e7a2      	b.n	8009a58 <_scanf_i+0x88>
 8009b12:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009b16:	6022      	str	r2, [r4, #0]
 8009b18:	780b      	ldrb	r3, [r1, #0]
 8009b1a:	f805 3b01 	strb.w	r3, [r5], #1
 8009b1e:	e7de      	b.n	8009ade <_scanf_i+0x10e>
 8009b20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b24:	4631      	mov	r1, r6
 8009b26:	4650      	mov	r0, sl
 8009b28:	4798      	blx	r3
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d0df      	beq.n	8009aee <_scanf_i+0x11e>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	05db      	lsls	r3, r3, #23
 8009b32:	d50d      	bpl.n	8009b50 <_scanf_i+0x180>
 8009b34:	42bd      	cmp	r5, r7
 8009b36:	d909      	bls.n	8009b4c <_scanf_i+0x17c>
 8009b38:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009b3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b40:	4632      	mov	r2, r6
 8009b42:	4650      	mov	r0, sl
 8009b44:	4798      	blx	r3
 8009b46:	f105 39ff 	add.w	r9, r5, #4294967295
 8009b4a:	464d      	mov	r5, r9
 8009b4c:	42bd      	cmp	r5, r7
 8009b4e:	d02d      	beq.n	8009bac <_scanf_i+0x1dc>
 8009b50:	6822      	ldr	r2, [r4, #0]
 8009b52:	f012 0210 	ands.w	r2, r2, #16
 8009b56:	d113      	bne.n	8009b80 <_scanf_i+0x1b0>
 8009b58:	702a      	strb	r2, [r5, #0]
 8009b5a:	6863      	ldr	r3, [r4, #4]
 8009b5c:	9e01      	ldr	r6, [sp, #4]
 8009b5e:	4639      	mov	r1, r7
 8009b60:	4650      	mov	r0, sl
 8009b62:	47b0      	blx	r6
 8009b64:	6821      	ldr	r1, [r4, #0]
 8009b66:	f8d8 3000 	ldr.w	r3, [r8]
 8009b6a:	f011 0f20 	tst.w	r1, #32
 8009b6e:	d013      	beq.n	8009b98 <_scanf_i+0x1c8>
 8009b70:	1d1a      	adds	r2, r3, #4
 8009b72:	f8c8 2000 	str.w	r2, [r8]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6018      	str	r0, [r3, #0]
 8009b7a:	68e3      	ldr	r3, [r4, #12]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	60e3      	str	r3, [r4, #12]
 8009b80:	1bed      	subs	r5, r5, r7
 8009b82:	44ab      	add	fp, r5
 8009b84:	6925      	ldr	r5, [r4, #16]
 8009b86:	445d      	add	r5, fp
 8009b88:	6125      	str	r5, [r4, #16]
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	b007      	add	sp, #28
 8009b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b92:	f04f 0b00 	mov.w	fp, #0
 8009b96:	e7ca      	b.n	8009b2e <_scanf_i+0x15e>
 8009b98:	1d1a      	adds	r2, r3, #4
 8009b9a:	f8c8 2000 	str.w	r2, [r8]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f011 0f01 	tst.w	r1, #1
 8009ba4:	bf14      	ite	ne
 8009ba6:	8018      	strhne	r0, [r3, #0]
 8009ba8:	6018      	streq	r0, [r3, #0]
 8009baa:	e7e6      	b.n	8009b7a <_scanf_i+0x1aa>
 8009bac:	2001      	movs	r0, #1
 8009bae:	e7ed      	b.n	8009b8c <_scanf_i+0x1bc>
 8009bb0:	0800a7a0 	.word	0x0800a7a0
 8009bb4:	08009e1d 	.word	0x08009e1d
 8009bb8:	08009d35 	.word	0x08009d35
 8009bbc:	0800ad01 	.word	0x0800ad01

08009bc0 <__sccl>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	780b      	ldrb	r3, [r1, #0]
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	2b5e      	cmp	r3, #94	; 0x5e
 8009bc8:	bf0b      	itete	eq
 8009bca:	784b      	ldrbeq	r3, [r1, #1]
 8009bcc:	1c48      	addne	r0, r1, #1
 8009bce:	1c88      	addeq	r0, r1, #2
 8009bd0:	2200      	movne	r2, #0
 8009bd2:	bf08      	it	eq
 8009bd4:	2201      	moveq	r2, #1
 8009bd6:	1e61      	subs	r1, r4, #1
 8009bd8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009bdc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009be0:	42a9      	cmp	r1, r5
 8009be2:	d1fb      	bne.n	8009bdc <__sccl+0x1c>
 8009be4:	b90b      	cbnz	r3, 8009bea <__sccl+0x2a>
 8009be6:	3801      	subs	r0, #1
 8009be8:	bd70      	pop	{r4, r5, r6, pc}
 8009bea:	f082 0201 	eor.w	r2, r2, #1
 8009bee:	54e2      	strb	r2, [r4, r3]
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009bf8:	292d      	cmp	r1, #45	; 0x2d
 8009bfa:	d006      	beq.n	8009c0a <__sccl+0x4a>
 8009bfc:	295d      	cmp	r1, #93	; 0x5d
 8009bfe:	d0f3      	beq.n	8009be8 <__sccl+0x28>
 8009c00:	b909      	cbnz	r1, 8009c06 <__sccl+0x46>
 8009c02:	4628      	mov	r0, r5
 8009c04:	e7f0      	b.n	8009be8 <__sccl+0x28>
 8009c06:	460b      	mov	r3, r1
 8009c08:	e7f1      	b.n	8009bee <__sccl+0x2e>
 8009c0a:	786e      	ldrb	r6, [r5, #1]
 8009c0c:	2e5d      	cmp	r6, #93	; 0x5d
 8009c0e:	d0fa      	beq.n	8009c06 <__sccl+0x46>
 8009c10:	42b3      	cmp	r3, r6
 8009c12:	dcf8      	bgt.n	8009c06 <__sccl+0x46>
 8009c14:	3502      	adds	r5, #2
 8009c16:	4619      	mov	r1, r3
 8009c18:	3101      	adds	r1, #1
 8009c1a:	428e      	cmp	r6, r1
 8009c1c:	5462      	strb	r2, [r4, r1]
 8009c1e:	dcfb      	bgt.n	8009c18 <__sccl+0x58>
 8009c20:	1af1      	subs	r1, r6, r3
 8009c22:	3901      	subs	r1, #1
 8009c24:	1c58      	adds	r0, r3, #1
 8009c26:	42b3      	cmp	r3, r6
 8009c28:	bfa8      	it	ge
 8009c2a:	2100      	movge	r1, #0
 8009c2c:	1843      	adds	r3, r0, r1
 8009c2e:	e7e0      	b.n	8009bf2 <__sccl+0x32>

08009c30 <_strtol_l.constprop.0>:
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c36:	d001      	beq.n	8009c3c <_strtol_l.constprop.0+0xc>
 8009c38:	2b24      	cmp	r3, #36	; 0x24
 8009c3a:	d906      	bls.n	8009c4a <_strtol_l.constprop.0+0x1a>
 8009c3c:	f7ff f916 	bl	8008e6c <__errno>
 8009c40:	2316      	movs	r3, #22
 8009c42:	6003      	str	r3, [r0, #0]
 8009c44:	2000      	movs	r0, #0
 8009c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009d30 <_strtol_l.constprop.0+0x100>
 8009c4e:	460d      	mov	r5, r1
 8009c50:	462e      	mov	r6, r5
 8009c52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c56:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009c5a:	f017 0708 	ands.w	r7, r7, #8
 8009c5e:	d1f7      	bne.n	8009c50 <_strtol_l.constprop.0+0x20>
 8009c60:	2c2d      	cmp	r4, #45	; 0x2d
 8009c62:	d132      	bne.n	8009cca <_strtol_l.constprop.0+0x9a>
 8009c64:	782c      	ldrb	r4, [r5, #0]
 8009c66:	2701      	movs	r7, #1
 8009c68:	1cb5      	adds	r5, r6, #2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d05b      	beq.n	8009d26 <_strtol_l.constprop.0+0xf6>
 8009c6e:	2b10      	cmp	r3, #16
 8009c70:	d109      	bne.n	8009c86 <_strtol_l.constprop.0+0x56>
 8009c72:	2c30      	cmp	r4, #48	; 0x30
 8009c74:	d107      	bne.n	8009c86 <_strtol_l.constprop.0+0x56>
 8009c76:	782c      	ldrb	r4, [r5, #0]
 8009c78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c7c:	2c58      	cmp	r4, #88	; 0x58
 8009c7e:	d14d      	bne.n	8009d1c <_strtol_l.constprop.0+0xec>
 8009c80:	786c      	ldrb	r4, [r5, #1]
 8009c82:	2310      	movs	r3, #16
 8009c84:	3502      	adds	r5, #2
 8009c86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009c8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c8e:	f04f 0c00 	mov.w	ip, #0
 8009c92:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c96:	4666      	mov	r6, ip
 8009c98:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009ca0:	f1be 0f09 	cmp.w	lr, #9
 8009ca4:	d816      	bhi.n	8009cd4 <_strtol_l.constprop.0+0xa4>
 8009ca6:	4674      	mov	r4, lr
 8009ca8:	42a3      	cmp	r3, r4
 8009caa:	dd24      	ble.n	8009cf6 <_strtol_l.constprop.0+0xc6>
 8009cac:	f1bc 0f00 	cmp.w	ip, #0
 8009cb0:	db1e      	blt.n	8009cf0 <_strtol_l.constprop.0+0xc0>
 8009cb2:	45b1      	cmp	r9, r6
 8009cb4:	d31c      	bcc.n	8009cf0 <_strtol_l.constprop.0+0xc0>
 8009cb6:	d101      	bne.n	8009cbc <_strtol_l.constprop.0+0x8c>
 8009cb8:	45a2      	cmp	sl, r4
 8009cba:	db19      	blt.n	8009cf0 <_strtol_l.constprop.0+0xc0>
 8009cbc:	fb06 4603 	mla	r6, r6, r3, r4
 8009cc0:	f04f 0c01 	mov.w	ip, #1
 8009cc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cc8:	e7e8      	b.n	8009c9c <_strtol_l.constprop.0+0x6c>
 8009cca:	2c2b      	cmp	r4, #43	; 0x2b
 8009ccc:	bf04      	itt	eq
 8009cce:	782c      	ldrbeq	r4, [r5, #0]
 8009cd0:	1cb5      	addeq	r5, r6, #2
 8009cd2:	e7ca      	b.n	8009c6a <_strtol_l.constprop.0+0x3a>
 8009cd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009cd8:	f1be 0f19 	cmp.w	lr, #25
 8009cdc:	d801      	bhi.n	8009ce2 <_strtol_l.constprop.0+0xb2>
 8009cde:	3c37      	subs	r4, #55	; 0x37
 8009ce0:	e7e2      	b.n	8009ca8 <_strtol_l.constprop.0+0x78>
 8009ce2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009ce6:	f1be 0f19 	cmp.w	lr, #25
 8009cea:	d804      	bhi.n	8009cf6 <_strtol_l.constprop.0+0xc6>
 8009cec:	3c57      	subs	r4, #87	; 0x57
 8009cee:	e7db      	b.n	8009ca8 <_strtol_l.constprop.0+0x78>
 8009cf0:	f04f 3cff 	mov.w	ip, #4294967295
 8009cf4:	e7e6      	b.n	8009cc4 <_strtol_l.constprop.0+0x94>
 8009cf6:	f1bc 0f00 	cmp.w	ip, #0
 8009cfa:	da05      	bge.n	8009d08 <_strtol_l.constprop.0+0xd8>
 8009cfc:	2322      	movs	r3, #34	; 0x22
 8009cfe:	6003      	str	r3, [r0, #0]
 8009d00:	4646      	mov	r6, r8
 8009d02:	b942      	cbnz	r2, 8009d16 <_strtol_l.constprop.0+0xe6>
 8009d04:	4630      	mov	r0, r6
 8009d06:	e79e      	b.n	8009c46 <_strtol_l.constprop.0+0x16>
 8009d08:	b107      	cbz	r7, 8009d0c <_strtol_l.constprop.0+0xdc>
 8009d0a:	4276      	negs	r6, r6
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	d0f9      	beq.n	8009d04 <_strtol_l.constprop.0+0xd4>
 8009d10:	f1bc 0f00 	cmp.w	ip, #0
 8009d14:	d000      	beq.n	8009d18 <_strtol_l.constprop.0+0xe8>
 8009d16:	1e69      	subs	r1, r5, #1
 8009d18:	6011      	str	r1, [r2, #0]
 8009d1a:	e7f3      	b.n	8009d04 <_strtol_l.constprop.0+0xd4>
 8009d1c:	2430      	movs	r4, #48	; 0x30
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1b1      	bne.n	8009c86 <_strtol_l.constprop.0+0x56>
 8009d22:	2308      	movs	r3, #8
 8009d24:	e7af      	b.n	8009c86 <_strtol_l.constprop.0+0x56>
 8009d26:	2c30      	cmp	r4, #48	; 0x30
 8009d28:	d0a5      	beq.n	8009c76 <_strtol_l.constprop.0+0x46>
 8009d2a:	230a      	movs	r3, #10
 8009d2c:	e7ab      	b.n	8009c86 <_strtol_l.constprop.0+0x56>
 8009d2e:	bf00      	nop
 8009d30:	0800abb5 	.word	0x0800abb5

08009d34 <_strtol_r>:
 8009d34:	f7ff bf7c 	b.w	8009c30 <_strtol_l.constprop.0>

08009d38 <_strtoul_l.constprop.0>:
 8009d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d3c:	4f36      	ldr	r7, [pc, #216]	; (8009e18 <_strtoul_l.constprop.0+0xe0>)
 8009d3e:	4686      	mov	lr, r0
 8009d40:	460d      	mov	r5, r1
 8009d42:	4628      	mov	r0, r5
 8009d44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d48:	5de6      	ldrb	r6, [r4, r7]
 8009d4a:	f016 0608 	ands.w	r6, r6, #8
 8009d4e:	d1f8      	bne.n	8009d42 <_strtoul_l.constprop.0+0xa>
 8009d50:	2c2d      	cmp	r4, #45	; 0x2d
 8009d52:	d12f      	bne.n	8009db4 <_strtoul_l.constprop.0+0x7c>
 8009d54:	782c      	ldrb	r4, [r5, #0]
 8009d56:	2601      	movs	r6, #1
 8009d58:	1c85      	adds	r5, r0, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d057      	beq.n	8009e0e <_strtoul_l.constprop.0+0xd6>
 8009d5e:	2b10      	cmp	r3, #16
 8009d60:	d109      	bne.n	8009d76 <_strtoul_l.constprop.0+0x3e>
 8009d62:	2c30      	cmp	r4, #48	; 0x30
 8009d64:	d107      	bne.n	8009d76 <_strtoul_l.constprop.0+0x3e>
 8009d66:	7828      	ldrb	r0, [r5, #0]
 8009d68:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009d6c:	2858      	cmp	r0, #88	; 0x58
 8009d6e:	d149      	bne.n	8009e04 <_strtoul_l.constprop.0+0xcc>
 8009d70:	786c      	ldrb	r4, [r5, #1]
 8009d72:	2310      	movs	r3, #16
 8009d74:	3502      	adds	r5, #2
 8009d76:	f04f 38ff 	mov.w	r8, #4294967295
 8009d7a:	2700      	movs	r7, #0
 8009d7c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009d80:	fb03 f908 	mul.w	r9, r3, r8
 8009d84:	ea6f 0909 	mvn.w	r9, r9
 8009d88:	4638      	mov	r0, r7
 8009d8a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009d8e:	f1bc 0f09 	cmp.w	ip, #9
 8009d92:	d814      	bhi.n	8009dbe <_strtoul_l.constprop.0+0x86>
 8009d94:	4664      	mov	r4, ip
 8009d96:	42a3      	cmp	r3, r4
 8009d98:	dd22      	ble.n	8009de0 <_strtoul_l.constprop.0+0xa8>
 8009d9a:	2f00      	cmp	r7, #0
 8009d9c:	db1d      	blt.n	8009dda <_strtoul_l.constprop.0+0xa2>
 8009d9e:	4580      	cmp	r8, r0
 8009da0:	d31b      	bcc.n	8009dda <_strtoul_l.constprop.0+0xa2>
 8009da2:	d101      	bne.n	8009da8 <_strtoul_l.constprop.0+0x70>
 8009da4:	45a1      	cmp	r9, r4
 8009da6:	db18      	blt.n	8009dda <_strtoul_l.constprop.0+0xa2>
 8009da8:	fb00 4003 	mla	r0, r0, r3, r4
 8009dac:	2701      	movs	r7, #1
 8009dae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009db2:	e7ea      	b.n	8009d8a <_strtoul_l.constprop.0+0x52>
 8009db4:	2c2b      	cmp	r4, #43	; 0x2b
 8009db6:	bf04      	itt	eq
 8009db8:	782c      	ldrbeq	r4, [r5, #0]
 8009dba:	1c85      	addeq	r5, r0, #2
 8009dbc:	e7cd      	b.n	8009d5a <_strtoul_l.constprop.0+0x22>
 8009dbe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009dc2:	f1bc 0f19 	cmp.w	ip, #25
 8009dc6:	d801      	bhi.n	8009dcc <_strtoul_l.constprop.0+0x94>
 8009dc8:	3c37      	subs	r4, #55	; 0x37
 8009dca:	e7e4      	b.n	8009d96 <_strtoul_l.constprop.0+0x5e>
 8009dcc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009dd0:	f1bc 0f19 	cmp.w	ip, #25
 8009dd4:	d804      	bhi.n	8009de0 <_strtoul_l.constprop.0+0xa8>
 8009dd6:	3c57      	subs	r4, #87	; 0x57
 8009dd8:	e7dd      	b.n	8009d96 <_strtoul_l.constprop.0+0x5e>
 8009dda:	f04f 37ff 	mov.w	r7, #4294967295
 8009dde:	e7e6      	b.n	8009dae <_strtoul_l.constprop.0+0x76>
 8009de0:	2f00      	cmp	r7, #0
 8009de2:	da07      	bge.n	8009df4 <_strtoul_l.constprop.0+0xbc>
 8009de4:	2322      	movs	r3, #34	; 0x22
 8009de6:	f8ce 3000 	str.w	r3, [lr]
 8009dea:	f04f 30ff 	mov.w	r0, #4294967295
 8009dee:	b932      	cbnz	r2, 8009dfe <_strtoul_l.constprop.0+0xc6>
 8009df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009df4:	b106      	cbz	r6, 8009df8 <_strtoul_l.constprop.0+0xc0>
 8009df6:	4240      	negs	r0, r0
 8009df8:	2a00      	cmp	r2, #0
 8009dfa:	d0f9      	beq.n	8009df0 <_strtoul_l.constprop.0+0xb8>
 8009dfc:	b107      	cbz	r7, 8009e00 <_strtoul_l.constprop.0+0xc8>
 8009dfe:	1e69      	subs	r1, r5, #1
 8009e00:	6011      	str	r1, [r2, #0]
 8009e02:	e7f5      	b.n	8009df0 <_strtoul_l.constprop.0+0xb8>
 8009e04:	2430      	movs	r4, #48	; 0x30
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1b5      	bne.n	8009d76 <_strtoul_l.constprop.0+0x3e>
 8009e0a:	2308      	movs	r3, #8
 8009e0c:	e7b3      	b.n	8009d76 <_strtoul_l.constprop.0+0x3e>
 8009e0e:	2c30      	cmp	r4, #48	; 0x30
 8009e10:	d0a9      	beq.n	8009d66 <_strtoul_l.constprop.0+0x2e>
 8009e12:	230a      	movs	r3, #10
 8009e14:	e7af      	b.n	8009d76 <_strtoul_l.constprop.0+0x3e>
 8009e16:	bf00      	nop
 8009e18:	0800abb5 	.word	0x0800abb5

08009e1c <_strtoul_r>:
 8009e1c:	f7ff bf8c 	b.w	8009d38 <_strtoul_l.constprop.0>

08009e20 <__submore>:
 8009e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e24:	460c      	mov	r4, r1
 8009e26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e2c:	4299      	cmp	r1, r3
 8009e2e:	d11d      	bne.n	8009e6c <__submore+0x4c>
 8009e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e34:	f000 f8b6 	bl	8009fa4 <_malloc_r>
 8009e38:	b918      	cbnz	r0, 8009e42 <__submore+0x22>
 8009e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e46:	63a3      	str	r3, [r4, #56]	; 0x38
 8009e48:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009e4c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e4e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009e52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009e56:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009e5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009e5e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009e62:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009e66:	6020      	str	r0, [r4, #0]
 8009e68:	2000      	movs	r0, #0
 8009e6a:	e7e8      	b.n	8009e3e <__submore+0x1e>
 8009e6c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009e6e:	0077      	lsls	r7, r6, #1
 8009e70:	463a      	mov	r2, r7
 8009e72:	f000 f90b 	bl	800a08c <_realloc_r>
 8009e76:	4605      	mov	r5, r0
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d0de      	beq.n	8009e3a <__submore+0x1a>
 8009e7c:	eb00 0806 	add.w	r8, r0, r6
 8009e80:	4601      	mov	r1, r0
 8009e82:	4632      	mov	r2, r6
 8009e84:	4640      	mov	r0, r8
 8009e86:	f7ff f823 	bl	8008ed0 <memcpy>
 8009e8a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009e8e:	f8c4 8000 	str.w	r8, [r4]
 8009e92:	e7e9      	b.n	8009e68 <__submore+0x48>

08009e94 <__retarget_lock_acquire_recursive>:
 8009e94:	4770      	bx	lr

08009e96 <__retarget_lock_release_recursive>:
 8009e96:	4770      	bx	lr

08009e98 <memmove>:
 8009e98:	4288      	cmp	r0, r1
 8009e9a:	b510      	push	{r4, lr}
 8009e9c:	eb01 0402 	add.w	r4, r1, r2
 8009ea0:	d902      	bls.n	8009ea8 <memmove+0x10>
 8009ea2:	4284      	cmp	r4, r0
 8009ea4:	4623      	mov	r3, r4
 8009ea6:	d807      	bhi.n	8009eb8 <memmove+0x20>
 8009ea8:	1e43      	subs	r3, r0, #1
 8009eaa:	42a1      	cmp	r1, r4
 8009eac:	d008      	beq.n	8009ec0 <memmove+0x28>
 8009eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009eb6:	e7f8      	b.n	8009eaa <memmove+0x12>
 8009eb8:	4402      	add	r2, r0
 8009eba:	4601      	mov	r1, r0
 8009ebc:	428a      	cmp	r2, r1
 8009ebe:	d100      	bne.n	8009ec2 <memmove+0x2a>
 8009ec0:	bd10      	pop	{r4, pc}
 8009ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eca:	e7f7      	b.n	8009ebc <memmove+0x24>

08009ecc <_free_r>:
 8009ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ece:	2900      	cmp	r1, #0
 8009ed0:	d044      	beq.n	8009f5c <_free_r+0x90>
 8009ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ed6:	9001      	str	r0, [sp, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f1a1 0404 	sub.w	r4, r1, #4
 8009ede:	bfb8      	it	lt
 8009ee0:	18e4      	addlt	r4, r4, r3
 8009ee2:	f000 f913 	bl	800a10c <__malloc_lock>
 8009ee6:	4a1e      	ldr	r2, [pc, #120]	; (8009f60 <_free_r+0x94>)
 8009ee8:	9801      	ldr	r0, [sp, #4]
 8009eea:	6813      	ldr	r3, [r2, #0]
 8009eec:	b933      	cbnz	r3, 8009efc <_free_r+0x30>
 8009eee:	6063      	str	r3, [r4, #4]
 8009ef0:	6014      	str	r4, [r2, #0]
 8009ef2:	b003      	add	sp, #12
 8009ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ef8:	f000 b90e 	b.w	800a118 <__malloc_unlock>
 8009efc:	42a3      	cmp	r3, r4
 8009efe:	d908      	bls.n	8009f12 <_free_r+0x46>
 8009f00:	6825      	ldr	r5, [r4, #0]
 8009f02:	1961      	adds	r1, r4, r5
 8009f04:	428b      	cmp	r3, r1
 8009f06:	bf01      	itttt	eq
 8009f08:	6819      	ldreq	r1, [r3, #0]
 8009f0a:	685b      	ldreq	r3, [r3, #4]
 8009f0c:	1949      	addeq	r1, r1, r5
 8009f0e:	6021      	streq	r1, [r4, #0]
 8009f10:	e7ed      	b.n	8009eee <_free_r+0x22>
 8009f12:	461a      	mov	r2, r3
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	b10b      	cbz	r3, 8009f1c <_free_r+0x50>
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	d9fa      	bls.n	8009f12 <_free_r+0x46>
 8009f1c:	6811      	ldr	r1, [r2, #0]
 8009f1e:	1855      	adds	r5, r2, r1
 8009f20:	42a5      	cmp	r5, r4
 8009f22:	d10b      	bne.n	8009f3c <_free_r+0x70>
 8009f24:	6824      	ldr	r4, [r4, #0]
 8009f26:	4421      	add	r1, r4
 8009f28:	1854      	adds	r4, r2, r1
 8009f2a:	42a3      	cmp	r3, r4
 8009f2c:	6011      	str	r1, [r2, #0]
 8009f2e:	d1e0      	bne.n	8009ef2 <_free_r+0x26>
 8009f30:	681c      	ldr	r4, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	6053      	str	r3, [r2, #4]
 8009f36:	4421      	add	r1, r4
 8009f38:	6011      	str	r1, [r2, #0]
 8009f3a:	e7da      	b.n	8009ef2 <_free_r+0x26>
 8009f3c:	d902      	bls.n	8009f44 <_free_r+0x78>
 8009f3e:	230c      	movs	r3, #12
 8009f40:	6003      	str	r3, [r0, #0]
 8009f42:	e7d6      	b.n	8009ef2 <_free_r+0x26>
 8009f44:	6825      	ldr	r5, [r4, #0]
 8009f46:	1961      	adds	r1, r4, r5
 8009f48:	428b      	cmp	r3, r1
 8009f4a:	bf04      	itt	eq
 8009f4c:	6819      	ldreq	r1, [r3, #0]
 8009f4e:	685b      	ldreq	r3, [r3, #4]
 8009f50:	6063      	str	r3, [r4, #4]
 8009f52:	bf04      	itt	eq
 8009f54:	1949      	addeq	r1, r1, r5
 8009f56:	6021      	streq	r1, [r4, #0]
 8009f58:	6054      	str	r4, [r2, #4]
 8009f5a:	e7ca      	b.n	8009ef2 <_free_r+0x26>
 8009f5c:	b003      	add	sp, #12
 8009f5e:	bd30      	pop	{r4, r5, pc}
 8009f60:	2000670c 	.word	0x2000670c

08009f64 <sbrk_aligned>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	4e0e      	ldr	r6, [pc, #56]	; (8009fa0 <sbrk_aligned+0x3c>)
 8009f68:	460c      	mov	r4, r1
 8009f6a:	6831      	ldr	r1, [r6, #0]
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	b911      	cbnz	r1, 8009f76 <sbrk_aligned+0x12>
 8009f70:	f000 f8bc 	bl	800a0ec <_sbrk_r>
 8009f74:	6030      	str	r0, [r6, #0]
 8009f76:	4621      	mov	r1, r4
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f000 f8b7 	bl	800a0ec <_sbrk_r>
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	d00a      	beq.n	8009f98 <sbrk_aligned+0x34>
 8009f82:	1cc4      	adds	r4, r0, #3
 8009f84:	f024 0403 	bic.w	r4, r4, #3
 8009f88:	42a0      	cmp	r0, r4
 8009f8a:	d007      	beq.n	8009f9c <sbrk_aligned+0x38>
 8009f8c:	1a21      	subs	r1, r4, r0
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 f8ac 	bl	800a0ec <_sbrk_r>
 8009f94:	3001      	adds	r0, #1
 8009f96:	d101      	bne.n	8009f9c <sbrk_aligned+0x38>
 8009f98:	f04f 34ff 	mov.w	r4, #4294967295
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	20006710 	.word	0x20006710

08009fa4 <_malloc_r>:
 8009fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa8:	1ccd      	adds	r5, r1, #3
 8009faa:	f025 0503 	bic.w	r5, r5, #3
 8009fae:	3508      	adds	r5, #8
 8009fb0:	2d0c      	cmp	r5, #12
 8009fb2:	bf38      	it	cc
 8009fb4:	250c      	movcc	r5, #12
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	4607      	mov	r7, r0
 8009fba:	db01      	blt.n	8009fc0 <_malloc_r+0x1c>
 8009fbc:	42a9      	cmp	r1, r5
 8009fbe:	d905      	bls.n	8009fcc <_malloc_r+0x28>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	2600      	movs	r6, #0
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fcc:	4e2e      	ldr	r6, [pc, #184]	; (800a088 <_malloc_r+0xe4>)
 8009fce:	f000 f89d 	bl	800a10c <__malloc_lock>
 8009fd2:	6833      	ldr	r3, [r6, #0]
 8009fd4:	461c      	mov	r4, r3
 8009fd6:	bb34      	cbnz	r4, 800a026 <_malloc_r+0x82>
 8009fd8:	4629      	mov	r1, r5
 8009fda:	4638      	mov	r0, r7
 8009fdc:	f7ff ffc2 	bl	8009f64 <sbrk_aligned>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	d14d      	bne.n	800a082 <_malloc_r+0xde>
 8009fe6:	6834      	ldr	r4, [r6, #0]
 8009fe8:	4626      	mov	r6, r4
 8009fea:	2e00      	cmp	r6, #0
 8009fec:	d140      	bne.n	800a070 <_malloc_r+0xcc>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	eb04 0803 	add.w	r8, r4, r3
 8009ff8:	f000 f878 	bl	800a0ec <_sbrk_r>
 8009ffc:	4580      	cmp	r8, r0
 8009ffe:	d13a      	bne.n	800a076 <_malloc_r+0xd2>
 800a000:	6821      	ldr	r1, [r4, #0]
 800a002:	3503      	adds	r5, #3
 800a004:	1a6d      	subs	r5, r5, r1
 800a006:	f025 0503 	bic.w	r5, r5, #3
 800a00a:	3508      	adds	r5, #8
 800a00c:	2d0c      	cmp	r5, #12
 800a00e:	bf38      	it	cc
 800a010:	250c      	movcc	r5, #12
 800a012:	4629      	mov	r1, r5
 800a014:	4638      	mov	r0, r7
 800a016:	f7ff ffa5 	bl	8009f64 <sbrk_aligned>
 800a01a:	3001      	adds	r0, #1
 800a01c:	d02b      	beq.n	800a076 <_malloc_r+0xd2>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	442b      	add	r3, r5
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	e00e      	b.n	800a044 <_malloc_r+0xa0>
 800a026:	6822      	ldr	r2, [r4, #0]
 800a028:	1b52      	subs	r2, r2, r5
 800a02a:	d41e      	bmi.n	800a06a <_malloc_r+0xc6>
 800a02c:	2a0b      	cmp	r2, #11
 800a02e:	d916      	bls.n	800a05e <_malloc_r+0xba>
 800a030:	1961      	adds	r1, r4, r5
 800a032:	42a3      	cmp	r3, r4
 800a034:	6025      	str	r5, [r4, #0]
 800a036:	bf18      	it	ne
 800a038:	6059      	strne	r1, [r3, #4]
 800a03a:	6863      	ldr	r3, [r4, #4]
 800a03c:	bf08      	it	eq
 800a03e:	6031      	streq	r1, [r6, #0]
 800a040:	5162      	str	r2, [r4, r5]
 800a042:	604b      	str	r3, [r1, #4]
 800a044:	4638      	mov	r0, r7
 800a046:	f104 060b 	add.w	r6, r4, #11
 800a04a:	f000 f865 	bl	800a118 <__malloc_unlock>
 800a04e:	f026 0607 	bic.w	r6, r6, #7
 800a052:	1d23      	adds	r3, r4, #4
 800a054:	1af2      	subs	r2, r6, r3
 800a056:	d0b6      	beq.n	8009fc6 <_malloc_r+0x22>
 800a058:	1b9b      	subs	r3, r3, r6
 800a05a:	50a3      	str	r3, [r4, r2]
 800a05c:	e7b3      	b.n	8009fc6 <_malloc_r+0x22>
 800a05e:	6862      	ldr	r2, [r4, #4]
 800a060:	42a3      	cmp	r3, r4
 800a062:	bf0c      	ite	eq
 800a064:	6032      	streq	r2, [r6, #0]
 800a066:	605a      	strne	r2, [r3, #4]
 800a068:	e7ec      	b.n	800a044 <_malloc_r+0xa0>
 800a06a:	4623      	mov	r3, r4
 800a06c:	6864      	ldr	r4, [r4, #4]
 800a06e:	e7b2      	b.n	8009fd6 <_malloc_r+0x32>
 800a070:	4634      	mov	r4, r6
 800a072:	6876      	ldr	r6, [r6, #4]
 800a074:	e7b9      	b.n	8009fea <_malloc_r+0x46>
 800a076:	230c      	movs	r3, #12
 800a078:	603b      	str	r3, [r7, #0]
 800a07a:	4638      	mov	r0, r7
 800a07c:	f000 f84c 	bl	800a118 <__malloc_unlock>
 800a080:	e7a1      	b.n	8009fc6 <_malloc_r+0x22>
 800a082:	6025      	str	r5, [r4, #0]
 800a084:	e7de      	b.n	800a044 <_malloc_r+0xa0>
 800a086:	bf00      	nop
 800a088:	2000670c 	.word	0x2000670c

0800a08c <_realloc_r>:
 800a08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a090:	4680      	mov	r8, r0
 800a092:	4614      	mov	r4, r2
 800a094:	460e      	mov	r6, r1
 800a096:	b921      	cbnz	r1, 800a0a2 <_realloc_r+0x16>
 800a098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a09c:	4611      	mov	r1, r2
 800a09e:	f7ff bf81 	b.w	8009fa4 <_malloc_r>
 800a0a2:	b92a      	cbnz	r2, 800a0b0 <_realloc_r+0x24>
 800a0a4:	f7ff ff12 	bl	8009ecc <_free_r>
 800a0a8:	4625      	mov	r5, r4
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b0:	f000 f838 	bl	800a124 <_malloc_usable_size_r>
 800a0b4:	4284      	cmp	r4, r0
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	d802      	bhi.n	800a0c0 <_realloc_r+0x34>
 800a0ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0be:	d812      	bhi.n	800a0e6 <_realloc_r+0x5a>
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	f7ff ff6e 	bl	8009fa4 <_malloc_r>
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d0ed      	beq.n	800a0aa <_realloc_r+0x1e>
 800a0ce:	42bc      	cmp	r4, r7
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	4631      	mov	r1, r6
 800a0d4:	bf28      	it	cs
 800a0d6:	463a      	movcs	r2, r7
 800a0d8:	f7fe fefa 	bl	8008ed0 <memcpy>
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4640      	mov	r0, r8
 800a0e0:	f7ff fef4 	bl	8009ecc <_free_r>
 800a0e4:	e7e1      	b.n	800a0aa <_realloc_r+0x1e>
 800a0e6:	4635      	mov	r5, r6
 800a0e8:	e7df      	b.n	800a0aa <_realloc_r+0x1e>
	...

0800a0ec <_sbrk_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	4d06      	ldr	r5, [pc, #24]	; (800a108 <_sbrk_r+0x1c>)
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	602b      	str	r3, [r5, #0]
 800a0f8:	f7f8 fe2a 	bl	8002d50 <_sbrk>
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	d102      	bne.n	800a106 <_sbrk_r+0x1a>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	b103      	cbz	r3, 800a106 <_sbrk_r+0x1a>
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	bd38      	pop	{r3, r4, r5, pc}
 800a108:	20006704 	.word	0x20006704

0800a10c <__malloc_lock>:
 800a10c:	4801      	ldr	r0, [pc, #4]	; (800a114 <__malloc_lock+0x8>)
 800a10e:	f7ff bec1 	b.w	8009e94 <__retarget_lock_acquire_recursive>
 800a112:	bf00      	nop
 800a114:	20006708 	.word	0x20006708

0800a118 <__malloc_unlock>:
 800a118:	4801      	ldr	r0, [pc, #4]	; (800a120 <__malloc_unlock+0x8>)
 800a11a:	f7ff bebc 	b.w	8009e96 <__retarget_lock_release_recursive>
 800a11e:	bf00      	nop
 800a120:	20006708 	.word	0x20006708

0800a124 <_malloc_usable_size_r>:
 800a124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a128:	1f18      	subs	r0, r3, #4
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	bfbc      	itt	lt
 800a12e:	580b      	ldrlt	r3, [r1, r0]
 800a130:	18c0      	addlt	r0, r0, r3
 800a132:	4770      	bx	lr

0800a134 <_init>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	bf00      	nop
 800a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13a:	bc08      	pop	{r3}
 800a13c:	469e      	mov	lr, r3
 800a13e:	4770      	bx	lr

0800a140 <_fini>:
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	bf00      	nop
 800a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a146:	bc08      	pop	{r3}
 800a148:	469e      	mov	lr, r3
 800a14a:	4770      	bx	lr
