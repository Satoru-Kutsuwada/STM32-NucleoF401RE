
TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000804c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  080081ec  080081ec  000181ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008704  08008704  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008704  08008704  00018704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800870c  0800870c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800870c  0800870c  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006484  20000074  08008788  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200064f8  08008788  000264f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6eb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee4  00000000  00000000  0003c78f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  00040678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d8  00000000  00000000  00041dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019465  00000000  00000000  00043398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7fb  00000000  00000000  0005c7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e6a7  00000000  00000000  00076ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011569f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069a0  00000000  00000000  001156f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081d4 	.word	0x080081d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080081d4 	.word	0x080081d4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <debu_main>:

//=============================================================================
//
//=============================================================================
void debu_main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	//char ch;

	if(read_line_streem() == INPUT_DATA_FIX){
 80005b8:	f000 fa60 	bl	8000a7c <read_line_streem>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d125      	bne.n	800060e <debu_main+0x5a>

		input_char_step = INPUT_INIT;
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <debu_main+0x60>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

		SKprintf("debu_main:001\r\n");
 80005c8:	4813      	ldr	r0, [pc, #76]	; (8000618 <debu_main+0x64>)
 80005ca:	f000 fc09 	bl	8000de0 <SKprintf>

		switch(dev_menue_type){
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <debu_main+0x68>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d00c      	beq.n	80005f0 <debu_main+0x3c>
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	dc0d      	bgt.n	80005f6 <debu_main+0x42>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <debu_main+0x30>
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d003      	beq.n	80005ea <debu_main+0x36>
			break;
		case DEB_RS485_MENUE:
			DBmanue_rs485();
			break;
		default:
			break;
 80005e2:	e008      	b.n	80005f6 <debu_main+0x42>
			DBmanue_prompt();
 80005e4:	f000 f854 	bl	8000690 <DBmanue_prompt>
			break;
 80005e8:	e006      	b.n	80005f8 <debu_main+0x44>
			DBmanue_log();
 80005ea:	f000 f86f 	bl	80006cc <DBmanue_log>
			break;
 80005ee:	e003      	b.n	80005f8 <debu_main+0x44>
			DBmanue_rs485();
 80005f0:	f000 f8de 	bl	80007b0 <DBmanue_rs485>
			break;
 80005f4:	e000      	b.n	80005f8 <debu_main+0x44>
			break;
 80005f6:	bf00      	nop
		}

		SKprintf("debu_main:002\r\n");
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <debu_main+0x6c>)
 80005fa:	f000 fbf1 	bl	8000de0 <SKprintf>
        // メニュを表示する
        DispMenue(dev_menue_type);
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <debu_main+0x68>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f810 	bl	8000628 <DispMenue>
        SKprintf("debu_main:003\r\n");
 8000608:	4806      	ldr	r0, [pc, #24]	; (8000624 <debu_main+0x70>)
 800060a:	f000 fbe9 	bl	8000de0 <SKprintf>

	}
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000094 	.word	0x20000094
 8000618:	080081ec 	.word	0x080081ec
 800061c:	20000118 	.word	0x20000118
 8000620:	080081fc 	.word	0x080081fc
 8000624:	0800820c 	.word	0x0800820c

08000628 <DispMenue>:
//==============================================================================
//
//==============================================================================
void DispMenue(uint8_t type)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    if( type==DEB_PROMPT_MODE ){
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d103      	bne.n	8000640 <DispMenue+0x18>
        SKprintf("ST> ");
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <DispMenue+0x5c>)
 800063a:	f000 fbd1 	bl	8000de0 <SKprintf>
    else{
        for( i=0; i<MenueList[type-1].clumn; i++){
            SKprintf("%s\r\n", &MenueList[type-1].pt[i].name[0]);
        }
    }
}
 800063e:	e01d      	b.n	800067c <DispMenue+0x54>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000640:	2300      	movs	r3, #0
 8000642:	73fb      	strb	r3, [r7, #15]
 8000644:	e011      	b.n	800066a <DispMenue+0x42>
            SKprintf("%s\r\n", &MenueList[type-1].pt[i].name[0]);
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	3b01      	subs	r3, #1
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <DispMenue+0x60>)
 800064c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000650:	7bfa      	ldrb	r2, [r7, #15]
 8000652:	4613      	mov	r3, r2
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	440b      	add	r3, r1
 800065c:	4619      	mov	r1, r3
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <DispMenue+0x64>)
 8000660:	f000 fbbe 	bl	8000de0 <SKprintf>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	3301      	adds	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	3b01      	subs	r3, #1
 800066e:	4a06      	ldr	r2, [pc, #24]	; (8000688 <DispMenue+0x60>)
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	4413      	add	r3, r2
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	7bfa      	ldrb	r2, [r7, #15]
 8000678:	429a      	cmp	r2, r3
 800067a:	d3e4      	bcc.n	8000646 <DispMenue+0x1e>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0800821c 	.word	0x0800821c
 8000688:	080084e4 	.word	0x080084e4
 800068c:	08008224 	.word	0x08008224

08000690 <DBmanue_prompt>:
//=============================================================================
//
//=============================================================================
void DBmanue_prompt(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    switch( input2menu() ){
 8000694:	f000 f8ee 	bl	8000874 <input2menu>
 8000698:	4603      	mov	r3, r0
 800069a:	2b02      	cmp	r3, #2
 800069c:	d00d      	beq.n	80006ba <DBmanue_prompt+0x2a>
 800069e:	2b02      	cmp	r3, #2
 80006a0:	dc0f      	bgt.n	80006c2 <DBmanue_prompt+0x32>
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <DBmanue_prompt+0x1c>
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d003      	beq.n	80006b2 <DBmanue_prompt+0x22>
        break;
    case CMD_RS485:
        dev_menue_type = DEB_RS485_MENUE;
        break;
    default:
        break;
 80006aa:	e00a      	b.n	80006c2 <DBmanue_prompt+0x32>
    	rtc_display();
 80006ac:	f000 fc0c 	bl	8000ec8 <rtc_display>
        break;
 80006b0:	e008      	b.n	80006c4 <DBmanue_prompt+0x34>
        dev_menue_type = DEB_LOG_MENUE;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <DBmanue_prompt+0x38>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
        break;
 80006b8:	e004      	b.n	80006c4 <DBmanue_prompt+0x34>
        dev_menue_type = DEB_RS485_MENUE;
 80006ba:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <DBmanue_prompt+0x38>)
 80006bc:	2202      	movs	r2, #2
 80006be:	701a      	strb	r2, [r3, #0]
        break;
 80006c0:	e000      	b.n	80006c4 <DBmanue_prompt+0x34>
        break;
 80006c2:	bf00      	nop
    }
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000118 	.word	0x20000118

080006cc <DBmanue_log>:

//=============================================================================
//
//=============================================================================
void DBmanue_log(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80006d0:	4b35      	ldr	r3, [pc, #212]	; (80007a8 <DBmanue_log+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b52      	cmp	r3, #82	; 0x52
 80006d6:	dc4b      	bgt.n	8000770 <DBmanue_log+0xa4>
 80006d8:	2b31      	cmp	r3, #49	; 0x31
 80006da:	db61      	blt.n	80007a0 <DBmanue_log+0xd4>
 80006dc:	3b31      	subs	r3, #49	; 0x31
 80006de:	2b21      	cmp	r3, #33	; 0x21
 80006e0:	d85e      	bhi.n	80007a0 <DBmanue_log+0xd4>
 80006e2:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <DBmanue_log+0x1c>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	08000777 	.word	0x08000777
 80006ec:	0800077d 	.word	0x0800077d
 80006f0:	08000783 	.word	0x08000783
 80006f4:	0800078b 	.word	0x0800078b
 80006f8:	08000793 	.word	0x08000793
 80006fc:	080007a1 	.word	0x080007a1
 8000700:	080007a1 	.word	0x080007a1
 8000704:	080007a1 	.word	0x080007a1
 8000708:	080007a1 	.word	0x080007a1
 800070c:	080007a1 	.word	0x080007a1
 8000710:	080007a1 	.word	0x080007a1
 8000714:	080007a1 	.word	0x080007a1
 8000718:	080007a1 	.word	0x080007a1
 800071c:	080007a1 	.word	0x080007a1
 8000720:	080007a1 	.word	0x080007a1
 8000724:	080007a1 	.word	0x080007a1
 8000728:	080007a1 	.word	0x080007a1
 800072c:	080007a1 	.word	0x080007a1
 8000730:	080007a1 	.word	0x080007a1
 8000734:	080007a1 	.word	0x080007a1
 8000738:	080007a1 	.word	0x080007a1
 800073c:	080007a1 	.word	0x080007a1
 8000740:	080007a1 	.word	0x080007a1
 8000744:	080007a1 	.word	0x080007a1
 8000748:	080007a1 	.word	0x080007a1
 800074c:	080007a1 	.word	0x080007a1
 8000750:	080007a1 	.word	0x080007a1
 8000754:	080007a1 	.word	0x080007a1
 8000758:	080007a1 	.word	0x080007a1
 800075c:	080007a1 	.word	0x080007a1
 8000760:	080007a1 	.word	0x080007a1
 8000764:	080007a1 	.word	0x080007a1
 8000768:	080007a1 	.word	0x080007a1
 800076c:	0800079b 	.word	0x0800079b
 8000770:	2b72      	cmp	r3, #114	; 0x72
 8000772:	d012      	beq.n	800079a <DBmanue_log+0xce>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000774:	e014      	b.n	80007a0 <DBmanue_log+0xd4>
		LogInfo_display();
 8000776:	f000 fa77 	bl	8000c68 <LogInfo_display>
		break;
 800077a:	e012      	b.n	80007a2 <DBmanue_log+0xd6>
		LogInfo_clear();
 800077c:	f000 fb1c 	bl	8000db8 <LogInfo_clear>
		break;
 8000780:	e00f      	b.n	80007a2 <DBmanue_log+0xd6>
		Set_logflg(LF_NON_STOP);
 8000782:	2000      	movs	r0, #0
 8000784:	f000 fa56 	bl	8000c34 <Set_logflg>
		break;
 8000788:	e00b      	b.n	80007a2 <DBmanue_log+0xd6>
		Set_logflg(LF_IMMMEDIATE_STOP);
 800078a:	2001      	movs	r0, #1
 800078c:	f000 fa52 	bl	8000c34 <Set_logflg>
		break;
 8000790:	e007      	b.n	80007a2 <DBmanue_log+0xd6>
		Set_logflg(LF_MAX_DATA_STOP);
 8000792:	2002      	movs	r0, #2
 8000794:	f000 fa4e 	bl	8000c34 <Set_logflg>
		break;
 8000798:	e003      	b.n	80007a2 <DBmanue_log+0xd6>
		dev_menue_type = DEB_PROMPT_MODE;
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <DBmanue_log+0xe0>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
		break;
 80007a0:	bf00      	nop
	}
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000098 	.word	0x20000098
 80007ac:	20000118 	.word	0x20000118

080007b0 <DBmanue_rs485>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80007b4:	4b2d      	ldr	r3, [pc, #180]	; (800086c <DBmanue_rs485+0xbc>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b52      	cmp	r3, #82	; 0x52
 80007ba:	dc4b      	bgt.n	8000854 <DBmanue_rs485+0xa4>
 80007bc:	2b31      	cmp	r3, #49	; 0x31
 80007be:	db4f      	blt.n	8000860 <DBmanue_rs485+0xb0>
 80007c0:	3b31      	subs	r3, #49	; 0x31
 80007c2:	2b21      	cmp	r3, #33	; 0x21
 80007c4:	d84c      	bhi.n	8000860 <DBmanue_rs485+0xb0>
 80007c6:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <DBmanue_rs485+0x1c>)
 80007c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007cc:	08000861 	.word	0x08000861
 80007d0:	08000861 	.word	0x08000861
 80007d4:	08000861 	.word	0x08000861
 80007d8:	08000861 	.word	0x08000861
 80007dc:	08000861 	.word	0x08000861
 80007e0:	08000861 	.word	0x08000861
 80007e4:	08000861 	.word	0x08000861
 80007e8:	08000861 	.word	0x08000861
 80007ec:	08000861 	.word	0x08000861
 80007f0:	08000861 	.word	0x08000861
 80007f4:	08000861 	.word	0x08000861
 80007f8:	08000861 	.word	0x08000861
 80007fc:	08000861 	.word	0x08000861
 8000800:	08000861 	.word	0x08000861
 8000804:	08000861 	.word	0x08000861
 8000808:	08000861 	.word	0x08000861
 800080c:	08000861 	.word	0x08000861
 8000810:	08000861 	.word	0x08000861
 8000814:	08000861 	.word	0x08000861
 8000818:	08000861 	.word	0x08000861
 800081c:	08000861 	.word	0x08000861
 8000820:	08000861 	.word	0x08000861
 8000824:	08000861 	.word	0x08000861
 8000828:	08000861 	.word	0x08000861
 800082c:	08000861 	.word	0x08000861
 8000830:	08000861 	.word	0x08000861
 8000834:	08000861 	.word	0x08000861
 8000838:	08000861 	.word	0x08000861
 800083c:	08000861 	.word	0x08000861
 8000840:	08000861 	.word	0x08000861
 8000844:	08000861 	.word	0x08000861
 8000848:	08000861 	.word	0x08000861
 800084c:	08000861 	.word	0x08000861
 8000850:	0800085b 	.word	0x0800085b
 8000854:	2b72      	cmp	r3, #114	; 0x72
 8000856:	d000      	beq.n	800085a <DBmanue_rs485+0xaa>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000858:	e002      	b.n	8000860 <DBmanue_rs485+0xb0>
		dev_menue_type = DEB_PROMPT_MODE;
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <DBmanue_rs485+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
		break;
 8000860:	bf00      	nop
	}
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	20000098 	.word	0x20000098
 8000870:	20000118 	.word	0x20000118

08000874 <input2menu>:
//==============================================================================
//
//==============================================================================

COMMAND_MENUE input2menu(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
     uint16_t i = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	80fb      	strh	r3, [r7, #6]
    COMMAND_MENUE rtn = CMD_MAX;
 800087e:	2303      	movs	r3, #3
 8000880:	717b      	strb	r3, [r7, #5]

        while( com_list[i].pt != CMD_MAX ){
 8000882:	e01d      	b.n	80008c0 <input2menu+0x4c>
            if (strcmp(&input_string.main[0], &com_list[i].command[0]) == 0){
 8000884:	88fa      	ldrh	r2, [r7, #6]
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4413      	add	r3, r2
 8000890:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <input2menu+0x6c>)
 8000892:	4413      	add	r3, r2
 8000894:	3301      	adds	r3, #1
 8000896:	4619      	mov	r1, r3
 8000898:	4812      	ldr	r0, [pc, #72]	; (80008e4 <input2menu+0x70>)
 800089a:	f7ff fca1 	bl	80001e0 <strcmp>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10a      	bne.n	80008ba <input2menu+0x46>
                rtn = com_list[i].pt;
 80008a4:	88fa      	ldrh	r2, [r7, #6]
 80008a6:	490e      	ldr	r1, [pc, #56]	; (80008e0 <input2menu+0x6c>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	4413      	add	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	717b      	strb	r3, [r7, #5]
                break;
 80008b8:	e00d      	b.n	80008d6 <input2menu+0x62>
            }
            i++;
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	3301      	adds	r3, #1
 80008be:	80fb      	strh	r3, [r7, #6]
        while( com_list[i].pt != CMD_MAX ){
 80008c0:	88fa      	ldrh	r2, [r7, #6]
 80008c2:	4907      	ldr	r1, [pc, #28]	; (80008e0 <input2menu+0x6c>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	440b      	add	r3, r1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d1d6      	bne.n	8000884 <input2menu+0x10>
        }

    return rtn;
 80008d6:	797b      	ldrb	r3, [r7, #5]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	0800836c 	.word	0x0800836c
 80008e4:	20000098 	.word	0x20000098

080008e8 <command_split>:
//==============================================================================
//
//==============================================================================
void command_split(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
	int		i;
	int		j;
	char	moji = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	71fb      	strb	r3, [r7, #7]
	char 	*ptr;

	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	e008      	b.n	800090a <command_split+0x22>
		input_string.sub_ptr[j] = 0;
 80008f8:	4a5d      	ldr	r2, [pc, #372]	; (8000a70 <command_split+0x188>)
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3308      	adds	r3, #8
 80008fe:	2100      	movs	r1, #0
 8000900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3301      	adds	r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b0e      	cmp	r3, #14
 800090e:	ddf3      	ble.n	80008f8 <command_split+0x10>
	}

	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	e027      	b.n	8000966 <command_split+0x7e>
		switch(input_string.main[i]){
 8000916:	4a56      	ldr	r2, [pc, #344]	; (8000a70 <command_split+0x188>)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b2c      	cmp	r3, #44	; 0x2c
 8000920:	d005      	beq.n	800092e <command_split+0x46>
 8000922:	2b2c      	cmp	r3, #44	; 0x2c
 8000924:	dc0b      	bgt.n	800093e <command_split+0x56>
 8000926:	2b09      	cmp	r3, #9
 8000928:	d001      	beq.n	800092e <command_split+0x46>
 800092a:	2b20      	cmp	r3, #32
 800092c:	d107      	bne.n	800093e <command_split+0x56>
		case ' ':		// スペース
		case ',':		//　カンマ
		case '	':		//　タブ
			input_string.main[i] = '\0';
 800092e:	4a50      	ldr	r2, [pc, #320]	; (8000a70 <command_split+0x188>)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
			moji = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	71fb      	strb	r3, [r7, #7]
			break;
 800093c:	e010      	b.n	8000960 <command_split+0x78>
		default:
			if( moji == 0 ){
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10c      	bne.n	800095e <command_split+0x76>
				if( j < INPUT_BUF_SIZE/2){
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	2b0e      	cmp	r3, #14
 8000948:	dc07      	bgt.n	800095a <command_split+0x72>
					input_string.sub_ptr[j] = &input_string.main[i];
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	4a48      	ldr	r2, [pc, #288]	; (8000a70 <command_split+0x188>)
 800094e:	441a      	add	r2, r3
 8000950:	4947      	ldr	r1, [pc, #284]	; (8000a70 <command_split+0x188>)
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	3308      	adds	r3, #8
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				moji = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	71fb      	strb	r3, [r7, #7]
			}
			break;
 800095e:	bf00      	nop
	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3301      	adds	r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2b1d      	cmp	r3, #29
 800096a:	ddd4      	ble.n	8000916 <command_split+0x2e>
		}
	}

	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 800096c:	2301      	movs	r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	e074      	b.n	8000a5c <command_split+0x174>
		ptr = input_string.sub_ptr[j];
 8000972:	4a3f      	ldr	r2, [pc, #252]	; (8000a70 <command_split+0x188>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	3308      	adds	r3, #8
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	603b      	str	r3, [r7, #0]
		moji = 1;
 800097e:	2301      	movs	r3, #1
 8000980:	71fb      	strb	r3, [r7, #7]
		if( ptr != 0 ){
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d06d      	beq.n	8000a64 <command_split+0x17c>
			if ( ptr[0] == '0' && ptr[1] == 'x'){
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b30      	cmp	r3, #48	; 0x30
 800098e:	d14c      	bne.n	8000a2a <command_split+0x142>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b78      	cmp	r3, #120	; 0x78
 8000998:	d147      	bne.n	8000a2a <command_split+0x142>
				ptr ++;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	603b      	str	r3, [r7, #0]
				ptr ++;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 80009a6:	e01c      	b.n	80009e2 <command_split+0xfa>
					if( ('0'<=*ptr && *ptr<='9') || ('A'<=*ptr && *ptr<='F') || ('a'<=*ptr && *ptr<='f')){
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b2f      	cmp	r3, #47	; 0x2f
 80009ae:	d903      	bls.n	80009b8 <command_split+0xd0>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b39      	cmp	r3, #57	; 0x39
 80009b6:	d911      	bls.n	80009dc <command_split+0xf4>
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b40      	cmp	r3, #64	; 0x40
 80009be:	d903      	bls.n	80009c8 <command_split+0xe0>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b46      	cmp	r3, #70	; 0x46
 80009c6:	d909      	bls.n	80009dc <command_split+0xf4>
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b60      	cmp	r3, #96	; 0x60
 80009ce:	d903      	bls.n	80009d8 <command_split+0xf0>
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b66      	cmp	r3, #102	; 0x66
 80009d6:	d901      	bls.n	80009dc <command_split+0xf4>

					}
					else{
						moji = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1de      	bne.n	80009a8 <command_split+0xc0>
				}

				if( moji == 1 ){
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d132      	bne.n	8000a56 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%x", &input_string.data[j]);
 80009f0:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <command_split+0x188>)
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	3308      	adds	r3, #8
 80009f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	332c      	adds	r3, #44	; 0x2c
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <command_split+0x188>)
 8000a02:	4413      	add	r3, r2
 8000a04:	3304      	adds	r3, #4
 8000a06:	461a      	mov	r2, r3
 8000a08:	491a      	ldr	r1, [pc, #104]	; (8000a74 <command_split+0x18c>)
 8000a0a:	f006 fac7 	bl	8006f9c <siscanf>
				if( moji == 1 ){
 8000a0e:	e022      	b.n	8000a56 <command_split+0x16e>
				}
			}
			else{
				while( *ptr != '\0' ){
					if( '0'<=*ptr && *ptr<='9'){
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b2f      	cmp	r3, #47	; 0x2f
 8000a16:	d903      	bls.n	8000a20 <command_split+0x138>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b39      	cmp	r3, #57	; 0x39
 8000a1e:	d901      	bls.n	8000a24 <command_split+0x13c>
					}
					else{
						moji = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1ee      	bne.n	8000a10 <command_split+0x128>
				}

				if( moji == 1 ){
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d10e      	bne.n	8000a56 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%d", &input_string.data[j]);
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <command_split+0x188>)
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	3308      	adds	r3, #8
 8000a3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	332c      	adds	r3, #44	; 0x2c
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <command_split+0x188>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4909      	ldr	r1, [pc, #36]	; (8000a78 <command_split+0x190>)
 8000a52:	f006 faa3 	bl	8006f9c <siscanf>
	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	2b0e      	cmp	r3, #14
 8000a60:	dd87      	ble.n	8000972 <command_split+0x8a>
		else{
			break;
		}
	}

}
 8000a62:	e000      	b.n	8000a66 <command_split+0x17e>
			break;
 8000a64:	bf00      	nop
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000098 	.word	0x20000098
 8000a74:	0800822c 	.word	0x0800822c
 8000a78:	08008230 	.word	0x08008230

08000a7c <read_line_streem>:

//==============================================================================
//
//==============================================================================
 INPUT_CHAR_STEP read_line_streem(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
    uint8_t num;
    uint8_t sub_cnt;
#endif	// ___NOP
    char	string[2];

    string[0] = '\0';
 8000a82:	2300      	movs	r3, #0
 8000a84:	713b      	strb	r3, [r7, #4]
    string[1] = '\0';
 8000a86:	2300      	movs	r3, #0
 8000a88:	717b      	strb	r3, [r7, #5]


    c = (char)getch();
 8000a8a:	f000 fa5d 	bl	8000f48 <getch>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]

    if( c != 0 ){
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d04b      	beq.n	8000b30 <read_line_streem+0xb4>

        switch(input_char_step){
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <read_line_streem+0xc8>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <read_line_streem+0x2a>
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d006      	beq.n	8000ab2 <read_line_streem+0x36>
                    input_char_step = INPUT_DATA_FIX;

                    command_split();
                }
            default:
                break;
 8000aa4:	e046      	b.n	8000b34 <read_line_streem+0xb8>
                input_pos = 0;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <read_line_streem+0xcc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
                input_char_step = INPUT_SAVING;
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <read_line_streem+0xc8>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f006 fa53 	bl	8006f60 <isprint>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d015      	beq.n	8000aec <read_line_streem+0x70>
 8000ac0:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <read_line_streem+0xcc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b1c      	cmp	r3, #28
 8000ac6:	dc11      	bgt.n	8000aec <read_line_streem+0x70>
                    input_string.main[input_pos] = c;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <read_line_streem+0xcc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	491f      	ldr	r1, [pc, #124]	; (8000b4c <read_line_streem+0xd0>)
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	54ca      	strb	r2, [r1, r3]
                    input_pos ++;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <read_line_streem+0xcc>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <read_line_streem+0xcc>)
 8000ada:	6013      	str	r3, [r2, #0]
                    string[0] = c;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	713b      	strb	r3, [r7, #4]
                    SKprintf("%s",string);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481a      	ldr	r0, [pc, #104]	; (8000b50 <read_line_streem+0xd4>)
 8000ae6:	f000 f97b 	bl	8000de0 <SKprintf>
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8000aea:	e020      	b.n	8000b2e <read_line_streem+0xb2>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d10c      	bne.n	8000b0c <read_line_streem+0x90>
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <read_line_streem+0xcc>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	dd08      	ble.n	8000b0c <read_line_streem+0x90>
                    input_pos --;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <read_line_streem+0xcc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <read_line_streem+0xcc>)
 8000b02:	6013      	str	r3, [r2, #0]
                    SKprintf("\x08 \x08");
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <read_line_streem+0xd8>)
 8000b06:	f000 f96b 	bl	8000de0 <SKprintf>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8000b0a:	e010      	b.n	8000b2e <read_line_streem+0xb2>
                else if (c == '\r') {
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2b0d      	cmp	r3, #13
 8000b10:	d110      	bne.n	8000b34 <read_line_streem+0xb8>
                    input_string.main[input_pos] = '\0';
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <read_line_streem+0xcc>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <read_line_streem+0xd0>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	54d1      	strb	r1, [r2, r3]
                    SKprintf("\r\n");
 8000b1c:	480e      	ldr	r0, [pc, #56]	; (8000b58 <read_line_streem+0xdc>)
 8000b1e:	f000 f95f 	bl	8000de0 <SKprintf>
                    input_char_step = INPUT_DATA_FIX;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <read_line_streem+0xc8>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	701a      	strb	r2, [r3, #0]
                    command_split();
 8000b28:	f7ff fede 	bl	80008e8 <command_split>
                break;
 8000b2c:	e002      	b.n	8000b34 <read_line_streem+0xb8>
 8000b2e:	e001      	b.n	8000b34 <read_line_streem+0xb8>
        }
    }
 8000b30:	bf00      	nop
 8000b32:	e000      	b.n	8000b36 <read_line_streem+0xba>
                break;
 8000b34:	bf00      	nop
    return(input_char_step);
 8000b36:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <read_line_streem+0xc8>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 }
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000094 	.word	0x20000094
 8000b48:	20000090 	.word	0x20000090
 8000b4c:	20000098 	.word	0x20000098
 8000b50:	08008234 	.word	0x08008234
 8000b54:	08008238 	.word	0x08008238
 8000b58:	0800823c 	.word	0x0800823c

08000b5c <HAL_RTCEx_WakeUpTimerEventCallback>:
//==============================================================================
//
//==============================================================================

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

	uint8_t	i;

	if( timer.start > TIMER_AV_NUM){
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b66:	7e5b      	ldrb	r3, [r3, #25]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d941      	bls.n	8000bf0 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>

		timer.dt_buf[timer.av_wcnt] = timer.dt;
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b6e:	7e1b      	ldrb	r3, [r3, #24]
 8000b70:	4618      	mov	r0, r3
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4926      	ldr	r1, [pc, #152]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b78:	0083      	lsls	r3, r0, #2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	605a      	str	r2, [r3, #4]
		timer.av_wcnt ++;
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b80:	7e1b      	ldrb	r3, [r3, #24]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b88:	761a      	strb	r2, [r3, #24]

		if(timer.av_wcnt > TIMER_AV_NUM){
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b8c:	7e1b      	ldrb	r3, [r3, #24]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d920      	bls.n	8000bd4 <HAL_RTCEx_WakeUpTimerEventCallback+0x78>
			timer.av_wcnt = 0;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	761a      	strb	r2, [r3, #24]
			timer.dt_av = 0;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e00c      	b.n	8000bbe <HAL_RTCEx_WakeUpTimerEventCallback+0x62>
				timer.dt_av +=  timer.dt_buf[i];
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000ba6:	695a      	ldr	r2, [r3, #20]
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	4919      	ldr	r1, [pc, #100]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bb6:	6153      	str	r3, [r2, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d9ef      	bls.n	8000ba4 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>
			}
			timer.dt_av /= TIMER_AV_NUM;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <HAL_RTCEx_WakeUpTimerEventCallback+0xb8>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	085b      	lsrs	r3, r3, #1
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bd2:	6153      	str	r3, [r2, #20]
		}

		if( timer.dt_max < timer.dt ){
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d203      	bcs.n	8000be8 <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>
			timer.dt_max = timer.dt;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000be6:	6113      	str	r3, [r2, #16]
		}

		timer.dt = 0;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
	}
	else{
		timer.start ++;
		timer.dt = 0;
	}
}
 8000bee:	e008      	b.n	8000c02 <HAL_RTCEx_WakeUpTimerEventCallback+0xa6>
		timer.start ++;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bf2:	7e5b      	ldrb	r3, [r3, #25]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bfa:	765a      	strb	r2, [r3, #25]
		timer.dt = 0;
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	2000011c 	.word	0x2000011c
 8000c14:	aaaaaaab 	.word	0xaaaaaaab

08000c18 <usr_isr_tim1_up>:
//==============================================================================
//
//==============================================================================
void usr_isr_tim1_up(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	timer.dt += 10;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <usr_isr_tim1_up+0x18>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	330a      	adds	r3, #10
 8000c22:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <usr_isr_tim1_up+0x18>)
 8000c24:	6013      	str	r3, [r2, #0]

}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	2000011c 	.word	0x2000011c

08000c34 <Set_logflg>:
//=============================================================================
//
//
//=============================================================================
void Set_logflg(LOG_FLAG flg)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]

	if( flg < LF_MAX){
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d808      	bhi.n	8000c56 <Set_logflg+0x22>
		log.flg = flg;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <Set_logflg+0x2c>)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	7193      	strb	r3, [r2, #6]
		SKprintf("log.flg=%d \r\n",log.flg);
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <Set_logflg+0x2c>)
 8000c4c:	799b      	ldrb	r3, [r3, #6]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <Set_logflg+0x30>)
 8000c52:	f000 f8c5 	bl	8000de0 <SKprintf>
	}
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000140 	.word	0x20000140
 8000c64:	08008240 	.word	0x08008240

08000c68 <LogInfo_display>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_display(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
	uint16_t	i;
	uint16_t	msec;
	uint16_t	usec;
	uint32_t	dt;
	uint16_t	rptr = log.rptr;
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <LogInfo_display+0x134>)
 8000c70:	885b      	ldrh	r3, [r3, #2]
 8000c72:	80fb      	strh	r3, [r7, #6]


	if( log.num != 0 ){
 8000c74:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <LogInfo_display+0x134>)
 8000c76:	889b      	ldrh	r3, [r3, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f000 8086 	beq.w	8000d8a <LogInfo_display+0x122>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8000c7e:	2300      	movs	r3, #0
 8000c80:	81fb      	strh	r3, [r7, #14]
 8000c82:	e07d      	b.n	8000d80 <LogInfo_display+0x118>
			SKprintf("%02d:%02d:%02d.", log.rec[rptr].Hours, log.rec[rptr].Minutes, log.rec[rptr].Seconds);
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	4a45      	ldr	r2, [pc, #276]	; (8000d9c <LogInfo_display+0x134>)
 8000c88:	019b      	lsls	r3, r3, #6
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	4a41      	ldr	r2, [pc, #260]	; (8000d9c <LogInfo_display+0x134>)
 8000c96:	019b      	lsls	r3, r3, #6
 8000c98:	4413      	add	r3, r2
 8000c9a:	3309      	adds	r3, #9
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	4a3e      	ldr	r2, [pc, #248]	; (8000d9c <LogInfo_display+0x134>)
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	4413      	add	r3, r2
 8000ca8:	330a      	adds	r3, #10
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4602      	mov	r2, r0
 8000cae:	483c      	ldr	r0, [pc, #240]	; (8000da0 <LogInfo_display+0x138>)
 8000cb0:	f000 f896 	bl	8000de0 <SKprintf>

			if(log.rec[rptr].dt <= log.rec[rptr].dt_av){
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	4a39      	ldr	r2, [pc, #228]	; (8000d9c <LogInfo_display+0x134>)
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	4413      	add	r3, r2
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	4936      	ldr	r1, [pc, #216]	; (8000d9c <LogInfo_display+0x134>)
 8000cc4:	019b      	lsls	r3, r3, #6
 8000cc6:	440b      	add	r3, r1
 8000cc8:	3310      	adds	r3, #16
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d812      	bhi.n	8000cf6 <LogInfo_display+0x8e>
				dt = 1000000 * log.rec[rptr].dt / log.rec[rptr].dt_av;
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	4a32      	ldr	r2, [pc, #200]	; (8000d9c <LogInfo_display+0x134>)
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	4413      	add	r3, r2
 8000cd8:	330c      	adds	r3, #12
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a31      	ldr	r2, [pc, #196]	; (8000da4 <LogInfo_display+0x13c>)
 8000cde:	fb03 f202 	mul.w	r2, r3, r2
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	492d      	ldr	r1, [pc, #180]	; (8000d9c <LogInfo_display+0x134>)
 8000ce6:	019b      	lsls	r3, r3, #6
 8000ce8:	440b      	add	r3, r1
 8000cea:	3310      	adds	r3, #16
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	e012      	b.n	8000d1c <LogInfo_display+0xb4>
			}
			else{
				dt = 1000000 * log.rec[rptr].dt / (log.rec[rptr].dt + 1 );
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <LogInfo_display+0x134>)
 8000cfa:	019b      	lsls	r3, r3, #6
 8000cfc:	4413      	add	r3, r2
 8000cfe:	330c      	adds	r3, #12
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <LogInfo_display+0x13c>)
 8000d04:	fb03 f202 	mul.w	r2, r3, r2
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	4924      	ldr	r1, [pc, #144]	; (8000d9c <LogInfo_display+0x134>)
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	440b      	add	r3, r1
 8000d10:	330c      	adds	r3, #12
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	60bb      	str	r3, [r7, #8]
			}
			msec = (uint16_t)( dt / 1000 );
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <LogInfo_display+0x140>)
 8000d20:	fba2 2303 	umull	r2, r3, r2, r3
 8000d24:	099b      	lsrs	r3, r3, #6
 8000d26:	80bb      	strh	r3, [r7, #4]
			usec = (uint16_t)( dt % 1000 );
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <LogInfo_display+0x140>)
 8000d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d30:	099b      	lsrs	r3, r3, #6
 8000d32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d36:	fb01 f303 	mul.w	r3, r1, r3
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	807b      	strh	r3, [r7, #2]
			SKprintf("%03d %03d ", msec,usec);
 8000d3e:	88bb      	ldrh	r3, [r7, #4]
 8000d40:	887a      	ldrh	r2, [r7, #2]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4819      	ldr	r0, [pc, #100]	; (8000dac <LogInfo_display+0x144>)
 8000d46:	f000 f84b 	bl	8000de0 <SKprintf>

			SKprintf("%s\r\n", &log.rec[log.wptr].string[0]);
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <LogInfo_display+0x134>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	019b      	lsls	r3, r3, #6
 8000d50:	3310      	adds	r3, #16
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <LogInfo_display+0x134>)
 8000d54:	4413      	add	r3, r2
 8000d56:	3304      	adds	r3, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4815      	ldr	r0, [pc, #84]	; (8000db0 <LogInfo_display+0x148>)
 8000d5c:	f000 f840 	bl	8000de0 <SKprintf>

			rptr ++;
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	3301      	adds	r3, #1
 8000d64:	80fb      	strh	r3, [r7, #6]
			if( rptr > LOG_RECODE_MAX ){
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	2b64      	cmp	r3, #100	; 0x64
 8000d6a:	d901      	bls.n	8000d70 <LogInfo_display+0x108>
				rptr = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	80fb      	strh	r3, [r7, #6]
			}
			if( log.wptr == rptr ){
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <LogInfo_display+0x134>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	88fa      	ldrh	r2, [r7, #6]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d00b      	beq.n	8000d92 <LogInfo_display+0x12a>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8000d7a:	89fb      	ldrh	r3, [r7, #14]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	81fb      	strh	r3, [r7, #14]
 8000d80:	89fb      	ldrh	r3, [r7, #14]
 8000d82:	2b63      	cmp	r3, #99	; 0x63
 8000d84:	f67f af7e 	bls.w	8000c84 <LogInfo_display+0x1c>
		}
	}
	else{
		SKprintf("LOG NONE\r\n");
	}
}
 8000d88:	e004      	b.n	8000d94 <LogInfo_display+0x12c>
		SKprintf("LOG NONE\r\n");
 8000d8a:	480a      	ldr	r0, [pc, #40]	; (8000db4 <LogInfo_display+0x14c>)
 8000d8c:	f000 f828 	bl	8000de0 <SKprintf>
}
 8000d90:	e000      	b.n	8000d94 <LogInfo_display+0x12c>
				break;
 8000d92:	bf00      	nop
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000140 	.word	0x20000140
 8000da0:	08008250 	.word	0x08008250
 8000da4:	000f4240 	.word	0x000f4240
 8000da8:	10624dd3 	.word	0x10624dd3
 8000dac:	08008260 	.word	0x08008260
 8000db0:	0800826c 	.word	0x0800826c
 8000db4:	08008274 	.word	0x08008274

08000db8 <LogInfo_clear>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_clear(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

	log.rptr = 0;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <LogInfo_clear+0x20>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	805a      	strh	r2, [r3, #2]
	log.wptr = 0;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <LogInfo_clear+0x20>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	801a      	strh	r2, [r3, #0]
	log.num = 0;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <LogInfo_clear+0x20>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	809a      	strh	r2, [r3, #4]

	SKprintf("LOG CLEAR \r\n");
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <LogInfo_clear+0x24>)
 8000dd0:	f000 f806 	bl	8000de0 <SKprintf>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000140 	.word	0x20000140
 8000ddc:	08008280 	.word	0x08008280

08000de0 <SKprintf>:
// 総和を求める関数（値は int 型を想定）
// n は、渡す引数の数、それ以降は計算する値です。
//==============================================================================

int	SKprintf (const char *string, ...)
{
 8000de0:	b40f      	push	{r0, r1, r2, r3}
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b090      	sub	sp, #64	; 0x40
 8000de6:	af00      	add	r7, sp, #0
	int i;

	char buffer[PRiNTF_BUFFMAX];


	while( Sem_Printf != 0 );
 8000de8:	bf00      	nop
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <SKprintf+0x74>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1fb      	bne.n	8000dea <SKprintf+0xa>

	Sem_Printf = 1;
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <SKprintf+0x74>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

	// 可変個引数の利用準備
	// -- １… va_list 構造体 ap
	// -- 2 … 可変個引数の直前にある引数

	va_start(ap, string);
 8000df8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
	vsprintf(buffer, string, ap);
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000e04:	4618      	mov	r0, r3
 8000e06:	f006 f90d 	bl	8007024 <vsiprintf>
	va_end(ap);

	for(i=0; i<PRiNTF_BUFFMAX; i++){
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e0e:	e008      	b.n	8000e22 <SKprintf+0x42>
		if(buffer[i] == '\0'){
 8000e10:	1d3a      	adds	r2, r7, #4
 8000e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e14:	4413      	add	r3, r2
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <SKprintf+0x4a>
	for(i=0; i<PRiNTF_BUFFMAX; i++){
 8000e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1e:	3301      	adds	r3, #1
 8000e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e24:	2b31      	cmp	r3, #49	; 0x31
 8000e26:	ddf3      	ble.n	8000e10 <SKprintf+0x30>
 8000e28:	e000      	b.n	8000e2c <SKprintf+0x4c>
			break;
 8000e2a:	bf00      	nop
		}
	}
	HAL_UART_Transmit(&huart2, buffer, i, HAL_MAX_DELAY);
 8000e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	1d39      	adds	r1, r7, #4
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	4808      	ldr	r0, [pc, #32]	; (8000e58 <SKprintf+0x78>)
 8000e38:	f002 febb 	bl	8003bb2 <HAL_UART_Transmit>

	Sem_Printf = 0;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SKprintf+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]

}
 8000e42:	bf00      	nop
 8000e44:	4618      	mov	r0, r3
 8000e46:	3740      	adds	r7, #64	; 0x40
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e4e:	b004      	add	sp, #16
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20001a48 	.word	0x20001a48
 8000e58:	20001afc 	.word	0x20001afc

08000e5c <user_init>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	//LED_Flush(0);
	SKprintf("Initialize all configured peripherals\r\n");
 8000e60:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <user_init+0x5c>)
 8000e62:	f7ff ffbd 	bl	8000de0 <SKprintf>
	SKprintf("******************\r\n");
 8000e66:	4815      	ldr	r0, [pc, #84]	; (8000ebc <user_init+0x60>)
 8000e68:	f7ff ffba 	bl	8000de0 <SKprintf>
	SKprintf("*** UART START ***\r\n");
 8000e6c:	4814      	ldr	r0, [pc, #80]	; (8000ec0 <user_init+0x64>)
 8000e6e:	f7ff ffb7 	bl	8000de0 <SKprintf>
	SKprintf("******************\r\n");
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <user_init+0x60>)
 8000e74:	f7ff ffb4 	bl	8000de0 <SKprintf>


	//-----------------------------------------------
	// Log Timer Counter
	//-----------------------------------------------
	timer.usec = 0;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <user_init+0x68>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	835a      	strh	r2, [r3, #26]
	timer.msec = 0;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <user_init+0x68>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	839a      	strh	r2, [r3, #28]
	timer.usec_max = 0;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <user_init+0x68>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	83da      	strh	r2, [r3, #30]
	timer.msec_max = 0;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <user_init+0x68>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	841a      	strh	r2, [r3, #32]
	timer.dt = 0;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <user_init+0x68>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
	timer.dt_max = 0;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <user_init+0x68>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
	timer.dt_av = 0;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <user_init+0x68>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
	timer.start = 0;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <user_init+0x68>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	765a      	strb	r2, [r3, #25]
	timer.av_wcnt = 0;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <user_init+0x68>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	761a      	strb	r2, [r3, #24]

	//-----------------------------------------------
	// Log Info Init
	//-----------------------------------------------
	LogInfo_clear();
 8000eae:	f7ff ff83 	bl	8000db8 <LogInfo_clear>


}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	08008290 	.word	0x08008290
 8000ebc:	080082b8 	.word	0x080082b8
 8000ec0:	080082d0 	.word	0x080082d0
 8000ec4:	2000011c 	.word	0x2000011c

08000ec8 <rtc_display>:

//==============================================================================
//
//==============================================================================
void rtc_display(void)
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <rtc_display+0x6c>)
 8000ed6:	f001 fed5 	bl	8002c84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4814      	ldr	r0, [pc, #80]	; (8000f34 <rtc_display+0x6c>)
 8000ee2:	f001 ffb1 	bl	8002e48 <HAL_RTC_GetDate>
	SKprintf("20%02d.%02d.%02d %02d:%02d:%02d\r\n", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	787b      	ldrb	r3, [r7, #1]
 8000eec:	461c      	mov	r4, r3
 8000eee:	78bb      	ldrb	r3, [r7, #2]
 8000ef0:	461d      	mov	r5, r3
 8000ef2:	793b      	ldrb	r3, [r7, #4]
 8000ef4:	797a      	ldrb	r2, [r7, #5]
 8000ef6:	79b9      	ldrb	r1, [r7, #6]
 8000ef8:	9102      	str	r1, [sp, #8]
 8000efa:	9201      	str	r2, [sp, #4]
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	462b      	mov	r3, r5
 8000f00:	4622      	mov	r2, r4
 8000f02:	4601      	mov	r1, r0
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <rtc_display+0x70>)
 8000f06:	f7ff ff6b 	bl	8000de0 <SKprintf>
	SKprintf("av=%d max=%d\r\n",timer.dt_av,timer.dt_max);
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <rtc_display+0x74>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <rtc_display+0x74>)
 8000f10:	6912      	ldr	r2, [r2, #16]
 8000f12:	4619      	mov	r1, r3
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <rtc_display+0x78>)
 8000f16:	f7ff ff63 	bl	8000de0 <SKprintf>
	SKprintf("dt_buf=%d, %d, %d\r\n", timer.dt_buf[0],timer.dt_buf[1],timer.dt_buf[2]);
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <rtc_display+0x74>)
 8000f1c:	6859      	ldr	r1, [r3, #4]
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <rtc_display+0x74>)
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <rtc_display+0x74>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	4807      	ldr	r0, [pc, #28]	; (8000f44 <rtc_display+0x7c>)
 8000f28:	f7ff ff5a 	bl	8000de0 <SKprintf>
}
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bdb0      	pop	{r4, r5, r7, pc}
 8000f34:	20001a4c 	.word	0x20001a4c
 8000f38:	080082e8 	.word	0x080082e8
 8000f3c:	2000011c 	.word	0x2000011c
 8000f40:	0800830c 	.word	0x0800830c
 8000f44:	0800831c 	.word	0x0800831c

08000f48 <getch>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
int getch(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0c2      	sub	sp, #264	; 0x108
 8000f4c:	af00      	add	r7, sp, #0
	uint8_t buffer[256];
	HAL_StatusTypeDef s;
	int rtn = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	s = HAL_UART_Receive(&huart2, buffer, 1, HAL_MAX_DELAY);
 8000f54:	4639      	mov	r1, r7
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	480f      	ldr	r0, [pc, #60]	; (8000f9c <getch+0x54>)
 8000f5e:	f002 feba 	bl	8003cd6 <HAL_UART_Receive>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103

	switch(s){
 8000f68:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <getch+0x34>
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0b      	blt.n	8000f8c <getch+0x44>
 8000f74:	3b01      	subs	r3, #1
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d808      	bhi.n	8000f8c <getch+0x44>
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:

		break;
 8000f7a:	e007      	b.n	8000f8c <getch+0x44>
		rtn = (int) buffer[0];
 8000f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		break;
 8000f8a:	bf00      	nop
	}

	return rtn;
 8000f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20001afc 	.word	0x20001afc

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f000 fcca 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f82e 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 fa08 	bl	80013c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fb0:	f000 f9dc 	bl	800136c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000fb4:	f000 f896 	bl	80010e4 <MX_RTC_Init>
  MX_TIM1_Init();
 8000fb8:	f000 f936 	bl	8001228 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fbc:	f000 f988 	bl	80012d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  user_init();		// SK ADD
 8000fc0:	f7ff ff4c 	bl	8000e5c <user_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fc4:	f003 fa50 	bl	8004468 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_main */
  Task_mainHandle = osThreadNew(StartDefaultTask, NULL, &Task_main_attributes);
 8000fc8:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <main+0x50>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <main+0x54>)
 8000fce:	f003 fa95 	bl	80044fc <osThreadNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <main+0x58>)
 8000fd6:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub1 */
  Task_sub1Handle = osThreadNew(StartTask02, NULL, &Task_sub1_attributes);
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <main+0x5c>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <main+0x60>)
 8000fde:	f003 fa8d 	bl	80044fc <osThreadNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <main+0x64>)
 8000fe6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fe8:	f003 fa62 	bl	80044b0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <main+0x4c>
 8000fee:	bf00      	nop
 8000ff0:	080084f4 	.word	0x080084f4
 8000ff4:	080014c5 	.word	0x080014c5
 8000ff8:	20001b40 	.word	0x20001b40
 8000ffc:	08008518 	.word	0x08008518
 8001000:	080014e5 	.word	0x080014e5
 8001004:	20001b44 	.word	0x20001b44

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2230      	movs	r2, #48	; 0x30
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f005 ffb8 	bl	8006f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <SystemClock_Config+0xd4>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a29      	ldr	r2, [pc, #164]	; (80010dc <SystemClock_Config+0xd4>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <SystemClock_Config+0xd4>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <SystemClock_Config+0xd8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001054:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <SystemClock_Config+0xd8>)
 8001056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <SystemClock_Config+0xd8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001068:	2306      	movs	r3, #6
 800106a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001070:	2301      	movs	r3, #1
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001074:	2310      	movs	r3, #16
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001078:	2302      	movs	r3, #2
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107c:	2300      	movs	r3, #0
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001080:	2310      	movs	r3, #16
 8001082:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001084:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001088:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800108a:	2304      	movs	r3, #4
 800108c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800108e:	2307      	movs	r3, #7
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	4618      	mov	r0, r3
 8001098:	f000 ff2c 	bl	8001ef4 <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010a2:	f000 fa3b 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	230f      	movs	r3, #15
 80010a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	2302      	movs	r3, #2
 80010ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2102      	movs	r1, #2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 f98e 	bl	80023e4 <HAL_RCC_ClockConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010ce:	f000 fa25 	bl	800151c <Error_Handler>
  }
}
 80010d2:	bf00      	nop
 80010d4:	3750      	adds	r7, #80	; 0x50
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40007000 	.word	0x40007000

080010e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	; 0x30
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010fe:	4b48      	ldr	r3, [pc, #288]	; (8001220 <MX_RTC_Init+0x13c>)
 8001100:	4a48      	ldr	r2, [pc, #288]	; (8001224 <MX_RTC_Init+0x140>)
 8001102:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001104:	4b46      	ldr	r3, [pc, #280]	; (8001220 <MX_RTC_Init+0x13c>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800110a:	4b45      	ldr	r3, [pc, #276]	; (8001220 <MX_RTC_Init+0x13c>)
 800110c:	227f      	movs	r2, #127	; 0x7f
 800110e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001110:	4b43      	ldr	r3, [pc, #268]	; (8001220 <MX_RTC_Init+0x13c>)
 8001112:	22ff      	movs	r2, #255	; 0xff
 8001114:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001116:	4b42      	ldr	r3, [pc, #264]	; (8001220 <MX_RTC_Init+0x13c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800111c:	4b40      	ldr	r3, [pc, #256]	; (8001220 <MX_RTC_Init+0x13c>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001122:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <MX_RTC_Init+0x13c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001128:	483d      	ldr	r0, [pc, #244]	; (8001220 <MX_RTC_Init+0x13c>)
 800112a:	f001 fc9b 	bl	8002a64 <HAL_RTC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001134:	f000 f9f2 	bl	800151c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001138:	2300      	movs	r3, #0
 800113a:	773b      	strb	r3, [r7, #28]
  sTime.Minutes = 0x0;
 800113c:	2300      	movs	r3, #0
 800113e:	777b      	strb	r3, [r7, #29]
  sTime.Seconds = 0x0;
 8001140:	2300      	movs	r3, #0
 8001142:	77bb      	strb	r3, [r7, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	4832      	ldr	r0, [pc, #200]	; (8001220 <MX_RTC_Init+0x13c>)
 8001156:	f001 fcfb 	bl	8002b50 <HAL_RTC_SetTime>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8001160:	f000 f9dc 	bl	800151c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001164:	2301      	movs	r3, #1
 8001166:	763b      	strb	r3, [r7, #24]
  sDate.Month = RTC_MONTH_JANUARY;
 8001168:	2301      	movs	r3, #1
 800116a:	767b      	strb	r3, [r7, #25]
  sDate.Date = 0x1;
 800116c:	2301      	movs	r3, #1
 800116e:	76bb      	strb	r3, [r7, #26]
  sDate.Year = 0x0;
 8001170:	2300      	movs	r3, #0
 8001172:	76fb      	strb	r3, [r7, #27]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	2201      	movs	r2, #1
 800117a:	4619      	mov	r1, r3
 800117c:	4828      	ldr	r0, [pc, #160]	; (8001220 <MX_RTC_Init+0x13c>)
 800117e:	f001 fddf 	bl	8002d40 <HAL_RTC_SetDate>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001188:	f000 f9c8 	bl	800151c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800118c:	2204      	movs	r2, #4
 800118e:	2100      	movs	r1, #0
 8001190:	4823      	ldr	r0, [pc, #140]	; (8001220 <MX_RTC_Init+0x13c>)
 8001192:	f001 ff65 	bl	8003060 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800119c:	f000 f9be 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#define MAGIC_NO 0x12a5			// SK ADD

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != MAGIC_NO)
 80011a0:	2100      	movs	r1, #0
 80011a2:	481f      	ldr	r0, [pc, #124]	; (8001220 <MX_RTC_Init+0x13c>)
 80011a4:	f002 f85a 	bl	800325c <HAL_RTCEx_BKUPRead>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f241 22a5 	movw	r2, #4773	; 0x12a5
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d032      	beq.n	8001218 <MX_RTC_Init+0x134>
  {
    RTC_TimeTypeDef sTime = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]

    sTime.Hours = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	71bb      	strb	r3, [r7, #6]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2200      	movs	r2, #0
 80011d4:	4619      	mov	r1, r3
 80011d6:	4812      	ldr	r0, [pc, #72]	; (8001220 <MX_RTC_Init+0x13c>)
 80011d8:	f001 fcba 	bl	8002b50 <HAL_RTC_SetTime>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_RTC_Init+0x102>
    {
      Error_Handler();
 80011e2:	f000 f99b 	bl	800151c <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80011e6:	2303      	movs	r3, #3
 80011e8:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 80011ea:	2301      	movs	r3, #1
 80011ec:	707b      	strb	r3, [r7, #1]
    sDate.Date = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 20;
 80011f2:	2314      	movs	r3, #20
 80011f4:	70fb      	strb	r3, [r7, #3]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <MX_RTC_Init+0x13c>)
 80011fe:	f001 fd9f 	bl	8002d40 <HAL_RTC_SetDate>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_RTC_Init+0x128>
    {
      Error_Handler();
 8001208:	f000 f988 	bl	800151c <Error_Handler>

    }
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, MAGIC_NO);
 800120c:	f241 22a5 	movw	r2, #4773	; 0x12a5
 8001210:	2100      	movs	r1, #0
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <MX_RTC_Init+0x13c>)
 8001214:	f002 f808 	bl	8003228 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3730      	adds	r7, #48	; 0x30
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20001a4c 	.word	0x20001a4c
 8001224:	40002800 	.word	0x40002800

08001228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_TIM1_Init+0xa0>)
 8001246:	4a21      	ldr	r2, [pc, #132]	; (80012cc <MX_TIM1_Init+0xa4>)
 8001248:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_TIM1_Init+0xa0>)
 800124c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001250:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_TIM1_Init+0xa0>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_TIM1_Init+0xa0>)
 800125a:	f245 2207 	movw	r2, #20999	; 0x5207
 800125e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_TIM1_Init+0xa0>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_TIM1_Init+0xa0>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_TIM1_Init+0xa0>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001272:	4815      	ldr	r0, [pc, #84]	; (80012c8 <MX_TIM1_Init+0xa0>)
 8001274:	f002 f80a 	bl	800328c <HAL_TIM_Base_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800127e:	f000 f94d 	bl	800151c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4619      	mov	r1, r3
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <MX_TIM1_Init+0xa0>)
 8001290:	f002 f9b6 	bl	8003600 <HAL_TIM_ConfigClockSource>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800129a:	f000 f93f 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a6:	463b      	mov	r3, r7
 80012a8:	4619      	mov	r1, r3
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <MX_TIM1_Init+0xa0>)
 80012ac:	f002 fbb2 	bl	8003a14 <HAL_TIMEx_MasterConfigSynchronization>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80012b6:	f000 f931 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);    // SK ADD
 80012ba:	4803      	ldr	r0, [pc, #12]	; (80012c8 <MX_TIM1_Init+0xa0>)
 80012bc:	f002 f836 	bl	800332c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20001a6c 	.word	0x20001a6c
 80012cc:	40010000 	.word	0x40010000

080012d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_TIM2_Init+0x98>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_TIM2_Init+0x98>)
 80012f6:	2203      	movs	r2, #3
 80012f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_TIM2_Init+0x98>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 209;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_TIM2_Init+0x98>)
 8001302:	22d1      	movs	r2, #209	; 0xd1
 8001304:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_TIM2_Init+0x98>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_TIM2_Init+0x98>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001312:	4815      	ldr	r0, [pc, #84]	; (8001368 <MX_TIM2_Init+0x98>)
 8001314:	f001 ffba 	bl	800328c <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800131e:	f000 f8fd 	bl	800151c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4619      	mov	r1, r3
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <MX_TIM2_Init+0x98>)
 8001330:	f002 f966 	bl	8003600 <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800133a:	f000 f8ef 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	4619      	mov	r1, r3
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <MX_TIM2_Init+0x98>)
 800134c:	f002 fb62 	bl	8003a14 <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001356:	f000 f8e1 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);    // SK ADD
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <MX_TIM2_Init+0x98>)
 800135c:	f001 ffe6 	bl	800332c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20001ab4 	.word	0x20001ab4

0800136c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <MX_USART2_UART_Init+0x50>)
 8001374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_USART2_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_USART2_UART_Init+0x4c>)
 80013a4:	f002 fbb8 	bl	8003b18 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ae:	f000 f8b5 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20001afc 	.word	0x20001afc
 80013bc:	40004400 	.word	0x40004400

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MX_GPIO_Init+0xf8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a36      	ldr	r2, [pc, #216]	; (80014b8 <MX_GPIO_Init+0xf8>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <MX_GPIO_Init+0xf8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <MX_GPIO_Init+0xf8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <MX_GPIO_Init+0xf8>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <MX_GPIO_Init+0xf8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <MX_GPIO_Init+0xf8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <MX_GPIO_Init+0xf8>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <MX_GPIO_Init+0xf8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MX_GPIO_Init+0xf8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <MX_GPIO_Init+0xf8>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_GPIO_Init+0xf8>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIM1_PLS_GPIO_Port, TIM1_PLS_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2104      	movs	r1, #4
 800144a:	481c      	ldr	r0, [pc, #112]	; (80014bc <MX_GPIO_Init+0xfc>)
 800144c:	f000 fd1e 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2120      	movs	r1, #32
 8001454:	481a      	ldr	r0, [pc, #104]	; (80014c0 <MX_GPIO_Init+0x100>)
 8001456:	f000 fd19 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800145a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001460:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <MX_GPIO_Init+0xfc>)
 8001472:	f000 fb87 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM1_PLS_Pin */
  GPIO_InitStruct.Pin = TIM1_PLS_Pin;
 8001476:	2304      	movs	r3, #4
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIM1_PLS_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <MX_GPIO_Init+0xfc>)
 800148e:	f000 fb79 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001492:	2320      	movs	r3, #32
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_GPIO_Init+0x100>)
 80014aa:	f000 fb6b 	bl	8001b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020000 	.word	0x40020000

080014c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	  rtc_display();
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80014cc:	2120      	movs	r1, #32
 80014ce:	4804      	ldr	r0, [pc, #16]	; (80014e0 <StartDefaultTask+0x1c>)
 80014d0:	f000 fcf5 	bl	8001ebe <HAL_GPIO_TogglePin>
    osDelay(1000);
 80014d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d8:	f003 f8a2 	bl	8004620 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80014dc:	e7f6      	b.n	80014cc <StartDefaultTask+0x8>
 80014de:	bf00      	nop
 80014e0:	40020000 	.word	0x40020000

080014e4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  debu_main();
 80014ec:	f7ff f862 	bl	80005b4 <debu_main>
//	  user_main_loop();		// SK ADD
    osDelay(1);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f003 f895 	bl	8004620 <osDelay>
	  debu_main();
 80014f6:	e7f9      	b.n	80014ec <StartTask02+0x8>

080014f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d101      	bne.n	800150e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800150a:	f000 fa39 	bl	8001980 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40014400 	.word	0x40014400

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_MspInit+0x54>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_MspInit+0x54>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_MspInit+0x54>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_MspInit+0x54>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_MspInit+0x54>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_MspInit+0x54>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	210f      	movs	r1, #15
 800156a:	f06f 0001 	mvn.w	r0, #1
 800156e:	f000 fadf 	bl	8001b30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_RTC_MspInit+0x60>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d119      	bne.n	80015d6 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015a2:	2302      	movs	r3, #2
 80015a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015aa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 f969 	bl	8002888 <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80015bc:	f7ff ffae 	bl	800151c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_RTC_MspInit+0x64>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2105      	movs	r1, #5
 80015ca:	2003      	movs	r0, #3
 80015cc:	f000 fab0 	bl	8001b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 fac9 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40002800 	.word	0x40002800
 80015e4:	42470e3c 	.word	0x42470e3c

080015e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_TIM_Base_MspInit+0x80>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d116      	bne.n	8001628 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_TIM_Base_MspInit+0x84>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a1a      	ldr	r2, [pc, #104]	; (800166c <HAL_TIM_Base_MspInit+0x84>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_TIM_Base_MspInit+0x84>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	210f      	movs	r1, #15
 800161a:	2019      	movs	r0, #25
 800161c:	f000 fa88 	bl	8001b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001620:	2019      	movs	r0, #25
 8001622:	f000 faa1 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001626:	e01a      	b.n	800165e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001630:	d115      	bne.n	800165e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_TIM_Base_MspInit+0x84>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <HAL_TIM_Base_MspInit+0x84>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_TIM_Base_MspInit+0x84>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2105      	movs	r1, #5
 8001652:	201c      	movs	r0, #28
 8001654:	f000 fa6c 	bl	8001b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001658:	201c      	movs	r0, #28
 800165a:	f000 fa85 	bl	8001b68 <HAL_NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40010000 	.word	0x40010000
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_UART_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12b      	bne.n	80016ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_UART_MspInit+0x88>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_UART_MspInit+0x88>)
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ca:	230c      	movs	r3, #12
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016da:	2307      	movs	r3, #7
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_UART_MspInit+0x8c>)
 80016e6:	f000 fa4d 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40004400 	.word	0x40004400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_InitTick+0xd0>)
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <HAL_InitTick+0xd0>)
 800171a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171e:	6453      	str	r3, [r2, #68]	; 0x44
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_InitTick+0xd0>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800172c:	f107 020c 	add.w	r2, r7, #12
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f001 f874 	bl	8002824 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800173c:	f001 f85e 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8001740:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <HAL_InitTick+0xd4>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0c9b      	lsrs	r3, r3, #18
 800174c:	3b01      	subs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_InitTick+0xd8>)
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_InitTick+0xdc>)
 8001754:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_InitTick+0xd8>)
 8001758:	f240 32e7 	movw	r2, #999	; 0x3e7
 800175c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800175e:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <HAL_InitTick+0xd8>)
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001764:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <HAL_InitTick+0xd8>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_InitTick+0xd8>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_InitTick+0xd8>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001776:	4818      	ldr	r0, [pc, #96]	; (80017d8 <HAL_InitTick+0xd8>)
 8001778:	f001 fd88 	bl	800328c <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001786:	2b00      	cmp	r3, #0
 8001788:	d11b      	bne.n	80017c2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800178a:	4813      	ldr	r0, [pc, #76]	; (80017d8 <HAL_InitTick+0xd8>)
 800178c:	f001 fdce 	bl	800332c <HAL_TIM_Base_Start_IT>
 8001790:	4603      	mov	r3, r0
 8001792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800179a:	2b00      	cmp	r3, #0
 800179c:	d111      	bne.n	80017c2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800179e:	2019      	movs	r0, #25
 80017a0:	f000 f9e2 	bl	8001b68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	d808      	bhi.n	80017bc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80017aa:	2200      	movs	r2, #0
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	2019      	movs	r0, #25
 80017b0:	f000 f9be 	bl	8001b30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_InitTick+0xe0>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e002      	b.n	80017c2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3730      	adds	r7, #48	; 0x30
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	20001b48 	.word	0x20001b48
 80017dc:	40014400 	.word	0x40014400
 80017e0:	20000004 	.word	0x20000004

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <RTC_WKUP_IRQHandler+0x10>)
 8001816:	f001 fce3 	bl	80031e0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20001a4c 	.word	0x20001a4c

08001824 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800182a:	f001 fde1 	bl	80033f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001830:	f001 fdde 	bl	80033f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//  usr_isr_tim1_up();	// SK ADD
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20001a6c 	.word	0x20001a6c
 800183c:	20001b48 	.word	0x20001b48

08001840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001844:	4803      	ldr	r0, [pc, #12]	; (8001854 <TIM2_IRQHandler+0x14>)
 8001846:	f001 fdd3 	bl	80033f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  usr_isr_tim1_up();	// SK ADD
 800184a:	f7ff f9e5 	bl	8000c18 <usr_isr_tim1_up>

  /* USER CODE END TIM2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20001ab4 	.word	0x20001ab4

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f005 fb40 	bl	8006f0c <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20018000 	.word	0x20018000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20001b90 	.word	0x20001b90
 80018c0:	200064f8 	.word	0x200064f8

080018c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001904:	4c0b      	ldr	r4, [pc, #44]	; (8001934 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001912:	f7ff ffd7 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001916:	f005 faff 	bl	8006f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff fb41 	bl	8000fa0 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001920:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800192c:	08008714 	.word	0x08008714
  ldr r2, =_sbss
 8001930:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001934:	200064f8 	.word	0x200064f8

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f8d8 	bl	8001b1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	200f      	movs	r0, #15
 800196c:	f7ff fec8 	bl	8001700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fdda 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20001b94 	.word	0x20001b94

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20001b94 	.word	0x20001b94

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff4c 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b42:	f7ff ff61 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	6978      	ldr	r0, [r7, #20]
 8001b4e:	f7ff ffb1 	bl	8001ab4 <NVIC_EncodePriority>
 8001b52:	4602      	mov	r2, r0
 8001b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff80 	bl	8001a60 <__NVIC_SetPriority>
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff54 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e159      	b.n	8001e54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f040 8148 	bne.w	8001e4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d005      	beq.n	8001bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d130      	bne.n	8001c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 0201 	and.w	r2, r3, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d017      	beq.n	8001c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d123      	bne.n	8001cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	08da      	lsrs	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	69b9      	ldr	r1, [r7, #24]
 8001cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80a2 	beq.w	8001e4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b57      	ldr	r3, [pc, #348]	; (8001e6c <HAL_GPIO_Init+0x2e8>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a56      	ldr	r2, [pc, #344]	; (8001e6c <HAL_GPIO_Init+0x2e8>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b54      	ldr	r3, [pc, #336]	; (8001e6c <HAL_GPIO_Init+0x2e8>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d26:	4a52      	ldr	r2, [pc, #328]	; (8001e70 <HAL_GPIO_Init+0x2ec>)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d019      	beq.n	8001d86 <HAL_GPIO_Init+0x202>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a48      	ldr	r2, [pc, #288]	; (8001e78 <HAL_GPIO_Init+0x2f4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_GPIO_Init+0x1fe>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_GPIO_Init+0x2f8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00d      	beq.n	8001d7e <HAL_GPIO_Init+0x1fa>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <HAL_GPIO_Init+0x2fc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d007      	beq.n	8001d7a <HAL_GPIO_Init+0x1f6>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a45      	ldr	r2, [pc, #276]	; (8001e84 <HAL_GPIO_Init+0x300>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_GPIO_Init+0x1f2>
 8001d72:	2304      	movs	r3, #4
 8001d74:	e008      	b.n	8001d88 <HAL_GPIO_Init+0x204>
 8001d76:	2307      	movs	r3, #7
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x204>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e004      	b.n	8001d88 <HAL_GPIO_Init+0x204>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_Init+0x204>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x204>
 8001d86:	2300      	movs	r3, #0
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	4093      	lsls	r3, r2
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d98:	4935      	ldr	r1, [pc, #212]	; (8001e70 <HAL_GPIO_Init+0x2ec>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_GPIO_Init+0x304>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dca:	4a2f      	ldr	r2, [pc, #188]	; (8001e88 <HAL_GPIO_Init+0x304>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_GPIO_Init+0x304>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df4:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <HAL_GPIO_Init+0x304>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <HAL_GPIO_Init+0x304>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e1e:	4a1a      	ldr	r2, [pc, #104]	; (8001e88 <HAL_GPIO_Init+0x304>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_GPIO_Init+0x304>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e48:	4a0f      	ldr	r2, [pc, #60]	; (8001e88 <HAL_GPIO_Init+0x304>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	f67f aea2 	bls.w	8001ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40013800 	.word	0x40013800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	619a      	str	r2, [r3, #24]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b085      	sub	sp, #20
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ed0:	887a      	ldrh	r2, [r7, #2]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	041a      	lsls	r2, r3, #16
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	887b      	ldrh	r3, [r7, #2]
 8001ede:	400b      	ands	r3, r1
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	619a      	str	r2, [r3, #24]
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e267      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d075      	beq.n	8001ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f12:	4b88      	ldr	r3, [pc, #544]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d00c      	beq.n	8001f38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1e:	4b85      	ldr	r3, [pc, #532]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d112      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4b82      	ldr	r3, [pc, #520]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f36:	d10b      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	4b7e      	ldr	r3, [pc, #504]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d05b      	beq.n	8001ffc <HAL_RCC_OscConfig+0x108>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d157      	bne.n	8001ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e242      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f58:	d106      	bne.n	8001f68 <HAL_RCC_OscConfig+0x74>
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e01d      	b.n	8001fa4 <HAL_RCC_OscConfig+0xb0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x98>
 8001f72:	4b70      	ldr	r3, [pc, #448]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6f      	ldr	r2, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6c      	ldr	r2, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCC_OscConfig+0xb0>
 8001f8c:	4b69      	ldr	r3, [pc, #420]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a68      	ldr	r2, [pc, #416]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b66      	ldr	r3, [pc, #408]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a65      	ldr	r2, [pc, #404]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fcfc 	bl	80019a8 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fcf8 	bl	80019a8 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e207      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b5b      	ldr	r3, [pc, #364]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xc0>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fce8 	bl	80019a8 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7ff fce4 	bl	80019a8 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1f3      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	4b51      	ldr	r3, [pc, #324]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0xe8>
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d063      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00b      	beq.n	800202e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800201e:	2b08      	cmp	r3, #8
 8002020:	d11c      	bne.n	800205c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d116      	bne.n	800205c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_RCC_OscConfig+0x152>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e1c7      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002046:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4937      	ldr	r1, [pc, #220]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205a:	e03a      	b.n	80020d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCC_OscConfig+0x244>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7ff fc9d 	bl	80019a8 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002072:	f7ff fc99 	bl	80019a8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1a8      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4925      	ldr	r1, [pc, #148]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_OscConfig+0x244>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff fc7c 	bl	80019a8 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b4:	f7ff fc78 	bl	80019a8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e187      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d036      	beq.n	800214c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_RCC_OscConfig+0x248>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ec:	f7ff fc5c 	bl	80019a8 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f4:	f7ff fc58 	bl	80019a8 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e167      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x240>)
 8002108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x200>
 8002112:	e01b      	b.n	800214c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_OscConfig+0x248>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7ff fc45 	bl	80019a8 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	e00e      	b.n	8002140 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002122:	f7ff fc41 	bl	80019a8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d907      	bls.n	8002140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e150      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
 8002134:	40023800 	.word	0x40023800
 8002138:	42470000 	.word	0x42470000
 800213c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	4b88      	ldr	r3, [pc, #544]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ea      	bne.n	8002122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8097 	beq.w	8002288 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b81      	ldr	r3, [pc, #516]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10f      	bne.n	800218a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b7d      	ldr	r3, [pc, #500]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a7c      	ldr	r2, [pc, #496]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b7a      	ldr	r3, [pc, #488]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002186:	2301      	movs	r3, #1
 8002188:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	4b77      	ldr	r3, [pc, #476]	; (8002368 <HAL_RCC_OscConfig+0x474>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d118      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002196:	4b74      	ldr	r3, [pc, #464]	; (8002368 <HAL_RCC_OscConfig+0x474>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a73      	ldr	r2, [pc, #460]	; (8002368 <HAL_RCC_OscConfig+0x474>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a2:	f7ff fc01 	bl	80019a8 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7ff fbfd 	bl	80019a8 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e10c      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x474>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x2ea>
 80021d0:	4b64      	ldr	r3, [pc, #400]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	4a63      	ldr	r2, [pc, #396]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6713      	str	r3, [r2, #112]	; 0x70
 80021dc:	e01c      	b.n	8002218 <HAL_RCC_OscConfig+0x324>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x30c>
 80021e6:	4b5f      	ldr	r3, [pc, #380]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a5e      	ldr	r2, [pc, #376]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70
 80021f2:	4b5c      	ldr	r3, [pc, #368]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a5b      	ldr	r2, [pc, #364]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0x324>
 8002200:	4b58      	ldr	r3, [pc, #352]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a57      	ldr	r2, [pc, #348]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
 800220c:	4b55      	ldr	r3, [pc, #340]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a54      	ldr	r2, [pc, #336]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002212:	f023 0304 	bic.w	r3, r3, #4
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d015      	beq.n	800224c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7ff fbc2 	bl	80019a8 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002226:	e00a      	b.n	800223e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7ff fbbe 	bl	80019a8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0cb      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	4b49      	ldr	r3, [pc, #292]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0ee      	beq.n	8002228 <HAL_RCC_OscConfig+0x334>
 800224a:	e014      	b.n	8002276 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7ff fbac 	bl	80019a8 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002252:	e00a      	b.n	800226a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7ff fba8 	bl	80019a8 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0b5      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226a:	4b3e      	ldr	r3, [pc, #248]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ee      	bne.n	8002254 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	4a38      	ldr	r2, [pc, #224]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002286:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80a1 	beq.w	80023d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b08      	cmp	r3, #8
 800229c:	d05c      	beq.n	8002358 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d141      	bne.n	800232a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	4b31      	ldr	r3, [pc, #196]	; (800236c <HAL_RCC_OscConfig+0x478>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fb7c 	bl	80019a8 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7ff fb78 	bl	80019a8 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e087      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	491b      	ldr	r1, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x478>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7ff fb51 	bl	80019a8 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230a:	f7ff fb4d 	bl	80019a8 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e05c      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x416>
 8002328:	e054      	b.n	80023d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_RCC_OscConfig+0x478>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fb3a 	bl	80019a8 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002338:	f7ff fb36 	bl	80019a8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e045      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_OscConfig+0x470>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x444>
 8002356:	e03d      	b.n	80023d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e038      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
 8002364:	40023800 	.word	0x40023800
 8002368:	40007000 	.word	0x40007000
 800236c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x4ec>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d028      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d121      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d11a      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a0:	4013      	ands	r3, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d111      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	3b01      	subs	r3, #1
 80023ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d107      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800

080023e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0cc      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d90c      	bls.n	8002420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b65      	ldr	r3, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a58      	ldr	r2, [pc, #352]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800245a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b50      	ldr	r3, [pc, #320]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	494d      	ldr	r1, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d044      	beq.n	8002504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d119      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e07f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e067      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4934      	ldr	r1, [pc, #208]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d4:	f7ff fa68 	bl	80019a8 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7ff fa64 	bl	80019a8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e04f      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d20c      	bcs.n	800252c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e032      	b.n	8002592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4916      	ldr	r1, [pc, #88]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800256a:	f000 f821 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	490a      	ldr	r1, [pc, #40]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f8b8 	bl	8001700 <HAL_InitTick>

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00
 80025a0:	40023800 	.word	0x40023800
 80025a4:	0800853c 	.word	0x0800853c
 80025a8:	20000000 	.word	0x20000000
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b4:	b094      	sub	sp, #80	; 0x50
 80025b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
 80025bc:	2300      	movs	r3, #0
 80025be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c0:	2300      	movs	r3, #0
 80025c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c8:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d00d      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x40>
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	f200 80e1 	bhi.w	800279c <HAL_RCC_GetSysClockFreq+0x1ec>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x34>
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x3a>
 80025e2:	e0db      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e4:	4b73      	ldr	r3, [pc, #460]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80025e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025e8:	e0db      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ea:	4b73      	ldr	r3, [pc, #460]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80025ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ee:	e0d8      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f0:	4b6f      	ldr	r3, [pc, #444]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d063      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002606:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	2200      	movs	r2, #0
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002610:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	2300      	movs	r3, #0
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
 800261e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002622:	4622      	mov	r2, r4
 8002624:	462b      	mov	r3, r5
 8002626:	f04f 0000 	mov.w	r0, #0
 800262a:	f04f 0100 	mov.w	r1, #0
 800262e:	0159      	lsls	r1, r3, #5
 8002630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002634:	0150      	lsls	r0, r2, #5
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4621      	mov	r1, r4
 800263c:	1a51      	subs	r1, r2, r1
 800263e:	6139      	str	r1, [r7, #16]
 8002640:	4629      	mov	r1, r5
 8002642:	eb63 0301 	sbc.w	r3, r3, r1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002654:	4659      	mov	r1, fp
 8002656:	018b      	lsls	r3, r1, #6
 8002658:	4651      	mov	r1, sl
 800265a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800265e:	4651      	mov	r1, sl
 8002660:	018a      	lsls	r2, r1, #6
 8002662:	4651      	mov	r1, sl
 8002664:	ebb2 0801 	subs.w	r8, r2, r1
 8002668:	4659      	mov	r1, fp
 800266a:	eb63 0901 	sbc.w	r9, r3, r1
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800267a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800267e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002682:	4690      	mov	r8, r2
 8002684:	4699      	mov	r9, r3
 8002686:	4623      	mov	r3, r4
 8002688:	eb18 0303 	adds.w	r3, r8, r3
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	462b      	mov	r3, r5
 8002690:	eb49 0303 	adc.w	r3, r9, r3
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026a2:	4629      	mov	r1, r5
 80026a4:	024b      	lsls	r3, r1, #9
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026ac:	4621      	mov	r1, r4
 80026ae:	024a      	lsls	r2, r1, #9
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	2200      	movs	r2, #0
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026c0:	f7fd fdf6 	bl	80002b0 <__aeabi_uldivmod>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4613      	mov	r3, r2
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026cc:	e058      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	2200      	movs	r2, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	4611      	mov	r1, r2
 80026da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026e8:	4642      	mov	r2, r8
 80026ea:	464b      	mov	r3, r9
 80026ec:	f04f 0000 	mov.w	r0, #0
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	0159      	lsls	r1, r3, #5
 80026f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026fa:	0150      	lsls	r0, r2, #5
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4641      	mov	r1, r8
 8002702:	ebb2 0a01 	subs.w	sl, r2, r1
 8002706:	4649      	mov	r1, r9
 8002708:	eb63 0b01 	sbc.w	fp, r3, r1
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002718:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800271c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002720:	ebb2 040a 	subs.w	r4, r2, sl
 8002724:	eb63 050b 	sbc.w	r5, r3, fp
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	00eb      	lsls	r3, r5, #3
 8002732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002736:	00e2      	lsls	r2, r4, #3
 8002738:	4614      	mov	r4, r2
 800273a:	461d      	mov	r5, r3
 800273c:	4643      	mov	r3, r8
 800273e:	18e3      	adds	r3, r4, r3
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	464b      	mov	r3, r9
 8002744:	eb45 0303 	adc.w	r3, r5, r3
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002756:	4629      	mov	r1, r5
 8002758:	028b      	lsls	r3, r1, #10
 800275a:	4621      	mov	r1, r4
 800275c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002760:	4621      	mov	r1, r4
 8002762:	028a      	lsls	r2, r1, #10
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800276a:	2200      	movs	r2, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	61fa      	str	r2, [r7, #28]
 8002770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002774:	f7fd fd9c 	bl	80002b0 <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4613      	mov	r3, r2
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	3301      	adds	r3, #1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800279e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3750      	adds	r7, #80	; 0x50
 80027a8:	46bd      	mov	sp, r7
 80027aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	00f42400 	.word	0x00f42400
 80027b8:	007a1200 	.word	0x007a1200

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff0 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0a9b      	lsrs	r3, r3, #10
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	0800854c 	.word	0x0800854c

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffdc 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0b5b      	lsrs	r3, r3, #13
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	0800854c 	.word	0x0800854c

08002824 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	220f      	movs	r2, #15
 8002832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_GetClockConfig+0x5c>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0203 	and.w	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_RCC_GetClockConfig+0x5c>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <HAL_RCC_GetClockConfig+0x5c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_RCC_GetClockConfig+0x5c>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	08db      	lsrs	r3, r3, #3
 800285e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_RCC_GetClockConfig+0x60>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0207 	and.w	r2, r3, #7
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	601a      	str	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40023c00 	.word	0x40023c00

08002888 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d035      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028b0:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028b6:	f7ff f877 	bl	80019a8 <HAL_GetTick>
 80028ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028be:	f7ff f873 	bl	80019a8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0ba      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028d0:	4b60      	ldr	r3, [pc, #384]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	019a      	lsls	r2, r3, #6
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	071b      	lsls	r3, r3, #28
 80028e8:	495a      	ldr	r1, [pc, #360]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028f0:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028f6:	f7ff f857 	bl	80019a8 <HAL_GetTick>
 80028fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028fe:	f7ff f853 	bl	80019a8 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e09a      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8083 	beq.w	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b49      	ldr	r3, [pc, #292]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a48      	ldr	r2, [pc, #288]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002946:	4b44      	ldr	r3, [pc, #272]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a43      	ldr	r2, [pc, #268]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002952:	f7ff f829 	bl	80019a8 <HAL_GetTick>
 8002956:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7ff f825 	bl	80019a8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e06c      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800296c:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002978:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002980:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02f      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	429a      	cmp	r2, r3
 8002994:	d028      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002996:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a6:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029ac:	4a29      	ldr	r2, [pc, #164]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029b2:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d114      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029be:	f7fe fff3 	bl	80019a8 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	e00a      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe ffef 	bl	80019a8 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e034      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ee      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029f4:	d10d      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0a:	4912      	ldr	r1, [pc, #72]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]
 8002a10:	e005      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4a0f      	ldr	r2, [pc, #60]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a1c:	6093      	str	r3, [r2, #8]
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2a:	490a      	ldr	r1, [pc, #40]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	7c1a      	ldrb	r2, [r3, #16]
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a42:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	42470068 	.word	0x42470068
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	42470e40 	.word	0x42470e40
 8002a60:	424711e0 	.word	0x424711e0

08002a64 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e066      	b.n	8002b48 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7f5b      	ldrb	r3, [r3, #29]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe fd78 	bl	8001580 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	22ca      	movs	r2, #202	; 0xca
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2253      	movs	r2, #83	; 0x53
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fa45 	bl	8002f36 <RTC_EnterInitMode>
 8002aac:	4603      	mov	r3, r0
 8002aae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d12c      	bne.n	8002b10 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6899      	ldr	r1, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68d2      	ldr	r2, [r2, #12]
 8002af0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6919      	ldr	r1, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	041a      	lsls	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fa4c 	bl	8002fa4 <RTC_ExitInitMode>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d113      	bne.n	8002b3e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	22ff      	movs	r2, #255	; 0xff
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	7f1b      	ldrb	r3, [r3, #28]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_RTC_SetTime+0x1c>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e087      	b.n	8002c7c <HAL_RTC_SetTime+0x12c>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2202      	movs	r2, #2
 8002b76:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d126      	bne.n	8002bcc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fa29 	bl	8002fee <RTC_ByteToBcd2>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fa22 	bl	8002fee <RTC_ByteToBcd2>
 8002baa:	4603      	mov	r3, r0
 8002bac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002bae:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	789b      	ldrb	r3, [r3, #2]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fa1a 	bl	8002fee <RTC_ByteToBcd2>
 8002bba:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002bbc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	78db      	ldrb	r3, [r3, #3]
 8002bc4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e018      	b.n	8002bfe <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002bec:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002bf2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	78db      	ldrb	r3, [r3, #3]
 8002bf8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	22ca      	movs	r2, #202	; 0xca
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2253      	movs	r2, #83	; 0x53
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f991 	bl	8002f36 <RTC_EnterInitMode>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d120      	bne.n	8002c60 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002c28:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c2c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f9a4 	bl	8002fa4 <RTC_ExitInitMode>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	22ff      	movs	r2, #255	; 0xff
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	771a      	strb	r2, [r3, #28]

  return status;
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd90      	pop	{r4, r7, pc}

08002c84 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cb6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	0c1b      	lsrs	r3, r3, #16
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	0d9b      	lsrs	r3, r3, #22
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11a      	bne.n	8002d36 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 f98f 	bl	8003028 <RTC_Bcd2ToByte>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f986 	bl	8003028 <RTC_Bcd2ToByte>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	789b      	ldrb	r3, [r3, #2]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 f97d 	bl	8003028 <RTC_Bcd2ToByte>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	7f1b      	ldrb	r3, [r3, #28]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_RTC_SetDate+0x1c>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e071      	b.n	8002e40 <HAL_RTC_SetDate+0x100>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2202      	movs	r2, #2
 8002d66:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10e      	bne.n	8002d8c <HAL_RTC_SetDate+0x4c>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	785b      	ldrb	r3, [r3, #1]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	785b      	ldrb	r3, [r3, #1]
 8002d7e:	f023 0310 	bic.w	r3, r3, #16
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	330a      	adds	r3, #10
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d11c      	bne.n	8002dcc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	78db      	ldrb	r3, [r3, #3]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f929 	bl	8002fee <RTC_ByteToBcd2>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	785b      	ldrb	r3, [r3, #1]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 f922 	bl	8002fee <RTC_ByteToBcd2>
 8002daa:	4603      	mov	r3, r0
 8002dac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002dae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	789b      	ldrb	r3, [r3, #2]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f91a 	bl	8002fee <RTC_ByteToBcd2>
 8002dba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002dbc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e00e      	b.n	8002dea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	78db      	ldrb	r3, [r3, #3]
 8002dd0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	785b      	ldrb	r3, [r3, #1]
 8002dd6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002dd8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002dde:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	22ca      	movs	r2, #202	; 0xca
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2253      	movs	r2, #83	; 0x53
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f89b 	bl	8002f36 <RTC_EnterInitMode>
 8002e00:	4603      	mov	r3, r0
 8002e02:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8c2 	bl	8002fa4 <RTC_ExitInitMode>
 8002e20:	4603      	mov	r3, r0
 8002e22:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	22ff      	movs	r2, #255	; 0xff
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	771a      	strb	r2, [r3, #28]

  return status;
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	0b5b      	lsrs	r3, r3, #13
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d11a      	bne.n	8002edc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	78db      	ldrb	r3, [r3, #3]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f8bc 	bl	8003028 <RTC_Bcd2ToByte>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	785b      	ldrb	r3, [r3, #1]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f8b3 	bl	8003028 <RTC_Bcd2ToByte>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	789b      	ldrb	r3, [r3, #2]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f8aa 	bl	8003028 <RTC_Bcd2ToByte>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f00:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f02:	f7fe fd51 	bl	80019a8 <HAL_GetTick>
 8002f06:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f08:	e009      	b.n	8002f1e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f0a:	f7fe fd4d 	bl	80019a8 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f18:	d901      	bls.n	8002f1e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e007      	b.n	8002f2e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ee      	beq.n	8002f0a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d122      	bne.n	8002f9a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f64:	f7fe fd20 	bl	80019a8 <HAL_GetTick>
 8002f68:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f6a:	e00c      	b.n	8002f86 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f6c:	f7fe fd1c 	bl	80019a8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f7a:	d904      	bls.n	8002f86 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <RTC_EnterInitMode+0x64>
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d1e8      	bne.n	8002f6c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fbe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ff89 	bl	8002ee6 <HAL_RTC_WaitForSynchro>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b085      	sub	sp, #20
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002ffc:	e005      	b.n	800300a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	3301      	adds	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	3b0a      	subs	r3, #10
 8003008:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b09      	cmp	r3, #9
 800300e:	d8f6      	bhi.n	8002ffe <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	b2da      	uxtb	r2, r3
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	4313      	orrs	r3, r2
 800301a:	b2db      	uxtb	r3, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	0092      	lsls	r2, r2, #2
 8003040:	4413      	add	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	b2da      	uxtb	r2, r3
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	4413      	add	r3, r2
 8003052:	b2db      	uxtb	r3, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800306c:	4b59      	ldr	r3, [pc, #356]	; (80031d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a59      	ldr	r2, [pc, #356]	; (80031d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0adb      	lsrs	r3, r3, #11
 8003078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	7f1b      	ldrb	r3, [r3, #28]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800308a:	2302      	movs	r3, #2
 800308c:	e09b      	b.n	80031c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2202      	movs	r2, #2
 8003098:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	22ca      	movs	r2, #202	; 0xca
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2253      	movs	r2, #83	; 0x53
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d017      	beq.n	80030e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	1e5a      	subs	r2, r3, #1
 80030bc:	617a      	str	r2, [r7, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	22ff      	movs	r2, #255	; 0xff
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2203      	movs	r2, #3
 80030ce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e075      	b.n	80031c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e7      	bne.n	80030b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003108:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800310a:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a32      	ldr	r2, [pc, #200]	; (80031d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	0adb      	lsrs	r3, r3, #11
 8003116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	1e5a      	subs	r2, r3, #1
 8003124:	617a      	str	r2, [r7, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	22ff      	movs	r2, #255	; 0xff
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2203      	movs	r2, #3
 8003136:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e041      	b.n	80031c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0e7      	beq.n	8003120 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0207 	bic.w	r2, r2, #7
 800315e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6899      	ldr	r1, [r3, #8]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	430a      	orrs	r2, r1
 800316e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003178:	4b18      	ldr	r3, [pc, #96]	; (80031dc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a17      	ldr	r2, [pc, #92]	; (80031dc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800317e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003182:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800318a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800318e:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800319e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000000 	.word	0x20000000
 80031d8:	10624dd3 	.word	0x10624dd3
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fcb0 	bl	8000b5c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800320c:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003210:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003214:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	775a      	strb	r2, [r3, #29]
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3350      	adds	r3, #80	; 0x50
 800323e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4413      	add	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	601a      	str	r2, [r3, #0]
}
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3350      	adds	r3, #80	; 0x50
 8003270:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e041      	b.n	8003322 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe f998 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f000 fa88 	bl	80037e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	d001      	beq.n	8003344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e044      	b.n	80033ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <HAL_TIM_Base_Start_IT+0xb0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d018      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x6c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d013      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x6c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00e      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x6c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a19      	ldr	r2, [pc, #100]	; (80033e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x6c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d004      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x6c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a16      	ldr	r2, [pc, #88]	; (80033ec <HAL_TIM_Base_Start_IT+0xc0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d111      	bne.n	80033bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d010      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ba:	e007      	b.n	80033cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40010000 	.word	0x40010000
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40000800 	.word	0x40000800
 80033e8:	40000c00 	.word	0x40000c00
 80033ec:	40014000 	.word	0x40014000

080033f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b02      	cmp	r3, #2
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0202 	mvn.w	r2, #2
 800341c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f9b5 	bl	80037a2 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9a7 	bl	800378e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f9b8 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b04      	cmp	r3, #4
 8003458:	d122      	bne.n	80034a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b04      	cmp	r3, #4
 8003466:	d11b      	bne.n	80034a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0204 	mvn.w	r2, #4
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f98b 	bl	80037a2 <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f97d 	bl	800378e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f98e 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d122      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d11b      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0208 	mvn.w	r2, #8
 80034c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2204      	movs	r2, #4
 80034ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f961 	bl	80037a2 <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f953 	bl	800378e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f964 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b10      	cmp	r3, #16
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0210 	mvn.w	r2, #16
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2208      	movs	r2, #8
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f937 	bl	80037a2 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f929 	bl	800378e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f93a 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0201 	mvn.w	r2, #1
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd ffc2 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b80      	cmp	r3, #128	; 0x80
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fab2 	bl	8003b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d10e      	bne.n	80035cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d107      	bne.n	80035cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8ff 	bl	80037ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d10e      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0220 	mvn.w	r2, #32
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa7c 	bl	8003af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_TIM_ConfigClockSource+0x1c>
 8003618:	2302      	movs	r3, #2
 800361a:	e0b4      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x186>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800363a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003654:	d03e      	beq.n	80036d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365a:	f200 8087 	bhi.w	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003662:	f000 8086 	beq.w	8003772 <HAL_TIM_ConfigClockSource+0x172>
 8003666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366a:	d87f      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b70      	cmp	r3, #112	; 0x70
 800366e:	d01a      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003670:	2b70      	cmp	r3, #112	; 0x70
 8003672:	d87b      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b60      	cmp	r3, #96	; 0x60
 8003676:	d050      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x11a>
 8003678:	2b60      	cmp	r3, #96	; 0x60
 800367a:	d877      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b50      	cmp	r3, #80	; 0x50
 800367e:	d03c      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0xfa>
 8003680:	2b50      	cmp	r3, #80	; 0x50
 8003682:	d873      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d058      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x13a>
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d86f      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b30      	cmp	r3, #48	; 0x30
 800368e:	d064      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 8003690:	2b30      	cmp	r3, #48	; 0x30
 8003692:	d86b      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 8003694:	2b20      	cmp	r3, #32
 8003696:	d060      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 8003698:	2b20      	cmp	r3, #32
 800369a:	d867      	bhi.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d05c      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d05a      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x15a>
 80036a4:	e062      	b.n	800376c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6899      	ldr	r1, [r3, #8]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f000 f98d 	bl	80039d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	609a      	str	r2, [r3, #8]
      break;
 80036d2:	e04f      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6899      	ldr	r1, [r3, #8]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f000 f976 	bl	80039d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f6:	609a      	str	r2, [r3, #8]
      break;
 80036f8:	e03c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	461a      	mov	r2, r3
 8003708:	f000 f8ea 	bl	80038e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2150      	movs	r1, #80	; 0x50
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f943 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 8003718:	e02c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	461a      	mov	r2, r3
 8003728:	f000 f909 	bl	800393e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2160      	movs	r1, #96	; 0x60
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f933 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 8003738:	e01c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	461a      	mov	r2, r3
 8003748:	f000 f8ca 	bl	80038e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2140      	movs	r1, #64	; 0x40
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f923 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 8003758:	e00c      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f000 f91a 	bl	800399e <TIM_ITRx_SetConfig>
      break;
 800376a:	e003      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e000      	b.n	8003774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a34      	ldr	r2, [pc, #208]	; (80038c4 <TIM_Base_SetConfig+0xe4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00f      	beq.n	8003818 <TIM_Base_SetConfig+0x38>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d00b      	beq.n	8003818 <TIM_Base_SetConfig+0x38>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a31      	ldr	r2, [pc, #196]	; (80038c8 <TIM_Base_SetConfig+0xe8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d007      	beq.n	8003818 <TIM_Base_SetConfig+0x38>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a30      	ldr	r2, [pc, #192]	; (80038cc <TIM_Base_SetConfig+0xec>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_Base_SetConfig+0x38>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a2f      	ldr	r2, [pc, #188]	; (80038d0 <TIM_Base_SetConfig+0xf0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d108      	bne.n	800382a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a25      	ldr	r2, [pc, #148]	; (80038c4 <TIM_Base_SetConfig+0xe4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01b      	beq.n	800386a <TIM_Base_SetConfig+0x8a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003838:	d017      	beq.n	800386a <TIM_Base_SetConfig+0x8a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <TIM_Base_SetConfig+0xe8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <TIM_Base_SetConfig+0x8a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a21      	ldr	r2, [pc, #132]	; (80038cc <TIM_Base_SetConfig+0xec>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00f      	beq.n	800386a <TIM_Base_SetConfig+0x8a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a20      	ldr	r2, [pc, #128]	; (80038d0 <TIM_Base_SetConfig+0xf0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00b      	beq.n	800386a <TIM_Base_SetConfig+0x8a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <TIM_Base_SetConfig+0xf4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d007      	beq.n	800386a <TIM_Base_SetConfig+0x8a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <TIM_Base_SetConfig+0xf8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d003      	beq.n	800386a <TIM_Base_SetConfig+0x8a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <TIM_Base_SetConfig+0xfc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d108      	bne.n	800387c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <TIM_Base_SetConfig+0xe4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d103      	bne.n	80038b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	615a      	str	r2, [r3, #20]
}
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014400 	.word	0x40014400
 80038dc:	40014800 	.word	0x40014800

080038e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f023 0201 	bic.w	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f023 030a 	bic.w	r3, r3, #10
 800391c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800393e:	b480      	push	{r7}
 8003940:	b087      	sub	sp, #28
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0210 	bic.w	r2, r3, #16
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	031b      	lsls	r3, r3, #12
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800397a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800399e:	b480      	push	{r7}
 80039a0:	b085      	sub	sp, #20
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f043 0307 	orr.w	r3, r3, #7
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	609a      	str	r2, [r3, #8]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e050      	b.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d018      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a78:	d013      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d10c      	bne.n	8003abc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40010000 	.word	0x40010000
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00
 8003aec:	40014000 	.word	0x40014000

08003af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e03f      	b.n	8003baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fd96 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	; 0x24
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f9cb 	bl	8003ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b08a      	sub	sp, #40	; 0x28
 8003bb6:	af02      	add	r7, sp, #8
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d17c      	bne.n	8003ccc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_UART_Transmit+0x2c>
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e075      	b.n	8003cce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_UART_Transmit+0x3e>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e06e      	b.n	8003cce <HAL_UART_Transmit+0x11c>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2221      	movs	r2, #33	; 0x21
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c06:	f7fd fecf 	bl	80019a8 <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	88fa      	ldrh	r2, [r7, #6]
 8003c10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	88fa      	ldrh	r2, [r7, #6]
 8003c16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c20:	d108      	bne.n	8003c34 <HAL_UART_Transmit+0x82>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d104      	bne.n	8003c34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e003      	b.n	8003c3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c44:	e02a      	b.n	8003c9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2180      	movs	r1, #128	; 0x80
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f8e2 	bl	8003e1a <UART_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e036      	b.n	8003cce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10b      	bne.n	8003c7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	3302      	adds	r3, #2
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	e007      	b.n	8003c8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1cf      	bne.n	8003c46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2140      	movs	r1, #64	; 0x40
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f8b2 	bl	8003e1a <UART_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e006      	b.n	8003cce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e000      	b.n	8003cce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b08a      	sub	sp, #40	; 0x28
 8003cda:	af02      	add	r7, sp, #8
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	f040 808c 	bne.w	8003e10 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_UART_Receive+0x2e>
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e084      	b.n	8003e12 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_UART_Receive+0x40>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e07d      	b.n	8003e12 <HAL_UART_Receive+0x13c>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2222      	movs	r2, #34	; 0x22
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d32:	f7fd fe39 	bl	80019a8 <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d108      	bne.n	8003d60 <HAL_UART_Receive+0x8a>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e003      	b.n	8003d68 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d70:	e043      	b.n	8003dfa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2120      	movs	r1, #32
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f84c 	bl	8003e1a <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e042      	b.n	8003e12 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10c      	bne.n	8003dac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	3302      	adds	r3, #2
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	e01f      	b.n	8003dec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db4:	d007      	beq.n	8003dc6 <HAL_UART_Receive+0xf0>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_UART_Receive+0xfe>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e008      	b.n	8003de6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3301      	adds	r3, #1
 8003dea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1b6      	bne.n	8003d72 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b090      	sub	sp, #64	; 0x40
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2a:	e050      	b.n	8003ece <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	d04c      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e3a:	f7fd fdb5 	bl	80019a8 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d241      	bcs.n	8003ece <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e6a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e5      	bne.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3314      	adds	r3, #20
 8003e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e9e:	623a      	str	r2, [r7, #32]
 8003ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	69f9      	ldr	r1, [r7, #28]
 8003ea4:	6a3a      	ldr	r2, [r7, #32]
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e5      	bne.n	8003e7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e00f      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d09f      	beq.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3740      	adds	r7, #64	; 0x40
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003efc:	b0c0      	sub	sp, #256	; 0x100
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	68d9      	ldr	r1, [r3, #12]
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	ea40 0301 	orr.w	r3, r0, r1
 8003f20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f50:	f021 010c 	bic.w	r1, r1, #12
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f72:	6999      	ldr	r1, [r3, #24]
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	ea40 0301 	orr.w	r3, r0, r1
 8003f7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b8f      	ldr	r3, [pc, #572]	; (80041c4 <UART_SetConfig+0x2cc>)
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d005      	beq.n	8003f98 <UART_SetConfig+0xa0>
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b8d      	ldr	r3, [pc, #564]	; (80041c8 <UART_SetConfig+0x2d0>)
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d104      	bne.n	8003fa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f98:	f7fe fc30 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003f9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fa0:	e003      	b.n	8003faa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fa2:	f7fe fc17 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8003fa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb4:	f040 810c 	bne.w	80041d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fca:	4622      	mov	r2, r4
 8003fcc:	462b      	mov	r3, r5
 8003fce:	1891      	adds	r1, r2, r2
 8003fd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fd2:	415b      	adcs	r3, r3
 8003fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fda:	4621      	mov	r1, r4
 8003fdc:	eb12 0801 	adds.w	r8, r2, r1
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	eb43 0901 	adc.w	r9, r3, r1
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ffa:	4690      	mov	r8, r2
 8003ffc:	4699      	mov	r9, r3
 8003ffe:	4623      	mov	r3, r4
 8004000:	eb18 0303 	adds.w	r3, r8, r3
 8004004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004008:	462b      	mov	r3, r5
 800400a:	eb49 0303 	adc.w	r3, r9, r3
 800400e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800401e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004022:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004026:	460b      	mov	r3, r1
 8004028:	18db      	adds	r3, r3, r3
 800402a:	653b      	str	r3, [r7, #80]	; 0x50
 800402c:	4613      	mov	r3, r2
 800402e:	eb42 0303 	adc.w	r3, r2, r3
 8004032:	657b      	str	r3, [r7, #84]	; 0x54
 8004034:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004038:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800403c:	f7fc f938 	bl	80002b0 <__aeabi_uldivmod>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4b61      	ldr	r3, [pc, #388]	; (80041cc <UART_SetConfig+0x2d4>)
 8004046:	fba3 2302 	umull	r2, r3, r3, r2
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	011c      	lsls	r4, r3, #4
 800404e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004052:	2200      	movs	r2, #0
 8004054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004058:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800405c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004060:	4642      	mov	r2, r8
 8004062:	464b      	mov	r3, r9
 8004064:	1891      	adds	r1, r2, r2
 8004066:	64b9      	str	r1, [r7, #72]	; 0x48
 8004068:	415b      	adcs	r3, r3
 800406a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004070:	4641      	mov	r1, r8
 8004072:	eb12 0a01 	adds.w	sl, r2, r1
 8004076:	4649      	mov	r1, r9
 8004078:	eb43 0b01 	adc.w	fp, r3, r1
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004088:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800408c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004090:	4692      	mov	sl, r2
 8004092:	469b      	mov	fp, r3
 8004094:	4643      	mov	r3, r8
 8004096:	eb1a 0303 	adds.w	r3, sl, r3
 800409a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800409e:	464b      	mov	r3, r9
 80040a0:	eb4b 0303 	adc.w	r3, fp, r3
 80040a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040bc:	460b      	mov	r3, r1
 80040be:	18db      	adds	r3, r3, r3
 80040c0:	643b      	str	r3, [r7, #64]	; 0x40
 80040c2:	4613      	mov	r3, r2
 80040c4:	eb42 0303 	adc.w	r3, r2, r3
 80040c8:	647b      	str	r3, [r7, #68]	; 0x44
 80040ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040d2:	f7fc f8ed 	bl	80002b0 <__aeabi_uldivmod>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4611      	mov	r1, r2
 80040dc:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <UART_SetConfig+0x2d4>)
 80040de:	fba3 2301 	umull	r2, r3, r3, r1
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2264      	movs	r2, #100	; 0x64
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	1acb      	subs	r3, r1, r3
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040f2:	4b36      	ldr	r3, [pc, #216]	; (80041cc <UART_SetConfig+0x2d4>)
 80040f4:	fba3 2302 	umull	r2, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004100:	441c      	add	r4, r3
 8004102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004106:	2200      	movs	r2, #0
 8004108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800410c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004110:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004114:	4642      	mov	r2, r8
 8004116:	464b      	mov	r3, r9
 8004118:	1891      	adds	r1, r2, r2
 800411a:	63b9      	str	r1, [r7, #56]	; 0x38
 800411c:	415b      	adcs	r3, r3
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004120:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004124:	4641      	mov	r1, r8
 8004126:	1851      	adds	r1, r2, r1
 8004128:	6339      	str	r1, [r7, #48]	; 0x30
 800412a:	4649      	mov	r1, r9
 800412c:	414b      	adcs	r3, r1
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800413c:	4659      	mov	r1, fp
 800413e:	00cb      	lsls	r3, r1, #3
 8004140:	4651      	mov	r1, sl
 8004142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004146:	4651      	mov	r1, sl
 8004148:	00ca      	lsls	r2, r1, #3
 800414a:	4610      	mov	r0, r2
 800414c:	4619      	mov	r1, r3
 800414e:	4603      	mov	r3, r0
 8004150:	4642      	mov	r2, r8
 8004152:	189b      	adds	r3, r3, r2
 8004154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004158:	464b      	mov	r3, r9
 800415a:	460a      	mov	r2, r1
 800415c:	eb42 0303 	adc.w	r3, r2, r3
 8004160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004170:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004174:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004178:	460b      	mov	r3, r1
 800417a:	18db      	adds	r3, r3, r3
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
 800417e:	4613      	mov	r3, r2
 8004180:	eb42 0303 	adc.w	r3, r2, r3
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800418a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800418e:	f7fc f88f 	bl	80002b0 <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <UART_SetConfig+0x2d4>)
 8004198:	fba3 1302 	umull	r1, r3, r3, r2
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	2164      	movs	r1, #100	; 0x64
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	3332      	adds	r3, #50	; 0x32
 80041aa:	4a08      	ldr	r2, [pc, #32]	; (80041cc <UART_SetConfig+0x2d4>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	f003 0207 	and.w	r2, r3, #7
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4422      	add	r2, r4
 80041be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041c0:	e105      	b.n	80043ce <UART_SetConfig+0x4d6>
 80041c2:	bf00      	nop
 80041c4:	40011000 	.word	0x40011000
 80041c8:	40011400 	.word	0x40011400
 80041cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041e2:	4642      	mov	r2, r8
 80041e4:	464b      	mov	r3, r9
 80041e6:	1891      	adds	r1, r2, r2
 80041e8:	6239      	str	r1, [r7, #32]
 80041ea:	415b      	adcs	r3, r3
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
 80041ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041f2:	4641      	mov	r1, r8
 80041f4:	1854      	adds	r4, r2, r1
 80041f6:	4649      	mov	r1, r9
 80041f8:	eb43 0501 	adc.w	r5, r3, r1
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	00eb      	lsls	r3, r5, #3
 8004206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800420a:	00e2      	lsls	r2, r4, #3
 800420c:	4614      	mov	r4, r2
 800420e:	461d      	mov	r5, r3
 8004210:	4643      	mov	r3, r8
 8004212:	18e3      	adds	r3, r4, r3
 8004214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004218:	464b      	mov	r3, r9
 800421a:	eb45 0303 	adc.w	r3, r5, r3
 800421e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800422e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800423e:	4629      	mov	r1, r5
 8004240:	008b      	lsls	r3, r1, #2
 8004242:	4621      	mov	r1, r4
 8004244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004248:	4621      	mov	r1, r4
 800424a:	008a      	lsls	r2, r1, #2
 800424c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004250:	f7fc f82e 	bl	80002b0 <__aeabi_uldivmod>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4b60      	ldr	r3, [pc, #384]	; (80043dc <UART_SetConfig+0x4e4>)
 800425a:	fba3 2302 	umull	r2, r3, r3, r2
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	011c      	lsls	r4, r3, #4
 8004262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004266:	2200      	movs	r2, #0
 8004268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800426c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004270:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004274:	4642      	mov	r2, r8
 8004276:	464b      	mov	r3, r9
 8004278:	1891      	adds	r1, r2, r2
 800427a:	61b9      	str	r1, [r7, #24]
 800427c:	415b      	adcs	r3, r3
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004284:	4641      	mov	r1, r8
 8004286:	1851      	adds	r1, r2, r1
 8004288:	6139      	str	r1, [r7, #16]
 800428a:	4649      	mov	r1, r9
 800428c:	414b      	adcs	r3, r1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800429c:	4659      	mov	r1, fp
 800429e:	00cb      	lsls	r3, r1, #3
 80042a0:	4651      	mov	r1, sl
 80042a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a6:	4651      	mov	r1, sl
 80042a8:	00ca      	lsls	r2, r1, #3
 80042aa:	4610      	mov	r0, r2
 80042ac:	4619      	mov	r1, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	4642      	mov	r2, r8
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042b8:	464b      	mov	r3, r9
 80042ba:	460a      	mov	r2, r1
 80042bc:	eb42 0303 	adc.w	r3, r2, r3
 80042c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042dc:	4649      	mov	r1, r9
 80042de:	008b      	lsls	r3, r1, #2
 80042e0:	4641      	mov	r1, r8
 80042e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e6:	4641      	mov	r1, r8
 80042e8:	008a      	lsls	r2, r1, #2
 80042ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042ee:	f7fb ffdf 	bl	80002b0 <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4b39      	ldr	r3, [pc, #228]	; (80043dc <UART_SetConfig+0x4e4>)
 80042f8:	fba3 1302 	umull	r1, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	2164      	movs	r1, #100	; 0x64
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	3332      	adds	r3, #50	; 0x32
 800430a:	4a34      	ldr	r2, [pc, #208]	; (80043dc <UART_SetConfig+0x4e4>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004316:	441c      	add	r4, r3
 8004318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800431c:	2200      	movs	r2, #0
 800431e:	673b      	str	r3, [r7, #112]	; 0x70
 8004320:	677a      	str	r2, [r7, #116]	; 0x74
 8004322:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004326:	4642      	mov	r2, r8
 8004328:	464b      	mov	r3, r9
 800432a:	1891      	adds	r1, r2, r2
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	415b      	adcs	r3, r3
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004336:	4641      	mov	r1, r8
 8004338:	1851      	adds	r1, r2, r1
 800433a:	6039      	str	r1, [r7, #0]
 800433c:	4649      	mov	r1, r9
 800433e:	414b      	adcs	r3, r1
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800434e:	4659      	mov	r1, fp
 8004350:	00cb      	lsls	r3, r1, #3
 8004352:	4651      	mov	r1, sl
 8004354:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004358:	4651      	mov	r1, sl
 800435a:	00ca      	lsls	r2, r1, #3
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	4603      	mov	r3, r0
 8004362:	4642      	mov	r2, r8
 8004364:	189b      	adds	r3, r3, r2
 8004366:	66bb      	str	r3, [r7, #104]	; 0x68
 8004368:	464b      	mov	r3, r9
 800436a:	460a      	mov	r2, r1
 800436c:	eb42 0303 	adc.w	r3, r2, r3
 8004370:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	663b      	str	r3, [r7, #96]	; 0x60
 800437c:	667a      	str	r2, [r7, #100]	; 0x64
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800438a:	4649      	mov	r1, r9
 800438c:	008b      	lsls	r3, r1, #2
 800438e:	4641      	mov	r1, r8
 8004390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004394:	4641      	mov	r1, r8
 8004396:	008a      	lsls	r2, r1, #2
 8004398:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800439c:	f7fb ff88 	bl	80002b0 <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <UART_SetConfig+0x4e4>)
 80043a6:	fba3 1302 	umull	r1, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	2164      	movs	r1, #100	; 0x64
 80043ae:	fb01 f303 	mul.w	r3, r1, r3
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	3332      	adds	r3, #50	; 0x32
 80043b8:	4a08      	ldr	r2, [pc, #32]	; (80043dc <UART_SetConfig+0x4e4>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	f003 020f 	and.w	r2, r3, #15
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4422      	add	r2, r4
 80043cc:	609a      	str	r2, [r3, #8]
}
 80043ce:	bf00      	nop
 80043d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043d4:	46bd      	mov	sp, r7
 80043d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043da:	bf00      	nop
 80043dc:	51eb851f 	.word	0x51eb851f

080043e0 <__NVIC_SetPriority>:
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	6039      	str	r1, [r7, #0]
 80043ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	db0a      	blt.n	800440a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	490c      	ldr	r1, [pc, #48]	; (800442c <__NVIC_SetPriority+0x4c>)
 80043fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fe:	0112      	lsls	r2, r2, #4
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	440b      	add	r3, r1
 8004404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004408:	e00a      	b.n	8004420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4908      	ldr	r1, [pc, #32]	; (8004430 <__NVIC_SetPriority+0x50>)
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	3b04      	subs	r3, #4
 8004418:	0112      	lsls	r2, r2, #4
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	440b      	add	r3, r1
 800441e:	761a      	strb	r2, [r3, #24]
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	e000e100 	.word	0xe000e100
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <SysTick_Handler+0x1c>)
 800443a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800443c:	f001 fcfe 	bl	8005e3c <xTaskGetSchedulerState>
 8004440:	4603      	mov	r3, r0
 8004442:	2b01      	cmp	r3, #1
 8004444:	d001      	beq.n	800444a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004446:	f002 fae7 	bl	8006a18 <xPortSysTickHandler>
  }
}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	e000e010 	.word	0xe000e010

08004454 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004458:	2100      	movs	r1, #0
 800445a:	f06f 0004 	mvn.w	r0, #4
 800445e:	f7ff ffbf 	bl	80043e0 <__NVIC_SetPriority>
#endif
}
 8004462:	bf00      	nop
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800446e:	f3ef 8305 	mrs	r3, IPSR
 8004472:	603b      	str	r3, [r7, #0]
  return(result);
 8004474:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800447a:	f06f 0305 	mvn.w	r3, #5
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	e00c      	b.n	800449c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <osKernelInitialize+0x44>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <osKernelInitialize+0x44>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004490:	2300      	movs	r3, #0
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	e002      	b.n	800449c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004496:	f04f 33ff 	mov.w	r3, #4294967295
 800449a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800449c:	687b      	ldr	r3, [r7, #4]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20001b98 	.word	0x20001b98

080044b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044b6:	f3ef 8305 	mrs	r3, IPSR
 80044ba:	603b      	str	r3, [r7, #0]
  return(result);
 80044bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80044c2:	f06f 0305 	mvn.w	r3, #5
 80044c6:	607b      	str	r3, [r7, #4]
 80044c8:	e010      	b.n	80044ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <osKernelStart+0x48>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d109      	bne.n	80044e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044d2:	f7ff ffbf 	bl	8004454 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <osKernelStart+0x48>)
 80044d8:	2202      	movs	r2, #2
 80044da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044dc:	f001 f866 	bl	80055ac <vTaskStartScheduler>
      stat = osOK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	e002      	b.n	80044ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044e6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044ec:	687b      	ldr	r3, [r7, #4]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20001b98 	.word	0x20001b98

080044fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08e      	sub	sp, #56	; 0x38
 8004500:	af04      	add	r7, sp, #16
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800450c:	f3ef 8305 	mrs	r3, IPSR
 8004510:	617b      	str	r3, [r7, #20]
  return(result);
 8004512:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004514:	2b00      	cmp	r3, #0
 8004516:	d17e      	bne.n	8004616 <osThreadNew+0x11a>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d07b      	beq.n	8004616 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004522:	2318      	movs	r3, #24
 8004524:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800452a:	f04f 33ff 	mov.w	r3, #4294967295
 800452e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d045      	beq.n	80045c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <osThreadNew+0x48>
        name = attr->name;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <osThreadNew+0x6e>
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	2b38      	cmp	r3, #56	; 0x38
 800455c:	d805      	bhi.n	800456a <osThreadNew+0x6e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <osThreadNew+0x72>
        return (NULL);
 800456a:	2300      	movs	r3, #0
 800456c:	e054      	b.n	8004618 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00e      	beq.n	80045a4 <osThreadNew+0xa8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b5b      	cmp	r3, #91	; 0x5b
 800458c:	d90a      	bls.n	80045a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004592:	2b00      	cmp	r3, #0
 8004594:	d006      	beq.n	80045a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <osThreadNew+0xa8>
        mem = 1;
 800459e:	2301      	movs	r3, #1
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e010      	b.n	80045c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10c      	bne.n	80045c6 <osThreadNew+0xca>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d108      	bne.n	80045c6 <osThreadNew+0xca>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <osThreadNew+0xca>
          mem = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e001      	b.n	80045c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d110      	bne.n	80045ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045d4:	9202      	str	r2, [sp, #8]
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	6a3a      	ldr	r2, [r7, #32]
 80045e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fe0c 	bl	8005200 <xTaskCreateStatic>
 80045e8:	4603      	mov	r3, r0
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e013      	b.n	8004616 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d110      	bne.n	8004616 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	f107 0310 	add.w	r3, r7, #16
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fe57 	bl	80052ba <xTaskCreate>
 800460c:	4603      	mov	r3, r0
 800460e:	2b01      	cmp	r3, #1
 8004610:	d001      	beq.n	8004616 <osThreadNew+0x11a>
            hTask = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004616:	693b      	ldr	r3, [r7, #16]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004628:	f3ef 8305 	mrs	r3, IPSR
 800462c:	60bb      	str	r3, [r7, #8]
  return(result);
 800462e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <osDelay+0x1c>
    stat = osErrorISR;
 8004634:	f06f 0305 	mvn.w	r3, #5
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e007      	b.n	800464c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 ff7c 	bl	8005544 <vTaskDelay>
    }
  }

  return (stat);
 800464c:	68fb      	ldr	r3, [r7, #12]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a07      	ldr	r2, [pc, #28]	; (8004684 <vApplicationGetIdleTaskMemory+0x2c>)
 8004668:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4a06      	ldr	r2, [pc, #24]	; (8004688 <vApplicationGetIdleTaskMemory+0x30>)
 800466e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	601a      	str	r2, [r3, #0]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20001b9c 	.word	0x20001b9c
 8004688:	20001bf8 	.word	0x20001bf8

0800468c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800469c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4a06      	ldr	r2, [pc, #24]	; (80046bc <vApplicationGetTimerTaskMemory+0x30>)
 80046a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046aa:	601a      	str	r2, [r3, #0]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	20001df8 	.word	0x20001df8
 80046bc:	20001e54 	.word	0x20001e54

080046c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f103 0208 	add.w	r2, r3, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f103 0208 	add.w	r2, r3, #8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f103 0208 	add.w	r2, r3, #8
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
}
 8004756:	bf00      	nop
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d103      	bne.n	8004782 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	e00c      	b.n	800479c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3308      	adds	r3, #8
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e002      	b.n	8004790 <vListInsert+0x2e>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	429a      	cmp	r2, r3
 800479a:	d2f6      	bcs.n	800478a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	601a      	str	r2, [r3, #0]
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6892      	ldr	r2, [r2, #8]
 80047ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6852      	ldr	r2, [r2, #4]
 80047f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d103      	bne.n	8004808 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	1e5a      	subs	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800484e:	bf00      	nop
 8004850:	e7fe      	b.n	8004850 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004852:	f002 f84f 	bl	80068f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485e:	68f9      	ldr	r1, [r7, #12]
 8004860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	441a      	add	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	3b01      	subs	r3, #1
 8004884:	68f9      	ldr	r1, [r7, #12]
 8004886:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004888:	fb01 f303 	mul.w	r3, r1, r3
 800488c:	441a      	add	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	22ff      	movs	r2, #255	; 0xff
 8004896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	22ff      	movs	r2, #255	; 0xff
 800489e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d114      	bne.n	80048d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01a      	beq.n	80048e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3310      	adds	r3, #16
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 f903 	bl	8005ac0 <xTaskRemoveFromEventList>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d012      	beq.n	80048e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <xQueueGenericReset+0xcc>)
 80048c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	e009      	b.n	80048e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3310      	adds	r3, #16
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fef2 	bl	80046c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3324      	adds	r3, #36	; 0x24
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff feed 	bl	80046c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048e6:	f002 f835 	bl	8006954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048ea:	2301      	movs	r3, #1
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08e      	sub	sp, #56	; 0x38
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
}
 800493a:	bf00      	nop
 800493c:	e7fe      	b.n	800493c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <xQueueGenericCreateStatic+0x52>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <xQueueGenericCreateStatic+0x56>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <xQueueGenericCreateStatic+0x58>
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	623b      	str	r3, [r7, #32]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <xQueueGenericCreateStatic+0x7e>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <xQueueGenericCreateStatic+0x82>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <xQueueGenericCreateStatic+0x84>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	61fb      	str	r3, [r7, #28]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004996:	2350      	movs	r3, #80	; 0x50
 8004998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b50      	cmp	r3, #80	; 0x50
 800499e:	d00a      	beq.n	80049b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	61bb      	str	r3, [r7, #24]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f805 	bl	80049e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3730      	adds	r7, #48	; 0x30
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e002      	b.n	8004a0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a16:	2101      	movs	r1, #1
 8004a18:	69b8      	ldr	r0, [r7, #24]
 8004a1a:	f7ff ff05 	bl	8004828 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08e      	sub	sp, #56	; 0x38
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xQueueGenericSend+0x32>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <xQueueGenericSend+0x40>
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <xQueueGenericSend+0x44>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <xQueueGenericSend+0x46>
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <xQueueGenericSend+0x60>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d103      	bne.n	8004a9e <xQueueGenericSend+0x6e>
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <xQueueGenericSend+0x72>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueGenericSend+0x74>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xQueueGenericSend+0x8e>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	623b      	str	r3, [r7, #32]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004abe:	f001 f9bd 	bl	8005e3c <xTaskGetSchedulerState>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <xQueueGenericSend+0x9e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <xQueueGenericSend+0xa2>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <xQueueGenericSend+0xa4>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <xQueueGenericSend+0xbe>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	61fb      	str	r3, [r7, #28]
}
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aee:	f001 ff01 	bl	80068f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <xQueueGenericSend+0xd4>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d129      	bne.n	8004b58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b0a:	f000 fa0b 	bl	8004f24 <prvCopyDataToQueue>
 8004b0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	3324      	adds	r3, #36	; 0x24
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 ffcf 	bl	8005ac0 <xTaskRemoveFromEventList>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d013      	beq.n	8004b50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b28:	4b3f      	ldr	r3, [pc, #252]	; (8004c28 <xQueueGenericSend+0x1f8>)
 8004b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	e00a      	b.n	8004b50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b40:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <xQueueGenericSend+0x1f8>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b50:	f001 ff00 	bl	8006954 <vPortExitCritical>
				return pdPASS;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e063      	b.n	8004c20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b5e:	f001 fef9 	bl	8006954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e05c      	b.n	8004c20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 f809 	bl	8005b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b76:	2301      	movs	r3, #1
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b7a:	f001 feeb 	bl	8006954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b7e:	f000 fd7b 	bl	8005678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b82:	f001 feb7 	bl	80068f4 <vPortEnterCritical>
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d103      	bne.n	8004b9c <xQueueGenericSend+0x16c>
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ba2:	b25b      	sxtb	r3, r3
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d103      	bne.n	8004bb2 <xQueueGenericSend+0x182>
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb2:	f001 fecf 	bl	8006954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bb6:	1d3a      	adds	r2, r7, #4
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fff8 	bl	8005bb4 <xTaskCheckForTimeOut>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d124      	bne.n	8004c14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bcc:	f000 faa2 	bl	8005114 <prvIsQueueFull>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d018      	beq.n	8004c08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	3310      	adds	r3, #16
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 ff1e 	bl	8005a20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004be6:	f000 fa2d 	bl	8005044 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bea:	f000 fd53 	bl	8005694 <xTaskResumeAll>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f af7c 	bne.w	8004aee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <xQueueGenericSend+0x1f8>)
 8004bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	e772      	b.n	8004aee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c0a:	f000 fa1b 	bl	8005044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c0e:	f000 fd41 	bl	8005694 <xTaskResumeAll>
 8004c12:	e76c      	b.n	8004aee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c16:	f000 fa15 	bl	8005044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c1a:	f000 fd3b 	bl	8005694 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3738      	adds	r7, #56	; 0x38
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b090      	sub	sp, #64	; 0x40
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d103      	bne.n	8004c68 <xQueueGenericSendFromISR+0x3c>
 8004c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <xQueueGenericSendFromISR+0x40>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <xQueueGenericSendFromISR+0x42>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d103      	bne.n	8004c96 <xQueueGenericSendFromISR+0x6a>
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <xQueueGenericSendFromISR+0x6e>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <xQueueGenericSendFromISR+0x70>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	623b      	str	r3, [r7, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cb6:	f001 feff 	bl	8006ab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cba:	f3ef 8211 	mrs	r2, BASEPRI
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	61fa      	str	r2, [r7, #28]
 8004cd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <xQueueGenericSendFromISR+0xbc>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d12f      	bne.n	8004d48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cfe:	f000 f911 	bl	8004f24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d112      	bne.n	8004d32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d016      	beq.n	8004d42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	3324      	adds	r3, #36	; 0x24
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fed1 	bl	8005ac0 <xTaskRemoveFromEventList>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00b      	beq.n	8004d42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	e007      	b.n	8004d42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d36:	3301      	adds	r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	b25a      	sxtb	r2, r3
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d42:	2301      	movs	r3, #1
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d46:	e001      	b.n	8004d4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3740      	adds	r7, #64	; 0x40
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08c      	sub	sp, #48	; 0x30
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <xQueueReceive+0x30>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	623b      	str	r3, [r7, #32]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <xQueueReceive+0x3e>
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <xQueueReceive+0x42>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <xQueueReceive+0x44>
 8004da6:	2300      	movs	r3, #0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <xQueueReceive+0x5e>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	61fb      	str	r3, [r7, #28]
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dc2:	f001 f83b 	bl	8005e3c <xTaskGetSchedulerState>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <xQueueReceive+0x6e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <xQueueReceive+0x72>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueReceive+0x74>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xQueueReceive+0x8e>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	61bb      	str	r3, [r7, #24]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004df2:	f001 fd7f 	bl	80068f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01f      	beq.n	8004e42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e06:	f000 f8f7 	bl	8004ff8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	1e5a      	subs	r2, r3, #1
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00f      	beq.n	8004e3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	3310      	adds	r3, #16
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fe4e 	bl	8005ac0 <xTaskRemoveFromEventList>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e2a:	4b3d      	ldr	r3, [pc, #244]	; (8004f20 <xQueueReceive+0x1bc>)
 8004e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e3a:	f001 fd8b 	bl	8006954 <vPortExitCritical>
				return pdPASS;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e069      	b.n	8004f16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e48:	f001 fd84 	bl	8006954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e062      	b.n	8004f16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e56:	f107 0310 	add.w	r3, r7, #16
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fe94 	bl	8005b88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e64:	f001 fd76 	bl	8006954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e68:	f000 fc06 	bl	8005678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e6c:	f001 fd42 	bl	80068f4 <vPortEnterCritical>
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e76:	b25b      	sxtb	r3, r3
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d103      	bne.n	8004e86 <xQueueReceive+0x122>
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e8c:	b25b      	sxtb	r3, r3
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d103      	bne.n	8004e9c <xQueueReceive+0x138>
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e9c:	f001 fd5a 	bl	8006954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ea0:	1d3a      	adds	r2, r7, #4
 8004ea2:	f107 0310 	add.w	r3, r7, #16
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fe83 	bl	8005bb4 <xTaskCheckForTimeOut>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d123      	bne.n	8004efc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb6:	f000 f917 	bl	80050e8 <prvIsQueueEmpty>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d017      	beq.n	8004ef0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	3324      	adds	r3, #36	; 0x24
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fda9 	bl	8005a20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed0:	f000 f8b8 	bl	8005044 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ed4:	f000 fbde 	bl	8005694 <xTaskResumeAll>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d189      	bne.n	8004df2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ede:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <xQueueReceive+0x1bc>)
 8004ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	e780      	b.n	8004df2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef2:	f000 f8a7 	bl	8005044 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ef6:	f000 fbcd 	bl	8005694 <xTaskResumeAll>
 8004efa:	e77a      	b.n	8004df2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efe:	f000 f8a1 	bl	8005044 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f02:	f000 fbc7 	bl	8005694 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f08:	f000 f8ee 	bl	80050e8 <prvIsQueueEmpty>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f43f af6f 	beq.w	8004df2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3730      	adds	r7, #48	; 0x30
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10d      	bne.n	8004f5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d14d      	bne.n	8004fe6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 ff92 	bl	8005e78 <xTaskPriorityDisinherit>
 8004f54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	609a      	str	r2, [r3, #8]
 8004f5c:	e043      	b.n	8004fe6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d119      	bne.n	8004f98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6858      	ldr	r0, [r3, #4]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	f001 fffe 	bl	8006f70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	441a      	add	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d32b      	bcc.n	8004fe6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	e026      	b.n	8004fe6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68d8      	ldr	r0, [r3, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	f001 ffe4 	bl	8006f70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	425b      	negs	r3, r3
 8004fb2:	441a      	add	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d207      	bcs.n	8004fd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	425b      	negs	r3, r3
 8004fce:	441a      	add	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d105      	bne.n	8004fe6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fee:	697b      	ldr	r3, [r7, #20]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d018      	beq.n	800503c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	441a      	add	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	429a      	cmp	r2, r3
 8005022:	d303      	bcc.n	800502c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68d9      	ldr	r1, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	461a      	mov	r2, r3
 8005036:	6838      	ldr	r0, [r7, #0]
 8005038:	f001 ff9a 	bl	8006f70 <memcpy>
	}
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800504c:	f001 fc52 	bl	80068f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005056:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005058:	e011      	b.n	800507e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d012      	beq.n	8005088 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3324      	adds	r3, #36	; 0x24
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fd2a 	bl	8005ac0 <xTaskRemoveFromEventList>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005072:	f000 fe01 	bl	8005c78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	3b01      	subs	r3, #1
 800507a:	b2db      	uxtb	r3, r3
 800507c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800507e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	dce9      	bgt.n	800505a <prvUnlockQueue+0x16>
 8005086:	e000      	b.n	800508a <prvUnlockQueue+0x46>
					break;
 8005088:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	22ff      	movs	r2, #255	; 0xff
 800508e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005092:	f001 fc5f 	bl	8006954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005096:	f001 fc2d 	bl	80068f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050a2:	e011      	b.n	80050c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d012      	beq.n	80050d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3310      	adds	r3, #16
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fd05 	bl	8005ac0 <xTaskRemoveFromEventList>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050bc:	f000 fddc 	bl	8005c78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050c0:	7bbb      	ldrb	r3, [r7, #14]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	dce9      	bgt.n	80050a4 <prvUnlockQueue+0x60>
 80050d0:	e000      	b.n	80050d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	22ff      	movs	r2, #255	; 0xff
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050dc:	f001 fc3a 	bl	8006954 <vPortExitCritical>
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050f0:	f001 fc00 	bl	80068f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e001      	b.n	8005106 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005106:	f001 fc25 	bl	8006954 <vPortExitCritical>

	return xReturn;
 800510a:	68fb      	ldr	r3, [r7, #12]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800511c:	f001 fbea 	bl	80068f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005128:	429a      	cmp	r2, r3
 800512a:	d102      	bne.n	8005132 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800512c:	2301      	movs	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e001      	b.n	8005136 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005136:	f001 fc0d 	bl	8006954 <vPortExitCritical>

	return xReturn;
 800513a:	68fb      	ldr	r3, [r7, #12]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e014      	b.n	800517e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005154:	4a0f      	ldr	r2, [pc, #60]	; (8005194 <vQueueAddToRegistry+0x50>)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10b      	bne.n	8005178 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005160:	490c      	ldr	r1, [pc, #48]	; (8005194 <vQueueAddToRegistry+0x50>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800516a:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <vQueueAddToRegistry+0x50>)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4413      	add	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005176:	e006      	b.n	8005186 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3301      	adds	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b07      	cmp	r3, #7
 8005182:	d9e7      	bls.n	8005154 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20002254 	.word	0x20002254

08005198 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051a8:	f001 fba4 	bl	80068f4 <vPortEnterCritical>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051b2:	b25b      	sxtb	r3, r3
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d103      	bne.n	80051c2 <vQueueWaitForMessageRestricted+0x2a>
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c8:	b25b      	sxtb	r3, r3
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ce:	d103      	bne.n	80051d8 <vQueueWaitForMessageRestricted+0x40>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d8:	f001 fbbc 	bl	8006954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	3324      	adds	r3, #36	; 0x24
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fc3b 	bl	8005a68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051f2:	6978      	ldr	r0, [r7, #20]
 80051f4:	f7ff ff26 	bl	8005044 <prvUnlockQueue>
	}
 80051f8:	bf00      	nop
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	; 0x38
 8005204:	af04      	add	r7, sp, #16
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800520e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	623b      	str	r3, [r7, #32]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xTaskCreateStatic+0x46>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	61fb      	str	r3, [r7, #28]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005246:	235c      	movs	r3, #92	; 0x5c
 8005248:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b5c      	cmp	r3, #92	; 0x5c
 800524e:	d00a      	beq.n	8005266 <xTaskCreateStatic+0x66>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	61bb      	str	r3, [r7, #24]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005266:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01e      	beq.n	80052ac <xTaskCreateStatic+0xac>
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800527c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	2202      	movs	r2, #2
 8005282:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005286:	2300      	movs	r3, #0
 8005288:	9303      	str	r3, [sp, #12]
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	9302      	str	r3, [sp, #8]
 800528e:	f107 0314 	add.w	r3, r7, #20
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f850 	bl	8005344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052a6:	f000 f8dd 	bl	8005464 <prvAddNewTaskToReadyList>
 80052aa:	e001      	b.n	80052b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052b0:	697b      	ldr	r3, [r7, #20]
	}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3728      	adds	r7, #40	; 0x28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08c      	sub	sp, #48	; 0x30
 80052be:	af04      	add	r7, sp, #16
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052ca:	88fb      	ldrh	r3, [r7, #6]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 fc32 	bl	8006b38 <pvPortMalloc>
 80052d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00e      	beq.n	80052fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052dc:	205c      	movs	r0, #92	; 0x5c
 80052de:	f001 fc2b 	bl	8006b38 <pvPortMalloc>
 80052e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
 80052f0:	e005      	b.n	80052fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	f001 fcec 	bl	8006cd0 <vPortFree>
 80052f8:	e001      	b.n	80052fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d017      	beq.n	8005334 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	2300      	movs	r3, #0
 8005310:	9303      	str	r3, [sp, #12]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	9302      	str	r3, [sp, #8]
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	9301      	str	r3, [sp, #4]
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f80e 	bl	8005344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005328:	69f8      	ldr	r0, [r7, #28]
 800532a:	f000 f89b 	bl	8005464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800532e:	2301      	movs	r3, #1
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	e002      	b.n	800533a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005334:	f04f 33ff 	mov.w	r3, #4294967295
 8005338:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800533a:	69bb      	ldr	r3, [r7, #24]
	}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	461a      	mov	r2, r3
 800535c:	21a5      	movs	r1, #165	; 0xa5
 800535e:	f001 fe15 	bl	8006f8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800536c:	3b01      	subs	r3, #1
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	617b      	str	r3, [r7, #20]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01f      	beq.n	80053e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e012      	b.n	80053ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	7819      	ldrb	r1, [r3, #0]
 80053b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	3334      	adds	r3, #52	; 0x34
 80053b8:	460a      	mov	r2, r1
 80053ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d006      	beq.n	80053d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	3301      	adds	r3, #1
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	2b0f      	cmp	r3, #15
 80053d2:	d9e9      	bls.n	80053a8 <prvInitialiseNewTask+0x64>
 80053d4:	e000      	b.n	80053d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80053d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053e0:	e003      	b.n	80053ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	2b37      	cmp	r3, #55	; 0x37
 80053ee:	d901      	bls.n	80053f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053f0:	2337      	movs	r3, #55	; 0x37
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	3304      	adds	r3, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff f978 	bl	8004700 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	3318      	adds	r3, #24
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff f973 	bl	8004700 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	2200      	movs	r2, #0
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	68f9      	ldr	r1, [r7, #12]
 8005442:	69b8      	ldr	r0, [r7, #24]
 8005444:	f001 f928 	bl	8006698 <pxPortInitialiseStack>
 8005448:	4602      	mov	r2, r0
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800545a:	bf00      	nop
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800546c:	f001 fa42 	bl	80068f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005470:	4b2d      	ldr	r3, [pc, #180]	; (8005528 <prvAddNewTaskToReadyList+0xc4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	4a2c      	ldr	r2, [pc, #176]	; (8005528 <prvAddNewTaskToReadyList+0xc4>)
 8005478:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800547a:	4b2c      	ldr	r3, [pc, #176]	; (800552c <prvAddNewTaskToReadyList+0xc8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005482:	4a2a      	ldr	r2, [pc, #168]	; (800552c <prvAddNewTaskToReadyList+0xc8>)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005488:	4b27      	ldr	r3, [pc, #156]	; (8005528 <prvAddNewTaskToReadyList+0xc4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d110      	bne.n	80054b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005490:	f000 fc16 	bl	8005cc0 <prvInitialiseTaskLists>
 8005494:	e00d      	b.n	80054b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005496:	4b26      	ldr	r3, [pc, #152]	; (8005530 <prvAddNewTaskToReadyList+0xcc>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800549e:	4b23      	ldr	r3, [pc, #140]	; (800552c <prvAddNewTaskToReadyList+0xc8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d802      	bhi.n	80054b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054ac:	4a1f      	ldr	r2, [pc, #124]	; (800552c <prvAddNewTaskToReadyList+0xc8>)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054b2:	4b20      	ldr	r3, [pc, #128]	; (8005534 <prvAddNewTaskToReadyList+0xd0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3301      	adds	r3, #1
 80054b8:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <prvAddNewTaskToReadyList+0xd0>)
 80054ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054bc:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <prvAddNewTaskToReadyList+0xd0>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c8:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <prvAddNewTaskToReadyList+0xd4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d903      	bls.n	80054d8 <prvAddNewTaskToReadyList+0x74>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	4a18      	ldr	r2, [pc, #96]	; (8005538 <prvAddNewTaskToReadyList+0xd4>)
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4a15      	ldr	r2, [pc, #84]	; (800553c <prvAddNewTaskToReadyList+0xd8>)
 80054e6:	441a      	add	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f7ff f913 	bl	800471a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054f4:	f001 fa2e 	bl	8006954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054f8:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <prvAddNewTaskToReadyList+0xcc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00e      	beq.n	800551e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005500:	4b0a      	ldr	r3, [pc, #40]	; (800552c <prvAddNewTaskToReadyList+0xc8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	429a      	cmp	r2, r3
 800550c:	d207      	bcs.n	800551e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800550e:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <prvAddNewTaskToReadyList+0xdc>)
 8005510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20002768 	.word	0x20002768
 800552c:	20002294 	.word	0x20002294
 8005530:	20002774 	.word	0x20002774
 8005534:	20002784 	.word	0x20002784
 8005538:	20002770 	.word	0x20002770
 800553c:	20002298 	.word	0x20002298
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d017      	beq.n	8005586 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005556:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <vTaskDelay+0x60>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <vTaskDelay+0x30>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	60bb      	str	r3, [r7, #8]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005574:	f000 f880 	bl	8005678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005578:	2100      	movs	r1, #0
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fcea 	bl	8005f54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005580:	f000 f888 	bl	8005694 <xTaskResumeAll>
 8005584:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d107      	bne.n	800559c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <vTaskDelay+0x64>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20002790 	.word	0x20002790
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	; 0x28
 80055b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055ba:	463a      	mov	r2, r7
 80055bc:	1d39      	adds	r1, r7, #4
 80055be:	f107 0308 	add.w	r3, r7, #8
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff f848 	bl	8004658 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	9202      	str	r2, [sp, #8]
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	2300      	movs	r3, #0
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	2300      	movs	r3, #0
 80055d8:	460a      	mov	r2, r1
 80055da:	4921      	ldr	r1, [pc, #132]	; (8005660 <vTaskStartScheduler+0xb4>)
 80055dc:	4821      	ldr	r0, [pc, #132]	; (8005664 <vTaskStartScheduler+0xb8>)
 80055de:	f7ff fe0f 	bl	8005200 <xTaskCreateStatic>
 80055e2:	4603      	mov	r3, r0
 80055e4:	4a20      	ldr	r2, [pc, #128]	; (8005668 <vTaskStartScheduler+0xbc>)
 80055e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055e8:	4b1f      	ldr	r3, [pc, #124]	; (8005668 <vTaskStartScheduler+0xbc>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055f0:	2301      	movs	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e001      	b.n	80055fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d102      	bne.n	8005606 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005600:	f000 fcfc 	bl	8005ffc <xTimerCreateTimerTask>
 8005604:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d116      	bne.n	800563a <vTaskStartScheduler+0x8e>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	613b      	str	r3, [r7, #16]
}
 800561e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005620:	4b12      	ldr	r3, [pc, #72]	; (800566c <vTaskStartScheduler+0xc0>)
 8005622:	f04f 32ff 	mov.w	r2, #4294967295
 8005626:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <vTaskStartScheduler+0xc4>)
 800562a:	2201      	movs	r2, #1
 800562c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800562e:	4b11      	ldr	r3, [pc, #68]	; (8005674 <vTaskStartScheduler+0xc8>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005634:	f001 f8bc 	bl	80067b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005638:	e00e      	b.n	8005658 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d10a      	bne.n	8005658 <vTaskStartScheduler+0xac>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	60fb      	str	r3, [r7, #12]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <vTaskStartScheduler+0xaa>
}
 8005658:	bf00      	nop
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	08008348 	.word	0x08008348
 8005664:	08005c91 	.word	0x08005c91
 8005668:	2000278c 	.word	0x2000278c
 800566c:	20002788 	.word	0x20002788
 8005670:	20002774 	.word	0x20002774
 8005674:	2000276c 	.word	0x2000276c

08005678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <vTaskSuspendAll+0x18>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	4a03      	ldr	r2, [pc, #12]	; (8005690 <vTaskSuspendAll+0x18>)
 8005684:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005686:	bf00      	nop
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	20002790 	.word	0x20002790

08005694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800569e:	2300      	movs	r3, #0
 80056a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056a2:	4b42      	ldr	r3, [pc, #264]	; (80057ac <xTaskResumeAll+0x118>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	603b      	str	r3, [r7, #0]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056c0:	f001 f918 	bl	80068f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056c4:	4b39      	ldr	r3, [pc, #228]	; (80057ac <xTaskResumeAll+0x118>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	4a38      	ldr	r2, [pc, #224]	; (80057ac <xTaskResumeAll+0x118>)
 80056cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ce:	4b37      	ldr	r3, [pc, #220]	; (80057ac <xTaskResumeAll+0x118>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d162      	bne.n	800579c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056d6:	4b36      	ldr	r3, [pc, #216]	; (80057b0 <xTaskResumeAll+0x11c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d05e      	beq.n	800579c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056de:	e02f      	b.n	8005740 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e0:	4b34      	ldr	r3, [pc, #208]	; (80057b4 <xTaskResumeAll+0x120>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3318      	adds	r3, #24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff f871 	bl	80047d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff f86c 	bl	80047d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005700:	4b2d      	ldr	r3, [pc, #180]	; (80057b8 <xTaskResumeAll+0x124>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d903      	bls.n	8005710 <xTaskResumeAll+0x7c>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	4a2a      	ldr	r2, [pc, #168]	; (80057b8 <xTaskResumeAll+0x124>)
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4a27      	ldr	r2, [pc, #156]	; (80057bc <xTaskResumeAll+0x128>)
 800571e:	441a      	add	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f7fe fff7 	bl	800471a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005730:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <xTaskResumeAll+0x12c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800573a:	4b22      	ldr	r3, [pc, #136]	; (80057c4 <xTaskResumeAll+0x130>)
 800573c:	2201      	movs	r2, #1
 800573e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005740:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <xTaskResumeAll+0x120>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1cb      	bne.n	80056e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800574e:	f000 fb55 	bl	8005dfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005752:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <xTaskResumeAll+0x134>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800575e:	f000 f847 	bl	80057f0 <xTaskIncrementTick>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005768:	4b16      	ldr	r3, [pc, #88]	; (80057c4 <xTaskResumeAll+0x130>)
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3b01      	subs	r3, #1
 8005772:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f1      	bne.n	800575e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800577a:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <xTaskResumeAll+0x134>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005780:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <xTaskResumeAll+0x130>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d009      	beq.n	800579c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005788:	2301      	movs	r3, #1
 800578a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <xTaskResumeAll+0x138>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800579c:	f001 f8da 	bl	8006954 <vPortExitCritical>

	return xAlreadyYielded;
 80057a0:	68bb      	ldr	r3, [r7, #8]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20002790 	.word	0x20002790
 80057b0:	20002768 	.word	0x20002768
 80057b4:	20002728 	.word	0x20002728
 80057b8:	20002770 	.word	0x20002770
 80057bc:	20002298 	.word	0x20002298
 80057c0:	20002294 	.word	0x20002294
 80057c4:	2000277c 	.word	0x2000277c
 80057c8:	20002778 	.word	0x20002778
 80057cc:	e000ed04 	.word	0xe000ed04

080057d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <xTaskGetTickCount+0x1c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057dc:	687b      	ldr	r3, [r7, #4]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	2000276c 	.word	0x2000276c

080057f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057fa:	4b4f      	ldr	r3, [pc, #316]	; (8005938 <xTaskIncrementTick+0x148>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f040 808f 	bne.w	8005922 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005804:	4b4d      	ldr	r3, [pc, #308]	; (800593c <xTaskIncrementTick+0x14c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3301      	adds	r3, #1
 800580a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800580c:	4a4b      	ldr	r2, [pc, #300]	; (800593c <xTaskIncrementTick+0x14c>)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d120      	bne.n	800585a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005818:	4b49      	ldr	r3, [pc, #292]	; (8005940 <xTaskIncrementTick+0x150>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <xTaskIncrementTick+0x48>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	603b      	str	r3, [r7, #0]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <xTaskIncrementTick+0x46>
 8005838:	4b41      	ldr	r3, [pc, #260]	; (8005940 <xTaskIncrementTick+0x150>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	4b41      	ldr	r3, [pc, #260]	; (8005944 <xTaskIncrementTick+0x154>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a3f      	ldr	r2, [pc, #252]	; (8005940 <xTaskIncrementTick+0x150>)
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	4a3f      	ldr	r2, [pc, #252]	; (8005944 <xTaskIncrementTick+0x154>)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	4b3e      	ldr	r3, [pc, #248]	; (8005948 <xTaskIncrementTick+0x158>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3301      	adds	r3, #1
 8005852:	4a3d      	ldr	r2, [pc, #244]	; (8005948 <xTaskIncrementTick+0x158>)
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	f000 fad1 	bl	8005dfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800585a:	4b3c      	ldr	r3, [pc, #240]	; (800594c <xTaskIncrementTick+0x15c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d349      	bcc.n	80058f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005864:	4b36      	ldr	r3, [pc, #216]	; (8005940 <xTaskIncrementTick+0x150>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d104      	bne.n	8005878 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800586e:	4b37      	ldr	r3, [pc, #220]	; (800594c <xTaskIncrementTick+0x15c>)
 8005870:	f04f 32ff 	mov.w	r2, #4294967295
 8005874:	601a      	str	r2, [r3, #0]
					break;
 8005876:	e03f      	b.n	80058f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005878:	4b31      	ldr	r3, [pc, #196]	; (8005940 <xTaskIncrementTick+0x150>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	429a      	cmp	r2, r3
 800588e:	d203      	bcs.n	8005898 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005890:	4a2e      	ldr	r2, [pc, #184]	; (800594c <xTaskIncrementTick+0x15c>)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005896:	e02f      	b.n	80058f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	3304      	adds	r3, #4
 800589c:	4618      	mov	r0, r3
 800589e:	f7fe ff99 	bl	80047d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	3318      	adds	r3, #24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe ff90 	bl	80047d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	4b25      	ldr	r3, [pc, #148]	; (8005950 <xTaskIncrementTick+0x160>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d903      	bls.n	80058c8 <xTaskIncrementTick+0xd8>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	4a22      	ldr	r2, [pc, #136]	; (8005950 <xTaskIncrementTick+0x160>)
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <xTaskIncrementTick+0x164>)
 80058d6:	441a      	add	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	3304      	adds	r3, #4
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7fe ff1b 	bl	800471a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e8:	4b1b      	ldr	r3, [pc, #108]	; (8005958 <xTaskIncrementTick+0x168>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d3b8      	bcc.n	8005864 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058f2:	2301      	movs	r3, #1
 80058f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058f6:	e7b5      	b.n	8005864 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058f8:	4b17      	ldr	r3, [pc, #92]	; (8005958 <xTaskIncrementTick+0x168>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fe:	4915      	ldr	r1, [pc, #84]	; (8005954 <xTaskIncrementTick+0x164>)
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d901      	bls.n	8005914 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005910:	2301      	movs	r3, #1
 8005912:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005914:	4b11      	ldr	r3, [pc, #68]	; (800595c <xTaskIncrementTick+0x16c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800591c:	2301      	movs	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e004      	b.n	800592c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005922:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <xTaskIncrementTick+0x170>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3301      	adds	r3, #1
 8005928:	4a0d      	ldr	r2, [pc, #52]	; (8005960 <xTaskIncrementTick+0x170>)
 800592a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800592c:	697b      	ldr	r3, [r7, #20]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20002790 	.word	0x20002790
 800593c:	2000276c 	.word	0x2000276c
 8005940:	20002720 	.word	0x20002720
 8005944:	20002724 	.word	0x20002724
 8005948:	20002780 	.word	0x20002780
 800594c:	20002788 	.word	0x20002788
 8005950:	20002770 	.word	0x20002770
 8005954:	20002298 	.word	0x20002298
 8005958:	20002294 	.word	0x20002294
 800595c:	2000277c 	.word	0x2000277c
 8005960:	20002778 	.word	0x20002778

08005964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800596a:	4b28      	ldr	r3, [pc, #160]	; (8005a0c <vTaskSwitchContext+0xa8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005972:	4b27      	ldr	r3, [pc, #156]	; (8005a10 <vTaskSwitchContext+0xac>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005978:	e041      	b.n	80059fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800597a:	4b25      	ldr	r3, [pc, #148]	; (8005a10 <vTaskSwitchContext+0xac>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005980:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <vTaskSwitchContext+0xb0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	e010      	b.n	80059aa <vTaskSwitchContext+0x46>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10a      	bne.n	80059a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <vTaskSwitchContext+0x3e>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	491b      	ldr	r1, [pc, #108]	; (8005a18 <vTaskSwitchContext+0xb4>)
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0e4      	beq.n	8005988 <vTaskSwitchContext+0x24>
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <vTaskSwitchContext+0xb4>)
 80059ca:	4413      	add	r3, r2
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	605a      	str	r2, [r3, #4]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	3308      	adds	r3, #8
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d104      	bne.n	80059ee <vTaskSwitchContext+0x8a>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	605a      	str	r2, [r3, #4]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <vTaskSwitchContext+0xb8>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	4a06      	ldr	r2, [pc, #24]	; (8005a14 <vTaskSwitchContext+0xb0>)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6013      	str	r3, [r2, #0]
}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20002790 	.word	0x20002790
 8005a10:	2000277c 	.word	0x2000277c
 8005a14:	20002770 	.word	0x20002770
 8005a18:	20002298 	.word	0x20002298
 8005a1c:	20002294 	.word	0x20002294

08005a20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	60fb      	str	r3, [r7, #12]
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a46:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <vTaskPlaceOnEventList+0x44>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3318      	adds	r3, #24
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fe fe87 	bl	8004762 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a54:	2101      	movs	r1, #1
 8005a56:	6838      	ldr	r0, [r7, #0]
 8005a58:	f000 fa7c 	bl	8005f54 <prvAddCurrentTaskToDelayedList>
}
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20002294 	.word	0x20002294

08005a68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	617b      	str	r3, [r7, #20]
}
 8005a8c:	bf00      	nop
 8005a8e:	e7fe      	b.n	8005a8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <vTaskPlaceOnEventListRestricted+0x54>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3318      	adds	r3, #24
 8005a96:	4619      	mov	r1, r3
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f7fe fe3e 	bl	800471a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	68b8      	ldr	r0, [r7, #8]
 8005aae:	f000 fa51 	bl	8005f54 <prvAddCurrentTaskToDelayedList>
	}
 8005ab2:	bf00      	nop
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20002294 	.word	0x20002294

08005ac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60fb      	str	r3, [r7, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	3318      	adds	r3, #24
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fe6f 	bl	80047d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005af6:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <xTaskRemoveFromEventList+0xb0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d11d      	bne.n	8005b3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fe fe66 	bl	80047d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0c:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <xTaskRemoveFromEventList+0xb4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d903      	bls.n	8005b1c <xTaskRemoveFromEventList+0x5c>
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	4a16      	ldr	r2, [pc, #88]	; (8005b74 <xTaskRemoveFromEventList+0xb4>)
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <xTaskRemoveFromEventList+0xb8>)
 8005b2a:	441a      	add	r2, r3
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f7fe fdf1 	bl	800471a <vListInsertEnd>
 8005b38:	e005      	b.n	8005b46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3318      	adds	r3, #24
 8005b3e:	4619      	mov	r1, r3
 8005b40:	480e      	ldr	r0, [pc, #56]	; (8005b7c <xTaskRemoveFromEventList+0xbc>)
 8005b42:	f7fe fdea 	bl	800471a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <xTaskRemoveFromEventList+0xc0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d905      	bls.n	8005b60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b58:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <xTaskRemoveFromEventList+0xc4>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e001      	b.n	8005b64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b64:	697b      	ldr	r3, [r7, #20]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20002790 	.word	0x20002790
 8005b74:	20002770 	.word	0x20002770
 8005b78:	20002298 	.word	0x20002298
 8005b7c:	20002728 	.word	0x20002728
 8005b80:	20002294 	.word	0x20002294
 8005b84:	2000277c 	.word	0x2000277c

08005b88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <vTaskInternalSetTimeOutState+0x24>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <vTaskInternalSetTimeOutState+0x28>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	605a      	str	r2, [r3, #4]
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	20002780 	.word	0x20002780
 8005bb0:	2000276c 	.word	0x2000276c

08005bb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	613b      	str	r3, [r7, #16]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60fb      	str	r3, [r7, #12]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005bf6:	f000 fe7d 	bl	80068f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bfa:	4b1d      	ldr	r3, [pc, #116]	; (8005c70 <xTaskCheckForTimeOut+0xbc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d102      	bne.n	8005c1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	e023      	b.n	8005c62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <xTaskCheckForTimeOut+0xc0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d007      	beq.n	8005c36 <xTaskCheckForTimeOut+0x82>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d302      	bcc.n	8005c36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	e015      	b.n	8005c62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d20b      	bcs.n	8005c58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	1ad2      	subs	r2, r2, r3
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff ff9b 	bl	8005b88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
 8005c56:	e004      	b.n	8005c62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c62:	f000 fe77 	bl	8006954 <vPortExitCritical>

	return xReturn;
 8005c66:	69fb      	ldr	r3, [r7, #28]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3720      	adds	r7, #32
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	2000276c 	.word	0x2000276c
 8005c74:	20002780 	.word	0x20002780

08005c78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c7c:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <vTaskMissedYield+0x14>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
}
 8005c82:	bf00      	nop
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	2000277c 	.word	0x2000277c

08005c90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c98:	f000 f852 	bl	8005d40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c9c:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <prvIdleTask+0x28>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d9f9      	bls.n	8005c98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ca4:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <prvIdleTask+0x2c>)
 8005ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cb4:	e7f0      	b.n	8005c98 <prvIdleTask+0x8>
 8005cb6:	bf00      	nop
 8005cb8:	20002298 	.word	0x20002298
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	e00c      	b.n	8005ce6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4a12      	ldr	r2, [pc, #72]	; (8005d20 <prvInitialiseTaskLists+0x60>)
 8005cd8:	4413      	add	r3, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fcf0 	bl	80046c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b37      	cmp	r3, #55	; 0x37
 8005cea:	d9ef      	bls.n	8005ccc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cec:	480d      	ldr	r0, [pc, #52]	; (8005d24 <prvInitialiseTaskLists+0x64>)
 8005cee:	f7fe fce7 	bl	80046c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cf2:	480d      	ldr	r0, [pc, #52]	; (8005d28 <prvInitialiseTaskLists+0x68>)
 8005cf4:	f7fe fce4 	bl	80046c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cf8:	480c      	ldr	r0, [pc, #48]	; (8005d2c <prvInitialiseTaskLists+0x6c>)
 8005cfa:	f7fe fce1 	bl	80046c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cfe:	480c      	ldr	r0, [pc, #48]	; (8005d30 <prvInitialiseTaskLists+0x70>)
 8005d00:	f7fe fcde 	bl	80046c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d04:	480b      	ldr	r0, [pc, #44]	; (8005d34 <prvInitialiseTaskLists+0x74>)
 8005d06:	f7fe fcdb 	bl	80046c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <prvInitialiseTaskLists+0x78>)
 8005d0c:	4a05      	ldr	r2, [pc, #20]	; (8005d24 <prvInitialiseTaskLists+0x64>)
 8005d0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d10:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <prvInitialiseTaskLists+0x7c>)
 8005d12:	4a05      	ldr	r2, [pc, #20]	; (8005d28 <prvInitialiseTaskLists+0x68>)
 8005d14:	601a      	str	r2, [r3, #0]
}
 8005d16:	bf00      	nop
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20002298 	.word	0x20002298
 8005d24:	200026f8 	.word	0x200026f8
 8005d28:	2000270c 	.word	0x2000270c
 8005d2c:	20002728 	.word	0x20002728
 8005d30:	2000273c 	.word	0x2000273c
 8005d34:	20002754 	.word	0x20002754
 8005d38:	20002720 	.word	0x20002720
 8005d3c:	20002724 	.word	0x20002724

08005d40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d46:	e019      	b.n	8005d7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d48:	f000 fdd4 	bl	80068f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4c:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <prvCheckTasksWaitingTermination+0x50>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fe fd3b 	bl	80047d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <prvCheckTasksWaitingTermination+0x54>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	4a0b      	ldr	r2, [pc, #44]	; (8005d94 <prvCheckTasksWaitingTermination+0x54>)
 8005d66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <prvCheckTasksWaitingTermination+0x58>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <prvCheckTasksWaitingTermination+0x58>)
 8005d70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d72:	f000 fdef 	bl	8006954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f810 	bl	8005d9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <prvCheckTasksWaitingTermination+0x58>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e1      	bne.n	8005d48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	2000273c 	.word	0x2000273c
 8005d94:	20002768 	.word	0x20002768
 8005d98:	20002750 	.word	0x20002750

08005d9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d108      	bne.n	8005dc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 ff8c 	bl	8006cd0 <vPortFree>
				vPortFree( pxTCB );
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 ff89 	bl	8006cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dbe:	e018      	b.n	8005df2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d103      	bne.n	8005dd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 ff80 	bl	8006cd0 <vPortFree>
	}
 8005dd0:	e00f      	b.n	8005df2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d00a      	beq.n	8005df2 <prvDeleteTCB+0x56>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60fb      	str	r3, [r7, #12]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <prvDeleteTCB+0x54>
	}
 8005df2:	bf00      	nop
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e02:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <prvResetNextTaskUnblockTime+0x38>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <prvResetNextTaskUnblockTime+0x3c>)
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e14:	e008      	b.n	8005e28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e16:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <prvResetNextTaskUnblockTime+0x38>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4a04      	ldr	r2, [pc, #16]	; (8005e38 <prvResetNextTaskUnblockTime+0x3c>)
 8005e26:	6013      	str	r3, [r2, #0]
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	20002720 	.word	0x20002720
 8005e38:	20002788 	.word	0x20002788

08005e3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <xTaskGetSchedulerState+0x34>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d102      	bne.n	8005e50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	607b      	str	r3, [r7, #4]
 8005e4e:	e008      	b.n	8005e62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e50:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <xTaskGetSchedulerState+0x38>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	607b      	str	r3, [r7, #4]
 8005e5c:	e001      	b.n	8005e62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e62:	687b      	ldr	r3, [r7, #4]
	}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	20002774 	.word	0x20002774
 8005e74:	20002790 	.word	0x20002790

08005e78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d056      	beq.n	8005f3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e8e:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <xTaskPriorityDisinherit+0xd0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d00a      	beq.n	8005eae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	60fb      	str	r3, [r7, #12]
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10a      	bne.n	8005ecc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	60bb      	str	r3, [r7, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	e7fe      	b.n	8005eca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed0:	1e5a      	subs	r2, r3, #1
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d02c      	beq.n	8005f3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d128      	bne.n	8005f3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fe fc70 	bl	80047d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <xTaskPriorityDisinherit+0xd4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d903      	bls.n	8005f1c <xTaskPriorityDisinherit+0xa4>
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	4a0c      	ldr	r2, [pc, #48]	; (8005f4c <xTaskPriorityDisinherit+0xd4>)
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <xTaskPriorityDisinherit+0xd8>)
 8005f2a:	441a      	add	r2, r3
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4619      	mov	r1, r3
 8005f32:	4610      	mov	r0, r2
 8005f34:	f7fe fbf1 	bl	800471a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f3c:	697b      	ldr	r3, [r7, #20]
	}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20002294 	.word	0x20002294
 8005f4c:	20002770 	.word	0x20002770
 8005f50:	20002298 	.word	0x20002298

08005f54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f5e:	4b21      	ldr	r3, [pc, #132]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f64:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fc32 	bl	80047d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f76:	d10a      	bne.n	8005f8e <prvAddCurrentTaskToDelayedList+0x3a>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f7e:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4619      	mov	r1, r3
 8005f86:	4819      	ldr	r0, [pc, #100]	; (8005fec <prvAddCurrentTaskToDelayedList+0x98>)
 8005f88:	f7fe fbc7 	bl	800471a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f8c:	e026      	b.n	8005fdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4413      	add	r3, r2
 8005f94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f96:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d209      	bcs.n	8005fba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fa6:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	f7fe fbd5 	bl	8004762 <vListInsert>
}
 8005fb8:	e010      	b.n	8005fdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fba:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f7fe fbcb 	bl	8004762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d202      	bcs.n	8005fdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fd6:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	6013      	str	r3, [r2, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	2000276c 	.word	0x2000276c
 8005fe8:	20002294 	.word	0x20002294
 8005fec:	20002754 	.word	0x20002754
 8005ff0:	20002724 	.word	0x20002724
 8005ff4:	20002720 	.word	0x20002720
 8005ff8:	20002788 	.word	0x20002788

08005ffc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006006:	f000 fb07 	bl	8006618 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800600a:	4b1c      	ldr	r3, [pc, #112]	; (800607c <xTimerCreateTimerTask+0x80>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d021      	beq.n	8006056 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800601a:	1d3a      	adds	r2, r7, #4
 800601c:	f107 0108 	add.w	r1, r7, #8
 8006020:	f107 030c 	add.w	r3, r7, #12
 8006024:	4618      	mov	r0, r3
 8006026:	f7fe fb31 	bl	800468c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	9202      	str	r2, [sp, #8]
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	2302      	movs	r3, #2
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	2300      	movs	r3, #0
 800603a:	460a      	mov	r2, r1
 800603c:	4910      	ldr	r1, [pc, #64]	; (8006080 <xTimerCreateTimerTask+0x84>)
 800603e:	4811      	ldr	r0, [pc, #68]	; (8006084 <xTimerCreateTimerTask+0x88>)
 8006040:	f7ff f8de 	bl	8005200 <xTaskCreateStatic>
 8006044:	4603      	mov	r3, r0
 8006046:	4a10      	ldr	r2, [pc, #64]	; (8006088 <xTimerCreateTimerTask+0x8c>)
 8006048:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800604a:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <xTimerCreateTimerTask+0x8c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006052:	2301      	movs	r3, #1
 8006054:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	613b      	str	r3, [r7, #16]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006072:	697b      	ldr	r3, [r7, #20]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200027c4 	.word	0x200027c4
 8006080:	08008350 	.word	0x08008350
 8006084:	080061c1 	.word	0x080061c1
 8006088:	200027c8 	.word	0x200027c8

0800608c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800609a:	2300      	movs	r3, #0
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	623b      	str	r3, [r7, #32]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060ba:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <xTimerGenericCommand+0x98>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d02a      	beq.n	8006118 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	dc18      	bgt.n	8006106 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060d4:	f7ff feb2 	bl	8005e3c <xTaskGetSchedulerState>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d109      	bne.n	80060f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060de:	4b11      	ldr	r3, [pc, #68]	; (8006124 <xTimerGenericCommand+0x98>)
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	f107 0110 	add.w	r1, r7, #16
 80060e6:	2300      	movs	r3, #0
 80060e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ea:	f7fe fca1 	bl	8004a30 <xQueueGenericSend>
 80060ee:	6278      	str	r0, [r7, #36]	; 0x24
 80060f0:	e012      	b.n	8006118 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060f2:	4b0c      	ldr	r3, [pc, #48]	; (8006124 <xTimerGenericCommand+0x98>)
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	f107 0110 	add.w	r1, r7, #16
 80060fa:	2300      	movs	r3, #0
 80060fc:	2200      	movs	r2, #0
 80060fe:	f7fe fc97 	bl	8004a30 <xQueueGenericSend>
 8006102:	6278      	str	r0, [r7, #36]	; 0x24
 8006104:	e008      	b.n	8006118 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006106:	4b07      	ldr	r3, [pc, #28]	; (8006124 <xTimerGenericCommand+0x98>)
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	f107 0110 	add.w	r1, r7, #16
 800610e:	2300      	movs	r3, #0
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	f7fe fd8b 	bl	8004c2c <xQueueGenericSendFromISR>
 8006116:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800611a:	4618      	mov	r0, r3
 800611c:	3728      	adds	r7, #40	; 0x28
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	200027c4 	.word	0x200027c4

08006128 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af02      	add	r7, sp, #8
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006132:	4b22      	ldr	r3, [pc, #136]	; (80061bc <prvProcessExpiredTimer+0x94>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	3304      	adds	r3, #4
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fb47 	bl	80047d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d022      	beq.n	800619a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	18d1      	adds	r1, r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	6978      	ldr	r0, [r7, #20]
 8006162:	f000 f8d1 	bl	8006308 <prvInsertTimerInActiveList>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01f      	beq.n	80061ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2300      	movs	r3, #0
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	2100      	movs	r1, #0
 8006176:	6978      	ldr	r0, [r7, #20]
 8006178:	f7ff ff88 	bl	800608c <xTimerGenericCommand>
 800617c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d113      	bne.n	80061ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	60fb      	str	r3, [r7, #12]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	6978      	ldr	r0, [r7, #20]
 80061b2:	4798      	blx	r3
}
 80061b4:	bf00      	nop
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	200027bc 	.word	0x200027bc

080061c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061c8:	f107 0308 	add.w	r3, r7, #8
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 f857 	bl	8006280 <prvGetNextExpireTime>
 80061d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4619      	mov	r1, r3
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f803 	bl	80061e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061de:	f000 f8d5 	bl	800638c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061e2:	e7f1      	b.n	80061c8 <prvTimerTask+0x8>

080061e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061ee:	f7ff fa43 	bl	8005678 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061f2:	f107 0308 	add.w	r3, r7, #8
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 f866 	bl	80062c8 <prvSampleTimeNow>
 80061fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d130      	bne.n	8006266 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <prvProcessTimerOrBlockTask+0x3c>
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	429a      	cmp	r2, r3
 8006210:	d806      	bhi.n	8006220 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006212:	f7ff fa3f 	bl	8005694 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff ff85 	bl	8006128 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800621e:	e024      	b.n	800626a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006226:	4b13      	ldr	r3, [pc, #76]	; (8006274 <prvProcessTimerOrBlockTask+0x90>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <prvProcessTimerOrBlockTask+0x50>
 8006230:	2301      	movs	r3, #1
 8006232:	e000      	b.n	8006236 <prvProcessTimerOrBlockTask+0x52>
 8006234:	2300      	movs	r3, #0
 8006236:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <prvProcessTimerOrBlockTask+0x94>)
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	4619      	mov	r1, r3
 8006246:	f7fe ffa7 	bl	8005198 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800624a:	f7ff fa23 	bl	8005694 <xTaskResumeAll>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006254:	4b09      	ldr	r3, [pc, #36]	; (800627c <prvProcessTimerOrBlockTask+0x98>)
 8006256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	f3bf 8f6f 	isb	sy
}
 8006264:	e001      	b.n	800626a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006266:	f7ff fa15 	bl	8005694 <xTaskResumeAll>
}
 800626a:	bf00      	nop
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	200027c0 	.word	0x200027c0
 8006278:	200027c4 	.word	0x200027c4
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006288:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <prvGetNextExpireTime+0x44>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <prvGetNextExpireTime+0x16>
 8006292:	2201      	movs	r2, #1
 8006294:	e000      	b.n	8006298 <prvGetNextExpireTime+0x18>
 8006296:	2200      	movs	r2, #0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062a4:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <prvGetNextExpireTime+0x44>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	e001      	b.n	80062b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80062b4:	68fb      	ldr	r3, [r7, #12]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	200027bc 	.word	0x200027bc

080062c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062d0:	f7ff fa7e 	bl	80057d0 <xTaskGetTickCount>
 80062d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062d6:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <prvSampleTimeNow+0x3c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d205      	bcs.n	80062ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062e0:	f000 f936 	bl	8006550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	e002      	b.n	80062f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062f2:	4a04      	ldr	r2, [pc, #16]	; (8006304 <prvSampleTimeNow+0x3c>)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062f8:	68fb      	ldr	r3, [r7, #12]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	200027cc 	.word	0x200027cc

08006308 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	429a      	cmp	r2, r3
 800632c:	d812      	bhi.n	8006354 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	429a      	cmp	r2, r3
 800633a:	d302      	bcc.n	8006342 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800633c:	2301      	movs	r3, #1
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e01b      	b.n	800637a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006342:	4b10      	ldr	r3, [pc, #64]	; (8006384 <prvInsertTimerInActiveList+0x7c>)
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3304      	adds	r3, #4
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f7fe fa08 	bl	8004762 <vListInsert>
 8006352:	e012      	b.n	800637a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d206      	bcs.n	800636a <prvInsertTimerInActiveList+0x62>
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d302      	bcc.n	800636a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006364:	2301      	movs	r3, #1
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	e007      	b.n	800637a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800636a:	4b07      	ldr	r3, [pc, #28]	; (8006388 <prvInsertTimerInActiveList+0x80>)
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3304      	adds	r3, #4
 8006372:	4619      	mov	r1, r3
 8006374:	4610      	mov	r0, r2
 8006376:	f7fe f9f4 	bl	8004762 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800637a:	697b      	ldr	r3, [r7, #20]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	200027c0 	.word	0x200027c0
 8006388:	200027bc 	.word	0x200027bc

0800638c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08e      	sub	sp, #56	; 0x38
 8006390:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006392:	e0ca      	b.n	800652a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	da18      	bge.n	80063cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800639a:	1d3b      	adds	r3, r7, #4
 800639c:	3304      	adds	r3, #4
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	61fb      	str	r3, [r7, #28]
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c2:	6850      	ldr	r0, [r2, #4]
 80063c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c6:	6892      	ldr	r2, [r2, #8]
 80063c8:	4611      	mov	r1, r2
 80063ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f2c0 80aa 	blt.w	8006528 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d004      	beq.n	80063ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	3304      	adds	r3, #4
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe f9f5 	bl	80047d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063ea:	463b      	mov	r3, r7
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff ff6b 	bl	80062c8 <prvSampleTimeNow>
 80063f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b09      	cmp	r3, #9
 80063f8:	f200 8097 	bhi.w	800652a <prvProcessReceivedCommands+0x19e>
 80063fc:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <prvProcessReceivedCommands+0x78>)
 80063fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006402:	bf00      	nop
 8006404:	0800642d 	.word	0x0800642d
 8006408:	0800642d 	.word	0x0800642d
 800640c:	0800642d 	.word	0x0800642d
 8006410:	080064a1 	.word	0x080064a1
 8006414:	080064b5 	.word	0x080064b5
 8006418:	080064ff 	.word	0x080064ff
 800641c:	0800642d 	.word	0x0800642d
 8006420:	0800642d 	.word	0x0800642d
 8006424:	080064a1 	.word	0x080064a1
 8006428:	080064b5 	.word	0x080064b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006432:	f043 0301 	orr.w	r3, r3, #1
 8006436:	b2da      	uxtb	r2, r3
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	18d1      	adds	r1, r2, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800644c:	f7ff ff5c 	bl	8006308 <prvInsertTimerInActiveList>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d069      	beq.n	800652a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800645c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d05e      	beq.n	800652a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	441a      	add	r2, r3
 8006474:	2300      	movs	r3, #0
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	2300      	movs	r3, #0
 800647a:	2100      	movs	r1, #0
 800647c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800647e:	f7ff fe05 	bl	800608c <xTimerGenericCommand>
 8006482:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d14f      	bne.n	800652a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	61bb      	str	r3, [r7, #24]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80064b2:	e03a      	b.n	800652a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	617b      	str	r3, [r7, #20]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	18d1      	adds	r1, r2, r3
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f8:	f7ff ff06 	bl	8006308 <prvInsertTimerInActiveList>
					break;
 80064fc:	e015      	b.n	800652a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d103      	bne.n	8006514 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800650c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650e:	f000 fbdf 	bl	8006cd0 <vPortFree>
 8006512:	e00a      	b.n	800652a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800651a:	f023 0301 	bic.w	r3, r3, #1
 800651e:	b2da      	uxtb	r2, r3
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006526:	e000      	b.n	800652a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006528:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800652a:	4b08      	ldr	r3, [pc, #32]	; (800654c <prvProcessReceivedCommands+0x1c0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	1d39      	adds	r1, r7, #4
 8006530:	2200      	movs	r2, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe fc16 	bl	8004d64 <xQueueReceive>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	f47f af2a 	bne.w	8006394 <prvProcessReceivedCommands+0x8>
	}
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	3730      	adds	r7, #48	; 0x30
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	200027c4 	.word	0x200027c4

08006550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006556:	e048      	b.n	80065ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006558:	4b2d      	ldr	r3, [pc, #180]	; (8006610 <prvSwitchTimerLists+0xc0>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006562:	4b2b      	ldr	r3, [pc, #172]	; (8006610 <prvSwitchTimerLists+0xc0>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3304      	adds	r3, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe f92f 	bl	80047d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d02e      	beq.n	80065ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4413      	add	r3, r2
 8006594:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	429a      	cmp	r2, r3
 800659c:	d90e      	bls.n	80065bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065aa:	4b19      	ldr	r3, [pc, #100]	; (8006610 <prvSwitchTimerLists+0xc0>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4619      	mov	r1, r3
 80065b4:	4610      	mov	r0, r2
 80065b6:	f7fe f8d4 	bl	8004762 <vListInsert>
 80065ba:	e016      	b.n	80065ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065bc:	2300      	movs	r3, #0
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	2300      	movs	r3, #0
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	2100      	movs	r1, #0
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff fd60 	bl	800608c <xTimerGenericCommand>
 80065cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	603b      	str	r3, [r7, #0]
}
 80065e6:	bf00      	nop
 80065e8:	e7fe      	b.n	80065e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065ea:	4b09      	ldr	r3, [pc, #36]	; (8006610 <prvSwitchTimerLists+0xc0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1b1      	bne.n	8006558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065f4:	4b06      	ldr	r3, [pc, #24]	; (8006610 <prvSwitchTimerLists+0xc0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065fa:	4b06      	ldr	r3, [pc, #24]	; (8006614 <prvSwitchTimerLists+0xc4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a04      	ldr	r2, [pc, #16]	; (8006610 <prvSwitchTimerLists+0xc0>)
 8006600:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006602:	4a04      	ldr	r2, [pc, #16]	; (8006614 <prvSwitchTimerLists+0xc4>)
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	6013      	str	r3, [r2, #0]
}
 8006608:	bf00      	nop
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	200027bc 	.word	0x200027bc
 8006614:	200027c0 	.word	0x200027c0

08006618 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800661e:	f000 f969 	bl	80068f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006622:	4b15      	ldr	r3, [pc, #84]	; (8006678 <prvCheckForValidListAndQueue+0x60>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d120      	bne.n	800666c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800662a:	4814      	ldr	r0, [pc, #80]	; (800667c <prvCheckForValidListAndQueue+0x64>)
 800662c:	f7fe f848 	bl	80046c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006630:	4813      	ldr	r0, [pc, #76]	; (8006680 <prvCheckForValidListAndQueue+0x68>)
 8006632:	f7fe f845 	bl	80046c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006636:	4b13      	ldr	r3, [pc, #76]	; (8006684 <prvCheckForValidListAndQueue+0x6c>)
 8006638:	4a10      	ldr	r2, [pc, #64]	; (800667c <prvCheckForValidListAndQueue+0x64>)
 800663a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800663c:	4b12      	ldr	r3, [pc, #72]	; (8006688 <prvCheckForValidListAndQueue+0x70>)
 800663e:	4a10      	ldr	r2, [pc, #64]	; (8006680 <prvCheckForValidListAndQueue+0x68>)
 8006640:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006642:	2300      	movs	r3, #0
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	4b11      	ldr	r3, [pc, #68]	; (800668c <prvCheckForValidListAndQueue+0x74>)
 8006648:	4a11      	ldr	r2, [pc, #68]	; (8006690 <prvCheckForValidListAndQueue+0x78>)
 800664a:	2110      	movs	r1, #16
 800664c:	200a      	movs	r0, #10
 800664e:	f7fe f953 	bl	80048f8 <xQueueGenericCreateStatic>
 8006652:	4603      	mov	r3, r0
 8006654:	4a08      	ldr	r2, [pc, #32]	; (8006678 <prvCheckForValidListAndQueue+0x60>)
 8006656:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006658:	4b07      	ldr	r3, [pc, #28]	; (8006678 <prvCheckForValidListAndQueue+0x60>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006660:	4b05      	ldr	r3, [pc, #20]	; (8006678 <prvCheckForValidListAndQueue+0x60>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	490b      	ldr	r1, [pc, #44]	; (8006694 <prvCheckForValidListAndQueue+0x7c>)
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe fd6c 	bl	8005144 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800666c:	f000 f972 	bl	8006954 <vPortExitCritical>
}
 8006670:	bf00      	nop
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	200027c4 	.word	0x200027c4
 800667c:	20002794 	.word	0x20002794
 8006680:	200027a8 	.word	0x200027a8
 8006684:	200027bc 	.word	0x200027bc
 8006688:	200027c0 	.word	0x200027c0
 800668c:	20002870 	.word	0x20002870
 8006690:	200027d0 	.word	0x200027d0
 8006694:	08008358 	.word	0x08008358

08006698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3b04      	subs	r3, #4
 80066a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3b04      	subs	r3, #4
 80066b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f023 0201 	bic.w	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3b04      	subs	r3, #4
 80066c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066c8:	4a0c      	ldr	r2, [pc, #48]	; (80066fc <pxPortInitialiseStack+0x64>)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3b14      	subs	r3, #20
 80066d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3b04      	subs	r3, #4
 80066de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f06f 0202 	mvn.w	r2, #2
 80066e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3b20      	subs	r3, #32
 80066ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066ee:	68fb      	ldr	r3, [r7, #12]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	08006701 	.word	0x08006701

08006700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800670a:	4b12      	ldr	r3, [pc, #72]	; (8006754 <prvTaskExitError+0x54>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d00a      	beq.n	800672a <prvTaskExitError+0x2a>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	60fb      	str	r3, [r7, #12]
}
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <prvTaskExitError+0x28>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	60bb      	str	r3, [r7, #8]
}
 800673c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800673e:	bf00      	nop
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0fc      	beq.n	8006740 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	2000000c 	.word	0x2000000c
	...

08006760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <pxCurrentTCBConst2>)
 8006762:	6819      	ldr	r1, [r3, #0]
 8006764:	6808      	ldr	r0, [r1, #0]
 8006766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676a:	f380 8809 	msr	PSP, r0
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f380 8811 	msr	BASEPRI, r0
 800677a:	4770      	bx	lr
 800677c:	f3af 8000 	nop.w

08006780 <pxCurrentTCBConst2>:
 8006780:	20002294 	.word	0x20002294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop

08006788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006788:	4808      	ldr	r0, [pc, #32]	; (80067ac <prvPortStartFirstTask+0x24>)
 800678a:	6800      	ldr	r0, [r0, #0]
 800678c:	6800      	ldr	r0, [r0, #0]
 800678e:	f380 8808 	msr	MSP, r0
 8006792:	f04f 0000 	mov.w	r0, #0
 8006796:	f380 8814 	msr	CONTROL, r0
 800679a:	b662      	cpsie	i
 800679c:	b661      	cpsie	f
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	df00      	svc	0
 80067a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067aa:	bf00      	nop
 80067ac:	e000ed08 	.word	0xe000ed08

080067b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067b6:	4b46      	ldr	r3, [pc, #280]	; (80068d0 <xPortStartScheduler+0x120>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a46      	ldr	r2, [pc, #280]	; (80068d4 <xPortStartScheduler+0x124>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d10a      	bne.n	80067d6 <xPortStartScheduler+0x26>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	613b      	str	r3, [r7, #16]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067d6:	4b3e      	ldr	r3, [pc, #248]	; (80068d0 <xPortStartScheduler+0x120>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a3f      	ldr	r2, [pc, #252]	; (80068d8 <xPortStartScheduler+0x128>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10a      	bne.n	80067f6 <xPortStartScheduler+0x46>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	60fb      	str	r3, [r7, #12]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067f6:	4b39      	ldr	r3, [pc, #228]	; (80068dc <xPortStartScheduler+0x12c>)
 80067f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	22ff      	movs	r2, #255	; 0xff
 8006806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006818:	b2da      	uxtb	r2, r3
 800681a:	4b31      	ldr	r3, [pc, #196]	; (80068e0 <xPortStartScheduler+0x130>)
 800681c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800681e:	4b31      	ldr	r3, [pc, #196]	; (80068e4 <xPortStartScheduler+0x134>)
 8006820:	2207      	movs	r2, #7
 8006822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006824:	e009      	b.n	800683a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006826:	4b2f      	ldr	r3, [pc, #188]	; (80068e4 <xPortStartScheduler+0x134>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3b01      	subs	r3, #1
 800682c:	4a2d      	ldr	r2, [pc, #180]	; (80068e4 <xPortStartScheduler+0x134>)
 800682e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	b2db      	uxtb	r3, r3
 8006838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006842:	2b80      	cmp	r3, #128	; 0x80
 8006844:	d0ef      	beq.n	8006826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006846:	4b27      	ldr	r3, [pc, #156]	; (80068e4 <xPortStartScheduler+0x134>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f1c3 0307 	rsb	r3, r3, #7
 800684e:	2b04      	cmp	r3, #4
 8006850:	d00a      	beq.n	8006868 <xPortStartScheduler+0xb8>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	60bb      	str	r3, [r7, #8]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006868:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <xPortStartScheduler+0x134>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <xPortStartScheduler+0x134>)
 8006870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006872:	4b1c      	ldr	r3, [pc, #112]	; (80068e4 <xPortStartScheduler+0x134>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800687a:	4a1a      	ldr	r2, [pc, #104]	; (80068e4 <xPortStartScheduler+0x134>)
 800687c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	b2da      	uxtb	r2, r3
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006886:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <xPortStartScheduler+0x138>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <xPortStartScheduler+0x138>)
 800688c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006892:	4b15      	ldr	r3, [pc, #84]	; (80068e8 <xPortStartScheduler+0x138>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a14      	ldr	r2, [pc, #80]	; (80068e8 <xPortStartScheduler+0x138>)
 8006898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800689c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800689e:	f000 f8dd 	bl	8006a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <xPortStartScheduler+0x13c>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068a8:	f000 f8fc 	bl	8006aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068ac:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <xPortStartScheduler+0x140>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a0f      	ldr	r2, [pc, #60]	; (80068f0 <xPortStartScheduler+0x140>)
 80068b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068b8:	f7ff ff66 	bl	8006788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068bc:	f7ff f852 	bl	8005964 <vTaskSwitchContext>
	prvTaskExitError();
 80068c0:	f7ff ff1e 	bl	8006700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	e000ed00 	.word	0xe000ed00
 80068d4:	410fc271 	.word	0x410fc271
 80068d8:	410fc270 	.word	0x410fc270
 80068dc:	e000e400 	.word	0xe000e400
 80068e0:	200028c0 	.word	0x200028c0
 80068e4:	200028c4 	.word	0x200028c4
 80068e8:	e000ed20 	.word	0xe000ed20
 80068ec:	2000000c 	.word	0x2000000c
 80068f0:	e000ef34 	.word	0xe000ef34

080068f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
}
 800690c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800690e:	4b0f      	ldr	r3, [pc, #60]	; (800694c <vPortEnterCritical+0x58>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	4a0d      	ldr	r2, [pc, #52]	; (800694c <vPortEnterCritical+0x58>)
 8006916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <vPortEnterCritical+0x58>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d10f      	bne.n	8006940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <vPortEnterCritical+0x5c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <vPortEnterCritical+0x4c>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	603b      	str	r3, [r7, #0]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <vPortEnterCritical+0x4a>
	}
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	2000000c 	.word	0x2000000c
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800695a:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <vPortExitCritical+0x50>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <vPortExitCritical+0x24>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	607b      	str	r3, [r7, #4]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <vPortExitCritical+0x50>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3b01      	subs	r3, #1
 800697e:	4a09      	ldr	r2, [pc, #36]	; (80069a4 <vPortExitCritical+0x50>)
 8006980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006982:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <vPortExitCritical+0x50>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d105      	bne.n	8006996 <vPortExitCritical+0x42>
 800698a:	2300      	movs	r3, #0
 800698c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	f383 8811 	msr	BASEPRI, r3
}
 8006994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	2000000c 	.word	0x2000000c
	...

080069b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069b0:	f3ef 8009 	mrs	r0, PSP
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <pxCurrentTCBConst>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	f01e 0f10 	tst.w	lr, #16
 80069c0:	bf08      	it	eq
 80069c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	6010      	str	r0, [r2, #0]
 80069cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069d4:	f380 8811 	msr	BASEPRI, r0
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f7fe ffc0 	bl	8005964 <vTaskSwitchContext>
 80069e4:	f04f 0000 	mov.w	r0, #0
 80069e8:	f380 8811 	msr	BASEPRI, r0
 80069ec:	bc09      	pop	{r0, r3}
 80069ee:	6819      	ldr	r1, [r3, #0]
 80069f0:	6808      	ldr	r0, [r1, #0]
 80069f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f6:	f01e 0f10 	tst.w	lr, #16
 80069fa:	bf08      	it	eq
 80069fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a00:	f380 8809 	msr	PSP, r0
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	f3af 8000 	nop.w

08006a10 <pxCurrentTCBConst>:
 8006a10:	20002294 	.word	0x20002294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop

08006a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	607b      	str	r3, [r7, #4]
}
 8006a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a32:	f7fe fedd 	bl	80057f0 <xTaskIncrementTick>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a3c:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <xPortSysTickHandler+0x40>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	2300      	movs	r3, #0
 8006a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f383 8811 	msr	BASEPRI, r3
}
 8006a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	e000ed04 	.word	0xe000ed04

08006a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <vPortSetupTimerInterrupt+0x34>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a66:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <vPortSetupTimerInterrupt+0x38>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a6c:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <vPortSetupTimerInterrupt+0x3c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <vPortSetupTimerInterrupt+0x40>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	4a09      	ldr	r2, [pc, #36]	; (8006aa0 <vPortSetupTimerInterrupt+0x44>)
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a7e:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <vPortSetupTimerInterrupt+0x34>)
 8006a80:	2207      	movs	r2, #7
 8006a82:	601a      	str	r2, [r3, #0]
}
 8006a84:	bf00      	nop
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	e000e010 	.word	0xe000e010
 8006a94:	e000e018 	.word	0xe000e018
 8006a98:	20000000 	.word	0x20000000
 8006a9c:	10624dd3 	.word	0x10624dd3
 8006aa0:	e000e014 	.word	0xe000e014

08006aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ab4 <vPortEnableVFP+0x10>
 8006aa8:	6801      	ldr	r1, [r0, #0]
 8006aaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006aae:	6001      	str	r1, [r0, #0]
 8006ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ab2:	bf00      	nop
 8006ab4:	e000ed88 	.word	0xe000ed88

08006ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006abe:	f3ef 8305 	mrs	r3, IPSR
 8006ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b0f      	cmp	r3, #15
 8006ac8:	d914      	bls.n	8006af4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aca:	4a17      	ldr	r2, [pc, #92]	; (8006b28 <vPortValidateInterruptPriority+0x70>)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ad4:	4b15      	ldr	r3, [pc, #84]	; (8006b2c <vPortValidateInterruptPriority+0x74>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	7afa      	ldrb	r2, [r7, #11]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d20a      	bcs.n	8006af4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	607b      	str	r3, [r7, #4]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006af4:	4b0e      	ldr	r3, [pc, #56]	; (8006b30 <vPortValidateInterruptPriority+0x78>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006afc:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <vPortValidateInterruptPriority+0x7c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d90a      	bls.n	8006b1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	603b      	str	r3, [r7, #0]
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <vPortValidateInterruptPriority+0x60>
	}
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	e000e3f0 	.word	0xe000e3f0
 8006b2c:	200028c0 	.word	0x200028c0
 8006b30:	e000ed0c 	.word	0xe000ed0c
 8006b34:	200028c4 	.word	0x200028c4

08006b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08a      	sub	sp, #40	; 0x28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b40:	2300      	movs	r3, #0
 8006b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b44:	f7fe fd98 	bl	8005678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b48:	4b5b      	ldr	r3, [pc, #364]	; (8006cb8 <pvPortMalloc+0x180>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b50:	f000 f920 	bl	8006d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b54:	4b59      	ldr	r3, [pc, #356]	; (8006cbc <pvPortMalloc+0x184>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f040 8093 	bne.w	8006c88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01d      	beq.n	8006ba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b68:	2208      	movs	r2, #8
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d014      	beq.n	8006ba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f023 0307 	bic.w	r3, r3, #7
 8006b80:	3308      	adds	r3, #8
 8006b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <pvPortMalloc+0x6c>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	617b      	str	r3, [r7, #20]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d06e      	beq.n	8006c88 <pvPortMalloc+0x150>
 8006baa:	4b45      	ldr	r3, [pc, #276]	; (8006cc0 <pvPortMalloc+0x188>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d869      	bhi.n	8006c88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bb4:	4b43      	ldr	r3, [pc, #268]	; (8006cc4 <pvPortMalloc+0x18c>)
 8006bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bb8:	4b42      	ldr	r3, [pc, #264]	; (8006cc4 <pvPortMalloc+0x18c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bbe:	e004      	b.n	8006bca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d903      	bls.n	8006bdc <pvPortMalloc+0xa4>
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1f1      	bne.n	8006bc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bdc:	4b36      	ldr	r3, [pc, #216]	; (8006cb8 <pvPortMalloc+0x180>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d050      	beq.n	8006c88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2208      	movs	r2, #8
 8006bec:	4413      	add	r3, r2
 8006bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	1ad2      	subs	r2, r2, r3
 8006c00:	2308      	movs	r3, #8
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d91f      	bls.n	8006c48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <pvPortMalloc+0xf8>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	613b      	str	r3, [r7, #16]
}
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	1ad2      	subs	r2, r2, r3
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c42:	69b8      	ldr	r0, [r7, #24]
 8006c44:	f000 f908 	bl	8006e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c48:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <pvPortMalloc+0x188>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	4a1b      	ldr	r2, [pc, #108]	; (8006cc0 <pvPortMalloc+0x188>)
 8006c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c56:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <pvPortMalloc+0x188>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4b1b      	ldr	r3, [pc, #108]	; (8006cc8 <pvPortMalloc+0x190>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d203      	bcs.n	8006c6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c62:	4b17      	ldr	r3, [pc, #92]	; (8006cc0 <pvPortMalloc+0x188>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a18      	ldr	r2, [pc, #96]	; (8006cc8 <pvPortMalloc+0x190>)
 8006c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <pvPortMalloc+0x184>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <pvPortMalloc+0x194>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3301      	adds	r3, #1
 8006c84:	4a11      	ldr	r2, [pc, #68]	; (8006ccc <pvPortMalloc+0x194>)
 8006c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c88:	f7fe fd04 	bl	8005694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <pvPortMalloc+0x174>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60fb      	str	r3, [r7, #12]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <pvPortMalloc+0x172>
	return pvReturn;
 8006cac:	69fb      	ldr	r3, [r7, #28]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3728      	adds	r7, #40	; 0x28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	200064d0 	.word	0x200064d0
 8006cbc:	200064e4 	.word	0x200064e4
 8006cc0:	200064d4 	.word	0x200064d4
 8006cc4:	200064c8 	.word	0x200064c8
 8006cc8:	200064d8 	.word	0x200064d8
 8006ccc:	200064dc 	.word	0x200064dc

08006cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d04d      	beq.n	8006d7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ce2:	2308      	movs	r3, #8
 8006ce4:	425b      	negs	r3, r3
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	4413      	add	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	4b24      	ldr	r3, [pc, #144]	; (8006d88 <vPortFree+0xb8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <vPortFree+0x44>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	60fb      	str	r3, [r7, #12]
}
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <vPortFree+0x62>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	60bb      	str	r3, [r7, #8]
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <vPortFree+0xb8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01e      	beq.n	8006d7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d11a      	bne.n	8006d7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	4b0e      	ldr	r3, [pc, #56]	; (8006d88 <vPortFree+0xb8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	43db      	mvns	r3, r3
 8006d52:	401a      	ands	r2, r3
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d58:	f7fe fc8e 	bl	8005678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <vPortFree+0xbc>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4413      	add	r3, r2
 8006d66:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <vPortFree+0xbc>)
 8006d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d6a:	6938      	ldr	r0, [r7, #16]
 8006d6c:	f000 f874 	bl	8006e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d70:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <vPortFree+0xc0>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	4a06      	ldr	r2, [pc, #24]	; (8006d90 <vPortFree+0xc0>)
 8006d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d7a:	f7fe fc8b 	bl	8005694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d7e:	bf00      	nop
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	200064e4 	.word	0x200064e4
 8006d8c:	200064d4 	.word	0x200064d4
 8006d90:	200064e0 	.word	0x200064e0

08006d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006da0:	4b27      	ldr	r3, [pc, #156]	; (8006e40 <prvHeapInit+0xac>)
 8006da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00c      	beq.n	8006dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3307      	adds	r3, #7
 8006db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0307 	bic.w	r3, r3, #7
 8006dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	4a1f      	ldr	r2, [pc, #124]	; (8006e40 <prvHeapInit+0xac>)
 8006dc4:	4413      	add	r3, r2
 8006dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <prvHeapInit+0xb0>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dd2:	4b1c      	ldr	r3, [pc, #112]	; (8006e44 <prvHeapInit+0xb0>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	4413      	add	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006de0:	2208      	movs	r2, #8
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0307 	bic.w	r3, r3, #7
 8006dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4a15      	ldr	r2, [pc, #84]	; (8006e48 <prvHeapInit+0xb4>)
 8006df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006df6:	4b14      	ldr	r3, [pc, #80]	; (8006e48 <prvHeapInit+0xb4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dfe:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <prvHeapInit+0xb4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e14:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <prvHeapInit+0xb4>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	4a0a      	ldr	r2, [pc, #40]	; (8006e4c <prvHeapInit+0xb8>)
 8006e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <prvHeapInit+0xbc>)
 8006e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <prvHeapInit+0xc0>)
 8006e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e32:	601a      	str	r2, [r3, #0]
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	200028c8 	.word	0x200028c8
 8006e44:	200064c8 	.word	0x200064c8
 8006e48:	200064d0 	.word	0x200064d0
 8006e4c:	200064d8 	.word	0x200064d8
 8006e50:	200064d4 	.word	0x200064d4
 8006e54:	200064e4 	.word	0x200064e4

08006e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e60:	4b28      	ldr	r3, [pc, #160]	; (8006f04 <prvInsertBlockIntoFreeList+0xac>)
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	e002      	b.n	8006e6c <prvInsertBlockIntoFreeList+0x14>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d8f7      	bhi.n	8006e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	4413      	add	r3, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d108      	bne.n	8006e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	441a      	add	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	441a      	add	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d118      	bne.n	8006ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4b15      	ldr	r3, [pc, #84]	; (8006f08 <prvInsertBlockIntoFreeList+0xb0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d00d      	beq.n	8006ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	441a      	add	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e008      	b.n	8006ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ed6:	4b0c      	ldr	r3, [pc, #48]	; (8006f08 <prvInsertBlockIntoFreeList+0xb0>)
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e003      	b.n	8006ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d002      	beq.n	8006ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ef6:	bf00      	nop
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	200064c8 	.word	0x200064c8
 8006f08:	200064d0 	.word	0x200064d0

08006f0c <__errno>:
 8006f0c:	4b01      	ldr	r3, [pc, #4]	; (8006f14 <__errno+0x8>)
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000010 	.word	0x20000010

08006f18 <__libc_init_array>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	4d0d      	ldr	r5, [pc, #52]	; (8006f50 <__libc_init_array+0x38>)
 8006f1c:	4c0d      	ldr	r4, [pc, #52]	; (8006f54 <__libc_init_array+0x3c>)
 8006f1e:	1b64      	subs	r4, r4, r5
 8006f20:	10a4      	asrs	r4, r4, #2
 8006f22:	2600      	movs	r6, #0
 8006f24:	42a6      	cmp	r6, r4
 8006f26:	d109      	bne.n	8006f3c <__libc_init_array+0x24>
 8006f28:	4d0b      	ldr	r5, [pc, #44]	; (8006f58 <__libc_init_array+0x40>)
 8006f2a:	4c0c      	ldr	r4, [pc, #48]	; (8006f5c <__libc_init_array+0x44>)
 8006f2c:	f001 f952 	bl	80081d4 <_init>
 8006f30:	1b64      	subs	r4, r4, r5
 8006f32:	10a4      	asrs	r4, r4, #2
 8006f34:	2600      	movs	r6, #0
 8006f36:	42a6      	cmp	r6, r4
 8006f38:	d105      	bne.n	8006f46 <__libc_init_array+0x2e>
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f40:	4798      	blx	r3
 8006f42:	3601      	adds	r6, #1
 8006f44:	e7ee      	b.n	8006f24 <__libc_init_array+0xc>
 8006f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4a:	4798      	blx	r3
 8006f4c:	3601      	adds	r6, #1
 8006f4e:	e7f2      	b.n	8006f36 <__libc_init_array+0x1e>
 8006f50:	0800870c 	.word	0x0800870c
 8006f54:	0800870c 	.word	0x0800870c
 8006f58:	0800870c 	.word	0x0800870c
 8006f5c:	08008710 	.word	0x08008710

08006f60 <isprint>:
 8006f60:	4b02      	ldr	r3, [pc, #8]	; (8006f6c <isprint+0xc>)
 8006f62:	4418      	add	r0, r3
 8006f64:	7840      	ldrb	r0, [r0, #1]
 8006f66:	f000 0097 	and.w	r0, r0, #151	; 0x97
 8006f6a:	4770      	bx	lr
 8006f6c:	08008554 	.word	0x08008554

08006f70 <memcpy>:
 8006f70:	440a      	add	r2, r1
 8006f72:	4291      	cmp	r1, r2
 8006f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f78:	d100      	bne.n	8006f7c <memcpy+0xc>
 8006f7a:	4770      	bx	lr
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f86:	4291      	cmp	r1, r2
 8006f88:	d1f9      	bne.n	8006f7e <memcpy+0xe>
 8006f8a:	bd10      	pop	{r4, pc}

08006f8c <memset>:
 8006f8c:	4402      	add	r2, r0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d100      	bne.n	8006f96 <memset+0xa>
 8006f94:	4770      	bx	lr
 8006f96:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9a:	e7f9      	b.n	8006f90 <memset+0x4>

08006f9c <siscanf>:
 8006f9c:	b40e      	push	{r1, r2, r3}
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	b09f      	sub	sp, #124	; 0x7c
 8006fa2:	ac21      	add	r4, sp, #132	; 0x84
 8006fa4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006fa8:	f854 2b04 	ldr.w	r2, [r4], #4
 8006fac:	9201      	str	r2, [sp, #4]
 8006fae:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006fb2:	9004      	str	r0, [sp, #16]
 8006fb4:	9008      	str	r0, [sp, #32]
 8006fb6:	f7f9 f91d 	bl	80001f4 <strlen>
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <siscanf+0x50>)
 8006fbc:	9005      	str	r0, [sp, #20]
 8006fbe:	9009      	str	r0, [sp, #36]	; 0x24
 8006fc0:	930d      	str	r3, [sp, #52]	; 0x34
 8006fc2:	480b      	ldr	r0, [pc, #44]	; (8006ff0 <siscanf+0x54>)
 8006fc4:	9a01      	ldr	r2, [sp, #4]
 8006fc6:	6800      	ldr	r0, [r0, #0]
 8006fc8:	9403      	str	r4, [sp, #12]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	9311      	str	r3, [sp, #68]	; 0x44
 8006fce:	9316      	str	r3, [sp, #88]	; 0x58
 8006fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006fd8:	a904      	add	r1, sp, #16
 8006fda:	4623      	mov	r3, r4
 8006fdc:	f000 f9e2 	bl	80073a4 <__ssvfiscanf_r>
 8006fe0:	b01f      	add	sp, #124	; 0x7c
 8006fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe6:	b003      	add	sp, #12
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	08006ff5 	.word	0x08006ff5
 8006ff0:	20000010 	.word	0x20000010

08006ff4 <__seofread>:
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	4770      	bx	lr

08006ff8 <_vsiprintf_r>:
 8006ff8:	b500      	push	{lr}
 8006ffa:	b09b      	sub	sp, #108	; 0x6c
 8006ffc:	9100      	str	r1, [sp, #0]
 8006ffe:	9104      	str	r1, [sp, #16]
 8007000:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007004:	9105      	str	r1, [sp, #20]
 8007006:	9102      	str	r1, [sp, #8]
 8007008:	4905      	ldr	r1, [pc, #20]	; (8007020 <_vsiprintf_r+0x28>)
 800700a:	9103      	str	r1, [sp, #12]
 800700c:	4669      	mov	r1, sp
 800700e:	f000 f86f 	bl	80070f0 <_svfiprintf_r>
 8007012:	9b00      	ldr	r3, [sp, #0]
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	b01b      	add	sp, #108	; 0x6c
 800701a:	f85d fb04 	ldr.w	pc, [sp], #4
 800701e:	bf00      	nop
 8007020:	ffff0208 	.word	0xffff0208

08007024 <vsiprintf>:
 8007024:	4613      	mov	r3, r2
 8007026:	460a      	mov	r2, r1
 8007028:	4601      	mov	r1, r0
 800702a:	4802      	ldr	r0, [pc, #8]	; (8007034 <vsiprintf+0x10>)
 800702c:	6800      	ldr	r0, [r0, #0]
 800702e:	f7ff bfe3 	b.w	8006ff8 <_vsiprintf_r>
 8007032:	bf00      	nop
 8007034:	20000010 	.word	0x20000010

08007038 <__ssputs_r>:
 8007038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800703c:	688e      	ldr	r6, [r1, #8]
 800703e:	429e      	cmp	r6, r3
 8007040:	4682      	mov	sl, r0
 8007042:	460c      	mov	r4, r1
 8007044:	4690      	mov	r8, r2
 8007046:	461f      	mov	r7, r3
 8007048:	d838      	bhi.n	80070bc <__ssputs_r+0x84>
 800704a:	898a      	ldrh	r2, [r1, #12]
 800704c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007050:	d032      	beq.n	80070b8 <__ssputs_r+0x80>
 8007052:	6825      	ldr	r5, [r4, #0]
 8007054:	6909      	ldr	r1, [r1, #16]
 8007056:	eba5 0901 	sub.w	r9, r5, r1
 800705a:	6965      	ldr	r5, [r4, #20]
 800705c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007060:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007064:	3301      	adds	r3, #1
 8007066:	444b      	add	r3, r9
 8007068:	106d      	asrs	r5, r5, #1
 800706a:	429d      	cmp	r5, r3
 800706c:	bf38      	it	cc
 800706e:	461d      	movcc	r5, r3
 8007070:	0553      	lsls	r3, r2, #21
 8007072:	d531      	bpl.n	80070d8 <__ssputs_r+0xa0>
 8007074:	4629      	mov	r1, r5
 8007076:	f000 ffe5 	bl	8008044 <_malloc_r>
 800707a:	4606      	mov	r6, r0
 800707c:	b950      	cbnz	r0, 8007094 <__ssputs_r+0x5c>
 800707e:	230c      	movs	r3, #12
 8007080:	f8ca 3000 	str.w	r3, [sl]
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800708a:	81a3      	strh	r3, [r4, #12]
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007094:	6921      	ldr	r1, [r4, #16]
 8007096:	464a      	mov	r2, r9
 8007098:	f7ff ff6a 	bl	8006f70 <memcpy>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	6126      	str	r6, [r4, #16]
 80070aa:	6165      	str	r5, [r4, #20]
 80070ac:	444e      	add	r6, r9
 80070ae:	eba5 0509 	sub.w	r5, r5, r9
 80070b2:	6026      	str	r6, [r4, #0]
 80070b4:	60a5      	str	r5, [r4, #8]
 80070b6:	463e      	mov	r6, r7
 80070b8:	42be      	cmp	r6, r7
 80070ba:	d900      	bls.n	80070be <__ssputs_r+0x86>
 80070bc:	463e      	mov	r6, r7
 80070be:	6820      	ldr	r0, [r4, #0]
 80070c0:	4632      	mov	r2, r6
 80070c2:	4641      	mov	r1, r8
 80070c4:	f000 ff38 	bl	8007f38 <memmove>
 80070c8:	68a3      	ldr	r3, [r4, #8]
 80070ca:	1b9b      	subs	r3, r3, r6
 80070cc:	60a3      	str	r3, [r4, #8]
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	4433      	add	r3, r6
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	2000      	movs	r0, #0
 80070d6:	e7db      	b.n	8007090 <__ssputs_r+0x58>
 80070d8:	462a      	mov	r2, r5
 80070da:	f001 f827 	bl	800812c <_realloc_r>
 80070de:	4606      	mov	r6, r0
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d1e1      	bne.n	80070a8 <__ssputs_r+0x70>
 80070e4:	6921      	ldr	r1, [r4, #16]
 80070e6:	4650      	mov	r0, sl
 80070e8:	f000 ff40 	bl	8007f6c <_free_r>
 80070ec:	e7c7      	b.n	800707e <__ssputs_r+0x46>
	...

080070f0 <_svfiprintf_r>:
 80070f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	4698      	mov	r8, r3
 80070f6:	898b      	ldrh	r3, [r1, #12]
 80070f8:	061b      	lsls	r3, r3, #24
 80070fa:	b09d      	sub	sp, #116	; 0x74
 80070fc:	4607      	mov	r7, r0
 80070fe:	460d      	mov	r5, r1
 8007100:	4614      	mov	r4, r2
 8007102:	d50e      	bpl.n	8007122 <_svfiprintf_r+0x32>
 8007104:	690b      	ldr	r3, [r1, #16]
 8007106:	b963      	cbnz	r3, 8007122 <_svfiprintf_r+0x32>
 8007108:	2140      	movs	r1, #64	; 0x40
 800710a:	f000 ff9b 	bl	8008044 <_malloc_r>
 800710e:	6028      	str	r0, [r5, #0]
 8007110:	6128      	str	r0, [r5, #16]
 8007112:	b920      	cbnz	r0, 800711e <_svfiprintf_r+0x2e>
 8007114:	230c      	movs	r3, #12
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	e0d1      	b.n	80072c2 <_svfiprintf_r+0x1d2>
 800711e:	2340      	movs	r3, #64	; 0x40
 8007120:	616b      	str	r3, [r5, #20]
 8007122:	2300      	movs	r3, #0
 8007124:	9309      	str	r3, [sp, #36]	; 0x24
 8007126:	2320      	movs	r3, #32
 8007128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800712c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007130:	2330      	movs	r3, #48	; 0x30
 8007132:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80072dc <_svfiprintf_r+0x1ec>
 8007136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800713a:	f04f 0901 	mov.w	r9, #1
 800713e:	4623      	mov	r3, r4
 8007140:	469a      	mov	sl, r3
 8007142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007146:	b10a      	cbz	r2, 800714c <_svfiprintf_r+0x5c>
 8007148:	2a25      	cmp	r2, #37	; 0x25
 800714a:	d1f9      	bne.n	8007140 <_svfiprintf_r+0x50>
 800714c:	ebba 0b04 	subs.w	fp, sl, r4
 8007150:	d00b      	beq.n	800716a <_svfiprintf_r+0x7a>
 8007152:	465b      	mov	r3, fp
 8007154:	4622      	mov	r2, r4
 8007156:	4629      	mov	r1, r5
 8007158:	4638      	mov	r0, r7
 800715a:	f7ff ff6d 	bl	8007038 <__ssputs_r>
 800715e:	3001      	adds	r0, #1
 8007160:	f000 80aa 	beq.w	80072b8 <_svfiprintf_r+0x1c8>
 8007164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007166:	445a      	add	r2, fp
 8007168:	9209      	str	r2, [sp, #36]	; 0x24
 800716a:	f89a 3000 	ldrb.w	r3, [sl]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80a2 	beq.w	80072b8 <_svfiprintf_r+0x1c8>
 8007174:	2300      	movs	r3, #0
 8007176:	f04f 32ff 	mov.w	r2, #4294967295
 800717a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800717e:	f10a 0a01 	add.w	sl, sl, #1
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	9307      	str	r3, [sp, #28]
 8007186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800718a:	931a      	str	r3, [sp, #104]	; 0x68
 800718c:	4654      	mov	r4, sl
 800718e:	2205      	movs	r2, #5
 8007190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007194:	4851      	ldr	r0, [pc, #324]	; (80072dc <_svfiprintf_r+0x1ec>)
 8007196:	f7f9 f83b 	bl	8000210 <memchr>
 800719a:	9a04      	ldr	r2, [sp, #16]
 800719c:	b9d8      	cbnz	r0, 80071d6 <_svfiprintf_r+0xe6>
 800719e:	06d0      	lsls	r0, r2, #27
 80071a0:	bf44      	itt	mi
 80071a2:	2320      	movmi	r3, #32
 80071a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071a8:	0711      	lsls	r1, r2, #28
 80071aa:	bf44      	itt	mi
 80071ac:	232b      	movmi	r3, #43	; 0x2b
 80071ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071b2:	f89a 3000 	ldrb.w	r3, [sl]
 80071b6:	2b2a      	cmp	r3, #42	; 0x2a
 80071b8:	d015      	beq.n	80071e6 <_svfiprintf_r+0xf6>
 80071ba:	9a07      	ldr	r2, [sp, #28]
 80071bc:	4654      	mov	r4, sl
 80071be:	2000      	movs	r0, #0
 80071c0:	f04f 0c0a 	mov.w	ip, #10
 80071c4:	4621      	mov	r1, r4
 80071c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ca:	3b30      	subs	r3, #48	; 0x30
 80071cc:	2b09      	cmp	r3, #9
 80071ce:	d94e      	bls.n	800726e <_svfiprintf_r+0x17e>
 80071d0:	b1b0      	cbz	r0, 8007200 <_svfiprintf_r+0x110>
 80071d2:	9207      	str	r2, [sp, #28]
 80071d4:	e014      	b.n	8007200 <_svfiprintf_r+0x110>
 80071d6:	eba0 0308 	sub.w	r3, r0, r8
 80071da:	fa09 f303 	lsl.w	r3, r9, r3
 80071de:	4313      	orrs	r3, r2
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	46a2      	mov	sl, r4
 80071e4:	e7d2      	b.n	800718c <_svfiprintf_r+0x9c>
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	1d19      	adds	r1, r3, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	9103      	str	r1, [sp, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	bfbb      	ittet	lt
 80071f2:	425b      	neglt	r3, r3
 80071f4:	f042 0202 	orrlt.w	r2, r2, #2
 80071f8:	9307      	strge	r3, [sp, #28]
 80071fa:	9307      	strlt	r3, [sp, #28]
 80071fc:	bfb8      	it	lt
 80071fe:	9204      	strlt	r2, [sp, #16]
 8007200:	7823      	ldrb	r3, [r4, #0]
 8007202:	2b2e      	cmp	r3, #46	; 0x2e
 8007204:	d10c      	bne.n	8007220 <_svfiprintf_r+0x130>
 8007206:	7863      	ldrb	r3, [r4, #1]
 8007208:	2b2a      	cmp	r3, #42	; 0x2a
 800720a:	d135      	bne.n	8007278 <_svfiprintf_r+0x188>
 800720c:	9b03      	ldr	r3, [sp, #12]
 800720e:	1d1a      	adds	r2, r3, #4
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	9203      	str	r2, [sp, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	bfb8      	it	lt
 8007218:	f04f 33ff 	movlt.w	r3, #4294967295
 800721c:	3402      	adds	r4, #2
 800721e:	9305      	str	r3, [sp, #20]
 8007220:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072ec <_svfiprintf_r+0x1fc>
 8007224:	7821      	ldrb	r1, [r4, #0]
 8007226:	2203      	movs	r2, #3
 8007228:	4650      	mov	r0, sl
 800722a:	f7f8 fff1 	bl	8000210 <memchr>
 800722e:	b140      	cbz	r0, 8007242 <_svfiprintf_r+0x152>
 8007230:	2340      	movs	r3, #64	; 0x40
 8007232:	eba0 000a 	sub.w	r0, r0, sl
 8007236:	fa03 f000 	lsl.w	r0, r3, r0
 800723a:	9b04      	ldr	r3, [sp, #16]
 800723c:	4303      	orrs	r3, r0
 800723e:	3401      	adds	r4, #1
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007246:	4826      	ldr	r0, [pc, #152]	; (80072e0 <_svfiprintf_r+0x1f0>)
 8007248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800724c:	2206      	movs	r2, #6
 800724e:	f7f8 ffdf 	bl	8000210 <memchr>
 8007252:	2800      	cmp	r0, #0
 8007254:	d038      	beq.n	80072c8 <_svfiprintf_r+0x1d8>
 8007256:	4b23      	ldr	r3, [pc, #140]	; (80072e4 <_svfiprintf_r+0x1f4>)
 8007258:	bb1b      	cbnz	r3, 80072a2 <_svfiprintf_r+0x1b2>
 800725a:	9b03      	ldr	r3, [sp, #12]
 800725c:	3307      	adds	r3, #7
 800725e:	f023 0307 	bic.w	r3, r3, #7
 8007262:	3308      	adds	r3, #8
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007268:	4433      	add	r3, r6
 800726a:	9309      	str	r3, [sp, #36]	; 0x24
 800726c:	e767      	b.n	800713e <_svfiprintf_r+0x4e>
 800726e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007272:	460c      	mov	r4, r1
 8007274:	2001      	movs	r0, #1
 8007276:	e7a5      	b.n	80071c4 <_svfiprintf_r+0xd4>
 8007278:	2300      	movs	r3, #0
 800727a:	3401      	adds	r4, #1
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	4619      	mov	r1, r3
 8007280:	f04f 0c0a 	mov.w	ip, #10
 8007284:	4620      	mov	r0, r4
 8007286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800728a:	3a30      	subs	r2, #48	; 0x30
 800728c:	2a09      	cmp	r2, #9
 800728e:	d903      	bls.n	8007298 <_svfiprintf_r+0x1a8>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0c5      	beq.n	8007220 <_svfiprintf_r+0x130>
 8007294:	9105      	str	r1, [sp, #20]
 8007296:	e7c3      	b.n	8007220 <_svfiprintf_r+0x130>
 8007298:	fb0c 2101 	mla	r1, ip, r1, r2
 800729c:	4604      	mov	r4, r0
 800729e:	2301      	movs	r3, #1
 80072a0:	e7f0      	b.n	8007284 <_svfiprintf_r+0x194>
 80072a2:	ab03      	add	r3, sp, #12
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	462a      	mov	r2, r5
 80072a8:	4b0f      	ldr	r3, [pc, #60]	; (80072e8 <_svfiprintf_r+0x1f8>)
 80072aa:	a904      	add	r1, sp, #16
 80072ac:	4638      	mov	r0, r7
 80072ae:	f3af 8000 	nop.w
 80072b2:	1c42      	adds	r2, r0, #1
 80072b4:	4606      	mov	r6, r0
 80072b6:	d1d6      	bne.n	8007266 <_svfiprintf_r+0x176>
 80072b8:	89ab      	ldrh	r3, [r5, #12]
 80072ba:	065b      	lsls	r3, r3, #25
 80072bc:	f53f af2c 	bmi.w	8007118 <_svfiprintf_r+0x28>
 80072c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072c2:	b01d      	add	sp, #116	; 0x74
 80072c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c8:	ab03      	add	r3, sp, #12
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	462a      	mov	r2, r5
 80072ce:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <_svfiprintf_r+0x1f8>)
 80072d0:	a904      	add	r1, sp, #16
 80072d2:	4638      	mov	r0, r7
 80072d4:	f000 fa4c 	bl	8007770 <_printf_i>
 80072d8:	e7eb      	b.n	80072b2 <_svfiprintf_r+0x1c2>
 80072da:	bf00      	nop
 80072dc:	08008655 	.word	0x08008655
 80072e0:	0800865f 	.word	0x0800865f
 80072e4:	00000000 	.word	0x00000000
 80072e8:	08007039 	.word	0x08007039
 80072ec:	0800865b 	.word	0x0800865b

080072f0 <_sungetc_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	1c4b      	adds	r3, r1, #1
 80072f4:	4614      	mov	r4, r2
 80072f6:	d103      	bne.n	8007300 <_sungetc_r+0x10>
 80072f8:	f04f 35ff 	mov.w	r5, #4294967295
 80072fc:	4628      	mov	r0, r5
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	8993      	ldrh	r3, [r2, #12]
 8007302:	f023 0320 	bic.w	r3, r3, #32
 8007306:	8193      	strh	r3, [r2, #12]
 8007308:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800730a:	6852      	ldr	r2, [r2, #4]
 800730c:	b2cd      	uxtb	r5, r1
 800730e:	b18b      	cbz	r3, 8007334 <_sungetc_r+0x44>
 8007310:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007312:	4293      	cmp	r3, r2
 8007314:	dd08      	ble.n	8007328 <_sungetc_r+0x38>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	1e5a      	subs	r2, r3, #1
 800731a:	6022      	str	r2, [r4, #0]
 800731c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007320:	6863      	ldr	r3, [r4, #4]
 8007322:	3301      	adds	r3, #1
 8007324:	6063      	str	r3, [r4, #4]
 8007326:	e7e9      	b.n	80072fc <_sungetc_r+0xc>
 8007328:	4621      	mov	r1, r4
 800732a:	f000 fdc9 	bl	8007ec0 <__submore>
 800732e:	2800      	cmp	r0, #0
 8007330:	d0f1      	beq.n	8007316 <_sungetc_r+0x26>
 8007332:	e7e1      	b.n	80072f8 <_sungetc_r+0x8>
 8007334:	6921      	ldr	r1, [r4, #16]
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	b151      	cbz	r1, 8007350 <_sungetc_r+0x60>
 800733a:	4299      	cmp	r1, r3
 800733c:	d208      	bcs.n	8007350 <_sungetc_r+0x60>
 800733e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007342:	42a9      	cmp	r1, r5
 8007344:	d104      	bne.n	8007350 <_sungetc_r+0x60>
 8007346:	3b01      	subs	r3, #1
 8007348:	3201      	adds	r2, #1
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	6062      	str	r2, [r4, #4]
 800734e:	e7d5      	b.n	80072fc <_sungetc_r+0xc>
 8007350:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007358:	6363      	str	r3, [r4, #52]	; 0x34
 800735a:	2303      	movs	r3, #3
 800735c:	63a3      	str	r3, [r4, #56]	; 0x38
 800735e:	4623      	mov	r3, r4
 8007360:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	2301      	movs	r3, #1
 8007368:	e7dc      	b.n	8007324 <_sungetc_r+0x34>

0800736a <__ssrefill_r>:
 800736a:	b510      	push	{r4, lr}
 800736c:	460c      	mov	r4, r1
 800736e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007370:	b169      	cbz	r1, 800738e <__ssrefill_r+0x24>
 8007372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007376:	4299      	cmp	r1, r3
 8007378:	d001      	beq.n	800737e <__ssrefill_r+0x14>
 800737a:	f000 fdf7 	bl	8007f6c <_free_r>
 800737e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007380:	6063      	str	r3, [r4, #4]
 8007382:	2000      	movs	r0, #0
 8007384:	6360      	str	r0, [r4, #52]	; 0x34
 8007386:	b113      	cbz	r3, 800738e <__ssrefill_r+0x24>
 8007388:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	bd10      	pop	{r4, pc}
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	2300      	movs	r3, #0
 8007394:	6063      	str	r3, [r4, #4]
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	f043 0320 	orr.w	r3, r3, #32
 800739c:	81a3      	strh	r3, [r4, #12]
 800739e:	f04f 30ff 	mov.w	r0, #4294967295
 80073a2:	e7f3      	b.n	800738c <__ssrefill_r+0x22>

080073a4 <__ssvfiscanf_r>:
 80073a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a8:	460c      	mov	r4, r1
 80073aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80073ae:	2100      	movs	r1, #0
 80073b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80073b4:	49a6      	ldr	r1, [pc, #664]	; (8007650 <__ssvfiscanf_r+0x2ac>)
 80073b6:	91a0      	str	r1, [sp, #640]	; 0x280
 80073b8:	f10d 0804 	add.w	r8, sp, #4
 80073bc:	49a5      	ldr	r1, [pc, #660]	; (8007654 <__ssvfiscanf_r+0x2b0>)
 80073be:	4fa6      	ldr	r7, [pc, #664]	; (8007658 <__ssvfiscanf_r+0x2b4>)
 80073c0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800765c <__ssvfiscanf_r+0x2b8>
 80073c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80073c8:	4606      	mov	r6, r0
 80073ca:	91a1      	str	r1, [sp, #644]	; 0x284
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	7813      	ldrb	r3, [r2, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 815a 	beq.w	800768a <__ssvfiscanf_r+0x2e6>
 80073d6:	5dd9      	ldrb	r1, [r3, r7]
 80073d8:	f011 0108 	ands.w	r1, r1, #8
 80073dc:	f102 0501 	add.w	r5, r2, #1
 80073e0:	d019      	beq.n	8007416 <__ssvfiscanf_r+0x72>
 80073e2:	6863      	ldr	r3, [r4, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dd0f      	ble.n	8007408 <__ssvfiscanf_r+0x64>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	5cba      	ldrb	r2, [r7, r2]
 80073ee:	0712      	lsls	r2, r2, #28
 80073f0:	d401      	bmi.n	80073f6 <__ssvfiscanf_r+0x52>
 80073f2:	462a      	mov	r2, r5
 80073f4:	e7eb      	b.n	80073ce <__ssvfiscanf_r+0x2a>
 80073f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80073f8:	3201      	adds	r2, #1
 80073fa:	9245      	str	r2, [sp, #276]	; 0x114
 80073fc:	6862      	ldr	r2, [r4, #4]
 80073fe:	3301      	adds	r3, #1
 8007400:	3a01      	subs	r2, #1
 8007402:	6062      	str	r2, [r4, #4]
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	e7ec      	b.n	80073e2 <__ssvfiscanf_r+0x3e>
 8007408:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800740a:	4621      	mov	r1, r4
 800740c:	4630      	mov	r0, r6
 800740e:	4798      	blx	r3
 8007410:	2800      	cmp	r0, #0
 8007412:	d0e9      	beq.n	80073e8 <__ssvfiscanf_r+0x44>
 8007414:	e7ed      	b.n	80073f2 <__ssvfiscanf_r+0x4e>
 8007416:	2b25      	cmp	r3, #37	; 0x25
 8007418:	d012      	beq.n	8007440 <__ssvfiscanf_r+0x9c>
 800741a:	469a      	mov	sl, r3
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f340 8091 	ble.w	8007546 <__ssvfiscanf_r+0x1a2>
 8007424:	6822      	ldr	r2, [r4, #0]
 8007426:	7813      	ldrb	r3, [r2, #0]
 8007428:	4553      	cmp	r3, sl
 800742a:	f040 812e 	bne.w	800768a <__ssvfiscanf_r+0x2e6>
 800742e:	6863      	ldr	r3, [r4, #4]
 8007430:	3b01      	subs	r3, #1
 8007432:	6063      	str	r3, [r4, #4]
 8007434:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007436:	3201      	adds	r2, #1
 8007438:	3301      	adds	r3, #1
 800743a:	6022      	str	r2, [r4, #0]
 800743c:	9345      	str	r3, [sp, #276]	; 0x114
 800743e:	e7d8      	b.n	80073f2 <__ssvfiscanf_r+0x4e>
 8007440:	9141      	str	r1, [sp, #260]	; 0x104
 8007442:	9143      	str	r1, [sp, #268]	; 0x10c
 8007444:	7853      	ldrb	r3, [r2, #1]
 8007446:	2b2a      	cmp	r3, #42	; 0x2a
 8007448:	bf02      	ittt	eq
 800744a:	2310      	moveq	r3, #16
 800744c:	1c95      	addeq	r5, r2, #2
 800744e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007450:	220a      	movs	r2, #10
 8007452:	46aa      	mov	sl, r5
 8007454:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007458:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800745c:	2b09      	cmp	r3, #9
 800745e:	d91d      	bls.n	800749c <__ssvfiscanf_r+0xf8>
 8007460:	487e      	ldr	r0, [pc, #504]	; (800765c <__ssvfiscanf_r+0x2b8>)
 8007462:	2203      	movs	r2, #3
 8007464:	f7f8 fed4 	bl	8000210 <memchr>
 8007468:	b140      	cbz	r0, 800747c <__ssvfiscanf_r+0xd8>
 800746a:	2301      	movs	r3, #1
 800746c:	eba0 0009 	sub.w	r0, r0, r9
 8007470:	fa03 f000 	lsl.w	r0, r3, r0
 8007474:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007476:	4318      	orrs	r0, r3
 8007478:	9041      	str	r0, [sp, #260]	; 0x104
 800747a:	4655      	mov	r5, sl
 800747c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007480:	2b78      	cmp	r3, #120	; 0x78
 8007482:	d806      	bhi.n	8007492 <__ssvfiscanf_r+0xee>
 8007484:	2b57      	cmp	r3, #87	; 0x57
 8007486:	d810      	bhi.n	80074aa <__ssvfiscanf_r+0x106>
 8007488:	2b25      	cmp	r3, #37	; 0x25
 800748a:	d0c6      	beq.n	800741a <__ssvfiscanf_r+0x76>
 800748c:	d856      	bhi.n	800753c <__ssvfiscanf_r+0x198>
 800748e:	2b00      	cmp	r3, #0
 8007490:	d064      	beq.n	800755c <__ssvfiscanf_r+0x1b8>
 8007492:	2303      	movs	r3, #3
 8007494:	9347      	str	r3, [sp, #284]	; 0x11c
 8007496:	230a      	movs	r3, #10
 8007498:	9342      	str	r3, [sp, #264]	; 0x108
 800749a:	e071      	b.n	8007580 <__ssvfiscanf_r+0x1dc>
 800749c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800749e:	fb02 1103 	mla	r1, r2, r3, r1
 80074a2:	3930      	subs	r1, #48	; 0x30
 80074a4:	9143      	str	r1, [sp, #268]	; 0x10c
 80074a6:	4655      	mov	r5, sl
 80074a8:	e7d3      	b.n	8007452 <__ssvfiscanf_r+0xae>
 80074aa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80074ae:	2a20      	cmp	r2, #32
 80074b0:	d8ef      	bhi.n	8007492 <__ssvfiscanf_r+0xee>
 80074b2:	a101      	add	r1, pc, #4	; (adr r1, 80074b8 <__ssvfiscanf_r+0x114>)
 80074b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80074b8:	0800756b 	.word	0x0800756b
 80074bc:	08007493 	.word	0x08007493
 80074c0:	08007493 	.word	0x08007493
 80074c4:	080075c9 	.word	0x080075c9
 80074c8:	08007493 	.word	0x08007493
 80074cc:	08007493 	.word	0x08007493
 80074d0:	08007493 	.word	0x08007493
 80074d4:	08007493 	.word	0x08007493
 80074d8:	08007493 	.word	0x08007493
 80074dc:	08007493 	.word	0x08007493
 80074e0:	08007493 	.word	0x08007493
 80074e4:	080075df 	.word	0x080075df
 80074e8:	080075b5 	.word	0x080075b5
 80074ec:	08007543 	.word	0x08007543
 80074f0:	08007543 	.word	0x08007543
 80074f4:	08007543 	.word	0x08007543
 80074f8:	08007493 	.word	0x08007493
 80074fc:	080075b9 	.word	0x080075b9
 8007500:	08007493 	.word	0x08007493
 8007504:	08007493 	.word	0x08007493
 8007508:	08007493 	.word	0x08007493
 800750c:	08007493 	.word	0x08007493
 8007510:	080075ef 	.word	0x080075ef
 8007514:	080075c1 	.word	0x080075c1
 8007518:	08007563 	.word	0x08007563
 800751c:	08007493 	.word	0x08007493
 8007520:	08007493 	.word	0x08007493
 8007524:	080075eb 	.word	0x080075eb
 8007528:	08007493 	.word	0x08007493
 800752c:	080075b5 	.word	0x080075b5
 8007530:	08007493 	.word	0x08007493
 8007534:	08007493 	.word	0x08007493
 8007538:	0800756b 	.word	0x0800756b
 800753c:	3b45      	subs	r3, #69	; 0x45
 800753e:	2b02      	cmp	r3, #2
 8007540:	d8a7      	bhi.n	8007492 <__ssvfiscanf_r+0xee>
 8007542:	2305      	movs	r3, #5
 8007544:	e01b      	b.n	800757e <__ssvfiscanf_r+0x1da>
 8007546:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007548:	4621      	mov	r1, r4
 800754a:	4630      	mov	r0, r6
 800754c:	4798      	blx	r3
 800754e:	2800      	cmp	r0, #0
 8007550:	f43f af68 	beq.w	8007424 <__ssvfiscanf_r+0x80>
 8007554:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007556:	2800      	cmp	r0, #0
 8007558:	f040 808d 	bne.w	8007676 <__ssvfiscanf_r+0x2d2>
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e08f      	b.n	8007682 <__ssvfiscanf_r+0x2de>
 8007562:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007564:	f042 0220 	orr.w	r2, r2, #32
 8007568:	9241      	str	r2, [sp, #260]	; 0x104
 800756a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800756c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007570:	9241      	str	r2, [sp, #260]	; 0x104
 8007572:	2210      	movs	r2, #16
 8007574:	2b6f      	cmp	r3, #111	; 0x6f
 8007576:	9242      	str	r2, [sp, #264]	; 0x108
 8007578:	bf34      	ite	cc
 800757a:	2303      	movcc	r3, #3
 800757c:	2304      	movcs	r3, #4
 800757e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	dd42      	ble.n	800760c <__ssvfiscanf_r+0x268>
 8007586:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007588:	0659      	lsls	r1, r3, #25
 800758a:	d404      	bmi.n	8007596 <__ssvfiscanf_r+0x1f2>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	781a      	ldrb	r2, [r3, #0]
 8007590:	5cba      	ldrb	r2, [r7, r2]
 8007592:	0712      	lsls	r2, r2, #28
 8007594:	d441      	bmi.n	800761a <__ssvfiscanf_r+0x276>
 8007596:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007598:	2b02      	cmp	r3, #2
 800759a:	dc50      	bgt.n	800763e <__ssvfiscanf_r+0x29a>
 800759c:	466b      	mov	r3, sp
 800759e:	4622      	mov	r2, r4
 80075a0:	a941      	add	r1, sp, #260	; 0x104
 80075a2:	4630      	mov	r0, r6
 80075a4:	f000 fa0a 	bl	80079bc <_scanf_chars>
 80075a8:	2801      	cmp	r0, #1
 80075aa:	d06e      	beq.n	800768a <__ssvfiscanf_r+0x2e6>
 80075ac:	2802      	cmp	r0, #2
 80075ae:	f47f af20 	bne.w	80073f2 <__ssvfiscanf_r+0x4e>
 80075b2:	e7cf      	b.n	8007554 <__ssvfiscanf_r+0x1b0>
 80075b4:	220a      	movs	r2, #10
 80075b6:	e7dd      	b.n	8007574 <__ssvfiscanf_r+0x1d0>
 80075b8:	2300      	movs	r3, #0
 80075ba:	9342      	str	r3, [sp, #264]	; 0x108
 80075bc:	2303      	movs	r3, #3
 80075be:	e7de      	b.n	800757e <__ssvfiscanf_r+0x1da>
 80075c0:	2308      	movs	r3, #8
 80075c2:	9342      	str	r3, [sp, #264]	; 0x108
 80075c4:	2304      	movs	r3, #4
 80075c6:	e7da      	b.n	800757e <__ssvfiscanf_r+0x1da>
 80075c8:	4629      	mov	r1, r5
 80075ca:	4640      	mov	r0, r8
 80075cc:	f000 fb48 	bl	8007c60 <__sccl>
 80075d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80075d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d6:	9341      	str	r3, [sp, #260]	; 0x104
 80075d8:	4605      	mov	r5, r0
 80075da:	2301      	movs	r3, #1
 80075dc:	e7cf      	b.n	800757e <__ssvfiscanf_r+0x1da>
 80075de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80075e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075e4:	9341      	str	r3, [sp, #260]	; 0x104
 80075e6:	2300      	movs	r3, #0
 80075e8:	e7c9      	b.n	800757e <__ssvfiscanf_r+0x1da>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e7c7      	b.n	800757e <__ssvfiscanf_r+0x1da>
 80075ee:	9841      	ldr	r0, [sp, #260]	; 0x104
 80075f0:	06c3      	lsls	r3, r0, #27
 80075f2:	f53f aefe 	bmi.w	80073f2 <__ssvfiscanf_r+0x4e>
 80075f6:	9b00      	ldr	r3, [sp, #0]
 80075f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80075fa:	1d19      	adds	r1, r3, #4
 80075fc:	9100      	str	r1, [sp, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f010 0f01 	tst.w	r0, #1
 8007604:	bf14      	ite	ne
 8007606:	801a      	strhne	r2, [r3, #0]
 8007608:	601a      	streq	r2, [r3, #0]
 800760a:	e6f2      	b.n	80073f2 <__ssvfiscanf_r+0x4e>
 800760c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800760e:	4621      	mov	r1, r4
 8007610:	4630      	mov	r0, r6
 8007612:	4798      	blx	r3
 8007614:	2800      	cmp	r0, #0
 8007616:	d0b6      	beq.n	8007586 <__ssvfiscanf_r+0x1e2>
 8007618:	e79c      	b.n	8007554 <__ssvfiscanf_r+0x1b0>
 800761a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800761c:	3201      	adds	r2, #1
 800761e:	9245      	str	r2, [sp, #276]	; 0x114
 8007620:	6862      	ldr	r2, [r4, #4]
 8007622:	3a01      	subs	r2, #1
 8007624:	2a00      	cmp	r2, #0
 8007626:	6062      	str	r2, [r4, #4]
 8007628:	dd02      	ble.n	8007630 <__ssvfiscanf_r+0x28c>
 800762a:	3301      	adds	r3, #1
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	e7ad      	b.n	800758c <__ssvfiscanf_r+0x1e8>
 8007630:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007632:	4621      	mov	r1, r4
 8007634:	4630      	mov	r0, r6
 8007636:	4798      	blx	r3
 8007638:	2800      	cmp	r0, #0
 800763a:	d0a7      	beq.n	800758c <__ssvfiscanf_r+0x1e8>
 800763c:	e78a      	b.n	8007554 <__ssvfiscanf_r+0x1b0>
 800763e:	2b04      	cmp	r3, #4
 8007640:	dc0e      	bgt.n	8007660 <__ssvfiscanf_r+0x2bc>
 8007642:	466b      	mov	r3, sp
 8007644:	4622      	mov	r2, r4
 8007646:	a941      	add	r1, sp, #260	; 0x104
 8007648:	4630      	mov	r0, r6
 800764a:	f000 fa11 	bl	8007a70 <_scanf_i>
 800764e:	e7ab      	b.n	80075a8 <__ssvfiscanf_r+0x204>
 8007650:	080072f1 	.word	0x080072f1
 8007654:	0800736b 	.word	0x0800736b
 8007658:	08008555 	.word	0x08008555
 800765c:	0800865b 	.word	0x0800865b
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <__ssvfiscanf_r+0x2ec>)
 8007662:	2b00      	cmp	r3, #0
 8007664:	f43f aec5 	beq.w	80073f2 <__ssvfiscanf_r+0x4e>
 8007668:	466b      	mov	r3, sp
 800766a:	4622      	mov	r2, r4
 800766c:	a941      	add	r1, sp, #260	; 0x104
 800766e:	4630      	mov	r0, r6
 8007670:	f3af 8000 	nop.w
 8007674:	e798      	b.n	80075a8 <__ssvfiscanf_r+0x204>
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f013 0f40 	tst.w	r3, #64	; 0x40
 800767c:	bf18      	it	ne
 800767e:	f04f 30ff 	movne.w	r0, #4294967295
 8007682:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800768c:	e7f9      	b.n	8007682 <__ssvfiscanf_r+0x2de>
 800768e:	bf00      	nop
 8007690:	00000000 	.word	0x00000000

08007694 <_printf_common>:
 8007694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	4616      	mov	r6, r2
 800769a:	4699      	mov	r9, r3
 800769c:	688a      	ldr	r2, [r1, #8]
 800769e:	690b      	ldr	r3, [r1, #16]
 80076a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076a4:	4293      	cmp	r3, r2
 80076a6:	bfb8      	it	lt
 80076a8:	4613      	movlt	r3, r2
 80076aa:	6033      	str	r3, [r6, #0]
 80076ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076b0:	4607      	mov	r7, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	b10a      	cbz	r2, 80076ba <_printf_common+0x26>
 80076b6:	3301      	adds	r3, #1
 80076b8:	6033      	str	r3, [r6, #0]
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	0699      	lsls	r1, r3, #26
 80076be:	bf42      	ittt	mi
 80076c0:	6833      	ldrmi	r3, [r6, #0]
 80076c2:	3302      	addmi	r3, #2
 80076c4:	6033      	strmi	r3, [r6, #0]
 80076c6:	6825      	ldr	r5, [r4, #0]
 80076c8:	f015 0506 	ands.w	r5, r5, #6
 80076cc:	d106      	bne.n	80076dc <_printf_common+0x48>
 80076ce:	f104 0a19 	add.w	sl, r4, #25
 80076d2:	68e3      	ldr	r3, [r4, #12]
 80076d4:	6832      	ldr	r2, [r6, #0]
 80076d6:	1a9b      	subs	r3, r3, r2
 80076d8:	42ab      	cmp	r3, r5
 80076da:	dc26      	bgt.n	800772a <_printf_common+0x96>
 80076dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076e0:	1e13      	subs	r3, r2, #0
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	bf18      	it	ne
 80076e6:	2301      	movne	r3, #1
 80076e8:	0692      	lsls	r2, r2, #26
 80076ea:	d42b      	bmi.n	8007744 <_printf_common+0xb0>
 80076ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076f0:	4649      	mov	r1, r9
 80076f2:	4638      	mov	r0, r7
 80076f4:	47c0      	blx	r8
 80076f6:	3001      	adds	r0, #1
 80076f8:	d01e      	beq.n	8007738 <_printf_common+0xa4>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	68e5      	ldr	r5, [r4, #12]
 80076fe:	6832      	ldr	r2, [r6, #0]
 8007700:	f003 0306 	and.w	r3, r3, #6
 8007704:	2b04      	cmp	r3, #4
 8007706:	bf08      	it	eq
 8007708:	1aad      	subeq	r5, r5, r2
 800770a:	68a3      	ldr	r3, [r4, #8]
 800770c:	6922      	ldr	r2, [r4, #16]
 800770e:	bf0c      	ite	eq
 8007710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007714:	2500      	movne	r5, #0
 8007716:	4293      	cmp	r3, r2
 8007718:	bfc4      	itt	gt
 800771a:	1a9b      	subgt	r3, r3, r2
 800771c:	18ed      	addgt	r5, r5, r3
 800771e:	2600      	movs	r6, #0
 8007720:	341a      	adds	r4, #26
 8007722:	42b5      	cmp	r5, r6
 8007724:	d11a      	bne.n	800775c <_printf_common+0xc8>
 8007726:	2000      	movs	r0, #0
 8007728:	e008      	b.n	800773c <_printf_common+0xa8>
 800772a:	2301      	movs	r3, #1
 800772c:	4652      	mov	r2, sl
 800772e:	4649      	mov	r1, r9
 8007730:	4638      	mov	r0, r7
 8007732:	47c0      	blx	r8
 8007734:	3001      	adds	r0, #1
 8007736:	d103      	bne.n	8007740 <_printf_common+0xac>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007740:	3501      	adds	r5, #1
 8007742:	e7c6      	b.n	80076d2 <_printf_common+0x3e>
 8007744:	18e1      	adds	r1, r4, r3
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	2030      	movs	r0, #48	; 0x30
 800774a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800774e:	4422      	add	r2, r4
 8007750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007758:	3302      	adds	r3, #2
 800775a:	e7c7      	b.n	80076ec <_printf_common+0x58>
 800775c:	2301      	movs	r3, #1
 800775e:	4622      	mov	r2, r4
 8007760:	4649      	mov	r1, r9
 8007762:	4638      	mov	r0, r7
 8007764:	47c0      	blx	r8
 8007766:	3001      	adds	r0, #1
 8007768:	d0e6      	beq.n	8007738 <_printf_common+0xa4>
 800776a:	3601      	adds	r6, #1
 800776c:	e7d9      	b.n	8007722 <_printf_common+0x8e>
	...

08007770 <_printf_i>:
 8007770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007774:	7e0f      	ldrb	r7, [r1, #24]
 8007776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007778:	2f78      	cmp	r7, #120	; 0x78
 800777a:	4691      	mov	r9, r2
 800777c:	4680      	mov	r8, r0
 800777e:	460c      	mov	r4, r1
 8007780:	469a      	mov	sl, r3
 8007782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007786:	d807      	bhi.n	8007798 <_printf_i+0x28>
 8007788:	2f62      	cmp	r7, #98	; 0x62
 800778a:	d80a      	bhi.n	80077a2 <_printf_i+0x32>
 800778c:	2f00      	cmp	r7, #0
 800778e:	f000 80d8 	beq.w	8007942 <_printf_i+0x1d2>
 8007792:	2f58      	cmp	r7, #88	; 0x58
 8007794:	f000 80a3 	beq.w	80078de <_printf_i+0x16e>
 8007798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800779c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077a0:	e03a      	b.n	8007818 <_printf_i+0xa8>
 80077a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077a6:	2b15      	cmp	r3, #21
 80077a8:	d8f6      	bhi.n	8007798 <_printf_i+0x28>
 80077aa:	a101      	add	r1, pc, #4	; (adr r1, 80077b0 <_printf_i+0x40>)
 80077ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077b0:	08007809 	.word	0x08007809
 80077b4:	0800781d 	.word	0x0800781d
 80077b8:	08007799 	.word	0x08007799
 80077bc:	08007799 	.word	0x08007799
 80077c0:	08007799 	.word	0x08007799
 80077c4:	08007799 	.word	0x08007799
 80077c8:	0800781d 	.word	0x0800781d
 80077cc:	08007799 	.word	0x08007799
 80077d0:	08007799 	.word	0x08007799
 80077d4:	08007799 	.word	0x08007799
 80077d8:	08007799 	.word	0x08007799
 80077dc:	08007929 	.word	0x08007929
 80077e0:	0800784d 	.word	0x0800784d
 80077e4:	0800790b 	.word	0x0800790b
 80077e8:	08007799 	.word	0x08007799
 80077ec:	08007799 	.word	0x08007799
 80077f0:	0800794b 	.word	0x0800794b
 80077f4:	08007799 	.word	0x08007799
 80077f8:	0800784d 	.word	0x0800784d
 80077fc:	08007799 	.word	0x08007799
 8007800:	08007799 	.word	0x08007799
 8007804:	08007913 	.word	0x08007913
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	1d1a      	adds	r2, r3, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	602a      	str	r2, [r5, #0]
 8007810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007818:	2301      	movs	r3, #1
 800781a:	e0a3      	b.n	8007964 <_printf_i+0x1f4>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	6829      	ldr	r1, [r5, #0]
 8007820:	0606      	lsls	r6, r0, #24
 8007822:	f101 0304 	add.w	r3, r1, #4
 8007826:	d50a      	bpl.n	800783e <_printf_i+0xce>
 8007828:	680e      	ldr	r6, [r1, #0]
 800782a:	602b      	str	r3, [r5, #0]
 800782c:	2e00      	cmp	r6, #0
 800782e:	da03      	bge.n	8007838 <_printf_i+0xc8>
 8007830:	232d      	movs	r3, #45	; 0x2d
 8007832:	4276      	negs	r6, r6
 8007834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007838:	485e      	ldr	r0, [pc, #376]	; (80079b4 <_printf_i+0x244>)
 800783a:	230a      	movs	r3, #10
 800783c:	e019      	b.n	8007872 <_printf_i+0x102>
 800783e:	680e      	ldr	r6, [r1, #0]
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007846:	bf18      	it	ne
 8007848:	b236      	sxthne	r6, r6
 800784a:	e7ef      	b.n	800782c <_printf_i+0xbc>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	6820      	ldr	r0, [r4, #0]
 8007850:	1d19      	adds	r1, r3, #4
 8007852:	6029      	str	r1, [r5, #0]
 8007854:	0601      	lsls	r1, r0, #24
 8007856:	d501      	bpl.n	800785c <_printf_i+0xec>
 8007858:	681e      	ldr	r6, [r3, #0]
 800785a:	e002      	b.n	8007862 <_printf_i+0xf2>
 800785c:	0646      	lsls	r6, r0, #25
 800785e:	d5fb      	bpl.n	8007858 <_printf_i+0xe8>
 8007860:	881e      	ldrh	r6, [r3, #0]
 8007862:	4854      	ldr	r0, [pc, #336]	; (80079b4 <_printf_i+0x244>)
 8007864:	2f6f      	cmp	r7, #111	; 0x6f
 8007866:	bf0c      	ite	eq
 8007868:	2308      	moveq	r3, #8
 800786a:	230a      	movne	r3, #10
 800786c:	2100      	movs	r1, #0
 800786e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007872:	6865      	ldr	r5, [r4, #4]
 8007874:	60a5      	str	r5, [r4, #8]
 8007876:	2d00      	cmp	r5, #0
 8007878:	bfa2      	ittt	ge
 800787a:	6821      	ldrge	r1, [r4, #0]
 800787c:	f021 0104 	bicge.w	r1, r1, #4
 8007880:	6021      	strge	r1, [r4, #0]
 8007882:	b90e      	cbnz	r6, 8007888 <_printf_i+0x118>
 8007884:	2d00      	cmp	r5, #0
 8007886:	d04d      	beq.n	8007924 <_printf_i+0x1b4>
 8007888:	4615      	mov	r5, r2
 800788a:	fbb6 f1f3 	udiv	r1, r6, r3
 800788e:	fb03 6711 	mls	r7, r3, r1, r6
 8007892:	5dc7      	ldrb	r7, [r0, r7]
 8007894:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007898:	4637      	mov	r7, r6
 800789a:	42bb      	cmp	r3, r7
 800789c:	460e      	mov	r6, r1
 800789e:	d9f4      	bls.n	800788a <_printf_i+0x11a>
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d10b      	bne.n	80078bc <_printf_i+0x14c>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	07de      	lsls	r6, r3, #31
 80078a8:	d508      	bpl.n	80078bc <_printf_i+0x14c>
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	6861      	ldr	r1, [r4, #4]
 80078ae:	4299      	cmp	r1, r3
 80078b0:	bfde      	ittt	le
 80078b2:	2330      	movle	r3, #48	; 0x30
 80078b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078bc:	1b52      	subs	r2, r2, r5
 80078be:	6122      	str	r2, [r4, #16]
 80078c0:	f8cd a000 	str.w	sl, [sp]
 80078c4:	464b      	mov	r3, r9
 80078c6:	aa03      	add	r2, sp, #12
 80078c8:	4621      	mov	r1, r4
 80078ca:	4640      	mov	r0, r8
 80078cc:	f7ff fee2 	bl	8007694 <_printf_common>
 80078d0:	3001      	adds	r0, #1
 80078d2:	d14c      	bne.n	800796e <_printf_i+0x1fe>
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	b004      	add	sp, #16
 80078da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078de:	4835      	ldr	r0, [pc, #212]	; (80079b4 <_printf_i+0x244>)
 80078e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078e4:	6829      	ldr	r1, [r5, #0]
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80078ec:	6029      	str	r1, [r5, #0]
 80078ee:	061d      	lsls	r5, r3, #24
 80078f0:	d514      	bpl.n	800791c <_printf_i+0x1ac>
 80078f2:	07df      	lsls	r7, r3, #31
 80078f4:	bf44      	itt	mi
 80078f6:	f043 0320 	orrmi.w	r3, r3, #32
 80078fa:	6023      	strmi	r3, [r4, #0]
 80078fc:	b91e      	cbnz	r6, 8007906 <_printf_i+0x196>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	f023 0320 	bic.w	r3, r3, #32
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	2310      	movs	r3, #16
 8007908:	e7b0      	b.n	800786c <_printf_i+0xfc>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	f043 0320 	orr.w	r3, r3, #32
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	2378      	movs	r3, #120	; 0x78
 8007914:	4828      	ldr	r0, [pc, #160]	; (80079b8 <_printf_i+0x248>)
 8007916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800791a:	e7e3      	b.n	80078e4 <_printf_i+0x174>
 800791c:	0659      	lsls	r1, r3, #25
 800791e:	bf48      	it	mi
 8007920:	b2b6      	uxthmi	r6, r6
 8007922:	e7e6      	b.n	80078f2 <_printf_i+0x182>
 8007924:	4615      	mov	r5, r2
 8007926:	e7bb      	b.n	80078a0 <_printf_i+0x130>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	6826      	ldr	r6, [r4, #0]
 800792c:	6961      	ldr	r1, [r4, #20]
 800792e:	1d18      	adds	r0, r3, #4
 8007930:	6028      	str	r0, [r5, #0]
 8007932:	0635      	lsls	r5, r6, #24
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	d501      	bpl.n	800793c <_printf_i+0x1cc>
 8007938:	6019      	str	r1, [r3, #0]
 800793a:	e002      	b.n	8007942 <_printf_i+0x1d2>
 800793c:	0670      	lsls	r0, r6, #25
 800793e:	d5fb      	bpl.n	8007938 <_printf_i+0x1c8>
 8007940:	8019      	strh	r1, [r3, #0]
 8007942:	2300      	movs	r3, #0
 8007944:	6123      	str	r3, [r4, #16]
 8007946:	4615      	mov	r5, r2
 8007948:	e7ba      	b.n	80078c0 <_printf_i+0x150>
 800794a:	682b      	ldr	r3, [r5, #0]
 800794c:	1d1a      	adds	r2, r3, #4
 800794e:	602a      	str	r2, [r5, #0]
 8007950:	681d      	ldr	r5, [r3, #0]
 8007952:	6862      	ldr	r2, [r4, #4]
 8007954:	2100      	movs	r1, #0
 8007956:	4628      	mov	r0, r5
 8007958:	f7f8 fc5a 	bl	8000210 <memchr>
 800795c:	b108      	cbz	r0, 8007962 <_printf_i+0x1f2>
 800795e:	1b40      	subs	r0, r0, r5
 8007960:	6060      	str	r0, [r4, #4]
 8007962:	6863      	ldr	r3, [r4, #4]
 8007964:	6123      	str	r3, [r4, #16]
 8007966:	2300      	movs	r3, #0
 8007968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800796c:	e7a8      	b.n	80078c0 <_printf_i+0x150>
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	462a      	mov	r2, r5
 8007972:	4649      	mov	r1, r9
 8007974:	4640      	mov	r0, r8
 8007976:	47d0      	blx	sl
 8007978:	3001      	adds	r0, #1
 800797a:	d0ab      	beq.n	80078d4 <_printf_i+0x164>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	079b      	lsls	r3, r3, #30
 8007980:	d413      	bmi.n	80079aa <_printf_i+0x23a>
 8007982:	68e0      	ldr	r0, [r4, #12]
 8007984:	9b03      	ldr	r3, [sp, #12]
 8007986:	4298      	cmp	r0, r3
 8007988:	bfb8      	it	lt
 800798a:	4618      	movlt	r0, r3
 800798c:	e7a4      	b.n	80078d8 <_printf_i+0x168>
 800798e:	2301      	movs	r3, #1
 8007990:	4632      	mov	r2, r6
 8007992:	4649      	mov	r1, r9
 8007994:	4640      	mov	r0, r8
 8007996:	47d0      	blx	sl
 8007998:	3001      	adds	r0, #1
 800799a:	d09b      	beq.n	80078d4 <_printf_i+0x164>
 800799c:	3501      	adds	r5, #1
 800799e:	68e3      	ldr	r3, [r4, #12]
 80079a0:	9903      	ldr	r1, [sp, #12]
 80079a2:	1a5b      	subs	r3, r3, r1
 80079a4:	42ab      	cmp	r3, r5
 80079a6:	dcf2      	bgt.n	800798e <_printf_i+0x21e>
 80079a8:	e7eb      	b.n	8007982 <_printf_i+0x212>
 80079aa:	2500      	movs	r5, #0
 80079ac:	f104 0619 	add.w	r6, r4, #25
 80079b0:	e7f5      	b.n	800799e <_printf_i+0x22e>
 80079b2:	bf00      	nop
 80079b4:	08008666 	.word	0x08008666
 80079b8:	08008677 	.word	0x08008677

080079bc <_scanf_chars>:
 80079bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c0:	4615      	mov	r5, r2
 80079c2:	688a      	ldr	r2, [r1, #8]
 80079c4:	4680      	mov	r8, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	b932      	cbnz	r2, 80079d8 <_scanf_chars+0x1c>
 80079ca:	698a      	ldr	r2, [r1, #24]
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	bf0c      	ite	eq
 80079d0:	2201      	moveq	r2, #1
 80079d2:	f04f 32ff 	movne.w	r2, #4294967295
 80079d6:	608a      	str	r2, [r1, #8]
 80079d8:	6822      	ldr	r2, [r4, #0]
 80079da:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007a6c <_scanf_chars+0xb0>
 80079de:	06d1      	lsls	r1, r2, #27
 80079e0:	bf5f      	itttt	pl
 80079e2:	681a      	ldrpl	r2, [r3, #0]
 80079e4:	1d11      	addpl	r1, r2, #4
 80079e6:	6019      	strpl	r1, [r3, #0]
 80079e8:	6816      	ldrpl	r6, [r2, #0]
 80079ea:	2700      	movs	r7, #0
 80079ec:	69a0      	ldr	r0, [r4, #24]
 80079ee:	b188      	cbz	r0, 8007a14 <_scanf_chars+0x58>
 80079f0:	2801      	cmp	r0, #1
 80079f2:	d107      	bne.n	8007a04 <_scanf_chars+0x48>
 80079f4:	682a      	ldr	r2, [r5, #0]
 80079f6:	7811      	ldrb	r1, [r2, #0]
 80079f8:	6962      	ldr	r2, [r4, #20]
 80079fa:	5c52      	ldrb	r2, [r2, r1]
 80079fc:	b952      	cbnz	r2, 8007a14 <_scanf_chars+0x58>
 80079fe:	2f00      	cmp	r7, #0
 8007a00:	d031      	beq.n	8007a66 <_scanf_chars+0xaa>
 8007a02:	e022      	b.n	8007a4a <_scanf_chars+0x8e>
 8007a04:	2802      	cmp	r0, #2
 8007a06:	d120      	bne.n	8007a4a <_scanf_chars+0x8e>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007a10:	071b      	lsls	r3, r3, #28
 8007a12:	d41a      	bmi.n	8007a4a <_scanf_chars+0x8e>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	06da      	lsls	r2, r3, #27
 8007a18:	bf5e      	ittt	pl
 8007a1a:	682b      	ldrpl	r3, [r5, #0]
 8007a1c:	781b      	ldrbpl	r3, [r3, #0]
 8007a1e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007a22:	682a      	ldr	r2, [r5, #0]
 8007a24:	686b      	ldr	r3, [r5, #4]
 8007a26:	3201      	adds	r2, #1
 8007a28:	602a      	str	r2, [r5, #0]
 8007a2a:	68a2      	ldr	r2, [r4, #8]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	3a01      	subs	r2, #1
 8007a30:	606b      	str	r3, [r5, #4]
 8007a32:	3701      	adds	r7, #1
 8007a34:	60a2      	str	r2, [r4, #8]
 8007a36:	b142      	cbz	r2, 8007a4a <_scanf_chars+0x8e>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dcd7      	bgt.n	80079ec <_scanf_chars+0x30>
 8007a3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a40:	4629      	mov	r1, r5
 8007a42:	4640      	mov	r0, r8
 8007a44:	4798      	blx	r3
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d0d0      	beq.n	80079ec <_scanf_chars+0x30>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	f013 0310 	ands.w	r3, r3, #16
 8007a50:	d105      	bne.n	8007a5e <_scanf_chars+0xa2>
 8007a52:	68e2      	ldr	r2, [r4, #12]
 8007a54:	3201      	adds	r2, #1
 8007a56:	60e2      	str	r2, [r4, #12]
 8007a58:	69a2      	ldr	r2, [r4, #24]
 8007a5a:	b102      	cbz	r2, 8007a5e <_scanf_chars+0xa2>
 8007a5c:	7033      	strb	r3, [r6, #0]
 8007a5e:	6923      	ldr	r3, [r4, #16]
 8007a60:	443b      	add	r3, r7
 8007a62:	6123      	str	r3, [r4, #16]
 8007a64:	2000      	movs	r0, #0
 8007a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6a:	bf00      	nop
 8007a6c:	08008555 	.word	0x08008555

08007a70 <_scanf_i>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	4698      	mov	r8, r3
 8007a76:	4b76      	ldr	r3, [pc, #472]	; (8007c50 <_scanf_i+0x1e0>)
 8007a78:	460c      	mov	r4, r1
 8007a7a:	4682      	mov	sl, r0
 8007a7c:	4616      	mov	r6, r2
 8007a7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a82:	b087      	sub	sp, #28
 8007a84:	ab03      	add	r3, sp, #12
 8007a86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007a8a:	4b72      	ldr	r3, [pc, #456]	; (8007c54 <_scanf_i+0x1e4>)
 8007a8c:	69a1      	ldr	r1, [r4, #24]
 8007a8e:	4a72      	ldr	r2, [pc, #456]	; (8007c58 <_scanf_i+0x1e8>)
 8007a90:	2903      	cmp	r1, #3
 8007a92:	bf18      	it	ne
 8007a94:	461a      	movne	r2, r3
 8007a96:	68a3      	ldr	r3, [r4, #8]
 8007a98:	9201      	str	r2, [sp, #4]
 8007a9a:	1e5a      	subs	r2, r3, #1
 8007a9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007aa0:	bf88      	it	hi
 8007aa2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007aa6:	4627      	mov	r7, r4
 8007aa8:	bf82      	ittt	hi
 8007aaa:	eb03 0905 	addhi.w	r9, r3, r5
 8007aae:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007ab2:	60a3      	strhi	r3, [r4, #8]
 8007ab4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007ab8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007abc:	bf98      	it	ls
 8007abe:	f04f 0900 	movls.w	r9, #0
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	463d      	mov	r5, r7
 8007ac6:	f04f 0b00 	mov.w	fp, #0
 8007aca:	6831      	ldr	r1, [r6, #0]
 8007acc:	ab03      	add	r3, sp, #12
 8007ace:	7809      	ldrb	r1, [r1, #0]
 8007ad0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	f7f8 fb9b 	bl	8000210 <memchr>
 8007ada:	b328      	cbz	r0, 8007b28 <_scanf_i+0xb8>
 8007adc:	f1bb 0f01 	cmp.w	fp, #1
 8007ae0:	d159      	bne.n	8007b96 <_scanf_i+0x126>
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	b92a      	cbnz	r2, 8007af2 <_scanf_i+0x82>
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aee:	6063      	str	r3, [r4, #4]
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	6822      	ldr	r2, [r4, #0]
 8007af4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	68a2      	ldr	r2, [r4, #8]
 8007afc:	1e51      	subs	r1, r2, #1
 8007afe:	60a1      	str	r1, [r4, #8]
 8007b00:	b192      	cbz	r2, 8007b28 <_scanf_i+0xb8>
 8007b02:	6832      	ldr	r2, [r6, #0]
 8007b04:	1c51      	adds	r1, r2, #1
 8007b06:	6031      	str	r1, [r6, #0]
 8007b08:	7812      	ldrb	r2, [r2, #0]
 8007b0a:	f805 2b01 	strb.w	r2, [r5], #1
 8007b0e:	6872      	ldr	r2, [r6, #4]
 8007b10:	3a01      	subs	r2, #1
 8007b12:	2a00      	cmp	r2, #0
 8007b14:	6072      	str	r2, [r6, #4]
 8007b16:	dc07      	bgt.n	8007b28 <_scanf_i+0xb8>
 8007b18:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4650      	mov	r0, sl
 8007b20:	4790      	blx	r2
 8007b22:	2800      	cmp	r0, #0
 8007b24:	f040 8085 	bne.w	8007c32 <_scanf_i+0x1c2>
 8007b28:	f10b 0b01 	add.w	fp, fp, #1
 8007b2c:	f1bb 0f03 	cmp.w	fp, #3
 8007b30:	d1cb      	bne.n	8007aca <_scanf_i+0x5a>
 8007b32:	6863      	ldr	r3, [r4, #4]
 8007b34:	b90b      	cbnz	r3, 8007b3a <_scanf_i+0xca>
 8007b36:	230a      	movs	r3, #10
 8007b38:	6063      	str	r3, [r4, #4]
 8007b3a:	6863      	ldr	r3, [r4, #4]
 8007b3c:	4947      	ldr	r1, [pc, #284]	; (8007c5c <_scanf_i+0x1ec>)
 8007b3e:	6960      	ldr	r0, [r4, #20]
 8007b40:	1ac9      	subs	r1, r1, r3
 8007b42:	f000 f88d 	bl	8007c60 <__sccl>
 8007b46:	f04f 0b00 	mov.w	fp, #0
 8007b4a:	68a3      	ldr	r3, [r4, #8]
 8007b4c:	6822      	ldr	r2, [r4, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d03d      	beq.n	8007bce <_scanf_i+0x15e>
 8007b52:	6831      	ldr	r1, [r6, #0]
 8007b54:	6960      	ldr	r0, [r4, #20]
 8007b56:	f891 c000 	ldrb.w	ip, [r1]
 8007b5a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d035      	beq.n	8007bce <_scanf_i+0x15e>
 8007b62:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007b66:	d124      	bne.n	8007bb2 <_scanf_i+0x142>
 8007b68:	0510      	lsls	r0, r2, #20
 8007b6a:	d522      	bpl.n	8007bb2 <_scanf_i+0x142>
 8007b6c:	f10b 0b01 	add.w	fp, fp, #1
 8007b70:	f1b9 0f00 	cmp.w	r9, #0
 8007b74:	d003      	beq.n	8007b7e <_scanf_i+0x10e>
 8007b76:	3301      	adds	r3, #1
 8007b78:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b7c:	60a3      	str	r3, [r4, #8]
 8007b7e:	6873      	ldr	r3, [r6, #4]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	6073      	str	r3, [r6, #4]
 8007b86:	dd1b      	ble.n	8007bc0 <_scanf_i+0x150>
 8007b88:	6833      	ldr	r3, [r6, #0]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	6033      	str	r3, [r6, #0]
 8007b8e:	68a3      	ldr	r3, [r4, #8]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	60a3      	str	r3, [r4, #8]
 8007b94:	e7d9      	b.n	8007b4a <_scanf_i+0xda>
 8007b96:	f1bb 0f02 	cmp.w	fp, #2
 8007b9a:	d1ae      	bne.n	8007afa <_scanf_i+0x8a>
 8007b9c:	6822      	ldr	r2, [r4, #0]
 8007b9e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007ba2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007ba6:	d1bf      	bne.n	8007b28 <_scanf_i+0xb8>
 8007ba8:	2310      	movs	r3, #16
 8007baa:	6063      	str	r3, [r4, #4]
 8007bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bb0:	e7a2      	b.n	8007af8 <_scanf_i+0x88>
 8007bb2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007bb6:	6022      	str	r2, [r4, #0]
 8007bb8:	780b      	ldrb	r3, [r1, #0]
 8007bba:	f805 3b01 	strb.w	r3, [r5], #1
 8007bbe:	e7de      	b.n	8007b7e <_scanf_i+0x10e>
 8007bc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	4798      	blx	r3
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d0df      	beq.n	8007b8e <_scanf_i+0x11e>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	05db      	lsls	r3, r3, #23
 8007bd2:	d50d      	bpl.n	8007bf0 <_scanf_i+0x180>
 8007bd4:	42bd      	cmp	r5, r7
 8007bd6:	d909      	bls.n	8007bec <_scanf_i+0x17c>
 8007bd8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007bdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007be0:	4632      	mov	r2, r6
 8007be2:	4650      	mov	r0, sl
 8007be4:	4798      	blx	r3
 8007be6:	f105 39ff 	add.w	r9, r5, #4294967295
 8007bea:	464d      	mov	r5, r9
 8007bec:	42bd      	cmp	r5, r7
 8007bee:	d02d      	beq.n	8007c4c <_scanf_i+0x1dc>
 8007bf0:	6822      	ldr	r2, [r4, #0]
 8007bf2:	f012 0210 	ands.w	r2, r2, #16
 8007bf6:	d113      	bne.n	8007c20 <_scanf_i+0x1b0>
 8007bf8:	702a      	strb	r2, [r5, #0]
 8007bfa:	6863      	ldr	r3, [r4, #4]
 8007bfc:	9e01      	ldr	r6, [sp, #4]
 8007bfe:	4639      	mov	r1, r7
 8007c00:	4650      	mov	r0, sl
 8007c02:	47b0      	blx	r6
 8007c04:	6821      	ldr	r1, [r4, #0]
 8007c06:	f8d8 3000 	ldr.w	r3, [r8]
 8007c0a:	f011 0f20 	tst.w	r1, #32
 8007c0e:	d013      	beq.n	8007c38 <_scanf_i+0x1c8>
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	f8c8 2000 	str.w	r2, [r8]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6018      	str	r0, [r3, #0]
 8007c1a:	68e3      	ldr	r3, [r4, #12]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	60e3      	str	r3, [r4, #12]
 8007c20:	1bed      	subs	r5, r5, r7
 8007c22:	44ab      	add	fp, r5
 8007c24:	6925      	ldr	r5, [r4, #16]
 8007c26:	445d      	add	r5, fp
 8007c28:	6125      	str	r5, [r4, #16]
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	b007      	add	sp, #28
 8007c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c32:	f04f 0b00 	mov.w	fp, #0
 8007c36:	e7ca      	b.n	8007bce <_scanf_i+0x15e>
 8007c38:	1d1a      	adds	r2, r3, #4
 8007c3a:	f8c8 2000 	str.w	r2, [r8]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f011 0f01 	tst.w	r1, #1
 8007c44:	bf14      	ite	ne
 8007c46:	8018      	strhne	r0, [r3, #0]
 8007c48:	6018      	streq	r0, [r3, #0]
 8007c4a:	e7e6      	b.n	8007c1a <_scanf_i+0x1aa>
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	e7ed      	b.n	8007c2c <_scanf_i+0x1bc>
 8007c50:	08008360 	.word	0x08008360
 8007c54:	08007ebd 	.word	0x08007ebd
 8007c58:	08007dd5 	.word	0x08007dd5
 8007c5c:	080086a1 	.word	0x080086a1

08007c60 <__sccl>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	780b      	ldrb	r3, [r1, #0]
 8007c64:	4604      	mov	r4, r0
 8007c66:	2b5e      	cmp	r3, #94	; 0x5e
 8007c68:	bf0b      	itete	eq
 8007c6a:	784b      	ldrbeq	r3, [r1, #1]
 8007c6c:	1c48      	addne	r0, r1, #1
 8007c6e:	1c88      	addeq	r0, r1, #2
 8007c70:	2200      	movne	r2, #0
 8007c72:	bf08      	it	eq
 8007c74:	2201      	moveq	r2, #1
 8007c76:	1e61      	subs	r1, r4, #1
 8007c78:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007c7c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007c80:	42a9      	cmp	r1, r5
 8007c82:	d1fb      	bne.n	8007c7c <__sccl+0x1c>
 8007c84:	b90b      	cbnz	r3, 8007c8a <__sccl+0x2a>
 8007c86:	3801      	subs	r0, #1
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
 8007c8a:	f082 0201 	eor.w	r2, r2, #1
 8007c8e:	54e2      	strb	r2, [r4, r3]
 8007c90:	4605      	mov	r5, r0
 8007c92:	4628      	mov	r0, r5
 8007c94:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007c98:	292d      	cmp	r1, #45	; 0x2d
 8007c9a:	d006      	beq.n	8007caa <__sccl+0x4a>
 8007c9c:	295d      	cmp	r1, #93	; 0x5d
 8007c9e:	d0f3      	beq.n	8007c88 <__sccl+0x28>
 8007ca0:	b909      	cbnz	r1, 8007ca6 <__sccl+0x46>
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	e7f0      	b.n	8007c88 <__sccl+0x28>
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	e7f1      	b.n	8007c8e <__sccl+0x2e>
 8007caa:	786e      	ldrb	r6, [r5, #1]
 8007cac:	2e5d      	cmp	r6, #93	; 0x5d
 8007cae:	d0fa      	beq.n	8007ca6 <__sccl+0x46>
 8007cb0:	42b3      	cmp	r3, r6
 8007cb2:	dcf8      	bgt.n	8007ca6 <__sccl+0x46>
 8007cb4:	3502      	adds	r5, #2
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	3101      	adds	r1, #1
 8007cba:	428e      	cmp	r6, r1
 8007cbc:	5462      	strb	r2, [r4, r1]
 8007cbe:	dcfb      	bgt.n	8007cb8 <__sccl+0x58>
 8007cc0:	1af1      	subs	r1, r6, r3
 8007cc2:	3901      	subs	r1, #1
 8007cc4:	1c58      	adds	r0, r3, #1
 8007cc6:	42b3      	cmp	r3, r6
 8007cc8:	bfa8      	it	ge
 8007cca:	2100      	movge	r1, #0
 8007ccc:	1843      	adds	r3, r0, r1
 8007cce:	e7e0      	b.n	8007c92 <__sccl+0x32>

08007cd0 <_strtol_l.constprop.0>:
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd6:	d001      	beq.n	8007cdc <_strtol_l.constprop.0+0xc>
 8007cd8:	2b24      	cmp	r3, #36	; 0x24
 8007cda:	d906      	bls.n	8007cea <_strtol_l.constprop.0+0x1a>
 8007cdc:	f7ff f916 	bl	8006f0c <__errno>
 8007ce0:	2316      	movs	r3, #22
 8007ce2:	6003      	str	r3, [r0, #0]
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007dd0 <_strtol_l.constprop.0+0x100>
 8007cee:	460d      	mov	r5, r1
 8007cf0:	462e      	mov	r6, r5
 8007cf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cf6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007cfa:	f017 0708 	ands.w	r7, r7, #8
 8007cfe:	d1f7      	bne.n	8007cf0 <_strtol_l.constprop.0+0x20>
 8007d00:	2c2d      	cmp	r4, #45	; 0x2d
 8007d02:	d132      	bne.n	8007d6a <_strtol_l.constprop.0+0x9a>
 8007d04:	782c      	ldrb	r4, [r5, #0]
 8007d06:	2701      	movs	r7, #1
 8007d08:	1cb5      	adds	r5, r6, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d05b      	beq.n	8007dc6 <_strtol_l.constprop.0+0xf6>
 8007d0e:	2b10      	cmp	r3, #16
 8007d10:	d109      	bne.n	8007d26 <_strtol_l.constprop.0+0x56>
 8007d12:	2c30      	cmp	r4, #48	; 0x30
 8007d14:	d107      	bne.n	8007d26 <_strtol_l.constprop.0+0x56>
 8007d16:	782c      	ldrb	r4, [r5, #0]
 8007d18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d1c:	2c58      	cmp	r4, #88	; 0x58
 8007d1e:	d14d      	bne.n	8007dbc <_strtol_l.constprop.0+0xec>
 8007d20:	786c      	ldrb	r4, [r5, #1]
 8007d22:	2310      	movs	r3, #16
 8007d24:	3502      	adds	r5, #2
 8007d26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d2e:	f04f 0c00 	mov.w	ip, #0
 8007d32:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d36:	4666      	mov	r6, ip
 8007d38:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007d40:	f1be 0f09 	cmp.w	lr, #9
 8007d44:	d816      	bhi.n	8007d74 <_strtol_l.constprop.0+0xa4>
 8007d46:	4674      	mov	r4, lr
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	dd24      	ble.n	8007d96 <_strtol_l.constprop.0+0xc6>
 8007d4c:	f1bc 0f00 	cmp.w	ip, #0
 8007d50:	db1e      	blt.n	8007d90 <_strtol_l.constprop.0+0xc0>
 8007d52:	45b1      	cmp	r9, r6
 8007d54:	d31c      	bcc.n	8007d90 <_strtol_l.constprop.0+0xc0>
 8007d56:	d101      	bne.n	8007d5c <_strtol_l.constprop.0+0x8c>
 8007d58:	45a2      	cmp	sl, r4
 8007d5a:	db19      	blt.n	8007d90 <_strtol_l.constprop.0+0xc0>
 8007d5c:	fb06 4603 	mla	r6, r6, r3, r4
 8007d60:	f04f 0c01 	mov.w	ip, #1
 8007d64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d68:	e7e8      	b.n	8007d3c <_strtol_l.constprop.0+0x6c>
 8007d6a:	2c2b      	cmp	r4, #43	; 0x2b
 8007d6c:	bf04      	itt	eq
 8007d6e:	782c      	ldrbeq	r4, [r5, #0]
 8007d70:	1cb5      	addeq	r5, r6, #2
 8007d72:	e7ca      	b.n	8007d0a <_strtol_l.constprop.0+0x3a>
 8007d74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007d78:	f1be 0f19 	cmp.w	lr, #25
 8007d7c:	d801      	bhi.n	8007d82 <_strtol_l.constprop.0+0xb2>
 8007d7e:	3c37      	subs	r4, #55	; 0x37
 8007d80:	e7e2      	b.n	8007d48 <_strtol_l.constprop.0+0x78>
 8007d82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007d86:	f1be 0f19 	cmp.w	lr, #25
 8007d8a:	d804      	bhi.n	8007d96 <_strtol_l.constprop.0+0xc6>
 8007d8c:	3c57      	subs	r4, #87	; 0x57
 8007d8e:	e7db      	b.n	8007d48 <_strtol_l.constprop.0+0x78>
 8007d90:	f04f 3cff 	mov.w	ip, #4294967295
 8007d94:	e7e6      	b.n	8007d64 <_strtol_l.constprop.0+0x94>
 8007d96:	f1bc 0f00 	cmp.w	ip, #0
 8007d9a:	da05      	bge.n	8007da8 <_strtol_l.constprop.0+0xd8>
 8007d9c:	2322      	movs	r3, #34	; 0x22
 8007d9e:	6003      	str	r3, [r0, #0]
 8007da0:	4646      	mov	r6, r8
 8007da2:	b942      	cbnz	r2, 8007db6 <_strtol_l.constprop.0+0xe6>
 8007da4:	4630      	mov	r0, r6
 8007da6:	e79e      	b.n	8007ce6 <_strtol_l.constprop.0+0x16>
 8007da8:	b107      	cbz	r7, 8007dac <_strtol_l.constprop.0+0xdc>
 8007daa:	4276      	negs	r6, r6
 8007dac:	2a00      	cmp	r2, #0
 8007dae:	d0f9      	beq.n	8007da4 <_strtol_l.constprop.0+0xd4>
 8007db0:	f1bc 0f00 	cmp.w	ip, #0
 8007db4:	d000      	beq.n	8007db8 <_strtol_l.constprop.0+0xe8>
 8007db6:	1e69      	subs	r1, r5, #1
 8007db8:	6011      	str	r1, [r2, #0]
 8007dba:	e7f3      	b.n	8007da4 <_strtol_l.constprop.0+0xd4>
 8007dbc:	2430      	movs	r4, #48	; 0x30
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1b1      	bne.n	8007d26 <_strtol_l.constprop.0+0x56>
 8007dc2:	2308      	movs	r3, #8
 8007dc4:	e7af      	b.n	8007d26 <_strtol_l.constprop.0+0x56>
 8007dc6:	2c30      	cmp	r4, #48	; 0x30
 8007dc8:	d0a5      	beq.n	8007d16 <_strtol_l.constprop.0+0x46>
 8007dca:	230a      	movs	r3, #10
 8007dcc:	e7ab      	b.n	8007d26 <_strtol_l.constprop.0+0x56>
 8007dce:	bf00      	nop
 8007dd0:	08008555 	.word	0x08008555

08007dd4 <_strtol_r>:
 8007dd4:	f7ff bf7c 	b.w	8007cd0 <_strtol_l.constprop.0>

08007dd8 <_strtoul_l.constprop.0>:
 8007dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ddc:	4f36      	ldr	r7, [pc, #216]	; (8007eb8 <_strtoul_l.constprop.0+0xe0>)
 8007dde:	4686      	mov	lr, r0
 8007de0:	460d      	mov	r5, r1
 8007de2:	4628      	mov	r0, r5
 8007de4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007de8:	5de6      	ldrb	r6, [r4, r7]
 8007dea:	f016 0608 	ands.w	r6, r6, #8
 8007dee:	d1f8      	bne.n	8007de2 <_strtoul_l.constprop.0+0xa>
 8007df0:	2c2d      	cmp	r4, #45	; 0x2d
 8007df2:	d12f      	bne.n	8007e54 <_strtoul_l.constprop.0+0x7c>
 8007df4:	782c      	ldrb	r4, [r5, #0]
 8007df6:	2601      	movs	r6, #1
 8007df8:	1c85      	adds	r5, r0, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d057      	beq.n	8007eae <_strtoul_l.constprop.0+0xd6>
 8007dfe:	2b10      	cmp	r3, #16
 8007e00:	d109      	bne.n	8007e16 <_strtoul_l.constprop.0+0x3e>
 8007e02:	2c30      	cmp	r4, #48	; 0x30
 8007e04:	d107      	bne.n	8007e16 <_strtoul_l.constprop.0+0x3e>
 8007e06:	7828      	ldrb	r0, [r5, #0]
 8007e08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007e0c:	2858      	cmp	r0, #88	; 0x58
 8007e0e:	d149      	bne.n	8007ea4 <_strtoul_l.constprop.0+0xcc>
 8007e10:	786c      	ldrb	r4, [r5, #1]
 8007e12:	2310      	movs	r3, #16
 8007e14:	3502      	adds	r5, #2
 8007e16:	f04f 38ff 	mov.w	r8, #4294967295
 8007e1a:	2700      	movs	r7, #0
 8007e1c:	fbb8 f8f3 	udiv	r8, r8, r3
 8007e20:	fb03 f908 	mul.w	r9, r3, r8
 8007e24:	ea6f 0909 	mvn.w	r9, r9
 8007e28:	4638      	mov	r0, r7
 8007e2a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007e2e:	f1bc 0f09 	cmp.w	ip, #9
 8007e32:	d814      	bhi.n	8007e5e <_strtoul_l.constprop.0+0x86>
 8007e34:	4664      	mov	r4, ip
 8007e36:	42a3      	cmp	r3, r4
 8007e38:	dd22      	ble.n	8007e80 <_strtoul_l.constprop.0+0xa8>
 8007e3a:	2f00      	cmp	r7, #0
 8007e3c:	db1d      	blt.n	8007e7a <_strtoul_l.constprop.0+0xa2>
 8007e3e:	4580      	cmp	r8, r0
 8007e40:	d31b      	bcc.n	8007e7a <_strtoul_l.constprop.0+0xa2>
 8007e42:	d101      	bne.n	8007e48 <_strtoul_l.constprop.0+0x70>
 8007e44:	45a1      	cmp	r9, r4
 8007e46:	db18      	blt.n	8007e7a <_strtoul_l.constprop.0+0xa2>
 8007e48:	fb00 4003 	mla	r0, r0, r3, r4
 8007e4c:	2701      	movs	r7, #1
 8007e4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e52:	e7ea      	b.n	8007e2a <_strtoul_l.constprop.0+0x52>
 8007e54:	2c2b      	cmp	r4, #43	; 0x2b
 8007e56:	bf04      	itt	eq
 8007e58:	782c      	ldrbeq	r4, [r5, #0]
 8007e5a:	1c85      	addeq	r5, r0, #2
 8007e5c:	e7cd      	b.n	8007dfa <_strtoul_l.constprop.0+0x22>
 8007e5e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007e62:	f1bc 0f19 	cmp.w	ip, #25
 8007e66:	d801      	bhi.n	8007e6c <_strtoul_l.constprop.0+0x94>
 8007e68:	3c37      	subs	r4, #55	; 0x37
 8007e6a:	e7e4      	b.n	8007e36 <_strtoul_l.constprop.0+0x5e>
 8007e6c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007e70:	f1bc 0f19 	cmp.w	ip, #25
 8007e74:	d804      	bhi.n	8007e80 <_strtoul_l.constprop.0+0xa8>
 8007e76:	3c57      	subs	r4, #87	; 0x57
 8007e78:	e7dd      	b.n	8007e36 <_strtoul_l.constprop.0+0x5e>
 8007e7a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e7e:	e7e6      	b.n	8007e4e <_strtoul_l.constprop.0+0x76>
 8007e80:	2f00      	cmp	r7, #0
 8007e82:	da07      	bge.n	8007e94 <_strtoul_l.constprop.0+0xbc>
 8007e84:	2322      	movs	r3, #34	; 0x22
 8007e86:	f8ce 3000 	str.w	r3, [lr]
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8e:	b932      	cbnz	r2, 8007e9e <_strtoul_l.constprop.0+0xc6>
 8007e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e94:	b106      	cbz	r6, 8007e98 <_strtoul_l.constprop.0+0xc0>
 8007e96:	4240      	negs	r0, r0
 8007e98:	2a00      	cmp	r2, #0
 8007e9a:	d0f9      	beq.n	8007e90 <_strtoul_l.constprop.0+0xb8>
 8007e9c:	b107      	cbz	r7, 8007ea0 <_strtoul_l.constprop.0+0xc8>
 8007e9e:	1e69      	subs	r1, r5, #1
 8007ea0:	6011      	str	r1, [r2, #0]
 8007ea2:	e7f5      	b.n	8007e90 <_strtoul_l.constprop.0+0xb8>
 8007ea4:	2430      	movs	r4, #48	; 0x30
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1b5      	bne.n	8007e16 <_strtoul_l.constprop.0+0x3e>
 8007eaa:	2308      	movs	r3, #8
 8007eac:	e7b3      	b.n	8007e16 <_strtoul_l.constprop.0+0x3e>
 8007eae:	2c30      	cmp	r4, #48	; 0x30
 8007eb0:	d0a9      	beq.n	8007e06 <_strtoul_l.constprop.0+0x2e>
 8007eb2:	230a      	movs	r3, #10
 8007eb4:	e7af      	b.n	8007e16 <_strtoul_l.constprop.0+0x3e>
 8007eb6:	bf00      	nop
 8007eb8:	08008555 	.word	0x08008555

08007ebc <_strtoul_r>:
 8007ebc:	f7ff bf8c 	b.w	8007dd8 <_strtoul_l.constprop.0>

08007ec0 <__submore>:
 8007ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	d11d      	bne.n	8007f0c <__submore+0x4c>
 8007ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ed4:	f000 f8b6 	bl	8008044 <_malloc_r>
 8007ed8:	b918      	cbnz	r0, 8007ee2 <__submore+0x22>
 8007eda:	f04f 30ff 	mov.w	r0, #4294967295
 8007ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ee6:	63a3      	str	r3, [r4, #56]	; 0x38
 8007ee8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007eec:	6360      	str	r0, [r4, #52]	; 0x34
 8007eee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007ef2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ef6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007efa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007efe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007f02:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007f06:	6020      	str	r0, [r4, #0]
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e7e8      	b.n	8007ede <__submore+0x1e>
 8007f0c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007f0e:	0077      	lsls	r7, r6, #1
 8007f10:	463a      	mov	r2, r7
 8007f12:	f000 f90b 	bl	800812c <_realloc_r>
 8007f16:	4605      	mov	r5, r0
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d0de      	beq.n	8007eda <__submore+0x1a>
 8007f1c:	eb00 0806 	add.w	r8, r0, r6
 8007f20:	4601      	mov	r1, r0
 8007f22:	4632      	mov	r2, r6
 8007f24:	4640      	mov	r0, r8
 8007f26:	f7ff f823 	bl	8006f70 <memcpy>
 8007f2a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007f2e:	f8c4 8000 	str.w	r8, [r4]
 8007f32:	e7e9      	b.n	8007f08 <__submore+0x48>

08007f34 <__retarget_lock_acquire_recursive>:
 8007f34:	4770      	bx	lr

08007f36 <__retarget_lock_release_recursive>:
 8007f36:	4770      	bx	lr

08007f38 <memmove>:
 8007f38:	4288      	cmp	r0, r1
 8007f3a:	b510      	push	{r4, lr}
 8007f3c:	eb01 0402 	add.w	r4, r1, r2
 8007f40:	d902      	bls.n	8007f48 <memmove+0x10>
 8007f42:	4284      	cmp	r4, r0
 8007f44:	4623      	mov	r3, r4
 8007f46:	d807      	bhi.n	8007f58 <memmove+0x20>
 8007f48:	1e43      	subs	r3, r0, #1
 8007f4a:	42a1      	cmp	r1, r4
 8007f4c:	d008      	beq.n	8007f60 <memmove+0x28>
 8007f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f56:	e7f8      	b.n	8007f4a <memmove+0x12>
 8007f58:	4402      	add	r2, r0
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	428a      	cmp	r2, r1
 8007f5e:	d100      	bne.n	8007f62 <memmove+0x2a>
 8007f60:	bd10      	pop	{r4, pc}
 8007f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f6a:	e7f7      	b.n	8007f5c <memmove+0x24>

08007f6c <_free_r>:
 8007f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	d044      	beq.n	8007ffc <_free_r+0x90>
 8007f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f76:	9001      	str	r0, [sp, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f7e:	bfb8      	it	lt
 8007f80:	18e4      	addlt	r4, r4, r3
 8007f82:	f000 f913 	bl	80081ac <__malloc_lock>
 8007f86:	4a1e      	ldr	r2, [pc, #120]	; (8008000 <_free_r+0x94>)
 8007f88:	9801      	ldr	r0, [sp, #4]
 8007f8a:	6813      	ldr	r3, [r2, #0]
 8007f8c:	b933      	cbnz	r3, 8007f9c <_free_r+0x30>
 8007f8e:	6063      	str	r3, [r4, #4]
 8007f90:	6014      	str	r4, [r2, #0]
 8007f92:	b003      	add	sp, #12
 8007f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f98:	f000 b90e 	b.w	80081b8 <__malloc_unlock>
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	d908      	bls.n	8007fb2 <_free_r+0x46>
 8007fa0:	6825      	ldr	r5, [r4, #0]
 8007fa2:	1961      	adds	r1, r4, r5
 8007fa4:	428b      	cmp	r3, r1
 8007fa6:	bf01      	itttt	eq
 8007fa8:	6819      	ldreq	r1, [r3, #0]
 8007faa:	685b      	ldreq	r3, [r3, #4]
 8007fac:	1949      	addeq	r1, r1, r5
 8007fae:	6021      	streq	r1, [r4, #0]
 8007fb0:	e7ed      	b.n	8007f8e <_free_r+0x22>
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	b10b      	cbz	r3, 8007fbc <_free_r+0x50>
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	d9fa      	bls.n	8007fb2 <_free_r+0x46>
 8007fbc:	6811      	ldr	r1, [r2, #0]
 8007fbe:	1855      	adds	r5, r2, r1
 8007fc0:	42a5      	cmp	r5, r4
 8007fc2:	d10b      	bne.n	8007fdc <_free_r+0x70>
 8007fc4:	6824      	ldr	r4, [r4, #0]
 8007fc6:	4421      	add	r1, r4
 8007fc8:	1854      	adds	r4, r2, r1
 8007fca:	42a3      	cmp	r3, r4
 8007fcc:	6011      	str	r1, [r2, #0]
 8007fce:	d1e0      	bne.n	8007f92 <_free_r+0x26>
 8007fd0:	681c      	ldr	r4, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	6053      	str	r3, [r2, #4]
 8007fd6:	4421      	add	r1, r4
 8007fd8:	6011      	str	r1, [r2, #0]
 8007fda:	e7da      	b.n	8007f92 <_free_r+0x26>
 8007fdc:	d902      	bls.n	8007fe4 <_free_r+0x78>
 8007fde:	230c      	movs	r3, #12
 8007fe0:	6003      	str	r3, [r0, #0]
 8007fe2:	e7d6      	b.n	8007f92 <_free_r+0x26>
 8007fe4:	6825      	ldr	r5, [r4, #0]
 8007fe6:	1961      	adds	r1, r4, r5
 8007fe8:	428b      	cmp	r3, r1
 8007fea:	bf04      	itt	eq
 8007fec:	6819      	ldreq	r1, [r3, #0]
 8007fee:	685b      	ldreq	r3, [r3, #4]
 8007ff0:	6063      	str	r3, [r4, #4]
 8007ff2:	bf04      	itt	eq
 8007ff4:	1949      	addeq	r1, r1, r5
 8007ff6:	6021      	streq	r1, [r4, #0]
 8007ff8:	6054      	str	r4, [r2, #4]
 8007ffa:	e7ca      	b.n	8007f92 <_free_r+0x26>
 8007ffc:	b003      	add	sp, #12
 8007ffe:	bd30      	pop	{r4, r5, pc}
 8008000:	200064f0 	.word	0x200064f0

08008004 <sbrk_aligned>:
 8008004:	b570      	push	{r4, r5, r6, lr}
 8008006:	4e0e      	ldr	r6, [pc, #56]	; (8008040 <sbrk_aligned+0x3c>)
 8008008:	460c      	mov	r4, r1
 800800a:	6831      	ldr	r1, [r6, #0]
 800800c:	4605      	mov	r5, r0
 800800e:	b911      	cbnz	r1, 8008016 <sbrk_aligned+0x12>
 8008010:	f000 f8bc 	bl	800818c <_sbrk_r>
 8008014:	6030      	str	r0, [r6, #0]
 8008016:	4621      	mov	r1, r4
 8008018:	4628      	mov	r0, r5
 800801a:	f000 f8b7 	bl	800818c <_sbrk_r>
 800801e:	1c43      	adds	r3, r0, #1
 8008020:	d00a      	beq.n	8008038 <sbrk_aligned+0x34>
 8008022:	1cc4      	adds	r4, r0, #3
 8008024:	f024 0403 	bic.w	r4, r4, #3
 8008028:	42a0      	cmp	r0, r4
 800802a:	d007      	beq.n	800803c <sbrk_aligned+0x38>
 800802c:	1a21      	subs	r1, r4, r0
 800802e:	4628      	mov	r0, r5
 8008030:	f000 f8ac 	bl	800818c <_sbrk_r>
 8008034:	3001      	adds	r0, #1
 8008036:	d101      	bne.n	800803c <sbrk_aligned+0x38>
 8008038:	f04f 34ff 	mov.w	r4, #4294967295
 800803c:	4620      	mov	r0, r4
 800803e:	bd70      	pop	{r4, r5, r6, pc}
 8008040:	200064f4 	.word	0x200064f4

08008044 <_malloc_r>:
 8008044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008048:	1ccd      	adds	r5, r1, #3
 800804a:	f025 0503 	bic.w	r5, r5, #3
 800804e:	3508      	adds	r5, #8
 8008050:	2d0c      	cmp	r5, #12
 8008052:	bf38      	it	cc
 8008054:	250c      	movcc	r5, #12
 8008056:	2d00      	cmp	r5, #0
 8008058:	4607      	mov	r7, r0
 800805a:	db01      	blt.n	8008060 <_malloc_r+0x1c>
 800805c:	42a9      	cmp	r1, r5
 800805e:	d905      	bls.n	800806c <_malloc_r+0x28>
 8008060:	230c      	movs	r3, #12
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	2600      	movs	r6, #0
 8008066:	4630      	mov	r0, r6
 8008068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800806c:	4e2e      	ldr	r6, [pc, #184]	; (8008128 <_malloc_r+0xe4>)
 800806e:	f000 f89d 	bl	80081ac <__malloc_lock>
 8008072:	6833      	ldr	r3, [r6, #0]
 8008074:	461c      	mov	r4, r3
 8008076:	bb34      	cbnz	r4, 80080c6 <_malloc_r+0x82>
 8008078:	4629      	mov	r1, r5
 800807a:	4638      	mov	r0, r7
 800807c:	f7ff ffc2 	bl	8008004 <sbrk_aligned>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	4604      	mov	r4, r0
 8008084:	d14d      	bne.n	8008122 <_malloc_r+0xde>
 8008086:	6834      	ldr	r4, [r6, #0]
 8008088:	4626      	mov	r6, r4
 800808a:	2e00      	cmp	r6, #0
 800808c:	d140      	bne.n	8008110 <_malloc_r+0xcc>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	4631      	mov	r1, r6
 8008092:	4638      	mov	r0, r7
 8008094:	eb04 0803 	add.w	r8, r4, r3
 8008098:	f000 f878 	bl	800818c <_sbrk_r>
 800809c:	4580      	cmp	r8, r0
 800809e:	d13a      	bne.n	8008116 <_malloc_r+0xd2>
 80080a0:	6821      	ldr	r1, [r4, #0]
 80080a2:	3503      	adds	r5, #3
 80080a4:	1a6d      	subs	r5, r5, r1
 80080a6:	f025 0503 	bic.w	r5, r5, #3
 80080aa:	3508      	adds	r5, #8
 80080ac:	2d0c      	cmp	r5, #12
 80080ae:	bf38      	it	cc
 80080b0:	250c      	movcc	r5, #12
 80080b2:	4629      	mov	r1, r5
 80080b4:	4638      	mov	r0, r7
 80080b6:	f7ff ffa5 	bl	8008004 <sbrk_aligned>
 80080ba:	3001      	adds	r0, #1
 80080bc:	d02b      	beq.n	8008116 <_malloc_r+0xd2>
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	442b      	add	r3, r5
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	e00e      	b.n	80080e4 <_malloc_r+0xa0>
 80080c6:	6822      	ldr	r2, [r4, #0]
 80080c8:	1b52      	subs	r2, r2, r5
 80080ca:	d41e      	bmi.n	800810a <_malloc_r+0xc6>
 80080cc:	2a0b      	cmp	r2, #11
 80080ce:	d916      	bls.n	80080fe <_malloc_r+0xba>
 80080d0:	1961      	adds	r1, r4, r5
 80080d2:	42a3      	cmp	r3, r4
 80080d4:	6025      	str	r5, [r4, #0]
 80080d6:	bf18      	it	ne
 80080d8:	6059      	strne	r1, [r3, #4]
 80080da:	6863      	ldr	r3, [r4, #4]
 80080dc:	bf08      	it	eq
 80080de:	6031      	streq	r1, [r6, #0]
 80080e0:	5162      	str	r2, [r4, r5]
 80080e2:	604b      	str	r3, [r1, #4]
 80080e4:	4638      	mov	r0, r7
 80080e6:	f104 060b 	add.w	r6, r4, #11
 80080ea:	f000 f865 	bl	80081b8 <__malloc_unlock>
 80080ee:	f026 0607 	bic.w	r6, r6, #7
 80080f2:	1d23      	adds	r3, r4, #4
 80080f4:	1af2      	subs	r2, r6, r3
 80080f6:	d0b6      	beq.n	8008066 <_malloc_r+0x22>
 80080f8:	1b9b      	subs	r3, r3, r6
 80080fa:	50a3      	str	r3, [r4, r2]
 80080fc:	e7b3      	b.n	8008066 <_malloc_r+0x22>
 80080fe:	6862      	ldr	r2, [r4, #4]
 8008100:	42a3      	cmp	r3, r4
 8008102:	bf0c      	ite	eq
 8008104:	6032      	streq	r2, [r6, #0]
 8008106:	605a      	strne	r2, [r3, #4]
 8008108:	e7ec      	b.n	80080e4 <_malloc_r+0xa0>
 800810a:	4623      	mov	r3, r4
 800810c:	6864      	ldr	r4, [r4, #4]
 800810e:	e7b2      	b.n	8008076 <_malloc_r+0x32>
 8008110:	4634      	mov	r4, r6
 8008112:	6876      	ldr	r6, [r6, #4]
 8008114:	e7b9      	b.n	800808a <_malloc_r+0x46>
 8008116:	230c      	movs	r3, #12
 8008118:	603b      	str	r3, [r7, #0]
 800811a:	4638      	mov	r0, r7
 800811c:	f000 f84c 	bl	80081b8 <__malloc_unlock>
 8008120:	e7a1      	b.n	8008066 <_malloc_r+0x22>
 8008122:	6025      	str	r5, [r4, #0]
 8008124:	e7de      	b.n	80080e4 <_malloc_r+0xa0>
 8008126:	bf00      	nop
 8008128:	200064f0 	.word	0x200064f0

0800812c <_realloc_r>:
 800812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008130:	4680      	mov	r8, r0
 8008132:	4614      	mov	r4, r2
 8008134:	460e      	mov	r6, r1
 8008136:	b921      	cbnz	r1, 8008142 <_realloc_r+0x16>
 8008138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	4611      	mov	r1, r2
 800813e:	f7ff bf81 	b.w	8008044 <_malloc_r>
 8008142:	b92a      	cbnz	r2, 8008150 <_realloc_r+0x24>
 8008144:	f7ff ff12 	bl	8007f6c <_free_r>
 8008148:	4625      	mov	r5, r4
 800814a:	4628      	mov	r0, r5
 800814c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008150:	f000 f838 	bl	80081c4 <_malloc_usable_size_r>
 8008154:	4284      	cmp	r4, r0
 8008156:	4607      	mov	r7, r0
 8008158:	d802      	bhi.n	8008160 <_realloc_r+0x34>
 800815a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800815e:	d812      	bhi.n	8008186 <_realloc_r+0x5a>
 8008160:	4621      	mov	r1, r4
 8008162:	4640      	mov	r0, r8
 8008164:	f7ff ff6e 	bl	8008044 <_malloc_r>
 8008168:	4605      	mov	r5, r0
 800816a:	2800      	cmp	r0, #0
 800816c:	d0ed      	beq.n	800814a <_realloc_r+0x1e>
 800816e:	42bc      	cmp	r4, r7
 8008170:	4622      	mov	r2, r4
 8008172:	4631      	mov	r1, r6
 8008174:	bf28      	it	cs
 8008176:	463a      	movcs	r2, r7
 8008178:	f7fe fefa 	bl	8006f70 <memcpy>
 800817c:	4631      	mov	r1, r6
 800817e:	4640      	mov	r0, r8
 8008180:	f7ff fef4 	bl	8007f6c <_free_r>
 8008184:	e7e1      	b.n	800814a <_realloc_r+0x1e>
 8008186:	4635      	mov	r5, r6
 8008188:	e7df      	b.n	800814a <_realloc_r+0x1e>
	...

0800818c <_sbrk_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d06      	ldr	r5, [pc, #24]	; (80081a8 <_sbrk_r+0x1c>)
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7f9 fb5e 	bl	8001858 <_sbrk>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_sbrk_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_sbrk_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	200064e8 	.word	0x200064e8

080081ac <__malloc_lock>:
 80081ac:	4801      	ldr	r0, [pc, #4]	; (80081b4 <__malloc_lock+0x8>)
 80081ae:	f7ff bec1 	b.w	8007f34 <__retarget_lock_acquire_recursive>
 80081b2:	bf00      	nop
 80081b4:	200064ec 	.word	0x200064ec

080081b8 <__malloc_unlock>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__malloc_unlock+0x8>)
 80081ba:	f7ff bebc 	b.w	8007f36 <__retarget_lock_release_recursive>
 80081be:	bf00      	nop
 80081c0:	200064ec 	.word	0x200064ec

080081c4 <_malloc_usable_size_r>:
 80081c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c8:	1f18      	subs	r0, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bfbc      	itt	lt
 80081ce:	580b      	ldrlt	r3, [r1, r0]
 80081d0:	18c0      	addlt	r0, r0, r3
 80081d2:	4770      	bx	lr

080081d4 <_init>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr

080081e0 <_fini>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr
