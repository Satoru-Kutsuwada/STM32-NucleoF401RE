
TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018168  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025a0  08018308  08018308  00028308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a8a8  0801a8a8  000304f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801a8a8  0801a8a8  0002a8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a8b0  0801a8b0  000304f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a8b0  0801a8b0  0002a8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a8b4  0801a8b4  0002a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  0801a8b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006860  200004f0  0801ada8  000304f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006d50  0801ada8  00036d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d3ed  00000000  00000000  00030520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ecb  00000000  00000000  0005d90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002110  00000000  00000000  000637d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f08  00000000  00000000  000658e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d93a  00000000  00000000  000677f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002917a  00000000  00000000  0008512a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a96e7  00000000  00000000  000ae2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015798b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fcc  00000000  00000000  001579dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004f0 	.word	0x200004f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080182f0 	.word	0x080182f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004f4 	.word	0x200004f4
 80001dc:	080182f0 	.word	0x080182f0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <debu_main>:

//=============================================================================
//
//=============================================================================
void debu_main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	//char ch;
	//SKprintf("debu_main:001\r\n");
	if(read_line_streem() == INPUT_DATA_FIX){
 8000ee0:	f000 fecc 	bl	8001c7c <read_line_streem>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d133      	bne.n	8000f52 <debu_main+0x76>

		input_char_step = INPUT_INIT;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <debu_main+0x7c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]

		//SKprintf("debu_main:001\r\n");

		switch(dev_menue_type){
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <debu_main+0x80>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b06      	cmp	r3, #6
 8000ef6:	d826      	bhi.n	8000f46 <debu_main+0x6a>
 8000ef8:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <debu_main+0x24>)
 8000efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efe:	bf00      	nop
 8000f00:	08000f1d 	.word	0x08000f1d
 8000f04:	08000f23 	.word	0x08000f23
 8000f08:	08000f29 	.word	0x08000f29
 8000f0c:	08000f2f 	.word	0x08000f2f
 8000f10:	08000f35 	.word	0x08000f35
 8000f14:	08000f3b 	.word	0x08000f3b
 8000f18:	08000f41 	.word	0x08000f41
		case DEB_PROMPT_MODE:
			DBmanue_prompt();
 8000f1c:	f000 f854 	bl	8000fc8 <DBmanue_prompt>
			break;
 8000f20:	e012      	b.n	8000f48 <debu_main+0x6c>
		case DEB_LOG_MENUE:
			DBmanue_log();
 8000f22:	f000 faa7 	bl	8001474 <DBmanue_log>
			break;
 8000f26:	e00f      	b.n	8000f48 <debu_main+0x6c>
		case DEB_RS485_MENUE:
			DBmanue_rs485();
 8000f28:	f000 fb16 	bl	8001558 <DBmanue_rs485>
			break;
 8000f2c:	e00c      	b.n	8000f48 <debu_main+0x6c>
		case DEB_MEM_MENUE:
			DBmanue_memdump();
 8000f2e:	f000 fb75 	bl	800161c <DBmanue_memdump>
			break;
 8000f32:	e009      	b.n	8000f48 <debu_main+0x6c>
		case DEB_MEM_INPUT_MENUE:
			DBmanue_mem_input();
 8000f34:	f000 fc6a 	bl	800180c <DBmanue_mem_input>
			break;
 8000f38:	e006      	b.n	8000f48 <debu_main+0x6c>
		case DEB_RS485_SCAN_MENUE:
			DBmanue_rs485_scan();
 8000f3a:	f000 f957 	bl	80011ec <DBmanue_rs485_scan>
			break;
 8000f3e:	e003      	b.n	8000f48 <debu_main+0x6c>
		case DEB_VL53_MENUE:
			DBmanue_vl53();
 8000f40:	f000 f89c 	bl	800107c <DBmanue_vl53>
			break;
 8000f44:	e000      	b.n	8000f48 <debu_main+0x6c>
		default:
			break;
 8000f46:	bf00      	nop
		}

		//SKprintf("debu_main:002\r\n");
        // メニュを表示する
        DispMenue(dev_menue_type);
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <debu_main+0x80>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f807 	bl	8000f60 <DispMenue>
        //SKprintf("debu_main:003\r\n");

	}
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000514 	.word	0x20000514
 8000f5c:	20000598 	.word	0x20000598

08000f60 <DispMenue>:
//==============================================================================
//
//==============================================================================
void DispMenue(uint8_t type)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    if( type==DEB_PROMPT_MODE ){
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d103      	bne.n	8000f78 <DispMenue+0x18>
        SKprintf("ST> ");
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <DispMenue+0x5c>)
 8000f72:	f003 f95f 	bl	8004234 <SKprintf>
    else{
        for( i=0; i<MenueList[type-1].clumn; i++){
            SKprintf("%s", &MenueList[type-1].pt[i].name[0]);
        }
    }
}
 8000f76:	e01d      	b.n	8000fb4 <DispMenue+0x54>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e011      	b.n	8000fa2 <DispMenue+0x42>
            SKprintf("%s", &MenueList[type-1].pt[i].name[0]);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <DispMenue+0x60>)
 8000f84:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	440b      	add	r3, r1
 8000f94:	4619      	mov	r1, r3
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <DispMenue+0x64>)
 8000f98:	f003 f94c 	bl	8004234 <SKprintf>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <DispMenue+0x60>)
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4413      	add	r3, r2
 8000fac:	791b      	ldrb	r3, [r3, #4]
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3e4      	bcc.n	8000f7e <DispMenue+0x1e>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08018308 	.word	0x08018308
 8000fc0:	0801a368 	.word	0x0801a368
 8000fc4:	08018310 	.word	0x08018310

08000fc8 <DBmanue_prompt>:
//=============================================================================
extern osMessageQueueId_t myQueue01Handle;


void DBmanue_prompt(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	uint8_t		i;

//	size_t 	lsize2;
//	size_t 	lsize1;

	switch( input2menu() ){
 8000fce:	f000 fd51 	bl	8001a74 <input2menu>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b05      	cmp	r3, #5
 8000fd6:	d826      	bhi.n	8001026 <DBmanue_prompt+0x5e>
 8000fd8:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <DBmanue_prompt+0x18>)
 8000fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fde:	bf00      	nop
 8000fe0:	08000ff9 	.word	0x08000ff9
 8000fe4:	08000fff 	.word	0x08000fff
 8000fe8:	08001007 	.word	0x08001007
 8000fec:	0800100f 	.word	0x0800100f
 8000ff0:	08001017 	.word	0x08001017
 8000ff4:	0800101f 	.word	0x0800101f
    case CMD_RTC:
    	rtc_display();
 8000ff8:	f001 ff36 	bl	8002e68 <rtc_display>
        break;
 8000ffc:	e030      	b.n	8001060 <DBmanue_prompt+0x98>
    case CMD_LOG:
        dev_menue_type = DEB_LOG_MENUE;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <DBmanue_prompt+0xa0>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
        break;
 8001004:	e02c      	b.n	8001060 <DBmanue_prompt+0x98>
    case CMD_RS485:
        dev_menue_type = DEB_RS485_MENUE;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <DBmanue_prompt+0xa0>)
 8001008:	2202      	movs	r2, #2
 800100a:	701a      	strb	r2, [r3, #0]
        break;
 800100c:	e028      	b.n	8001060 <DBmanue_prompt+0x98>
    case CMD_MEM_DUMP:
        dev_menue_type = DEB_MEM_MENUE;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <DBmanue_prompt+0xa0>)
 8001010:	2203      	movs	r2, #3
 8001012:	701a      	strb	r2, [r3, #0]
    	break;
 8001014:	e024      	b.n	8001060 <DBmanue_prompt+0x98>
    case CMD_MSG_QUE:
    	dev_menue_type = DEB_RS485_SCAN_MENUE;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <DBmanue_prompt+0xa0>)
 8001018:	2205      	movs	r2, #5
 800101a:	701a      	strb	r2, [r3, #0]
    	break;
 800101c:	e020      	b.n	8001060 <DBmanue_prompt+0x98>
    case CMD_VL53:
    	dev_menue_type = DEB_VL53_MENUE;
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <DBmanue_prompt+0xa0>)
 8001020:	2206      	movs	r2, #6
 8001022:	701a      	strb	r2, [r3, #0]
    	break;
 8001024:	e01c      	b.n	8001060 <DBmanue_prompt+0x98>

    default:
    	SKprintf("Command not found.\r\n");
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <DBmanue_prompt+0xa4>)
 8001028:	f003 f904 	bl	8004234 <SKprintf>
    	SKprintf("Support Comand ...\r\n");
 800102c:	4810      	ldr	r0, [pc, #64]	; (8001070 <DBmanue_prompt+0xa8>)
 800102e:	f003 f901 	bl	8004234 <SKprintf>
    	for( i=0; i<CMD_MAX ; i++ ){
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	e00f      	b.n	8001058 <DBmanue_prompt+0x90>
        	SKprintf(" %s\r\n",&com_list[i].command[0]);
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <DBmanue_prompt+0xac>)
 8001046:	4413      	add	r3, r2
 8001048:	3301      	adds	r3, #1
 800104a:	4619      	mov	r1, r3
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <DBmanue_prompt+0xb0>)
 800104e:	f003 f8f1 	bl	8004234 <SKprintf>
    	for( i=0; i<CMD_MAX ; i++ ){
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	3301      	adds	r3, #1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b05      	cmp	r3, #5
 800105c:	d9ec      	bls.n	8001038 <DBmanue_prompt+0x70>
    	}

        break;
 800105e:	bf00      	nop
    }
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000598 	.word	0x20000598
 800106c:	08018314 	.word	0x08018314
 8001070:	0801832c 	.word	0x0801832c
 8001074:	08019e80 	.word	0x08019e80
 8001078:	08018344 	.word	0x08018344

0800107c <DBmanue_vl53>:

//=============================================================================
//
//=============================================================================
void DBmanue_vl53(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 8001080:	4b58      	ldr	r3, [pc, #352]	; (80011e4 <DBmanue_vl53+0x168>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	3b31      	subs	r3, #49	; 0x31
 8001086:	2b41      	cmp	r3, #65	; 0x41
 8001088:	f200 80a8 	bhi.w	80011dc <DBmanue_vl53+0x160>
 800108c:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <DBmanue_vl53+0x18>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080011dd 	.word	0x080011dd
 8001098:	0800119d 	.word	0x0800119d
 800109c:	080011a5 	.word	0x080011a5
 80010a0:	080011ad 	.word	0x080011ad
 80010a4:	080011b5 	.word	0x080011b5
 80010a8:	080011bd 	.word	0x080011bd
 80010ac:	080011c5 	.word	0x080011c5
 80010b0:	080011cb 	.word	0x080011cb
 80010b4:	080011d1 	.word	0x080011d1
 80010b8:	080011dd 	.word	0x080011dd
 80010bc:	080011dd 	.word	0x080011dd
 80010c0:	080011dd 	.word	0x080011dd
 80010c4:	080011dd 	.word	0x080011dd
 80010c8:	080011dd 	.word	0x080011dd
 80010cc:	080011dd 	.word	0x080011dd
 80010d0:	080011dd 	.word	0x080011dd
 80010d4:	080011dd 	.word	0x080011dd
 80010d8:	080011dd 	.word	0x080011dd
 80010dc:	080011dd 	.word	0x080011dd
 80010e0:	080011dd 	.word	0x080011dd
 80010e4:	080011dd 	.word	0x080011dd
 80010e8:	080011dd 	.word	0x080011dd
 80010ec:	080011dd 	.word	0x080011dd
 80010f0:	080011dd 	.word	0x080011dd
 80010f4:	080011dd 	.word	0x080011dd
 80010f8:	080011dd 	.word	0x080011dd
 80010fc:	080011dd 	.word	0x080011dd
 8001100:	080011dd 	.word	0x080011dd
 8001104:	080011dd 	.word	0x080011dd
 8001108:	080011dd 	.word	0x080011dd
 800110c:	080011dd 	.word	0x080011dd
 8001110:	080011dd 	.word	0x080011dd
 8001114:	080011dd 	.word	0x080011dd
 8001118:	080011d7 	.word	0x080011d7
 800111c:	080011dd 	.word	0x080011dd
 8001120:	080011dd 	.word	0x080011dd
 8001124:	080011dd 	.word	0x080011dd
 8001128:	080011dd 	.word	0x080011dd
 800112c:	080011dd 	.word	0x080011dd
 8001130:	080011dd 	.word	0x080011dd
 8001134:	080011dd 	.word	0x080011dd
 8001138:	080011dd 	.word	0x080011dd
 800113c:	080011dd 	.word	0x080011dd
 8001140:	080011dd 	.word	0x080011dd
 8001144:	080011dd 	.word	0x080011dd
 8001148:	080011dd 	.word	0x080011dd
 800114c:	080011dd 	.word	0x080011dd
 8001150:	080011dd 	.word	0x080011dd
 8001154:	080011dd 	.word	0x080011dd
 8001158:	080011dd 	.word	0x080011dd
 800115c:	080011dd 	.word	0x080011dd
 8001160:	080011dd 	.word	0x080011dd
 8001164:	080011dd 	.word	0x080011dd
 8001168:	080011dd 	.word	0x080011dd
 800116c:	080011dd 	.word	0x080011dd
 8001170:	080011dd 	.word	0x080011dd
 8001174:	080011dd 	.word	0x080011dd
 8001178:	080011dd 	.word	0x080011dd
 800117c:	080011dd 	.word	0x080011dd
 8001180:	080011dd 	.word	0x080011dd
 8001184:	080011dd 	.word	0x080011dd
 8001188:	080011dd 	.word	0x080011dd
 800118c:	080011dd 	.word	0x080011dd
 8001190:	080011dd 	.word	0x080011dd
 8001194:	080011dd 	.word	0x080011dd
 8001198:	080011d7 	.word	0x080011d7
	case '1':
        // VL53_init();
        break;
    case '2':
        //vl53l0x_test();
        vl53l0x_Racing_test( RASING_MODE_CONTINUE );
 800119c:	2004      	movs	r0, #4
 800119e:	f003 fd91 	bl	8004cc4 <vl53l0x_Racing_test>
        break;
 80011a2:	e01c      	b.n	80011de <DBmanue_vl53+0x162>
    case '3':
        //vl53l0x_Single_test();
        vl53l0x_Racing_test( RASING_MODE_SINGLE );
 80011a4:	2000      	movs	r0, #0
 80011a6:	f003 fd8d 	bl	8004cc4 <vl53l0x_Racing_test>
        break;
 80011aa:	e018      	b.n	80011de <DBmanue_vl53+0x162>
    case '4':
        //vl53l0x_SingleHA_test();
        vl53l0x_Racing_test( RASING_MODE_SINGLE_HA );
 80011ac:	2001      	movs	r0, #1
 80011ae:	f003 fd89 	bl	8004cc4 <vl53l0x_Racing_test>
        break;
 80011b2:	e014      	b.n	80011de <DBmanue_vl53+0x162>
    case '5':
        //vl53l0x_SingleHS_test();
        vl53l0x_Racing_test( RASING_MODE_SINGLE_HS );
 80011b4:	2002      	movs	r0, #2
 80011b6:	f003 fd85 	bl	8004cc4 <vl53l0x_Racing_test>
        break;
 80011ba:	e010      	b.n	80011de <DBmanue_vl53+0x162>
    case '6':
        //vl53l0x_SingleLR_test();
        vl53l0x_Racing_test( RASING_MODE_SINGLE_LR );
 80011bc:	2003      	movs	r0, #3
 80011be:	f003 fd81 	bl	8004cc4 <vl53l0x_Racing_test>
        break;
 80011c2:	e00c      	b.n	80011de <DBmanue_vl53+0x162>
    case '7':
        vl53data_disp();
 80011c4:	f003 fe76 	bl	8004eb4 <vl53data_disp>
		break;
 80011c8:	e009      	b.n	80011de <DBmanue_vl53+0x162>
	case '8':
		vl53_init();
 80011ca:	f003 f88f 	bl	80042ec <vl53_init>
		break;
 80011ce:	e006      	b.n	80011de <DBmanue_vl53+0x162>
	case '9':
		vl53_mesure_new_proc();
 80011d0:	f003 f9e8 	bl	80045a4 <vl53_mesure_new_proc>

		break;
 80011d4:	e003      	b.n	80011de <DBmanue_vl53+0x162>
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <DBmanue_vl53+0x16c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	default:
		break;
 80011dc:	bf00      	nop
	}
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000518 	.word	0x20000518
 80011e8:	20000598 	.word	0x20000598

080011ec <DBmanue_rs485_scan>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485_scan(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
	osStatus_t 			osStatus;
	MESSAGE_QUE_DATA	*msg;
	CMD_MSG				rt_task;

	switch( input_string.main[0] ){
 80011f2:	4b90      	ldr	r3, [pc, #576]	; (8001434 <DBmanue_rs485_scan+0x248>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b52      	cmp	r3, #82	; 0x52
 80011f8:	dc4e      	bgt.n	8001298 <DBmanue_rs485_scan+0xac>
 80011fa:	2b31      	cmp	r3, #49	; 0x31
 80011fc:	f2c0 8115 	blt.w	800142a <DBmanue_rs485_scan+0x23e>
 8001200:	3b31      	subs	r3, #49	; 0x31
 8001202:	2b21      	cmp	r3, #33	; 0x21
 8001204:	f200 8111 	bhi.w	800142a <DBmanue_rs485_scan+0x23e>
 8001208:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <DBmanue_rs485_scan+0x24>)
 800120a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120e:	bf00      	nop
 8001210:	080012a1 	.word	0x080012a1
 8001214:	080012db 	.word	0x080012db
 8001218:	080012fb 	.word	0x080012fb
 800121c:	08001309 	.word	0x08001309
 8001220:	0800141f 	.word	0x0800141f
 8001224:	0800142b 	.word	0x0800142b
 8001228:	0800142b 	.word	0x0800142b
 800122c:	0800142b 	.word	0x0800142b
 8001230:	0800142b 	.word	0x0800142b
 8001234:	0800142b 	.word	0x0800142b
 8001238:	0800142b 	.word	0x0800142b
 800123c:	0800142b 	.word	0x0800142b
 8001240:	0800142b 	.word	0x0800142b
 8001244:	0800142b 	.word	0x0800142b
 8001248:	0800142b 	.word	0x0800142b
 800124c:	0800142b 	.word	0x0800142b
 8001250:	0800142b 	.word	0x0800142b
 8001254:	0800142b 	.word	0x0800142b
 8001258:	0800142b 	.word	0x0800142b
 800125c:	0800142b 	.word	0x0800142b
 8001260:	0800142b 	.word	0x0800142b
 8001264:	0800142b 	.word	0x0800142b
 8001268:	0800142b 	.word	0x0800142b
 800126c:	0800142b 	.word	0x0800142b
 8001270:	0800142b 	.word	0x0800142b
 8001274:	0800142b 	.word	0x0800142b
 8001278:	0800142b 	.word	0x0800142b
 800127c:	0800142b 	.word	0x0800142b
 8001280:	0800142b 	.word	0x0800142b
 8001284:	0800142b 	.word	0x0800142b
 8001288:	0800142b 	.word	0x0800142b
 800128c:	0800142b 	.word	0x0800142b
 8001290:	0800142b 	.word	0x0800142b
 8001294:	08001425 	.word	0x08001425
 8001298:	2b72      	cmp	r3, #114	; 0x72
 800129a:	f000 80c3 	beq.w	8001424 <DBmanue_rs485_scan+0x238>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 800129e:	e0c4      	b.n	800142a <DBmanue_rs485_scan+0x23e>
		Set_logInfo2("HeapSize 001 = 0x%x",xPortGetFreeHeapSize());
 80012a0:	f013 fb78 	bl	8014994 <xPortGetFreeHeapSize>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4863      	ldr	r0, [pc, #396]	; (8001438 <DBmanue_rs485_scan+0x24c>)
 80012aa:	f001 f88d 	bl	80023c8 <Set_logInfo2>
		rt_task.address		= RS485_AD_SLEVE01;
 80012ae:	2301      	movs	r3, #1
 80012b0:	72bb      	strb	r3, [r7, #10]
		rt_task.command		= RS485_CMD_MESUR_DATA;
 80012b2:	2304      	movs	r3, #4
 80012b4:	71bb      	strb	r3, [r7, #6]
		rt_task.command_sub	= 1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	813b      	strh	r3, [r7, #8]
		rt_task.event 		= RT_EVENT_START_REQ;
 80012ba:	2300      	movs	r3, #0
 80012bc:	713b      	strb	r3, [r7, #4]
		rt_task.sub1 		= 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	72fb      	strb	r3, [r7, #11]
		SendMsgQue( &rt_task );
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 f8ef 	bl	80034a8 <SendMsgQue>
		Set_logInfo2("HeapSize 001 = 0x%x",xPortGetFreeHeapSize());
 80012ca:	f013 fb63 	bl	8014994 <xPortGetFreeHeapSize>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4859      	ldr	r0, [pc, #356]	; (8001438 <DBmanue_rs485_scan+0x24c>)
 80012d4:	f001 f878 	bl	80023c8 <Set_logInfo2>
		break;
 80012d8:	e0a8      	b.n	800142c <DBmanue_rs485_scan+0x240>
		rt_task.address		= RS485_AD_SLEVE01;
 80012da:	2301      	movs	r3, #1
 80012dc:	72bb      	strb	r3, [r7, #10]
		rt_task.command		= RS485_CMD_MESUR_DATA;
 80012de:	2304      	movs	r3, #4
 80012e0:	71bb      	strb	r3, [r7, #6]
		rt_task.command_sub	= 300;
 80012e2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012e6:	813b      	strh	r3, [r7, #8]
		rt_task.event 		= RT_EVENT_START_REQ;
 80012e8:	2300      	movs	r3, #0
 80012ea:	713b      	strb	r3, [r7, #4]
		rt_task.sub1 		= 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	72fb      	strb	r3, [r7, #11]
		SendMsgQue( &rt_task );
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 f8d8 	bl	80034a8 <SendMsgQue>
		break;
 80012f8:	e098      	b.n	800142c <DBmanue_rs485_scan+0x240>
		rt_task.event 		= RT_EVENT_STOP_REQ;
 80012fa:	2303      	movs	r3, #3
 80012fc:	713b      	strb	r3, [r7, #4]
		SendMsgQue( &rt_task );
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f002 f8d1 	bl	80034a8 <SendMsgQue>
		break;
 8001306:	e091      	b.n	800142c <DBmanue_rs485_scan+0x240>
		SKprintf("\r\nHeap Info\r\n");
 8001308:	484c      	ldr	r0, [pc, #304]	; (800143c <DBmanue_rs485_scan+0x250>)
 800130a:	f002 ff93 	bl	8004234 <SKprintf>
		SKprintf("  FreeHeapSize = 0x%x\r\n",xPortGetFreeHeapSize());
 800130e:	f013 fb41 	bl	8014994 <xPortGetFreeHeapSize>
 8001312:	4603      	mov	r3, r0
 8001314:	4619      	mov	r1, r3
 8001316:	484a      	ldr	r0, [pc, #296]	; (8001440 <DBmanue_rs485_scan+0x254>)
 8001318:	f002 ff8c 	bl	8004234 <SKprintf>
		SKprintf("\r\nMessage Que Info\r\n");
 800131c:	4849      	ldr	r0, [pc, #292]	; (8001444 <DBmanue_rs485_scan+0x258>)
 800131e:	f002 ff89 	bl	8004234 <SKprintf>
		SKprintf("            Que1  Que2  Que3\r\n");
 8001322:	4849      	ldr	r0, [pc, #292]	; (8001448 <DBmanue_rs485_scan+0x25c>)
 8001324:	f002 ff86 	bl	8004234 <SKprintf>
		SKprintf("  Capacity= 0x%02x  ",osMessageQueueGetCapacity(myQueue01Handle));
 8001328:	4b48      	ldr	r3, [pc, #288]	; (800144c <DBmanue_rs485_scan+0x260>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f010 fdf5 	bl	8011f1c <osMessageQueueGetCapacity>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	4846      	ldr	r0, [pc, #280]	; (8001450 <DBmanue_rs485_scan+0x264>)
 8001338:	f002 ff7c 	bl	8004234 <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetCapacity(myQueue02Handle));
 800133c:	4b45      	ldr	r3, [pc, #276]	; (8001454 <DBmanue_rs485_scan+0x268>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f010 fdeb 	bl	8011f1c <osMessageQueueGetCapacity>
 8001346:	4603      	mov	r3, r0
 8001348:	4619      	mov	r1, r3
 800134a:	4843      	ldr	r0, [pc, #268]	; (8001458 <DBmanue_rs485_scan+0x26c>)
 800134c:	f002 ff72 	bl	8004234 <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetCapacity(myQueue03Handle));
 8001350:	4b42      	ldr	r3, [pc, #264]	; (800145c <DBmanue_rs485_scan+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f010 fde1 	bl	8011f1c <osMessageQueueGetCapacity>
 800135a:	4603      	mov	r3, r0
 800135c:	4619      	mov	r1, r3
 800135e:	4840      	ldr	r0, [pc, #256]	; (8001460 <DBmanue_rs485_scan+0x274>)
 8001360:	f002 ff68 	bl	8004234 <SKprintf>
		SKprintf("  MsgSize = 0x%02x  ",osMessageQueueGetMsgSize(myQueue01Handle));
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <DBmanue_rs485_scan+0x260>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f010 fded 	bl	8011f48 <osMessageQueueGetMsgSize>
 800136e:	4603      	mov	r3, r0
 8001370:	4619      	mov	r1, r3
 8001372:	483c      	ldr	r0, [pc, #240]	; (8001464 <DBmanue_rs485_scan+0x278>)
 8001374:	f002 ff5e 	bl	8004234 <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetMsgSize(myQueue02Handle));
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <DBmanue_rs485_scan+0x268>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f010 fde3 	bl	8011f48 <osMessageQueueGetMsgSize>
 8001382:	4603      	mov	r3, r0
 8001384:	4619      	mov	r1, r3
 8001386:	4834      	ldr	r0, [pc, #208]	; (8001458 <DBmanue_rs485_scan+0x26c>)
 8001388:	f002 ff54 	bl	8004234 <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetMsgSize(myQueue03Handle));
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <DBmanue_rs485_scan+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f010 fdd9 	bl	8011f48 <osMessageQueueGetMsgSize>
 8001396:	4603      	mov	r3, r0
 8001398:	4619      	mov	r1, r3
 800139a:	4831      	ldr	r0, [pc, #196]	; (8001460 <DBmanue_rs485_scan+0x274>)
 800139c:	f002 ff4a 	bl	8004234 <SKprintf>
		SKprintf("  Count   = 0x%02x  ",osMessageQueueGetCount(myQueue01Handle));
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <DBmanue_rs485_scan+0x260>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f010 fde5 	bl	8011f74 <osMessageQueueGetCount>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4619      	mov	r1, r3
 80013ae:	482e      	ldr	r0, [pc, #184]	; (8001468 <DBmanue_rs485_scan+0x27c>)
 80013b0:	f002 ff40 	bl	8004234 <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetCount(myQueue02Handle));
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <DBmanue_rs485_scan+0x268>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f010 fddb 	bl	8011f74 <osMessageQueueGetCount>
 80013be:	4603      	mov	r3, r0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4825      	ldr	r0, [pc, #148]	; (8001458 <DBmanue_rs485_scan+0x26c>)
 80013c4:	f002 ff36 	bl	8004234 <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetCount(myQueue03Handle));
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <DBmanue_rs485_scan+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f010 fdd1 	bl	8011f74 <osMessageQueueGetCount>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4619      	mov	r1, r3
 80013d6:	4822      	ldr	r0, [pc, #136]	; (8001460 <DBmanue_rs485_scan+0x274>)
 80013d8:	f002 ff2c 	bl	8004234 <SKprintf>
		SKprintf("  Space   = 0x%02x  ",osMessageQueueGetSpace(myQueue01Handle));
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <DBmanue_rs485_scan+0x260>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f010 fde7 	bl	8011fb4 <osMessageQueueGetSpace>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4619      	mov	r1, r3
 80013ea:	4820      	ldr	r0, [pc, #128]	; (800146c <DBmanue_rs485_scan+0x280>)
 80013ec:	f002 ff22 	bl	8004234 <SKprintf>
		SKprintf("0x%02x  ",osMessageQueueGetSpace(myQueue02Handle));
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <DBmanue_rs485_scan+0x268>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f010 fddd 	bl	8011fb4 <osMessageQueueGetSpace>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4816      	ldr	r0, [pc, #88]	; (8001458 <DBmanue_rs485_scan+0x26c>)
 8001400:	f002 ff18 	bl	8004234 <SKprintf>
		SKprintf("0x%02x \r\n",osMessageQueueGetSpace(myQueue03Handle));
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <DBmanue_rs485_scan+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f010 fdd3 	bl	8011fb4 <osMessageQueueGetSpace>
 800140e:	4603      	mov	r3, r0
 8001410:	4619      	mov	r1, r3
 8001412:	4813      	ldr	r0, [pc, #76]	; (8001460 <DBmanue_rs485_scan+0x274>)
 8001414:	f002 ff0e 	bl	8004234 <SKprintf>
		task_stack_display();
 8001418:	f001 fb86 	bl	8002b28 <task_stack_display>
		break;
 800141c:	e006      	b.n	800142c <DBmanue_rs485_scan+0x240>
		LogdisplayISR();
 800141e:	f001 f98d 	bl	800273c <LogdisplayISR>
		break;
 8001422:	e003      	b.n	800142c <DBmanue_rs485_scan+0x240>
		dev_menue_type = DEB_PROMPT_MODE;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <DBmanue_rs485_scan+0x284>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
		break;
 800142a:	bf00      	nop
	}

}
 800142c:	bf00      	nop
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000518 	.word	0x20000518
 8001438:	0801834c 	.word	0x0801834c
 800143c:	08018360 	.word	0x08018360
 8001440:	08018370 	.word	0x08018370
 8001444:	08018388 	.word	0x08018388
 8001448:	080183a0 	.word	0x080183a0
 800144c:	20002394 	.word	0x20002394
 8001450:	080183c0 	.word	0x080183c0
 8001454:	20002398 	.word	0x20002398
 8001458:	080183d8 	.word	0x080183d8
 800145c:	2000239c 	.word	0x2000239c
 8001460:	080183e4 	.word	0x080183e4
 8001464:	080183f0 	.word	0x080183f0
 8001468:	08018408 	.word	0x08018408
 800146c:	08018420 	.word	0x08018420
 8001470:	20000598 	.word	0x20000598

08001474 <DBmanue_log>:
//=============================================================================
//
//=============================================================================
void DBmanue_log(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <DBmanue_log+0xdc>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b52      	cmp	r3, #82	; 0x52
 800147e:	dc4b      	bgt.n	8001518 <DBmanue_log+0xa4>
 8001480:	2b31      	cmp	r3, #49	; 0x31
 8001482:	db61      	blt.n	8001548 <DBmanue_log+0xd4>
 8001484:	3b31      	subs	r3, #49	; 0x31
 8001486:	2b21      	cmp	r3, #33	; 0x21
 8001488:	d85e      	bhi.n	8001548 <DBmanue_log+0xd4>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <DBmanue_log+0x1c>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	0800151f 	.word	0x0800151f
 8001494:	08001525 	.word	0x08001525
 8001498:	0800152b 	.word	0x0800152b
 800149c:	08001533 	.word	0x08001533
 80014a0:	0800153b 	.word	0x0800153b
 80014a4:	08001549 	.word	0x08001549
 80014a8:	08001549 	.word	0x08001549
 80014ac:	08001549 	.word	0x08001549
 80014b0:	08001549 	.word	0x08001549
 80014b4:	08001549 	.word	0x08001549
 80014b8:	08001549 	.word	0x08001549
 80014bc:	08001549 	.word	0x08001549
 80014c0:	08001549 	.word	0x08001549
 80014c4:	08001549 	.word	0x08001549
 80014c8:	08001549 	.word	0x08001549
 80014cc:	08001549 	.word	0x08001549
 80014d0:	08001549 	.word	0x08001549
 80014d4:	08001549 	.word	0x08001549
 80014d8:	08001549 	.word	0x08001549
 80014dc:	08001549 	.word	0x08001549
 80014e0:	08001549 	.word	0x08001549
 80014e4:	08001549 	.word	0x08001549
 80014e8:	08001549 	.word	0x08001549
 80014ec:	08001549 	.word	0x08001549
 80014f0:	08001549 	.word	0x08001549
 80014f4:	08001549 	.word	0x08001549
 80014f8:	08001549 	.word	0x08001549
 80014fc:	08001549 	.word	0x08001549
 8001500:	08001549 	.word	0x08001549
 8001504:	08001549 	.word	0x08001549
 8001508:	08001549 	.word	0x08001549
 800150c:	08001549 	.word	0x08001549
 8001510:	08001549 	.word	0x08001549
 8001514:	08001543 	.word	0x08001543
 8001518:	2b72      	cmp	r3, #114	; 0x72
 800151a:	d012      	beq.n	8001542 <DBmanue_log+0xce>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 800151c:	e014      	b.n	8001548 <DBmanue_log+0xd4>
		LogInfo_display();
 800151e:	f001 f88d 	bl	800263c <LogInfo_display>
		break;
 8001522:	e012      	b.n	800154a <DBmanue_log+0xd6>
		LogInfo_clear();
 8001524:	f001 f970 	bl	8002808 <LogInfo_clear>
		break;
 8001528:	e00f      	b.n	800154a <DBmanue_log+0xd6>
		Set_logflg(LF_NON_STOP);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 fe6e 	bl	800220c <Set_logflg>
		break;
 8001530:	e00b      	b.n	800154a <DBmanue_log+0xd6>
		Set_logflg(LF_IMMMEDIATE_STOP);
 8001532:	2001      	movs	r0, #1
 8001534:	f000 fe6a 	bl	800220c <Set_logflg>
		break;
 8001538:	e007      	b.n	800154a <DBmanue_log+0xd6>
		Set_logflg(LF_MAX_DATA_STOP);
 800153a:	2002      	movs	r0, #2
 800153c:	f000 fe66 	bl	800220c <Set_logflg>
		break;
 8001540:	e003      	b.n	800154a <DBmanue_log+0xd6>
		dev_menue_type = DEB_PROMPT_MODE;
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <DBmanue_log+0xe0>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
		break;
 8001548:	bf00      	nop
	}
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000518 	.word	0x20000518
 8001554:	20000598 	.word	0x20000598

08001558 <DBmanue_rs485>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 800155c:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <DBmanue_rs485+0xbc>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b52      	cmp	r3, #82	; 0x52
 8001562:	dc4b      	bgt.n	80015fc <DBmanue_rs485+0xa4>
 8001564:	2b31      	cmp	r3, #49	; 0x31
 8001566:	db4f      	blt.n	8001608 <DBmanue_rs485+0xb0>
 8001568:	3b31      	subs	r3, #49	; 0x31
 800156a:	2b21      	cmp	r3, #33	; 0x21
 800156c:	d84c      	bhi.n	8001608 <DBmanue_rs485+0xb0>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <DBmanue_rs485+0x1c>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	08001609 	.word	0x08001609
 8001578:	08001609 	.word	0x08001609
 800157c:	08001609 	.word	0x08001609
 8001580:	08001609 	.word	0x08001609
 8001584:	08001609 	.word	0x08001609
 8001588:	08001609 	.word	0x08001609
 800158c:	08001609 	.word	0x08001609
 8001590:	08001609 	.word	0x08001609
 8001594:	08001609 	.word	0x08001609
 8001598:	08001609 	.word	0x08001609
 800159c:	08001609 	.word	0x08001609
 80015a0:	08001609 	.word	0x08001609
 80015a4:	08001609 	.word	0x08001609
 80015a8:	08001609 	.word	0x08001609
 80015ac:	08001609 	.word	0x08001609
 80015b0:	08001609 	.word	0x08001609
 80015b4:	08001609 	.word	0x08001609
 80015b8:	08001609 	.word	0x08001609
 80015bc:	08001609 	.word	0x08001609
 80015c0:	08001609 	.word	0x08001609
 80015c4:	08001609 	.word	0x08001609
 80015c8:	08001609 	.word	0x08001609
 80015cc:	08001609 	.word	0x08001609
 80015d0:	08001609 	.word	0x08001609
 80015d4:	08001609 	.word	0x08001609
 80015d8:	08001609 	.word	0x08001609
 80015dc:	08001609 	.word	0x08001609
 80015e0:	08001609 	.word	0x08001609
 80015e4:	08001609 	.word	0x08001609
 80015e8:	08001609 	.word	0x08001609
 80015ec:	08001609 	.word	0x08001609
 80015f0:	08001609 	.word	0x08001609
 80015f4:	08001609 	.word	0x08001609
 80015f8:	08001603 	.word	0x08001603
 80015fc:	2b72      	cmp	r3, #114	; 0x72
 80015fe:	d000      	beq.n	8001602 <DBmanue_rs485+0xaa>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8001600:	e002      	b.n	8001608 <DBmanue_rs485+0xb0>
		dev_menue_type = DEB_PROMPT_MODE;
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <DBmanue_rs485+0xc0>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
		break;
 8001608:	bf00      	nop
	}
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20000518 	.word	0x20000518
 8001618:	20000598 	.word	0x20000598

0800161c <DBmanue_memdump>:

//==============================================================================
//
//==============================================================================
void DBmanue_memdump(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
	STACK_INFO stack;

	switch( input_string.main[0] ){
 8001622:	4b77      	ldr	r3, [pc, #476]	; (8001800 <DBmanue_memdump+0x1e4>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	3b31      	subs	r3, #49	; 0x31
 8001628:	2b41      	cmp	r3, #65	; 0x41
 800162a:	f200 80df 	bhi.w	80017ec <DBmanue_memdump+0x1d0>
 800162e:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <DBmanue_memdump+0x18>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	0800173d 	.word	0x0800173d
 8001638:	08001745 	.word	0x08001745
 800163c:	08001763 	.word	0x08001763
 8001640:	08001781 	.word	0x08001781
 8001644:	080017ed 	.word	0x080017ed
 8001648:	080017ed 	.word	0x080017ed
 800164c:	080017ed 	.word	0x080017ed
 8001650:	080017ed 	.word	0x080017ed
 8001654:	080017ed 	.word	0x080017ed
 8001658:	080017ed 	.word	0x080017ed
 800165c:	080017ed 	.word	0x080017ed
 8001660:	080017ed 	.word	0x080017ed
 8001664:	080017ed 	.word	0x080017ed
 8001668:	080017ed 	.word	0x080017ed
 800166c:	080017ed 	.word	0x080017ed
 8001670:	080017ed 	.word	0x080017ed
 8001674:	080017ed 	.word	0x080017ed
 8001678:	080017ed 	.word	0x080017ed
 800167c:	080017ed 	.word	0x080017ed
 8001680:	080017ed 	.word	0x080017ed
 8001684:	080017ed 	.word	0x080017ed
 8001688:	080017ed 	.word	0x080017ed
 800168c:	080017ed 	.word	0x080017ed
 8001690:	080017ed 	.word	0x080017ed
 8001694:	080017ed 	.word	0x080017ed
 8001698:	080017ed 	.word	0x080017ed
 800169c:	080017ed 	.word	0x080017ed
 80016a0:	080017ed 	.word	0x080017ed
 80016a4:	080017ed 	.word	0x080017ed
 80016a8:	080017ed 	.word	0x080017ed
 80016ac:	080017ed 	.word	0x080017ed
 80016b0:	080017ed 	.word	0x080017ed
 80016b4:	080017ed 	.word	0x080017ed
 80016b8:	080017e7 	.word	0x080017e7
 80016bc:	080017ed 	.word	0x080017ed
 80016c0:	080017ed 	.word	0x080017ed
 80016c4:	080017ed 	.word	0x080017ed
 80016c8:	080017ed 	.word	0x080017ed
 80016cc:	080017ed 	.word	0x080017ed
 80016d0:	080017ed 	.word	0x080017ed
 80016d4:	080017ed 	.word	0x080017ed
 80016d8:	080017ed 	.word	0x080017ed
 80016dc:	080017ed 	.word	0x080017ed
 80016e0:	080017ed 	.word	0x080017ed
 80016e4:	080017ed 	.word	0x080017ed
 80016e8:	080017ed 	.word	0x080017ed
 80016ec:	080017ed 	.word	0x080017ed
 80016f0:	080017ed 	.word	0x080017ed
 80016f4:	080017ed 	.word	0x080017ed
 80016f8:	080017c3 	.word	0x080017c3
 80016fc:	080017ed 	.word	0x080017ed
 8001700:	080017ed 	.word	0x080017ed
 8001704:	080017ed 	.word	0x080017ed
 8001708:	0800179f 	.word	0x0800179f
 800170c:	080017ed 	.word	0x080017ed
 8001710:	080017ed 	.word	0x080017ed
 8001714:	080017ed 	.word	0x080017ed
 8001718:	080017ed 	.word	0x080017ed
 800171c:	080017ed 	.word	0x080017ed
 8001720:	080017ed 	.word	0x080017ed
 8001724:	080017ed 	.word	0x080017ed
 8001728:	080017ed 	.word	0x080017ed
 800172c:	080017ed 	.word	0x080017ed
 8001730:	080017ed 	.word	0x080017ed
 8001734:	080017ed 	.word	0x080017ed
 8001738:	080017e7 	.word	0x080017e7
	case '1':
		dev_menue_type = DEB_MEM_INPUT_MENUE;
 800173c:	4b31      	ldr	r3, [pc, #196]	; (8001804 <DBmanue_memdump+0x1e8>)
 800173e:	2204      	movs	r2, #4
 8001740:	701a      	strb	r2, [r3, #0]
		break;
 8001742:	e058      	b.n	80017f6 <DBmanue_memdump+0x1da>
	case '2':
		Disp_task_info(SK_TASK_main);
 8001744:	2000      	movs	r0, #0
 8001746:	f001 fa5b 	bl	8002c00 <Disp_task_info>
		Get_task_stackptr(SK_TASK_main,&stack);
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	2000      	movs	r0, #0
 8001750:	f001 faf4 	bl	8002d3c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	89ba      	ldrh	r2, [r7, #12]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f8b6 	bl	80018cc <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 8001760:	e049      	b.n	80017f6 <DBmanue_memdump+0x1da>
	case '3':
		Disp_task_info(SK_TASK_sub1);
 8001762:	2001      	movs	r0, #1
 8001764:	f001 fa4c 	bl	8002c00 <Disp_task_info>
		Get_task_stackptr(SK_TASK_sub1,&stack);
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	2001      	movs	r0, #1
 800176e:	f001 fae5 	bl	8002d3c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	89ba      	ldrh	r2, [r7, #12]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f8a7 	bl	80018cc <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 800177e:	e03a      	b.n	80017f6 <DBmanue_memdump+0x1da>
	case '4':
		Disp_task_info(SK_TASK_sub2);
 8001780:	2002      	movs	r0, #2
 8001782:	f001 fa3d 	bl	8002c00 <Disp_task_info>
		Get_task_stackptr(SK_TASK_sub2,&stack);
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	2002      	movs	r0, #2
 800178c:	f001 fad6 	bl	8002d3c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	89ba      	ldrh	r2, [r7, #12]
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f898 	bl	80018cc <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 800179c:	e02b      	b.n	80017f6 <DBmanue_memdump+0x1da>
	case '5':
		break;
	case 'f':
		if(sk_mem_dump != NULL){
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d024      	beq.n	80017f0 <DBmanue_memdump+0x1d4>
			sk_mem_dump += 128*4;
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017ae:	4a16      	ldr	r2, [pc, #88]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017b0:	6013      	str	r3, [r2, #0]
			hex_dmp(sk_mem_dump, 128*4);
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f886 	bl	80018cc <hex_dmp>
		}
		break;
 80017c0:	e016      	b.n	80017f0 <DBmanue_memdump+0x1d4>
	case 'b':
		if(sk_mem_dump != NULL){
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d014      	beq.n	80017f4 <DBmanue_memdump+0x1d8>
			sk_mem_dump -= 128*4;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80017d2:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017d4:	6013      	str	r3, [r2, #0]
			hex_dmp(sk_mem_dump, 128*4);
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <DBmanue_memdump+0x1ec>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f874 	bl	80018cc <hex_dmp>
		}
		break;
 80017e4:	e006      	b.n	80017f4 <DBmanue_memdump+0x1d8>
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <DBmanue_memdump+0x1e8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	default:
		break;
 80017ec:	bf00      	nop
 80017ee:	e002      	b.n	80017f6 <DBmanue_memdump+0x1da>
		break;
 80017f0:	bf00      	nop
 80017f2:	e000      	b.n	80017f6 <DBmanue_memdump+0x1da>
		break;
 80017f4:	bf00      	nop
	}

}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000518 	.word	0x20000518
 8001804:	20000598 	.word	0x20000598
 8001808:	20000510 	.word	0x20000510

0800180c <DBmanue_mem_input>:

//==============================================================================
//
//==============================================================================
void DBmanue_mem_input(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
	int 		i = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
	uint32_t	dt = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
	uint8_t		c = input_string.main[0];
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <DBmanue_mem_input+0xb4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	71fb      	strb	r3, [r7, #7]

	if( c == 'r' || c == 'R' ){
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b72      	cmp	r3, #114	; 0x72
 8001824:	d044      	beq.n	80018b0 <DBmanue_mem_input+0xa4>
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b52      	cmp	r3, #82	; 0x52
 800182a:	d041      	beq.n	80018b0 <DBmanue_mem_input+0xa4>

	}
	else{
		while( input_string.main[i] != '\0'){
 800182c:	e030      	b.n	8001890 <DBmanue_mem_input+0x84>
			c= input_string.main[i];
 800182e:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <DBmanue_mem_input+0xb4>)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	71fb      	strb	r3, [r7, #7]

			dt <<= 4;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	60bb      	str	r3, [r7, #8]

			if( c >= '0'  && c <= '9' ){
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b2f      	cmp	r3, #47	; 0x2f
 8001842:	d909      	bls.n	8001858 <DBmanue_mem_input+0x4c>
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	2b39      	cmp	r3, #57	; 0x39
 8001848:	d806      	bhi.n	8001858 <DBmanue_mem_input+0x4c>
				dt |= ( c - '0');
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	3b30      	subs	r3, #48	; 0x30
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	e018      	b.n	800188a <DBmanue_mem_input+0x7e>
			}
			else if( c >= 'a'  && c <= 'f' ){
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b60      	cmp	r3, #96	; 0x60
 800185c:	d909      	bls.n	8001872 <DBmanue_mem_input+0x66>
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b66      	cmp	r3, #102	; 0x66
 8001862:	d806      	bhi.n	8001872 <DBmanue_mem_input+0x66>
				dt |= ( c - 'a' + 10);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	3b57      	subs	r3, #87	; 0x57
 8001868:	461a      	mov	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4313      	orrs	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	e00b      	b.n	800188a <DBmanue_mem_input+0x7e>
			}
			else if( c >= 'A'  && c <= 'F' ){
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2b40      	cmp	r3, #64	; 0x40
 8001876:	d908      	bls.n	800188a <DBmanue_mem_input+0x7e>
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b46      	cmp	r3, #70	; 0x46
 800187c:	d805      	bhi.n	800188a <DBmanue_mem_input+0x7e>
				dt |= ( c - 'A' + 10);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	3b37      	subs	r3, #55	; 0x37
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
 8001888:	60bb      	str	r3, [r7, #8]
			}

			i++;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
		while( input_string.main[i] != '\0'){
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <DBmanue_mem_input+0xb4>)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1c8      	bne.n	800182e <DBmanue_mem_input+0x22>
		}

		SKprintf("dt=%lx",dt);
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <DBmanue_mem_input+0xb8>)
 80018a0:	f002 fcc8 	bl	8004234 <SKprintf>
		hex_dmp((uint8_t *)dt, 128*4);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f80e 	bl	80018cc <hex_dmp>
	}

	dev_menue_type = DEB_MEM_MENUE;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <DBmanue_mem_input+0xbc>)
 80018b2:	2203      	movs	r2, #3
 80018b4:	701a      	strb	r2, [r3, #0]

}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000518 	.word	0x20000518
 80018c4:	08018438 	.word	0x08018438
 80018c8:	20000598 	.word	0x20000598

080018cc <hex_dmp>:

//==============================================================================
//
//==============================================================================
void hex_dmp(uint8_t *buf, uint16_t size)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	; 0x38
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
    uint16_t	size_plus;
    uint32_t pp;



   p = buf;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
   pp = (uint32_t)buf;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	623b      	str	r3, [r7, #32]
   p_disp = (uint8_t *)(pp & 0xfffffff0);
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f023 030f 	bic.w	r3, r3, #15
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   p = p_disp;
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24

   pre_data = (uint8_t)pp & 0x0000000F;
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	83fb      	strh	r3, [r7, #30]
   sk_mem_dump = p_disp;
 80018f8:	4a54      	ldr	r2, [pc, #336]	; (8001a4c <hex_dmp+0x180>)
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	6013      	str	r3, [r2, #0]

   size_plus = size + pre_data;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	8bfb      	ldrh	r3, [r7, #30]
 8001902:	4413      	add	r3, r2
 8001904:	853b      	strh	r3, [r7, #40]	; 0x28
   if(( size_plus % 16 ) != 0){
 8001906:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	b29b      	uxth	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <hex_dmp+0x52>
    	   size_plus = size_plus + 16 - (size_plus % 16);
 8001912:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001914:	f023 030f 	bic.w	r3, r3, #15
 8001918:	b29b      	uxth	r3, r3
 800191a:	3310      	adds	r3, #16
 800191c:	853b      	strh	r3, [r7, #40]	; 0x28
    }


    SKprintf("\r\n%p -->>\r\n",p);
 800191e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001920:	484b      	ldr	r0, [pc, #300]	; (8001a50 <hex_dmp+0x184>)
 8001922:	f002 fc87 	bl	8004234 <SKprintf>
    SKprintf("            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F    -- ASCII --\r\n");
 8001926:	484b      	ldr	r0, [pc, #300]	; (8001a54 <hex_dmp+0x188>)
 8001928:	f002 fc84 	bl	8004234 <SKprintf>
    SKprintf("-----------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-----------------\r\n");
 800192c:	484a      	ldr	r0, [pc, #296]	; (8001a58 <hex_dmp+0x18c>)
 800192e:	f002 fc81 	bl	8004234 <SKprintf>


    for (i=0; i<size_plus; i++) {
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
 8001936:	e070      	b.n	8001a1a <hex_dmp+0x14e>

    	if(( i % 16)== 0){
 8001938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	2b00      	cmp	r3, #0
 8001940:	d114      	bne.n	800196c <hex_dmp+0xa0>
    	    SKprintf("%08p  ",p_disp);
 8001942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001944:	4845      	ldr	r0, [pc, #276]	; (8001a5c <hex_dmp+0x190>)
 8001946:	f002 fc75 	bl	8004234 <SKprintf>
    	    if( p_disp != &p[i] ){
 800194a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194e:	4413      	add	r3, r2
 8001950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001952:	429a      	cmp	r2, r3
 8001954:	d007      	beq.n	8001966 <hex_dmp+0x9a>
    	    	SKprintf("\r\nERROR p_disp=%p,p=%p\r\n",p_disp,&p[i]);
 8001956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195a:	4413      	add	r3, r2
 800195c:	461a      	mov	r2, r3
 800195e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001960:	483f      	ldr	r0, [pc, #252]	; (8001a60 <hex_dmp+0x194>)
 8001962:	f002 fc67 	bl	8004234 <SKprintf>
    	    }
    	    p_disp += 16;
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	3310      	adds	r3, #16
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
    	}


		j = i % 16;
 800196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196e:	425a      	negs	r2, r3
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	f002 020f 	and.w	r2, r2, #15
 8001978:	bf58      	it	pl
 800197a:	4253      	negpl	r3, r2
 800197c:	633b      	str	r3, [r7, #48]	; 0x30

		if( i < (size + pre_data) ){
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	8bfb      	ldrh	r3, [r7, #30]
 8001982:	4413      	add	r3, r2
 8001984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001986:	429a      	cmp	r2, r3
 8001988:	da20      	bge.n	80019cc <hex_dmp+0x100>
			SKprintf("%02x ", p[i]);
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	4833      	ldr	r0, [pc, #204]	; (8001a64 <hex_dmp+0x198>)
 8001996:	f002 fc4d 	bl	8004234 <SKprintf>
			tmp[j] = (uint8_t)((p[i]<0x20||p[i]>=0x7f)? '.': p[i]);
 800199a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b1f      	cmp	r3, #31
 80019a4:	d90a      	bls.n	80019bc <hex_dmp+0xf0>
 80019a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019aa:	4413      	add	r3, r2
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b7e      	cmp	r3, #126	; 0x7e
 80019b0:	d804      	bhi.n	80019bc <hex_dmp+0xf0>
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b6:	4413      	add	r3, r2
 80019b8:	7819      	ldrb	r1, [r3, #0]
 80019ba:	e000      	b.n	80019be <hex_dmp+0xf2>
 80019bc:	212e      	movs	r1, #46	; 0x2e
 80019be:	f107 020c 	add.w	r2, r7, #12
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	4413      	add	r3, r2
 80019c6:	460a      	mov	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e008      	b.n	80019de <hex_dmp+0x112>
					}
		else{
			SKprintf("   ");
 80019cc:	4826      	ldr	r0, [pc, #152]	; (8001a68 <hex_dmp+0x19c>)
 80019ce:	f002 fc31 	bl	8004234 <SKprintf>
			tmp[j] = ' ';
 80019d2:	f107 020c 	add.w	r2, r7, #12
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	4413      	add	r3, r2
 80019da:	2220      	movs	r2, #32
 80019dc:	701a      	strb	r2, [r3, #0]
		}

		flg = 1;
 80019de:	2301      	movs	r3, #1
 80019e0:	857b      	strh	r3, [r7, #42]	; 0x2a
		if(( i % 16)==15 ){
 80019e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e4:	425a      	negs	r2, r3
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	f002 020f 	and.w	r2, r2, #15
 80019ee:	bf58      	it	pl
 80019f0:	4253      	negpl	r3, r2
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	d10e      	bne.n	8001a14 <hex_dmp+0x148>
			flg = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	857b      	strh	r3, [r7, #42]	; 0x2a
			tmp[j+1] = '\0';
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	3301      	adds	r3, #1
 80019fe:	3338      	adds	r3, #56	; 0x38
 8001a00:	443b      	add	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	f803 2c2c 	strb.w	r2, [r3, #-44]
			SKprintf(" %s\r\n", tmp);
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4817      	ldr	r0, [pc, #92]	; (8001a6c <hex_dmp+0x1a0>)
 8001a10:	f002 fc10 	bl	8004234 <SKprintf>
    for (i=0; i<size_plus; i++) {
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	3301      	adds	r3, #1
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	db8a      	blt.n	8001938 <hex_dmp+0x6c>
		}
    }

    if( flg == 1 ){
 8001a22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10c      	bne.n	8001a42 <hex_dmp+0x176>
		tmp[j+1] = '\0';
 8001a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	3338      	adds	r3, #56	; 0x38
 8001a2e:	443b      	add	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	f803 2c2c 	strb.w	r2, [r3, #-44]
		SKprintf("%s\r\n", tmp);
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <hex_dmp+0x1a4>)
 8001a3e:	f002 fbf9 	bl	8004234 <SKprintf>
    }

}
 8001a42:	bf00      	nop
 8001a44:	3738      	adds	r7, #56	; 0x38
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000510 	.word	0x20000510
 8001a50:	08018440 	.word	0x08018440
 8001a54:	0801844c 	.word	0x0801844c
 8001a58:	08018498 	.word	0x08018498
 8001a5c:	080184e8 	.word	0x080184e8
 8001a60:	080184f0 	.word	0x080184f0
 8001a64:	0801850c 	.word	0x0801850c
 8001a68:	08018514 	.word	0x08018514
 8001a6c:	08018344 	.word	0x08018344
 8001a70:	08018518 	.word	0x08018518

08001a74 <input2menu>:
//==============================================================================
//
//==============================================================================

COMMAND_MENUE input2menu(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
     uint16_t i = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	80fb      	strh	r3, [r7, #6]
    COMMAND_MENUE rtn = CMD_MAX;
 8001a7e:	2306      	movs	r3, #6
 8001a80:	717b      	strb	r3, [r7, #5]

        while( com_list[i].pt != CMD_MAX ){
 8001a82:	e01d      	b.n	8001ac0 <input2menu+0x4c>
            if (strcmp(&input_string.main[0], &com_list[i].command[0]) == 0){
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <input2menu+0x6c>)
 8001a92:	4413      	add	r3, r2
 8001a94:	3301      	adds	r3, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	4812      	ldr	r0, [pc, #72]	; (8001ae4 <input2menu+0x70>)
 8001a9a:	f7fe fba1 	bl	80001e0 <strcmp>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10a      	bne.n	8001aba <input2menu+0x46>
                rtn = com_list[i].pt;
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <input2menu+0x6c>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	717b      	strb	r3, [r7, #5]
                break;
 8001ab8:	e00d      	b.n	8001ad6 <input2menu+0x62>
            }
            i++;
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	3301      	adds	r3, #1
 8001abe:	80fb      	strh	r3, [r7, #6]
        while( com_list[i].pt != CMD_MAX ){
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <input2menu+0x6c>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d1d6      	bne.n	8001a84 <input2menu+0x10>
        }

    return rtn;
 8001ad6:	797b      	ldrb	r3, [r7, #5]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	08019e80 	.word	0x08019e80
 8001ae4:	20000518 	.word	0x20000518

08001ae8 <command_split>:
//==============================================================================
//
//==============================================================================
void command_split(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
	int		i;
	int		j;
	char	moji = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	71fb      	strb	r3, [r7, #7]
	char 	*ptr;

	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	e008      	b.n	8001b0a <command_split+0x22>
		input_string.sub_ptr[j] = 0;
 8001af8:	4a5d      	ldr	r2, [pc, #372]	; (8001c70 <command_split+0x188>)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3308      	adds	r3, #8
 8001afe:	2100      	movs	r1, #0
 8001b00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b0e      	cmp	r3, #14
 8001b0e:	ddf3      	ble.n	8001af8 <command_split+0x10>
	}

	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e027      	b.n	8001b66 <command_split+0x7e>
		switch(input_string.main[i]){
 8001b16:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <command_split+0x188>)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b2c      	cmp	r3, #44	; 0x2c
 8001b20:	d005      	beq.n	8001b2e <command_split+0x46>
 8001b22:	2b2c      	cmp	r3, #44	; 0x2c
 8001b24:	dc0b      	bgt.n	8001b3e <command_split+0x56>
 8001b26:	2b09      	cmp	r3, #9
 8001b28:	d001      	beq.n	8001b2e <command_split+0x46>
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d107      	bne.n	8001b3e <command_split+0x56>
		case ' ':		// スペース
		case ',':		//　カンマ
		case '	':		//　タブ
			input_string.main[i] = '\0';
 8001b2e:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <command_split+0x188>)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
			moji = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	71fb      	strb	r3, [r7, #7]
			break;
 8001b3c:	e010      	b.n	8001b60 <command_split+0x78>
		default:
			if( moji == 0 ){
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10c      	bne.n	8001b5e <command_split+0x76>
				if( j < INPUT_BUF_SIZE/2){
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b0e      	cmp	r3, #14
 8001b48:	dc07      	bgt.n	8001b5a <command_split+0x72>
					input_string.sub_ptr[j] = &input_string.main[i];
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4a48      	ldr	r2, [pc, #288]	; (8001c70 <command_split+0x188>)
 8001b4e:	441a      	add	r2, r3
 8001b50:	4947      	ldr	r1, [pc, #284]	; (8001c70 <command_split+0x188>)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3308      	adds	r3, #8
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				moji = 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8001b5e:	bf00      	nop
	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b1d      	cmp	r3, #29
 8001b6a:	ddd4      	ble.n	8001b16 <command_split+0x2e>
		}
	}

	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	e074      	b.n	8001c5c <command_split+0x174>
		ptr = input_string.sub_ptr[j];
 8001b72:	4a3f      	ldr	r2, [pc, #252]	; (8001c70 <command_split+0x188>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3308      	adds	r3, #8
 8001b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7c:	603b      	str	r3, [r7, #0]
		moji = 1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	71fb      	strb	r3, [r7, #7]
		if( ptr != 0 ){
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d06d      	beq.n	8001c64 <command_split+0x17c>
			if ( ptr[0] == '0' && ptr[1] == 'x'){
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b30      	cmp	r3, #48	; 0x30
 8001b8e:	d14c      	bne.n	8001c2a <command_split+0x142>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b78      	cmp	r3, #120	; 0x78
 8001b98:	d147      	bne.n	8001c2a <command_split+0x142>
				ptr ++;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	603b      	str	r3, [r7, #0]
				ptr ++;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8001ba6:	e01c      	b.n	8001be2 <command_split+0xfa>
					if( ('0'<=*ptr && *ptr<='9') || ('A'<=*ptr && *ptr<='F') || ('a'<=*ptr && *ptr<='f')){
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b2f      	cmp	r3, #47	; 0x2f
 8001bae:	d903      	bls.n	8001bb8 <command_split+0xd0>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b39      	cmp	r3, #57	; 0x39
 8001bb6:	d911      	bls.n	8001bdc <command_split+0xf4>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d903      	bls.n	8001bc8 <command_split+0xe0>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b46      	cmp	r3, #70	; 0x46
 8001bc6:	d909      	bls.n	8001bdc <command_split+0xf4>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b60      	cmp	r3, #96	; 0x60
 8001bce:	d903      	bls.n	8001bd8 <command_split+0xf0>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b66      	cmp	r3, #102	; 0x66
 8001bd6:	d901      	bls.n	8001bdc <command_split+0xf4>

					}
					else{
						moji = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1de      	bne.n	8001ba8 <command_split+0xc0>
				}

				if( moji == 1 ){
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d132      	bne.n	8001c56 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%x", &input_string.data[j]);
 8001bf0:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <command_split+0x188>)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	332c      	adds	r3, #44	; 0x2c
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <command_split+0x188>)
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	461a      	mov	r2, r3
 8001c08:	491a      	ldr	r1, [pc, #104]	; (8001c74 <command_split+0x18c>)
 8001c0a:	f013 fd3d 	bl	8015688 <siscanf>
				if( moji == 1 ){
 8001c0e:	e022      	b.n	8001c56 <command_split+0x16e>
				}
			}
			else{
				while( *ptr != '\0' ){
					if( '0'<=*ptr && *ptr<='9'){
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b2f      	cmp	r3, #47	; 0x2f
 8001c16:	d903      	bls.n	8001c20 <command_split+0x138>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b39      	cmp	r3, #57	; 0x39
 8001c1e:	d901      	bls.n	8001c24 <command_split+0x13c>
					}
					else{
						moji = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ee      	bne.n	8001c10 <command_split+0x128>
				}

				if( moji == 1 ){
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d10e      	bne.n	8001c56 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%d", &input_string.data[j]);
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <command_split+0x188>)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	3308      	adds	r3, #8
 8001c3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	332c      	adds	r3, #44	; 0x2c
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <command_split+0x188>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4909      	ldr	r1, [pc, #36]	; (8001c78 <command_split+0x190>)
 8001c52:	f013 fd19 	bl	8015688 <siscanf>
	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b0e      	cmp	r3, #14
 8001c60:	dd87      	ble.n	8001b72 <command_split+0x8a>
		else{
			break;
		}
	}

}
 8001c62:	e000      	b.n	8001c66 <command_split+0x17e>
			break;
 8001c64:	bf00      	nop
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000518 	.word	0x20000518
 8001c74:	08018520 	.word	0x08018520
 8001c78:	08018524 	.word	0x08018524

08001c7c <read_line_streem>:

//==============================================================================
//
//==============================================================================
 INPUT_CHAR_STEP read_line_streem(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
    uint8_t num;
    uint8_t sub_cnt;
#endif	// ___NOP
    char	string[2];

    string[0] = '\0';
 8001c82:	2300      	movs	r3, #0
 8001c84:	713b      	strb	r3, [r7, #4]
    string[1] = '\0';
 8001c86:	2300      	movs	r3, #0
 8001c88:	717b      	strb	r3, [r7, #5]


    c = (char)getch(SK_UART2_DEBUG);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f002 fb16 	bl	80042bc <getch>
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]

    //SKprintf("read_line_streem()\r\n");

    if( c != 0 ){
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d04b      	beq.n	8001d32 <read_line_streem+0xb6>



        switch(input_char_step){
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <read_line_streem+0xc8>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <read_line_streem+0x2c>
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d006      	beq.n	8001cb4 <read_line_streem+0x38>
                    input_char_step = INPUT_DATA_FIX;

                    command_split();
                }
            default:
                break;
 8001ca6:	e046      	b.n	8001d36 <read_line_streem+0xba>
                input_pos = 0;
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <read_line_streem+0xcc>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
                input_char_step = INPUT_SAVING;
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <read_line_streem+0xc8>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f012 ff5e 	bl	8014b78 <isprint>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d015      	beq.n	8001cee <read_line_streem+0x72>
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <read_line_streem+0xcc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b1c      	cmp	r3, #28
 8001cc8:	dc11      	bgt.n	8001cee <read_line_streem+0x72>
                    input_string.main[input_pos] = c;
 8001cca:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <read_line_streem+0xcc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	491f      	ldr	r1, [pc, #124]	; (8001d4c <read_line_streem+0xd0>)
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	54ca      	strb	r2, [r1, r3]
                    input_pos ++;
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <read_line_streem+0xcc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <read_line_streem+0xcc>)
 8001cdc:	6013      	str	r3, [r2, #0]
                    string[0] = c;
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	713b      	strb	r3, [r7, #4]
                    SKprintf("%s",string);
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481a      	ldr	r0, [pc, #104]	; (8001d50 <read_line_streem+0xd4>)
 8001ce8:	f002 faa4 	bl	8004234 <SKprintf>
 8001cec:	e020      	b.n	8001d30 <read_line_streem+0xb4>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d10c      	bne.n	8001d0e <read_line_streem+0x92>
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <read_line_streem+0xcc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	dd08      	ble.n	8001d0e <read_line_streem+0x92>
                    input_pos --;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <read_line_streem+0xcc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <read_line_streem+0xcc>)
 8001d04:	6013      	str	r3, [r2, #0]
                    SKprintf("\x08 \x08");
 8001d06:	4813      	ldr	r0, [pc, #76]	; (8001d54 <read_line_streem+0xd8>)
 8001d08:	f002 fa94 	bl	8004234 <SKprintf>
 8001d0c:	e010      	b.n	8001d30 <read_line_streem+0xb4>
                else if (c == '\r') {
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b0d      	cmp	r3, #13
 8001d12:	d110      	bne.n	8001d36 <read_line_streem+0xba>
                    input_string.main[input_pos] = '\0';
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <read_line_streem+0xcc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <read_line_streem+0xd0>)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	54d1      	strb	r1, [r2, r3]
                    SKprintf("\r\n");
 8001d1e:	480e      	ldr	r0, [pc, #56]	; (8001d58 <read_line_streem+0xdc>)
 8001d20:	f002 fa88 	bl	8004234 <SKprintf>
                    input_char_step = INPUT_DATA_FIX;
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <read_line_streem+0xc8>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	701a      	strb	r2, [r3, #0]
                    command_split();
 8001d2a:	f7ff fedd 	bl	8001ae8 <command_split>
                break;
 8001d2e:	e002      	b.n	8001d36 <read_line_streem+0xba>
 8001d30:	e001      	b.n	8001d36 <read_line_streem+0xba>
        }
    }
 8001d32:	bf00      	nop
 8001d34:	e000      	b.n	8001d38 <read_line_streem+0xbc>
                break;
 8001d36:	bf00      	nop
    return(input_char_step);
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <read_line_streem+0xc8>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 }
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000514 	.word	0x20000514
 8001d48:	2000050c 	.word	0x2000050c
 8001d4c:	20000518 	.word	0x20000518
 8001d50:	08018310 	.word	0x08018310
 8001d54:	08018528 	.word	0x08018528
 8001d58:	0801852c 	.word	0x0801852c

08001d5c <HAL_RTCEx_WakeUpTimerEventCallback>:
//==============================================================================
//
//==============================================================================

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

	uint8_t	i;

	if( timer.start > TIMER_AV_NUM){
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d66:	7e5b      	ldrb	r3, [r3, #25]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d941      	bls.n	8001df0 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>

		timer.dt_buf[timer.av_wcnt] = timer.dt;
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d6e:	7e1b      	ldrb	r3, [r3, #24]
 8001d70:	4618      	mov	r0, r3
 8001d72:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4926      	ldr	r1, [pc, #152]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d78:	0083      	lsls	r3, r0, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	605a      	str	r2, [r3, #4]
		timer.av_wcnt ++;
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d80:	7e1b      	ldrb	r3, [r3, #24]
 8001d82:	3301      	adds	r3, #1
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d88:	761a      	strb	r2, [r3, #24]

		if(timer.av_wcnt > TIMER_AV_NUM){
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d8c:	7e1b      	ldrb	r3, [r3, #24]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d920      	bls.n	8001dd4 <HAL_RTCEx_WakeUpTimerEventCallback+0x78>
			timer.av_wcnt = 0;
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	761a      	strb	r2, [r3, #24]
			timer.dt_av = 0;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e00c      	b.n	8001dbe <HAL_RTCEx_WakeUpTimerEventCallback+0x62>
				timer.dt_av +=  timer.dt_buf[i];
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	4919      	ldr	r1, [pc, #100]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001db6:	6153      	str	r3, [r2, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d9ef      	bls.n	8001da4 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>
			}
			timer.dt_av /= TIMER_AV_NUM;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <HAL_RTCEx_WakeUpTimerEventCallback+0xb8>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dd2:	6153      	str	r3, [r2, #20]
		}

		if( timer.dt_max < timer.dt ){
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d203      	bcs.n	8001de8 <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>
			timer.dt_max = timer.dt;
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001de6:	6113      	str	r3, [r2, #16]
		}

		timer.dt = 0;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
	}
	else{
		timer.start ++;
		timer.dt = 0;
	}
}
 8001dee:	e008      	b.n	8001e02 <HAL_RTCEx_WakeUpTimerEventCallback+0xa6>
		timer.start ++;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001df2:	7e5b      	ldrb	r3, [r3, #25]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dfa:	765a      	strb	r2, [r3, #25]
		timer.dt = 0;
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	2000059c 	.word	0x2000059c
 8001e14:	aaaaaaab 	.word	0xaaaaaaab

08001e18 <usr_isr_tim1_up>:
//	uint16_t	msec_max;
//} TIMER_TIC;
//
//==============================================================================
void usr_isr_tim1_up(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	timer.dt += 10;
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <usr_isr_tim1_up+0x90>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	330a      	adds	r3, #10
 8001e22:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <usr_isr_tim1_up+0x90>)
 8001e24:	6013      	str	r3, [r2, #0]

	tm.usec += 1;
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e30:	801a      	strh	r2, [r3, #0]

	if( tm.usec >= 100 ){
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	2b63      	cmp	r3, #99	; 0x63
 8001e38:	d930      	bls.n	8001e9c <usr_isr_tim1_up+0x84>
		tm.usec = 0;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	801a      	strh	r2, [r3, #0]
		tm.msec ++;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e42:	885b      	ldrh	r3, [r3, #2]
 8001e44:	3301      	adds	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e4a:	805a      	strh	r2, [r3, #2]
		if( tm.msec >= 1000 ){
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e4e:	885b      	ldrh	r3, [r3, #2]
 8001e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e54:	d322      	bcc.n	8001e9c <usr_isr_tim1_up+0x84>
			tm.msec = 0;
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	805a      	strh	r2, [r3, #2]
			tm.sec ++;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e5e:	889b      	ldrh	r3, [r3, #4]
 8001e60:	3301      	adds	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e66:	809a      	strh	r2, [r3, #4]
			if( tm.sec >= 60 ){
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e6a:	889b      	ldrh	r3, [r3, #4]
 8001e6c:	2b3b      	cmp	r3, #59	; 0x3b
 8001e6e:	d915      	bls.n	8001e9c <usr_isr_tim1_up+0x84>
				tm.sec = 0;
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	809a      	strh	r2, [r3, #4]
				tm.min ++;
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e78:	88db      	ldrh	r3, [r3, #6]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e80:	80da      	strh	r2, [r3, #6]
				if( tm.min >= 60 ){
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e84:	88db      	ldrh	r3, [r3, #6]
 8001e86:	2b3b      	cmp	r3, #59	; 0x3b
 8001e88:	d908      	bls.n	8001e9c <usr_isr_tim1_up+0x84>
					tm.min = 0;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	80da      	strh	r2, [r3, #6]
					tm.hour ++;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e92:	891b      	ldrh	r3, [r3, #8]
 8001e94:	3301      	adds	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <usr_isr_tim1_up+0x94>)
 8001e9a:	811a      	strh	r2, [r3, #8]
				}
			}
		}
	}

}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2000059c 	.word	0x2000059c
 8001eac:	200005c0 	.word	0x200005c0

08001eb0 <GetTime_tim1up>:
void GetTime_tim1up(TIMER_DATA *time)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	*time = tm;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <GetTime_tim1up+0x28>)
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	cb03      	ldmia	r3!, {r0, r1}
 8001ec2:	6010      	str	r0, [r2, #0]
 8001ec4:	6051      	str	r1, [r2, #4]
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	8113      	strh	r3, [r2, #8]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200005c0 	.word	0x200005c0

08001edc <my_putint>:
//==============================================================================
//
//==============================================================================

uint8_t *my_putint(int num, uint8_t *buf)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
//	SKprintf("num=%d,num/10=%d,num%%10=%d\r\n",num,num/10,num%10);

	if (num < 0) {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	da08      	bge.n	8001efe <my_putint+0x22>
        *buf = '-';
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	222d      	movs	r2, #45	; 0x2d
 8001ef0:	701a      	strb	r2, [r3, #0]
        buf++;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	603b      	str	r3, [r7, #0]
        num = -num;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	425b      	negs	r3, r3
 8001efc:	607b      	str	r3, [r7, #4]
    }

    if (num / 10 != 0) {
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3309      	adds	r3, #9
 8001f02:	2b12      	cmp	r3, #18
 8001f04:	d90b      	bls.n	8001f1e <my_putint+0x42>
        buf = my_putint(num / 10, buf);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <my_putint+0x74>)
 8001f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f0e:	1092      	asrs	r2, r2, #2
 8001f10:	17db      	asrs	r3, r3, #31
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ffe0 	bl	8001edc <my_putint>
 8001f1c:	6038      	str	r0, [r7, #0]
    }

    *buf = '0' + (num % 10);
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <my_putint+0x74>)
 8001f22:	fb83 1302 	smull	r1, r3, r3, r2
 8001f26:	1099      	asrs	r1, r3, #2
 8001f28:	17d3      	asrs	r3, r2, #31
 8001f2a:	1ac9      	subs	r1, r1, r3
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	1ad1      	subs	r1, r2, r3
 8001f36:	b2cb      	uxtb	r3, r1
 8001f38:	3330      	adds	r3, #48	; 0x30
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	701a      	strb	r2, [r3, #0]
    buf++;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	603b      	str	r3, [r7, #0]

    return buf;
 8001f46:	683b      	ldr	r3, [r7, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	66666667 	.word	0x66666667

08001f54 <my_putfloat>:
//==============================================================================
//
//==============================================================================

uint8_t *my_putfloat(double num, int precision, uint8_t *buf)
{
 8001f54:	b5b0      	push	{r4, r5, r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	int dt;
	double fracPart,dtf;
	int intPart;
	int digit;

	intPart = (int)num;
 8001f62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f66:	f7fe fe0f 	bl	8000b88 <__aeabi_d2iz>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	61bb      	str	r3, [r7, #24]
    buf = my_putint(intPart, buf);
 8001f6e:	6839      	ldr	r1, [r7, #0]
 8001f70:	69b8      	ldr	r0, [r7, #24]
 8001f72:	f7ff ffb3 	bl	8001edc <my_putint>
 8001f76:	6038      	str	r0, [r7, #0]
    *buf = '.';
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	222e      	movs	r2, #46	; 0x2e
 8001f7c:	701a      	strb	r2, [r3, #0]
    buf ++;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	603b      	str	r3, [r7, #0]

    fracPart = num - intPart;
 8001f84:	69b8      	ldr	r0, [r7, #24]
 8001f86:	f7fe fae5 	bl	8000554 <__aeabi_i2d>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f92:	f7fe f991 	bl	80002b8 <__aeabi_dsub>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (fracPart < 0) {
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001faa:	f7fe fdaf 	bl	8000b0c <__aeabi_dcmplt>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <my_putfloat+0x6c>
        fracPart = -fracPart;
 8001fb4:	6a3c      	ldr	r4, [r7, #32]
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001fbc:	e9c7 4508 	strd	r4, r5, [r7, #32]
    }

    int count = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    while (count < precision) {
 8001fc4:	e029      	b.n	800201a <my_putfloat+0xc6>
        fracPart *= 10;
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <my_putfloat+0xe0>)
 8001fcc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fd0:	f7fe fb2a 	bl	8000628 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        int digit = (int)fracPart;
 8001fdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fe0:	f7fe fdd2 	bl	8000b88 <__aeabi_d2iz>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	617b      	str	r3, [r7, #20]

        *buf = '0' + digit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3330      	adds	r3, #48	; 0x30
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	701a      	strb	r2, [r3, #0]
        buf ++;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	603b      	str	r3, [r7, #0]

        fracPart -= digit;
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7fe faaa 	bl	8000554 <__aeabi_i2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002008:	f7fe f956 	bl	80002b8 <__aeabi_dsub>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	e9c7 2308 	strd	r2, r3, [r7, #32]
        count++;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	3301      	adds	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
    while (count < precision) {
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	dbd1      	blt.n	8001fc6 <my_putfloat+0x72>
    }

    *buf = '\0';
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]

    return buf;
 8002028:	683b      	ldr	r3, [r7, #0]

}
 800202a:	4618      	mov	r0, r3
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bdb0      	pop	{r4, r5, r7, pc}
 8002032:	bf00      	nop
 8002034:	40240000 	.word	0x40240000

08002038 <my_putchar>:
//
//
//=============================================================================

uint8_t *my_putchar(char c, uint8_t *buf )
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
	//SKprintf("_putchar c=%x, buf=%p\r\n",c,buf);
	*buf = c;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	79fa      	ldrb	r2, [r7, #7]
 8002048:	701a      	strb	r2, [r3, #0]
	buf ++;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	603b      	str	r3, [r7, #0]
	return buf ;
 8002050:	683b      	ldr	r3, [r7, #0]
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <my_puts>:
//=============================================================================
//
//
//=============================================================================
uint8_t *my_puts(char* str, uint8_t *buf )
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
	uint8_t *buf2;

	buf2=buf;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	60fb      	str	r3, [r7, #12]

	//SKprintf("_puts str=%s, buf=%p\r\n",str,buf);
    while ( *str != '\0' ) {
 800206c:	e009      	b.n	8002082 <my_puts+0x24>
        buf = my_putchar(*str, buf);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	6839      	ldr	r1, [r7, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ffdf 	bl	8002038 <my_putchar>
 800207a:	6038      	str	r0, [r7, #0]
        str++;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	607b      	str	r3, [r7, #4]
    while ( *str != '\0' ) {
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f1      	bne.n	800206e <my_puts+0x10>
    }
    *buf='\0';
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
	//SKprintf("_puts str=%s  %p\r\n",buf2, buf);
	return buf ;
 8002090:	683b      	ldr	r3, [r7, #0]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <my_putshex>:
//
//
//=============================================================================

uint8_t *my_putshex(uint16_t dt, uint8_t flg, uint8_t *buf )
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	603a      	str	r2, [r7, #0]
 80020a6:	80fb      	strh	r3, [r7, #6]
 80020a8:	460b      	mov	r3, r1
 80020aa:	717b      	strb	r3, [r7, #5]
	uint8_t	sw;

	switch(flg){
 80020ac:	797b      	ldrb	r3, [r7, #5]
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d007      	beq.n	80020c2 <my_putshex+0x26>
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	f300 80a0 	bgt.w	80021f8 <my_putshex+0x15c>
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d048      	beq.n	800214e <my_putshex+0xb2>
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d02f      	beq.n	8002120 <my_putshex+0x84>
 80020c0:	e09a      	b.n	80021f8 <my_putshex+0x15c>
	case 4:
		*buf = ConvC[( dt >> 12 ) & 0x0f ];
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	0b1b      	lsrs	r3, r3, #12
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	4a4e      	ldr	r2, [pc, #312]	; (8002208 <my_putshex+0x16c>)
 80020ce:	5cd2      	ldrb	r2, [r2, r3]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	701a      	strb	r2, [r3, #0]
		buf ++;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	603b      	str	r3, [r7, #0]
		*buf = ConvC[( dt >> 8 ) & 0x0f ];
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	4a48      	ldr	r2, [pc, #288]	; (8002208 <my_putshex+0x16c>)
 80020e6:	5cd2      	ldrb	r2, [r2, r3]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
		buf ++;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	603b      	str	r3, [r7, #0]
		*buf = ConvC[( dt >> 4 ) & 0x0f ];
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	4a42      	ldr	r2, [pc, #264]	; (8002208 <my_putshex+0x16c>)
 80020fe:	5cd2      	ldrb	r2, [r2, r3]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	701a      	strb	r2, [r3, #0]
		buf ++;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	603b      	str	r3, [r7, #0]
		*buf = ConvC[ dt  & 0x0f ];
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	4a3d      	ldr	r2, [pc, #244]	; (8002208 <my_putshex+0x16c>)
 8002112:	5cd2      	ldrb	r2, [r2, r3]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	701a      	strb	r2, [r3, #0]
		buf ++;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	603b      	str	r3, [r7, #0]
		break;
 800211e:	e06b      	b.n	80021f8 <my_putshex+0x15c>

	case 2:
		*buf = ConvC[( dt >> 4 ) & 0x0f ];
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	b29b      	uxth	r3, r3
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	4a37      	ldr	r2, [pc, #220]	; (8002208 <my_putshex+0x16c>)
 800212c:	5cd2      	ldrb	r2, [r2, r3]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	701a      	strb	r2, [r3, #0]
		buf ++;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	603b      	str	r3, [r7, #0]
		*buf = ConvC[ dt  & 0x0f ];
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <my_putshex+0x16c>)
 8002140:	5cd2      	ldrb	r2, [r2, r3]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	701a      	strb	r2, [r3, #0]
		buf ++;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	603b      	str	r3, [r7, #0]
		break;
 800214c:	e054      	b.n	80021f8 <my_putshex+0x15c>
	case 0:
		sw = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
		if(( sw == 1) || (( dt >> 12 ) & 0x0f ) != 0 ){
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d006      	beq.n	8002166 <my_putshex+0xca>
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	0b1b      	lsrs	r3, r3, #12
 800215c:	b29b      	uxth	r3, r3
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <my_putshex+0xe6>
			*buf = ConvC[( dt >> 12 ) & 0x0f ];
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	0b1b      	lsrs	r3, r3, #12
 800216a:	b29b      	uxth	r3, r3
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	4a25      	ldr	r2, [pc, #148]	; (8002208 <my_putshex+0x16c>)
 8002172:	5cd2      	ldrb	r2, [r2, r3]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	701a      	strb	r2, [r3, #0]
			buf ++;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	603b      	str	r3, [r7, #0]
			sw = 1;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
		}
		if(( sw == 1) || (( dt >> 8 ) & 0x0f ) != 0 ){
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d006      	beq.n	8002196 <my_putshex+0xfa>
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00d      	beq.n	80021b2 <my_putshex+0x116>
			*buf = ConvC[( dt >> 8 ) & 0x0f ];
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	b29b      	uxth	r3, r3
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	4a19      	ldr	r2, [pc, #100]	; (8002208 <my_putshex+0x16c>)
 80021a2:	5cd2      	ldrb	r2, [r2, r3]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	701a      	strb	r2, [r3, #0]
			buf ++;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	603b      	str	r3, [r7, #0]
			sw = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
		}
		if(( sw == 1) || (( dt >> 4 ) & 0x0f ) != 0 ){
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d006      	beq.n	80021c6 <my_putshex+0x12a>
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00d      	beq.n	80021e2 <my_putshex+0x146>
			*buf = ConvC[( dt >> 4 ) & 0x0f ];
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <my_putshex+0x16c>)
 80021d2:	5cd2      	ldrb	r2, [r2, r3]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	701a      	strb	r2, [r3, #0]
			buf ++;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	603b      	str	r3, [r7, #0]
			sw = 1;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
		}

		*buf = ConvC[ dt & 0x0f ];
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <my_putshex+0x16c>)
 80021ea:	5cd2      	ldrb	r2, [r2, r3]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	701a      	strb	r2, [r3, #0]
		buf ++;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	603b      	str	r3, [r7, #0]


		break;
 80021f6:	bf00      	nop
	}
	return buf ;
 80021f8:	683b      	ldr	r3, [r7, #0]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	0801a398 	.word	0x0801a398

0800220c <Set_logflg>:
//=============================================================================
//
//
//=============================================================================
void Set_logflg(LOG_FLAG flg)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]

	if( flg < LF_MAX){
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d808      	bhi.n	800222e <Set_logflg+0x22>
		log.flg = flg;
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <Set_logflg+0x2c>)
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	7193      	strb	r3, [r2, #6]
		SKprintf("log.flg=%d \r\n",log.flg);
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <Set_logflg+0x2c>)
 8002224:	799b      	ldrb	r3, [r3, #6]
 8002226:	4619      	mov	r1, r3
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <Set_logflg+0x30>)
 800222a:	f002 f803 	bl	8004234 <SKprintf>
	}
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200005cc 	.word	0x200005cc
 800223c:	08018530 	.word	0x08018530

08002240 <Set_logInfo>:
//=============================================================================
//
//
//=============================================================================
void Set_logInfo(char *string)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
//	RTC_TimeTypeDef sTime;
//	RTC_DateTypeDef sDate;
	TIMER_DATA time;

	int i;
	uint8_t	flg = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	74fb      	strb	r3, [r7, #19]
	uint32_t dt;



	switch(log.flg){
 800224c:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <Set_logInfo+0x184>)
 800224e:	799b      	ldrb	r3, [r3, #6]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d009      	beq.n	8002268 <Set_logInfo+0x28>
 8002254:	2b02      	cmp	r3, #2
 8002256:	dc0e      	bgt.n	8002276 <Set_logInfo+0x36>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <Set_logInfo+0x3a>
 800225c:	2b01      	cmp	r3, #1
 800225e:	d000      	beq.n	8002262 <Set_logInfo+0x22>
	case LF_MAX_DATA_STOP:
		if( log.num >= LOG_RECODE_MAX)
			flg = 1;
		break;
	default:
		break;
 8002260:	e009      	b.n	8002276 <Set_logInfo+0x36>
		flg = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	74fb      	strb	r3, [r7, #19]
		break;
 8002266:	e00b      	b.n	8002280 <Set_logInfo+0x40>
		if( log.num >= LOG_RECODE_MAX)
 8002268:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <Set_logInfo+0x184>)
 800226a:	889b      	ldrh	r3, [r3, #4]
 800226c:	2b63      	cmp	r3, #99	; 0x63
 800226e:	d906      	bls.n	800227e <Set_logInfo+0x3e>
			flg = 1;
 8002270:	2301      	movs	r3, #1
 8002272:	74fb      	strb	r3, [r7, #19]
		break;
 8002274:	e003      	b.n	800227e <Set_logInfo+0x3e>
		break;
 8002276:	bf00      	nop
 8002278:	e002      	b.n	8002280 <Set_logInfo+0x40>
		break;
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <Set_logInfo+0x40>
		break;
 800227e:	bf00      	nop
	}


	if( flg == 0 ){
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 809a 	bne.w	80023bc <Set_logInfo+0x17c>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e01a      	b.n	80022c4 <Set_logInfo+0x84>
			log.rec[log.wptr].string[i] = string[i];
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	4a4b      	ldr	r2, [pc, #300]	; (80023c4 <Set_logInfo+0x184>)
 8002296:	8812      	ldrh	r2, [r2, #0]
 8002298:	4611      	mov	r1, r2
 800229a:	7818      	ldrb	r0, [r3, #0]
 800229c:	4a49      	ldr	r2, [pc, #292]	; (80023c4 <Set_logInfo+0x184>)
 800229e:	460b      	mov	r3, r1
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	1a5b      	subs	r3, r3, r1
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	441a      	add	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4413      	add	r3, r2
 80022ac:	330e      	adds	r3, #14
 80022ae:	4602      	mov	r2, r0
 80022b0:	701a      	strb	r2, [r3, #0]
			if(string[i] == '\0'){
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <Set_logInfo+0x8c>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b31      	cmp	r3, #49	; 0x31
 80022c8:	dde1      	ble.n	800228e <Set_logInfo+0x4e>
 80022ca:	e000      	b.n	80022ce <Set_logInfo+0x8e>
				break;
 80022cc:	bf00      	nop
			}
		}

//		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
//		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
		GetTime_tim1up(&time);
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fdec 	bl	8001eb0 <GetTime_tim1up>

		log.rec[log.wptr].Hours = time.hour;
 80022d8:	8a3a      	ldrh	r2, [r7, #16]
 80022da:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <Set_logInfo+0x184>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	4619      	mov	r1, r3
 80022e0:	b2d0      	uxtb	r0, r2
 80022e2:	4a38      	ldr	r2, [pc, #224]	; (80023c4 <Set_logInfo+0x184>)
 80022e4:	460b      	mov	r3, r1
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a5b      	subs	r3, r3, r1
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	3308      	adds	r3, #8
 80022f0:	4602      	mov	r2, r0
 80022f2:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Minutes = time.min;
 80022f4:	89fa      	ldrh	r2, [r7, #14]
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <Set_logInfo+0x184>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	4619      	mov	r1, r3
 80022fc:	b2d0      	uxtb	r0, r2
 80022fe:	4a31      	ldr	r2, [pc, #196]	; (80023c4 <Set_logInfo+0x184>)
 8002300:	460b      	mov	r3, r1
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a5b      	subs	r3, r3, r1
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	3309      	adds	r3, #9
 800230c:	4602      	mov	r2, r0
 800230e:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Seconds = time.sec;
 8002310:	89ba      	ldrh	r2, [r7, #12]
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <Set_logInfo+0x184>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	b2d0      	uxtb	r0, r2
 800231a:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <Set_logInfo+0x184>)
 800231c:	460b      	mov	r3, r1
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a5b      	subs	r3, r3, r1
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	330a      	adds	r3, #10
 8002328:	4602      	mov	r2, r0
 800232a:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].msec = time.msec;
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <Set_logInfo+0x184>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	8978      	ldrh	r0, [r7, #10]
 8002334:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <Set_logInfo+0x184>)
 8002336:	460b      	mov	r3, r1
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a5b      	subs	r3, r3, r1
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	330c      	adds	r3, #12
 8002342:	4602      	mov	r2, r0
 8002344:	801a      	strh	r2, [r3, #0]
		log.rec[log.wptr].usec = time.usec;
 8002346:	893a      	ldrh	r2, [r7, #8]
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <Set_logInfo+0x184>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	b2d0      	uxtb	r0, r2
 8002350:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <Set_logInfo+0x184>)
 8002352:	460b      	mov	r3, r1
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	1a5b      	subs	r3, r3, r1
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	330b      	adds	r3, #11
 800235e:	4602      	mov	r2, r0
 8002360:	701a      	strb	r2, [r3, #0]

//		log.rec[log.wptr].dt = timer.dt;
//		log.rec[log.wptr].dt_av = timer.dt_av;


		log.num ++;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <Set_logInfo+0x184>)
 8002364:	889b      	ldrh	r3, [r3, #4]
 8002366:	3301      	adds	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <Set_logInfo+0x184>)
 800236c:	809a      	strh	r2, [r3, #4]
		if( log.num > LOG_RECODE_MAX ){
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <Set_logInfo+0x184>)
 8002370:	889b      	ldrh	r3, [r3, #4]
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d902      	bls.n	800237c <Set_logInfo+0x13c>
			log.num = LOG_RECODE_MAX;
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <Set_logInfo+0x184>)
 8002378:	2264      	movs	r2, #100	; 0x64
 800237a:	809a      	strh	r2, [r3, #4]
		}

		log.wptr ++;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <Set_logInfo+0x184>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <Set_logInfo+0x184>)
 8002386:	801a      	strh	r2, [r3, #0]
		if( log.wptr > LOG_RECODE_MAX ){
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <Set_logInfo+0x184>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d902      	bls.n	8002396 <Set_logInfo+0x156>
			log.wptr = 0;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <Set_logInfo+0x184>)
 8002392:	2200      	movs	r2, #0
 8002394:	801a      	strh	r2, [r3, #0]
		}

		if( log.wptr == log.rptr ){
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <Set_logInfo+0x184>)
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <Set_logInfo+0x184>)
 800239c:	885b      	ldrh	r3, [r3, #2]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d10c      	bne.n	80023bc <Set_logInfo+0x17c>
			log.rptr ++;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <Set_logInfo+0x184>)
 80023a4:	885b      	ldrh	r3, [r3, #2]
 80023a6:	3301      	adds	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <Set_logInfo+0x184>)
 80023ac:	805a      	strh	r2, [r3, #2]
			if( log.rptr > LOG_RECODE_MAX ){
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <Set_logInfo+0x184>)
 80023b0:	885b      	ldrh	r3, [r3, #2]
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d902      	bls.n	80023bc <Set_logInfo+0x17c>
				log.rptr = 0;
 80023b6:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <Set_logInfo+0x184>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	805a      	strh	r2, [r3, #2]
			}
		}
	}
}
 80023bc:	bf00      	nop
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200005cc 	.word	0x200005cc

080023c8 <Set_logInfo2>:
//=============================================================================
//
//
//=============================================================================
void Set_logInfo2(const char *string, ...)
{
 80023c8:	b40f      	push	{r0, r1, r2, r3}
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b08e      	sub	sp, #56	; 0x38
 80023ce:	af00      	add	r7, sp, #0
	TIMER_DATA time;

	va_list ap;
	int i;
	char *buffer, *temp;
	uint8_t	flg = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t uint32value;
    double  floatvalue;



	temp = buffer = (char *)loginfo_buf;
 80023d6:	4b97      	ldr	r3, [pc, #604]	; (8002634 <Set_logInfo2+0x26c>)
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
//	temp = buffer = (char *)pvPortMalloc(128);
	//SKprintf("_logInfo2() 0001 temp= %p\r\n",temp);

	switch(log.flg){
 80023de:	4b96      	ldr	r3, [pc, #600]	; (8002638 <Set_logInfo2+0x270>)
 80023e0:	799b      	ldrb	r3, [r3, #6]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d00a      	beq.n	80023fc <Set_logInfo2+0x34>
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	dc0a      	bgt.n	8002400 <Set_logInfo2+0x38>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <Set_logInfo2+0x3c>
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d000      	beq.n	80023f4 <Set_logInfo2+0x2c>
	case LF_MAX_DATA_STOP:
		//if( log.num >= LOG_RECODE_MAX)
		//	flg = 1;
		break;
	default:
		break;
 80023f2:	e005      	b.n	8002400 <Set_logInfo2+0x38>
		flg = 1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80023fa:	e004      	b.n	8002406 <Set_logInfo2+0x3e>
		break;
 80023fc:	bf00      	nop
 80023fe:	e002      	b.n	8002406 <Set_logInfo2+0x3e>
		break;
 8002400:	bf00      	nop
 8002402:	e000      	b.n	8002406 <Set_logInfo2+0x3e>
		break;
 8002404:	bf00      	nop
	}

	if( flg == 0 ){
 8002406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 810b 	bne.w	8002626 <Set_logInfo2+0x25e>
		va_start(ap, string);
 8002410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002414:	607b      	str	r3, [r7, #4]
//		vsprintf(buffer, string, ap);

		i = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
	    while (*string != '\0') {
 800241a:	e063      	b.n	80024e4 <Set_logInfo2+0x11c>
	    	//*buffer = *string;
	    	//buffer ++;

	        if (*string == '%') {
 800241c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b25      	cmp	r3, #37	; 0x25
 8002422:	d155      	bne.n	80024d0 <Set_logInfo2+0x108>
	            string++; // Move past '%'
 8002424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002426:	3301      	adds	r3, #1
 8002428:	643b      	str	r3, [r7, #64]	; 0x40
	            if (*string == 'd') {
 800242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d10a      	bne.n	8002448 <Set_logInfo2+0x80>
	            	intvalue = va_arg(ap, int);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	1d1a      	adds	r2, r3, #4
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	617b      	str	r3, [r7, #20]

	                buffer = my_putint(intvalue, buffer);
 800243c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff fd4c 	bl	8001edc <my_putint>
 8002444:	6338      	str	r0, [r7, #48]	; 0x30
 8002446:	e04a      	b.n	80024de <Set_logInfo2+0x116>
	                buffer = my_putfloat(floatvalue, 2, buffer );
	               // SKprintf("val =%s\r\n",temp);

	            }
#endif
	            else if (*string == 'f') {
 8002448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b66      	cmp	r3, #102	; 0x66
 800244e:	d112      	bne.n	8002476 <Set_logInfo2+0xae>
	            	//SKprintf("_logInfo2() 0002 val =%d\r\n",intvalue);
	            	floatvalue = va_arg(ap, double);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3307      	adds	r3, #7
 8002454:	f023 0307 	bic.w	r3, r3, #7
 8002458:	f103 0208 	add.w	r2, r3, #8
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	e9c7 2306 	strd	r2, r3, [r7, #24]
	            	//SKprintf("_logInfo2() 0002 val =%g\r\n",floatvalue);
	            	//SKprintf("_logInfo2() 0010 val =%f\r\n",floatvalue);
	                buffer = my_putfloat(floatvalue, 2, buffer );
 8002466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002468:	2002      	movs	r0, #2
 800246a:	ed97 0b06 	vldr	d0, [r7, #24]
 800246e:	f7ff fd71 	bl	8001f54 <my_putfloat>
 8002472:	6338      	str	r0, [r7, #48]	; 0x30
 8002474:	e033      	b.n	80024de <Set_logInfo2+0x116>

	            //else if (*string == 'c') {
	            //    int value = va_arg(ap, int);
	            //    buffer = my_putchar(value, buffer );
	            //}
	            else if (*string == 's') {
 8002476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b73      	cmp	r3, #115	; 0x73
 800247c:	d10a      	bne.n	8002494 <Set_logInfo2+0xcc>
	            	charvalue = va_arg(ap, char*);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1d1a      	adds	r2, r3, #4
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	623b      	str	r3, [r7, #32]
	            	//SKprintf("_logInfo2() 0003 val =%s\r\n",charvalue);
	                buffer = my_puts(charvalue, buffer );
 8002488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800248a:	6a38      	ldr	r0, [r7, #32]
 800248c:	f7ff fde7 	bl	800205e <my_puts>
 8002490:	6338      	str	r0, [r7, #48]	; 0x30
 8002492:	e024      	b.n	80024de <Set_logInfo2+0x116>
	            } else if (*string == 'x') {
 8002494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b78      	cmp	r3, #120	; 0x78
 800249a:	d10c      	bne.n	80024b6 <Set_logInfo2+0xee>
	            	uintvalue = (uint16_t)va_arg(ap, int);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	1d1a      	adds	r2, r3, #4
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	84fb      	strh	r3, [r7, #38]	; 0x26
	            	//SKprintf("_logInfo2() 0004 val =%x\r\n",uintvalue);
	                buffer = my_putshex(uintvalue, 0, buffer );
 80024a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fdf5 	bl	800209c <my_putshex>
 80024b2:	6338      	str	r0, [r7, #48]	; 0x30
 80024b4:	e013      	b.n	80024de <Set_logInfo2+0x116>
	            } else {
	                buffer = my_puts('%', buffer );
 80024b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024b8:	2025      	movs	r0, #37	; 0x25
 80024ba:	f7ff fdd0 	bl	800205e <my_puts>
 80024be:	6338      	str	r0, [r7, #48]	; 0x30
	                buffer = my_puts(*string, buffer );
 80024c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fdc9 	bl	800205e <my_puts>
 80024cc:	6338      	str	r0, [r7, #48]	; 0x30
 80024ce:	e006      	b.n	80024de <Set_logInfo2+0x116>
	            }
	        }
	        else {
	            buffer = my_putchar(*string, buffer );
 80024d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fdae 	bl	8002038 <my_putchar>
 80024dc:	6338      	str	r0, [r7, #48]	; 0x30

//	        	buffer = my_puts(*string, buffer );
	        }
	        string++;
 80024de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e0:	3301      	adds	r3, #1
 80024e2:	643b      	str	r3, [r7, #64]	; 0x40
	    while (*string != '\0') {
 80024e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d197      	bne.n	800241c <Set_logInfo2+0x54>
	    	//buffer++;
	    }

		*buffer = '\0';
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
    	//SKprintf("_logInfo2() 0005\r\n");


		va_end(ap);

		for(i=0; i<PRiNTF_BUFFMAX; i++){
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
 80024f6:	e01a      	b.n	800252e <Set_logInfo2+0x166>
			log.rec[log.wptr].string[i] = temp[i];
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024fc:	4413      	add	r3, r2
 80024fe:	4a4e      	ldr	r2, [pc, #312]	; (8002638 <Set_logInfo2+0x270>)
 8002500:	8812      	ldrh	r2, [r2, #0]
 8002502:	4611      	mov	r1, r2
 8002504:	7818      	ldrb	r0, [r3, #0]
 8002506:	4a4c      	ldr	r2, [pc, #304]	; (8002638 <Set_logInfo2+0x270>)
 8002508:	460b      	mov	r3, r1
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a5b      	subs	r3, r3, r1
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	441a      	add	r2, r3
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	4413      	add	r3, r2
 8002516:	330e      	adds	r3, #14
 8002518:	4602      	mov	r2, r0
 800251a:	701a      	strb	r2, [r3, #0]
			if(temp[i] == '\0'){
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002520:	4413      	add	r3, r2
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <Set_logInfo2+0x16e>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	3301      	adds	r3, #1
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
 800252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002530:	2b31      	cmp	r3, #49	; 0x31
 8002532:	dde1      	ble.n	80024f8 <Set_logInfo2+0x130>
 8002534:	e000      	b.n	8002538 <Set_logInfo2+0x170>
				break;
 8002536:	bf00      	nop
		}

		//SKprintf("CC %s\r\n", &log.rec[log.wptr].string[0]);

//		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		GetTime_tim1up(&time);
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fcb7 	bl	8001eb0 <GetTime_tim1up>

		log.rec[log.wptr].Hours = time.hour;
 8002542:	8a3a      	ldrh	r2, [r7, #16]
 8002544:	4b3c      	ldr	r3, [pc, #240]	; (8002638 <Set_logInfo2+0x270>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	b2d0      	uxtb	r0, r2
 800254c:	4a3a      	ldr	r2, [pc, #232]	; (8002638 <Set_logInfo2+0x270>)
 800254e:	460b      	mov	r3, r1
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	1a5b      	subs	r3, r3, r1
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	3308      	adds	r3, #8
 800255a:	4602      	mov	r2, r0
 800255c:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Minutes = time.min;
 800255e:	89fa      	ldrh	r2, [r7, #14]
 8002560:	4b35      	ldr	r3, [pc, #212]	; (8002638 <Set_logInfo2+0x270>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	b2d0      	uxtb	r0, r2
 8002568:	4a33      	ldr	r2, [pc, #204]	; (8002638 <Set_logInfo2+0x270>)
 800256a:	460b      	mov	r3, r1
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	1a5b      	subs	r3, r3, r1
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	3309      	adds	r3, #9
 8002576:	4602      	mov	r2, r0
 8002578:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Seconds = time.sec;
 800257a:	89ba      	ldrh	r2, [r7, #12]
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <Set_logInfo2+0x270>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	b2d0      	uxtb	r0, r2
 8002584:	4a2c      	ldr	r2, [pc, #176]	; (8002638 <Set_logInfo2+0x270>)
 8002586:	460b      	mov	r3, r1
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	1a5b      	subs	r3, r3, r1
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	330a      	adds	r3, #10
 8002592:	4602      	mov	r2, r0
 8002594:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].msec = time.msec;
 8002596:	4b28      	ldr	r3, [pc, #160]	; (8002638 <Set_logInfo2+0x270>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	8978      	ldrh	r0, [r7, #10]
 800259e:	4a26      	ldr	r2, [pc, #152]	; (8002638 <Set_logInfo2+0x270>)
 80025a0:	460b      	mov	r3, r1
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a5b      	subs	r3, r3, r1
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	330c      	adds	r3, #12
 80025ac:	4602      	mov	r2, r0
 80025ae:	801a      	strh	r2, [r3, #0]
		log.rec[log.wptr].usec = time.usec;
 80025b0:	893a      	ldrh	r2, [r7, #8]
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <Set_logInfo2+0x270>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	b2d0      	uxtb	r0, r2
 80025ba:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <Set_logInfo2+0x270>)
 80025bc:	460b      	mov	r3, r1
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a5b      	subs	r3, r3, r1
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	330b      	adds	r3, #11
 80025c8:	4602      	mov	r2, r0
 80025ca:	701a      	strb	r2, [r3, #0]


		log.num ++;
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <Set_logInfo2+0x270>)
 80025ce:	889b      	ldrh	r3, [r3, #4]
 80025d0:	3301      	adds	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <Set_logInfo2+0x270>)
 80025d6:	809a      	strh	r2, [r3, #4]
		if( log.num > LOG_RECODE_MAX ){
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <Set_logInfo2+0x270>)
 80025da:	889b      	ldrh	r3, [r3, #4]
 80025dc:	2b64      	cmp	r3, #100	; 0x64
 80025de:	d902      	bls.n	80025e6 <Set_logInfo2+0x21e>
			log.num = LOG_RECODE_MAX;
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <Set_logInfo2+0x270>)
 80025e2:	2264      	movs	r2, #100	; 0x64
 80025e4:	809a      	strh	r2, [r3, #4]
		}

		log.wptr ++;
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <Set_logInfo2+0x270>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <Set_logInfo2+0x270>)
 80025f0:	801a      	strh	r2, [r3, #0]
		if( log.wptr > LOG_RECODE_MAX ){
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <Set_logInfo2+0x270>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d902      	bls.n	8002600 <Set_logInfo2+0x238>
			log.wptr = 0;
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <Set_logInfo2+0x270>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	801a      	strh	r2, [r3, #0]
		}

		if( log.wptr == log.rptr ){
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <Set_logInfo2+0x270>)
 8002602:	881a      	ldrh	r2, [r3, #0]
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <Set_logInfo2+0x270>)
 8002606:	885b      	ldrh	r3, [r3, #2]
 8002608:	429a      	cmp	r2, r3
 800260a:	d10c      	bne.n	8002626 <Set_logInfo2+0x25e>
			log.rptr ++;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <Set_logInfo2+0x270>)
 800260e:	885b      	ldrh	r3, [r3, #2]
 8002610:	3301      	adds	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <Set_logInfo2+0x270>)
 8002616:	805a      	strh	r2, [r3, #2]
			if( log.rptr > LOG_RECODE_MAX ){
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <Set_logInfo2+0x270>)
 800261a:	885b      	ldrh	r3, [r3, #2]
 800261c:	2b64      	cmp	r3, #100	; 0x64
 800261e:	d902      	bls.n	8002626 <Set_logInfo2+0x25e>
				log.rptr = 0;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <Set_logInfo2+0x270>)
 8002622:	2200      	movs	r2, #0
 8002624:	805a      	strh	r2, [r3, #2]
			}
		}
	}
	//SKprintf("_logInfo2() 0006 temp= %p\r\n",temp);
//	vPortFree(temp);
}
 8002626:	bf00      	nop
 8002628:	3738      	adds	r7, #56	; 0x38
 800262a:	46bd      	mov	sp, r7
 800262c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002630:	b004      	add	sp, #16
 8002632:	4770      	bx	lr
 8002634:	20001bb4 	.word	0x20001bb4
 8002638:	200005cc 	.word	0x200005cc

0800263c <LogInfo_display>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_display(void)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
	uint16_t	i;
	uint16_t	rptr = log.rptr;
 8002642:	4b38      	ldr	r3, [pc, #224]	; (8002724 <LogInfo_display+0xe8>)
 8002644:	885b      	ldrh	r3, [r3, #2]
 8002646:	80bb      	strh	r3, [r7, #4]

	SKprintf("LogInfo_display()\r\n");
 8002648:	4837      	ldr	r0, [pc, #220]	; (8002728 <LogInfo_display+0xec>)
 800264a:	f001 fdf3 	bl	8004234 <SKprintf>
	if( log.num != 0 ){
 800264e:	4b35      	ldr	r3, [pc, #212]	; (8002724 <LogInfo_display+0xe8>)
 8002650:	889b      	ldrh	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d05d      	beq.n	8002712 <LogInfo_display+0xd6>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8002656:	2300      	movs	r3, #0
 8002658:	80fb      	strh	r3, [r7, #6]
 800265a:	e056      	b.n	800270a <LogInfo_display+0xce>
			SKprintf("%02d:%02d:%02d.", log.rec[rptr].Hours, log.rec[rptr].Minutes, log.rec[rptr].Seconds);
 800265c:	88ba      	ldrh	r2, [r7, #4]
 800265e:	4931      	ldr	r1, [pc, #196]	; (8002724 <LogInfo_display+0xe8>)
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	3308      	adds	r3, #8
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	88ba      	ldrh	r2, [r7, #4]
 8002672:	492c      	ldr	r1, [pc, #176]	; (8002724 <LogInfo_display+0xe8>)
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	3309      	adds	r3, #9
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461c      	mov	r4, r3
 8002684:	88ba      	ldrh	r2, [r7, #4]
 8002686:	4927      	ldr	r1, [pc, #156]	; (8002724 <LogInfo_display+0xe8>)
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	330a      	adds	r3, #10
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4622      	mov	r2, r4
 8002698:	4601      	mov	r1, r0
 800269a:	4824      	ldr	r0, [pc, #144]	; (800272c <LogInfo_display+0xf0>)
 800269c:	f001 fdca 	bl	8004234 <SKprintf>

			SKprintf("%03d %02d0 ", log.rec[rptr].msec, log.rec[rptr].usec);
 80026a0:	88ba      	ldrh	r2, [r7, #4]
 80026a2:	4920      	ldr	r1, [pc, #128]	; (8002724 <LogInfo_display+0xe8>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	330c      	adds	r3, #12
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	88ba      	ldrh	r2, [r7, #4]
 80026b6:	491b      	ldr	r1, [pc, #108]	; (8002724 <LogInfo_display+0xe8>)
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	330b      	adds	r3, #11
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	4601      	mov	r1, r0
 80026ca:	4819      	ldr	r0, [pc, #100]	; (8002730 <LogInfo_display+0xf4>)
 80026cc:	f001 fdb2 	bl	8004234 <SKprintf>

			SKprintf("%s\r\n", &log.rec[rptr].string[0]);
 80026d0:	88ba      	ldrh	r2, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	3308      	adds	r3, #8
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <LogInfo_display+0xe8>)
 80026de:	4413      	add	r3, r2
 80026e0:	3306      	adds	r3, #6
 80026e2:	4619      	mov	r1, r3
 80026e4:	4813      	ldr	r0, [pc, #76]	; (8002734 <LogInfo_display+0xf8>)
 80026e6:	f001 fda5 	bl	8004234 <SKprintf>

			rptr ++;
 80026ea:	88bb      	ldrh	r3, [r7, #4]
 80026ec:	3301      	adds	r3, #1
 80026ee:	80bb      	strh	r3, [r7, #4]
			if( rptr > LOG_RECODE_MAX ){
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <LogInfo_display+0xbe>
				rptr = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	80bb      	strh	r3, [r7, #4]
			}
			if( log.wptr == rptr ){
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <LogInfo_display+0xe8>)
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	88ba      	ldrh	r2, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	d00a      	beq.n	800271a <LogInfo_display+0xde>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	3301      	adds	r3, #1
 8002708:	80fb      	strh	r3, [r7, #6]
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	2b63      	cmp	r3, #99	; 0x63
 800270e:	d9a5      	bls.n	800265c <LogInfo_display+0x20>
		}
	}
	else{
		SKprintf("LOG NONE\r\n");
	}
}
 8002710:	e004      	b.n	800271c <LogInfo_display+0xe0>
		SKprintf("LOG NONE\r\n");
 8002712:	4809      	ldr	r0, [pc, #36]	; (8002738 <LogInfo_display+0xfc>)
 8002714:	f001 fd8e 	bl	8004234 <SKprintf>
}
 8002718:	e000      	b.n	800271c <LogInfo_display+0xe0>
				break;
 800271a:	bf00      	nop
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}
 8002724:	200005cc 	.word	0x200005cc
 8002728:	08018540 	.word	0x08018540
 800272c:	08018554 	.word	0x08018554
 8002730:	08018564 	.word	0x08018564
 8002734:	08018570 	.word	0x08018570
 8002738:	08018578 	.word	0x08018578

0800273c <LogdisplayISR>:
//=============================================================================
//
//
//=============================================================================
void LogdisplayISR(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
	uint16_t	i,j;
	uint16_t	rptr = log.rptr;
 8002742:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <LogdisplayISR+0xc4>)
 8002744:	885b      	ldrh	r3, [r3, #2]
 8002746:	807b      	strh	r3, [r7, #2]



	if( log.num != 0 ){
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <LogdisplayISR+0xc4>)
 800274a:	889b      	ldrh	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d052      	beq.n	80027f6 <LogdisplayISR+0xba>
		HAL_UART_Transmit(Get_huart(SK_UART2_DEBUG), "\r\n", 3, HAL_MAX_DELAY);
 8002750:	2001      	movs	r0, #1
 8002752:	f001 fc77 	bl	8004044 <Get_huart>
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	2203      	movs	r2, #3
 800275c:	4929      	ldr	r1, [pc, #164]	; (8002804 <LogdisplayISR+0xc8>)
 800275e:	f00e f946 	bl	80109ee <HAL_UART_Transmit>

		for(i=0; i<LOG_RECODE_MAX; i++){
 8002762:	2300      	movs	r3, #0
 8002764:	80fb      	strh	r3, [r7, #6]
 8002766:	e041      	b.n	80027ec <LogdisplayISR+0xb0>

			for(j=0; j<PRiNTF_BUFFMAX; j++ ){
 8002768:	2300      	movs	r3, #0
 800276a:	80bb      	strh	r3, [r7, #4]
 800276c:	e00f      	b.n	800278e <LogdisplayISR+0x52>
				if( log.rec[rptr].string[j] == '\0'){
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	88b9      	ldrh	r1, [r7, #4]
 8002772:	4823      	ldr	r0, [pc, #140]	; (8002800 <LogdisplayISR+0xc4>)
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4403      	add	r3, r0
 800277e:	440b      	add	r3, r1
 8002780:	330e      	adds	r3, #14
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <LogdisplayISR+0x5a>
			for(j=0; j<PRiNTF_BUFFMAX; j++ ){
 8002788:	88bb      	ldrh	r3, [r7, #4]
 800278a:	3301      	adds	r3, #1
 800278c:	80bb      	strh	r3, [r7, #4]
 800278e:	88bb      	ldrh	r3, [r7, #4]
 8002790:	2b31      	cmp	r3, #49	; 0x31
 8002792:	d9ec      	bls.n	800276e <LogdisplayISR+0x32>
 8002794:	e000      	b.n	8002798 <LogdisplayISR+0x5c>
					break;
 8002796:	bf00      	nop
				}
			}
			//SKprintf(" %s\r\n", buf);
			//SKprintf("%s\r\n", &log.rec[rptr].string[0]);

			HAL_UART_Transmit(Get_huart(SK_UART2_DEBUG), &log.rec[rptr].string[0], j, HAL_MAX_DELAY);
 8002798:	2001      	movs	r0, #1
 800279a:	f001 fc53 	bl	8004044 <Get_huart>
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	3308      	adds	r3, #8
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <LogdisplayISR+0xc4>)
 80027ac:	4413      	add	r3, r2
 80027ae:	1d99      	adds	r1, r3, #6
 80027b0:	88ba      	ldrh	r2, [r7, #4]
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	f00e f91a 	bl	80109ee <HAL_UART_Transmit>
			HAL_UART_Transmit(Get_huart(SK_UART2_DEBUG), "\r\n", 3, HAL_MAX_DELAY);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f001 fc42 	bl	8004044 <Get_huart>
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	2203      	movs	r2, #3
 80027c6:	490f      	ldr	r1, [pc, #60]	; (8002804 <LogdisplayISR+0xc8>)
 80027c8:	f00e f911 	bl	80109ee <HAL_UART_Transmit>

			rptr ++;
 80027cc:	887b      	ldrh	r3, [r7, #2]
 80027ce:	3301      	adds	r3, #1
 80027d0:	807b      	strh	r3, [r7, #2]
			if( rptr > LOG_RECODE_MAX ){
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d901      	bls.n	80027dc <LogdisplayISR+0xa0>
				rptr = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	807b      	strh	r3, [r7, #2]
			}

			if( log.wptr == rptr ){
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <LogdisplayISR+0xc4>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	887a      	ldrh	r2, [r7, #2]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d006      	beq.n	80027f4 <LogdisplayISR+0xb8>
		for(i=0; i<LOG_RECODE_MAX; i++){
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	3301      	adds	r3, #1
 80027ea:	80fb      	strh	r3, [r7, #6]
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	2b63      	cmp	r3, #99	; 0x63
 80027f0:	d9ba      	bls.n	8002768 <LogdisplayISR+0x2c>
				break;
			}
		}
	}

}
 80027f2:	e000      	b.n	80027f6 <LogdisplayISR+0xba>
				break;
 80027f4:	bf00      	nop
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200005cc 	.word	0x200005cc
 8002804:	08018584 	.word	0x08018584

08002808 <LogInfo_clear>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_clear(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

	log.rptr = 0;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <LogInfo_clear+0x20>)
 800280e:	2200      	movs	r2, #0
 8002810:	805a      	strh	r2, [r3, #2]
	log.wptr = 0;
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <LogInfo_clear+0x20>)
 8002814:	2200      	movs	r2, #0
 8002816:	801a      	strh	r2, [r3, #0]
	log.num = 0;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <LogInfo_clear+0x20>)
 800281a:	2200      	movs	r2, #0
 800281c:	809a      	strh	r2, [r3, #4]

	SKprintf("LOG CLEAR \r\n");
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <LogInfo_clear+0x24>)
 8002820:	f001 fd08 	bl	8004234 <SKprintf>
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200005cc 	.word	0x200005cc
 800282c:	08018588 	.word	0x08018588

08002830 <GetMessageQue>:

//==============================================================================
//
//==============================================================================
osMessageQueueId_t GetMessageQue(SK_TASK task)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
	osMessageQueueId_t 	handle;

	switch(task){
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d00e      	beq.n	800285e <GetMessageQue+0x2e>
 8002840:	2b02      	cmp	r3, #2
 8002842:	dc10      	bgt.n	8002866 <GetMessageQue+0x36>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <GetMessageQue+0x1e>
 8002848:	2b01      	cmp	r3, #1
 800284a:	d004      	beq.n	8002856 <GetMessageQue+0x26>
 800284c:	e00b      	b.n	8002866 <GetMessageQue+0x36>
	case SK_TASK_main:
		handle = myQueue01Handle;
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <GetMessageQue+0x44>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]
		break;
 8002854:	e007      	b.n	8002866 <GetMessageQue+0x36>
	case SK_TASK_sub1:
		handle = myQueue02Handle;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <GetMessageQue+0x48>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]
		break;
 800285c:	e003      	b.n	8002866 <GetMessageQue+0x36>
	case SK_TASK_sub2:
		handle = myQueue03Handle;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <GetMessageQue+0x4c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
		break;
 8002864:	bf00      	nop
	}

	return handle;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	20002394 	.word	0x20002394
 8002878:	20002398 	.word	0x20002398
 800287c:	2000239c 	.word	0x2000239c

08002880 <task_chk_init>:

//==============================================================================
//
//==============================================================================
void task_chk_init(void)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
	uint32_t 			*dtp;
	int		i;
	int		j;


	SKprintf("task_chk_init()\r\n");
 8002886:	4864      	ldr	r0, [pc, #400]	; (8002a18 <task_chk_init+0x198>)
 8002888:	f001 fcd4 	bl	8004234 <SKprintf>

	for( i=0; i < SK_TASK_MAX; i++ ){
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e0b8      	b.n	8002a04 <task_chk_init+0x184>
		switch(i){
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d013      	beq.n	80028c0 <task_chk_init+0x40>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b02      	cmp	r3, #2
 800289c:	dc15      	bgt.n	80028ca <task_chk_init+0x4a>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <task_chk_init+0x2c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d005      	beq.n	80028b6 <task_chk_init+0x36>
 80028aa:	e00e      	b.n	80028ca <task_chk_init+0x4a>
		case SK_TASK_main:
			dtp = &Task_mainHandle;
 80028ac:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <task_chk_init+0x19c>)
 80028ae:	613b      	str	r3, [r7, #16]
			attr = &Task_main_attributes;
 80028b0:	4b5b      	ldr	r3, [pc, #364]	; (8002a20 <task_chk_init+0x1a0>)
 80028b2:	617b      	str	r3, [r7, #20]
			break;
 80028b4:	e00d      	b.n	80028d2 <task_chk_init+0x52>
		case SK_TASK_sub1:
			dtp = &Task_sub1Handle;
 80028b6:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <task_chk_init+0x1a4>)
 80028b8:	613b      	str	r3, [r7, #16]
			attr = &Task_sub1_attributes;
 80028ba:	4b5b      	ldr	r3, [pc, #364]	; (8002a28 <task_chk_init+0x1a8>)
 80028bc:	617b      	str	r3, [r7, #20]
			break;
 80028be:	e008      	b.n	80028d2 <task_chk_init+0x52>
		case SK_TASK_sub2:
			dtp = &Task_sub2Handle;
 80028c0:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <task_chk_init+0x1ac>)
 80028c2:	613b      	str	r3, [r7, #16]
			attr = &Task_sub2_attributes;
 80028c4:	4b5a      	ldr	r3, [pc, #360]	; (8002a30 <task_chk_init+0x1b0>)
 80028c6:	617b      	str	r3, [r7, #20]
			break;
 80028c8:	e003      	b.n	80028d2 <task_chk_init+0x52>
		default:
			SKprintf("Error taskid\r\n");
 80028ca:	485a      	ldr	r0, [pc, #360]	; (8002a34 <task_chk_init+0x1b4>)
 80028cc:	f001 fcb2 	bl	8004234 <SKprintf>
			break;
 80028d0:	bf00      	nop
		}
		hTask = (TaskHandle_t *)*dtp;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	607b      	str	r3, [r7, #4]

		for( j=0; j < configMAX_TASK_NAME_LEN; j++ ){
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	e012      	b.n	8002904 <task_chk_init+0x84>
			task_chk_table[i].name[j] = hTask->pcTaskName[j];
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4413      	add	r3, r2
 80028e4:	3334      	adds	r3, #52	; 0x34
 80028e6:	7818      	ldrb	r0, [r3, #0]
 80028e8:	4953      	ldr	r1, [pc, #332]	; (8002a38 <task_chk_init+0x1b8>)
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	18ca      	adds	r2, r1, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4413      	add	r3, r2
 80028fa:	4602      	mov	r2, r0
 80028fc:	701a      	strb	r2, [r3, #0]
		for( j=0; j < configMAX_TASK_NAME_LEN; j++ ){
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3301      	adds	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	dde9      	ble.n	80028de <task_chk_init+0x5e>
		}
		task_chk_table[i].name[j-1] = '\0';
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1e59      	subs	r1, r3, #1
 800290e:	484a      	ldr	r0, [pc, #296]	; (8002a38 <task_chk_init+0x1b8>)
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4403      	add	r3, r0
 800291c:	440b      	add	r3, r1
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]

		task_chk_table[i].chk_stack = hTask->pxStack;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002926:	4844      	ldr	r0, [pc, #272]	; (8002a38 <task_chk_init+0x1b8>)
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4403      	add	r3, r0
 8002934:	3310      	adds	r3, #16
 8002936:	6019      	str	r1, [r3, #0]
		task_chk_table[i].size = attr->stack_size;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	b298      	uxth	r0, r3
 800293e:	493e      	ldr	r1, [pc, #248]	; (8002a38 <task_chk_init+0x1b8>)
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	3314      	adds	r3, #20
 800294e:	4602      	mov	r2, r0
 8002950:	801a      	strh	r2, [r3, #0]
		task_chk_table[i].used = 0;
 8002952:	4939      	ldr	r1, [pc, #228]	; (8002a38 <task_chk_init+0x1b8>)
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3316      	adds	r3, #22
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]

		SKprintf(" %s\r\n", &task_chk_table[i].name[0]);
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <task_chk_init+0x1b8>)
 8002972:	4413      	add	r3, r2
 8002974:	4619      	mov	r1, r3
 8002976:	4831      	ldr	r0, [pc, #196]	; (8002a3c <task_chk_init+0x1bc>)
 8002978:	f001 fc5c 	bl	8004234 <SKprintf>
		SKprintf("  Check Start Address = %p\r\n", task_chk_table[i].chk_stack);
 800297c:	492e      	ldr	r1, [pc, #184]	; (8002a38 <task_chk_init+0x1b8>)
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	3310      	adds	r3, #16
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	482b      	ldr	r0, [pc, #172]	; (8002a40 <task_chk_init+0x1c0>)
 8002992:	f001 fc4f 	bl	8004234 <SKprintf>
		SKprintf("  Size          = %d\r\n", task_chk_table[i].size);
 8002996:	4928      	ldr	r1, [pc, #160]	; (8002a38 <task_chk_init+0x1b8>)
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	3314      	adds	r3, #20
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	4826      	ldr	r0, [pc, #152]	; (8002a44 <task_chk_init+0x1c4>)
 80029ac:	f001 fc42 	bl	8004234 <SKprintf>
		SKprintf("  Used Size     = %d(%d%%)\r\n\r\n", task_chk_table[i].used, 100*task_chk_table[i].used/task_chk_table[i].size);
 80029b0:	4921      	ldr	r1, [pc, #132]	; (8002a38 <task_chk_init+0x1b8>)
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	3316      	adds	r3, #22
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	461c      	mov	r4, r3
 80029c4:	491c      	ldr	r1, [pc, #112]	; (8002a38 <task_chk_init+0x1b8>)
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	3316      	adds	r3, #22
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	2364      	movs	r3, #100	; 0x64
 80029da:	fb03 f102 	mul.w	r1, r3, r2
 80029de:	4816      	ldr	r0, [pc, #88]	; (8002a38 <task_chk_init+0x1b8>)
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4403      	add	r3, r0
 80029ec:	3314      	adds	r3, #20
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	fb91 f3f3 	sdiv	r3, r1, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	4621      	mov	r1, r4
 80029f8:	4813      	ldr	r0, [pc, #76]	; (8002a48 <task_chk_init+0x1c8>)
 80029fa:	f001 fc1b 	bl	8004234 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3301      	adds	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	f77f af43 	ble.w	8002892 <task_chk_init+0x12>

	}
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd90      	pop	{r4, r7, pc}
 8002a16:	bf00      	nop
 8002a18:	08018598 	.word	0x08018598
 8002a1c:	20002388 	.word	0x20002388
 8002a20:	0801a3e8 	.word	0x0801a3e8
 8002a24:	2000238c 	.word	0x2000238c
 8002a28:	0801a40c 	.word	0x0801a40c
 8002a2c:	20002390 	.word	0x20002390
 8002a30:	0801a430 	.word	0x0801a430
 8002a34:	080185ac 	.word	0x080185ac
 8002a38:	20001c34 	.word	0x20001c34
 8002a3c:	080185bc 	.word	0x080185bc
 8002a40:	080185c4 	.word	0x080185c4
 8002a44:	080185e4 	.word	0x080185e4
 8002a48:	080185fc 	.word	0x080185fc

08002a4c <task_stack_chk>:

//==============================================================================
//
//==============================================================================
void task_stack_chk(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
#ifdef ___TASK_CHK_DISPLAY
	SKprintf_uart1("\r\ntask_stack_chk()\r\n");
	SKprintf("\r\ntask_stack_chk()\r\n");
#endif	// ___TASK_CHK_DISPLAY

	for( i=0; i < SK_TASK_MAX; i++ ){
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	e059      	b.n	8002b0c <task_stack_chk+0xc0>

		for( j= 0; j < task_chk_table[i].size; j++){
 8002a58:	2300      	movs	r3, #0
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	e010      	b.n	8002a80 <task_stack_chk+0x34>
			if(task_chk_table[i].chk_stack[j] != 0xa5){
 8002a5e:	492f      	ldr	r1, [pc, #188]	; (8002b1c <task_stack_chk+0xd0>)
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3310      	adds	r3, #16
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2ba5      	cmp	r3, #165	; 0xa5
 8002a78:	d110      	bne.n	8002a9c <task_stack_chk+0x50>
		for( j= 0; j < task_chk_table[i].size; j++){
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4926      	ldr	r1, [pc, #152]	; (8002b1c <task_stack_chk+0xd0>)
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3314      	adds	r3, #20
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4293      	cmp	r3, r2
 8002a98:	dbe1      	blt.n	8002a5e <task_stack_chk+0x12>
 8002a9a:	e000      	b.n	8002a9e <task_stack_chk+0x52>
				break;
 8002a9c:	bf00      	nop
			}
		}
		task_chk_table[i].used = task_chk_table[i].size - j;
 8002a9e:	491f      	ldr	r1, [pc, #124]	; (8002b1c <task_stack_chk+0xd0>)
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	3314      	adds	r3, #20
 8002aae:	881a      	ldrh	r2, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	b298      	uxth	r0, r3
 8002ab8:	4918      	ldr	r1, [pc, #96]	; (8002b1c <task_stack_chk+0xd0>)
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3316      	adds	r3, #22
 8002ac8:	4602      	mov	r2, r0
 8002aca:	801a      	strh	r2, [r3, #0]

#ifdef ___TASK_CHK_DISPLAY
		SKprintf(" %s:Used Size= %d(%d%%)\r\n", &task_chk_table[i].name[0], task_chk_table[i].used, (100*task_chk_table[i].used/task_chk_table[i].size));
#endif	// ___TASK_CHK_DISPLAY

		if( j < (task_chk_table[i].size/10) ){
 8002acc:	4913      	ldr	r1, [pc, #76]	; (8002b1c <task_stack_chk+0xd0>)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	3314      	adds	r3, #20
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <task_stack_chk+0xd4>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	08db      	lsrs	r3, r3, #3
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	4293      	cmp	r3, r2
 8002aee:	da0a      	bge.n	8002b06 <task_stack_chk+0xba>
			SKprintf("WARNING:STACK FULL  %s\r\n", &task_chk_table[i].name[0]);
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <task_stack_chk+0xd0>)
 8002afc:	4413      	add	r3, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	4808      	ldr	r0, [pc, #32]	; (8002b24 <task_stack_chk+0xd8>)
 8002b02:	f001 fb97 	bl	8004234 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	dda2      	ble.n	8002a58 <task_stack_chk+0xc>
		}

	}
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20001c34 	.word	0x20001c34
 8002b20:	cccccccd 	.word	0xcccccccd
 8002b24:	0801861c 	.word	0x0801861c

08002b28 <task_stack_display>:

void task_stack_display(void)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
	int		i;

	SKprintf("\r\nStack Info\r\n");
 8002b2e:	482e      	ldr	r0, [pc, #184]	; (8002be8 <task_stack_display+0xc0>)
 8002b30:	f001 fb80 	bl	8004234 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	e04e      	b.n	8002bd8 <task_stack_display+0xb0>
//		SKprintf(" %s:Used Size= %d(%d%%)\r\n", &task_chk_table[i].name[0], task_chk_table[i].used, (100*task_chk_table[i].used/task_chk_table[i].size));
		SKprintf(" %s\r\n", &task_chk_table[i].name[0]);
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4a29      	ldr	r2, [pc, #164]	; (8002bec <task_stack_display+0xc4>)
 8002b46:	4413      	add	r3, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4829      	ldr	r0, [pc, #164]	; (8002bf0 <task_stack_display+0xc8>)
 8002b4c:	f001 fb72 	bl	8004234 <SKprintf>
		SKprintf("  Check Start Address = %p\r\n", task_chk_table[i].chk_stack);
 8002b50:	4926      	ldr	r1, [pc, #152]	; (8002bec <task_stack_display+0xc4>)
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3310      	adds	r3, #16
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	4823      	ldr	r0, [pc, #140]	; (8002bf4 <task_stack_display+0xcc>)
 8002b66:	f001 fb65 	bl	8004234 <SKprintf>
		SKprintf("  Size          = %d\r\n", task_chk_table[i].size);
 8002b6a:	4920      	ldr	r1, [pc, #128]	; (8002bec <task_stack_display+0xc4>)
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	3314      	adds	r3, #20
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	481e      	ldr	r0, [pc, #120]	; (8002bf8 <task_stack_display+0xd0>)
 8002b80:	f001 fb58 	bl	8004234 <SKprintf>
		SKprintf("  Used Size     = %d(%d%%)\r\n\r\n", task_chk_table[i].used, 100*task_chk_table[i].used/task_chk_table[i].size);
 8002b84:	4919      	ldr	r1, [pc, #100]	; (8002bec <task_stack_display+0xc4>)
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3316      	adds	r3, #22
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	461c      	mov	r4, r3
 8002b98:	4914      	ldr	r1, [pc, #80]	; (8002bec <task_stack_display+0xc4>)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3316      	adds	r3, #22
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	2364      	movs	r3, #100	; 0x64
 8002bae:	fb03 f102 	mul.w	r1, r3, r2
 8002bb2:	480e      	ldr	r0, [pc, #56]	; (8002bec <task_stack_display+0xc4>)
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4403      	add	r3, r0
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	fb91 f3f3 	sdiv	r3, r1, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4621      	mov	r1, r4
 8002bcc:	480b      	ldr	r0, [pc, #44]	; (8002bfc <task_stack_display+0xd4>)
 8002bce:	f001 fb31 	bl	8004234 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	ddad      	ble.n	8002b3a <task_stack_display+0x12>
	}

}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	08018638 	.word	0x08018638
 8002bec:	20001c34 	.word	0x20001c34
 8002bf0:	080185bc 	.word	0x080185bc
 8002bf4:	080185c4 	.word	0x080185c4
 8002bf8:	080185e4 	.word	0x080185e4
 8002bfc:	080185fc 	.word	0x080185fc

08002c00 <Disp_task_info>:

//==============================================================================
//
//==============================================================================
void Disp_task_info(SK_TASK taskid)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
	SKtskTaskControlBlock *hTask;
	osThreadAttr_t		*attr;
	uint32_t 			*dtp;

	switch(taskid){
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d016      	beq.n	8002c3e <Disp_task_info+0x3e>
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	dc1c      	bgt.n	8002c4e <Disp_task_info+0x4e>
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <Disp_task_info+0x1e>
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d008      	beq.n	8002c2e <Disp_task_info+0x2e>
 8002c1c:	e017      	b.n	8002c4e <Disp_task_info+0x4e>
	case SK_TASK_main:
		dtp = &Task_mainHandle;
 8002c1e:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <Disp_task_info+0xf0>)
 8002c20:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	617b      	str	r3, [r7, #20]
		attr = &Task_main_attributes;
 8002c28:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <Disp_task_info+0xf4>)
 8002c2a:	613b      	str	r3, [r7, #16]
		break;
 8002c2c:	e013      	b.n	8002c56 <Disp_task_info+0x56>
	case SK_TASK_sub1:
		dtp = &Task_sub1Handle;
 8002c2e:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <Disp_task_info+0xf8>)
 8002c30:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	617b      	str	r3, [r7, #20]
		attr = &Task_sub1_attributes;
 8002c38:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <Disp_task_info+0xfc>)
 8002c3a:	613b      	str	r3, [r7, #16]
		break;
 8002c3c:	e00b      	b.n	8002c56 <Disp_task_info+0x56>
	case SK_TASK_sub2:
		dtp = &Task_sub2Handle;
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <Disp_task_info+0x100>)
 8002c40:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	617b      	str	r3, [r7, #20]
		attr = &Task_sub2_attributes;
 8002c48:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <Disp_task_info+0x104>)
 8002c4a:	613b      	str	r3, [r7, #16]
		break;
 8002c4c:	e003      	b.n	8002c56 <Disp_task_info+0x56>
	default:
		SKprintf("Error taskid\r\n");
 8002c4e:	482e      	ldr	r0, [pc, #184]	; (8002d08 <Disp_task_info+0x108>)
 8002c50:	f001 faf0 	bl	8004234 <SKprintf>
		break;
 8002c54:	bf00      	nop
	}

	SKprintf("<<< %s >>>\r\n" ,attr->name);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	482b      	ldr	r0, [pc, #172]	; (8002d0c <Disp_task_info+0x10c>)
 8002c5e:	f001 fae9 	bl	8004234 <SKprintf>
	SKprintf(" TCB Address           = %p\r\n" ,hTask);
 8002c62:	6979      	ldr	r1, [r7, #20]
 8002c64:	482a      	ldr	r0, [pc, #168]	; (8002d10 <Disp_task_info+0x110>)
 8002c66:	f001 fae5 	bl	8004234 <SKprintf>
	SKprintf(" Stack Botom Address   = 0x%lx\r\n", hTask->pxTopOfStack );
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4828      	ldr	r0, [pc, #160]	; (8002d14 <Disp_task_info+0x114>)
 8002c72:	f001 fadf 	bl	8004234 <SKprintf>
	SKprintf(" Stack top Address     = 0x%lx\r\n", hTask->pxStack );
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4826      	ldr	r0, [pc, #152]	; (8002d18 <Disp_task_info+0x118>)
 8002c7e:	f001 fad9 	bl	8004234 <SKprintf>
	SKprintf(" stack_size            = %lx\r\n" ,attr->stack_size);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	4619      	mov	r1, r3
 8002c88:	4824      	ldr	r0, [pc, #144]	; (8002d1c <Disp_task_info+0x11c>)
 8002c8a:	f001 fad3 	bl	8004234 <SKprintf>
	SKprintf(" uxTCBNumber           = %lx\r\n", hTask->uxTCBNumber );
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4619      	mov	r1, r3
 8002c94:	4822      	ldr	r0, [pc, #136]	; (8002d20 <Disp_task_info+0x120>)
 8002c96:	f001 facd 	bl	8004234 <SKprintf>
	SKprintf(" uxTaskNumber          = %lx\r\n", hTask->uxTaskNumber );
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4820      	ldr	r0, [pc, #128]	; (8002d24 <Disp_task_info+0x124>)
 8002ca2:	f001 fac7 	bl	8004234 <SKprintf>
	SKprintf(" uxBasePriority        = %lx\r\n", hTask->uxBasePriority );
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	4619      	mov	r1, r3
 8002cac:	481e      	ldr	r0, [pc, #120]	; (8002d28 <Disp_task_info+0x128>)
 8002cae:	f001 fac1 	bl	8004234 <SKprintf>
	SKprintf(" uxMutexesHeld         = %lx\r\n", hTask->uxMutexesHeld );
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	481c      	ldr	r0, [pc, #112]	; (8002d2c <Disp_task_info+0x12c>)
 8002cba:	f001 fabb 	bl	8004234 <SKprintf>
	SKprintf(" ulNotifiedValue       = %lx\r\n", hTask->ulNotifiedValue );
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	481a      	ldr	r0, [pc, #104]	; (8002d30 <Disp_task_info+0x130>)
 8002cc6:	f001 fab5 	bl	8004234 <SKprintf>
	SKprintf(" ucNotifyState         = %lx\r\n", hTask->ucNotifyState );
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4817      	ldr	r0, [pc, #92]	; (8002d34 <Disp_task_info+0x134>)
 8002cd6:	f001 faad 	bl	8004234 <SKprintf>
	SKprintf(" ucStaticallyAllocated = %lx\r\n", hTask->ucStaticallyAllocated );
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4815      	ldr	r0, [pc, #84]	; (8002d38 <Disp_task_info+0x138>)
 8002ce4:	f001 faa6 	bl	8004234 <SKprintf>
	SKprintf(" tz_module = %lx\r\n" ,attr->tz_module);
	SKprintf(" reserved = %lx\r\n" ,attr->reserved);
#endif	// ___NOP


}
 8002ce8:	bf00      	nop
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20002388 	.word	0x20002388
 8002cf4:	0801a3e8 	.word	0x0801a3e8
 8002cf8:	2000238c 	.word	0x2000238c
 8002cfc:	0801a40c 	.word	0x0801a40c
 8002d00:	20002390 	.word	0x20002390
 8002d04:	0801a430 	.word	0x0801a430
 8002d08:	080185ac 	.word	0x080185ac
 8002d0c:	08018648 	.word	0x08018648
 8002d10:	08018658 	.word	0x08018658
 8002d14:	08018678 	.word	0x08018678
 8002d18:	0801869c 	.word	0x0801869c
 8002d1c:	080186c0 	.word	0x080186c0
 8002d20:	080186e0 	.word	0x080186e0
 8002d24:	08018700 	.word	0x08018700
 8002d28:	08018720 	.word	0x08018720
 8002d2c:	08018740 	.word	0x08018740
 8002d30:	08018760 	.word	0x08018760
 8002d34:	08018780 	.word	0x08018780
 8002d38:	080187a0 	.word	0x080187a0

08002d3c <Get_task_stackptr>:

//==============================================================================
//
//==============================================================================
void Get_task_stackptr(SK_TASK taskid, STACK_INFO *ptr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
	SKtskTaskControlBlock *hTask;
	uint32_t 			*dtp;

	switch(taskid){
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d014      	beq.n	8002d78 <Get_task_stackptr+0x3c>
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	dc18      	bgt.n	8002d84 <Get_task_stackptr+0x48>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <Get_task_stackptr+0x20>
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d006      	beq.n	8002d68 <Get_task_stackptr+0x2c>
 8002d5a:	e013      	b.n	8002d84 <Get_task_stackptr+0x48>
	case SK_TASK_main:
		dtp = &Task_mainHandle;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <Get_task_stackptr+0x90>)
 8002d5e:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
		break;
 8002d66:	e011      	b.n	8002d8c <Get_task_stackptr+0x50>
	case SK_TASK_sub1:
		hTask = (TaskHandle_t)&Task_sub1Handle;
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <Get_task_stackptr+0x94>)
 8002d6a:	60fb      	str	r3, [r7, #12]
		dtp = &Task_sub1Handle;
 8002d6c:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <Get_task_stackptr+0x94>)
 8002d6e:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
		break;
 8002d76:	e009      	b.n	8002d8c <Get_task_stackptr+0x50>
	case SK_TASK_sub2:
		dtp = &Task_sub2Handle;
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <Get_task_stackptr+0x98>)
 8002d7a:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
		break;
 8002d82:	e003      	b.n	8002d8c <Get_task_stackptr+0x50>
	default:
		SKprintf("Error taskid\r\n");
 8002d84:	4814      	ldr	r0, [pc, #80]	; (8002dd8 <Get_task_stackptr+0x9c>)
 8002d86:	f001 fa55 	bl	8004234 <SKprintf>
		break;
 8002d8a:	bf00      	nop
	}

	SKprintf(" Stack top Address     = 0x%lx\r\n", hTask->pxStack );
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4619      	mov	r1, r3
 8002d92:	4812      	ldr	r0, [pc, #72]	; (8002ddc <Get_task_stackptr+0xa0>)
 8002d94:	f001 fa4e 	bl	8004234 <SKprintf>



	ptr->pxStack = (char *)hTask->pxStack;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
	ptr->pxTopOfStack = (char *)hTask->pxTopOfStack;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	601a      	str	r2, [r3, #0]
	ptr->size = (uint16_t)(128*4);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	811a      	strh	r2, [r3, #8]

	SKprintf("pxStack=%p,pxTopOfStack=%p,size=%d\r\n", ptr->pxStack,ptr->pxTopOfStack,ptr->size);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	891b      	ldrh	r3, [r3, #8]
 8002dbc:	4808      	ldr	r0, [pc, #32]	; (8002de0 <Get_task_stackptr+0xa4>)
 8002dbe:	f001 fa39 	bl	8004234 <SKprintf>
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20002388 	.word	0x20002388
 8002dd0:	2000238c 	.word	0x2000238c
 8002dd4:	20002390 	.word	0x20002390
 8002dd8:	080185ac 	.word	0x080185ac
 8002ddc:	0801869c 	.word	0x0801869c
 8002de0:	080187c0 	.word	0x080187c0

08002de4 <user_init>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
	RETURN_STATUS	status = RET_TRUE;
 8002dea:	2301      	movs	r3, #1
 8002dec:	71fb      	strb	r3, [r7, #7]

	//LED_Flush(0);
	SKprintf("Initialize all configured peripherals\r\n");
 8002dee:	481a      	ldr	r0, [pc, #104]	; (8002e58 <user_init+0x74>)
 8002df0:	f001 fa20 	bl	8004234 <SKprintf>
	SKprintf("******************\r\n");
 8002df4:	4819      	ldr	r0, [pc, #100]	; (8002e5c <user_init+0x78>)
 8002df6:	f001 fa1d 	bl	8004234 <SKprintf>
	SKprintf("*** UART START ***\r\n");
 8002dfa:	4819      	ldr	r0, [pc, #100]	; (8002e60 <user_init+0x7c>)
 8002dfc:	f001 fa1a 	bl	8004234 <SKprintf>
	SKprintf("******************\r\n");
 8002e00:	4816      	ldr	r0, [pc, #88]	; (8002e5c <user_init+0x78>)
 8002e02:	f001 fa17 	bl	8004234 <SKprintf>


	//-----------------------------------------------
	// Log Timer Counter
	//-----------------------------------------------
	timer.usec = 0;
 8002e06:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <user_init+0x80>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	835a      	strh	r2, [r3, #26]
	timer.msec = 0;
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <user_init+0x80>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	839a      	strh	r2, [r3, #28]
	timer.usec_max = 0;
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <user_init+0x80>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	83da      	strh	r2, [r3, #30]
	timer.msec_max = 0;
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <user_init+0x80>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	841a      	strh	r2, [r3, #32]
	timer.dt = 0;
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <user_init+0x80>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
	timer.dt_max = 0;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <user_init+0x80>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
	timer.dt_av = 0;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <user_init+0x80>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
	timer.start = 0;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <user_init+0x80>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	765a      	strb	r2, [r3, #25]
	timer.av_wcnt = 0;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <user_init+0x80>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	761a      	strb	r2, [r3, #24]

	//-----------------------------------------------
	// Log Info Init
	//-----------------------------------------------
	LogInfo_clear();
 8002e3c:	f7ff fce4 	bl	8002808 <LogInfo_clear>


	//-----------------------------------------------
	// 受信割込み準備
	//-----------------------------------------------
	uart_Data_init();
 8002e40:	f001 f960 	bl	8004104 <uart_Data_init>

	uart_Rcv_init(SK_UART1_RS485);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f001 f98b 	bl	8004160 <uart_Rcv_init>
	uart_Rcv_init(SK_UART2_DEBUG);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f001 f988 	bl	8004160 <uart_Rcv_init>

}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	080187e8 	.word	0x080187e8
 8002e5c:	08018810 	.word	0x08018810
 8002e60:	08018828 	.word	0x08018828
 8002e64:	2000059c 	.word	0x2000059c

08002e68 <rtc_display>:

//==============================================================================
//
//==============================================================================
void rtc_display(void)
{
 8002e68:	b5b0      	push	{r4, r5, r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	2200      	movs	r2, #0
 8002e72:	4619      	mov	r1, r3
 8002e74:	480f      	ldr	r0, [pc, #60]	; (8002eb4 <rtc_display+0x4c>)
 8002e76:	f00c fe23 	bl	800fac0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4619      	mov	r1, r3
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <rtc_display+0x4c>)
 8002e82:	f00c feff 	bl	800fc84 <HAL_RTC_GetDate>
	SKprintf("\r\n20%02d.%02d.%02d %02d:%02d:%02d\r\n", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	787b      	ldrb	r3, [r7, #1]
 8002e8c:	461c      	mov	r4, r3
 8002e8e:	78bb      	ldrb	r3, [r7, #2]
 8002e90:	461d      	mov	r5, r3
 8002e92:	793b      	ldrb	r3, [r7, #4]
 8002e94:	797a      	ldrb	r2, [r7, #5]
 8002e96:	79b9      	ldrb	r1, [r7, #6]
 8002e98:	9102      	str	r1, [sp, #8]
 8002e9a:	9201      	str	r2, [sp, #4]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	462b      	mov	r3, r5
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	4601      	mov	r1, r0
 8002ea4:	4804      	ldr	r0, [pc, #16]	; (8002eb8 <rtc_display+0x50>)
 8002ea6:	f001 f9c5 	bl	8004234 <SKprintf>
	//SKprintf("av=%d max=%d\r\n",timer.dt_av,timer.	dt_max);
	//SKprintf("dt_buf=%d, %d, %d\r\n", timer.dt_buf[0],timer.dt_buf[1],timer.dt_buf[2]);
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20002250 	.word	0x20002250
 8002eb8:	08018840 	.word	0x08018840

08002ebc <GetTimerEventID>:

//==============================================================================
//
//==============================================================================
uint8_t GetTimerEventID(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
	uint8_t				i;
	uint8_t				rtn;

	rtn = 0xff;
 8002ec2:	23ff      	movs	r3, #255	; 0xff
 8002ec4:	71bb      	strb	r3, [r7, #6]
	for(i=0; i<TIMER_EVENT_MAX; i++){
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	71fb      	strb	r3, [r7, #7]
 8002eca:	e01a      	b.n	8002f02 <GetTimerEventID+0x46>
		if( timer_event[i].flag == TIMER_NO_USED){
 8002ecc:	79fa      	ldrb	r2, [r7, #7]
 8002ece:	4912      	ldr	r1, [pc, #72]	; (8002f18 <GetTimerEventID+0x5c>)
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3302      	adds	r3, #2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10c      	bne.n	8002efc <GetTimerEventID+0x40>
			timer_event[i].flag = TIMER_USED;
 8002ee2:	79fa      	ldrb	r2, [r7, #7]
 8002ee4:	490c      	ldr	r1, [pc, #48]	; (8002f18 <GetTimerEventID+0x5c>)
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
			rtn = i;
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	71bb      	strb	r3, [r7, #6]
			break;
 8002efa:	e005      	b.n	8002f08 <GetTimerEventID+0x4c>
	for(i=0; i<TIMER_EVENT_MAX; i++){
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	3301      	adds	r3, #1
 8002f00:	71fb      	strb	r3, [r7, #7]
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d9e1      	bls.n	8002ecc <GetTimerEventID+0x10>
		}
	}

	return rtn;
 8002f08:	79bb      	ldrb	r3, [r7, #6]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20001c7c 	.word	0x20001c7c

08002f1c <ReleaceTimerEvent>:
//==============================================================================
//
//==============================================================================
void ReleaceTimerEvent(uint8_t timer_id)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
	MESSAGE_QUE_DATA 	*msg;
	Set_logInfo2("ReleaceTimerEvent(%d)",timer_id);
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4810      	ldr	r0, [pc, #64]	; (8002f6c <ReleaceTimerEvent+0x50>)
 8002f2c:	f7ff fa4c 	bl	80023c8 <Set_logInfo2>
	timer_event[timer_id].flag = TIMER_NO_USED;
 8002f30:	79fa      	ldrb	r2, [r7, #7]
 8002f32:	490f      	ldr	r1, [pc, #60]	; (8002f70 <ReleaceTimerEvent+0x54>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3302      	adds	r3, #2
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
	msg = timer_event[timer_id].message;
 8002f44:	79fa      	ldrb	r2, [r7, #7]
 8002f46:	490a      	ldr	r1, [pc, #40]	; (8002f70 <ReleaceTimerEvent+0x54>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3308      	adds	r3, #8
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]
	msg->maroc_ptr;
	vPortFree(msg->maroc_ptr);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f011 fcb7 	bl	80148d0 <vPortFree>

#ifdef	 __HEAP_DBUG
	Set_logInfo2("vPortFree=%x",msg->maroc_ptr);
	Set_logInfo2("HeapSize 010 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	08018864 	.word	0x08018864
 8002f70:	20001c7c 	.word	0x20001c7c

08002f74 <TimerEventCtrl>:

//==============================================================================
//
//==============================================================================
void TimerEventCtrl(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
	void 				*msgQueBuf;
	uint8_t				rcvbuff[sizeof(void *)];
	TIMER_EVENT_FORM	*tm_form;
	osStatus_t			os_status;

	msgQueBuf = (void *)rcvbuff;
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	613b      	str	r3, [r7, #16]

		//-------------------------------------------------------------------------
		//	タイマー
		//-------------------------------------------------------------------------
		for(i=0; i<TIMER_EVENT_MAX; i++){
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
 8002f82:	e056      	b.n	8003032 <TimerEventCtrl+0xbe>
			if( timer_event[i].flag == TIMER_ACTIVE){
 8002f84:	7dfa      	ldrb	r2, [r7, #23]
 8002f86:	4957      	ldr	r1, [pc, #348]	; (80030e4 <TimerEventCtrl+0x170>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	3302      	adds	r3, #2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d148      	bne.n	800302c <TimerEventCtrl+0xb8>
				if( timer_event[i].counter != 0 ){
 8002f9a:	7dfa      	ldrb	r2, [r7, #23]
 8002f9c:	4951      	ldr	r1, [pc, #324]	; (80030e4 <TimerEventCtrl+0x170>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d012      	beq.n	8002fd4 <TimerEventCtrl+0x60>
					timer_event[i].counter --;
 8002fae:	7dfa      	ldrb	r2, [r7, #23]
 8002fb0:	494c      	ldr	r1, [pc, #304]	; (80030e4 <TimerEventCtrl+0x170>)
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b298      	uxth	r0, r3
 8002fc2:	4948      	ldr	r1, [pc, #288]	; (80030e4 <TimerEventCtrl+0x170>)
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	4602      	mov	r2, r0
 8002fd0:	801a      	strh	r2, [r3, #0]
 8002fd2:	e02b      	b.n	800302c <TimerEventCtrl+0xb8>
				}
				else{
					os_status = osMessageQueuePut (timer_event[i].hmsg, (void *)timer_event[i].message, 0,0);
 8002fd4:	7dfa      	ldrb	r2, [r7, #23]
 8002fd6:	4943      	ldr	r1, [pc, #268]	; (80030e4 <TimerEventCtrl+0x170>)
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	7dfa      	ldrb	r2, [r7, #23]
 8002fe8:	493e      	ldr	r1, [pc, #248]	; (80030e4 <TimerEventCtrl+0x170>)
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	6819      	ldr	r1, [r3, #0]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f00e fed0 	bl	8011da0 <osMessageQueuePut>
 8003000:	60f8      	str	r0, [r7, #12]

			    	switch( os_status ){
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <TimerEventCtrl+0x9c>
					case osOK:
						Set_logInfo2("TimerEvent(). Send MsgQue OK");
 8003008:	4837      	ldr	r0, [pc, #220]	; (80030e8 <TimerEventCtrl+0x174>)
 800300a:	f7ff f9dd 	bl	80023c8 <Set_logInfo2>
						break;
 800300e:	e003      	b.n	8003018 <TimerEventCtrl+0xa4>
					default:
						Set_logInfo2("TimerEvent(). Send MsgQue ERROR");
 8003010:	4836      	ldr	r0, [pc, #216]	; (80030ec <TimerEventCtrl+0x178>)
 8003012:	f7ff f9d9 	bl	80023c8 <Set_logInfo2>
						break;
 8003016:	bf00      	nop
					}

			    	timer_event[i].flag = TIMER_NO_USED;
 8003018:	7dfa      	ldrb	r2, [r7, #23]
 800301a:	4932      	ldr	r1, [pc, #200]	; (80030e4 <TimerEventCtrl+0x170>)
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3302      	adds	r3, #2
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
		for(i=0; i<TIMER_EVENT_MAX; i++){
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	3301      	adds	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b09      	cmp	r3, #9
 8003036:	d9a5      	bls.n	8002f84 <TimerEventCtrl+0x10>
		//-------------------------------------------------------------------------
		//	メッセージ待ち
		//-------------------------------------------------------------------------
		//os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), msgQueBuf, 0, 0);
//		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub1), msgQueBuf, 0, osWaitForever);
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub1), msgQueBuf, 0, 10);
 8003038:	2001      	movs	r0, #1
 800303a:	f7ff fbf9 	bl	8002830 <GetMessageQue>
 800303e:	230a      	movs	r3, #10
 8003040:	2200      	movs	r2, #0
 8003042:	6939      	ldr	r1, [r7, #16]
 8003044:	f00e ff0c 	bl	8011e60 <osMessageQueueGet>
 8003048:	60f8      	str	r0, [r7, #12]
		tm_form = (TIMER_EVENT_FORM *)msgQueBuf;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	60bb      	str	r3, [r7, #8]
		tm_form = (TIMER_EVENT_FORM	*)tm_form->maroc_ptr;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60bb      	str	r3, [r7, #8]

		switch( os_status ){
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f113 0f02 	cmn.w	r3, #2
 800305a:	d03e      	beq.n	80030da <TimerEventCtrl+0x166>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d136      	bne.n	80030d0 <TimerEventCtrl+0x15c>
		case osOK:
			//SKprintf("TimerEventCtrl(2):os_status=OK(%d)\r\n",os_status);
			Set_logInfo2("TimerEvent(). Recive MsgQue OK");
 8003062:	4823      	ldr	r0, [pc, #140]	; (80030f0 <TimerEventCtrl+0x17c>)
 8003064:	f7ff f9b0 	bl	80023c8 <Set_logInfo2>

			i = tm_form->timer_id;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	7d1b      	ldrb	r3, [r3, #20]
 800306c:	75fb      	strb	r3, [r7, #23]

			timer_event[i].counter 	= tm_form->time;
 800306e:	7dfa      	ldrb	r2, [r7, #23]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	8998      	ldrh	r0, [r3, #12]
 8003074:	491b      	ldr	r1, [pc, #108]	; (80030e4 <TimerEventCtrl+0x170>)
 8003076:	4613      	mov	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	4602      	mov	r2, r0
 8003082:	801a      	strh	r2, [r3, #0]
			timer_event[i].flag 	= TIMER_ACTIVE;
 8003084:	7dfa      	ldrb	r2, [r7, #23]
 8003086:	4917      	ldr	r1, [pc, #92]	; (80030e4 <TimerEventCtrl+0x170>)
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3302      	adds	r3, #2
 8003094:	2202      	movs	r2, #2
 8003096:	701a      	strb	r2, [r3, #0]
			timer_event[i].hmsg 	= tm_form->hmsg;
 8003098:	7dfa      	ldrb	r2, [r7, #23]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	6899      	ldr	r1, [r3, #8]
 800309e:	4811      	ldr	r0, [pc, #68]	; (80030e4 <TimerEventCtrl+0x170>)
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4403      	add	r3, r0
 80030aa:	3304      	adds	r3, #4
 80030ac:	6019      	str	r1, [r3, #0]
			timer_event[i].message 	= tm_form->mail_form;
 80030ae:	7dfa      	ldrb	r2, [r7, #23]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6919      	ldr	r1, [r3, #16]
 80030b4:	480b      	ldr	r0, [pc, #44]	; (80030e4 <TimerEventCtrl+0x170>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4403      	add	r3, r0
 80030c0:	3308      	adds	r3, #8
 80030c2:	6019      	str	r1, [r3, #0]

			//SKprintf("tm_form=%p,.message=%p\r\n",tm_form,timer_event[i].message);

			vPortFree(tm_form->maroc_ptr);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f011 fc01 	bl	80148d0 <vPortFree>
#ifdef	 __HEAP_DBUG
			Set_logInfo2("vPortFree=%x",tm_form);
			Set_logInfo2("HeapSize 007 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

			break;
 80030ce:	e005      	b.n	80030dc <TimerEventCtrl+0x168>
		case osErrorTimeout:
			break;
		default:
			SKprintf("TimerEventCtrl(2):os_status=Error(%d)\r\n",os_status);
 80030d0:	68f9      	ldr	r1, [r7, #12]
 80030d2:	4808      	ldr	r0, [pc, #32]	; (80030f4 <TimerEventCtrl+0x180>)
 80030d4:	f001 f8ae 	bl	8004234 <SKprintf>
			break;
 80030d8:	e000      	b.n	80030dc <TimerEventCtrl+0x168>
			break;
 80030da:	bf00      	nop
		}
}
 80030dc:	bf00      	nop
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20001c7c 	.word	0x20001c7c
 80030e8:	0801887c 	.word	0x0801887c
 80030ec:	0801889c 	.word	0x0801889c
 80030f0:	080188bc 	.word	0x080188bc
 80030f4:	080188dc 	.word	0x080188dc

080030f8 <tasuk3_init>:

//==============================================================================
//
//==============================================================================
void  tasuk3_init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	SKprintf("tasuk3_init(void)\r\n");
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <tasuk3_init+0x10>)
 80030fe:	f001 f899 	bl	8004234 <SKprintf>
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	08018904 	.word	0x08018904

0800310c <Set_rcv_data>:

//==============================================================================
//
//==============================================================================
void Set_rcv_data(SK_UART sel)
{
 800310c:	b490      	push	{r4, r7}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
	uart[sel].Set_cnt++;
 8003116:	79fa      	ldrb	r2, [r7, #7]
 8003118:	4952      	ldr	r1, [pc, #328]	; (8003264 <Set_rcv_data+0x158>)
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	440b      	add	r3, r1
 8003124:	338c      	adds	r3, #140	; 0x8c
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	b298      	uxth	r0, r3
 800312c:	494d      	ldr	r1, [pc, #308]	; (8003264 <Set_rcv_data+0x158>)
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	440b      	add	r3, r1
 8003138:	338c      	adds	r3, #140	; 0x8c
 800313a:	4602      	mov	r2, r0
 800313c:	801a      	strh	r2, [r3, #0]

	while(uart[sel].Sem_rs485_rcv==1);
 800313e:	bf00      	nop
 8003140:	79fa      	ldrb	r2, [r7, #7]
 8003142:	4948      	ldr	r1, [pc, #288]	; (8003264 <Set_rcv_data+0x158>)
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	440b      	add	r3, r1
 800314e:	338a      	adds	r3, #138	; 0x8a
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d0f4      	beq.n	8003140 <Set_rcv_data+0x34>

	uart[sel].Sem_rs485_rcv= 1;
 8003156:	79fa      	ldrb	r2, [r7, #7]
 8003158:	4942      	ldr	r1, [pc, #264]	; (8003264 <Set_rcv_data+0x158>)
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	440b      	add	r3, r1
 8003164:	338a      	adds	r3, #138	; 0x8a
 8003166:	2201      	movs	r2, #1
 8003168:	801a      	strh	r2, [r3, #0]
	uart[sel].rcvnum ++;
 800316a:	79fa      	ldrb	r2, [r7, #7]
 800316c:	493d      	ldr	r1, [pc, #244]	; (8003264 <Set_rcv_data+0x158>)
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	440b      	add	r3, r1
 8003178:	3382      	adds	r3, #130	; 0x82
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	b298      	uxth	r0, r3
 8003180:	4938      	ldr	r1, [pc, #224]	; (8003264 <Set_rcv_data+0x158>)
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	440b      	add	r3, r1
 800318c:	3382      	adds	r3, #130	; 0x82
 800318e:	4602      	mov	r2, r0
 8003190:	801a      	strh	r2, [r3, #0]
	uart[sel].Sem_rs485_rcv= 0;
 8003192:	79fa      	ldrb	r2, [r7, #7]
 8003194:	4933      	ldr	r1, [pc, #204]	; (8003264 <Set_rcv_data+0x158>)
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	440b      	add	r3, r1
 80031a0:	338a      	adds	r3, #138	; 0x8a
 80031a2:	2200      	movs	r2, #0
 80031a4:	801a      	strh	r2, [r3, #0]

	uart[sel].rcvbuf[uart[sel].rcv_wpt] = uart[sel].rcv_dt[0];
 80031a6:	79f9      	ldrb	r1, [r7, #7]
 80031a8:	79fa      	ldrb	r2, [r7, #7]
 80031aa:	79f8      	ldrb	r0, [r7, #7]
 80031ac:	4c2d      	ldr	r4, [pc, #180]	; (8003264 <Set_rcv_data+0x158>)
 80031ae:	4603      	mov	r3, r0
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4403      	add	r3, r0
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	4423      	add	r3, r4
 80031b8:	3386      	adds	r3, #134	; 0x86
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	461c      	mov	r4, r3
 80031be:	4829      	ldr	r0, [pc, #164]	; (8003264 <Set_rcv_data+0x158>)
 80031c0:	460b      	mov	r3, r1
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	4403      	add	r3, r0
 80031ca:	7818      	ldrb	r0, [r3, #0]
 80031cc:	4925      	ldr	r1, [pc, #148]	; (8003264 <Set_rcv_data+0x158>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	440b      	add	r3, r1
 80031d8:	4423      	add	r3, r4
 80031da:	3302      	adds	r3, #2
 80031dc:	4602      	mov	r2, r0
 80031de:	701a      	strb	r2, [r3, #0]
//	uart[sel].rcvnum ++;
	uart[sel].totalnum ++;
 80031e0:	79fa      	ldrb	r2, [r7, #7]
 80031e2:	4920      	ldr	r1, [pc, #128]	; (8003264 <Set_rcv_data+0x158>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	440b      	add	r3, r1
 80031ee:	3384      	adds	r3, #132	; 0x84
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	b298      	uxth	r0, r3
 80031f6:	491b      	ldr	r1, [pc, #108]	; (8003264 <Set_rcv_data+0x158>)
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	440b      	add	r3, r1
 8003202:	3384      	adds	r3, #132	; 0x84
 8003204:	4602      	mov	r2, r0
 8003206:	801a      	strh	r2, [r3, #0]

	uart[sel].rcv_wpt ++ ;
 8003208:	79fa      	ldrb	r2, [r7, #7]
 800320a:	4916      	ldr	r1, [pc, #88]	; (8003264 <Set_rcv_data+0x158>)
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	440b      	add	r3, r1
 8003216:	3386      	adds	r3, #134	; 0x86
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	b298      	uxth	r0, r3
 800321e:	4911      	ldr	r1, [pc, #68]	; (8003264 <Set_rcv_data+0x158>)
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	440b      	add	r3, r1
 800322a:	3386      	adds	r3, #134	; 0x86
 800322c:	4602      	mov	r2, r0
 800322e:	801a      	strh	r2, [r3, #0]
    if( uart[sel].rcv_wpt > RCV_BUF_SIZE ){
 8003230:	79fa      	ldrb	r2, [r7, #7]
 8003232:	490c      	ldr	r1, [pc, #48]	; (8003264 <Set_rcv_data+0x158>)
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	440b      	add	r3, r1
 800323e:	3386      	adds	r3, #134	; 0x86
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	2b80      	cmp	r3, #128	; 0x80
 8003244:	d909      	bls.n	800325a <Set_rcv_data+0x14e>
    	uart[sel].rcv_wpt = 0;
 8003246:	79fa      	ldrb	r2, [r7, #7]
 8003248:	4906      	ldr	r1, [pc, #24]	; (8003264 <Set_rcv_data+0x158>)
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	440b      	add	r3, r1
 8003254:	3386      	adds	r3, #134	; 0x86
 8003256:	2200      	movs	r2, #0
 8003258:	801a      	strh	r2, [r3, #0]
    }
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bc90      	pop	{r4, r7}
 8003262:	4770      	bx	lr
 8003264:	20001d78 	.word	0x20001d78

08003268 <Get_rcv_data>:
//==============================================================================
//
//==============================================================================
uint8_t Get_rcv_data(SK_UART sel)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
    uint8_t dt;
	uart[sel].Get_cnt++;
 8003272:	79fa      	ldrb	r2, [r7, #7]
 8003274:	4945      	ldr	r1, [pc, #276]	; (800338c <Get_rcv_data+0x124>)
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	440b      	add	r3, r1
 8003280:	338e      	adds	r3, #142	; 0x8e
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	b298      	uxth	r0, r3
 8003288:	4940      	ldr	r1, [pc, #256]	; (800338c <Get_rcv_data+0x124>)
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	440b      	add	r3, r1
 8003294:	338e      	adds	r3, #142	; 0x8e
 8003296:	4602      	mov	r2, r0
 8003298:	801a      	strh	r2, [r3, #0]

  	while(uart[sel].Sem_rs485_rcv==1);
 800329a:	bf00      	nop
 800329c:	79fa      	ldrb	r2, [r7, #7]
 800329e:	493b      	ldr	r1, [pc, #236]	; (800338c <Get_rcv_data+0x124>)
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	440b      	add	r3, r1
 80032aa:	338a      	adds	r3, #138	; 0x8a
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d0f4      	beq.n	800329c <Get_rcv_data+0x34>

	uart[sel].Sem_rs485_rcv = 1;
 80032b2:	79fa      	ldrb	r2, [r7, #7]
 80032b4:	4935      	ldr	r1, [pc, #212]	; (800338c <Get_rcv_data+0x124>)
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	440b      	add	r3, r1
 80032c0:	338a      	adds	r3, #138	; 0x8a
 80032c2:	2201      	movs	r2, #1
 80032c4:	801a      	strh	r2, [r3, #0]
	uart[sel].rcvnum --;
 80032c6:	79fa      	ldrb	r2, [r7, #7]
 80032c8:	4930      	ldr	r1, [pc, #192]	; (800338c <Get_rcv_data+0x124>)
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	440b      	add	r3, r1
 80032d4:	3382      	adds	r3, #130	; 0x82
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	3b01      	subs	r3, #1
 80032da:	b298      	uxth	r0, r3
 80032dc:	492b      	ldr	r1, [pc, #172]	; (800338c <Get_rcv_data+0x124>)
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	440b      	add	r3, r1
 80032e8:	3382      	adds	r3, #130	; 0x82
 80032ea:	4602      	mov	r2, r0
 80032ec:	801a      	strh	r2, [r3, #0]
	uart[sel].Sem_rs485_rcv = 0;
 80032ee:	79fa      	ldrb	r2, [r7, #7]
 80032f0:	4926      	ldr	r1, [pc, #152]	; (800338c <Get_rcv_data+0x124>)
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	440b      	add	r3, r1
 80032fc:	338a      	adds	r3, #138	; 0x8a
 80032fe:	2200      	movs	r2, #0
 8003300:	801a      	strh	r2, [r3, #0]

	dt =  uart[sel].rcvbuf[uart[sel].rcv_rpt];
 8003302:	79fa      	ldrb	r2, [r7, #7]
 8003304:	79f9      	ldrb	r1, [r7, #7]
 8003306:	4821      	ldr	r0, [pc, #132]	; (800338c <Get_rcv_data+0x124>)
 8003308:	460b      	mov	r3, r1
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	4403      	add	r3, r0
 8003312:	3388      	adds	r3, #136	; 0x88
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	491c      	ldr	r1, [pc, #112]	; (800338c <Get_rcv_data+0x124>)
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	440b      	add	r3, r1
 8003324:	4403      	add	r3, r0
 8003326:	3302      	adds	r3, #2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	73fb      	strb	r3, [r7, #15]
	uart[sel].rcv_rpt ++ ;
 800332c:	79fa      	ldrb	r2, [r7, #7]
 800332e:	4917      	ldr	r1, [pc, #92]	; (800338c <Get_rcv_data+0x124>)
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	440b      	add	r3, r1
 800333a:	3388      	adds	r3, #136	; 0x88
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	3301      	adds	r3, #1
 8003340:	b298      	uxth	r0, r3
 8003342:	4912      	ldr	r1, [pc, #72]	; (800338c <Get_rcv_data+0x124>)
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	440b      	add	r3, r1
 800334e:	3388      	adds	r3, #136	; 0x88
 8003350:	4602      	mov	r2, r0
 8003352:	801a      	strh	r2, [r3, #0]
	if( uart[sel].rcv_rpt > RCV_BUF_SIZE ){
 8003354:	79fa      	ldrb	r2, [r7, #7]
 8003356:	490d      	ldr	r1, [pc, #52]	; (800338c <Get_rcv_data+0x124>)
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	440b      	add	r3, r1
 8003362:	3388      	adds	r3, #136	; 0x88
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d909      	bls.n	800337e <Get_rcv_data+0x116>
		uart[sel].rcv_rpt = 0;
 800336a:	79fa      	ldrb	r2, [r7, #7]
 800336c:	4907      	ldr	r1, [pc, #28]	; (800338c <Get_rcv_data+0x124>)
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	440b      	add	r3, r1
 8003378:	3388      	adds	r3, #136	; 0x88
 800337a:	2200      	movs	r2, #0
 800337c:	801a      	strh	r2, [r3, #0]
	}

    return dt;
 800337e:	7bfb      	ldrb	r3, [r7, #15]

}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	20001d78 	.word	0x20001d78

08003390 <HAL_UART_RxCpltCallback>:

//==============================================================================
//　受信データ割込みコールバック
//==============================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

	if( Get_uart_port(huart) == SK_UART1_RS485 ){
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fe69 	bl	8004070 <Get_uart_port>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d112      	bne.n	80033ca <HAL_UART_RxCpltCallback+0x3a>
		Set_rcv_data(SK_UART1_RS485);
 80033a4:	2000      	movs	r0, #0
 80033a6:	f7ff feb1 	bl	800310c <Set_rcv_data>
		uart_Rcv_init(SK_UART1_RS485);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f000 fed8 	bl	8004160 <uart_Rcv_init>
		if(uart[SK_UART1_RS485].totalnum >= COM_TABLE_MAX){
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_UART_RxCpltCallback+0xb4>)
 80033b2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80033b6:	2b21      	cmp	r3, #33	; 0x21
 80033b8:	d940      	bls.n	800343c <HAL_UART_RxCpltCallback+0xac>
			Set_logInfo("HAL_UART_RxCpltCallback(RS485)");
 80033ba:	4823      	ldr	r0, [pc, #140]	; (8003448 <HAL_UART_RxCpltCallback+0xb8>)
 80033bc:	f7fe ff40 	bl	8002240 <Set_logInfo>
			SendMsgQueISR(RT_EVENT_UART_RX, 0xff);
 80033c0:	21ff      	movs	r1, #255	; 0xff
 80033c2:	2001      	movs	r0, #1
 80033c4:	f000 f844 	bl	8003450 <SendMsgQueISR>
		Set_rcv_data(SK_UART2_DEBUG);
		uart_Rcv_init(SK_UART2_DEBUG);
	}
	else{
	}
}
 80033c8:	e038      	b.n	800343c <HAL_UART_RxCpltCallback+0xac>
	else if( Get_uart_port(huart) == SK_UART2_DEBUG ){
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fe50 	bl	8004070 <Get_uart_port>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d132      	bne.n	800343c <HAL_UART_RxCpltCallback+0xac>
		if(uart[SK_UART2_DEBUG].rcv_dt[0] == '!'){
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_UART_RxCpltCallback+0xb4>)
 80033d8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80033dc:	2b21      	cmp	r3, #33	; 0x21
 80033de:	d10e      	bne.n	80033fe <HAL_UART_RxCpltCallback+0x6e>
			esc.buf[esc.ptr] = uart[SK_UART2_DEBUG].rcv_dt[0];
 80033e0:	4b1a      	ldr	r3, [pc, #104]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 80033e2:	7a9b      	ldrb	r3, [r3, #10]
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b17      	ldr	r3, [pc, #92]	; (8003444 <HAL_UART_RxCpltCallback+0xb4>)
 80033e8:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 80033ee:	5499      	strb	r1, [r3, r2]
			esc.ptr++;
 80033f0:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 80033f2:	7a9b      	ldrb	r3, [r3, #10]
 80033f4:	3301      	adds	r3, #1
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	4b14      	ldr	r3, [pc, #80]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 80033fa:	729a      	strb	r2, [r3, #10]
 80033fc:	e018      	b.n	8003430 <HAL_UART_RxCpltCallback+0xa0>
		else if(esc.ptr == 1){
 80033fe:	4b13      	ldr	r3, [pc, #76]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 8003400:	7a9b      	ldrb	r3, [r3, #10]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d114      	bne.n	8003430 <HAL_UART_RxCpltCallback+0xa0>
			esc.buf[esc.ptr] = uart[SK_UART2_DEBUG].rcv_dt[0];
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 8003408:	7a9b      	ldrb	r3, [r3, #10]
 800340a:	461a      	mov	r2, r3
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_UART_RxCpltCallback+0xb4>)
 800340e:	f893 1090 	ldrb.w	r1, [r3, #144]	; 0x90
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 8003414:	5499      	strb	r1, [r3, r2]
			esc.ptr = 0;
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 8003418:	2200      	movs	r2, #0
 800341a:	729a      	strb	r2, [r3, #10]
			if(esc.buf[0]=='!' && esc.buf[1]=='l'){
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b21      	cmp	r3, #33	; 0x21
 8003422:	d105      	bne.n	8003430 <HAL_UART_RxCpltCallback+0xa0>
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_UART_RxCpltCallback+0xbc>)
 8003426:	785b      	ldrb	r3, [r3, #1]
 8003428:	2b6c      	cmp	r3, #108	; 0x6c
 800342a:	d101      	bne.n	8003430 <HAL_UART_RxCpltCallback+0xa0>
				LogdisplayISR();
 800342c:	f7ff f986 	bl	800273c <LogdisplayISR>
		Set_rcv_data(SK_UART2_DEBUG);
 8003430:	2001      	movs	r0, #1
 8003432:	f7ff fe6b 	bl	800310c <Set_rcv_data>
		uart_Rcv_init(SK_UART2_DEBUG);
 8003436:	2001      	movs	r0, #1
 8003438:	f000 fe92 	bl	8004160 <uart_Rcv_init>
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20001d78 	.word	0x20001d78
 8003448:	08018918 	.word	0x08018918
 800344c:	20001ee4 	.word	0x20001ee4

08003450 <SendMsgQueISR>:

//==============================================================================
//　割込み用
//==============================================================================
void SendMsgQueISR(RS485_TASK_EVENT event, uint8_t task)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	460a      	mov	r2, r1
 800345a:	71fb      	strb	r3, [r7, #7]
 800345c:	4613      	mov	r3, r2
 800345e:	71bb      	strb	r3, [r7, #6]
	MESSAGE_QUE_DATA	*msg;


	//msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));

	msg = &RTtaskISR;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <SendMsgQueISR+0x50>)
 8003462:	60fb      	str	r3, [r7, #12]
	msg->u.cmd_msg.event = event;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	79fa      	ldrb	r2, [r7, #7]
 8003468:	719a      	strb	r2, [r3, #6]
	msg->send_task = task;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	79ba      	ldrb	r2, [r7, #6]
 800346e:	711a      	strb	r2, [r3, #4]
	msg->maroc_ptr = (void *)msg;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]

	//SKprintf("event=0x%x, task=0x%x,msgpt=%p\r\n", msg->event,msg->send_task, msg->maroc_ptr);
	//   	lsize2 = xPortGetFreeHeapSize();
	// 		SKprintf("lsize1=0x%x,lsize2=%x\r\n",lsize1,lsize2);
	//    	SKprintf("MESSAGE_QUE_DATA=%p\r\n",msg);
	osStatus = osMessageQueuePut (GetMessageQue(SK_TASK_sub2), (void *)msg->maroc_ptr, 0,0);
 8003476:	2002      	movs	r0, #2
 8003478:	f7ff f9da 	bl	8002830 <GetMessageQue>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	2200      	movs	r2, #0
 8003484:	f00e fc8c 	bl	8011da0 <osMessageQueuePut>
 8003488:	60b8      	str	r0, [r7, #8]
	if( osStatus == osOK ){
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <SendMsgQueISR+0x46>
		//Set_logInfo("Rs485 RxRecived. Send MsgQue OK");
	}
	else{
		Set_logInfo("Rs485 RxRecived. Send MsgQue ERROR");
 8003490:	4804      	ldr	r0, [pc, #16]	; (80034a4 <SendMsgQueISR+0x54>)
 8003492:	f7fe fed5 	bl	8002240 <Set_logInfo>
	}
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20001ef0 	.word	0x20001ef0
 80034a4:	08018938 	.word	0x08018938

080034a8 <SendMsgQue>:

//==============================================================================
//
//==============================================================================
void SendMsgQue( CMD_MSG	*rt_task )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	osStatus_t 			osStatus;
	MESSAGE_QUE_DATA	*msg;



	msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));
 80034b0:	2010      	movs	r0, #16
 80034b2:	f011 f941 	bl	8014738 <pvPortMalloc>
 80034b6:	60f8      	str	r0, [r7, #12]

	#ifdef	 __HEAP_DBUG
	Set_logInfo2("pvPortMalloc=%x",msg);
#endif	//	 __HEAP_DBUG

	msg->u.cmd_msg.event = rt_task->event;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	719a      	strb	r2, [r3, #6]
	//msg->send_task = task;
	msg->maroc_ptr = (void *)msg;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	601a      	str	r2, [r3, #0]

	msg->u.cmd_msg.address = rt_task->address;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	799a      	ldrb	r2, [r3, #6]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	731a      	strb	r2, [r3, #12]
	msg->u.cmd_msg.command = rt_task->command;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	789a      	ldrb	r2, [r3, #2]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	721a      	strb	r2, [r3, #8]
	msg->u.cmd_msg.command_sub = rt_task->command_sub;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	889a      	ldrh	r2, [r3, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	815a      	strh	r2, [r3, #10]
	msg->u.cmd_msg.sub1 = rt_task->sub1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	79da      	ldrb	r2, [r3, #7]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	735a      	strb	r2, [r3, #13]

	//SKprintf("event=0x%x, task=0x%x,msgpt=%p\r\n", msg->event,msg->send_task, msg->maroc_ptr);
	//   	lsize2 = xPortGetFreeHeapSize();
	// 		SKprintf("lsize1=0x%x,lsize2=%x\r\n",lsize1,lsize2);
	//    	SKprintf("MESSAGE_QUE_DATA=%p\r\n",msg);
	osStatus = osMessageQueuePut (GetMessageQue(SK_TASK_sub2), (void *)msg->maroc_ptr, 0,0);
 80034e6:	2002      	movs	r0, #2
 80034e8:	f7ff f9a2 	bl	8002830 <GetMessageQue>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	2300      	movs	r3, #0
 80034f2:	2200      	movs	r2, #0
 80034f4:	f00e fc54 	bl	8011da0 <osMessageQueuePut>
 80034f8:	60b8      	str	r0, [r7, #8]
	if( osStatus == osOK ){
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <SendMsgQue+0x60>
		//Set_logInfo2("Rs485 RxRecived. Send MsgQue OK");
	}
	else{
		Set_logInfo2("Send MsgQue ERROR=%d",osStatus);
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4803      	ldr	r0, [pc, #12]	; (8003510 <SendMsgQue+0x68>)
 8003504:	f7fe ff60 	bl	80023c8 <Set_logInfo2>
	}
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	0801895c 	.word	0x0801895c

08003514 <rs485_com_task>:
//extern osMessageQueueId_t myQueue01Handle;



void rs485_com_task(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
	uint8_t				state;
	uint32_t			timer;
	uint8_t				*temp;
	uint8_t 			*buffer;

	RTtask.state = RT_STATE_INIT;
 800351a:	2300      	movs	r3, #0
 800351c:	717b      	strb	r3, [r7, #5]
	timer = osWaitForever;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	61bb      	str	r3, [r7, #24]
	RTtask.state = RT_STATE_READY;
 8003524:	2301      	movs	r3, #1
 8003526:	717b      	strb	r3, [r7, #5]
	while(1){

		//-------------------------------------------------------------------------
		//	メッセージ待ち
		//-------------------------------------------------------------------------
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), &msgQueBuf, 0, osWaitForever);
 8003528:	2002      	movs	r0, #2
 800352a:	f7ff f981 	bl	8002830 <GetMessageQue>
 800352e:	4639      	mov	r1, r7
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	2200      	movs	r2, #0
 8003536:	f00e fc93 	bl	8011e60 <osMessageQueueGet>
 800353a:	6178      	str	r0, [r7, #20]
		msg = (MESSAGE_QUE_DATA *)msgQueBuf;
 800353c:	463b      	mov	r3, r7
 800353e:	613b      	str	r3, [r7, #16]
		msg = (MESSAGE_QUE_DATA	*)msg->maroc_ptr;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	613b      	str	r3, [r7, #16]


		event = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	77fb      	strb	r3, [r7, #31]
		state = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	77bb      	strb	r3, [r7, #30]
		switch( os_status ){
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11d      	bne.n	8003590 <rs485_com_task+0x7c>
		case osOK:
			RTtask.event = msg->u.cmd_msg.event;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	799b      	ldrb	r3, [r3, #6]
 8003558:	713b      	strb	r3, [r7, #4]

			switch(RTtask.event){
 800355a:	793b      	ldrb	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <rs485_com_task+0x52>
 8003560:	2b03      	cmp	r3, #3
 8003562:	d00d      	beq.n	8003580 <rs485_com_task+0x6c>
				break;
			case RT_EVENT_STOP_REQ:
				RTtask.command_sub = 1;
				break;
			default:
				break;
 8003564:	e00f      	b.n	8003586 <rs485_com_task+0x72>
				RTtask.command = msg->u.cmd_msg.command;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	7a1b      	ldrb	r3, [r3, #8]
 800356a:	71bb      	strb	r3, [r7, #6]
				RTtask.command_sub = msg->u.cmd_msg.command_sub;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	895b      	ldrh	r3, [r3, #10]
 8003570:	813b      	strh	r3, [r7, #8]
				RTtask.address = msg->u.cmd_msg.address;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	7b1b      	ldrb	r3, [r3, #12]
 8003576:	72bb      	strb	r3, [r7, #10]
				RTtask.sub1 = msg->u.cmd_msg.sub1;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	7b5b      	ldrb	r3, [r3, #13]
 800357c:	72fb      	strb	r3, [r7, #11]
				break;
 800357e:	e002      	b.n	8003586 <rs485_com_task+0x72>
				RTtask.command_sub = 1;
 8003580:	2301      	movs	r3, #1
 8003582:	813b      	strh	r3, [r7, #8]
				break;
 8003584:	bf00      	nop
			}

			event = RTtask.event;
 8003586:	793b      	ldrb	r3, [r7, #4]
 8003588:	77fb      	strb	r3, [r7, #31]
			state = RTtask.state;
 800358a:	797b      	ldrb	r3, [r7, #5]
 800358c:	77bb      	strb	r3, [r7, #30]
			break;
 800358e:	e004      	b.n	800359a <rs485_com_task+0x86>

		case osErrorTimeout:
		default:
			SKprintf("rs485_com_task():os_status=Error(%d)\r\n",os_status);
 8003590:	6979      	ldr	r1, [r7, #20]
 8003592:	480c      	ldr	r0, [pc, #48]	; (80035c4 <rs485_com_task+0xb0>)
 8003594:	f000 fe4e 	bl	8004234 <SKprintf>
			break;
 8003598:	bf00      	nop
		}

		if( msg->maroc_ptr != &RTtaskISR ){
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <rs485_com_task+0xb4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <rs485_com_task+0x9a>
			vPortFree(msg->maroc_ptr);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f011 f991 	bl	80148d0 <vPortFree>

		//-------------------------------------------------------------------------
		//	処理関数
		//-------------------------------------------------------------------------
		//Set_logInfo2("RS485 MAIN: event=%d, state=%d\r\n",event,state);
		(*rs485_func_table[event][state ])( &RTtask );
 80035ae:	7ffa      	ldrb	r2, [r7, #31]
 80035b0:	7fbb      	ldrb	r3, [r7, #30]
 80035b2:	4906      	ldr	r1, [pc, #24]	; (80035cc <rs485_com_task+0xb8>)
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035bc:	1d3a      	adds	r2, r7, #4
 80035be:	4610      	mov	r0, r2
 80035c0:	4798      	blx	r3
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), &msgQueBuf, 0, osWaitForever);
 80035c2:	e7b1      	b.n	8003528 <rs485_com_task+0x14>
 80035c4:	08018974 	.word	0x08018974
 80035c8:	20001ef0 	.word	0x20001ef0
 80035cc:	20000000 	.word	0x20000000

080035d0 <RS_nop>:

//==============================================================================
//
//==============================================================================
void RS_nop( CMD_MSG	*rt_task )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	Set_logInfo2("★RS_nop(S=%d,E=%d)",rt_task->state, rt_task->event);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	4619      	mov	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	4803      	ldr	r0, [pc, #12]	; (80035f4 <RS_nop+0x24>)
 80035e6:	f7fe feef 	bl	80023c8 <Set_logInfo2>
//	SKprintf("RS_nop(%d,%d)\r\n", rt_task->state, rt_task->event);
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	0801899c 	.word	0x0801899c

080035f8 <RScomand_send>:
//==============================================================================
//
//==============================================================================
void RScomand_send( CMD_MSG	*rt_task )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
	uint8_t				timer_id;



//	Set_logInfo2("RScomand_send()");
	Set_logInfo2("★RScomand_send(S=%d,E=%d)",rt_task->state, rt_task->event);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	4619      	mov	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	482b      	ldr	r0, [pc, #172]	; (80036c0 <RScomand_send+0xc8>)
 8003612:	f7fe fed9 	bl	80023c8 <Set_logInfo2>

//	SKprintf("RScomand_send(%d,%d)\r\n", rt_task->state, rt_task->event);

	status = Send_rx485_cmd_message( rt_task );
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fc74 	bl	8003f04 <Send_rx485_cmd_message>
 800361c:	4603      	mov	r3, r0
 800361e:	75fb      	strb	r3, [r7, #23]

	if( status == RET_TRUE ){
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d148      	bne.n	80036b8 <RScomand_send+0xc0>
		rt_task->state = RT_STATE_RESPONS_RECIVE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	705a      	strb	r2, [r3, #1]
		uart[SK_UART1_RS485].totalnum = 0;
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <RScomand_send+0xcc>)
 800362e:	2200      	movs	r2, #0
 8003630:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		work_buf_num = 0;
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <RScomand_send+0xd0>)
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
		// タイムアウト　イベントをセット
#ifdef	 __HEAP_DBUG
		Set_logInfo2("HeapSize 008 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));
 800363a:	2010      	movs	r0, #16
 800363c:	f011 f87c 	bl	8014738 <pvPortMalloc>
 8003640:	6138      	str	r0, [r7, #16]
#ifdef	 __HEAP_DBUG
		Set_logInfo2("pvPortMalloc=%x",msg);
		Set_logInfo2("HeapSize 008 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		msg->maroc_ptr = msg;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	601a      	str	r2, [r3, #0]
		msg->u.cmd_msg.event = RT_EVENT_TIMEOUT;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2204      	movs	r2, #4
 800364c:	719a      	strb	r2, [r3, #6]

		te_form = (TIMER_EVENT_FORM *)pvPortMalloc(sizeof(TIMER_EVENT_FORM));
 800364e:	2018      	movs	r0, #24
 8003650:	f011 f872 	bl	8014738 <pvPortMalloc>
 8003654:	60f8      	str	r0, [r7, #12]

#ifdef	 __HEAP_DBUG
		Set_logInfo2("pvPortMalloc=%x",te_form);
#endif	//	 __HEAP_DBUG

		te_form->maroc_ptr = te_form;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	601a      	str	r2, [r3, #0]
		te_form->mail_form = msg;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	611a      	str	r2, [r3, #16]
		te_form->hmsg = GetMessageQue(SK_TASK_sub2);
 8003662:	2002      	movs	r0, #2
 8003664:	f7ff f8e4 	bl	8002830 <GetMessageQue>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
		te_form->time = 50;		// 約500msec
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2232      	movs	r2, #50	; 0x32
 8003672:	819a      	strh	r2, [r3, #12]
		timer_id = GetTimerEventID();
 8003674:	f7ff fc22 	bl	8002ebc <GetTimerEventID>
 8003678:	4603      	mov	r3, r0
 800367a:	72fb      	strb	r3, [r7, #11]
		if( timer_id == 0xff ){
 800367c:	7afb      	ldrb	r3, [r7, #11]
 800367e:	2bff      	cmp	r3, #255	; 0xff
 8003680:	d102      	bne.n	8003688 <RScomand_send+0x90>
			SKprintf("TIMER EVENT NOT AVAILABLE\r\n");
 8003682:	4812      	ldr	r0, [pc, #72]	; (80036cc <RScomand_send+0xd4>)
 8003684:	f000 fdd6 	bl	8004234 <SKprintf>
		}
		te_form->timer_id = rt_task->timer_id = timer_id;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	7afa      	ldrb	r2, [r7, #11]
 800368c:	721a      	strb	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7a1a      	ldrb	r2, [r3, #8]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	751a      	strb	r2, [r3, #20]
#ifdef	 __HEAP_DBUG
		SKprintf("tm_form=%p, msg=%p\r\n",te_form, msg);
		Set_logInfo2("HeapSize 008 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		status = osMessageQueuePut (GetMessageQue(SK_TASK_sub1), (void *)te_form->maroc_ptr, 0,0);
 8003696:	2001      	movs	r0, #1
 8003698:	f7ff f8ca 	bl	8002830 <GetMessageQue>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	2200      	movs	r2, #0
 80036a4:	f00e fb7c 	bl	8011da0 <osMessageQueuePut>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]
		if( status == osOK ){
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <RScomand_send+0xc0>
			//Set_logInfo2("RScomand_send(). Send MsgQue OK");
		}
		else{
			Set_logInfo2("RScomand_send(). Send MsgQue ERROR");
 80036b2:	4807      	ldr	r0, [pc, #28]	; (80036d0 <RScomand_send+0xd8>)
 80036b4:	f7fe fe88 	bl	80023c8 <Set_logInfo2>
		}
		//SKprintf("RScomand_send() End \r\n");
	}
}
 80036b8:	bf00      	nop
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	080189b4 	.word	0x080189b4
 80036c4:	20001d78 	.word	0x20001d78
 80036c8:	20001d74 	.word	0x20001d74
 80036cc:	080189d0 	.word	0x080189d0
 80036d0:	080189ec 	.word	0x080189ec

080036d4 <RSrespons_recive>:
//==============================================================================
//
//==============================================================================
void RSrespons_recive( CMD_MSG	*rt_task )
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
	CMD_MSG				msg;

	Set_logInfo2("★RSrespons_recive(S=%d,E=%d)",rt_task->state, rt_task->event);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	4619      	mov	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	4832      	ldr	r0, [pc, #200]	; (80037b8 <RSrespons_recive+0xe4>)
 80036ee:	f7fe fe6b 	bl	80023c8 <Set_logInfo2>

//	Set_logInfo2("RSrespons_recive()");
//	SKprintf("RSrespons_recive(%d,%d)\r\n", rt_task->state, rt_task->event);

	while( (uart[SK_UART1_RS485].Set_cnt - uart[SK_UART1_RS485].Get_cnt)   > 0 ){
 80036f2:	e051      	b.n	8003798 <RSrespons_recive+0xc4>
		work_buf[work_buf_num ++] = Get_rcv_data(SK_UART1_RS485);
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <RSrespons_recive+0xe8>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	b2d1      	uxtb	r1, r2
 80036fc:	4a2f      	ldr	r2, [pc, #188]	; (80037bc <RSrespons_recive+0xe8>)
 80036fe:	7011      	strb	r1, [r2, #0]
 8003700:	461c      	mov	r4, r3
 8003702:	2000      	movs	r0, #0
 8003704:	f7ff fdb0 	bl	8003268 <Get_rcv_data>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <RSrespons_recive+0xec>)
 800370e:	551a      	strb	r2, [r3, r4]

		if( Get_end_test_pt(work_buf_num, work_buf) != 0 ){
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <RSrespons_recive+0xe8>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	b29b      	uxth	r3, r3
 8003716:	492a      	ldr	r1, [pc, #168]	; (80037c0 <RSrespons_recive+0xec>)
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fa8b 	bl	8003c34 <Get_end_test_pt>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d039      	beq.n	8003798 <RSrespons_recive+0xc4>
			//SKprintf("Respons Recive\r\n");
			ReleaceTimerEvent(rt_task->timer_id);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	7a1b      	ldrb	r3, [r3, #8]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fbf7 	bl	8002f1c <ReleaceTimerEvent>
			status = Set_Res_Message(work_buf_num, work_buf,Res_mesg);
 800372e:	4b23      	ldr	r3, [pc, #140]	; (80037bc <RSrespons_recive+0xe8>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	4a23      	ldr	r2, [pc, #140]	; (80037c4 <RSrespons_recive+0xf0>)
 8003736:	4922      	ldr	r1, [pc, #136]	; (80037c0 <RSrespons_recive+0xec>)
 8003738:	4618      	mov	r0, r3
 800373a:	f000 facf 	bl	8003cdc <Set_Res_Message>
 800373e:	4603      	mov	r3, r0
 8003740:	75fb      	strb	r3, [r7, #23]
			if( status == RET_TRUE ){
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d10d      	bne.n	8003764 <RSrespons_recive+0x90>
				rt_task->state = RT_STATE_RESPONS;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2203      	movs	r2, #3
 800374c:	705a      	strb	r2, [r3, #1]
				rt_task->retry_num = 0;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	725a      	strb	r2, [r3, #9]

				msg.event = RT_EVENT_RESPONS;
 8003754:	2302      	movs	r3, #2
 8003756:	733b      	strb	r3, [r7, #12]

#ifdef	 __HEAP_DBUG
				Set_logInfo2("HeapSize 003 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

				SendMsgQue(&msg);
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fea3 	bl	80034a8 <SendMsgQue>
Set_logInfo2("HeapSize 004 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG


			}
			break;
 8003762:	e024      	b.n	80037ae <RSrespons_recive+0xda>
				Set_logInfo2("RETRY:Recive data error");
 8003764:	4818      	ldr	r0, [pc, #96]	; (80037c8 <RSrespons_recive+0xf4>)
 8003766:	f7fe fe2f 	bl	80023c8 <Set_logInfo2>
				rt_task->state  = RT_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	705a      	strb	r2, [r3, #1]
				msg.event = RT_EVENT_START_REQ;
 8003770:	2300      	movs	r3, #0
 8003772:	733b      	strb	r3, [r7, #12]
				msg.address = rt_task->address ;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	799b      	ldrb	r3, [r3, #6]
 8003778:	74bb      	strb	r3, [r7, #18]
				msg.command = rt_task->command;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	789b      	ldrb	r3, [r3, #2]
 800377e:	73bb      	strb	r3, [r7, #14]
				msg.command_sub = rt_task->command_sub;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	889b      	ldrh	r3, [r3, #4]
 8003784:	823b      	strh	r3, [r7, #16]
				msg.sub1 = rt_task->sub1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	79db      	ldrb	r3, [r3, #7]
 800378a:	74fb      	strb	r3, [r7, #19]
				SendMsgQue(&msg);
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe89 	bl	80034a8 <SendMsgQue>
			break;
 8003796:	e00a      	b.n	80037ae <RSrespons_recive+0xda>
	while( (uart[SK_UART1_RS485].Set_cnt - uart[SK_UART1_RS485].Get_cnt)   > 0 ){
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <RSrespons_recive+0xf8>)
 800379a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800379e:	461a      	mov	r2, r3
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <RSrespons_recive+0xf8>)
 80037a2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	dca3      	bgt.n	80036f4 <RSrespons_recive+0x20>
		}
	}
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	08018a10 	.word	0x08018a10
 80037bc:	20001d74 	.word	0x20001d74
 80037c0:	20001cf4 	.word	0x20001cf4
 80037c4:	20001ebc 	.word	0x20001ebc
 80037c8:	08018a30 	.word	0x08018a30
 80037cc:	20001d78 	.word	0x20001d78

080037d0 <RSTimeout>:

//==============================================================================
//
//==============================================================================
void RSTimeout( CMD_MSG	*rt_task )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	; 0x30
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	CMD_MSG				msg;
	char	 	c[17];
	uint8_t		i,j,k;

	Set_logInfo2("★RSTimeout(S=%d,E=%d)",rt_task->state, rt_task->event);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	785b      	ldrb	r3, [r3, #1]
 80037dc:	4619      	mov	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4886      	ldr	r0, [pc, #536]	; (8003a00 <RSTimeout+0x230>)
 80037e6:	f7fe fdef 	bl	80023c8 <Set_logInfo2>

	rt_task->state = RT_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	705a      	strb	r2, [r3, #1]
	Set_logInfo2("TIME OUT END");
 80037f0:	4884      	ldr	r0, [pc, #528]	; (8003a04 <RSTimeout+0x234>)
 80037f2:	f7fe fde9 	bl	80023c8 <Set_logInfo2>



	SKprintf("Get_cnt  =%d\r\n",uart[SK_UART1_RS485].Get_cnt);
 80037f6:	4b84      	ldr	r3, [pc, #528]	; (8003a08 <RSTimeout+0x238>)
 80037f8:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80037fc:	4619      	mov	r1, r3
 80037fe:	4883      	ldr	r0, [pc, #524]	; (8003a0c <RSTimeout+0x23c>)
 8003800:	f000 fd18 	bl	8004234 <SKprintf>
	SKprintf("Set_cnt  =%d\r\n",uart[SK_UART1_RS485].Set_cnt);
 8003804:	4b80      	ldr	r3, [pc, #512]	; (8003a08 <RSTimeout+0x238>)
 8003806:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800380a:	4619      	mov	r1, r3
 800380c:	4880      	ldr	r0, [pc, #512]	; (8003a10 <RSTimeout+0x240>)
 800380e:	f000 fd11 	bl	8004234 <SKprintf>
	SKprintf("totalnum =%d\r\n",uart[SK_UART1_RS485].totalnum);
 8003812:	4b7d      	ldr	r3, [pc, #500]	; (8003a08 <RSTimeout+0x238>)
 8003814:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003818:	4619      	mov	r1, r3
 800381a:	487e      	ldr	r0, [pc, #504]	; (8003a14 <RSTimeout+0x244>)
 800381c:	f000 fd0a 	bl	8004234 <SKprintf>
	SKprintf("rcvnum   =%d\r\n",uart[SK_UART1_RS485].rcvnum);
 8003820:	4b79      	ldr	r3, [pc, #484]	; (8003a08 <RSTimeout+0x238>)
 8003822:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003826:	4619      	mov	r1, r3
 8003828:	487b      	ldr	r0, [pc, #492]	; (8003a18 <RSTimeout+0x248>)
 800382a:	f000 fd03 	bl	8004234 <SKprintf>
	SKprintf("rcv_wpt  =%d\r\n",uart[SK_UART1_RS485].rcv_wpt);
 800382e:	4b76      	ldr	r3, [pc, #472]	; (8003a08 <RSTimeout+0x238>)
 8003830:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003834:	4619      	mov	r1, r3
 8003836:	4879      	ldr	r0, [pc, #484]	; (8003a1c <RSTimeout+0x24c>)
 8003838:	f000 fcfc 	bl	8004234 <SKprintf>
	SKprintf("rcv_rpt  =%d\r\n",uart[SK_UART1_RS485].rcv_rpt);
 800383c:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <RSTimeout+0x238>)
 800383e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003842:	4619      	mov	r1, r3
 8003844:	4876      	ldr	r0, [pc, #472]	; (8003a20 <RSTimeout+0x250>)
 8003846:	f000 fcf5 	bl	8004234 <SKprintf>

	c[16] = '\0';
 800384a:	2300      	movs	r3, #0
 800384c:	773b      	strb	r3, [r7, #28]
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 800384e:	2300      	movs	r3, #0
 8003850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003854:	e041      	b.n	80038da <RSTimeout+0x10a>

		SKprintf(" [%03d] ", i*16 );
 8003856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4871      	ldr	r0, [pc, #452]	; (8003a24 <RSTimeout+0x254>)
 8003860:	f000 fce8 	bl	8004234 <SKprintf>

		for(j=0; j< 16; j++ ){
 8003864:	2300      	movs	r3, #0
 8003866:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800386a:	e027      	b.n	80038bc <RSTimeout+0xec>
			k = uart[SK_UART1_RS485].rcvbuf[i*16+j];
 800386c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003870:	011a      	lsls	r2, r3, #4
 8003872:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003876:	4413      	add	r3, r2
 8003878:	4a63      	ldr	r2, [pc, #396]	; (8003a08 <RSTimeout+0x238>)
 800387a:	4413      	add	r3, r2
 800387c:	789b      	ldrb	r3, [r3, #2]
 800387e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			SKprintf(" %02x ", k );
 8003882:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003886:	4619      	mov	r1, r3
 8003888:	4867      	ldr	r0, [pc, #412]	; (8003a28 <RSTimeout+0x258>)
 800388a:	f000 fcd3 	bl	8004234 <SKprintf>
			c[j] =  (uint8_t)((k<0x20||k>=0x7f)? '.': k);
 800388e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003892:	2b1f      	cmp	r3, #31
 8003894:	d906      	bls.n	80038a4 <RSTimeout+0xd4>
 8003896:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800389a:	2b7e      	cmp	r3, #126	; 0x7e
 800389c:	d802      	bhi.n	80038a4 <RSTimeout+0xd4>
 800389e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80038a2:	e000      	b.n	80038a6 <RSTimeout+0xd6>
 80038a4:	222e      	movs	r2, #46	; 0x2e
 80038a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80038aa:	3330      	adds	r3, #48	; 0x30
 80038ac:	443b      	add	r3, r7
 80038ae:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(j=0; j< 16; j++ ){
 80038b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80038b6:	3301      	adds	r3, #1
 80038b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80038bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80038c0:	2b0f      	cmp	r3, #15
 80038c2:	d9d3      	bls.n	800386c <RSTimeout+0x9c>
		}
		SKprintf("  %s\r\n",c );
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	4619      	mov	r1, r3
 80038ca:	4858      	ldr	r0, [pc, #352]	; (8003a2c <RSTimeout+0x25c>)
 80038cc:	f000 fcb2 	bl	8004234 <SKprintf>
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 80038d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038d4:	3301      	adds	r3, #1
 80038d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80038da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038de:	2b07      	cmp	r3, #7
 80038e0:	d9b9      	bls.n	8003856 <RSTimeout+0x86>
	}

	SKprintf("\r\nwork_buf_num =%d\r\n",work_buf_num);
 80038e2:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <RSTimeout+0x260>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	4619      	mov	r1, r3
 80038e8:	4852      	ldr	r0, [pc, #328]	; (8003a34 <RSTimeout+0x264>)
 80038ea:	f000 fca3 	bl	8004234 <SKprintf>

	c[16] = '\0';
 80038ee:	2300      	movs	r3, #0
 80038f0:	773b      	strb	r3, [r7, #28]
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80038f8:	e040      	b.n	800397c <RSTimeout+0x1ac>

		SKprintf(" [%03d] ", i*16 );
 80038fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4848      	ldr	r0, [pc, #288]	; (8003a24 <RSTimeout+0x254>)
 8003904:	f000 fc96 	bl	8004234 <SKprintf>

		for(j=0; j< 16; j++ ){
 8003908:	2300      	movs	r3, #0
 800390a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800390e:	e026      	b.n	800395e <RSTimeout+0x18e>
			k = work_buf[i*16+j];
 8003910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003914:	011a      	lsls	r2, r3, #4
 8003916:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800391a:	4413      	add	r3, r2
 800391c:	4a46      	ldr	r2, [pc, #280]	; (8003a38 <RSTimeout+0x268>)
 800391e:	5cd3      	ldrb	r3, [r2, r3]
 8003920:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			SKprintf(" %02x ", k );
 8003924:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003928:	4619      	mov	r1, r3
 800392a:	483f      	ldr	r0, [pc, #252]	; (8003a28 <RSTimeout+0x258>)
 800392c:	f000 fc82 	bl	8004234 <SKprintf>
			c[j] =  (uint8_t)((k<0x20||k>=0x7f)? '.': k);
 8003930:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003934:	2b1f      	cmp	r3, #31
 8003936:	d906      	bls.n	8003946 <RSTimeout+0x176>
 8003938:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800393c:	2b7e      	cmp	r3, #126	; 0x7e
 800393e:	d802      	bhi.n	8003946 <RSTimeout+0x176>
 8003940:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003944:	e000      	b.n	8003948 <RSTimeout+0x178>
 8003946:	222e      	movs	r2, #46	; 0x2e
 8003948:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800394c:	3330      	adds	r3, #48	; 0x30
 800394e:	443b      	add	r3, r7
 8003950:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(j=0; j< 16; j++ ){
 8003954:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003958:	3301      	adds	r3, #1
 800395a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800395e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003962:	2b0f      	cmp	r3, #15
 8003964:	d9d4      	bls.n	8003910 <RSTimeout+0x140>
		}
		SKprintf("  %s\r\n",c );
 8003966:	f107 030c 	add.w	r3, r7, #12
 800396a:	4619      	mov	r1, r3
 800396c:	482f      	ldr	r0, [pc, #188]	; (8003a2c <RSTimeout+0x25c>)
 800396e:	f000 fc61 	bl	8004234 <SKprintf>
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 8003972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003976:	3301      	adds	r3, #1
 8003978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800397c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003980:	2b07      	cmp	r3, #7
 8003982:	d9ba      	bls.n	80038fa <RSTimeout+0x12a>
	}

	if(rt_task->retry_num < 2){
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7a5b      	ldrb	r3, [r3, #9]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d817      	bhi.n	80039bc <RSTimeout+0x1ec>
		// 同じデバイスに再送する
		msg.event = RT_EVENT_START_REQ;
 800398c:	2300      	movs	r3, #0
 800398e:	f887 3020 	strb.w	r3, [r7, #32]
		msg.address = rt_task->address ;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	799b      	ldrb	r3, [r3, #6]
 8003996:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		msg.command = rt_task->command;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	789b      	ldrb	r3, [r3, #2]
 800399e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		msg.command_sub = rt_task->command_sub;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	889b      	ldrh	r3, [r3, #4]
 80039a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		msg.sub1 = rt_task->sub1;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	79db      	ldrb	r3, [r3, #7]
 80039ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

#ifdef	 __HEAP_DBUG
		Set_logInfo2("HeapSize 005 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG

		SendMsgQue(&msg);
 80039b0:	f107 0320 	add.w	r3, r7, #32
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fd77 	bl	80034a8 <SendMsgQue>

#ifdef	 __HEAP_DBUG
		Set_logInfo2("HeapSize 006 = 0x%x",xPortGetFreeHeapSize());
#endif	//	 __HEAP_DBUG
	}
}
 80039ba:	e01d      	b.n	80039f8 <RSTimeout+0x228>
		if( rt_task->address == RS485_AD_SLEVE01){
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	799b      	ldrb	r3, [r3, #6]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d103      	bne.n	80039cc <RSTimeout+0x1fc>
			msg.address = RS485_AD_SLEVE02;
 80039c4:	2302      	movs	r3, #2
 80039c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80039ca:	e002      	b.n	80039d2 <RSTimeout+0x202>
			msg.address = RS485_AD_SLEVE01;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		msg.event = RT_EVENT_START_REQ;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f887 3020 	strb.w	r3, [r7, #32]
		msg.command = rt_task->command;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	789b      	ldrb	r3, [r3, #2]
 80039dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		msg.command_sub = rt_task->command_sub;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	889b      	ldrh	r3, [r3, #4]
 80039e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		msg.sub1 = rt_task->sub1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	79db      	ldrb	r3, [r3, #7]
 80039ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		SendMsgQue(&msg);
 80039ee:	f107 0320 	add.w	r3, r7, #32
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fd58 	bl	80034a8 <SendMsgQue>
}
 80039f8:	bf00      	nop
 80039fa:	3730      	adds	r7, #48	; 0x30
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	08018a48 	.word	0x08018a48
 8003a04:	08018a60 	.word	0x08018a60
 8003a08:	20001d78 	.word	0x20001d78
 8003a0c:	08018a70 	.word	0x08018a70
 8003a10:	08018a80 	.word	0x08018a80
 8003a14:	08018a90 	.word	0x08018a90
 8003a18:	08018aa0 	.word	0x08018aa0
 8003a1c:	08018ab0 	.word	0x08018ab0
 8003a20:	08018ac0 	.word	0x08018ac0
 8003a24:	08018ad0 	.word	0x08018ad0
 8003a28:	08018adc 	.word	0x08018adc
 8003a2c:	08018ae4 	.word	0x08018ae4
 8003a30:	20001d74 	.word	0x20001d74
 8003a34:	08018aec 	.word	0x08018aec
 8003a38:	20001cf4 	.word	0x20001cf4

08003a3c <RSstop_req>:
//==============================================================================
//
//==============================================================================
void RSstop_req( CMD_MSG	*rt_task )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	Set_logInfo2("★RSstop_req(S=%d,E=%d)",rt_task->state, rt_task->event);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4803      	ldr	r0, [pc, #12]	; (8003a60 <RSstop_req+0x24>)
 8003a52:	f7fe fcb9 	bl	80023c8 <Set_logInfo2>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	08018b04 	.word	0x08018b04

08003a64 <RSrespons_proc>:

//==============================================================================
//
//==============================================================================
void RSrespons_proc( CMD_MSG	*rt_task )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77fb      	strb	r3, [r7, #31]
	uint8_t		*pt;
	uint8_t 	*msgQueBuf;


//	Set_logInfo2("RSrespons_proc(()");
	Set_logInfo2("★RSrespons_proc(S=%d,E=%d)",rt_task->state, rt_task->event);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	4619      	mov	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	485e      	ldr	r0, [pc, #376]	; (8003bf8 <RSrespons_proc+0x194>)
 8003a7e:	f7fe fca3 	bl	80023c8 <Set_logInfo2>
//	SKprintf("RSrespons_proc(%d,%d)\r\n", );

	status = RET_TRUE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	77fb      	strb	r3, [r7, #31]
	switch( Res_mesg[COM_COMMAND] ){
 8003a86:	4b5d      	ldr	r3, [pc, #372]	; (8003bfc <RSrespons_proc+0x198>)
 8003a88:	7b5b      	ldrb	r3, [r3, #13]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d86a      	bhi.n	8003b66 <RSrespons_proc+0x102>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <RSrespons_proc+0x34>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003ab1 	.word	0x08003ab1
 8003aa0:	08003afd 	.word	0x08003afd
 8003aa4:	08003b05 	.word	0x08003b05
	case RS485_CMD_STATUS:
		Set_logInfo2("RS485_CMD_STATUS\r\n");
 8003aa8:	4855      	ldr	r0, [pc, #340]	; (8003c00 <RSrespons_proc+0x19c>)
 8003aaa:	f7fe fc8d 	bl	80023c8 <Set_logInfo2>

		break;
 8003aae:	e060      	b.n	8003b72 <RSrespons_proc+0x10e>
	case RS485_CMD_VERSION:
		Set_logInfo2("RS485_CMD_VERSION\r\n");
 8003ab0:	4854      	ldr	r0, [pc, #336]	; (8003c04 <RSrespons_proc+0x1a0>)
 8003ab2:	f7fe fc89 	bl	80023c8 <Set_logInfo2>

		dt16 = Res_mesg[COM_SLV_VERSION_H];
 8003ab6:	4b51      	ldr	r3, [pc, #324]	; (8003bfc <RSrespons_proc+0x198>)
 8003ab8:	7c1b      	ldrb	r3, [r3, #16]
 8003aba:	82fb      	strh	r3, [r7, #22]
		dt16 <<= 8;
 8003abc:	8afb      	ldrh	r3, [r7, #22]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	82fb      	strh	r3, [r7, #22]
		dt16 |= Res_mesg[COM_SLV_VERSION_L];
 8003ac2:	4b4e      	ldr	r3, [pc, #312]	; (8003bfc <RSrespons_proc+0x198>)
 8003ac4:	7bdb      	ldrb	r3, [r3, #15]
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	8afb      	ldrh	r3, [r7, #22]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	82fb      	strh	r3, [r7, #22]

		SKprintf("  SLV VER = %04x, ",dt16);
 8003ace:	8afb      	ldrh	r3, [r7, #22]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	484d      	ldr	r0, [pc, #308]	; (8003c08 <RSrespons_proc+0x1a4>)
 8003ad4:	f000 fbae 	bl	8004234 <SKprintf>

		dt16 = Res_mesg[COM_SNS_VERSION_H];
 8003ad8:	4b48      	ldr	r3, [pc, #288]	; (8003bfc <RSrespons_proc+0x198>)
 8003ada:	7c9b      	ldrb	r3, [r3, #18]
 8003adc:	82fb      	strh	r3, [r7, #22]
		dt16 <<= 8;
 8003ade:	8afb      	ldrh	r3, [r7, #22]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	82fb      	strh	r3, [r7, #22]
		dt16 |= Res_mesg[COM_SNS_VERSION_L];
 8003ae4:	4b45      	ldr	r3, [pc, #276]	; (8003bfc <RSrespons_proc+0x198>)
 8003ae6:	7c5b      	ldrb	r3, [r3, #17]
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	8afb      	ldrh	r3, [r7, #22]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	82fb      	strh	r3, [r7, #22]
		SKprintf("  SNS VER = %04x \r\n",dt16);
 8003af0:	8afb      	ldrh	r3, [r7, #22]
 8003af2:	4619      	mov	r1, r3
 8003af4:	4845      	ldr	r0, [pc, #276]	; (8003c0c <RSrespons_proc+0x1a8>)
 8003af6:	f000 fb9d 	bl	8004234 <SKprintf>

		break;
 8003afa:	e03a      	b.n	8003b72 <RSrespons_proc+0x10e>
	case RS485_CMD_MESUR:
		Set_logInfo2("RS485_CMD_MESUR\r\n");
 8003afc:	4844      	ldr	r0, [pc, #272]	; (8003c10 <RSrespons_proc+0x1ac>)
 8003afe:	f7fe fc63 	bl	80023c8 <Set_logInfo2>

		break;
 8003b02:	e036      	b.n	8003b72 <RSrespons_proc+0x10e>
	case RS485_CMD_MESUR_DATA:
		Set_logInfo2("RS485_CMD_MESUR_DATA\r\n");
 8003b04:	4843      	ldr	r0, [pc, #268]	; (8003c14 <RSrespons_proc+0x1b0>)
 8003b06:	f7fe fc5f 	bl	80023c8 <Set_logInfo2>

		pt = (uint8_t *)&dtf;
 8003b0a:	f107 0308 	add.w	r3, r7, #8
 8003b0e:	61bb      	str	r3, [r7, #24]
		pt[3] = Res_mesg[COM_MESUR_DATA_H];
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	3303      	adds	r3, #3
 8003b14:	4a39      	ldr	r2, [pc, #228]	; (8003bfc <RSrespons_proc+0x198>)
 8003b16:	7c92      	ldrb	r2, [r2, #18]
 8003b18:	701a      	strb	r2, [r3, #0]
		pt[2] = Res_mesg[COM_MESUR_DATA_MH];
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	4a37      	ldr	r2, [pc, #220]	; (8003bfc <RSrespons_proc+0x198>)
 8003b20:	7c52      	ldrb	r2, [r2, #17]
 8003b22:	701a      	strb	r2, [r3, #0]
		pt[1] = Res_mesg[COM_MESUR_DATA_ML];
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	3301      	adds	r3, #1
 8003b28:	4a34      	ldr	r2, [pc, #208]	; (8003bfc <RSrespons_proc+0x198>)
 8003b2a:	7c12      	ldrb	r2, [r2, #16]
 8003b2c:	701a      	strb	r2, [r3, #0]
		pt[0] = Res_mesg[COM_MESUR_DATA_L];
 8003b2e:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <RSrespons_proc+0x198>)
 8003b30:	7bda      	ldrb	r2, [r3, #15]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	701a      	strb	r2, [r3, #0]


		if( rt_task->address == RS485_AD_SLEVE01){
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	799b      	ldrb	r3, [r3, #6]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d109      	bne.n	8003b52 <RSrespons_proc+0xee>
			Set_logInfo2("SLAVE01 DATA = %fmm",dtf);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fc fd19 	bl	8000578 <__aeabi_f2d>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4833      	ldr	r0, [pc, #204]	; (8003c18 <RSrespons_proc+0x1b4>)
 8003b4c:	f7fe fc3c 	bl	80023c8 <Set_logInfo2>
			Set_logInfo2("SLAVE02 DATA = %fmm",dtf);
		}



		break;
 8003b50:	e00f      	b.n	8003b72 <RSrespons_proc+0x10e>
			Set_logInfo2("SLAVE02 DATA = %fmm",dtf);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fd0f 	bl	8000578 <__aeabi_f2d>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	482f      	ldr	r0, [pc, #188]	; (8003c1c <RSrespons_proc+0x1b8>)
 8003b60:	f7fe fc32 	bl	80023c8 <Set_logInfo2>
		break;
 8003b64:	e005      	b.n	8003b72 <RSrespons_proc+0x10e>
	default:
		status = RET_FALSE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	77fb      	strb	r3, [r7, #31]
		Set_logInfo2("ERROR Recive Command None \r\n");
 8003b6a:	482d      	ldr	r0, [pc, #180]	; (8003c20 <RSrespons_proc+0x1bc>)
 8003b6c:	f7fe fc2c 	bl	80023c8 <Set_logInfo2>
		break;
 8003b70:	bf00      	nop
	}

	if( status == RET_TRUE ){
 8003b72:	7ffb      	ldrb	r3, [r7, #31]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d13b      	bne.n	8003bf0 <RSrespons_proc+0x18c>
		rt_task->state = RT_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	705a      	strb	r2, [r3, #1]
		cmd_ptr ++;
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <RSrespons_proc+0x1c0>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	3301      	adds	r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <RSrespons_proc+0x1c0>)
 8003b88:	701a      	strb	r2, [r3, #0]

		Set_logInfo2("command_sub=%d",rt_task->command_sub);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	889b      	ldrh	r3, [r3, #4]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4825      	ldr	r0, [pc, #148]	; (8003c28 <RSrespons_proc+0x1c4>)
 8003b92:	f7fe fc19 	bl	80023c8 <Set_logInfo2>
		SKprintf("command_sub=%d\r\n",rt_task->command_sub);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	889b      	ldrh	r3, [r3, #4]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4823      	ldr	r0, [pc, #140]	; (8003c2c <RSrespons_proc+0x1c8>)
 8003b9e:	f000 fb49 	bl	8004234 <SKprintf>
		rt_task->command_sub --;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	889b      	ldrh	r3, [r3, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	809a      	strh	r2, [r3, #4]

		if(rt_task->command_sub > 0 ){
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	889b      	ldrh	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d019      	beq.n	8003bea <RSrespons_proc+0x186>
			msg.event = RT_EVENT_START_REQ;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	733b      	strb	r3, [r7, #12]

			if( rt_task->address == RS485_AD_SLEVE01){
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	799b      	ldrb	r3, [r3, #6]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d102      	bne.n	8003bc8 <RSrespons_proc+0x164>
				msg.address = RS485_AD_SLEVE02;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	74bb      	strb	r3, [r7, #18]
 8003bc6:	e001      	b.n	8003bcc <RSrespons_proc+0x168>
			}
			else{
				msg.address = RS485_AD_SLEVE01;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	74bb      	strb	r3, [r7, #18]
			}

			msg.command = rt_task->command;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	789b      	ldrb	r3, [r3, #2]
 8003bd0:	73bb      	strb	r3, [r7, #14]
			msg.command_sub = rt_task->command_sub;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	889b      	ldrh	r3, [r3, #4]
 8003bd6:	823b      	strh	r3, [r7, #16]
			msg.sub1 = rt_task->sub1;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	79db      	ldrb	r3, [r3, #7]
 8003bdc:	74fb      	strb	r3, [r7, #19]

			SendMsgQue(&msg);
 8003bde:	f107 030c 	add.w	r3, r7, #12
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff fc60 	bl	80034a8 <SendMsgQue>
			Set_logInfo2("END RSrespons_OK");
		}
	}


}
 8003be8:	e002      	b.n	8003bf0 <RSrespons_proc+0x18c>
			Set_logInfo2("END RSrespons_OK");
 8003bea:	4811      	ldr	r0, [pc, #68]	; (8003c30 <RSrespons_proc+0x1cc>)
 8003bec:	f7fe fbec 	bl	80023c8 <Set_logInfo2>
}
 8003bf0:	bf00      	nop
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	08018b20 	.word	0x08018b20
 8003bfc:	20001ebc 	.word	0x20001ebc
 8003c00:	08018b40 	.word	0x08018b40
 8003c04:	08018b54 	.word	0x08018b54
 8003c08:	08018b68 	.word	0x08018b68
 8003c0c:	08018b7c 	.word	0x08018b7c
 8003c10:	08018b90 	.word	0x08018b90
 8003c14:	08018ba4 	.word	0x08018ba4
 8003c18:	08018bbc 	.word	0x08018bbc
 8003c1c:	08018bd0 	.word	0x08018bd0
 8003c20:	08018be4 	.word	0x08018be4
 8003c24:	20001ede 	.word	0x20001ede
 8003c28:	08018c04 	.word	0x08018c04
 8003c2c:	08018c14 	.word	0x08018c14
 8003c30:	08018c28 	.word	0x08018c28

08003c34 <Get_end_test_pt>:

//==============================================================================
//
//==============================================================================
uint16_t  Get_end_test_pt(uint16_t num,uint8_t *buf )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	6039      	str	r1, [r7, #0]
 8003c3e:	80fb      	strh	r3, [r7, #6]
	uint16_t	i;
	uint16_t	rtn;

	rtn = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	81bb      	strh	r3, [r7, #12]

	for( i=0; i<num; i++){
 8003c44:	2300      	movs	r3, #0
 8003c46:	81fb      	strh	r3, [r7, #14]
 8003c48:	e03c      	b.n	8003cc4 <Get_end_test_pt+0x90>
		if( (i+TEXT_LENGTH) > num ){
 8003c4a:	89fb      	ldrh	r3, [r7, #14]
 8003c4c:	1d5a      	adds	r2, r3, #5
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	db02      	blt.n	8003c5a <Get_end_test_pt+0x26>
			rtn = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	81bb      	strh	r3, [r7, #12]
			//SKprintf("None\r\n");
			break;
 8003c58:	e038      	b.n	8003ccc <Get_end_test_pt+0x98>
		}
		else if( buf[i] == message_end_text[0]
 8003c5a:	89fb      	ldrh	r3, [r7, #14]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	4413      	add	r3, r2
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	224d      	movs	r2, #77	; 0x4d
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d12a      	bne.n	8003cbe <Get_end_test_pt+0x8a>
				&& buf[i+1] == message_end_text[1]
 8003c68:	89fb      	ldrh	r3, [r7, #14]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	4413      	add	r3, r2
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2253      	movs	r2, #83	; 0x53
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d122      	bne.n	8003cbe <Get_end_test_pt+0x8a>
				&& buf[i+2] == message_end_text[2]
 8003c78:	89fb      	ldrh	r3, [r7, #14]
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2247      	movs	r2, #71	; 0x47
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d11a      	bne.n	8003cbe <Get_end_test_pt+0x8a>
				&& buf[i+3] == message_end_text[3]
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	3303      	adds	r3, #3
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	4413      	add	r3, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2245      	movs	r2, #69	; 0x45
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d112      	bne.n	8003cbe <Get_end_test_pt+0x8a>
				&& buf[i+4] == message_end_text[4]
 8003c98:	89fb      	ldrh	r3, [r7, #14]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	224e      	movs	r2, #78	; 0x4e
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10a      	bne.n	8003cbe <Get_end_test_pt+0x8a>
				&& buf[i+5] == message_end_text[5] ){
 8003ca8:	89fb      	ldrh	r3, [r7, #14]
 8003caa:	3305      	adds	r3, #5
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2244      	movs	r2, #68	; 0x44
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d102      	bne.n	8003cbe <Get_end_test_pt+0x8a>

			//SKprintf("FIX\r\n");
			rtn = i;
 8003cb8:	89fb      	ldrh	r3, [r7, #14]
 8003cba:	81bb      	strh	r3, [r7, #12]
			break;
 8003cbc:	e006      	b.n	8003ccc <Get_end_test_pt+0x98>
	for( i=0; i<num; i++){
 8003cbe:	89fb      	ldrh	r3, [r7, #14]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	81fb      	strh	r3, [r7, #14]
 8003cc4:	89fa      	ldrh	r2, [r7, #14]
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3be      	bcc.n	8003c4a <Get_end_test_pt+0x16>
		}
	}

	return rtn;
 8003ccc:	89bb      	ldrh	r3, [r7, #12]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <Set_Res_Message>:
//==============================================================================
//
//==============================================================================
RETURN_STATUS  Set_Res_Message(uint16_t num, uint8_t *src, uint8_t *dist)
{
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b089      	sub	sp, #36	; 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	81fb      	strh	r3, [r7, #14]
	RETURN_STATUS	status = RET_TRUE;
 8003cea:	2301      	movs	r3, #1
 8003cec:	77fb      	strb	r3, [r7, #31]
	uint8_t		c[2];

	//-------------------------------------------------------
	// Command buffer Clesr
	//-------------------------------------------------------
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003cee:	2300      	movs	r3, #0
 8003cf0:	83bb      	strh	r3, [r7, #28]
 8003cf2:	e006      	b.n	8003d02 <Set_Res_Message+0x26>
		Res_mesg[i] = 0;
 8003cf4:	8bbb      	ldrh	r3, [r7, #28]
 8003cf6:	4a6d      	ldr	r2, [pc, #436]	; (8003eac <Set_Res_Message+0x1d0>)
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003cfc:	8bbb      	ldrh	r3, [r7, #28]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	83bb      	strh	r3, [r7, #28]
 8003d02:	8bbb      	ldrh	r3, [r7, #28]
 8003d04:	2b21      	cmp	r3, #33	; 0x21
 8003d06:	d9f5      	bls.n	8003cf4 <Set_Res_Message+0x18>


	//-------------------------------------------------------------
	// スタートテキスト検索
	//-------------------------------------------------------------
	start = 0xffff;
 8003d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d0c:	833b      	strh	r3, [r7, #24]
	for( i=0; i<num; i++){
 8003d0e:	2300      	movs	r3, #0
 8003d10:	83bb      	strh	r3, [r7, #28]
 8003d12:	e034      	b.n	8003d7e <Set_Res_Message+0xa2>
		if( src[i] == res_start_text[0]
 8003d14:	8bbb      	ldrh	r3, [r7, #28]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4413      	add	r3, r2
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2252      	movs	r2, #82	; 0x52
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d12a      	bne.n	8003d78 <Set_Res_Message+0x9c>
				&& src[i+1] == res_start_text[1]
 8003d22:	8bbb      	ldrh	r3, [r7, #28]
 8003d24:	3301      	adds	r3, #1
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2245      	movs	r2, #69	; 0x45
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d122      	bne.n	8003d78 <Set_Res_Message+0x9c>
				&& src[i+2] == res_start_text[2]
 8003d32:	8bbb      	ldrh	r3, [r7, #28]
 8003d34:	3302      	adds	r3, #2
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2253      	movs	r2, #83	; 0x53
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d11a      	bne.n	8003d78 <Set_Res_Message+0x9c>
				&& src[i+3] == res_start_text[3]
 8003d42:	8bbb      	ldrh	r3, [r7, #28]
 8003d44:	3303      	adds	r3, #3
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4413      	add	r3, r2
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	222d      	movs	r2, #45	; 0x2d
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d112      	bne.n	8003d78 <Set_Res_Message+0x9c>
				&& src[i+4] == res_start_text[4]
 8003d52:	8bbb      	ldrh	r3, [r7, #28]
 8003d54:	3304      	adds	r3, #4
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4413      	add	r3, r2
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2253      	movs	r2, #83	; 0x53
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10a      	bne.n	8003d78 <Set_Res_Message+0x9c>
				&& src[i+5] == res_start_text[5] ){
 8003d62:	8bbb      	ldrh	r3, [r7, #28]
 8003d64:	3305      	adds	r3, #5
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	4413      	add	r3, r2
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2254      	movs	r2, #84	; 0x54
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d102      	bne.n	8003d78 <Set_Res_Message+0x9c>

			start = i;
 8003d72:	8bbb      	ldrh	r3, [r7, #28]
 8003d74:	833b      	strh	r3, [r7, #24]
			break;
 8003d76:	e006      	b.n	8003d86 <Set_Res_Message+0xaa>
	for( i=0; i<num; i++){
 8003d78:	8bbb      	ldrh	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	83bb      	strh	r3, [r7, #28]
 8003d7e:	8bba      	ldrh	r2, [r7, #28]
 8003d80:	89fb      	ldrh	r3, [r7, #14]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d3c6      	bcc.n	8003d14 <Set_Res_Message+0x38>
		}
	}

	if( start == 0xffff ){
 8003d86:	8b3b      	ldrh	r3, [r7, #24]
 8003d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d104      	bne.n	8003d9a <Set_Res_Message+0xbe>
		status = RET_FALSE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	77fb      	strb	r3, [r7, #31]
		SKprintf("Error : Respons Data start txt none \r\n");
 8003d94:	4846      	ldr	r0, [pc, #280]	; (8003eb0 <Set_Res_Message+0x1d4>)
 8003d96:	f000 fa4d 	bl	8004234 <SKprintf>
	}

	//-------------------------------------------------------------
	// エンドテキスト検索
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 8003d9a:	7ffb      	ldrb	r3, [r7, #31]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d149      	bne.n	8003e34 <Set_Res_Message+0x158>
		end = 0xffff;
 8003da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003da4:	82fb      	strh	r3, [r7, #22]
		for( i=0; i<num; i++){
 8003da6:	2300      	movs	r3, #0
 8003da8:	83bb      	strh	r3, [r7, #28]
 8003daa:	e035      	b.n	8003e18 <Set_Res_Message+0x13c>
			if( src[i] == message_end_text[0]
 8003dac:	8bbb      	ldrh	r3, [r7, #28]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	4413      	add	r3, r2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	224d      	movs	r2, #77	; 0x4d
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d12b      	bne.n	8003e12 <Set_Res_Message+0x136>
					&& src[i+1] == message_end_text[1]
 8003dba:	8bbb      	ldrh	r3, [r7, #28]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2253      	movs	r2, #83	; 0x53
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d123      	bne.n	8003e12 <Set_Res_Message+0x136>
					&& src[i+2] == message_end_text[2]
 8003dca:	8bbb      	ldrh	r3, [r7, #28]
 8003dcc:	3302      	adds	r3, #2
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2247      	movs	r2, #71	; 0x47
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d11b      	bne.n	8003e12 <Set_Res_Message+0x136>
					&& src[i+3] == message_end_text[3]
 8003dda:	8bbb      	ldrh	r3, [r7, #28]
 8003ddc:	3303      	adds	r3, #3
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	4413      	add	r3, r2
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2245      	movs	r2, #69	; 0x45
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d113      	bne.n	8003e12 <Set_Res_Message+0x136>
					&& src[i+4] == message_end_text[4]
 8003dea:	8bbb      	ldrh	r3, [r7, #28]
 8003dec:	3304      	adds	r3, #4
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	4413      	add	r3, r2
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	224e      	movs	r2, #78	; 0x4e
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10b      	bne.n	8003e12 <Set_Res_Message+0x136>
					&& src[i+5] == message_end_text[5] ){
 8003dfa:	8bbb      	ldrh	r3, [r7, #28]
 8003dfc:	3305      	adds	r3, #5
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	4413      	add	r3, r2
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2244      	movs	r2, #68	; 0x44
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d103      	bne.n	8003e12 <Set_Res_Message+0x136>

				end = i+5+1;
 8003e0a:	8bbb      	ldrh	r3, [r7, #28]
 8003e0c:	3306      	adds	r3, #6
 8003e0e:	82fb      	strh	r3, [r7, #22]
				break;
 8003e10:	e006      	b.n	8003e20 <Set_Res_Message+0x144>
		for( i=0; i<num; i++){
 8003e12:	8bbb      	ldrh	r3, [r7, #28]
 8003e14:	3301      	adds	r3, #1
 8003e16:	83bb      	strh	r3, [r7, #28]
 8003e18:	8bba      	ldrh	r2, [r7, #28]
 8003e1a:	89fb      	ldrh	r3, [r7, #14]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3c5      	bcc.n	8003dac <Set_Res_Message+0xd0>
			}
		}

		if( end == 0xffff ){
 8003e20:	8afb      	ldrh	r3, [r7, #22]
 8003e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d104      	bne.n	8003e34 <Set_Res_Message+0x158>
			status = RET_FALSE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	77fb      	strb	r3, [r7, #31]
			SKprintf("Error : Respons Data end txt none \r\n");
 8003e2e:	4821      	ldr	r0, [pc, #132]	; (8003eb4 <Set_Res_Message+0x1d8>)
 8003e30:	f000 fa00 	bl	8004234 <SKprintf>
		}
	}
	//-------------------------------------------------------------
	// Res[]に転送
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 8003e34:	7ffb      	ldrb	r3, [r7, #31]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d11f      	bne.n	8003e7a <Set_Res_Message+0x19e>
		j = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	837b      	strh	r3, [r7, #26]
		for( i=start; i < end; i++){
 8003e3e:	8b3b      	ldrh	r3, [r7, #24]
 8003e40:	83bb      	strh	r3, [r7, #28]
 8003e42:	e016      	b.n	8003e72 <Set_Res_Message+0x196>
			if( j < COM_TABLE_MAX ){
 8003e44:	8b7b      	ldrh	r3, [r7, #26]
 8003e46:	2b21      	cmp	r3, #33	; 0x21
 8003e48:	d808      	bhi.n	8003e5c <Set_Res_Message+0x180>
				dist[j] = src[i];
 8003e4a:	8bbb      	ldrh	r3, [r7, #28]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	441a      	add	r2, r3
 8003e50:	8b7b      	ldrh	r3, [r7, #26]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	440b      	add	r3, r1
 8003e56:	7812      	ldrb	r2, [r2, #0]
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e004      	b.n	8003e66 <Set_Res_Message+0x18a>
			}
			else{
				status = RET_FALSE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77fb      	strb	r3, [r7, #31]
				SKprintf("Error : Respons data size over\r\n");
 8003e60:	4815      	ldr	r0, [pc, #84]	; (8003eb8 <Set_Res_Message+0x1dc>)
 8003e62:	f000 f9e7 	bl	8004234 <SKprintf>
			}
			j++;
 8003e66:	8b7b      	ldrh	r3, [r7, #26]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	837b      	strh	r3, [r7, #26]
		for( i=start; i < end; i++){
 8003e6c:	8bbb      	ldrh	r3, [r7, #28]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	83bb      	strh	r3, [r7, #28]
 8003e72:	8bba      	ldrh	r2, [r7, #28]
 8003e74:	8afb      	ldrh	r3, [r7, #22]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d3e4      	bcc.n	8003e44 <Set_Res_Message+0x168>
		}
	}
	//-------------------------------------------------------------
	// チェックサム確認
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 8003e7a:	7ffb      	ldrb	r3, [r7, #31]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10f      	bne.n	8003ea0 <Set_Res_Message+0x1c4>
		if( dist[COM_CHKSUM] !=Get_command_chksum(COM_COUNTER_L, COM_CHKSUM_ID, dist)){
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	331b      	adds	r3, #27
 8003e84:	781c      	ldrb	r4, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	211a      	movs	r1, #26
 8003e8a:	2006      	movs	r0, #6
 8003e8c:	f000 f818 	bl	8003ec0 <Get_command_chksum>
 8003e90:	4603      	mov	r3, r0
 8003e92:	429c      	cmp	r4, r3
 8003e94:	d004      	beq.n	8003ea0 <Set_Res_Message+0x1c4>
			status = RET_FALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	77fb      	strb	r3, [r7, #31]
			SKprintf("Error : Respons data chksum eoor");
 8003e9a:	4808      	ldr	r0, [pc, #32]	; (8003ebc <Set_Res_Message+0x1e0>)
 8003e9c:	f000 f9ca 	bl	8004234 <SKprintf>
	}
	SKprintf("\r\n");
#endif	// __COM_LOG_DISPLAY


	return status;
 8003ea0:	7ffb      	ldrb	r3, [r7, #31]

}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	; 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd90      	pop	{r4, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20001ebc 	.word	0x20001ebc
 8003eb0:	08018c3c 	.word	0x08018c3c
 8003eb4:	08018c64 	.word	0x08018c64
 8003eb8:	08018c8c 	.word	0x08018c8c
 8003ebc:	08018cb0 	.word	0x08018cb0

08003ec0 <Get_command_chksum>:
//==============================================================================
//
//=============================================================================
uint8_t Get_command_chksum(uint8_t start, uint8_t end,uint8_t *dt )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	603a      	str	r2, [r7, #0]
 8003eca:	71fb      	strb	r3, [r7, #7]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	71bb      	strb	r3, [r7, #6]
	uint8_t		sum = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]
	uint8_t		i;

	for( i=start; i<end; i++){
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	73bb      	strb	r3, [r7, #14]
 8003ed8:	e009      	b.n	8003eee <Get_command_chksum+0x2e>
		sum += dt[i];
 8003eda:	7bbb      	ldrb	r3, [r7, #14]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	73fb      	strb	r3, [r7, #15]
	for( i=start; i<end; i++){
 8003ee8:	7bbb      	ldrb	r3, [r7, #14]
 8003eea:	3301      	adds	r3, #1
 8003eec:	73bb      	strb	r3, [r7, #14]
 8003eee:	7bba      	ldrb	r2, [r7, #14]
 8003ef0:	79bb      	ldrb	r3, [r7, #6]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d3f1      	bcc.n	8003eda <Get_command_chksum+0x1a>
		//SKprintf("%02x ", dt[i]);
	}
	//SKprintf(" sum=%02x\r\n",sum);

	return sum;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <Send_rx485_cmd_message>:
//==============================================================================
//
//==============================================================================

RETURN_STATUS Send_rx485_cmd_message( CMD_MSG	 *com_msg )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	RETURN_STATUS	status = RET_TRUE;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73bb      	strb	r3, [r7, #14]
	uint8_t		*pt;

	//-------------------------------------------------------
	// Command buffer Clesr
	//-------------------------------------------------------
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	e006      	b.n	8003f24 <Send_rx485_cmd_message+0x20>
		Cmd_mesg[i] = 0;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	4a45      	ldr	r2, [pc, #276]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	3301      	adds	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b21      	cmp	r3, #33	; 0x21
 8003f28:	d9f5      	bls.n	8003f16 <Send_rx485_cmd_message+0x12>
	}

	//-------------------------------------------------------
	// START Text
	//-------------------------------------------------------
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
 8003f2e:	e00a      	b.n	8003f46 <Send_rx485_cmd_message+0x42>
		j = COM_START_TXT_00 + i ;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	737b      	strb	r3, [r7, #13]
		Cmd_mesg[j] = com_start_text[i];
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	7b7b      	ldrb	r3, [r7, #13]
 8003f38:	493e      	ldr	r1, [pc, #248]	; (8004034 <Send_rx485_cmd_message+0x130>)
 8003f3a:	5c89      	ldrb	r1, [r1, r2]
 8003f3c:	4a3c      	ldr	r2, [pc, #240]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f3e:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	3301      	adds	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d9f1      	bls.n	8003f30 <Send_rx485_cmd_message+0x2c>
	}

	//-------------------------------------------------------
	// 通信カウンタ
	//-------------------------------------------------------
	com_counter ++;
 8003f4c:	4b3a      	ldr	r3, [pc, #232]	; (8004038 <Send_rx485_cmd_message+0x134>)
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	3301      	adds	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	4b38      	ldr	r3, [pc, #224]	; (8004038 <Send_rx485_cmd_message+0x134>)
 8003f56:	801a      	strh	r2, [r3, #0]
	Cmd_mesg[COM_COUNTER_L] = (uint8_t)com_counter;
 8003f58:	4b37      	ldr	r3, [pc, #220]	; (8004038 <Send_rx485_cmd_message+0x134>)
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4b34      	ldr	r3, [pc, #208]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f60:	719a      	strb	r2, [r3, #6]
	Cmd_mesg[COM_COUNTER_H] = (uint8_t)(com_counter >> 8);
 8003f62:	4b35      	ldr	r3, [pc, #212]	; (8004038 <Send_rx485_cmd_message+0x134>)
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	4b30      	ldr	r3, [pc, #192]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f6e:	71da      	strb	r2, [r3, #7]

	//-------------------------------------------------------
	// アドレス
	//-------------------------------------------------------
	Cmd_mesg[COM_ADDRESS_ID] = '#';
 8003f70:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f72:	2223      	movs	r2, #35	; 0x23
 8003f74:	721a      	strb	r2, [r3, #8]
	Cmd_mesg[COM_ADDRESS_DIST] = com_msg->address;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	799a      	ldrb	r2, [r3, #6]
 8003f7a:	4b2d      	ldr	r3, [pc, #180]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f7c:	725a      	strb	r2, [r3, #9]
	Cmd_mesg[COM_ADDRESS_SORC] =  MY_RS485_ADDRESS;
 8003f7e:	4b2c      	ldr	r3, [pc, #176]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	729a      	strb	r2, [r3, #10]

	//-------------------------------------------------------
	// コマンド
	//-------------------------------------------------------
	Cmd_mesg[COM_COMMAND_ID] = '*';
 8003f84:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f86:	222a      	movs	r2, #42	; 0x2a
 8003f88:	731a      	strb	r2, [r3, #12]
	Cmd_mesg[COM_COMMAND] = com_msg->command;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	789a      	ldrb	r2, [r3, #2]
 8003f8e:	4b28      	ldr	r3, [pc, #160]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003f90:	735a      	strb	r2, [r3, #13]

	switch(com_msg->command){
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	789b      	ldrb	r3, [r3, #2]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d815      	bhi.n	8003fc8 <Send_rx485_cmd_message+0xc4>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <Send_rx485_cmd_message+0xa0>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fc9 	.word	0x08003fc9
 8003fac:	08003fb5 	.word	0x08003fb5
 8003fb0:	08003fbf 	.word	0x08003fbf
	case RS485_CMD_STATUS:
		break;
	case RS485_CMD_VERSION:
		break;
	case RS485_CMD_MESUR:
		Cmd_mesg[COM_SENS_CTRL] = com_msg->sub1;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	79da      	ldrb	r2, [r3, #7]
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003fba:	73da      	strb	r2, [r3, #15]
		break;
 8003fbc:	e005      	b.n	8003fca <Send_rx485_cmd_message+0xc6>
	case RS485_CMD_MESUR_DATA:
		Cmd_mesg[COM_DATA_KIND ] = com_msg->sub1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	79da      	ldrb	r2, [r3, #7]
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003fc4:	73da      	strb	r2, [r3, #15]
		break;
 8003fc6:	e000      	b.n	8003fca <Send_rx485_cmd_message+0xc6>
	default:
		break;
 8003fc8:	bf00      	nop
	}

	//-------------------------------------------------------
	// チェックサム計算
	//-------------------------------------------------------
	Cmd_mesg[COM_CHKSUM_ID] = '$';
 8003fca:	4b19      	ldr	r3, [pc, #100]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003fcc:	2224      	movs	r2, #36	; 0x24
 8003fce:	769a      	strb	r2, [r3, #26]
	Cmd_mesg[COM_CHKSUM] = Get_command_chksum(COM_COUNTER_L, COM_CHKSUM_ID, Cmd_mesg);
 8003fd0:	4a17      	ldr	r2, [pc, #92]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003fd2:	211a      	movs	r1, #26
 8003fd4:	2006      	movs	r0, #6
 8003fd6:	f7ff ff73 	bl	8003ec0 <Get_command_chksum>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b14      	ldr	r3, [pc, #80]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003fe0:	76da      	strb	r2, [r3, #27]

	//-------------------------------------------------------
	// END Text
	//-------------------------------------------------------
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	e00b      	b.n	8004000 <Send_rx485_cmd_message+0xfc>
			j = COM_END_TXT_00 + i ;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	331c      	adds	r3, #28
 8003fec:	737b      	strb	r3, [r7, #13]
			Cmd_mesg[j] = message_end_text[i];
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	7b7b      	ldrb	r3, [r7, #13]
 8003ff2:	4912      	ldr	r1, [pc, #72]	; (800403c <Send_rx485_cmd_message+0x138>)
 8003ff4:	5c89      	ldrb	r1, [r1, r2]
 8003ff6:	4a0e      	ldr	r2, [pc, #56]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8003ff8:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b05      	cmp	r3, #5
 8004004:	d9f0      	bls.n	8003fe8 <Send_rx485_cmd_message+0xe4>
#endif //__COM_LOG_DISPLAY

	//-------------------------------------------------------
	// コマンド送信
	//-------------------------------------------------------
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RS485_TX);
 8004006:	2201      	movs	r2, #1
 8004008:	2120      	movs	r1, #32
 800400a:	480d      	ldr	r0, [pc, #52]	; (8004040 <Send_rx485_cmd_message+0x13c>)
 800400c:	f008 fa06 	bl	800c41c <HAL_GPIO_WritePin>
	status = Send_rs485((uint8_t *)Cmd_mesg, COM_TABLE_MAX );
 8004010:	2122      	movs	r1, #34	; 0x22
 8004012:	4807      	ldr	r0, [pc, #28]	; (8004030 <Send_rx485_cmd_message+0x12c>)
 8004014:	f000 f848 	bl	80040a8 <Send_rs485>
 8004018:	4603      	mov	r3, r0
 800401a:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RS485_RX);
 800401c:	2200      	movs	r2, #0
 800401e:	2120      	movs	r1, #32
 8004020:	4807      	ldr	r0, [pc, #28]	; (8004040 <Send_rx485_cmd_message+0x13c>)
 8004022:	f008 f9fb 	bl	800c41c <HAL_GPIO_WritePin>


	return status;
 8004026:	7bbb      	ldrb	r3, [r7, #14]

}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20001e98 	.word	0x20001e98
 8004034:	0801a3a8 	.word	0x0801a3a8
 8004038:	20001ee0 	.word	0x20001ee0
 800403c:	0801a3b0 	.word	0x0801a3b0
 8004040:	40020000 	.word	0x40020000

08004044 <Get_huart>:
//==============================================================================
//
//==============================================================================

UART_HandleTypeDef * Get_huart(SK_UART sel)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
	return UartList[sel].huart;
 800404e:	79fa      	ldrb	r2, [r7, #7]
 8004050:	4906      	ldr	r1, [pc, #24]	; (800406c <Get_huart+0x28>)
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	440b      	add	r3, r1
 800405c:	330c      	adds	r3, #12
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	0801a3b8 	.word	0x0801a3b8

08004070 <Get_uart_port>:
//==============================================================================
//
//==============================================================================

SK_UART	Get_uart_port(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	SK_UART	rtn;

	if( UartList[0].huart == huart){
 8004078:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <Get_uart_port+0x30>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4293      	cmp	r3, r2
 800407e:	d102      	bne.n	8004086 <Get_uart_port+0x16>
		rtn = SK_UART1_RS485 ;
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	e005      	b.n	8004092 <Get_uart_port+0x22>
	}
	else if( UartList[1].huart == huart){
 8004086:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <Get_uart_port+0x34>)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <Get_uart_port+0x22>
		rtn = SK_UART2_DEBUG;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
	}

	return rtn;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20002300 	.word	0x20002300
 80040a4:	20002344 	.word	0x20002344

080040a8 <Send_rs485>:
//==============================================================================
//
//==============================================================================
RETURN_STATUS Send_rs485(uint8_t *pData, uint16_t Size)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
	RETURN_STATUS status = RET_TRUE;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef s;

	//SKprintf("Send_rs485() size=%d\r\n",Size);
	s= HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, pData, Size, HAL_MAX_DELAY);
 80040b8:	480f      	ldr	r0, [pc, #60]	; (80040f8 <Send_rs485+0x50>)
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	f00c fc94 	bl	80109ee <HAL_UART_Transmit>
 80040c6:	4603      	mov	r3, r0
 80040c8:	73bb      	strb	r3, [r7, #14]

	switch(s){
 80040ca:	7bbb      	ldrb	r3, [r7, #14]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00d      	beq.n	80040ec <Send_rs485+0x44>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	db0c      	blt.n	80040ee <Send_rs485+0x46>
 80040d4:	3b01      	subs	r3, #1
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d809      	bhi.n	80040ee <Send_rs485+0x46>
	case HAL_OK:
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		status = RET_FALSE;
 80040da:	2300      	movs	r3, #0
 80040dc:	73fb      	strb	r3, [r7, #15]
		SKprintf("ERROR %s RS485 TRANSMIT = %d\r\n",UartList[SK_UART1_RS485].name, s);
 80040de:	7bbb      	ldrb	r3, [r7, #14]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4906      	ldr	r1, [pc, #24]	; (80040fc <Send_rs485+0x54>)
 80040e4:	4806      	ldr	r0, [pc, #24]	; (8004100 <Send_rs485+0x58>)
 80040e6:	f000 f8a5 	bl	8004234 <SKprintf>
		break;
 80040ea:	e000      	b.n	80040ee <Send_rs485+0x46>
		break;
 80040ec:	bf00      	nop
	}

	return status;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]

}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20002300 	.word	0x20002300
 80040fc:	0801a3b9 	.word	0x0801a3b9
 8004100:	08018cd4 	.word	0x08018cd4

08004104 <uart_Data_init>:

//==============================================================================
//
//==============================================================================
void uart_Data_init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
	SKprintf("uart_Data_init()\r\n");
 8004108:	4811      	ldr	r0, [pc, #68]	; (8004150 <uart_Data_init+0x4c>)
 800410a:	f000 f893 	bl	8004234 <SKprintf>
	Set_logInfo2("uart_Data_init()");
 800410e:	4811      	ldr	r0, [pc, #68]	; (8004154 <uart_Data_init+0x50>)
 8004110:	f7fe f95a 	bl	80023c8 <Set_logInfo2>

	uart[SK_UART1_RS485].rcv_wpt = 0;
 8004114:	4b10      	ldr	r3, [pc, #64]	; (8004158 <uart_Data_init+0x54>)
 8004116:	2200      	movs	r2, #0
 8004118:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	uart[SK_UART1_RS485].rcv_rpt = 0;
 800411c:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <uart_Data_init+0x54>)
 800411e:	2200      	movs	r2, #0
 8004120:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	uart[SK_UART1_RS485].rcvnum = 0;
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <uart_Data_init+0x54>)
 8004126:	2200      	movs	r2, #0
 8004128:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	uart[SK_UART2_DEBUG].rcv_wpt = 0;
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <uart_Data_init+0x54>)
 800412e:	2200      	movs	r2, #0
 8004130:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	uart[SK_UART2_DEBUG].rcv_rpt = 0;
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <uart_Data_init+0x54>)
 8004136:	2200      	movs	r2, #0
 8004138:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	uart[SK_UART2_DEBUG].rcvnum = 0;
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <uart_Data_init+0x54>)
 800413e:	2200      	movs	r2, #0
 8004140:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

	esc.ptr = 0;
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <uart_Data_init+0x58>)
 8004146:	2200      	movs	r2, #0
 8004148:	729a      	strb	r2, [r3, #10]
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	08018cf4 	.word	0x08018cf4
 8004154:	08018d08 	.word	0x08018d08
 8004158:	20001d78 	.word	0x20001d78
 800415c:	20001ee4 	.word	0x20001ee4

08004160 <uart_Rcv_init>:
//	huart2: デバックモニター用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
void uart_Rcv_init(SK_UART sel)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef s;

	//SKprintf("uart_Rcv_init(%d)\r\n",sel);
	//Set_logInfo("uart_Rcv_init()");
	s= HAL_UART_Receive_IT(Get_huart(sel), &uart[sel].rcv_dt[0], 1);
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff ff69 	bl	8004044 <Get_huart>
 8004172:	79fa      	ldrb	r2, [r7, #7]
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <uart_Rcv_init+0x48>)
 800417e:	4413      	add	r3, r2
 8004180:	2201      	movs	r2, #1
 8004182:	4619      	mov	r1, r3
 8004184:	f00c fcc5 	bl	8010b12 <HAL_UART_Receive_IT>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]

	switch(s){
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <uart_Rcv_init+0x3e>
 8004192:	2b00      	cmp	r3, #0
 8004194:	db04      	blt.n	80041a0 <uart_Rcv_init+0x40>
 8004196:	3b01      	subs	r3, #1
 8004198:	2b02      	cmp	r3, #2
 800419a:	d801      	bhi.n	80041a0 <uart_Rcv_init+0x40>
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		//SKprintf("ERROR %s RECIVE = %d\r\n",UartList[sel].name, s);
		break;
 800419c:	e000      	b.n	80041a0 <uart_Rcv_init+0x40>
		break;
 800419e:	bf00      	nop
	}
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20001d78 	.word	0x20001d78

080041ac <SKprintf_uart1>:
//	huart1： RS485用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
int	SKprintf_uart1 (const char *string, ...)
{
 80041ac:	b40f      	push	{r0, r1, r2, r3}
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );
 80041b4:	bf00      	nop
 80041b6:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <SKprintf_uart1+0x7c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1fb      	bne.n	80041b6 <SKprintf_uart1+0xa>

//	buffer = (char *)pvPortMalloc(CHARA_MAX);
	buffer = Skprintf_buf;
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <SKprintf_uart1+0x80>)
 80041c0:	60bb      	str	r3, [r7, #8]


	if( buffer != NULL ){
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d023      	beq.n	8004210 <SKprintf_uart1+0x64>

		Sem_Printf = 1;
 80041c8:	4b17      	ldr	r3, [pc, #92]	; (8004228 <SKprintf_uart1+0x7c>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
 80041ce:	f107 031c 	add.w	r3, r7, #28
 80041d2:	607b      	str	r3, [r7, #4]
		vsprintf(buffer, string, ap);
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	68b8      	ldr	r0, [r7, #8]
 80041da:	f011 fae5 	bl	80157a8 <vsiprintf>
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e008      	b.n	80041f6 <SKprintf_uart1+0x4a>
			if(buffer[i] == '\0'){
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4413      	add	r3, r2
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d006      	beq.n	80041fe <SKprintf_uart1+0x52>
		for(i=0; i<CHARA_MAX; i++){
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3301      	adds	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2bff      	cmp	r3, #255	; 0xff
 80041fa:	ddf3      	ble.n	80041e4 <SKprintf_uart1+0x38>
 80041fc:	e000      	b.n	8004200 <SKprintf_uart1+0x54>
				break;
 80041fe:	bf00      	nop
			}
		}
		HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, buffer, i, HAL_MAX_DELAY);
 8004200:	480b      	ldr	r0, [pc, #44]	; (8004230 <SKprintf_uart1+0x84>)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	b29a      	uxth	r2, r3
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	f00c fbef 	bl	80109ee <HAL_UART_Transmit>

	}

	//vPortFree(buffer);

	Sem_Printf = 0;
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <SKprintf_uart1+0x7c>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]

}
 8004216:	bf00      	nop
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004222:	b004      	add	sp, #16
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20001efc 	.word	0x20001efc
 800422c:	20001f10 	.word	0x20001f10
 8004230:	20002300 	.word	0x20002300

08004234 <SKprintf>:
// 総和を求める関数（値は int 型を想定）
// n は、渡す引数の数、それ以降は計算する値です。
//==============================================================================

int	SKprintf (const char *string, ...)
{
 8004234:	b40f      	push	{r0, r1, r2, r3}
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );
 800423c:	bf00      	nop
 800423e:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <SKprintf+0x7c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1fb      	bne.n	800423e <SKprintf+0xa>

//	buffer = (char *)pvPortMalloc(CHARA_MAX);
	buffer = Skprintf_buf;
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <SKprintf+0x80>)
 8004248:	60bb      	str	r3, [r7, #8]

	if( buffer != NULL ){
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d023      	beq.n	8004298 <SKprintf+0x64>

		Sem_Printf = 1;
 8004250:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <SKprintf+0x7c>)
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
 8004256:	f107 031c 	add.w	r3, r7, #28
 800425a:	607b      	str	r3, [r7, #4]
		vsprintf(buffer, string, ap);
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	69b9      	ldr	r1, [r7, #24]
 8004260:	68b8      	ldr	r0, [r7, #8]
 8004262:	f011 faa1 	bl	80157a8 <vsiprintf>
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e008      	b.n	800427e <SKprintf+0x4a>
			if(buffer[i] == '\0'){
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	4413      	add	r3, r2
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d006      	beq.n	8004286 <SKprintf+0x52>
		for(i=0; i<CHARA_MAX; i++){
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2bff      	cmp	r3, #255	; 0xff
 8004282:	ddf3      	ble.n	800426c <SKprintf+0x38>
 8004284:	e000      	b.n	8004288 <SKprintf+0x54>
				break;
 8004286:	bf00      	nop
			}
		}
		HAL_UART_Transmit(UartList[SK_UART2_DEBUG].huart, buffer, i, HAL_MAX_DELAY);
 8004288:	480b      	ldr	r0, [pc, #44]	; (80042b8 <SKprintf+0x84>)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	b29a      	uxth	r2, r3
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	f00c fbab 	bl	80109ee <HAL_UART_Transmit>

	}

//	vPortFree(buffer);

	Sem_Printf = 0;
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <SKprintf+0x7c>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

}
 800429e:	bf00      	nop
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042aa:	b004      	add	sp, #16
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20001efc 	.word	0x20001efc
 80042b4:	20001f10 	.word	0x20001f10
 80042b8:	20002344 	.word	0x20002344

080042bc <getch>:
//==============================================================================
//
//
//==============================================================================
int getch(SK_UART id)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
	int rtn = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]

	if( uart[SK_UART2_DEBUG].rcvnum  > 0 ){
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <getch+0x2c>)
 80042cc:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <getch+0x20>

		//SKprintf("DATA RECIVED \r\n");
		rtn = Get_rcv_data(SK_UART2_DEBUG);
 80042d4:	2001      	movs	r0, #1
 80042d6:	f7fe ffc7 	bl	8003268 <Get_rcv_data>
 80042da:	60f8      	str	r0, [r7, #12]
	}

	return rtn;
 80042dc:	68fb      	ldr	r3, [r7, #12]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20001d78 	.word	0x20001d78

080042ec <vl53_init>:
//==============================================================================
//
//==============================================================================

void vl53_init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0

	VL53L0X_Error	Status = VL53L0X_ERROR_NONE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	71fb      	strb	r3, [r7, #7]


	Dev->I2cHandle = &hi2c1;
 80042f6:	4b87      	ldr	r3, [pc, #540]	; (8004514 <vl53_init+0x228>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a87      	ldr	r2, [pc, #540]	; (8004518 <vl53_init+0x22c>)
 80042fc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	Dev->I2cDevAddr = 0x52;
 8004300:	4b84      	ldr	r3, [pc, #528]	; (8004514 <vl53_init+0x228>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2252      	movs	r2, #82	; 0x52
 8004306:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
	//
	// VL53L0X init for Single Measurement
	//

	while(1){
		Status = VL53L0X_WaitDeviceBooted( Dev );
 800430a:	4b82      	ldr	r3, [pc, #520]	; (8004514 <vl53_init+0x228>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f001 fc7e 	bl	8005c10 <VL53L0X_WaitDeviceBooted>
 8004314:	4603      	mov	r3, r0
 8004316:	71fb      	strb	r3, [r7, #7]

		if(Status != VL53L0X_ERROR_NONE){
 8004318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d006      	beq.n	800432e <vl53_init+0x42>
			SKprintf("Error :VL53L0X_WaitDeviceBooted() %d\r\n", Status);
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	4619      	mov	r1, r3
 8004326:	487d      	ldr	r0, [pc, #500]	; (800451c <vl53_init+0x230>)
 8004328:	f7ff ff84 	bl	8004234 <SKprintf>
			break;
 800432c:	e0ed      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_DataInit( Dev );
 800432e:	4b79      	ldr	r3, [pc, #484]	; (8004514 <vl53_init+0x228>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f001 f93a 	bl	80055ac <VL53L0X_DataInit>
 8004338:	4603      	mov	r3, r0
 800433a:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 800433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d006      	beq.n	8004352 <vl53_init+0x66>
			SKprintf("Error :VL53L0X_DataInit() %d\r\n", Status);
 8004344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004348:	4619      	mov	r1, r3
 800434a:	4875      	ldr	r0, [pc, #468]	; (8004520 <vl53_init+0x234>)
 800434c:	f7ff ff72 	bl	8004234 <SKprintf>
			break;
 8004350:	e0db      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_StaticInit( Dev );
 8004352:	4b70      	ldr	r3, [pc, #448]	; (8004514 <vl53_init+0x228>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f001 fad6 	bl	8005908 <VL53L0X_StaticInit>
 800435c:	4603      	mov	r3, r0
 800435e:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 8004360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d006      	beq.n	8004376 <vl53_init+0x8a>
			SKprintf("Error :VL53L0X_StaticInit() %d\r\n", Status);
 8004368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436c:	4619      	mov	r1, r3
 800436e:	486d      	ldr	r0, [pc, #436]	; (8004524 <vl53_init+0x238>)
 8004370:	f7ff ff60 	bl	8004234 <SKprintf>
			break;
 8004374:	e0c9      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8004376:	4b67      	ldr	r3, [pc, #412]	; (8004514 <vl53_init+0x228>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a6b      	ldr	r2, [pc, #428]	; (8004528 <vl53_init+0x23c>)
 800437c:	496b      	ldr	r1, [pc, #428]	; (800452c <vl53_init+0x240>)
 800437e:	4618      	mov	r0, r3
 8004380:	f002 fa02 	bl	8006788 <VL53L0X_PerformRefCalibration>
 8004384:	4603      	mov	r3, r0
 8004386:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 8004388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d006      	beq.n	800439e <vl53_init+0xb2>
			SKprintf("Error :VL53L0X_PerformRefCalibration() %d\r\n", Status);
 8004390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004394:	4619      	mov	r1, r3
 8004396:	4866      	ldr	r0, [pc, #408]	; (8004530 <vl53_init+0x244>)
 8004398:	f7ff ff4c 	bl	8004234 <SKprintf>
			break;
 800439c:	e0b5      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 800439e:	4b5d      	ldr	r3, [pc, #372]	; (8004514 <vl53_init+0x228>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a64      	ldr	r2, [pc, #400]	; (8004534 <vl53_init+0x248>)
 80043a4:	4964      	ldr	r1, [pc, #400]	; (8004538 <vl53_init+0x24c>)
 80043a6:	4618      	mov	r0, r3
 80043a8:	f002 ffb9 	bl	800731e <VL53L0X_PerformRefSpadManagement>
 80043ac:	4603      	mov	r3, r0
 80043ae:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 80043b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d006      	beq.n	80043c6 <vl53_init+0xda>
			SKprintf("Error :VL53L0X_PerformRefSpadManagement() %d\r\n", Status);
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	4619      	mov	r1, r3
 80043be:	485f      	ldr	r0, [pc, #380]	; (800453c <vl53_init+0x250>)
 80043c0:	f7ff ff38 	bl	8004234 <SKprintf>
			break;
 80043c4:	e0a1      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80043c6:	4b53      	ldr	r3, [pc, #332]	; (8004514 <vl53_init+0x228>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fce3 	bl	8005d98 <VL53L0X_SetDeviceMode>
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]

		}

		if(Status != VL53L0X_ERROR_NONE){
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <vl53_init+0x100>
			SKprintf("Error :VL53L0X_SetDeviceMode() %d\r\n", Status);
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	4619      	mov	r1, r3
 80043e4:	4856      	ldr	r0, [pc, #344]	; (8004540 <vl53_init+0x254>)
 80043e6:	f7ff ff25 	bl	8004234 <SKprintf>
			break;
 80043ea:	e08e      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			// Enable/Disable Sigma and Signal check
			Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80043ec:	4b49      	ldr	r3, [pc, #292]	; (8004514 <vl53_init+0x228>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2201      	movs	r2, #1
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 ff4b 	bl	8006290 <VL53L0X_SetLimitCheckEnable>
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 80043fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d006      	beq.n	8004414 <vl53_init+0x128>
			SKprintf("Error :VL53L0X_SetLimitCheckEnable() %d\r\n", Status);
 8004406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440a:	4619      	mov	r1, r3
 800440c:	484d      	ldr	r0, [pc, #308]	; (8004544 <vl53_init+0x258>)
 800440e:	f7ff ff11 	bl	8004234 <SKprintf>
			break;
 8004412:	e07a      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8004414:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <vl53_init+0x228>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f001 ff37 	bl	8006290 <VL53L0X_SetLimitCheckEnable>
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d006      	beq.n	800443c <vl53_init+0x150>
			SKprintf("Error :VL53L0X_SetLimitCheckEnable() %d\r\n", Status);
 800442e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004432:	4619      	mov	r1, r3
 8004434:	4843      	ldr	r0, [pc, #268]	; (8004544 <vl53_init+0x258>)
 8004436:	f7ff fefd 	bl	8004234 <SKprintf>
			break;
 800443a:	e066      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <vl53_init+0x228>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f641 1299 	movw	r2, #6553	; 0x1999
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f001 ffd2 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 800444c:	4603      	mov	r3, r0
 800444e:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <vl53_init+0x17a>
			SKprintf("Error :VL53L0X_SetLimitCheckValue() %d\r\n", Status);
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	4619      	mov	r1, r3
 800445e:	483a      	ldr	r0, [pc, #232]	; (8004548 <vl53_init+0x25c>)
 8004460:	f7ff fee8 	bl	8004234 <SKprintf>
			break;
 8004464:	e051      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8004466:	4b2b      	ldr	r3, [pc, #172]	; (8004514 <vl53_init+0x228>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f001 ffbd 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d006      	beq.n	8004490 <vl53_init+0x1a4>
			SKprintf("Error :VL53L0X_SetLimitCheckValue() %d\r\n", Status);
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	4619      	mov	r1, r3
 8004488:	482f      	ldr	r0, [pc, #188]	; (8004548 <vl53_init+0x25c>)
 800448a:	f7ff fed3 	bl	8004234 <SKprintf>
			break;
 800448e:	e03c      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8004490:	4b20      	ldr	r3, [pc, #128]	; (8004514 <vl53_init+0x228>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8004498:	4618      	mov	r0, r3
 800449a:	f001 fcdb 	bl	8005e54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d006      	beq.n	80044b8 <vl53_init+0x1cc>
			SKprintf("Error :VL53L0X_SetMeasurementTimingBudgetMicroSeconds() %d\r\n", Status);
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	4619      	mov	r1, r3
 80044b0:	4826      	ldr	r0, [pc, #152]	; (800454c <vl53_init+0x260>)
 80044b2:	f7ff febf 	bl	8004234 <SKprintf>
			break;
 80044b6:	e028      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80044b8:	4b16      	ldr	r3, [pc, #88]	; (8004514 <vl53_init+0x228>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2212      	movs	r2, #18
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fced 	bl	8005ea0 <VL53L0X_SetVcselPulsePeriod>
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <vl53_init+0x1f4>
			SKprintf("Error :VL53L0X_SetVcselPulsePeriod() %d\r\n", Status);
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	4619      	mov	r1, r3
 80044d8:	481d      	ldr	r0, [pc, #116]	; (8004550 <vl53_init+0x264>)
 80044da:	f7ff feab 	bl	8004234 <SKprintf>
			break;
 80044de:	e014      	b.n	800450a <vl53_init+0x21e>
		}
		else{
			Status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <vl53_init+0x228>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	220e      	movs	r2, #14
 80044e6:	2101      	movs	r1, #1
 80044e8:	4618      	mov	r0, r3
 80044ea:	f001 fcd9 	bl	8005ea0 <VL53L0X_SetVcselPulsePeriod>
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
		}

		if(Status != VL53L0X_ERROR_NONE){
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <vl53_init+0x21c>
			SKprintf("Error :VL53L0X_SetVcselPulsePeriod() %d\r\n", Status);
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	4619      	mov	r1, r3
 8004500:	4813      	ldr	r0, [pc, #76]	; (8004550 <vl53_init+0x264>)
 8004502:	f7ff fe97 	bl	8004234 <SKprintf>
			break;
 8004506:	e000      	b.n	800450a <vl53_init+0x21e>
		}

		break;
 8004508:	bf00      	nop
	}
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000050 	.word	0x20000050
 8004518:	200021fc 	.word	0x200021fc
 800451c:	08018d1c 	.word	0x08018d1c
 8004520:	08018d44 	.word	0x08018d44
 8004524:	08018d64 	.word	0x08018d64
 8004528:	20002016 	.word	0x20002016
 800452c:	20002015 	.word	0x20002015
 8004530:	08018d88 	.word	0x08018d88
 8004534:	20002014 	.word	0x20002014
 8004538:	20002010 	.word	0x20002010
 800453c:	08018db4 	.word	0x08018db4
 8004540:	08018de4 	.word	0x08018de4
 8004544:	08018e08 	.word	0x08018e08
 8004548:	08018e34 	.word	0x08018e34
 800454c:	08018e60 	.word	0x08018e60
 8004550:	08018ea0 	.word	0x08018ea0

08004554 <print_pal_error>:
//==============================================================================
//
//==============================================================================
void print_pal_error(VL53L0X_Error Status){
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
    char buf[VL53L0X_MAX_STRING_LENGTH];

    if( Status != 0 ){
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00f      	beq.n	8004586 <print_pal_error+0x32>
    VL53L0X_GetPalErrorString(Status, buf);
 8004566:	f107 0208 	add.w	r2, r7, #8
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fff2 	bl	800555a <VL53L0X_GetPalErrorString>
    SKprintf("API Status: %i : %s\r\n", Status, buf);
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	f107 0208 	add.w	r2, r7, #8
 800457e:	4619      	mov	r1, r3
 8004580:	4803      	ldr	r0, [pc, #12]	; (8004590 <print_pal_error+0x3c>)
 8004582:	f7ff fe57 	bl	8004234 <SKprintf>

    }
}
 8004586:	bf00      	nop
 8004588:	3728      	adds	r7, #40	; 0x28
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	08018ecc 	.word	0x08018ecc

08004594 <vl53_main>:
//==============================================================================
//
//==============================================================================
void vl53_main(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
vl53l0x_Racing_test(RASING_MODE_SINGLE_HS);
vl53l0x_Racing_test(RASING_MODE_SINGLE_LR);
vl53l0x_Racing_test(RASING_MODE_CONTINUE);
#endif

}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <vl53_mesure_new_proc>:
//==============================================================================
//
//==============================================================================
void vl53_mesure_new_proc(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	71bb      	strb	r3, [r7, #6]
	FixPoint1616_t LimitCheckCurrent;
	uint8_t	i;

	for(i=0; i<10; i++){
 80045ae:	2300      	movs	r3, #0
 80045b0:	71fb      	strb	r3, [r7, #7]
 80045b2:	e03c      	b.n	800462e <vl53_mesure_new_proc+0x8a>
		Set_logInfo2("VL53 START");
 80045b4:	4822      	ldr	r0, [pc, #136]	; (8004640 <vl53_mesure_new_proc+0x9c>)
 80045b6:	f7fd ff07 	bl	80023c8 <Set_logInfo2>
		Status = VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80045ba:	4b22      	ldr	r3, [pc, #136]	; (8004644 <vl53_mesure_new_proc+0xa0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4922      	ldr	r1, [pc, #136]	; (8004648 <vl53_mesure_new_proc+0xa4>)
 80045c0:	4618      	mov	r0, r3
 80045c2:	f002 fc57 	bl	8006e74 <VL53L0X_PerformSingleRangingMeasurement>
 80045c6:	4603      	mov	r3, r0
 80045c8:	71bb      	strb	r3, [r7, #6]
		Set_logInfo2("VL53 END");
 80045ca:	4820      	ldr	r0, [pc, #128]	; (800464c <vl53_mesure_new_proc+0xa8>)
 80045cc:	f7fd fefc 	bl	80023c8 <Set_logInfo2>

		if(RangingData.RangeStatus == 0){
 80045d0:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <vl53_mesure_new_proc+0xa4>)
 80045d2:	7e1b      	ldrb	r3, [r3, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <vl53_mesure_new_proc+0x40>
			SKprintf("Measured distance: %i ", RangingData.RangeMilliMeter);
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <vl53_mesure_new_proc+0xa4>)
 80045da:	891b      	ldrh	r3, [r3, #8]
 80045dc:	4619      	mov	r1, r3
 80045de:	481c      	ldr	r0, [pc, #112]	; (8004650 <vl53_mesure_new_proc+0xac>)
 80045e0:	f7ff fe28 	bl	8004234 <SKprintf>
		}

		print_pal_error(Status);
 80045e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ffb3 	bl	8004554 <print_pal_error>
		print_range_status(&RangingData);
 80045ee:	4816      	ldr	r0, [pc, #88]	; (8004648 <vl53_mesure_new_proc+0xa4>)
 80045f0:	f000 f874 	bl	80046dc <print_range_status>
		VL53L0X_GetLimitCheckCurrent(Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, &LimitCheckCurrent);
 80045f4:	4b13      	ldr	r3, [pc, #76]	; (8004644 <vl53_mesure_new_proc+0xa0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	463a      	mov	r2, r7
 80045fa:	2103      	movs	r1, #3
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 ffe7 	bl	80065d0 <VL53L0X_GetLimitCheckCurrent>
		SKprintf(",RANGE IGNORE THRESHOLD: %f\r\n", (float)LimitCheckCurrent/65536.0);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460c:	ee17 0a90 	vmov	r0, s15
 8004610:	f7fb ffb2 	bl	8000578 <__aeabi_f2d>
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <vl53_mesure_new_proc+0xb0>)
 800461a:	f7fc f92f 	bl	800087c <__aeabi_ddiv>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	480d      	ldr	r0, [pc, #52]	; (8004658 <vl53_mesure_new_proc+0xb4>)
 8004624:	f7ff fe06 	bl	8004234 <SKprintf>
	for(i=0; i<10; i++){
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	3301      	adds	r3, #1
 800462c:	71fb      	strb	r3, [r7, #7]
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	2b09      	cmp	r3, #9
 8004632:	d9bf      	bls.n	80045b4 <vl53_mesure_new_proc+0x10>
	}
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	08018ee4 	.word	0x08018ee4
 8004644:	20000050 	.word	0x20000050
 8004648:	20002018 	.word	0x20002018
 800464c:	08018ef0 	.word	0x08018ef0
 8004650:	08018efc 	.word	0x08018efc
 8004654:	40f00000 	.word	0x40f00000
 8004658:	08018f14 	.word	0x08018f14

0800465c <vl53_LogDisp>:
//==============================================================================
//
//==============================================================================
void vl53_LogDisp(char *string,int8_t status)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
#ifdef ___VL53_LOG_DISP
    SKprintf("%s ++++++++++++++++++++++++++++++ STATUS = %d\r\n",string, status);
#endif
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <WaitStopCompleted>:

//==============================================================================
//
//==============================================================================
VL53L0X_Error WaitStopCompleted(VL53L0X_DEV Dev) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800467c:	2300      	movs	r3, #0
 800467e:	75fb      	strb	r3, [r7, #23]
    uint32_t StopCompleted=0;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
    uint32_t LoopNb;

    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 8004684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d120      	bne.n	80046ce <WaitStopCompleted+0x5a>
        LoopNb = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
        do {
            Status = VL53L0X_GetStopCompletedStatus(Dev, &StopCompleted);
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f002 fd76 	bl	8007188 <VL53L0X_GetStopCompletedStatus>
 800469c:	4603      	mov	r3, r0
 800469e:	75fb      	strb	r3, [r7, #23]
            if ((StopCompleted == 0x00) || Status != VL53L0X_ERROR_NONE) {
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <WaitStopCompleted+0x4e>
 80046a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <WaitStopCompleted+0x4e>
                break;
            }
            LoopNb = LoopNb + 1;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	3301      	adds	r3, #1
 80046b2:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f006 fc61 	bl	800af7c <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80046c0:	d3e6      	bcc.n	8004690 <WaitStopCompleted+0x1c>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80046c8:	d301      	bcc.n	80046ce <WaitStopCompleted+0x5a>
            Status = VL53L0X_ERROR_TIME_OUT;
 80046ca:	23f9      	movs	r3, #249	; 0xf9
 80046cc:	75fb      	strb	r3, [r7, #23]
        }

    }

    return Status;
 80046ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <print_range_status>:
//==============================================================================
//
//==============================================================================

void print_range_status(VL53L0X_RangingMeasurementData_t* pRangingMeasurementData)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	; 0x30
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

    /*
     * New Range Status: data is valid when pRangingMeasurementData->RangeStatus = 0
     */

    RangeStatus = pRangingMeasurementData->RangeStatus;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7e1b      	ldrb	r3, [r3, #24]
 80046e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    VL53L0X_GetRangeStatusString(RangeStatus, buf);
 80046ec:	f107 020c 	add.w	r2, r7, #12
 80046f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 ff1a 	bl	8005530 <VL53L0X_GetRangeStatusString>
    SKprintf(" Range Status: %i : %s ", RangeStatus, buf);
 80046fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004700:	f107 020c 	add.w	r2, r7, #12
 8004704:	4619      	mov	r1, r3
 8004706:	4803      	ldr	r0, [pc, #12]	; (8004714 <print_range_status+0x38>)
 8004708:	f7ff fd94 	bl	8004234 <SKprintf>

}
 800470c:	bf00      	nop
 800470e:	3730      	adds	r7, #48	; 0x30
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	08018f34 	.word	0x08018f34

08004718 <WaitMeasurementDataReady>:

//==============================================================================
//
//==============================================================================

VL53L0X_Error WaitMeasurementDataReady(VL53L0X_DEV Dev) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
    uint8_t NewDatReady=0;
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]
    uint32_t LoopNb;

    vl53_LogDisp("WaitMeasurementDataReady() START", Status);
 8004728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800472c:	4619      	mov	r1, r3
 800472e:	481a      	ldr	r0, [pc, #104]	; (8004798 <WaitMeasurementDataReady+0x80>)
 8004730:	f7ff ff94 	bl	800465c <vl53_LogDisp>
    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 8004734:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d120      	bne.n	800477e <WaitMeasurementDataReady+0x66>
        LoopNb = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
             * パラメーター：
             * デバイスハンドル
             * 測定データ準備完了へのポインタ。
             *   0=データの準備ができていない、1=データの準備ができている
             */
            Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDatReady);
 8004740:	f107 030f 	add.w	r3, r7, #15
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f002 fa30 	bl	8006bac <VL53L0X_GetMeasurementDataReady>
 800474c:	4603      	mov	r3, r0
 800474e:	75fb      	strb	r3, [r7, #23]
            if ((NewDatReady == 0x01) || Status != VL53L0X_ERROR_NONE) {
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d00d      	beq.n	8004772 <WaitMeasurementDataReady+0x5a>
 8004756:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <WaitMeasurementDataReady+0x5a>
                break;
            }
            LoopNb = LoopNb + 1;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	3301      	adds	r3, #1
 8004762:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f006 fc09 	bl	800af7c <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004770:	d3e6      	bcc.n	8004740 <WaitMeasurementDataReady+0x28>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004778:	d301      	bcc.n	800477e <WaitMeasurementDataReady+0x66>
            Status = VL53L0X_ERROR_TIME_OUT;
 800477a:	23f9      	movs	r3, #249	; 0xf9
 800477c:	75fb      	strb	r3, [r7, #23]
        }
    }

    vl53_LogDisp("WaitMeasurementDataReady() END", Status);
 800477e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004782:	4619      	mov	r1, r3
 8004784:	4805      	ldr	r0, [pc, #20]	; (800479c <WaitMeasurementDataReady+0x84>)
 8004786:	f7ff ff69 	bl	800465c <vl53_LogDisp>
    return Status;
 800478a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	08018f4c 	.word	0x08018f4c
 800479c:	08018f70 	.word	0x08018f70

080047a0 <SK_RangingTest>:
//       3 SINGLE RACING LR
//       4 CONTINUE RASING
//
//==============================================================================
VL53L0X_Error SK_RangingTest(VL53L0X_Dev_t *pMyDevice, RASING_MODE sel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b094      	sub	sp, #80	; 0x50
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    VL53L0X_RangingMeasurementData_t    RangingMeasurementData;
    VL53L0X_RangingMeasurementData_t   *pRangingMeasurementData    = &RangingMeasurementData;
 80047b2:	f107 0318 	add.w	r3, r7, #24
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
     * <VL53L0X_StaticInit()>
     * 基本的なデバイスの初期化 (最終的にはパッチのロード) を実行します。
     * この関数は、VL53L0X_State を VL53L0X_STATE_WAIT_STATICINIT から VL53L0X_STATE_IDLE に変更します。
     * この段階では、すべてのデフォルト設定が適用されます。
     */
    if(Status == VL53L0X_ERROR_NONE)
 80047b8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <SK_RangingTest+0x3c>
    {
        SKprintf ("Call of VL53L0X_StaticInit\r\n");
 80047c0:	48b4      	ldr	r0, [pc, #720]	; (8004a94 <SK_RangingTest+0x2f4>)
 80047c2:	f7ff fd37 	bl	8004234 <SKprintf>
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f001 f89e 	bl	8005908 <VL53L0X_StaticInit>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        print_pal_error(Status);
 80047d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff febc 	bl	8004554 <print_pal_error>
    }


    if(Status == VL53L0X_ERROR_NONE)
 80047dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d112      	bne.n	800480a <SK_RangingTest+0x6a>
    {
        SKprintf ("Call of VL53L0X_PerformRefCalibration\r\n");
 80047e4:	48ac      	ldr	r0, [pc, #688]	; (8004a98 <SK_RangingTest+0x2f8>)
 80047e6:	f7ff fd25 	bl	8004234 <SKprintf>
        Status = VL53L0X_PerformRefCalibration(pMyDevice, &VhvSettings, &PhaseCal); // Device Initialization
 80047ea:	f107 020d 	add.w	r2, r7, #13
 80047ee:	f107 030e 	add.w	r3, r7, #14
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f001 ffc7 	bl	8006788 <VL53L0X_PerformRefCalibration>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        print_pal_error(Status);
 8004800:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fea5 	bl	8004554 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 800480a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800480e:	2b00      	cmp	r3, #0
 8004810:	d112      	bne.n	8004838 <SK_RangingTest+0x98>
    {
        SKprintf ("Call of VL53L0X_PerformRefSpadManagement\r\n");
 8004812:	48a2      	ldr	r0, [pc, #648]	; (8004a9c <SK_RangingTest+0x2fc>)
 8004814:	f7ff fd0e 	bl	8004234 <SKprintf>
        Status = VL53L0X_PerformRefSpadManagement(pMyDevice, &refSpadCount, &isApertureSpads); // Device Initialization
 8004818:	f107 020f 	add.w	r2, r7, #15
 800481c:	f107 0310 	add.w	r3, r7, #16
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f002 fd7b 	bl	800731e <VL53L0X_PerformRefSpadManagement>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        print_pal_error(Status);
 800482e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fe8e 	bl	8004554 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8004838:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800483c:	2b00      	cmp	r3, #0
 800483e:	d119      	bne.n	8004874 <SK_RangingTest+0xd4>
    {
        SKprintf ("Call of VL53L0X_SetDeviceMode\r\n");
 8004840:	4897      	ldr	r0, [pc, #604]	; (8004aa0 <SK_RangingTest+0x300>)
 8004842:	f7ff fcf7 	bl	8004234 <SKprintf>
        if(sel == RASING_MODE_CONTINUE ){
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	2b04      	cmp	r3, #4
 800484a:	d107      	bne.n	800485c <SK_RangingTest+0xbc>
            Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING); // Setup in single ranging mode
 800484c:	2101      	movs	r1, #1
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 faa2 	bl	8005d98 <VL53L0X_SetDeviceMode>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800485a:	e006      	b.n	800486a <SK_RangingTest+0xca>
        }
        else{
            Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800485c:	2100      	movs	r1, #0
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f001 fa9a 	bl	8005d98 <VL53L0X_SetDeviceMode>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }

        print_pal_error(Status);
 800486a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fe70 	bl	8004554 <print_pal_error>
            //Status = VL53L0X_SetSequenceStepEnable(pMyDevice,VL53L0X_SEQUENCESTEP_DSS, 1);
        }
    }


    if(sel == RASING_MODE_CONTINUE ){
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2b04      	cmp	r3, #4
 8004878:	f040 8093 	bne.w	80049a2 <SK_RangingTest+0x202>
        if(Status == VL53L0X_ERROR_NONE){
 800487c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10d      	bne.n	80048a0 <SK_RangingTest+0x100>
             * デバイスの測定を開始します。
             * 開始される測定は、VL53L0X_SetParameters() で設定されたデバイスパラメータに依存します。
             * これはノンブロッキング関数です。
             * この関数は、VL53L0X_State を VL53L0X_STATE_IDLE から VL53L0X_STATE_RUNNING に変更します。
             */
            SKprintf ("Call of VL53L0X_StartMeasurement\r\n");
 8004884:	4887      	ldr	r0, [pc, #540]	; (8004aa4 <SK_RangingTest+0x304>)
 8004886:	f7ff fcd5 	bl	8004234 <SKprintf>
            Status = VL53L0X_StartMeasurement(pMyDevice);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f002 f884 	bl	8006998 <VL53L0X_StartMeasurement>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            print_pal_error(Status);
 8004896:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fe5a 	bl	8004554 <print_pal_error>
        }

        if(Status == VL53L0X_ERROR_NONE){
 80048a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d155      	bne.n	8004954 <SK_RangingTest+0x1b4>
            uint32_t measurement;
            uint32_t no_of_measurements = 32;
 80048a8:	2320      	movs	r3, #32
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38

            uint16_t* pResults = (uint16_t*)malloc(sizeof(uint16_t) * no_of_measurements);
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4618      	mov	r0, r3
 80048b2:	f010 f969 	bl	8014b88 <malloc>
 80048b6:	4603      	mov	r3, r0
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34

            for(measurement=0; measurement<no_of_measurements; measurement++){
 80048ba:	2300      	movs	r3, #0
 80048bc:	643b      	str	r3, [r7, #64]	; 0x40
 80048be:	e028      	b.n	8004912 <SK_RangingTest+0x172>

                Status = WaitMeasurementDataReady(pMyDevice);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff29 	bl	8004718 <WaitMeasurementDataReady>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

                if(Status == VL53L0X_ERROR_NONE){
 80048cc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d123      	bne.n	800491c <SK_RangingTest+0x17c>
                     * 警告：
                     * USER はデータを取得する前に VL53L0X_GetNumberOfROIZones() に
                     * 注意する必要があります。 PAL は、測定関数で使用される
                     * 対応するデータ構造に NumberOfROIZones を掛けた値を埋めます。
                     */
                    Status = VL53L0X_GetRangingMeasurementData(pMyDevice, pRangingMeasurementData);
 80048d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f002 f9a8 	bl	8006c2c <VL53L0X_GetRangingMeasurementData>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

                    *(pResults + measurement) = pRangingMeasurementData->RangeMilliMeter;
 80048e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048e8:	4413      	add	r3, r2
 80048ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ec:	8912      	ldrh	r2, [r2, #8]
 80048ee:	801a      	strh	r2, [r3, #0]
                    SKprintf("In loop measurement %d: %d\r\n", measurement, pRangingMeasurementData->RangeMilliMeter);
 80048f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f2:	891b      	ldrh	r3, [r3, #8]
 80048f4:	461a      	mov	r2, r3
 80048f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048f8:	486b      	ldr	r0, [pc, #428]	; (8004aa8 <SK_RangingTest+0x308>)
 80048fa:	f7ff fc9b 	bl	8004234 <SKprintf>
                    /*
                     * <VL53L0X_ClearInterruptMask()>
                     * 指定されたシステム割り込み条件をクリアします。
                     * 指定された割り込みをクリアします。
                     */
                    VL53L0X_ClearInterruptMask(pMyDevice, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80048fe:	2104      	movs	r1, #4
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f002 fcaa 	bl	800725a <VL53L0X_ClearInterruptMask>
                    VL53L0X_PollingDelay(pMyDevice);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f006 fb38 	bl	800af7c <VL53L0X_PollingDelay>
            for(measurement=0; measurement<no_of_measurements; measurement++){
 800490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490e:	3301      	adds	r3, #1
 8004910:	643b      	str	r3, [r7, #64]	; 0x40
 8004912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	429a      	cmp	r2, r3
 8004918:	d3d2      	bcc.n	80048c0 <SK_RangingTest+0x120>
 800491a:	e000      	b.n	800491e <SK_RangingTest+0x17e>
                }
                else {
                    break;
 800491c:	bf00      	nop
                }
            }

            if(Status == VL53L0X_ERROR_NONE){
 800491e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004922:	2b00      	cmp	r3, #0
 8004924:	d113      	bne.n	800494e <SK_RangingTest+0x1ae>
                for(measurement=0; measurement<no_of_measurements; measurement++){
 8004926:	2300      	movs	r3, #0
 8004928:	643b      	str	r3, [r7, #64]	; 0x40
 800492a:	e00c      	b.n	8004946 <SK_RangingTest+0x1a6>
                    SKprintf("measurement %d: %d\r\n", measurement, *(pResults + measurement));
 800492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800493a:	485c      	ldr	r0, [pc, #368]	; (8004aac <SK_RangingTest+0x30c>)
 800493c:	f7ff fc7a 	bl	8004234 <SKprintf>
                for(measurement=0; measurement<no_of_measurements; measurement++){
 8004940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004942:	3301      	adds	r3, #1
 8004944:	643b      	str	r3, [r7, #64]	; 0x40
 8004946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	429a      	cmp	r2, r3
 800494c:	d3ee      	bcc.n	800492c <SK_RangingTest+0x18c>
                    //SKprintf("measurement %d: %d:%d\r\n", measurement, *(pResults + measurement),pMyDevice->Data.LastRangeMeasure.RangeMilliMeter);
                }
            }

            free(pResults);
 800494e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004950:	f010 f922 	bl	8014b98 <free>
        }

        if(Status == VL53L0X_ERROR_NONE){
 8004954:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004958:	2b00      	cmp	r3, #0
 800495a:	d108      	bne.n	800496e <SK_RangingTest+0x1ce>
             * 電流測定の終了時にデバイスをスタンバイモードに設定します
             * シングルモードでは、測定終了時にデバイスが自動的にスタンバイモードに
             * 戻るため、必要ありません。 この関数は、VL53L0X_State を
             * VL53L0X_STATE_RUNNING から VL53L0X_STATE_IDLE に変更します。
             */
            SKprintf ("Call of VL53L0X_StopMeasurement\r\n");
 800495c:	4854      	ldr	r0, [pc, #336]	; (8004ab0 <SK_RangingTest+0x310>)
 800495e:	f7ff fc69 	bl	8004234 <SKprintf>
            Status = VL53L0X_StopMeasurement(pMyDevice);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f002 f8da 	bl	8006b1c <VL53L0X_StopMeasurement>
 8004968:	4603      	mov	r3, r0
 800496a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }

        if(Status == VL53L0X_ERROR_NONE){
 800496e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004972:	2b00      	cmp	r3, #0
 8004974:	d108      	bne.n	8004988 <SK_RangingTest+0x1e8>
            SKprintf ("Wait Stop to be competed\r\n");
 8004976:	484f      	ldr	r0, [pc, #316]	; (8004ab4 <SK_RangingTest+0x314>)
 8004978:	f7ff fc5c 	bl	8004234 <SKprintf>
            Status = WaitStopCompleted(pMyDevice);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fe79 	bl	8004674 <WaitStopCompleted>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }

        if(Status == VL53L0X_ERROR_NONE){
 8004988:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800498c:	2b00      	cmp	r3, #0
 800498e:	f040 8186 	bne.w	8004c9e <SK_RangingTest+0x4fe>
            /*
             * <VL53L0X_ClearInterruptMask()>
             * 指定されたシステム割り込み条件をクリアします。
             * 指定された割り込みをクリアします。
             */
            Status = VL53L0X_ClearInterruptMask(pMyDevice,VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8004992:	2104      	movs	r1, #4
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f002 fc60 	bl	800725a <VL53L0X_ClearInterruptMask>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80049a0:	e17d      	b.n	8004c9e <SK_RangingTest+0x4fe>
         * 機能の説明
         * この機能は、特定の制限チェックを有効/無効にします。
         * 制限チェックは LimitCheckId で識別されます。
         */

        if (Status == VL53L0X_ERROR_NONE) {
 80049a2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <SK_RangingTest+0x21a>
            Status = VL53L0X_SetLimitCheckEnable(pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80049aa:	2201      	movs	r2, #1
 80049ac:	2100      	movs	r1, #0
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 fc6e 	bl	8006290 <VL53L0X_SetLimitCheckEnable>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }

        if (Status == VL53L0X_ERROR_NONE) {
 80049ba:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d107      	bne.n	80049d2 <SK_RangingTest+0x232>
            Status = VL53L0X_SetLimitCheckEnable(pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80049c2:	2201      	movs	r2, #1
 80049c4:	2101      	movs	r1, #1
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f001 fc62 	bl	8006290 <VL53L0X_SetLimitCheckEnable>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }

        if (Status == VL53L0X_ERROR_NONE) {
 80049d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <SK_RangingTest+0x250>
            if(sel == RASING_MODE_SINGLE){
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d107      	bne.n	80049f0 <SK_RangingTest+0x250>
                Status = VL53L0X_SetLimitCheckEnable(pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 1);
 80049e0:	2201      	movs	r2, #1
 80049e2:	2103      	movs	r1, #3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 fc53 	bl	8006290 <VL53L0X_SetLimitCheckEnable>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
         * 特定の制限チェック値を設定します。
         * 機能の説明
         * この関数は、特定の制限チェック値を設定します。
         * 制限チェックは LimitCheckId で識別されます。
         */
        switch(sel){
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d87b      	bhi.n	8004aee <SK_RangingTest+0x34e>
 80049f6:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <SK_RangingTest+0x25c>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a5f 	.word	0x08004a5f
 8004a08:	08004ab9 	.word	0x08004ab9
        case RASING_MODE_SINGLE:
            if (Status == VL53L0X_ERROR_NONE) {
 8004a0c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d16e      	bne.n	8004af2 <SK_RangingTest+0x352>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, (FixPoint1616_t)(1.5*0.023*65536));
 8004a14:	f640 02d4 	movw	r2, #2260	; 0x8d4
 8004a18:	2103      	movs	r1, #3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f001 fce8 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
             break;
 8004a26:	e064      	b.n	8004af2 <SK_RangingTest+0x352>
        case RASING_MODE_SINGLE_HA:
            if (Status == VL53L0X_ERROR_NONE) {
 8004a28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d108      	bne.n	8004a42 <SK_RangingTest+0x2a2>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.25*65536));
 8004a30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a34:	2101      	movs	r1, #1
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f001 fcda 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            if (Status == VL53L0X_ERROR_NONE) {
 8004a42:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d155      	bne.n	8004af6 <SK_RangingTest+0x356>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(18*65536));
 8004a4a:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f001 fccd 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            break;
 8004a5c:	e04b      	b.n	8004af6 <SK_RangingTest+0x356>
        case RASING_MODE_SINGLE_HS:
            if (Status == VL53L0X_ERROR_NONE) {
 8004a5e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <SK_RangingTest+0x2d8>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.25*65536));
 8004a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f001 fcbf 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            if (Status == VL53L0X_ERROR_NONE) {
 8004a78:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d13c      	bne.n	8004afa <SK_RangingTest+0x35a>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(32*65536));
 8004a80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a84:	2100      	movs	r1, #0
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 fcb2 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }

            break;
 8004a92:	e032      	b.n	8004afa <SK_RangingTest+0x35a>
 8004a94:	08018f90 	.word	0x08018f90
 8004a98:	08018fb0 	.word	0x08018fb0
 8004a9c:	08018fd8 	.word	0x08018fd8
 8004aa0:	08019004 	.word	0x08019004
 8004aa4:	08019024 	.word	0x08019024
 8004aa8:	08019048 	.word	0x08019048
 8004aac:	08019068 	.word	0x08019068
 8004ab0:	08019080 	.word	0x08019080
 8004ab4:	080190a4 	.word	0x080190a4
        case RASING_MODE_SINGLE_LR:
            if (Status == VL53L0X_ERROR_NONE) {
 8004ab8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d108      	bne.n	8004ad2 <SK_RangingTest+0x332>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8004ac0:	f641 1299 	movw	r2, #6553	; 0x1999
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f001 fc92 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            if (Status == VL53L0X_ERROR_NONE) {
 8004ad2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d111      	bne.n	8004afe <SK_RangingTest+0x35e>
                Status = VL53L0X_SetLimitCheckValue(pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8004ada:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f001 fc85 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }

            break;
 8004aec:	e007      	b.n	8004afe <SK_RangingTest+0x35e>
        default:
            break;
 8004aee:	bf00      	nop
 8004af0:	e006      	b.n	8004b00 <SK_RangingTest+0x360>
             break;
 8004af2:	bf00      	nop
 8004af4:	e004      	b.n	8004b00 <SK_RangingTest+0x360>
            break;
 8004af6:	bf00      	nop
 8004af8:	e002      	b.n	8004b00 <SK_RangingTest+0x360>
            break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <SK_RangingTest+0x360>
            break;
 8004afe:	bf00      	nop
         * レンジング タイミング バジェットをマイクロ秒単位で設定します。
         * 機能の説明
         * 現在のモード (レンジング、ヒストグラム、ASL ...) のフルレンジング シーケンスを
         * 実行するためにユーザーがデバイスに許可する最大時間を定義します。
         */
        switch(sel){
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d830      	bhi.n	8004b68 <SK_RangingTest+0x3c8>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <SK_RangingTest+0x36c>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b69 	.word	0x08004b69
 8004b10:	08004b1d 	.word	0x08004b1d
 8004b14:	08004b35 	.word	0x08004b35
 8004b18:	08004b4f 	.word	0x08004b4f
        case RASING_MODE_SINGLE:
             break;
        case RASING_MODE_SINGLE_HA:
            if (Status == VL53L0X_ERROR_NONE) {
 8004b1c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d123      	bne.n	8004b6c <SK_RangingTest+0x3cc>
                Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 200000);
 8004b24:	4961      	ldr	r1, [pc, #388]	; (8004cac <SK_RangingTest+0x50c>)
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f001 f994 	bl	8005e54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            break;
 8004b32:	e01b      	b.n	8004b6c <SK_RangingTest+0x3cc>
        case RASING_MODE_SINGLE_HS:
            if (Status == VL53L0X_ERROR_NONE) {
 8004b34:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d119      	bne.n	8004b70 <SK_RangingTest+0x3d0>
                Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 30000);
 8004b3c:	f247 5130 	movw	r1, #30000	; 0x7530
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f001 f987 	bl	8005e54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            break;
 8004b4c:	e010      	b.n	8004b70 <SK_RangingTest+0x3d0>
       case RASING_MODE_SINGLE_LR:
            if (Status == VL53L0X_ERROR_NONE) {
 8004b4e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10e      	bne.n	8004b74 <SK_RangingTest+0x3d4>
                Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 33000);
 8004b56:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f001 f97a 	bl	8005e54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            break;
 8004b66:	e005      	b.n	8004b74 <SK_RangingTest+0x3d4>
        default:
            break;
 8004b68:	bf00      	nop
 8004b6a:	e004      	b.n	8004b76 <SK_RangingTest+0x3d6>
            break;
 8004b6c:	bf00      	nop
 8004b6e:	e002      	b.n	8004b76 <SK_RangingTest+0x3d6>
            break;
 8004b70:	bf00      	nop
 8004b72:	e000      	b.n	8004b76 <SK_RangingTest+0x3d6>
            break;
 8004b74:	bf00      	nop
         * < VL53L0X_SetVcselPulsePeriod() >
         * VCSEL パルス周期を設定します。
         * 機能の説明
         * この関数は、指定された周期タイプの VCSEL パルス周期を取得します。
         */
        switch(sel){
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d824      	bhi.n	8004bc6 <SK_RangingTest+0x426>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <SK_RangingTest+0x3e4>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004bc7 	.word	0x08004bc7
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bc7 	.word	0x08004bc7
 8004b90:	08004b95 	.word	0x08004b95
        case RASING_MODE_SINGLE_HA:
            break;
        case RASING_MODE_SINGLE_HS:
            break;
       case RASING_MODE_SINGLE_LR:
            if (Status == VL53L0X_ERROR_NONE) {
 8004b94:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d107      	bne.n	8004bac <SK_RangingTest+0x40c>
                Status = VL53L0X_SetVcselPulsePeriod(pMyDevice, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8004b9c:	2212      	movs	r2, #18
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f001 f97d 	bl	8005ea0 <VL53L0X_SetVcselPulsePeriod>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            if (Status == VL53L0X_ERROR_NONE) {
 8004bac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <SK_RangingTest+0x42a>
                Status = VL53L0X_SetVcselPulsePeriod(pMyDevice, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8004bb4:	220e      	movs	r2, #14
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 f971 	bl	8005ea0 <VL53L0X_SetVcselPulsePeriod>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            break;
 8004bc4:	e001      	b.n	8004bca <SK_RangingTest+0x42a>
        default:
            break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <SK_RangingTest+0x42c>
            break;
 8004bca:	bf00      	nop
        }

        if(sel==RASING_MODE_SINGLE_LR){
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d102      	bne.n	8004bd8 <SK_RangingTest+0x438>
            max = 50;
 8004bd2:	2332      	movs	r3, #50	; 0x32
 8004bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd6:	e001      	b.n	8004bdc <SK_RangingTest+0x43c>
        }
        else{
            max = 10;
 8004bd8:	230a      	movs	r3, #10
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
        }


		SKprintf("001 Range MilliMeter= %d(%d)\r\n",RangingMeasurementData.RangeMilliMeter,pMyDevice->Data.LastRangeMeasure.RangeMilliMeter);
 8004bdc:	8c3b      	ldrh	r3, [r7, #32]
 8004bde:	4619      	mov	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004be6:	461a      	mov	r2, r3
 8004be8:	4831      	ldr	r0, [pc, #196]	; (8004cb0 <SK_RangingTest+0x510>)
 8004bea:	f7ff fb23 	bl	8004234 <SKprintf>



        if(Status == VL53L0X_ERROR_NONE){
 8004bee:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d153      	bne.n	8004c9e <SK_RangingTest+0x4fe>
            for( i=0; i<max; i++ ){
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bfa:	e04a      	b.n	8004c92 <SK_RangingTest+0x4f2>
                 * この機能はデバイスへのアクセスです
                 * この関数はデバイス モードを VL53L0X_DEVICEMODE_SINGLE_RANGING に変更します。
                 *
                 */
                //SKprintf ("Call of VL53L0X_PerformSingleRangingMeasurement\r\n");
                Status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice, &RangingMeasurementData);
 8004bfc:	f107 0318 	add.w	r3, r7, #24
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f002 f936 	bl	8006e74 <VL53L0X_PerformSingleRangingMeasurement>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                SKprintf("002 Range MilliMeter = %d(%d),",RangingMeasurementData.RangeMilliMeter,pMyDevice->Data.LastRangeMeasure.RangeMilliMeter);
 8004c0e:	8c3b      	ldrh	r3, [r7, #32]
 8004c10:	4619      	mov	r1, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4826      	ldr	r0, [pc, #152]	; (8004cb4 <SK_RangingTest+0x514>)
 8004c1c:	f7ff fb0a 	bl	8004234 <SKprintf>

                print_pal_error(Status);
 8004c20:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fc95 	bl	8004554 <print_pal_error>
                print_range_status(&RangingMeasurementData);
 8004c2a:	f107 0318 	add.w	r3, r7, #24
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fd54 	bl	80046dc <print_range_status>
                 * 最新の値を取得するには、事前にレンジングを実行する必要があります。
                 * 報告される値は、LimitCheckId で識別される制限チェックにリンクされます。
                 * ノート：
                 * この機能はデバイスへのアクセスです
                 */
                switch(sel){
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	dc02      	bgt.n	8004c40 <SK_RangingTest+0x4a0>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	da03      	bge.n	8004c46 <SK_RangingTest+0x4a6>
                    SKprintf(",RANGE IGNORE THRESHOLD: %f\r\n", (float)LimitCheckCurrent/65536.0);
                    break;
               case RASING_MODE_SINGLE_LR:
            	   SKprintf("\r\n");
                default:
                    break;
 8004c3e:	e020      	b.n	8004c82 <SK_RangingTest+0x4e2>
                switch(sel){
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d01b      	beq.n	8004c7c <SK_RangingTest+0x4dc>
                    break;
 8004c44:	e01d      	b.n	8004c82 <SK_RangingTest+0x4e2>
                    VL53L0X_GetLimitCheckCurrent(pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, &LimitCheckCurrent);
 8004c46:	f107 0314 	add.w	r3, r7, #20
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2103      	movs	r1, #3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f001 fcbe 	bl	80065d0 <VL53L0X_GetLimitCheckCurrent>
                    SKprintf(",RANGE IGNORE THRESHOLD: %f\r\n", (float)LimitCheckCurrent/65536.0);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5e:	ee17 0a90 	vmov	r0, s15
 8004c62:	f7fb fc89 	bl	8000578 <__aeabi_f2d>
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <SK_RangingTest+0x518>)
 8004c6c:	f7fb fe06 	bl	800087c <__aeabi_ddiv>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4811      	ldr	r0, [pc, #68]	; (8004cbc <SK_RangingTest+0x51c>)
 8004c76:	f7ff fadd 	bl	8004234 <SKprintf>
                    break;
 8004c7a:	e003      	b.n	8004c84 <SK_RangingTest+0x4e4>
            	   SKprintf("\r\n");
 8004c7c:	4810      	ldr	r0, [pc, #64]	; (8004cc0 <SK_RangingTest+0x520>)
 8004c7e:	f7ff fad9 	bl	8004234 <SKprintf>
                    break;
 8004c82:	bf00      	nop
                }

				//SKprintf("003 Range MilliMeter = %d(%d)\r\n",RangingMeasurementData.RangeMilliMeter,pMyDevice->Data.LastRangeMeasure.RangeMilliMeter) ;


                if (Status != VL53L0X_ERROR_NONE){
 8004c84:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d107      	bne.n	8004c9c <SK_RangingTest+0x4fc>
            for( i=0; i<max; i++ ){
 8004c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8e:	3301      	adds	r3, #1
 8004c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	429a      	cmp	r2, r3
 8004c98:	dbb0      	blt.n	8004bfc <SK_RangingTest+0x45c>
 8004c9a:	e000      	b.n	8004c9e <SK_RangingTest+0x4fe>
                    break;
 8004c9c:	bf00      	nop

        }
    }


    return Status;
 8004c9e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f

}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3750      	adds	r7, #80	; 0x50
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	00030d40 	.word	0x00030d40
 8004cb0:	080190c0 	.word	0x080190c0
 8004cb4:	080190e0 	.word	0x080190e0
 8004cb8:	40f00000 	.word	0x40f00000
 8004cbc:	08018f14 	.word	0x08018f14
 8004cc0:	08019100 	.word	0x08019100

08004cc4 <vl53l0x_Racing_test>:
//       2 SINGLE RACING HS
//       3 SINGLE RACING LR
//
//==============================================================================
void vl53l0x_Racing_test(RASING_MODE sel)
{
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b0a9      	sub	sp, #164	; 0xa4
 8004cc8:	af04      	add	r7, sp, #16
 8004cca:	4603      	mov	r3, r0
 8004ccc:	71fb      	strb	r3, [r7, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
//    VL53L0X_Dev_t MyDevice;
    VL53L0X_Dev_t *pMyDevice = &MyDevice;
 8004cd4:	4b6a      	ldr	r3, [pc, #424]	; (8004e80 <vl53l0x_Racing_test+0x1bc>)
 8004cd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    VL53L0X_Version_t                   Version;
    VL53L0X_Version_t                  *pVersion   = &Version;
 8004cda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004cde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    VL53L0X_DeviceInfo_t                DeviceInfo;

    int32_t status_int;
    int32_t init_done = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int NecleoComStatus = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	67fb      	str	r3, [r7, #124]	; 0x7c
    int NecleoAutoCom = 1;
 8004cec:	2301      	movs	r3, #1
 8004cee:	67bb      	str	r3, [r7, #120]	; 0x78


    MyDevice.I2cHandle = &hi2c1;
 8004cf0:	4b63      	ldr	r3, [pc, #396]	; (8004e80 <vl53l0x_Racing_test+0x1bc>)
 8004cf2:	4a64      	ldr	r2, [pc, #400]	; (8004e84 <vl53l0x_Racing_test+0x1c0>)
 8004cf4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    MyDevice.I2cDevAddr = 0x52;
 8004cf8:	4b61      	ldr	r3, [pc, #388]	; (8004e80 <vl53l0x_Racing_test+0x1bc>)
 8004cfa:	2252      	movs	r2, #82	; 0x52
 8004cfc:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180

    if(sel == RASING_MODE_CONTINUE){
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d103      	bne.n	8004d0e <vl53l0x_Racing_test+0x4a>
        SKprintf ("VL53L0X PAL Continuous Ranging example\r\n");
 8004d06:	4860      	ldr	r0, [pc, #384]	; (8004e88 <vl53l0x_Racing_test+0x1c4>)
 8004d08:	f7ff fa94 	bl	8004234 <SKprintf>
 8004d0c:	e002      	b.n	8004d14 <vl53l0x_Racing_test+0x50>
    }
    else{
        SKprintf ("VL53L0X API Simple Ranging example\r\n\n");
 8004d0e:	485f      	ldr	r0, [pc, #380]	; (8004e8c <vl53l0x_Racing_test+0x1c8>)
 8004d10:	f7ff fa90 	bl	8004234 <SKprintf>
    }

    pMyDevice->I2cDevAddr      = 0x52;
 8004d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d18:	2252      	movs	r2, #82	; 0x52
 8004d1a:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180

    /*
     *  Get the version of the VL53L0X API running in the firmware
     */

    if(Status == VL53L0X_ERROR_NONE){
 8004d1e:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d136      	bne.n	8004d94 <vl53l0x_Racing_test+0xd0>
        status_int = VL53L0X_GetVersion(pVersion);
 8004d26:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004d2a:	f000 fbd3 	bl	80054d4 <VL53L0X_GetVersion>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	677b      	str	r3, [r7, #116]	; 0x74
        if (status_int != 0){
 8004d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <vl53l0x_Racing_test+0x7c>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004d38:	23ec      	movs	r3, #236	; 0xec
 8004d3a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004d3e:	e029      	b.n	8004d94 <vl53l0x_Racing_test+0xd0>
        }
        else{
            //  Verify the version of the VL53L0X API running in the firmware
            if( pVersion->major != VERSION_REQUIRED_MAJOR ||
 8004d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d44:	791b      	ldrb	r3, [r3, #4]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d109      	bne.n	8004d5e <vl53l0x_Racing_test+0x9a>
                pVersion->minor != VERSION_REQUIRED_MINOR ||
 8004d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d4e:	795b      	ldrb	r3, [r3, #5]
            if( pVersion->major != VERSION_REQUIRED_MAJOR ||
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <vl53l0x_Racing_test+0x9a>
                pVersion->build != VERSION_REQUIRED_BUILD )
 8004d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d58:	799b      	ldrb	r3, [r3, #6]
                pVersion->minor != VERSION_REQUIRED_MINOR ||
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d01a      	beq.n	8004d94 <vl53l0x_Racing_test+0xd0>
            {
                SKprintf("VL53L0X API Version Error: Your firmware has %d.%d.%d (revision %d). This example requires %d.%d.%d.\r\n",
                    pVersion->major, pVersion->minor, pVersion->build, pVersion->revision,
 8004d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d62:	791b      	ldrb	r3, [r3, #4]
                SKprintf("VL53L0X API Version Error: Your firmware has %d.%d.%d (revision %d). This example requires %d.%d.%d.\r\n",
 8004d64:	4619      	mov	r1, r3
                    pVersion->major, pVersion->minor, pVersion->build, pVersion->revision,
 8004d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d6a:	795b      	ldrb	r3, [r3, #5]
                SKprintf("VL53L0X API Version Error: Your firmware has %d.%d.%d (revision %d). This example requires %d.%d.%d.\r\n",
 8004d6c:	4618      	mov	r0, r3
                    pVersion->major, pVersion->minor, pVersion->build, pVersion->revision,
 8004d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d72:	799b      	ldrb	r3, [r3, #6]
                SKprintf("VL53L0X API Version Error: Your firmware has %d.%d.%d (revision %d). This example requires %d.%d.%d.\r\n",
 8004d74:	461c      	mov	r4, r3
 8004d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	9203      	str	r2, [sp, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	9202      	str	r2, [sp, #8]
 8004d84:	2201      	movs	r2, #1
 8004d86:	9201      	str	r2, [sp, #4]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4840      	ldr	r0, [pc, #256]	; (8004e90 <vl53l0x_Racing_test+0x1cc>)
 8004d90:	f7ff fa50 	bl	8004234 <SKprintf>
     * VL53L0X_SetOffsetCalibrationData() を使用して、適切なオフセットキャリブレーションの保存と
     * 復元を独自に行う必要があります。
     * この関数は VL53L0X_State を変更します。
     * VL53L0X_STATE_POWERDOWN から VL53L0X_STATE_WAIT_STATICINIT まで。
     */
    if(Status == VL53L0X_ERROR_NONE){
 8004d94:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10d      	bne.n	8004db8 <vl53l0x_Racing_test+0xf4>
        SKprintf ("Call of VL53L0X_DataInit\r\n");
 8004d9c:	483d      	ldr	r0, [pc, #244]	; (8004e94 <vl53l0x_Racing_test+0x1d0>)
 8004d9e:	f7ff fa49 	bl	8004234 <SKprintf>
        Status = VL53L0X_DataInit(&MyDevice); // Data initialization
 8004da2:	4837      	ldr	r0, [pc, #220]	; (8004e80 <vl53l0x_Racing_test+0x1bc>)
 8004da4:	f000 fc02 	bl	80055ac <VL53L0X_DataInit>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        print_pal_error(Status);
 8004dae:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fbce 	bl	8004554 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE){
 8004db8:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d148      	bne.n	8004e52 <vl53l0x_Racing_test+0x18e>
        Status = VL53L0X_GetDeviceInfo(&MyDevice, &DeviceInfo);
 8004dc0:	f107 0308 	add.w	r3, r7, #8
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	482e      	ldr	r0, [pc, #184]	; (8004e80 <vl53l0x_Racing_test+0x1bc>)
 8004dc8:	f000 fb9f 	bl	800550a <VL53L0X_GetDeviceInfo>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

        if(Status == VL53L0X_ERROR_NONE){
 8004dd2:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d136      	bne.n	8004e48 <vl53l0x_Racing_test+0x184>
            SKprintf("VL53L0X_GetDeviceInfo:\r\n");
 8004dda:	482f      	ldr	r0, [pc, #188]	; (8004e98 <vl53l0x_Racing_test+0x1d4>)
 8004ddc:	f7ff fa2a 	bl	8004234 <SKprintf>
            SKprintf("Device Name : %s\r\n", DeviceInfo.Name);
 8004de0:	f107 0308 	add.w	r3, r7, #8
 8004de4:	4619      	mov	r1, r3
 8004de6:	482d      	ldr	r0, [pc, #180]	; (8004e9c <vl53l0x_Racing_test+0x1d8>)
 8004de8:	f7ff fa24 	bl	8004234 <SKprintf>
            SKprintf("Device Type : %s\r\n", DeviceInfo.Type);
 8004dec:	f107 0308 	add.w	r3, r7, #8
 8004df0:	3320      	adds	r3, #32
 8004df2:	4619      	mov	r1, r3
 8004df4:	482a      	ldr	r0, [pc, #168]	; (8004ea0 <vl53l0x_Racing_test+0x1dc>)
 8004df6:	f7ff fa1d 	bl	8004234 <SKprintf>
            SKprintf("Device ID : %s\r\n", DeviceInfo.ProductId);
 8004dfa:	f107 0308 	add.w	r3, r7, #8
 8004dfe:	3340      	adds	r3, #64	; 0x40
 8004e00:	4619      	mov	r1, r3
 8004e02:	4828      	ldr	r0, [pc, #160]	; (8004ea4 <vl53l0x_Racing_test+0x1e0>)
 8004e04:	f7ff fa16 	bl	8004234 <SKprintf>
            SKprintf("ProductRevisionMajor : %d\r\n", DeviceInfo.ProductRevisionMajor);
 8004e08:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4826      	ldr	r0, [pc, #152]	; (8004ea8 <vl53l0x_Racing_test+0x1e4>)
 8004e10:	f7ff fa10 	bl	8004234 <SKprintf>
            SKprintf("ProductRevisionMinor : %d\r\n", DeviceInfo.ProductRevisionMinor);
 8004e14:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4824      	ldr	r0, [pc, #144]	; (8004eac <vl53l0x_Racing_test+0x1e8>)
 8004e1c:	f7ff fa0a 	bl	8004234 <SKprintf>

            if ((DeviceInfo.ProductRevisionMinor != 1) && (DeviceInfo.ProductRevisionMinor != 1)) {
 8004e20:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d00f      	beq.n	8004e48 <vl53l0x_Racing_test+0x184>
 8004e28:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d00b      	beq.n	8004e48 <vl53l0x_Racing_test+0x184>
            	SKprintf("Error expected cut 1.1 but found cut %d.%d\r\n",DeviceInfo.ProductRevisionMajor, DeviceInfo.ProductRevisionMinor);
 8004e30:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8004e34:	4619      	mov	r1, r3
 8004e36:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	481c      	ldr	r0, [pc, #112]	; (8004eb0 <vl53l0x_Racing_test+0x1ec>)
 8004e3e:	f7ff f9f9 	bl	8004234 <SKprintf>
                Status = VL53L0X_ERROR_NOT_SUPPORTED;
 8004e42:	23fb      	movs	r3, #251	; 0xfb
 8004e44:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }
        }
        print_pal_error(Status);
 8004e48:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fb81 	bl	8004554 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE){
 8004e52:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d108      	bne.n	8004e6c <vl53l0x_Racing_test+0x1a8>
        Status = SK_RangingTest( pMyDevice,sel);
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004e62:	f7ff fc9d 	bl	80047a0 <SK_RangingTest>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    print_pal_error(Status);
 8004e6c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fb6f 	bl	8004554 <print_pal_error>
}
 8004e76:	bf00      	nop
 8004e78:	3794      	adds	r7, #148	; 0x94
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd90      	pop	{r4, r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20002034 	.word	0x20002034
 8004e84:	200021fc 	.word	0x200021fc
 8004e88:	08019104 	.word	0x08019104
 8004e8c:	08019130 	.word	0x08019130
 8004e90:	08019158 	.word	0x08019158
 8004e94:	080191c0 	.word	0x080191c0
 8004e98:	080191dc 	.word	0x080191dc
 8004e9c:	080191f8 	.word	0x080191f8
 8004ea0:	0801920c 	.word	0x0801920c
 8004ea4:	08019220 	.word	0x08019220
 8004ea8:	08019234 	.word	0x08019234
 8004eac:	08019250 	.word	0x08019250
 8004eb0:	0801926c 	.word	0x0801926c

08004eb4 <vl53data_disp>:

//==============================================================================
//
//==============================================================================
void vl53data_disp(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
    int i;

    SKprintf("Part2PartOffsetNVMMicroMeter = %d\r\n", 	MyDevice.Data.Part2PartOffsetNVMMicroMeter	);
 8004eba:	4b72      	ldr	r3, [pc, #456]	; (8005084 <vl53data_disp+0x1d0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4871      	ldr	r0, [pc, #452]	; (8005088 <vl53data_disp+0x1d4>)
 8004ec2:	f7ff f9b7 	bl	8004234 <SKprintf>
    SKprintf("Part2PartOffsetAdjustmentNVMMicroMeter = %d\r\n",	MyDevice.Data.Part2PartOffsetAdjustmentNVMMicroMeter	);
 8004ec6:	4b6f      	ldr	r3, [pc, #444]	; (8005084 <vl53data_disp+0x1d0>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	486f      	ldr	r0, [pc, #444]	; (800508c <vl53data_disp+0x1d8>)
 8004ece:	f7ff f9b1 	bl	8004234 <SKprintf>
    SKprintf("VL53L0X_DeviceParameters_t\r\n");
 8004ed2:	486f      	ldr	r0, [pc, #444]	; (8005090 <vl53data_disp+0x1dc>)
 8004ed4:	f7ff f9ae 	bl	8004234 <SKprintf>
    SKprintf("  DeviceMode = 0x%x\r\n",	MyDevice.Data.CurrentParameters.DeviceMode	);
 8004ed8:	4b6a      	ldr	r3, [pc, #424]	; (8005084 <vl53data_disp+0x1d0>)
 8004eda:	7a1b      	ldrb	r3, [r3, #8]
 8004edc:	4619      	mov	r1, r3
 8004ede:	486d      	ldr	r0, [pc, #436]	; (8005094 <vl53data_disp+0x1e0>)
 8004ee0:	f7ff f9a8 	bl	8004234 <SKprintf>
    SKprintf("  HistogramMode = 0x%x\r\n",	MyDevice.Data.CurrentParameters.HistogramMode	);
 8004ee4:	4b67      	ldr	r3, [pc, #412]	; (8005084 <vl53data_disp+0x1d0>)
 8004ee6:	7a5b      	ldrb	r3, [r3, #9]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	486b      	ldr	r0, [pc, #428]	; (8005098 <vl53data_disp+0x1e4>)
 8004eec:	f7ff f9a2 	bl	8004234 <SKprintf>
    SKprintf("  MeasurementTimingBudgetMicroSeconds = 0x%u\r\n",	MyDevice.Data.CurrentParameters.MeasurementTimingBudgetMicroSeconds	);
 8004ef0:	4b64      	ldr	r3, [pc, #400]	; (8005084 <vl53data_disp+0x1d0>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4869      	ldr	r0, [pc, #420]	; (800509c <vl53data_disp+0x1e8>)
 8004ef8:	f7ff f99c 	bl	8004234 <SKprintf>
    SKprintf("  InterMeasurementPeriodMilliSeconds = 0x%u\r\n",	MyDevice.Data.CurrentParameters.InterMeasurementPeriodMilliSeconds	);
 8004efc:	4b61      	ldr	r3, [pc, #388]	; (8005084 <vl53data_disp+0x1d0>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	4619      	mov	r1, r3
 8004f02:	4867      	ldr	r0, [pc, #412]	; (80050a0 <vl53data_disp+0x1ec>)
 8004f04:	f7ff f996 	bl	8004234 <SKprintf>
    SKprintf("  XTalkCompensationEnable = 0x%x\r\n",	MyDevice.Data.CurrentParameters.XTalkCompensationEnable	);
 8004f08:	4b5e      	ldr	r3, [pc, #376]	; (8005084 <vl53data_disp+0x1d0>)
 8004f0a:	7d1b      	ldrb	r3, [r3, #20]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4865      	ldr	r0, [pc, #404]	; (80050a4 <vl53data_disp+0x1f0>)
 8004f10:	f7ff f990 	bl	8004234 <SKprintf>
    SKprintf("  XTalkCompensationRangeMilliMeter = 0x%x\r\n",	MyDevice.Data.CurrentParameters.XTalkCompensationRangeMilliMeter	);
 8004f14:	4b5b      	ldr	r3, [pc, #364]	; (8005084 <vl53data_disp+0x1d0>)
 8004f16:	8adb      	ldrh	r3, [r3, #22]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4863      	ldr	r0, [pc, #396]	; (80050a8 <vl53data_disp+0x1f4>)
 8004f1c:	f7ff f98a 	bl	8004234 <SKprintf>
    SKprintf("  XTalkCompensationRateMegaCps = 0x%u\r\n",	MyDevice.Data.CurrentParameters.XTalkCompensationRateMegaCps	);
 8004f20:	4b58      	ldr	r3, [pc, #352]	; (8005084 <vl53data_disp+0x1d0>)
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	4619      	mov	r1, r3
 8004f26:	4861      	ldr	r0, [pc, #388]	; (80050ac <vl53data_disp+0x1f8>)
 8004f28:	f7ff f984 	bl	8004234 <SKprintf>
    SKprintf("  RangeOffsetMicroMeters = %d\r\n",	MyDevice.Data.CurrentParameters.RangeOffsetMicroMeters	);
 8004f2c:	4b55      	ldr	r3, [pc, #340]	; (8005084 <vl53data_disp+0x1d0>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	4619      	mov	r1, r3
 8004f32:	485f      	ldr	r0, [pc, #380]	; (80050b0 <vl53data_disp+0x1fc>)
 8004f34:	f7ff f97e 	bl	8004234 <SKprintf>

    //SKprintf("  LimitChecksEnable[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS] = 0x%x\r\n",	MyDevice.Data.CurrentParameters.LimitChecksEnable[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS]	);
    SKprintf("  LimitChecksEnable[] = ");
 8004f38:	485e      	ldr	r0, [pc, #376]	; (80050b4 <vl53data_disp+0x200>)
 8004f3a:	f7ff f97b 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	e00b      	b.n	8004f5c <vl53data_disp+0xa8>
        SKprintf("0x%02x,",	MyDevice.Data.CurrentParameters.LimitChecksEnable[i]	);
 8004f44:	4a4f      	ldr	r2, [pc, #316]	; (8005084 <vl53data_disp+0x1d0>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	3320      	adds	r3, #32
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4859      	ldr	r0, [pc, #356]	; (80050b8 <vl53data_disp+0x204>)
 8004f52:	f7ff f96f 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b05      	cmp	r3, #5
 8004f60:	ddf0      	ble.n	8004f44 <vl53data_disp+0x90>
    }
    SKprintf("\r\n");
 8004f62:	4856      	ldr	r0, [pc, #344]	; (80050bc <vl53data_disp+0x208>)
 8004f64:	f7ff f966 	bl	8004234 <SKprintf>


    //SKprintf("  LimitChecksStatus[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS] = 0x%x\r\n",	MyDevice.Data.CurrentParameters.LimitChecksStatus[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS]	);
    SKprintf("  LimitChecksStatus[] = ");
 8004f68:	4855      	ldr	r0, [pc, #340]	; (80050c0 <vl53data_disp+0x20c>)
 8004f6a:	f7ff f963 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004f6e:	2300      	movs	r3, #0
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	e00b      	b.n	8004f8c <vl53data_disp+0xd8>
        SKprintf("0x%02x,",	MyDevice.Data.CurrentParameters.LimitChecksStatus[i]	);
 8004f74:	4a43      	ldr	r2, [pc, #268]	; (8005084 <vl53data_disp+0x1d0>)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4413      	add	r3, r2
 8004f7a:	3326      	adds	r3, #38	; 0x26
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	484d      	ldr	r0, [pc, #308]	; (80050b8 <vl53data_disp+0x204>)
 8004f82:	f7ff f957 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	ddf0      	ble.n	8004f74 <vl53data_disp+0xc0>
    }
    SKprintf("\r\n");
 8004f92:	484a      	ldr	r0, [pc, #296]	; (80050bc <vl53data_disp+0x208>)
 8004f94:	f7ff f94e 	bl	8004234 <SKprintf>

    //SKprintf("  LimitChecksValue[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS] = 0x%u\r\n",	MyDevice.Data.CurrentParameters.LimitChecksValue[VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS]	);
    SKprintf("  LimitChecksValue[] = ");
 8004f98:	484a      	ldr	r0, [pc, #296]	; (80050c4 <vl53data_disp+0x210>)
 8004f9a:	f7ff f94b 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
 8004fa2:	e00c      	b.n	8004fbe <vl53data_disp+0x10a>
        SKprintf("0x%u,",	MyDevice.Data.CurrentParameters.LimitChecksValue[i]	);
 8004fa4:	4a37      	ldr	r2, [pc, #220]	; (8005084 <vl53data_disp+0x1d0>)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	330a      	adds	r3, #10
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4845      	ldr	r0, [pc, #276]	; (80050c8 <vl53data_disp+0x214>)
 8004fb4:	f7ff f93e 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++){
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b05      	cmp	r3, #5
 8004fc2:	ddef      	ble.n	8004fa4 <vl53data_disp+0xf0>
    }
    SKprintf("\r\n");
 8004fc4:	483d      	ldr	r0, [pc, #244]	; (80050bc <vl53data_disp+0x208>)
 8004fc6:	f7ff f935 	bl	8004234 <SKprintf>
    SKprintf("  dmax_mm[] = ");
    for(i=0; i<VL53L0X_DMAX_LUT_SIZE; i++){
        SKprintf("0x%u,", MyDevice.Data.CurrentParameters.dmax_lut.dmax_mm[i]	);
    }
#endif
    SKprintf("\r\n");
 8004fca:	483c      	ldr	r0, [pc, #240]	; (80050bc <vl53data_disp+0x208>)
 8004fcc:	f7ff f932 	bl	8004234 <SKprintf>

    SKprintf("  WrapAroundCheckEnable = 0x%x\r\n",	MyDevice.Data.CurrentParameters.WrapAroundCheckEnable	);
 8004fd0:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <vl53data_disp+0x1d0>)
 8004fd2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	483c      	ldr	r0, [pc, #240]	; (80050cc <vl53data_disp+0x218>)
 8004fda:	f7ff f92b 	bl	8004234 <SKprintf>
    SKprintf("VL53L0X_RangingMeasurementData_t\r\n");
 8004fde:	483c      	ldr	r0, [pc, #240]	; (80050d0 <vl53data_disp+0x21c>)
 8004fe0:	f7ff f928 	bl	8004234 <SKprintf>
    SKprintf("  TimeStamp = 0x%u\r\n",	MyDevice.Data.LastRangeMeasure.TimeStamp	);
 8004fe4:	4b27      	ldr	r3, [pc, #156]	; (8005084 <vl53data_disp+0x1d0>)
 8004fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fea:	4619      	mov	r1, r3
 8004fec:	4839      	ldr	r0, [pc, #228]	; (80050d4 <vl53data_disp+0x220>)
 8004fee:	f7ff f921 	bl	8004234 <SKprintf>
    SKprintf("  MeasurementTimeUsec = 0x%u\r\n",	MyDevice.Data.LastRangeMeasure.MeasurementTimeUsec	);
 8004ff2:	4b24      	ldr	r3, [pc, #144]	; (8005084 <vl53data_disp+0x1d0>)
 8004ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4837      	ldr	r0, [pc, #220]	; (80050d8 <vl53data_disp+0x224>)
 8004ffc:	f7ff f91a 	bl	8004234 <SKprintf>
    SKprintf("  RangeMilliMeter = %d mm\r\n",	MyDevice.Data.LastRangeMeasure.RangeMilliMeter	);
 8005000:	4b20      	ldr	r3, [pc, #128]	; (8005084 <vl53data_disp+0x1d0>)
 8005002:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8005006:	4619      	mov	r1, r3
 8005008:	4834      	ldr	r0, [pc, #208]	; (80050dc <vl53data_disp+0x228>)
 800500a:	f7ff f913 	bl	8004234 <SKprintf>
    SKprintf("  RangeDMaxMilliMeter = %d mm\r\n",	MyDevice.Data.LastRangeMeasure.RangeDMaxMilliMeter	);
 800500e:	4b1d      	ldr	r3, [pc, #116]	; (8005084 <vl53data_disp+0x1d0>)
 8005010:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8005014:	4619      	mov	r1, r3
 8005016:	4832      	ldr	r0, [pc, #200]	; (80050e0 <vl53data_disp+0x22c>)
 8005018:	f7ff f90c 	bl	8004234 <SKprintf>
    SKprintf("  SignalRateRtnMegaCps = %d\r\n",	MyDevice.Data.LastRangeMeasure.SignalRateRtnMegaCps	);
 800501c:	4b19      	ldr	r3, [pc, #100]	; (8005084 <vl53data_disp+0x1d0>)
 800501e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005022:	4619      	mov	r1, r3
 8005024:	482f      	ldr	r0, [pc, #188]	; (80050e4 <vl53data_disp+0x230>)
 8005026:	f7ff f905 	bl	8004234 <SKprintf>
    SKprintf("  AmbientRateRtnMegaCps = %d\r\n",	MyDevice.Data.LastRangeMeasure.AmbientRateRtnMegaCps	);
 800502a:	4b16      	ldr	r3, [pc, #88]	; (8005084 <vl53data_disp+0x1d0>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	4619      	mov	r1, r3
 8005032:	482d      	ldr	r0, [pc, #180]	; (80050e8 <vl53data_disp+0x234>)
 8005034:	f7ff f8fe 	bl	8004234 <SKprintf>
    SKprintf("  EffectiveSpadRtnCount = %d\r\n",	MyDevice.Data.LastRangeMeasure.EffectiveSpadRtnCount	);
 8005038:	4b12      	ldr	r3, [pc, #72]	; (8005084 <vl53data_disp+0x1d0>)
 800503a:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800503e:	4619      	mov	r1, r3
 8005040:	482a      	ldr	r0, [pc, #168]	; (80050ec <vl53data_disp+0x238>)
 8005042:	f7ff f8f7 	bl	8004234 <SKprintf>
    SKprintf("  ZoneId = 0x%x\r\n",	MyDevice.Data.LastRangeMeasure.ZoneId	);
 8005046:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <vl53data_disp+0x1d0>)
 8005048:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800504c:	4619      	mov	r1, r3
 800504e:	4828      	ldr	r0, [pc, #160]	; (80050f0 <vl53data_disp+0x23c>)
 8005050:	f7ff f8f0 	bl	8004234 <SKprintf>
    SKprintf("  RangeFractionalPart = 0x%x\r\n",	MyDevice.Data.LastRangeMeasure.RangeFractionalPart	);
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <vl53data_disp+0x1d0>)
 8005056:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800505a:	4619      	mov	r1, r3
 800505c:	4825      	ldr	r0, [pc, #148]	; (80050f4 <vl53data_disp+0x240>)
 800505e:	f7ff f8e9 	bl	8004234 <SKprintf>
    SKprintf("  RangeStatus = 0x%x\r\n",	MyDevice.Data.LastRangeMeasure.RangeStatus	);
 8005062:	4b08      	ldr	r3, [pc, #32]	; (8005084 <vl53data_disp+0x1d0>)
 8005064:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005068:	4619      	mov	r1, r3
 800506a:	4823      	ldr	r0, [pc, #140]	; (80050f8 <vl53data_disp+0x244>)
 800506c:	f7ff f8e2 	bl	8004234 <SKprintf>

    SKprintf("VL53L0X_HistogramMeasurementData_t\r\n");
 8005070:	4822      	ldr	r0, [pc, #136]	; (80050fc <vl53data_disp+0x248>)
 8005072:	f7ff f8df 	bl	8004234 <SKprintf>
    //SKprintf("  HistogramData[VL53L0X_HISTOGRAM_BUFFER_SIZE] = 0x%u\r\n",	MyDevice.Data.LastHistogramMeasure.HistogramData[VL53L0X_HISTOGRAM_BUFFER_SIZE]	);
    SKprintf("  HistogramData[] = ");
 8005076:	4822      	ldr	r0, [pc, #136]	; (8005100 <vl53data_disp+0x24c>)
 8005078:	f7ff f8dc 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_HISTOGRAM_BUFFER_SIZE; i++){
 800507c:	2300      	movs	r3, #0
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	e06a      	b.n	8005158 <vl53data_disp+0x2a4>
 8005082:	bf00      	nop
 8005084:	20002034 	.word	0x20002034
 8005088:	0801929c 	.word	0x0801929c
 800508c:	080192c0 	.word	0x080192c0
 8005090:	080192f0 	.word	0x080192f0
 8005094:	08019310 	.word	0x08019310
 8005098:	08019328 	.word	0x08019328
 800509c:	08019344 	.word	0x08019344
 80050a0:	08019374 	.word	0x08019374
 80050a4:	080193a4 	.word	0x080193a4
 80050a8:	080193c8 	.word	0x080193c8
 80050ac:	080193f4 	.word	0x080193f4
 80050b0:	0801941c 	.word	0x0801941c
 80050b4:	0801943c 	.word	0x0801943c
 80050b8:	08019458 	.word	0x08019458
 80050bc:	08019100 	.word	0x08019100
 80050c0:	08019460 	.word	0x08019460
 80050c4:	0801947c 	.word	0x0801947c
 80050c8:	08019494 	.word	0x08019494
 80050cc:	0801949c 	.word	0x0801949c
 80050d0:	080194c0 	.word	0x080194c0
 80050d4:	080194e4 	.word	0x080194e4
 80050d8:	080194fc 	.word	0x080194fc
 80050dc:	0801951c 	.word	0x0801951c
 80050e0:	08019538 	.word	0x08019538
 80050e4:	08019558 	.word	0x08019558
 80050e8:	08019578 	.word	0x08019578
 80050ec:	08019598 	.word	0x08019598
 80050f0:	080195b8 	.word	0x080195b8
 80050f4:	080195cc 	.word	0x080195cc
 80050f8:	080195ec 	.word	0x080195ec
 80050fc:	08019604 	.word	0x08019604
 8005100:	0801962c 	.word	0x0801962c
        SKprintf("0x%u,", MyDevice.Data.LastHistogramMeasure.HistogramData[i]	);
 8005104:	4a7c      	ldr	r2, [pc, #496]	; (80052f8 <vl53data_disp+0x444>)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3326      	adds	r3, #38	; 0x26
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4619      	mov	r1, r3
 8005112:	487a      	ldr	r0, [pc, #488]	; (80052fc <vl53data_disp+0x448>)
 8005114:	f7ff f88e 	bl	8004234 <SKprintf>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b17      	cmp	r3, #23
 800511c:	bf8c      	ite	hi
 800511e:	2201      	movhi	r2, #1
 8005120:	2200      	movls	r2, #0
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	2a00      	cmp	r2, #0
 8005126:	d114      	bne.n	8005152 <vl53data_disp+0x29e>
 8005128:	2201      	movs	r2, #1
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8005132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <vl53data_disp+0x29e>
        switch(i){
            case 7:
            case 15:
            case 23:
                SKprintf("\r\n");
 8005144:	486e      	ldr	r0, [pc, #440]	; (8005300 <vl53data_disp+0x44c>)
 8005146:	f7ff f875 	bl	8004234 <SKprintf>
                SKprintf("                  = ");
 800514a:	486e      	ldr	r0, [pc, #440]	; (8005304 <vl53data_disp+0x450>)
 800514c:	f7ff f872 	bl	8004234 <SKprintf>
                break;
 8005150:	bf00      	nop
    for(i=0; i<VL53L0X_HISTOGRAM_BUFFER_SIZE; i++){
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3301      	adds	r3, #1
 8005156:	607b      	str	r3, [r7, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b17      	cmp	r3, #23
 800515c:	ddd2      	ble.n	8005104 <vl53data_disp+0x250>
        }
    }
    SKprintf("\r\n");
 800515e:	4868      	ldr	r0, [pc, #416]	; (8005300 <vl53data_disp+0x44c>)
 8005160:	f7ff f868 	bl	8004234 <SKprintf>



    SKprintf("  FirstBin = 0x%x\r\n",	MyDevice.Data.LastHistogramMeasure.FirstBin	);
 8005164:	4b64      	ldr	r3, [pc, #400]	; (80052f8 <vl53data_disp+0x444>)
 8005166:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800516a:	4619      	mov	r1, r3
 800516c:	4866      	ldr	r0, [pc, #408]	; (8005308 <vl53data_disp+0x454>)
 800516e:	f7ff f861 	bl	8004234 <SKprintf>
    SKprintf("  BufferSize = 0x%x\r\n",	MyDevice.Data.LastHistogramMeasure.BufferSize	);
 8005172:	4b61      	ldr	r3, [pc, #388]	; (80052f8 <vl53data_disp+0x444>)
 8005174:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8005178:	4619      	mov	r1, r3
 800517a:	4864      	ldr	r0, [pc, #400]	; (800530c <vl53data_disp+0x458>)
 800517c:	f7ff f85a 	bl	8004234 <SKprintf>
    SKprintf("  NumberOfBins = 0x%x\r\n",	MyDevice.Data.LastHistogramMeasure.NumberOfBins	);
 8005180:	4b5d      	ldr	r3, [pc, #372]	; (80052f8 <vl53data_disp+0x444>)
 8005182:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8005186:	4619      	mov	r1, r3
 8005188:	4861      	ldr	r0, [pc, #388]	; (8005310 <vl53data_disp+0x45c>)
 800518a:	f7ff f853 	bl	8004234 <SKprintf>
    SKprintf("  ErrorStatus = 0x%x\r\n",	MyDevice.Data.LastHistogramMeasure.ErrorStatus	);
 800518e:	4b5a      	ldr	r3, [pc, #360]	; (80052f8 <vl53data_disp+0x444>)
 8005190:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8005194:	4619      	mov	r1, r3
 8005196:	485f      	ldr	r0, [pc, #380]	; (8005314 <vl53data_disp+0x460>)
 8005198:	f7ff f84c 	bl	8004234 <SKprintf>

    SKprintf("VL53L0X_DeviceSpecificParameters_t\r\n");
 800519c:	485e      	ldr	r0, [pc, #376]	; (8005318 <vl53data_disp+0x464>)
 800519e:	f7ff f849 	bl	8004234 <SKprintf>
    SKprintf("  OscFrequencyMHz  = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.OscFrequencyMHz 	);
 80051a2:	4b55      	ldr	r3, [pc, #340]	; (80052f8 <vl53data_disp+0x444>)
 80051a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80051a8:	4619      	mov	r1, r3
 80051aa:	485c      	ldr	r0, [pc, #368]	; (800531c <vl53data_disp+0x468>)
 80051ac:	f7ff f842 	bl	8004234 <SKprintf>
    SKprintf("  LastEncodedTimeout  = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.LastEncodedTimeout 	);
 80051b0:	4b51      	ldr	r3, [pc, #324]	; (80052f8 <vl53data_disp+0x444>)
 80051b2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80051b6:	4619      	mov	r1, r3
 80051b8:	4859      	ldr	r0, [pc, #356]	; (8005320 <vl53data_disp+0x46c>)
 80051ba:	f7ff f83b 	bl	8004234 <SKprintf>
    SKprintf("  Pin0GpioFunctionality = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.Pin0GpioFunctionality	);
 80051be:	4b4e      	ldr	r3, [pc, #312]	; (80052f8 <vl53data_disp+0x444>)
 80051c0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80051c4:	4619      	mov	r1, r3
 80051c6:	4857      	ldr	r0, [pc, #348]	; (8005324 <vl53data_disp+0x470>)
 80051c8:	f7ff f834 	bl	8004234 <SKprintf>
    SKprintf("  FinalRangeTimeoutMicroSecs = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.FinalRangeTimeoutMicroSecs	);
 80051cc:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <vl53data_disp+0x444>)
 80051ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051d2:	4619      	mov	r1, r3
 80051d4:	4854      	ldr	r0, [pc, #336]	; (8005328 <vl53data_disp+0x474>)
 80051d6:	f7ff f82d 	bl	8004234 <SKprintf>
    SKprintf("  FinalRangeVcselPulsePeriod = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.FinalRangeVcselPulsePeriod	);
 80051da:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <vl53data_disp+0x444>)
 80051dc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80051e0:	4619      	mov	r1, r3
 80051e2:	4852      	ldr	r0, [pc, #328]	; (800532c <vl53data_disp+0x478>)
 80051e4:	f7ff f826 	bl	8004234 <SKprintf>
    SKprintf("  PreRangeTimeoutMicroSecs = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.PreRangeTimeoutMicroSecs	);
 80051e8:	4b43      	ldr	r3, [pc, #268]	; (80052f8 <vl53data_disp+0x444>)
 80051ea:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80051ee:	4619      	mov	r1, r3
 80051f0:	484f      	ldr	r0, [pc, #316]	; (8005330 <vl53data_disp+0x47c>)
 80051f2:	f7ff f81f 	bl	8004234 <SKprintf>
    SKprintf("  PreRangeVcselPulsePeriod = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.PreRangeVcselPulsePeriod	);
 80051f6:	4b40      	ldr	r3, [pc, #256]	; (80052f8 <vl53data_disp+0x444>)
 80051f8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80051fc:	4619      	mov	r1, r3
 80051fe:	484d      	ldr	r0, [pc, #308]	; (8005334 <vl53data_disp+0x480>)
 8005200:	f7ff f818 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstRefArray = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.SigmaEstRefArray	);
 8005204:	4b3c      	ldr	r3, [pc, #240]	; (80052f8 <vl53data_disp+0x444>)
 8005206:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 800520a:	4619      	mov	r1, r3
 800520c:	484a      	ldr	r0, [pc, #296]	; (8005338 <vl53data_disp+0x484>)
 800520e:	f7ff f811 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstEffPulseWidth = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.SigmaEstEffPulseWidth	);
 8005212:	4b39      	ldr	r3, [pc, #228]	; (80052f8 <vl53data_disp+0x444>)
 8005214:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8005218:	4619      	mov	r1, r3
 800521a:	4848      	ldr	r0, [pc, #288]	; (800533c <vl53data_disp+0x488>)
 800521c:	f7ff f80a 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstEffAmbWidth = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.SigmaEstEffAmbWidth	);
 8005220:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <vl53data_disp+0x444>)
 8005222:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8005226:	4619      	mov	r1, r3
 8005228:	4845      	ldr	r0, [pc, #276]	; (8005340 <vl53data_disp+0x48c>)
 800522a:	f7ff f803 	bl	8004234 <SKprintf>
    SKprintf("  ReadDataFromDeviceDone = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.ReadDataFromDeviceDone	);
 800522e:	4b32      	ldr	r3, [pc, #200]	; (80052f8 <vl53data_disp+0x444>)
 8005230:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005234:	4619      	mov	r1, r3
 8005236:	4843      	ldr	r0, [pc, #268]	; (8005344 <vl53data_disp+0x490>)
 8005238:	f7fe fffc 	bl	8004234 <SKprintf>
    SKprintf("  ModuleId = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.ModuleId	);
 800523c:	4b2e      	ldr	r3, [pc, #184]	; (80052f8 <vl53data_disp+0x444>)
 800523e:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8005242:	4619      	mov	r1, r3
 8005244:	4840      	ldr	r0, [pc, #256]	; (8005348 <vl53data_disp+0x494>)
 8005246:	f7fe fff5 	bl	8004234 <SKprintf>
    SKprintf("  Revision = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.Revision	);
 800524a:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <vl53data_disp+0x444>)
 800524c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8005250:	4619      	mov	r1, r3
 8005252:	483e      	ldr	r0, [pc, #248]	; (800534c <vl53data_disp+0x498>)
 8005254:	f7fe ffee 	bl	8004234 <SKprintf>
    SKprintf("  ProductId[VL53L0X_MAX_STRING_LENGTH] = %s\r\n",	&MyDevice.Data.DeviceSpecificParameters.ProductId[0]	);
 8005258:	493d      	ldr	r1, [pc, #244]	; (8005350 <vl53data_disp+0x49c>)
 800525a:	483e      	ldr	r0, [pc, #248]	; (8005354 <vl53data_disp+0x4a0>)
 800525c:	f7fe ffea 	bl	8004234 <SKprintf>
    SKprintf("  ReferenceSpadCount = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.ReferenceSpadCount	);
 8005260:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <vl53data_disp+0x444>)
 8005262:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8005266:	4619      	mov	r1, r3
 8005268:	483b      	ldr	r0, [pc, #236]	; (8005358 <vl53data_disp+0x4a4>)
 800526a:	f7fe ffe3 	bl	8004234 <SKprintf>
    SKprintf("  ReferenceSpadType = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.ReferenceSpadType	);
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <vl53data_disp+0x444>)
 8005270:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005274:	4619      	mov	r1, r3
 8005276:	4839      	ldr	r0, [pc, #228]	; (800535c <vl53data_disp+0x4a8>)
 8005278:	f7fe ffdc 	bl	8004234 <SKprintf>
    SKprintf("  RefSpadsInitialised = 0x%x\r\n",	MyDevice.Data.DeviceSpecificParameters.RefSpadsInitialised	);
 800527c:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <vl53data_disp+0x444>)
 800527e:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8005282:	4619      	mov	r1, r3
 8005284:	4836      	ldr	r0, [pc, #216]	; (8005360 <vl53data_disp+0x4ac>)
 8005286:	f7fe ffd5 	bl	8004234 <SKprintf>
    SKprintf("  PartUIDUpper = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.PartUIDUpper	);
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <vl53data_disp+0x444>)
 800528c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005290:	4619      	mov	r1, r3
 8005292:	4834      	ldr	r0, [pc, #208]	; (8005364 <vl53data_disp+0x4b0>)
 8005294:	f7fe ffce 	bl	8004234 <SKprintf>
    SKprintf("  PartUIDLower = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.PartUIDLower	);
 8005298:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <vl53data_disp+0x444>)
 800529a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800529e:	4619      	mov	r1, r3
 80052a0:	4831      	ldr	r0, [pc, #196]	; (8005368 <vl53data_disp+0x4b4>)
 80052a2:	f7fe ffc7 	bl	8004234 <SKprintf>
    SKprintf("  SignalRateMeasFixed400mm = 0x%u\r\n",	MyDevice.Data.DeviceSpecificParameters.SignalRateMeasFixed400mm	);
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <vl53data_disp+0x444>)
 80052a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80052ac:	4619      	mov	r1, r3
 80052ae:	482f      	ldr	r0, [pc, #188]	; (800536c <vl53data_disp+0x4b8>)
 80052b0:	f7fe ffc0 	bl	8004234 <SKprintf>

    SKprintf("VL53L0X_SpadData_t\r\n");
 80052b4:	482e      	ldr	r0, [pc, #184]	; (8005370 <vl53data_disp+0x4bc>)
 80052b6:	f7fe ffbd 	bl	8004234 <SKprintf>
//    SKprintf("  RefSpadEnables = 0x%x\r\n",	MyDevice.Data.SpadData.RefSpadEnables[VL53L0X_REF_SPAD_BUFFER_SIZE]	);
    SKprintf("  RefSpadEnables[] = ");
 80052ba:	482e      	ldr	r0, [pc, #184]	; (8005374 <vl53data_disp+0x4c0>)
 80052bc:	f7fe ffba 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_REF_SPAD_BUFFER_SIZE; i++){
 80052c0:	2300      	movs	r3, #0
 80052c2:	607b      	str	r3, [r7, #4]
 80052c4:	e00c      	b.n	80052e0 <vl53data_disp+0x42c>
        SKprintf("0x%02x,",	MyDevice.Data.SpadData.RefSpadEnables[i]	);
 80052c6:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <vl53data_disp+0x444>)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	4619      	mov	r1, r3
 80052d4:	4828      	ldr	r0, [pc, #160]	; (8005378 <vl53data_disp+0x4c4>)
 80052d6:	f7fe ffad 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_REF_SPAD_BUFFER_SIZE; i++){
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3301      	adds	r3, #1
 80052de:	607b      	str	r3, [r7, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b05      	cmp	r3, #5
 80052e4:	ddef      	ble.n	80052c6 <vl53data_disp+0x412>
    }
    SKprintf("\r\n");
 80052e6:	4806      	ldr	r0, [pc, #24]	; (8005300 <vl53data_disp+0x44c>)
 80052e8:	f7fe ffa4 	bl	8004234 <SKprintf>

    //    SKprintf("  RefGoodSpadMap = 0x%x\r\n",	MyDevice.Data.SpadData.RefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE]	);

    SKprintf("  RefGoodSpadMap[] = ");
 80052ec:	4823      	ldr	r0, [pc, #140]	; (800537c <vl53data_disp+0x4c8>)
 80052ee:	f7fe ffa1 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_REF_SPAD_BUFFER_SIZE; i++){
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	e050      	b.n	800539a <vl53data_disp+0x4e6>
 80052f8:	20002034 	.word	0x20002034
 80052fc:	08019494 	.word	0x08019494
 8005300:	08019100 	.word	0x08019100
 8005304:	08019644 	.word	0x08019644
 8005308:	0801965c 	.word	0x0801965c
 800530c:	08019670 	.word	0x08019670
 8005310:	08019688 	.word	0x08019688
 8005314:	080196a0 	.word	0x080196a0
 8005318:	080196b8 	.word	0x080196b8
 800531c:	080196e0 	.word	0x080196e0
 8005320:	080196fc 	.word	0x080196fc
 8005324:	0801971c 	.word	0x0801971c
 8005328:	08019740 	.word	0x08019740
 800532c:	08019768 	.word	0x08019768
 8005330:	08019790 	.word	0x08019790
 8005334:	080197b4 	.word	0x080197b4
 8005338:	080197d8 	.word	0x080197d8
 800533c:	080197f4 	.word	0x080197f4
 8005340:	08019818 	.word	0x08019818
 8005344:	08019838 	.word	0x08019838
 8005348:	0801985c 	.word	0x0801985c
 800534c:	08019870 	.word	0x08019870
 8005350:	20002153 	.word	0x20002153
 8005354:	08019884 	.word	0x08019884
 8005358:	080198b4 	.word	0x080198b4
 800535c:	080198d4 	.word	0x080198d4
 8005360:	080198f4 	.word	0x080198f4
 8005364:	08019914 	.word	0x08019914
 8005368:	0801992c 	.word	0x0801992c
 800536c:	08019944 	.word	0x08019944
 8005370:	08019968 	.word	0x08019968
 8005374:	08019980 	.word	0x08019980
 8005378:	08019458 	.word	0x08019458
 800537c:	08019998 	.word	0x08019998
        SKprintf("0x%02x,",	MyDevice.Data.SpadData.RefGoodSpadMap[i]	);
 8005380:	4a41      	ldr	r2, [pc, #260]	; (8005488 <vl53data_disp+0x5d4>)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4413      	add	r3, r2
 8005386:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	4619      	mov	r1, r3
 800538e:	483f      	ldr	r0, [pc, #252]	; (800548c <vl53data_disp+0x5d8>)
 8005390:	f7fe ff50 	bl	8004234 <SKprintf>
    for(i=0; i<VL53L0X_REF_SPAD_BUFFER_SIZE; i++){
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3301      	adds	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b05      	cmp	r3, #5
 800539e:	ddef      	ble.n	8005380 <vl53data_disp+0x4cc>
    }
    SKprintf("\r\n");
 80053a0:	483b      	ldr	r0, [pc, #236]	; (8005490 <vl53data_disp+0x5dc>)
 80053a2:	f7fe ff47 	bl	8004234 <SKprintf>


    SKprintf("ETC.\r\n");
 80053a6:	483b      	ldr	r0, [pc, #236]	; (8005494 <vl53data_disp+0x5e0>)
 80053a8:	f7fe ff44 	bl	8004234 <SKprintf>
    SKprintf("  SequenceConfig = 0x%x\r\n",	MyDevice.Data.SequenceConfig	);
 80053ac:	4b36      	ldr	r3, [pc, #216]	; (8005488 <vl53data_disp+0x5d4>)
 80053ae:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80053b2:	4619      	mov	r1, r3
 80053b4:	4838      	ldr	r0, [pc, #224]	; (8005498 <vl53data_disp+0x5e4>)
 80053b6:	f7fe ff3d 	bl	8004234 <SKprintf>
    SKprintf("  RangeFractionalEnable = 0x%x\r\n",	MyDevice.Data.RangeFractionalEnable	);
 80053ba:	4b33      	ldr	r3, [pc, #204]	; (8005488 <vl53data_disp+0x5d4>)
 80053bc:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 80053c0:	4619      	mov	r1, r3
 80053c2:	4836      	ldr	r0, [pc, #216]	; (800549c <vl53data_disp+0x5e8>)
 80053c4:	f7fe ff36 	bl	8004234 <SKprintf>
    SKprintf("  PalState = 0x%x\r\n",	MyDevice.Data.PalState	);
 80053c8:	4b2f      	ldr	r3, [pc, #188]	; (8005488 <vl53data_disp+0x5d4>)
 80053ca:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
 80053ce:	4619      	mov	r1, r3
 80053d0:	4833      	ldr	r0, [pc, #204]	; (80054a0 <vl53data_disp+0x5ec>)
 80053d2:	f7fe ff2f 	bl	8004234 <SKprintf>
    SKprintf("  PowerMode = 0x%x\r\n",	MyDevice.Data.PowerMode	);
 80053d6:	4b2c      	ldr	r3, [pc, #176]	; (8005488 <vl53data_disp+0x5d4>)
 80053d8:	f893 315f 	ldrb.w	r3, [r3, #351]	; 0x15f
 80053dc:	4619      	mov	r1, r3
 80053de:	4831      	ldr	r0, [pc, #196]	; (80054a4 <vl53data_disp+0x5f0>)
 80053e0:	f7fe ff28 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstRefArray = 0x%x\r\n",	MyDevice.Data.SigmaEstRefArray	);
 80053e4:	4b28      	ldr	r3, [pc, #160]	; (8005488 <vl53data_disp+0x5d4>)
 80053e6:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 80053ea:	4619      	mov	r1, r3
 80053ec:	482e      	ldr	r0, [pc, #184]	; (80054a8 <vl53data_disp+0x5f4>)
 80053ee:	f7fe ff21 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstEffPulseWidth = 0x%x\r\n",	MyDevice.Data.SigmaEstEffPulseWidth	);
 80053f2:	4b25      	ldr	r3, [pc, #148]	; (8005488 <vl53data_disp+0x5d4>)
 80053f4:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 80053f8:	4619      	mov	r1, r3
 80053fa:	482c      	ldr	r0, [pc, #176]	; (80054ac <vl53data_disp+0x5f8>)
 80053fc:	f7fe ff1a 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstEffAmbWidth = 0x%x\r\n",	MyDevice.Data.SigmaEstEffAmbWidth	);
 8005400:	4b21      	ldr	r3, [pc, #132]	; (8005488 <vl53data_disp+0x5d4>)
 8005402:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8005406:	4619      	mov	r1, r3
 8005408:	4829      	ldr	r0, [pc, #164]	; (80054b0 <vl53data_disp+0x5fc>)
 800540a:	f7fe ff13 	bl	8004234 <SKprintf>
    SKprintf("  StopVariable = 0x%x\r\n",	MyDevice.Data.StopVariable	);
 800540e:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <vl53data_disp+0x5d4>)
 8005410:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8005414:	4619      	mov	r1, r3
 8005416:	4827      	ldr	r0, [pc, #156]	; (80054b4 <vl53data_disp+0x600>)
 8005418:	f7fe ff0c 	bl	8004234 <SKprintf>
    SKprintf("  targetRefRate = 0x%x\r\n",	MyDevice.Data.targetRefRate	);
 800541c:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <vl53data_disp+0x5d4>)
 800541e:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8005422:	4619      	mov	r1, r3
 8005424:	4824      	ldr	r0, [pc, #144]	; (80054b8 <vl53data_disp+0x604>)
 8005426:	f7fe ff05 	bl	8004234 <SKprintf>
    SKprintf("  SigmaEstimate = 0x%u\r\n",	MyDevice.Data.SigmaEstimate	);
 800542a:	4b17      	ldr	r3, [pc, #92]	; (8005488 <vl53data_disp+0x5d4>)
 800542c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8005430:	4619      	mov	r1, r3
 8005432:	4822      	ldr	r0, [pc, #136]	; (80054bc <vl53data_disp+0x608>)
 8005434:	f7fe fefe 	bl	8004234 <SKprintf>
    SKprintf("  SignalEstimate = 0x%u\r\n",	MyDevice.Data.SignalEstimate	);
 8005438:	4b13      	ldr	r3, [pc, #76]	; (8005488 <vl53data_disp+0x5d4>)
 800543a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800543e:	4619      	mov	r1, r3
 8005440:	481f      	ldr	r0, [pc, #124]	; (80054c0 <vl53data_disp+0x60c>)
 8005442:	f7fe fef7 	bl	8004234 <SKprintf>
    SKprintf("  LastSignalRefMcps = 0x%u\r\n",	MyDevice.Data.LastSignalRefMcps	);
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <vl53data_disp+0x5d4>)
 8005448:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800544c:	4619      	mov	r1, r3
 800544e:	481d      	ldr	r0, [pc, #116]	; (80054c4 <vl53data_disp+0x610>)
 8005450:	f7fe fef0 	bl	8004234 <SKprintf>
//    SKprintf("  *pTuningSettingsPointer = 0x%x\r\n",	MyDevice.Data.*pTuningSettingsPointer	);
    SKprintf("  UseInternalTuningSettings = 0x%x\r\n",	MyDevice.Data.UseInternalTuningSettings	);
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <vl53data_disp+0x5d4>)
 8005456:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800545a:	4619      	mov	r1, r3
 800545c:	481a      	ldr	r0, [pc, #104]	; (80054c8 <vl53data_disp+0x614>)
 800545e:	f7fe fee9 	bl	8004234 <SKprintf>
    SKprintf("  LinearityCorrectiveGain = 0x%x\r\n",	MyDevice.Data.LinearityCorrectiveGain	);
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <vl53data_disp+0x5d4>)
 8005464:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8005468:	4619      	mov	r1, r3
 800546a:	4818      	ldr	r0, [pc, #96]	; (80054cc <vl53data_disp+0x618>)
 800546c:	f7fe fee2 	bl	8004234 <SKprintf>

    SKprintf("  I2cDevAddr = 0x%x\r\n",	MyDevice.I2cDevAddr	);
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <vl53data_disp+0x5d4>)
 8005472:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8005476:	4619      	mov	r1, r3
 8005478:	4815      	ldr	r0, [pc, #84]	; (80054d0 <vl53data_disp+0x61c>)
 800547a:	f7fe fedb 	bl	8004234 <SKprintf>
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20002034 	.word	0x20002034
 800548c:	08019458 	.word	0x08019458
 8005490:	08019100 	.word	0x08019100
 8005494:	080199b0 	.word	0x080199b0
 8005498:	080199b8 	.word	0x080199b8
 800549c:	080199d4 	.word	0x080199d4
 80054a0:	080199f8 	.word	0x080199f8
 80054a4:	08019a0c 	.word	0x08019a0c
 80054a8:	080197d8 	.word	0x080197d8
 80054ac:	080197f4 	.word	0x080197f4
 80054b0:	08019818 	.word	0x08019818
 80054b4:	08019a24 	.word	0x08019a24
 80054b8:	08019a3c 	.word	0x08019a3c
 80054bc:	08019a58 	.word	0x08019a58
 80054c0:	08019a74 	.word	0x08019a74
 80054c4:	08019a90 	.word	0x08019a90
 80054c8:	08019ab0 	.word	0x08019ab0
 80054cc:	08019ad8 	.word	0x08019ad8
 80054d0:	08019afc 	.word	0x08019afc

080054d4 <VL53L0X_GetVersion>:
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable);

/* Group PAL General Functions */

VL53L0X_Error VL53L0X_GetVersion(VL53L0X_Version_t *pVersion)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054dc:	2300      	movs	r3, #0
 80054de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	pVersion->major = VL53L0X_IMPLEMENTATION_VER_MAJOR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	711a      	strb	r2, [r3, #4]
	pVersion->minor = VL53L0X_IMPLEMENTATION_VER_MINOR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	715a      	strb	r2, [r3, #5]
	pVersion->build = VL53L0X_IMPLEMENTATION_VER_SUB;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2204      	movs	r2, #4
 80054f0:	719a      	strb	r2, [r3, #6]

	pVersion->revision = VL53L0X_IMPLEMENTATION_VER_REVISION;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f44f 529b 	mov.w	r2, #4960	; 0x1360
 80054f8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80054fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <VL53L0X_GetDeviceInfo>:

}
#endif
VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005514:	2300      	movs	r3, #0
 8005516:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f005 f870 	bl	800a600 <VL53L0X_get_device_info>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <VL53L0X_GetRangeStatusString>:
	return Status;
}
#endif
VL53L0X_Error VL53L0X_GetRangeStatusString(uint8_t RangeStatus,
	char *pRangeStatusString)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	6039      	str	r1, [r7, #0]
 800553a:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800553c:	2300      	movs	r3, #0
 800553e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_range_status_string(RangeStatus,
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f005 f8df 	bl	800a708 <VL53L0X_get_range_status_string>
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]
		pRangeStatusString);

	LOG_FUNCTION_END(Status);
	return Status;
 800554e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <VL53L0X_GetPalErrorString>:

VL53L0X_Error VL53L0X_GetPalErrorString(VL53L0X_Error PalErrorCode,
	char *pPalErrorString)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	4603      	mov	r3, r0
 8005562:	6039      	str	r1, [r7, #0]
 8005564:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_pal_error_string(PalErrorCode, pPalErrorString);
 800556a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556e:	6839      	ldr	r1, [r7, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f005 f943 	bl	800a7fc <VL53L0X_get_pal_error_string>
 8005576:	4603      	mov	r3, r0
 8005578:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800557a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}
#endif
VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005590:	2300      	movs	r3, #0
 8005592:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005594:	6839      	ldr	r1, [r7, #0]
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f001 fed6 	bl	8007348 <VL53L0X_get_offset_calibration_data_micro_meter>
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80055a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <VL53L0X_DataInit>:
 * この関数は VL53L0X_State を変更します。
 * VL53L0X_STATE_POWERDOWN から VL53L0X_STATE_WAIT_STATICINIT まで。
 */
//=============================================================================
VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b0a4      	sub	sp, #144	; 0x90
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	int i;
	uint8_t StopVariable;

	LOG_FUNCTION_START("");

    vl53_LogDisp("_DataInit() START", Status);
 80055ba:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80055be:	4619      	mov	r1, r3
 80055c0:	48c7      	ldr	r0, [pc, #796]	; (80058e0 <VL53L0X_DataInit+0x334>)
 80055c2:	f7ff f84b 	bl	800465c <vl53_LogDisp>
#ifdef USE_I2C_2V8
	Status = VL53L0X_UpdateByte(Dev, VL53L0X_REG_VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, 0xFE, 0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80055c6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <VL53L0X_DataInit+0x32>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80055ce:	2200      	movs	r2, #0
 80055d0:	2188      	movs	r1, #136	; 0x88
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f005 fbb2 	bl	800ad3c <VL53L0X_WrByte>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
     * 直線性補正ゲインのデフォルト値は 1000 です。
     * Default value is 1000 for Linearity Corrective Gain
     * #define PALDevDataSet(Dev, field, data) (Dev->Data.field)=(data)
     */
    //Dev->Data.LinearityCorrectiveGain = 1000;
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055ec:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
     *                 PALDevDataSet(Dev, DeviceSpecificParameters.field, value)
	 */

    //PALDevDataSet(Dev, DeviceSpecificParameters.OscFrequencyMHz, 618660);
    //Dev->Data.DeviceSpecificParameters.OscFrequencyMHz = 618660;
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4abc      	ldr	r2, [pc, #752]	; (80058e4 <VL53L0X_DataInit+0x338>)
 80055f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    SKprintf("VL53L0X_DataInit:OscFrequencyMHz=%u\r\n",Dev->Data.DeviceSpecificParameters.OscFrequencyMHz);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80055fe:	4619      	mov	r1, r3
 8005600:	48b9      	ldr	r0, [pc, #740]	; (80058e8 <VL53L0X_DataInit+0x33c>)
 8005602:	f7fe fe17 	bl	8004234 <SKprintf>
     * Set Default XTalkCompensationRateMegaCps to 0
     * #define VL53L0X_SETPARAMETERFIELD(Dev, field, value)  PALDevDataSet(Dev, CurrentParameters.field, value)
     */
    // PALDevDataSet(Dev, CurrentParameters.XTalkCompensationRateMegaCps, 0);
    //Dev->Data.CurrentParameters.XTalkCompensationRateMegaCps = 0;
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800560c:	f107 0310 	add.w	r3, r7, #16
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fb0a 	bl	8005c2c <VL53L0X_GetDeviceParameters>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 800561e:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005622:	2b00      	cmp	r3, #0
 8005624:	d130      	bne.n	8005688 <VL53L0X_DataInit+0xdc>

        /* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005626:	2300      	movs	r3, #0
 8005628:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800562a:	2300      	movs	r3, #0
 800562c:	747b      	strb	r3, [r7, #17]

		/* Dmax lookup table */
        /* 0.0 */
        CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 800562e:	2300      	movs	r3, #0
 8005630:	64fb      	str	r3, [r7, #76]	; 0x4c
        /* 1200 */
        CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 8005632:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 8005636:	66bb      	str	r3, [r7, #104]	; 0x68
        /* 0.7 */
        CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 8005638:	f24b 3333 	movw	r3, #45875	; 0xb333
 800563c:	653b      	str	r3, [r7, #80]	; 0x50
        /* 1100 */
        CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 800563e:	4bab      	ldr	r3, [pc, #684]	; (80058ec <VL53L0X_DataInit+0x340>)
 8005640:	66fb      	str	r3, [r7, #108]	; 0x6c
        /* 2 */
        CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 8005642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
        /* 900 */
        CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 8005648:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 800564c:	673b      	str	r3, [r7, #112]	; 0x70
        /* 3.8 */
        CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 800564e:	4ba8      	ldr	r3, [pc, #672]	; (80058f0 <VL53L0X_DataInit+0x344>)
 8005650:	65bb      	str	r3, [r7, #88]	; 0x58
        /* 750 */
        CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 8005652:	4ba8      	ldr	r3, [pc, #672]	; (80058f4 <VL53L0X_DataInit+0x348>)
 8005654:	677b      	str	r3, [r7, #116]	; 0x74
        /* 7.3 */
        CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 8005656:	4ba8      	ldr	r3, [pc, #672]	; (80058f8 <VL53L0X_DataInit+0x34c>)
 8005658:	65fb      	str	r3, [r7, #92]	; 0x5c
        /* 550 */
        CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 800565a:	4ba8      	ldr	r3, [pc, #672]	; (80058fc <VL53L0X_DataInit+0x350>)
 800565c:	67bb      	str	r3, [r7, #120]	; 0x78
        /* 10 */
        CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 800565e:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8005662:	663b      	str	r3, [r7, #96]	; 0x60
        /* 500 */
        CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 8005664:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 8005668:	67fb      	str	r3, [r7, #124]	; 0x7c
        /* 15 */
        CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 800566a:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800566e:	667b      	str	r3, [r7, #100]	; 0x64
        /* 400 */
        CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 8005670:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 8005674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3308      	adds	r3, #8
 800567c:	f107 0110 	add.w	r1, r7, #16
 8005680:	2278      	movs	r2, #120	; 0x78
 8005682:	4618      	mov	r0, r3
 8005684:	f00f fa90 	bl	8014ba8 <memcpy>
	}

	/* シグマ推定変数 Sigma estimator variable */
    //Dev->Data.SigmaEstRefArray = 100;
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2264      	movs	r2, #100	; 0x64
 800568c:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

    //Dev->Data.SigmaEstEffAmbWidth = 900;
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005696:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162

    //Dev->Data.SigmaEstEffAmbWidth = 500;
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

    //Dev->Data.targetRefRate = 0x0A00;
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80056aa:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/*
     *  内部のデフォルト設定を使用する
     * Use internal default settings
     */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80056b6:	2201      	movs	r2, #1
 80056b8:	2180      	movs	r1, #128	; 0x80
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f005 fb3e 	bl	800ad3c <VL53L0X_WrByte>
 80056c0:	4603      	mov	r3, r0
 80056c2:	461a      	mov	r2, r3
 80056c4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80056ce:	2201      	movs	r2, #1
 80056d0:	21ff      	movs	r1, #255	; 0xff
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f005 fb32 	bl	800ad3c <VL53L0X_WrByte>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80056e6:	2200      	movs	r2, #0
 80056e8:	2100      	movs	r1, #0
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f005 fb26 	bl	800ad3c <VL53L0X_WrByte>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80056fe:	f107 030f 	add.w	r3, r7, #15
 8005702:	461a      	mov	r2, r3
 8005704:	2191      	movs	r1, #145	; 0x91
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f005 fb9a 	bl	800ae40 <VL53L0X_RdByte>
 800570c:	4603      	mov	r3, r0
 800570e:	461a      	mov	r2, r3
 8005710:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005714:	4313      	orrs	r3, r2
 8005716:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    // Dev->Data.StopVariable = StopVariable;
    PALDevDataSet(Dev, StopVariable, StopVariable);
 800571a:	7bfa      	ldrb	r2, [r7, #15]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005722:	2201      	movs	r2, #1
 8005724:	2100      	movs	r1, #0
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f005 fb08 	bl	800ad3c <VL53L0X_WrByte>
 800572c:	4603      	mov	r3, r0
 800572e:	461a      	mov	r2, r3
 8005730:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005734:	4313      	orrs	r3, r2
 8005736:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800573a:	2200      	movs	r2, #0
 800573c:	21ff      	movs	r1, #255	; 0xff
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f005 fafc 	bl	800ad3c <VL53L0X_WrByte>
 8005744:	4603      	mov	r3, r0
 8005746:	461a      	mov	r2, r3
 8005748:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800574c:	4313      	orrs	r3, r2
 800574e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005752:	2200      	movs	r2, #0
 8005754:	2180      	movs	r1, #128	; 0x80
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f005 faf0 	bl	800ad3c <VL53L0X_WrByte>
 800575c:	4603      	mov	r3, r0
 800575e:	461a      	mov	r2, r3
 8005760:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005764:	4313      	orrs	r3, r2
 8005766:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    * 特定の制限チェックを有効/無効にします。
    * 機能の説明
    * この機能は、特定の制限チェックを有効/無効にします。
    * 制限チェックは LimitCheckId で識別されます。
    */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800576a:	2300      	movs	r3, #0
 800576c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005770:	e017      	b.n	80057a2 <VL53L0X_DataInit+0x1f6>
		if (Status == VL53L0X_ERROR_NONE)
 8005772:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005776:	2b00      	cmp	r3, #0
 8005778:	d118      	bne.n	80057ac <VL53L0X_DataInit+0x200>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800577a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800577e:	b29b      	uxth	r3, r3
 8005780:	2201      	movs	r2, #1
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fd83 	bl	8006290 <VL53L0X_SetLimitCheckEnable>
 800578a:	4603      	mov	r3, r0
 800578c:	461a      	mov	r2, r3
 800578e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005792:	4313      	orrs	r3, r2
 8005794:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800579c:	3301      	adds	r3, #1
 800579e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	dde3      	ble.n	8005772 <VL53L0X_DataInit+0x1c6>
 80057aa:	e000      	b.n	80057ae <VL53L0X_DataInit+0x202>
		else
			break;
 80057ac:	bf00      	nop

	}


	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80057ae:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d107      	bne.n	80057c6 <VL53L0X_DataInit+0x21a>
		Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);
 80057b6:	2200      	movs	r2, #0
 80057b8:	2102      	movs	r1, #2
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fd68 	bl	8006290 <VL53L0X_SetLimitCheckEnable>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	if (Status == VL53L0X_ERROR_NONE)
 80057c6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d107      	bne.n	80057de <VL53L0X_DataInit+0x232>
		Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);
 80057ce:	2200      	movs	r2, #0
 80057d0:	2103      	movs	r1, #3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fd5c 	bl	8006290 <VL53L0X_SetLimitCheckEnable>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	if (Status == VL53L0X_ERROR_NONE)
 80057de:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d107      	bne.n	80057f6 <VL53L0X_DataInit+0x24a>
		Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);
 80057e6:	2200      	movs	r2, #0
 80057e8:	2104      	movs	r1, #4
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fd50 	bl	8006290 <VL53L0X_SetLimitCheckEnable>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	if (Status == VL53L0X_ERROR_NONE)
 80057f6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d107      	bne.n	800580e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);
 80057fe:	2200      	movs	r2, #0
 8005800:	2105      	movs	r1, #5
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fd44 	bl	8006290 <VL53L0X_SetLimitCheckEnable>
 8005808:	4603      	mov	r3, r0
 800580a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800580e:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005812:	2b00      	cmp	r3, #0
 8005814:	d108      	bne.n	8005828 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(18 * 65536));
 8005816:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800581a:	2100      	movs	r1, #0
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fde7 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 8005822:	4603      	mov	r3, r0
 8005824:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005828:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800582c:	2b00      	cmp	r3, #0
 800582e:	d108      	bne.n	8005842 <VL53L0X_DataInit+0x296>
        /* 0.25 * 65536 */
		Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(25 * 65536 / 100));
 8005830:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005834:	2101      	movs	r1, #1
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fdda 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 800583c:	4603      	mov	r3, r0
 800583e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005842:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005846:	2b00      	cmp	r3, #0
 8005848:	d108      	bne.n	800585c <VL53L0X_DataInit+0x2b0>
		Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, (FixPoint1616_t)(35 * 65536));
 800584a:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800584e:	2102      	movs	r1, #2
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fdcd 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 8005856:	4603      	mov	r3, r0
 8005858:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800585c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005860:	2b00      	cmp	r3, #0
 8005862:	d107      	bne.n	8005874 <VL53L0X_DataInit+0x2c8>
		Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, (FixPoint1616_t)(0 * 65536));
 8005864:	2200      	movs	r2, #0
 8005866:	2103      	movs	r1, #3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fdc1 	bl	80063f0 <VL53L0X_SetLimitCheckValue>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}
SKprintf("VL53L0X_DataInit2:OscFrequencyMHz=%u\r\n",Dev->Data.DeviceSpecificParameters.OscFrequencyMHz);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800587a:	4619      	mov	r1, r3
 800587c:	4820      	ldr	r0, [pc, #128]	; (8005900 <VL53L0X_DataInit+0x354>)
 800587e:	f7fe fcd9 	bl	8004234 <SKprintf>

	if (Status == VL53L0X_ERROR_NONE) {
 8005882:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10f      	bne.n	80058aa <VL53L0X_DataInit+0x2fe>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	22ff      	movs	r2, #255	; 0xff
 800588e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8005892:	22ff      	movs	r2, #255	; 0xff
 8005894:	2101      	movs	r1, #1
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f005 fa50 	bl	800ad3c <VL53L0X_WrByte>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		/*
         * VL53L0X_StaticInit への呼び出しを待っていることを示すように PAL 状態を設定します。
         * Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 80058aa:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <VL53L0X_DataInit+0x30e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
SKprintf("VL53L0X_DataInit2:OscFrequencyMHz=%u\r\n",Dev->Data.DeviceSpecificParameters.OscFrequencyMHz);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80058c0:	4619      	mov	r1, r3
 80058c2:	480f      	ldr	r0, [pc, #60]	; (8005900 <VL53L0X_DataInit+0x354>)
 80058c4:	f7fe fcb6 	bl	8004234 <SKprintf>

    vl53_LogDisp("_DataInit() END", Status);
 80058c8:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80058cc:	4619      	mov	r1, r3
 80058ce:	480d      	ldr	r0, [pc, #52]	; (8005904 <VL53L0X_DataInit+0x358>)
 80058d0:	f7fe fec4 	bl	800465c <vl53_LogDisp>

	LOG_FUNCTION_END(Status);
	return Status;
 80058d4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3790      	adds	r7, #144	; 0x90
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	08019b14 	.word	0x08019b14
 80058e4:	000970a4 	.word	0x000970a4
 80058e8:	08019b28 	.word	0x08019b28
 80058ec:	044c0000 	.word	0x044c0000
 80058f0:	0003cccc 	.word	0x0003cccc
 80058f4:	02ee0000 	.word	0x02ee0000
 80058f8:	00074ccc 	.word	0x00074ccc
 80058fc:	02260000 	.word	0x02260000
 8005900:	08019b50 	.word	0x08019b50
 8005904:	08019b78 	.word	0x08019b78

08005908 <VL53L0X_StaticInit>:
}
#endif


VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b0ac      	sub	sp, #176	; 0xb0
 800590c:	af02      	add	r7, sp, #8
 800590e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005910:	2300      	movs	r3, #0
 8005912:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005916:	f107 031c 	add.w	r3, r7, #28
 800591a:	2278      	movs	r2, #120	; 0x78
 800591c:	2100      	movs	r1, #0
 800591e:	4618      	mov	r0, r3
 8005920:	f00f f950 	bl	8014bc4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005946:	2101      	movs	r1, #1
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f002 fc54 	bl	80081f6 <VL53L0X_get_info_from_device>
 800594e:	4603      	mov	r3, r0
 8005950:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800595a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005964:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005968:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800596c:	2b01      	cmp	r3, #1
 800596e:	d80f      	bhi.n	8005990 <VL53L0X_StaticInit+0x88>
 8005970:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005974:	2b01      	cmp	r3, #1
 8005976:	d103      	bne.n	8005980 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 8005978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800597c:	2b20      	cmp	r3, #32
 800597e:	d807      	bhi.n	8005990 <VL53L0X_StaticInit+0x88>
 8005980:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10f      	bne.n	80059a8 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 8005988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800598c:	2b0c      	cmp	r3, #12
 800598e:	d90b      	bls.n	80059a8 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005990:	f107 0218 	add.w	r2, r7, #24
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 fed0 	bl	8007740 <VL53L0X_perform_ref_spad_management>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80059a6:	e00a      	b.n	80059be <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80059a8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80059ac:	461a      	mov	r2, r3
 80059ae:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f002 f8d0 	bl	8007b58 <VL53L0X_set_reference_spads>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80059be:	4b93      	ldr	r3, [pc, #588]	; (8005c0c <VL53L0X_StaticInit+0x304>)
 80059c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80059c4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d111      	bne.n	80059f0 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80059d2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80059d6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d105      	bne.n	80059ea <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80059e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059e8:	e002      	b.n	80059f0 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80059ea:	4b88      	ldr	r3, [pc, #544]	; (8005c0c <VL53L0X_StaticInit+0x304>)
 80059ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 80059f0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 80059f8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f003 ff95 	bl	800992c <VL53L0X_load_tuning_settings>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005a08:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005a10:	2300      	movs	r3, #0
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	2304      	movs	r3, #4
 8005a16:	2200      	movs	r2, #0
 8005a18:	2100      	movs	r1, #0
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 fa5a 	bl	8006ed4 <VL53L0X_SetGpioConfig>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a26:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d121      	bne.n	8005a72 <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005a2e:	2201      	movs	r2, #1
 8005a30:	21ff      	movs	r1, #255	; 0xff
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f005 f982 	bl	800ad3c <VL53L0X_WrByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005a3e:	f107 031a 	add.w	r3, r7, #26
 8005a42:	461a      	mov	r2, r3
 8005a44:	2184      	movs	r1, #132	; 0x84
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f005 fa24 	bl	800ae94 <VL53L0X_RdWord>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	21ff      	movs	r1, #255	; 0xff
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f005 f96c 	bl	800ad3c <VL53L0X_WrByte>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a72:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005a7a:	8b7b      	ldrh	r3, [r7, #26]
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	461a      	mov	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005a86:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d108      	bne.n	8005aa0 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005a8e:	f107 031c 	add.w	r3, r7, #28
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f8c9 	bl	8005c2c <VL53L0X_GetDeviceParameters>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8005aa0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d110      	bne.n	8005aca <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005aa8:	f107 0319 	add.w	r3, r7, #25
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9b1 	bl	8005e16 <VL53L0X_GetFractionEnable>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 8005aba:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005ac2:	7e7a      	ldrb	r2, [r7, #25]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005aca:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d107      	bne.n	8005ae2 <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	f107 011c 	add.w	r1, r7, #28
 8005ada:	2278      	movs	r2, #120	; 0x78
 8005adc:	4618      	mov	r0, r3
 8005ade:	f00f f863 	bl	8014ba8 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8005ae2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d111      	bne.n	8005b0e <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 8005aea:	f107 0319 	add.w	r3, r7, #25
 8005aee:	461a      	mov	r2, r3
 8005af0:	2101      	movs	r1, #1
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f005 f9a4 	bl	800ae40 <VL53L0X_RdByte>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8005afe:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005b06:	7e7a      	ldrb	r2, [r7, #25]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8005b0e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d107      	bne.n	8005b26 <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005b16:	2200      	movs	r2, #0
 8005b18:	2100      	movs	r1, #0
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f9f0 	bl	8005f00 <VL53L0X_SetSequenceStepEnable>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005b26:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2102      	movs	r1, #2
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f9e4 	bl	8005f00 <VL53L0X_SetSequenceStepEnable>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8005b3e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2203      	movs	r2, #3
 8005b4a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005b4e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005b56:	f107 0313 	add.w	r3, r7, #19
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f9b6 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b6a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d103      	bne.n	8005b7a <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005b72:	7cfa      	ldrb	r2, [r7, #19]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005b7a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005b82:	f107 0313 	add.w	r3, r7, #19
 8005b86:	461a      	mov	r2, r3
 8005b88:	2101      	movs	r1, #1
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f9a0 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b96:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005b9e:	7cfa      	ldrb	r2, [r7, #19]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005ba6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2103      	movs	r1, #3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f003 f8a0 	bl	8008cfc <get_sequence_step_timeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005bc2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005bd2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 8005bda:	f107 030c 	add.w	r3, r7, #12
 8005bde:	461a      	mov	r2, r3
 8005be0:	2104      	movs	r1, #4
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f003 f88a 	bl	8008cfc <get_sequence_step_timeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005bee:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d103      	bne.n	8005bfe <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005bfe:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	37a8      	adds	r7, #168	; 0xa8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000054 	.word	0x20000054

08005c10 <VL53L0X_WaitDeviceBooted>:


VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8005c18:	239d      	movs	r3, #157	; 0x9d
 8005c1a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8005c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <VL53L0X_GetDeviceParameters>:
}
#endif

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f8d6 	bl	8005df0 <VL53L0X_GetDeviceMode>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d107      	bne.n	8005c60 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	3308      	adds	r3, #8
 8005c54:	4619      	mov	r1, r3
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa9e 	bl	8006198 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d107      	bne.n	8005c86 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	3310      	adds	r3, #16
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fad4 	bl	800622a <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005c82:	4603      	mov	r3, r0
 8005c84:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d107      	bne.n	8005c9e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff fc76 	bl	8005586 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d134      	bne.n	8005d10 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	e02a      	b.n	8005d02 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d12a      	bne.n	8005d0a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	b299      	uxth	r1, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	3308      	adds	r3, #8
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fbf4 	bl	80064b4 <VL53L0X_GetLimitCheckValue>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d117      	bne.n	8005d0e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	b299      	uxth	r1, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	3318      	adds	r3, #24
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	4413      	add	r3, r2
 8005cea:	461a      	mov	r2, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fb5b 	bl	80063a8 <VL53L0X_GetLimitCheckEnable>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60bb      	str	r3, [r7, #8]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b05      	cmp	r3, #5
 8005d06:	ddd1      	ble.n	8005cac <VL53L0X_GetDeviceParameters+0x80>
 8005d08:	e002      	b.n	8005d10 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005d0e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d107      	bne.n	8005d28 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	3374      	adds	r3, #116	; 0x74
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fccc 	bl	80066bc <VL53L0X_GetWrapAroundCheckEnable>
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d107      	bne.n	8005d40 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f89f 	bl	8005e7a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d120      	bne.n	8005d8a <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	e01a      	b.n	8005d84 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3310      	adds	r3, #16
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	330e      	adds	r3, #14
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	3316      	adds	r3, #22
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	3314      	adds	r3, #20
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60bb      	str	r3, [r7, #8]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b06      	cmp	r3, #6
 8005d88:	dde1      	ble.n	8005d4e <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	2b15      	cmp	r3, #21
 8005dac:	bf8c      	ite	hi
 8005dae:	2201      	movhi	r2, #1
 8005db0:	2200      	movls	r2, #0
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	d10e      	bne.n	8005dd6 <VL53L0X_SetDeviceMode+0x3e>
 8005db8:	2201      	movs	r2, #1
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <VL53L0X_SetDeviceMode+0x54>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bf14      	ite	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2300      	moveq	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	721a      	strb	r2, [r3, #8]
		break;
 8005dd4:	e001      	b.n	8005dda <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005dd6:	23f8      	movs	r3, #248	; 0xf8
 8005dd8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	0030000b 	.word	0x0030000b

08005df0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7a1a      	ldrb	r2, [r3, #8]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <VL53L0X_GetFractionEnable>:
	return Status;
}
#endif	// ___NOP

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e20:	2300      	movs	r3, #0
 8005e22:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	2109      	movs	r1, #9
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f005 f809 	bl	800ae40 <VL53L0X_RdByte>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}
#endif	// ___NOP
VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f003 fbdc 	bl	8009622 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f003 fc9c 	bl	80097c8 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
 8005eac:	4613      	mov	r3, r2
 8005eae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	78ba      	ldrb	r2, [r7, #2]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f003 f8f1 	bl	80090a2 <VL53L0X_set_vcsel_pulse_period>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f003 fb63 	bl	80095b4 <VL53L0X_get_vcsel_pulse_period>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f10:	2300      	movs	r3, #0
 8005f12:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f1c:	f107 030f 	add.w	r3, r7, #15
 8005f20:	461a      	mov	r2, r3
 8005f22:	2101      	movs	r1, #1
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f004 ff8b 	bl	800ae40 <VL53L0X_RdByte>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d15a      	bne.n	8005ff0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8005f3a:	78bb      	ldrb	r3, [r7, #2]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d12b      	bne.n	8005f98 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d825      	bhi.n	8005f92 <VL53L0X_SetSequenceStepEnable+0x92>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f61 	.word	0x08005f61
 8005f50:	08005f6b 	.word	0x08005f6b
 8005f54:	08005f75 	.word	0x08005f75
 8005f58:	08005f7f 	.word	0x08005f7f
 8005f5c:	08005f89 	.word	0x08005f89
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005f60:	7dbb      	ldrb	r3, [r7, #22]
 8005f62:	f043 0310 	orr.w	r3, r3, #16
 8005f66:	75bb      	strb	r3, [r7, #22]
				break;
 8005f68:	e043      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005f6a:	7dbb      	ldrb	r3, [r7, #22]
 8005f6c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005f70:	75bb      	strb	r3, [r7, #22]
				break;
 8005f72:	e03e      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8005f74:	7dbb      	ldrb	r3, [r7, #22]
 8005f76:	f043 0304 	orr.w	r3, r3, #4
 8005f7a:	75bb      	strb	r3, [r7, #22]
				break;
 8005f7c:	e039      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005f7e:	7dbb      	ldrb	r3, [r7, #22]
 8005f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f84:	75bb      	strb	r3, [r7, #22]
				break;
 8005f86:	e034      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005f88:	7dbb      	ldrb	r3, [r7, #22]
 8005f8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f8e:	75bb      	strb	r3, [r7, #22]
				break;
 8005f90:	e02f      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f92:	23fc      	movs	r3, #252	; 0xfc
 8005f94:	75fb      	strb	r3, [r7, #23]
 8005f96:	e02c      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d825      	bhi.n	8005fea <VL53L0X_SetSequenceStepEnable+0xea>
 8005f9e:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005fb9 	.word	0x08005fb9
 8005fa8:	08005fc3 	.word	0x08005fc3
 8005fac:	08005fcd 	.word	0x08005fcd
 8005fb0:	08005fd7 	.word	0x08005fd7
 8005fb4:	08005fe1 	.word	0x08005fe1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005fb8:	7dbb      	ldrb	r3, [r7, #22]
 8005fba:	f023 0310 	bic.w	r3, r3, #16
 8005fbe:	75bb      	strb	r3, [r7, #22]
				break;
 8005fc0:	e017      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8005fc2:	7dbb      	ldrb	r3, [r7, #22]
 8005fc4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005fc8:	75bb      	strb	r3, [r7, #22]
				break;
 8005fca:	e012      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005fcc:	7dbb      	ldrb	r3, [r7, #22]
 8005fce:	f023 0304 	bic.w	r3, r3, #4
 8005fd2:	75bb      	strb	r3, [r7, #22]
				break;
 8005fd4:	e00d      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8005fd6:	7dbb      	ldrb	r3, [r7, #22]
 8005fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fdc:	75bb      	strb	r3, [r7, #22]
				break;
 8005fde:	e008      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005fe0:	7dbb      	ldrb	r3, [r7, #22]
 8005fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe6:	75bb      	strb	r3, [r7, #22]
				break;
 8005fe8:	e003      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005fea:	23fc      	movs	r3, #252	; 0xfc
 8005fec:	75fb      	strb	r3, [r7, #23]
 8005fee:	e000      	b.n	8005ff2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8005ff0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	7dba      	ldrb	r2, [r7, #22]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d01e      	beq.n	8006038 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8005ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d107      	bne.n	8006012 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006002:	7dbb      	ldrb	r3, [r7, #22]
 8006004:	461a      	mov	r2, r3
 8006006:	2101      	movs	r1, #1
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f004 fe97 	bl	800ad3c <VL53L0X_WrByte>
 800600e:	4603      	mov	r3, r0
 8006010:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006012:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d103      	bne.n	8006022 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	7dba      	ldrb	r2, [r7, #22]
 800601e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006030:	6939      	ldr	r1, [r7, #16]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff ff0e 	bl	8005e54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006038:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	607b      	str	r3, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	72fb      	strb	r3, [r7, #11]
 8006052:	4613      	mov	r3, r2
 8006054:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006056:	2300      	movs	r3, #0
 8006058:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006060:	7afb      	ldrb	r3, [r7, #11]
 8006062:	2b04      	cmp	r3, #4
 8006064:	d836      	bhi.n	80060d4 <sequence_step_enabled+0x90>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <sequence_step_enabled+0x28>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	08006081 	.word	0x08006081
 8006070:	08006093 	.word	0x08006093
 8006074:	080060a5 	.word	0x080060a5
 8006078:	080060b7 	.word	0x080060b7
 800607c:	080060c9 	.word	0x080060c9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006080:	7abb      	ldrb	r3, [r7, #10]
 8006082:	111b      	asrs	r3, r3, #4
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	b2da      	uxtb	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	701a      	strb	r2, [r3, #0]
		break;
 8006090:	e022      	b.n	80060d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006092:	7abb      	ldrb	r3, [r7, #10]
 8006094:	10db      	asrs	r3, r3, #3
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	b2da      	uxtb	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	701a      	strb	r2, [r3, #0]
		break;
 80060a2:	e019      	b.n	80060d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80060a4:	7abb      	ldrb	r3, [r7, #10]
 80060a6:	109b      	asrs	r3, r3, #2
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	701a      	strb	r2, [r3, #0]
		break;
 80060b4:	e010      	b.n	80060d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80060b6:	7abb      	ldrb	r3, [r7, #10]
 80060b8:	119b      	asrs	r3, r3, #6
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	701a      	strb	r2, [r3, #0]
		break;
 80060c6:	e007      	b.n	80060d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80060c8:	7abb      	ldrb	r3, [r7, #10]
 80060ca:	09db      	lsrs	r3, r3, #7
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	701a      	strb	r2, [r3, #0]
		break;
 80060d2:	e001      	b.n	80060d8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80060d4:	23fc      	movs	r3, #252	; 0xfc
 80060d6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80060d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <VL53L0X_GetSequenceStepEnables>:
}
#endif	// ___NOP

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80060fa:	f107 030e 	add.w	r3, r7, #14
 80060fe:	461a      	mov	r2, r3
 8006100:	2101      	movs	r1, #1
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f004 fe9c 	bl	800ae40 <VL53L0X_RdByte>
 8006108:	4603      	mov	r3, r0
 800610a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800610c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d107      	bne.n	8006124 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006114:	7bba      	ldrb	r2, [r7, #14]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2100      	movs	r1, #0
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff ff92 	bl	8006044 <sequence_step_enabled>
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d108      	bne.n	800613e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800612c:	7bba      	ldrb	r2, [r7, #14]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	3302      	adds	r3, #2
 8006132:	2101      	movs	r1, #1
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ff85 	bl	8006044 <sequence_step_enabled>
 800613a:	4603      	mov	r3, r0
 800613c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800613e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d108      	bne.n	8006158 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006146:	7bba      	ldrb	r2, [r7, #14]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	3301      	adds	r3, #1
 800614c:	2102      	movs	r1, #2
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff ff78 	bl	8006044 <sequence_step_enabled>
 8006154:	4603      	mov	r3, r0
 8006156:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d108      	bne.n	8006172 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006160:	7bba      	ldrb	r2, [r7, #14]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	3303      	adds	r3, #3
 8006166:	2103      	movs	r1, #3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff ff6b 	bl	8006044 <sequence_step_enabled>
 800616e:	4603      	mov	r3, r0
 8006170:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d108      	bne.n	800618c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800617a:	7bba      	ldrb	r2, [r7, #14]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	3304      	adds	r3, #4
 8006180:	2104      	movs	r1, #4
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff ff5e 	bl	8006044 <sequence_step_enabled>
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800618c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
}
#endif	// ___NOP

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80061a6:	f107 030c 	add.w	r3, r7, #12
 80061aa:	461a      	mov	r2, r3
 80061ac:	21f8      	movs	r1, #248	; 0xf8
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f004 fe70 	bl	800ae94 <VL53L0X_RdWord>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80061b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d108      	bne.n	80061d2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	461a      	mov	r2, r3
 80061c6:	2104      	movs	r1, #4
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f004 fe9b 	bl	800af04 <VL53L0X_RdDWord>
 80061ce:	4603      	mov	r3, r0
 80061d0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80061d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10c      	bne.n	80061f4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80061da:	89bb      	ldrh	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	89ba      	ldrh	r2, [r7, #12]
 80061e4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80061f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <VL53L0X_GetXTalkCompensationEnable>:
}
#endif	// ___NOP

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	7d1b      	ldrb	r3, [r3, #20]
 8006212:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	7bba      	ldrb	r2, [r7, #14]
 8006218:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800621a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <VL53L0X_GetXTalkCompensationRateMegaCps>:
}
#endif	// ___NOP

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006234:	2300      	movs	r3, #0
 8006236:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006238:	f107 030e 	add.w	r3, r7, #14
 800623c:	461a      	mov	r2, r3
 800623e:	2120      	movs	r1, #32
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f004 fe27 	bl	800ae94 <VL53L0X_RdWord>
 8006246:	4603      	mov	r3, r0
 8006248:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800624a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d118      	bne.n	8006284 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006252:	89fb      	ldrh	r3, [r7, #14]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d109      	bne.n	800626c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	751a      	strb	r2, [r3, #20]
 800626a:	e00b      	b.n	8006284 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800626c:	89fb      	ldrh	r3, [r7, #14]
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <VL53L0X_SetLimitCheckEnable>:
#endif	// ___NOP

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	807b      	strh	r3, [r7, #2]
 800629c:	4613      	mov	r3, r2
 800629e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062a0:	2300      	movs	r3, #0
 80062a2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80062b0:	887b      	ldrh	r3, [r7, #2]
 80062b2:	2b05      	cmp	r3, #5
 80062b4:	d902      	bls.n	80062bc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80062b6:	23fc      	movs	r3, #252	; 0xfc
 80062b8:	75fb      	strb	r3, [r7, #23]
 80062ba:	e05b      	b.n	8006374 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80062bc:	787b      	ldrb	r3, [r7, #1]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80062ca:	2301      	movs	r3, #1
 80062cc:	73bb      	strb	r3, [r7, #14]
 80062ce:	e00a      	b.n	80062e6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80062d0:	887b      	ldrh	r3, [r7, #2]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	330a      	adds	r3, #10
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80062e2:	2301      	movs	r3, #1
 80062e4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80062e6:	887b      	ldrh	r3, [r7, #2]
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	d841      	bhi.n	8006370 <VL53L0X_SetLimitCheckEnable+0xe0>
 80062ec:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	0800630d 	.word	0x0800630d
 80062f8:	08006317 	.word	0x08006317
 80062fc:	0800632d 	.word	0x0800632d
 8006300:	08006337 	.word	0x08006337
 8006304:	08006341 	.word	0x08006341
 8006308:	08006359 	.word	0x08006359

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	7bfa      	ldrb	r2, [r7, #15]
 8006310:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006314:	e02e      	b.n	8006374 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800631a:	b29b      	uxth	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	2144      	movs	r1, #68	; 0x44
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f004 fd2f 	bl	800ad84 <VL53L0X_WrWord>
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]

			break;
 800632a:	e023      	b.n	8006374 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	7bfa      	ldrb	r2, [r7, #15]
 8006330:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006334:	e01e      	b.n	8006374 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	7bfa      	ldrb	r2, [r7, #15]
 800633a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800633e:	e019      	b.n	8006374 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006340:	7bbb      	ldrb	r3, [r7, #14]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006346:	7b7b      	ldrb	r3, [r7, #13]
 8006348:	22fe      	movs	r2, #254	; 0xfe
 800634a:	2160      	movs	r1, #96	; 0x60
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f004 fd43 	bl	800add8 <VL53L0X_UpdateByte>
 8006352:	4603      	mov	r3, r0
 8006354:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006356:	e00d      	b.n	8006374 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800635e:	7b7b      	ldrb	r3, [r7, #13]
 8006360:	22ef      	movs	r2, #239	; 0xef
 8006362:	2160      	movs	r1, #96	; 0x60
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f004 fd37 	bl	800add8 <VL53L0X_UpdateByte>
 800636a:	4603      	mov	r3, r0
 800636c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800636e:	e001      	b.n	8006374 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006370:	23fc      	movs	r3, #252	; 0xfc
 8006372:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10f      	bne.n	800639c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800637c:	787b      	ldrb	r3, [r7, #1]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006382:	887b      	ldrh	r3, [r7, #2]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2020 	strb.w	r2, [r3, #32]
 800638e:	e005      	b.n	800639c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006390:	887b      	ldrh	r3, [r7, #2]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800639c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	460b      	mov	r3, r1
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80063ba:	897b      	ldrh	r3, [r7, #10]
 80063bc:	2b05      	cmp	r3, #5
 80063be:	d905      	bls.n	80063cc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80063c0:	23fc      	movs	r3, #252	; 0xfc
 80063c2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	e008      	b.n	80063de <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80063cc:	897b      	ldrh	r3, [r7, #10]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063d6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	7dba      	ldrb	r2, [r7, #22]
 80063dc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80063de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
	...

080063f0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	460b      	mov	r3, r1
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063fe:	2300      	movs	r3, #0
 8006400:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006402:	897b      	ldrh	r3, [r7, #10]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800640c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800640e:	7dbb      	ldrb	r3, [r7, #22]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d107      	bne.n	8006424 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006414:	897b      	ldrh	r3, [r7, #10]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	330a      	adds	r3, #10
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	605a      	str	r2, [r3, #4]
 8006422:	e040      	b.n	80064a6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006424:	897b      	ldrh	r3, [r7, #10]
 8006426:	2b05      	cmp	r3, #5
 8006428:	d830      	bhi.n	800648c <VL53L0X_SetLimitCheckValue+0x9c>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <VL53L0X_SetLimitCheckValue+0x40>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006449 	.word	0x08006449
 8006434:	08006451 	.word	0x08006451
 8006438:	08006467 	.word	0x08006467
 800643c:	0800646f 	.word	0x0800646f
 8006440:	08006477 	.word	0x08006477
 8006444:	08006477 	.word	0x08006477

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800644e:	e01f      	b.n	8006490 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006454:	b29b      	uxth	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	2144      	movs	r1, #68	; 0x44
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f004 fc92 	bl	800ad84 <VL53L0X_WrWord>
 8006460:	4603      	mov	r3, r0
 8006462:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006464:	e014      	b.n	8006490 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800646c:	e010      	b.n	8006490 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006474:	e00c      	b.n	8006490 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800647a:	b29b      	uxth	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	2164      	movs	r1, #100	; 0x64
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f004 fc7f 	bl	800ad84 <VL53L0X_WrWord>
 8006486:	4603      	mov	r3, r0
 8006488:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800648a:	e001      	b.n	8006490 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800648c:	23fc      	movs	r3, #252	; 0xfc
 800648e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006498:	897b      	ldrh	r3, [r7, #10]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	330a      	adds	r3, #10
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop

080064b4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	460b      	mov	r3, r1
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80064ca:	897b      	ldrh	r3, [r7, #10]
 80064cc:	2b05      	cmp	r3, #5
 80064ce:	d847      	bhi.n	8006560 <VL53L0X_GetLimitCheckValue+0xac>
 80064d0:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <VL53L0X_GetLimitCheckValue+0x24>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	080064f1 	.word	0x080064f1
 80064dc:	080064fd 	.word	0x080064fd
 80064e0:	08006523 	.word	0x08006523
 80064e4:	0800652f 	.word	0x0800652f
 80064e8:	0800653b 	.word	0x0800653b
 80064ec:	0800653b 	.word	0x0800653b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	77bb      	strb	r3, [r7, #30]
		break;
 80064fa:	e033      	b.n	8006564 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80064fc:	f107 0316 	add.w	r3, r7, #22
 8006500:	461a      	mov	r2, r3
 8006502:	2144      	movs	r1, #68	; 0x44
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f004 fcc5 	bl	800ae94 <VL53L0X_RdWord>
 800650a:	4603      	mov	r3, r0
 800650c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800650e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006516:	8afb      	ldrh	r3, [r7, #22]
 8006518:	025b      	lsls	r3, r3, #9
 800651a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800651c:	2301      	movs	r3, #1
 800651e:	77bb      	strb	r3, [r7, #30]
		break;
 8006520:	e020      	b.n	8006564 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	77bb      	strb	r3, [r7, #30]
		break;
 800652c:	e01a      	b.n	8006564 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	77bb      	strb	r3, [r7, #30]
		break;
 8006538:	e014      	b.n	8006564 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800653a:	f107 0316 	add.w	r3, r7, #22
 800653e:	461a      	mov	r2, r3
 8006540:	2164      	movs	r1, #100	; 0x64
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f004 fca6 	bl	800ae94 <VL53L0X_RdWord>
 8006548:	4603      	mov	r3, r0
 800654a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800654c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006554:	8afb      	ldrh	r3, [r7, #22]
 8006556:	025b      	lsls	r3, r3, #9
 8006558:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	77bb      	strb	r3, [r7, #30]
		break;
 800655e:	e001      	b.n	8006564 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006560:	23fc      	movs	r3, #252	; 0xfc
 8006562:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006564:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d12a      	bne.n	80065c2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800656c:	7fbb      	ldrb	r3, [r7, #30]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d124      	bne.n	80065bc <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d110      	bne.n	800659a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006578:	897b      	ldrh	r3, [r7, #10]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	330a      	adds	r3, #10
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800658c:	897b      	ldrh	r3, [r7, #10]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2020 	strb.w	r2, [r3, #32]
 8006598:	e013      	b.n	80065c2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80065a0:	897b      	ldrh	r3, [r7, #10]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	330a      	adds	r3, #10
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80065ae:	897b      	ldrh	r3, [r7, #10]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2020 	strb.w	r2, [r3, #32]
 80065ba:	e002      	b.n	80065c2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80065c2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3720      	adds	r7, #32
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop

080065d0 <VL53L0X_GetLimitCheckCurrent>:

VL53L0X_Error VL53L0X_GetLimitCheckCurrent(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckCurrent)
{
 80065d0:	b4b0      	push	{r4, r5, r7}
 80065d2:	b08d      	sub	sp, #52	; 0x34
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	460b      	mov	r3, r1
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065de:	2300      	movs	r3, #0
 80065e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80065e4:	897b      	ldrh	r3, [r7, #10]
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d903      	bls.n	80065f2 <VL53L0X_GetLimitCheckCurrent+0x22>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065ea:	23fc      	movs	r3, #252	; 0xfc
 80065ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80065f0:	e05d      	b.n	80066ae <VL53L0X_GetLimitCheckCurrent+0xde>
	} else {
		switch (LimitCheckId) {
 80065f2:	897b      	ldrh	r3, [r7, #10]
 80065f4:	2b05      	cmp	r3, #5
 80065f6:	d857      	bhi.n	80066a8 <VL53L0X_GetLimitCheckCurrent+0xd8>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <VL53L0X_GetLimitCheckCurrent+0x30>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006619 	.word	0x08006619
 8006604:	08006625 	.word	0x08006625
 8006608:	08006643 	.word	0x08006643
 800660c:	0800664f 	.word	0x0800664f
 8006610:	0800666d 	.word	0x0800666d
 8006614:	0800668b 	.word	0x0800668b
		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev, SigmaEstimate);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]

			break;
 8006622:	e044      	b.n	80066ae <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f107 0410 	add.w	r4, r7, #16
 800662a:	f103 0580 	add.w	r5, r3, #128	; 0x80
 800662e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 800663a:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	601a      	str	r2, [r3, #0]

			break;
 8006640:	e035      	b.n	80066ae <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev,
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
				LastSignalRefMcps);

			break;
 800664c:	e02f      	b.n	80066ae <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f107 0410 	add.w	r4, r7, #16
 8006654:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8006658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800665a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800665c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8006664:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	601a      	str	r2, [r3, #0]

			break;
 800666a:	e020      	b.n	80066ae <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f107 0410 	add.w	r4, r7, #16
 8006672:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8006676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800667a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800667e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8006682:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	601a      	str	r2, [r3, #0]

			break;
 8006688:	e011      	b.n	80066ae <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f107 0410 	add.w	r4, r7, #16
 8006690:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8006694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006698:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800669c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 80066a0:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]

			break;
 80066a6:	e002      	b.n	80066ae <VL53L0X_GetLimitCheckCurrent+0xde>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066a8:	23fc      	movs	r3, #252	; 0xfc
 80066aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80066ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f

}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3734      	adds	r7, #52	; 0x34
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bcb0      	pop	{r4, r5, r7}
 80066ba:	4770      	bx	lr

080066bc <VL53L0X_GetWrapAroundCheckEnable>:
}
#endif	// ___NOP

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80066ca:	f107 030e 	add.w	r3, r7, #14
 80066ce:	461a      	mov	r2, r3
 80066d0:	2101      	movs	r1, #1
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f004 fbb4 	bl	800ae40 <VL53L0X_RdByte>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80066dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10e      	bne.n	8006702 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80066e4:	7bba      	ldrb	r2, [r7, #14]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	b25b      	sxtb	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	da03      	bge.n	80066fc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2201      	movs	r2, #1
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	e002      	b.n	8006702 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781a      	ldrb	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006728:	2300      	movs	r3, #0
 800672a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800672c:	f107 030e 	add.w	r3, r7, #14
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fb5c 	bl	8005df0 <VL53L0X_GetDeviceMode>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 800673c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d107      	bne.n	8006754 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f924 	bl	8006998 <VL53L0X_StartMeasurement>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d104      	bne.n	8006766 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fc7d 	bl	800805c <VL53L0X_measurement_poll_for_completion>
 8006762:	4603      	mov	r3, r0
 8006764:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2203      	movs	r2, #3
 8006778:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 800677c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <VL53L0X_PerformRefCalibration>:
#endif	// ___NOP

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006794:	2300      	movs	r3, #0
 8006796:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006798:	2301      	movs	r3, #1
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	68b9      	ldr	r1, [r7, #8]
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f001 fc1f 	bl	8007fe2 <VL53L0X_perform_ref_calibration>
 80067a4:	4603      	mov	r3, r0
 80067a6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80067a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}
#endif	// ___NOP
VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80067ca:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 80067cc:	7dbb      	ldrb	r3, [r7, #22]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	f000 8093 	beq.w	80068fa <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	f300 80d6 	bgt.w	8006986 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d002      	beq.n	80067e4 <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d047      	beq.n	8006872 <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 80067e2:	e0d0      	b.n	8006986 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80067e4:	f107 030c 	add.w	r3, r7, #12
 80067e8:	f107 0210 	add.w	r2, r7, #16
 80067ec:	2101      	movs	r1, #1
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fc94 	bl	800711c <VL53L0X_GetInterruptThresholds>
 80067f4:	4603      	mov	r3, r0
 80067f6:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80067fe:	f240 80bd 	bls.w	800697c <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 8006802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 80b8 	bne.w	800697c <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d006      	beq.n	8006820 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006812:	4960      	ldr	r1, [pc, #384]	; (8006994 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f003 f889 	bl	800992c <VL53L0X_load_tuning_settings>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800681e:	e0ad      	b.n	800697c <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006820:	2204      	movs	r2, #4
 8006822:	21ff      	movs	r1, #255	; 0xff
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f004 fa89 	bl	800ad3c <VL53L0X_WrByte>
 800682a:	4603      	mov	r3, r0
 800682c:	461a      	mov	r2, r3
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	4313      	orrs	r3, r2
 8006832:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006834:	2200      	movs	r2, #0
 8006836:	2170      	movs	r1, #112	; 0x70
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f004 fa7f 	bl	800ad3c <VL53L0X_WrByte>
 800683e:	4603      	mov	r3, r0
 8006840:	461a      	mov	r2, r3
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	4313      	orrs	r3, r2
 8006846:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006848:	2200      	movs	r2, #0
 800684a:	21ff      	movs	r1, #255	; 0xff
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f004 fa75 	bl	800ad3c <VL53L0X_WrByte>
 8006852:	4603      	mov	r3, r0
 8006854:	461a      	mov	r2, r3
 8006856:	7dfb      	ldrb	r3, [r7, #23]
 8006858:	4313      	orrs	r3, r2
 800685a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800685c:	2200      	movs	r2, #0
 800685e:	2180      	movs	r1, #128	; 0x80
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f004 fa6b 	bl	800ad3c <VL53L0X_WrByte>
 8006866:	4603      	mov	r3, r0
 8006868:	461a      	mov	r2, r3
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	4313      	orrs	r3, r2
 800686e:	75fb      	strb	r3, [r7, #23]
		break;
 8006870:	e084      	b.n	800697c <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006872:	f107 030c 	add.w	r3, r7, #12
 8006876:	f107 0210 	add.w	r2, r7, #16
 800687a:	2101      	movs	r1, #1
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fc4d 	bl	800711c <VL53L0X_GetInterruptThresholds>
 8006882:	4603      	mov	r3, r0
 8006884:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d079      	beq.n	8006980 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 800688c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d175      	bne.n	8006980 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d006      	beq.n	80068a8 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 800689a:	493e      	ldr	r1, [pc, #248]	; (8006994 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f003 f845 	bl	800992c <VL53L0X_load_tuning_settings>
 80068a2:	4603      	mov	r3, r0
 80068a4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80068a6:	e06b      	b.n	8006980 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80068a8:	2204      	movs	r2, #4
 80068aa:	21ff      	movs	r1, #255	; 0xff
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f004 fa45 	bl	800ad3c <VL53L0X_WrByte>
 80068b2:	4603      	mov	r3, r0
 80068b4:	461a      	mov	r2, r3
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80068bc:	2200      	movs	r2, #0
 80068be:	2170      	movs	r1, #112	; 0x70
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f004 fa3b 	bl	800ad3c <VL53L0X_WrByte>
 80068c6:	4603      	mov	r3, r0
 80068c8:	461a      	mov	r2, r3
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80068d0:	2200      	movs	r2, #0
 80068d2:	21ff      	movs	r1, #255	; 0xff
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f004 fa31 	bl	800ad3c <VL53L0X_WrByte>
 80068da:	4603      	mov	r3, r0
 80068dc:	461a      	mov	r2, r3
 80068de:	7dfb      	ldrb	r3, [r7, #23]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80068e4:	2200      	movs	r2, #0
 80068e6:	2180      	movs	r1, #128	; 0x80
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f004 fa27 	bl	800ad3c <VL53L0X_WrByte>
 80068ee:	4603      	mov	r3, r0
 80068f0:	461a      	mov	r2, r3
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	75fb      	strb	r3, [r7, #23]
		break;
 80068f8:	e042      	b.n	8006980 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80068fa:	f107 030c 	add.w	r3, r7, #12
 80068fe:	f107 0210 	add.w	r2, r7, #16
 8006902:	2101      	movs	r1, #1
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fc09 	bl	800711c <VL53L0X_GetInterruptThresholds>
 800690a:	4603      	mov	r3, r0
 800690c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 800690e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d136      	bne.n	8006984 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d006      	beq.n	800692a <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 800691c:	491d      	ldr	r1, [pc, #116]	; (8006994 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f003 f804 	bl	800992c <VL53L0X_load_tuning_settings>
 8006924:	4603      	mov	r3, r0
 8006926:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8006928:	e02c      	b.n	8006984 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800692a:	2204      	movs	r2, #4
 800692c:	21ff      	movs	r1, #255	; 0xff
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f004 fa04 	bl	800ad3c <VL53L0X_WrByte>
 8006934:	4603      	mov	r3, r0
 8006936:	461a      	mov	r2, r3
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	4313      	orrs	r3, r2
 800693c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800693e:	2200      	movs	r2, #0
 8006940:	2170      	movs	r1, #112	; 0x70
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f004 f9fa 	bl	800ad3c <VL53L0X_WrByte>
 8006948:	4603      	mov	r3, r0
 800694a:	461a      	mov	r2, r3
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	4313      	orrs	r3, r2
 8006950:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006952:	2200      	movs	r2, #0
 8006954:	21ff      	movs	r1, #255	; 0xff
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f004 f9f0 	bl	800ad3c <VL53L0X_WrByte>
 800695c:	4603      	mov	r3, r0
 800695e:	461a      	mov	r2, r3
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	4313      	orrs	r3, r2
 8006964:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006966:	2200      	movs	r2, #0
 8006968:	2180      	movs	r1, #128	; 0x80
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f004 f9e6 	bl	800ad3c <VL53L0X_WrByte>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	4313      	orrs	r3, r2
 8006978:	75fb      	strb	r3, [r7, #23]
		break;
 800697a:	e003      	b.n	8006984 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 800697c:	bf00      	nop
 800697e:	e002      	b.n	8006986 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8006984:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000148 	.word	0x20000148

08006998 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069a0:	2300      	movs	r3, #0
 80069a2:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80069a8:	f107 030e 	add.w	r3, r7, #14
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff fa1e 	bl	8005df0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80069b4:	2201      	movs	r2, #1
 80069b6:	2180      	movs	r1, #128	; 0x80
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f004 f9bf 	bl	800ad3c <VL53L0X_WrByte>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80069c2:	2201      	movs	r2, #1
 80069c4:	21ff      	movs	r1, #255	; 0xff
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f004 f9b8 	bl	800ad3c <VL53L0X_WrByte>
 80069cc:	4603      	mov	r3, r0
 80069ce:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f004 f9b1 	bl	800ad3c <VL53L0X_WrByte>
 80069da:	4603      	mov	r3, r0
 80069dc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 80069e4:	461a      	mov	r2, r3
 80069e6:	2191      	movs	r1, #145	; 0x91
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f004 f9a7 	bl	800ad3c <VL53L0X_WrByte>
 80069ee:	4603      	mov	r3, r0
 80069f0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80069f2:	2201      	movs	r2, #1
 80069f4:	2100      	movs	r1, #0
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f004 f9a0 	bl	800ad3c <VL53L0X_WrByte>
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006a00:	2200      	movs	r2, #0
 8006a02:	21ff      	movs	r1, #255	; 0xff
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f004 f999 	bl	800ad3c <VL53L0X_WrByte>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2180      	movs	r1, #128	; 0x80
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f004 f992 	bl	800ad3c <VL53L0X_WrByte>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d054      	beq.n	8006acc <VL53L0X_StartMeasurement+0x134>
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	dc6c      	bgt.n	8006b00 <VL53L0X_StartMeasurement+0x168>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <VL53L0X_StartMeasurement+0x98>
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d034      	beq.n	8006a98 <VL53L0X_StartMeasurement+0x100>
 8006a2e:	e067      	b.n	8006b00 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006a30:	2201      	movs	r2, #1
 8006a32:	2100      	movs	r1, #0
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f004 f981 	bl	800ad3c <VL53L0X_WrByte>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d15d      	bne.n	8006b06 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d008      	beq.n	8006a66 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8006a54:	f107 030d 	add.w	r3, r7, #13
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f004 f9ef 	bl	800ae40 <VL53L0X_RdByte>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006a6c:	7b7a      	ldrb	r2, [r7, #13]
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	4013      	ands	r3, r2
 8006a72:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006a74:	7bfa      	ldrb	r2, [r7, #15]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d107      	bne.n	8006a8a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8006a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d103      	bne.n	8006a8a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006a88:	d3e1      	bcc.n	8006a4e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006a90:	d339      	bcc.n	8006b06 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006a92:	23f9      	movs	r3, #249	; 0xf9
 8006a94:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006a96:	e036      	b.n	8006b06 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fe86 	bl	80067b4 <VL53L0X_CheckAndLoadInterruptSettings>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006aac:	2202      	movs	r2, #2
 8006aae:	2100      	movs	r1, #0
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f004 f943 	bl	800ad3c <VL53L0X_WrByte>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d123      	bne.n	8006b0a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8006aca:	e01e      	b.n	8006b0a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d105      	bne.n	8006ae0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff fe6c 	bl	80067b4 <VL53L0X_CheckAndLoadInterruptSettings>
 8006adc:	4603      	mov	r3, r0
 8006ade:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006ae0:	2204      	movs	r2, #4
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f004 f929 	bl	800ad3c <VL53L0X_WrByte>
 8006aea:	4603      	mov	r3, r0
 8006aec:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10b      	bne.n	8006b0e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2204      	movs	r2, #4
 8006afa:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8006afe:	e006      	b.n	8006b0e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006b00:	23f8      	movs	r3, #248	; 0xf8
 8006b02:	75fb      	strb	r3, [r7, #23]
 8006b04:	e004      	b.n	8006b10 <VL53L0X_StartMeasurement+0x178>
		break;
 8006b06:	bf00      	nop
 8006b08:	e002      	b.n	8006b10 <VL53L0X_StartMeasurement+0x178>
		break;
 8006b0a:	bf00      	nop
 8006b0c:	e000      	b.n	8006b10 <VL53L0X_StartMeasurement+0x178>
		break;
 8006b0e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <VL53L0X_StopMeasurement>:

VL53L0X_Error VL53L0X_StopMeasurement(VL53L0X_DEV Dev)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f004 f905 	bl	800ad3c <VL53L0X_WrByte>
 8006b32:	4603      	mov	r3, r0
 8006b34:	73fb      	strb	r3, [r7, #15]
	VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT);

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006b36:	2201      	movs	r2, #1
 8006b38:	21ff      	movs	r1, #255	; 0xff
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f004 f8fe 	bl	800ad3c <VL53L0X_WrByte>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006b44:	2200      	movs	r2, #0
 8006b46:	2100      	movs	r1, #0
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f004 f8f7 	bl	800ad3c <VL53L0X_WrByte>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x91, 0x00);
 8006b52:	2200      	movs	r2, #0
 8006b54:	2191      	movs	r1, #145	; 0x91
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f004 f8f0 	bl	800ad3c <VL53L0X_WrByte>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006b60:	2201      	movs	r2, #1
 8006b62:	2100      	movs	r1, #0
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f004 f8e9 	bl	800ad3c <VL53L0X_WrByte>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006b6e:	2200      	movs	r2, #0
 8006b70:	21ff      	movs	r1, #255	; 0xff
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f004 f8e2 	bl	800ad3c <VL53L0X_WrByte>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 8006b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d103      	bne.n	8006b8c <VL53L0X_StopMeasurement+0x70>
		/* Set PAL State to Idle */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2203      	movs	r2, #3
 8006b88:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	/* Check if need to apply interrupt settings */
	if (Status == VL53L0X_ERROR_NONE)
 8006b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <VL53L0X_StopMeasurement+0x84>
		Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 0);
 8006b94:	2100      	movs	r1, #0
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff fe0c 	bl	80067b4 <VL53L0X_CheckAndLoadInterruptSettings>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <VL53L0X_GetMeasurementDataReady>:

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8006bc0:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d112      	bne.n	8006bee <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8006bc8:	f107 0308 	add.w	r3, r7, #8
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fb83 	bl	80072da <VL53L0X_GetInterruptMaskStatus>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d103      	bne.n	8006be6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2201      	movs	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	e01c      	b.n	8006c20 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e018      	b.n	8006c20 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006bee:	f107 030d 	add.w	r3, r7, #13
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	2114      	movs	r1, #20
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f004 f922 	bl	800ae40 <VL53L0X_RdByte>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8006c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10b      	bne.n	8006c20 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006c08:	7b7b      	ldrb	r3, [r7, #13]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2201      	movs	r2, #1
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e002      	b.n	8006c20 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <VL53L0X_GetRangingMeasurementData>:
}
#endif

VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006c2c:	b5b0      	push	{r4, r5, r7, lr}
 8006c2e:	b096      	sub	sp, #88	; 0x58
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006c3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006c40:	230c      	movs	r3, #12
 8006c42:	2114      	movs	r1, #20
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f004 f84d 	bl	800ace4 <VL53L0X_ReadMulti>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006c50:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f040 80d1 	bne.w	8006dfc <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 8006c66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	4413      	add	r3, r2
 8006c78:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006c82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	021b      	lsls	r3, r3, #8
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	4413      	add	r3, r2
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	025b      	lsls	r3, r3, #9
 8006c98:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c9e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8006ca0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006cb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006cba:	025b      	lsls	r3, r3, #9
 8006cbc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006cde:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006ce0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ce4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8006cee:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8006cf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006cfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d00:	d046      	beq.n	8006d90 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006d02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d04:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006d08:	fb02 f303 	mul.w	r3, r2, r3
 8006d0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d10:	4a57      	ldr	r2, [pc, #348]	; (8006e70 <VL53L0X_GetRangingMeasurementData+0x244>)
 8006d12:	fb82 1203 	smull	r1, r2, r2, r3
 8006d16:	1192      	asrs	r2, r2, #6
 8006d18:	17db      	asrs	r3, r3, #31
 8006d1a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006d1c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	7d1b      	ldrb	r3, [r3, #20]
 8006d2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8006d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d02c      	beq.n	8006d90 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006d36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d38:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006d3c:	fb02 f303 	mul.w	r3, r2, r3
 8006d40:	121a      	asrs	r2, r3, #8
					<= 0) {
 8006d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d10d      	bne.n	8006d64 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8006d48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8006d50:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006d54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006d58:	e016      	b.n	8006d88 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8006d5a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006d5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006d62:	e011      	b.n	8006d88 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006d64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d6a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006d6e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d70:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006d74:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8006d78:	121b      	asrs	r3, r3, #8
 8006d7a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006d80:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006d84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8006d88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006d90:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00d      	beq.n	8006db4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8006d98:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006d9c:	089b      	lsrs	r3, r3, #2
 8006d9e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006da4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	019b      	lsls	r3, r3, #6
 8006dac:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	75da      	strb	r2, [r3, #23]
 8006db2:	e006      	b.n	8006dc2 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006dba:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006dc2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006dc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006dca:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006dce:	9301      	str	r3, [sp, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f003 f9f9 	bl	800a1d0 <VL53L0X_get_pal_range_status>
 8006dde:	4603      	mov	r3, r0
 8006de0:	b25a      	sxtb	r2, r3
 8006de2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8006dec:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006df4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006dfc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d12f      	bne.n	8006e64 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f107 040c 	add.w	r4, r7, #12
 8006e0a:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8006e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006e16:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8006e1e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8006e2c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006e32:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006e38:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8006e3e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006e44:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8006e4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8006e54:	f107 050c 	add.w	r5, r7, #12
 8006e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006e60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e64:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3750      	adds	r7, #80	; 0x50
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8006e70:	10624dd3 	.word	0x10624dd3

08006e74 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}
#endif
VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006e82:	2100      	movs	r1, #0
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fe ff87 	bl	8005d98 <VL53L0X_SetDeviceMode>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d104      	bne.n	8006ea0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff fc42 	bl	8006720 <VL53L0X_PerformSingleMeasurement>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d105      	bne.n	8006eb4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff febe 	bl	8006c2c <VL53L0X_GetRangingMeasurementData>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f9cb 	bl	800725a <VL53L0X_ClearInterruptMask>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	4608      	mov	r0, r1
 8006ede:	4611      	mov	r1, r2
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	70fb      	strb	r3, [r7, #3]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70bb      	strb	r3, [r7, #2]
 8006eea:	4613      	mov	r3, r2
 8006eec:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006ef2:	78fb      	ldrb	r3, [r7, #3]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006ef8:	23f6      	movs	r3, #246	; 0xf6
 8006efa:	73fb      	strb	r3, [r7, #15]
 8006efc:	e107      	b.n	800710e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006efe:	78bb      	ldrb	r3, [r7, #2]
 8006f00:	2b14      	cmp	r3, #20
 8006f02:	d110      	bne.n	8006f26 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006f04:	7e3b      	ldrb	r3, [r7, #24]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006f0a:	2310      	movs	r3, #16
 8006f0c:	73bb      	strb	r3, [r7, #14]
 8006f0e:	e001      	b.n	8006f14 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006f10:	2301      	movs	r3, #1
 8006f12:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	461a      	mov	r2, r3
 8006f18:	2184      	movs	r1, #132	; 0x84
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f003 ff0e 	bl	800ad3c <VL53L0X_WrByte>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]
 8006f24:	e0f3      	b.n	800710e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006f26:	78bb      	ldrb	r3, [r7, #2]
 8006f28:	2b15      	cmp	r3, #21
 8006f2a:	f040 8097 	bne.w	800705c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006f2e:	2201      	movs	r2, #1
 8006f30:	21ff      	movs	r1, #255	; 0xff
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f003 ff02 	bl	800ad3c <VL53L0X_WrByte>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006f42:	2200      	movs	r2, #0
 8006f44:	2100      	movs	r1, #0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f003 fef8 	bl	800ad3c <VL53L0X_WrByte>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006f56:	2200      	movs	r2, #0
 8006f58:	21ff      	movs	r1, #255	; 0xff
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f003 feee 	bl	800ad3c <VL53L0X_WrByte>
 8006f60:	4603      	mov	r3, r0
 8006f62:	461a      	mov	r2, r3
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f003 fee4 	bl	800ad3c <VL53L0X_WrByte>
 8006f74:	4603      	mov	r3, r0
 8006f76:	461a      	mov	r2, r3
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006f7e:	2202      	movs	r2, #2
 8006f80:	2185      	movs	r1, #133	; 0x85
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f003 feda 	bl	800ad3c <VL53L0X_WrByte>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006f92:	2204      	movs	r2, #4
 8006f94:	21ff      	movs	r1, #255	; 0xff
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f003 fed0 	bl	800ad3c <VL53L0X_WrByte>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	21cd      	movs	r1, #205	; 0xcd
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f003 fec6 	bl	800ad3c <VL53L0X_WrByte>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006fba:	2211      	movs	r2, #17
 8006fbc:	21cc      	movs	r1, #204	; 0xcc
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f003 febc 	bl	800ad3c <VL53L0X_WrByte>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006fce:	2207      	movs	r2, #7
 8006fd0:	21ff      	movs	r1, #255	; 0xff
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f003 feb2 	bl	800ad3c <VL53L0X_WrByte>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	461a      	mov	r2, r3
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	21be      	movs	r1, #190	; 0xbe
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f003 fea8 	bl	800ad3c <VL53L0X_WrByte>
 8006fec:	4603      	mov	r3, r0
 8006fee:	461a      	mov	r2, r3
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006ff6:	2206      	movs	r2, #6
 8006ff8:	21ff      	movs	r1, #255	; 0xff
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f003 fe9e 	bl	800ad3c <VL53L0X_WrByte>
 8007000:	4603      	mov	r3, r0
 8007002:	461a      	mov	r2, r3
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	4313      	orrs	r3, r2
 8007008:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800700a:	2209      	movs	r2, #9
 800700c:	21cc      	movs	r1, #204	; 0xcc
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f003 fe94 	bl	800ad3c <VL53L0X_WrByte>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	4313      	orrs	r3, r2
 800701c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800701e:	2200      	movs	r2, #0
 8007020:	21ff      	movs	r1, #255	; 0xff
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f003 fe8a 	bl	800ad3c <VL53L0X_WrByte>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	4313      	orrs	r3, r2
 8007030:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007032:	2201      	movs	r2, #1
 8007034:	21ff      	movs	r1, #255	; 0xff
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f003 fe80 	bl	800ad3c <VL53L0X_WrByte>
 800703c:	4603      	mov	r3, r0
 800703e:	461a      	mov	r2, r3
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	4313      	orrs	r3, r2
 8007044:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007046:	2200      	movs	r2, #0
 8007048:	2100      	movs	r1, #0
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f003 fe76 	bl	800ad3c <VL53L0X_WrByte>
 8007050:	4603      	mov	r3, r0
 8007052:	461a      	mov	r2, r3
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	4313      	orrs	r3, r2
 8007058:	73fb      	strb	r3, [r7, #15]
 800705a:	e058      	b.n	800710e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800705c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d121      	bne.n	80070a8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007064:	787b      	ldrb	r3, [r7, #1]
 8007066:	2b04      	cmp	r3, #4
 8007068:	d81b      	bhi.n	80070a2 <VL53L0X_SetGpioConfig+0x1ce>
 800706a:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <VL53L0X_SetGpioConfig+0x19c>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	08007085 	.word	0x08007085
 8007074:	0800708b 	.word	0x0800708b
 8007078:	08007091 	.word	0x08007091
 800707c:	08007097 	.word	0x08007097
 8007080:	0800709d 	.word	0x0800709d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007084:	2300      	movs	r3, #0
 8007086:	73bb      	strb	r3, [r7, #14]
				break;
 8007088:	e00f      	b.n	80070aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800708a:	2301      	movs	r3, #1
 800708c:	73bb      	strb	r3, [r7, #14]
				break;
 800708e:	e00c      	b.n	80070aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007090:	2302      	movs	r3, #2
 8007092:	73bb      	strb	r3, [r7, #14]
				break;
 8007094:	e009      	b.n	80070aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007096:	2303      	movs	r3, #3
 8007098:	73bb      	strb	r3, [r7, #14]
				break;
 800709a:	e006      	b.n	80070aa <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800709c:	2304      	movs	r3, #4
 800709e:	73bb      	strb	r3, [r7, #14]
				break;
 80070a0:	e003      	b.n	80070aa <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80070a2:	23f5      	movs	r3, #245	; 0xf5
 80070a4:	73fb      	strb	r3, [r7, #15]
 80070a6:	e000      	b.n	80070aa <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80070a8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80070aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d107      	bne.n	80070c2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	461a      	mov	r2, r3
 80070b6:	210a      	movs	r1, #10
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f003 fe3f 	bl	800ad3c <VL53L0X_WrByte>
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80070c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10f      	bne.n	80070ea <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80070ca:	7e3b      	ldrb	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73bb      	strb	r3, [r7, #14]
 80070d4:	e001      	b.n	80070da <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80070d6:	2310      	movs	r3, #16
 80070d8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	22ef      	movs	r2, #239	; 0xef
 80070de:	2184      	movs	r1, #132	; 0x84
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f003 fe79 	bl	800add8 <VL53L0X_UpdateByte>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80070ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d103      	bne.n	80070fa <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	787a      	ldrb	r2, [r7, #1]
 80070f6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80070fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d105      	bne.n	800710e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007102:	2100      	movs	r1, #0
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f8a8 	bl	800725a <VL53L0X_ClearInterruptMask>
 800710a:	4603      	mov	r3, r0
 800710c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800710e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop

0800711c <VL53L0X_GetInterruptThresholds>:
#endif

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	607a      	str	r2, [r7, #4]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	460b      	mov	r3, r1
 800712a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800712c:	2300      	movs	r3, #0
 800712e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	461a      	mov	r2, r3
 8007136:	210e      	movs	r1, #14
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f003 feab 	bl	800ae94 <VL53L0X_RdWord>
 800713e:	4603      	mov	r3, r0
 8007140:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007142:	8abb      	ldrh	r3, [r7, #20]
 8007144:	045b      	lsls	r3, r3, #17
 8007146:	461a      	mov	r2, r3
 8007148:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <VL53L0X_GetInterruptThresholds+0x68>)
 800714a:	4013      	ands	r3, r2
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10f      	bne.n	8007178 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	461a      	mov	r2, r3
 800715e:	210c      	movs	r1, #12
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f003 fe97 	bl	800ae94 <VL53L0X_RdWord>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800716a:	8abb      	ldrh	r3, [r7, #20]
 800716c:	045b      	lsls	r3, r3, #17
 800716e:	461a      	mov	r2, r3
 8007170:	4b04      	ldr	r3, [pc, #16]	; (8007184 <VL53L0X_GetInterruptThresholds+0x68>)
 8007172:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007178:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	1ffe0000 	.word	0x1ffe0000

08007188 <VL53L0X_GetStopCompletedStatus>:

VL53L0X_Error VL53L0X_GetStopCompletedStatus(VL53L0X_DEV Dev,
	uint32_t *pStopStatus)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800719a:	2201      	movs	r2, #1
 800719c:	21ff      	movs	r1, #255	; 0xff
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f003 fdcc 	bl	800ad3c <VL53L0X_WrByte>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80071a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d108      	bne.n	80071c2 <VL53L0X_GetStopCompletedStatus+0x3a>
		Status = VL53L0X_RdByte(Dev, 0x04, &Byte);
 80071b0:	f107 030e 	add.w	r3, r7, #14
 80071b4:	461a      	mov	r2, r3
 80071b6:	2104      	movs	r1, #4
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f003 fe41 	bl	800ae40 <VL53L0X_RdByte>
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80071c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <VL53L0X_GetStopCompletedStatus+0x50>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x0);
 80071ca:	2200      	movs	r2, #0
 80071cc:	21ff      	movs	r1, #255	; 0xff
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f003 fdb4 	bl	800ad3c <VL53L0X_WrByte>
 80071d4:	4603      	mov	r3, r0
 80071d6:	73fb      	strb	r3, [r7, #15]

	*pStopStatus = Byte;
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	461a      	mov	r2, r3
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	601a      	str	r2, [r3, #0]

	if (Byte == 0) {
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d133      	bne.n	800724e <VL53L0X_GetStopCompletedStatus+0xc6>
		Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80071e6:	2201      	movs	r2, #1
 80071e8:	2180      	movs	r1, #128	; 0x80
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f003 fda6 	bl	800ad3c <VL53L0X_WrByte>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80071f4:	2201      	movs	r2, #1
 80071f6:	21ff      	movs	r1, #255	; 0xff
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f003 fd9f 	bl	800ad3c <VL53L0X_WrByte>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007202:	2200      	movs	r2, #0
 8007204:	2100      	movs	r1, #0
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f003 fd98 	bl	800ad3c <VL53L0X_WrByte>
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x91,
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8007216:	461a      	mov	r2, r3
 8007218:	2191      	movs	r1, #145	; 0x91
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f003 fd8e 	bl	800ad3c <VL53L0X_WrByte>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
			PALDevDataGet(Dev, StopVariable));
		Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007224:	2201      	movs	r2, #1
 8007226:	2100      	movs	r1, #0
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f003 fd87 	bl	800ad3c <VL53L0X_WrByte>
 800722e:	4603      	mov	r3, r0
 8007230:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007232:	2200      	movs	r2, #0
 8007234:	21ff      	movs	r1, #255	; 0xff
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f003 fd80 	bl	800ad3c <VL53L0X_WrByte>
 800723c:	4603      	mov	r3, r0
 800723e:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007240:	2200      	movs	r2, #0
 8007242:	2180      	movs	r1, #128	; 0x80
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f003 fd79 	bl	800ad3c <VL53L0X_WrByte>
 800724a:	4603      	mov	r3, r0
 800724c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800724e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <VL53L0X_ClearInterruptMask>:

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800726c:	2201      	movs	r2, #1
 800726e:	210b      	movs	r1, #11
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f003 fd63 	bl	800ad3c <VL53L0X_WrByte>
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800727a:	2200      	movs	r2, #0
 800727c:	210b      	movs	r1, #11
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f003 fd5c 	bl	800ad3c <VL53L0X_WrByte>
 8007284:	4603      	mov	r3, r0
 8007286:	461a      	mov	r2, r3
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	4313      	orrs	r3, r2
 800728c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800728e:	f107 030d 	add.w	r3, r7, #13
 8007292:	461a      	mov	r2, r3
 8007294:	2113      	movs	r1, #19
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f003 fdd2 	bl	800ae40 <VL53L0X_RdByte>
 800729c:	4603      	mov	r3, r0
 800729e:	461a      	mov	r2, r3
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	3301      	adds	r3, #1
 80072aa:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80072ac:	7b7b      	ldrb	r3, [r7, #13]
 80072ae:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d006      	beq.n	80072c4 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d803      	bhi.n	80072c4 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80072bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0d3      	beq.n	800726c <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d901      	bls.n	80072ce <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80072ca:	23f4      	movs	r3, #244	; 0xf4
 80072cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80072ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072e4:	2300      	movs	r3, #0
 80072e6:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 80072e8:	f107 030e 	add.w	r3, r7, #14
 80072ec:	461a      	mov	r2, r3
 80072ee:	2113      	movs	r1, #19
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f003 fda5 	bl	800ae40 <VL53L0X_RdByte>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	f003 0207 	and.w	r2, r3, #7
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	f003 0318 	and.w	r3, r3, #24
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800730e:	23fa      	movs	r3, #250	; 0xfa
 8007310:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007312:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <VL53L0X_PerformRefSpadManagement>:
}
#endif	// ___NOP

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b086      	sub	sp, #24
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800732a:	2300      	movs	r3, #0
 800732c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 fa04 	bl	8007740 <VL53L0X_perform_ref_spad_management>
 8007338:	4603      	mov	r3, r0
 800733a:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800733c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}
#endif
VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007356:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800735a:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800735c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007360:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007362:	f107 0308 	add.w	r3, r7, #8
 8007366:	461a      	mov	r2, r3
 8007368:	2128      	movs	r1, #40	; 0x28
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f003 fd92 	bl	800ae94 <VL53L0X_RdWord>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d11e      	bne.n	80073ba <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800737c:	893b      	ldrh	r3, [r7, #8]
 800737e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007382:	b29b      	uxth	r3, r3
 8007384:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007386:	893b      	ldrh	r3, [r7, #8]
 8007388:	461a      	mov	r2, r3
 800738a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800738e:	429a      	cmp	r2, r3
 8007390:	dd0b      	ble.n	80073aa <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007392:	893a      	ldrh	r2, [r7, #8]
 8007394:	897b      	ldrh	r3, [r7, #10]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	b29b      	uxth	r3, r3
 800739a:	b21b      	sxth	r3, r3
 800739c:	461a      	mov	r2, r3
					* 250;
 800739e:	23fa      	movs	r3, #250	; 0xfa
 80073a0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	e007      	b.n	80073ba <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80073aa:	893b      	ldrh	r3, [r7, #8]
 80073ac:	b21b      	sxth	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	23fa      	movs	r3, #250	; 0xfa
 80073b2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80073ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <get_next_good_spad>:
}
#endif

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b08b      	sub	sp, #44	; 0x2c
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
 80073d2:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80073d4:	2308      	movs	r3, #8
 80073d6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ec:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80073f6:	69b9      	ldr	r1, [r7, #24]
 80073f8:	fb01 f202 	mul.w	r2, r1, r2
 80073fc:	1a9b      	subs	r3, r3, r2
 80073fe:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
 8007404:	e030      	b.n	8007468 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	4413      	add	r3, r2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	429a      	cmp	r2, r3
 800741a:	d11e      	bne.n	800745a <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 800741c:	7ffa      	ldrb	r2, [r7, #31]
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	fa42 f303 	asr.w	r3, r2, r3
 8007424:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800742a:	e016      	b.n	800745a <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800742c:	7ffb      	ldrb	r3, [r7, #31]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00b      	beq.n	800744e <get_next_good_spad+0x88>
				success = 1;
 8007436:	2301      	movs	r3, #1
 8007438:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	fb03 f202 	mul.w	r2, r3, r2
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	4413      	add	r3, r2
 8007446:	461a      	mov	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	601a      	str	r2, [r3, #0]
				break;
 800744c:	e009      	b.n	8007462 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800744e:	7ffb      	ldrb	r3, [r7, #31]
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	3301      	adds	r3, #1
 8007458:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800745a:	6a3a      	ldr	r2, [r7, #32]
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	429a      	cmp	r2, r3
 8007460:	d3e4      	bcc.n	800742c <get_next_good_spad+0x66>
				coarseIndex++) {
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	3301      	adds	r3, #1
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	429a      	cmp	r2, r3
 800746e:	d202      	bcs.n	8007476 <get_next_good_spad+0xb0>
 8007470:	7fbb      	ldrb	r3, [r7, #30]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0c7      	beq.n	8007406 <get_next_good_spad+0x40>
		}
	}
}
 8007476:	bf00      	nop
 8007478:	372c      	adds	r7, #44	; 0x2c
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
	...

08007484 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	099b      	lsrs	r3, r3, #6
 8007494:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007496:	4a07      	ldr	r2, [pc, #28]	; (80074b4 <is_aperture+0x30>)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <is_aperture+0x22>
		isAperture = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20000300 	.word	0x20000300

080074b8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80074c8:	2308      	movs	r3, #8
 80074ca:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	fbb3 f2f2 	udiv	r2, r3, r2
 80074de:	69b9      	ldr	r1, [r7, #24]
 80074e0:	fb01 f202 	mul.w	r2, r1, r2
 80074e4:	1a9b      	subs	r3, r3, r2
 80074e6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d302      	bcc.n	80074f6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80074f0:	23ce      	movs	r3, #206	; 0xce
 80074f2:	77fb      	strb	r3, [r7, #31]
 80074f4:	e010      	b.n	8007518 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	4413      	add	r3, r2
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b25a      	sxtb	r2, r3
 8007500:	2101      	movs	r1, #1
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	fa01 f303 	lsl.w	r3, r1, r3
 8007508:	b25b      	sxtb	r3, r3
 800750a:	4313      	orrs	r3, r2
 800750c:	b259      	sxtb	r1, r3
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	4413      	add	r3, r2
 8007514:	b2ca      	uxtb	r2, r1
 8007516:	701a      	strb	r2, [r3, #0]

	return status;
 8007518:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3724      	adds	r7, #36	; 0x24
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <set_ref_spad_map>:
}

#endif

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007532:	2306      	movs	r3, #6
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	21b0      	movs	r1, #176	; 0xb0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f003 fba3 	bl	800ac84 <VL53L0X_WriteMulti>
 800753e:	4603      	mov	r3, r0
 8007540:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <get_ref_spad_map>:


VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007558:	2306      	movs	r3, #6
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	21b0      	movs	r1, #176	; 0xb0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f003 fbc0 	bl	800ace4 <VL53L0X_ReadMulti>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007568:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08c      	sub	sp, #48	; 0x30
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	460b      	mov	r3, r1
 8007582:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007584:	2300      	movs	r3, #0
 8007586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800758a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800758c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800758e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007590:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007592:	2300      	movs	r3, #0
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28
 8007596:	e02b      	b.n	80075f0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007598:	f107 031c 	add.w	r3, r7, #28
 800759c:	6a3a      	ldr	r2, [r7, #32]
 800759e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff ff10 	bl	80073c6 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ac:	d103      	bne.n	80075b6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80075ae:	23ce      	movs	r3, #206	; 0xce
 80075b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80075b4:	e020      	b.n	80075f8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	461a      	mov	r2, r3
 80075ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075bc:	4413      	add	r3, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff ff60 	bl	8007484 <is_aperture>
 80075c4:	4603      	mov	r3, r0
 80075c6:	461a      	mov	r2, r3
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d003      	beq.n	80075d6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80075ce:	23ce      	movs	r3, #206	; 0xce
 80075d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80075d4:	e010      	b.n	80075f8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80075da:	6a3a      	ldr	r2, [r7, #32]
 80075dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075de:	6838      	ldr	r0, [r7, #0]
 80075e0:	f7ff ff6a 	bl	80074b8 <enable_spad_bit>
		currentSpad++;
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	3301      	adds	r3, #1
 80075e8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	3301      	adds	r3, #1
 80075ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80075f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d3cf      	bcc.n	8007598 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80075f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fa:	6a3a      	ldr	r2, [r7, #32]
 80075fc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80075fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7ff ff8d 	bl	8007528 <set_ref_spad_map>
 800760e:	4603      	mov	r3, r0
 8007610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007614:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007618:	2b00      	cmp	r3, #0
 800761a:	d121      	bne.n	8007660 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800761c:	f107 0314 	add.w	r3, r7, #20
 8007620:	4619      	mov	r1, r3
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7ff ff93 	bl	800754e <get_ref_spad_map>
 8007628:	4603      	mov	r3, r0
 800762a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007632:	e011      	b.n	8007658 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	4413      	add	r3, r2
 800763a:	781a      	ldrb	r2, [r3, #0]
 800763c:	f107 0114 	add.w	r1, r7, #20
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	440b      	add	r3, r1
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d003      	beq.n	8007652 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800764a:	23ce      	movs	r3, #206	; 0xce
 800764c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007650:	e006      	b.n	8007660 <enable_ref_spads+0xec>
			}
			i++;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	3301      	adds	r3, #1
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	429a      	cmp	r2, r3
 800765e:	d3e9      	bcc.n	8007634 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007660:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007664:	4618      	mov	r0, r3
 8007666:	3730      	adds	r7, #48	; 0x30
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007676:	2300      	movs	r3, #0
 8007678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007688:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800768c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007690:	2b00      	cmp	r3, #0
 8007692:	d107      	bne.n	80076a4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007694:	22c0      	movs	r2, #192	; 0xc0
 8007696:	2101      	movs	r1, #1
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f003 fb4f 	bl	800ad3c <VL53L0X_WrByte>
 800769e:	4603      	mov	r3, r0
 80076a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80076a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d108      	bne.n	80076be <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80076ac:	f107 0308 	add.w	r3, r7, #8
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff fbde 	bl	8006e74 <VL53L0X_PerformSingleRangingMeasurement>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80076be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d107      	bne.n	80076d6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80076c6:	2201      	movs	r2, #1
 80076c8:	21ff      	movs	r1, #255	; 0xff
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f003 fb36 	bl	800ad3c <VL53L0X_WrByte>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80076d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d107      	bne.n	80076ee <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	21b6      	movs	r1, #182	; 0xb6
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f003 fbd6 	bl	800ae94 <VL53L0X_RdWord>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80076ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d107      	bne.n	8007706 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80076f6:	2200      	movs	r2, #0
 80076f8:	21ff      	movs	r1, #255	; 0xff
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f003 fb1e 	bl	800ad3c <VL53L0X_WrByte>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007706:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800770a:	2b00      	cmp	r3, #0
 800770c:	d112      	bne.n	8007734 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800770e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007712:	461a      	mov	r2, r3
 8007714:	2101      	movs	r1, #1
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f003 fb10 	bl	800ad3c <VL53L0X_WrByte>
 800771c:	4603      	mov	r3, r0
 800771e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007722:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007730:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 8007734:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007738:	4618      	mov	r0, r3
 800773a:	3728      	adds	r7, #40	; 0x28
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007740:	b590      	push	{r4, r7, lr}
 8007742:	b09d      	sub	sp, #116	; 0x74
 8007744:	af06      	add	r7, sp, #24
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007752:	23b4      	movs	r3, #180	; 0xb4
 8007754:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007758:	2303      	movs	r3, #3
 800775a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800775c:	232c      	movs	r3, #44	; 0x2c
 800775e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800776c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007770:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800777a:	2306      	movs	r3, #6
 800777c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 80077a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80077a6:	2300      	movs	r3, #0
 80077a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80077aa:	e009      	b.n	80077c0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077b6:	2200      	movs	r2, #0
 80077b8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80077ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077bc:	3301      	adds	r3, #1
 80077be:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d3f1      	bcc.n	80077ac <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80077c8:	2201      	movs	r2, #1
 80077ca:	21ff      	movs	r1, #255	; 0xff
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f003 fab5 	bl	800ad3c <VL53L0X_WrByte>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80077d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d107      	bne.n	80077f0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80077e0:	2200      	movs	r2, #0
 80077e2:	214f      	movs	r1, #79	; 0x4f
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f003 faa9 	bl	800ad3c <VL53L0X_WrByte>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80077f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d107      	bne.n	8007808 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80077f8:	222c      	movs	r2, #44	; 0x2c
 80077fa:	214e      	movs	r1, #78	; 0x4e
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f003 fa9d 	bl	800ad3c <VL53L0X_WrByte>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007808:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800780c:	2b00      	cmp	r3, #0
 800780e:	d107      	bne.n	8007820 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007810:	2200      	movs	r2, #0
 8007812:	21ff      	movs	r1, #255	; 0xff
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f003 fa91 	bl	800ad3c <VL53L0X_WrByte>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007820:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007824:	2b00      	cmp	r3, #0
 8007826:	d109      	bne.n	800783c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007828:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800782c:	461a      	mov	r2, r3
 800782e:	21b6      	movs	r1, #182	; 0xb6
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f003 fa83 	bl	800ad3c <VL53L0X_WrByte>
 8007836:	4603      	mov	r3, r0
 8007838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800783c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007840:	2b00      	cmp	r3, #0
 8007842:	d107      	bne.n	8007854 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007844:	2200      	movs	r2, #0
 8007846:	2180      	movs	r1, #128	; 0x80
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f003 fa77 	bl	800ad3c <VL53L0X_WrByte>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007854:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800785c:	f107 0210 	add.w	r2, r7, #16
 8007860:	f107 0111 	add.w	r1, r7, #17
 8007864:	2300      	movs	r3, #0
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fbbb 	bl	8007fe2 <VL53L0X_perform_ref_calibration>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007872:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007876:	2b00      	cmp	r3, #0
 8007878:	d121      	bne.n	80078be <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800787e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007880:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007888:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 8007896:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800789a:	f107 0218 	add.w	r2, r7, #24
 800789e:	9204      	str	r2, [sp, #16]
 80078a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a2:	9203      	str	r2, [sp, #12]
 80078a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078a6:	9202      	str	r2, [sp, #8]
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	4623      	mov	r3, r4
 80078b0:	4602      	mov	r2, r0
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7ff fe5e 	bl	8007574 <enable_ref_spads>
 80078b8:	4603      	mov	r3, r0
 80078ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80078be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d174      	bne.n	80079b0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80078ca:	f107 0312 	add.w	r3, r7, #18
 80078ce:	4619      	mov	r1, r3
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff fecb 	bl	800766c <perform_ref_signal_measurement>
 80078d6:	4603      	mov	r3, r0
 80078d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80078dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d161      	bne.n	80079a8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80078e4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80078e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d25d      	bcs.n	80079a8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 80078ec:	2300      	movs	r3, #0
 80078ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80078f0:	e009      	b.n	8007906 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078fc:	2200      	movs	r2, #0
 80078fe:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007902:	3301      	adds	r3, #1
 8007904:	64bb      	str	r3, [r7, #72]	; 0x48
 8007906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	429a      	cmp	r2, r3
 800790c:	d3f1      	bcc.n	80078f2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800790e:	e002      	b.n	8007916 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007912:	3301      	adds	r3, #1
 8007914:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007916:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800791a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800791c:	4413      	add	r3, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fdb0 	bl	8007484 <is_aperture>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d103      	bne.n	8007932 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800792a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	429a      	cmp	r2, r3
 8007930:	d3ee      	bcc.n	8007910 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007932:	2301      	movs	r3, #1
 8007934:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007938:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 8007946:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800794a:	f107 0218 	add.w	r2, r7, #24
 800794e:	9204      	str	r2, [sp, #16]
 8007950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007952:	9203      	str	r2, [sp, #12]
 8007954:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007956:	9202      	str	r2, [sp, #8]
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	4623      	mov	r3, r4
 8007960:	4602      	mov	r2, r0
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f7ff fe06 	bl	8007574 <enable_ref_spads>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800796e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007972:	2b00      	cmp	r3, #0
 8007974:	d11b      	bne.n	80079ae <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800797a:	f107 0312 	add.w	r3, r7, #18
 800797e:	4619      	mov	r1, r3
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f7ff fe73 	bl	800766c <perform_ref_signal_measurement>
 8007986:	4603      	mov	r3, r0
 8007988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800798c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10c      	bne.n	80079ae <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007994:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007996:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007998:	429a      	cmp	r2, r3
 800799a:	d208      	bcs.n	80079ae <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800799c:	2301      	movs	r3, #1
 800799e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80079a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80079a6:	e002      	b.n	80079ae <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079ac:	e000      	b.n	80079b0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80079ae:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80079b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f040 80af 	bne.w	8007b18 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80079ba:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80079bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80079be:	429a      	cmp	r2, r3
 80079c0:	f240 80aa 	bls.w	8007b18 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80079c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80079ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079cc:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 80079d4:	f107 031c 	add.w	r3, r7, #28
 80079d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079da:	4618      	mov	r0, r3
 80079dc:	f00d f8e4 	bl	8014ba8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80079e0:	8a7b      	ldrh	r3, [r7, #18]
 80079e2:	461a      	mov	r2, r3
 80079e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	bfb8      	it	lt
 80079ec:	425b      	neglt	r3, r3
 80079ee:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80079f6:	e086      	b.n	8007b06 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 80079fe:	f107 0314 	add.w	r3, r7, #20
 8007a02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a06:	f7ff fcde 	bl	80073c6 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d103      	bne.n	8007a1a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007a12:	23ce      	movs	r3, #206	; 0xce
 8007a14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007a18:	e07e      	b.n	8007b18 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007a1a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4413      	add	r3, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff fd2e 	bl	8007484 <is_aperture>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d003      	beq.n	8007a3a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8007a32:	2301      	movs	r3, #1
 8007a34:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8007a38:	e06e      	b.n	8007b18 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 8007a4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff fd32 	bl	80074b8 <enable_spad_bit>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007a5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10c      	bne.n	8007a7c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a64:	3301      	adds	r3, #1
 8007a66:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 8007a6e:	4619      	mov	r1, r3
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff fd59 	bl	8007528 <set_ref_spad_map>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007a7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d146      	bne.n	8007b12 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007a84:	f107 0312 	add.w	r3, r7, #18
 8007a88:	4619      	mov	r1, r3
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7ff fdee 	bl	800766c <perform_ref_signal_measurement>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007a96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d13b      	bne.n	8007b16 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007a9e:	8a7b      	ldrh	r3, [r7, #18]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bfb8      	it	lt
 8007aaa:	425b      	neglt	r3, r3
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007aae:	8a7b      	ldrh	r3, [r7, #18]
 8007ab0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d21c      	bcs.n	8007af0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d914      	bls.n	8007ae8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 8007abe:	f107 031c 	add.w	r3, r7, #28
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff fd2f 	bl	8007528 <set_ref_spad_map>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 8007ad6:	f107 011c 	add.w	r1, r7, #28
 8007ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007adc:	4618      	mov	r0, r3
 8007ade:	f00d f863 	bl	8014ba8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aee:	e00a      	b.n	8007b06 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 8007afa:	f107 031c 	add.w	r3, r7, #28
 8007afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b00:	4618      	mov	r0, r3
 8007b02:	f00d f851 	bl	8014ba8 <memcpy>
		while (!complete) {
 8007b06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f43f af74 	beq.w	80079f8 <VL53L0X_perform_ref_spad_management+0x2b8>
 8007b10:	e002      	b.n	8007b18 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007b12:	bf00      	nop
 8007b14:	e000      	b.n	8007b18 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007b16:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007b18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d115      	bne.n	8007b4c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b24:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007b2c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	781a      	ldrb	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007b4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	375c      	adds	r7, #92	; 0x5c
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd90      	pop	{r4, r7, pc}

08007b58 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007b58:	b590      	push	{r4, r7, lr}
 8007b5a:	b093      	sub	sp, #76	; 0x4c
 8007b5c:	af06      	add	r7, sp, #24
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	4613      	mov	r3, r2
 8007b64:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b66:	2300      	movs	r3, #0
 8007b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007b70:	23b4      	movs	r3, #180	; 0xb4
 8007b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007b76:	2306      	movs	r3, #6
 8007b78:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007b7a:	232c      	movs	r3, #44	; 0x2c
 8007b7c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007b7e:	2201      	movs	r2, #1
 8007b80:	21ff      	movs	r1, #255	; 0xff
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f003 f8da 	bl	800ad3c <VL53L0X_WrByte>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007b8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d107      	bne.n	8007ba6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007b96:	2200      	movs	r2, #0
 8007b98:	214f      	movs	r1, #79	; 0x4f
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f003 f8ce 	bl	800ad3c <VL53L0X_WrByte>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007ba6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d107      	bne.n	8007bbe <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007bae:	222c      	movs	r2, #44	; 0x2c
 8007bb0:	214e      	movs	r1, #78	; 0x4e
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f003 f8c2 	bl	800ad3c <VL53L0X_WrByte>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007bbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d107      	bne.n	8007bd6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	21ff      	movs	r1, #255	; 0xff
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f003 f8b6 	bl	800ad3c <VL53L0X_WrByte>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007bd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007be2:	461a      	mov	r2, r3
 8007be4:	21b6      	movs	r1, #182	; 0xb6
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f003 f8a8 	bl	800ad3c <VL53L0X_WrByte>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf6:	e009      	b.n	8007c0c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c02:	2200      	movs	r2, #0
 8007c04:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	3301      	adds	r3, #1
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d3f1      	bcc.n	8007bf8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d011      	beq.n	8007c3e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007c1a:	e002      	b.n	8007c22 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	3301      	adds	r3, #1
 8007c20:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007c22:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	4413      	add	r3, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff fc2a 	bl	8007484 <is_aperture>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d103      	bne.n	8007c3e <VL53L0X_set_reference_spads+0xe6>
 8007c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d3ee      	bcc.n	8007c1c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 8007c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c4e:	79f9      	ldrb	r1, [r7, #7]
 8007c50:	f107 0214 	add.w	r2, r7, #20
 8007c54:	9204      	str	r2, [sp, #16]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	9203      	str	r2, [sp, #12]
 8007c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c5c:	9202      	str	r2, [sp, #8]
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	4623      	mov	r3, r4
 8007c66:	4602      	mov	r2, r0
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff fc83 	bl	8007574 <enable_ref_spads>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007c74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10c      	bne.n	8007c96 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	79fa      	ldrb	r2, [r7, #7]
 8007c92:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007c96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3734      	adds	r7, #52	; 0x34
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd90      	pop	{r4, r7, pc}

08007ca2 <VL53L0X_perform_single_ref_calibration>:
}
#endif

VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10a      	bne.n	8007cd0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f003 f838 	bl	800ad3c <VL53L0X_WrByte>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d104      	bne.n	8007ce2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f9bf 	bl	800805c <VL53L0X_measurement_poll_for_completion>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d105      	bne.n	8007cf6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007cea:	2100      	movs	r1, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff fab4 	bl	800725a <VL53L0X_ClearInterruptMask>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d106      	bne.n	8007d0c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2100      	movs	r1, #0
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f003 f81a 	bl	800ad3c <VL53L0X_WrByte>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	4608      	mov	r0, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	461a      	mov	r2, r3
 8007d26:	4603      	mov	r3, r0
 8007d28:	70fb      	strb	r3, [r7, #3]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70bb      	strb	r3, [r7, #2]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	21ff      	movs	r1, #255	; 0xff
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f002 fffc 	bl	800ad3c <VL53L0X_WrByte>
 8007d44:	4603      	mov	r3, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2100      	movs	r1, #0
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f002 fff2 	bl	800ad3c <VL53L0X_WrByte>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007d62:	2200      	movs	r2, #0
 8007d64:	21ff      	movs	r1, #255	; 0xff
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f002 ffe8 	bl	800ad3c <VL53L0X_WrByte>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	461a      	mov	r2, r3
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01e      	beq.n	8007dba <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007d7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d009      	beq.n	8007d98 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	21cb      	movs	r1, #203	; 0xcb
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f003 f859 	bl	800ae40 <VL53L0X_RdByte>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	461a      	mov	r2, r3
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007d98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d02a      	beq.n	8007df6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007da0:	f107 030e 	add.w	r3, r7, #14
 8007da4:	461a      	mov	r2, r3
 8007da6:	21ee      	movs	r1, #238	; 0xee
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f003 f849 	bl	800ae40 <VL53L0X_RdByte>
 8007dae:	4603      	mov	r3, r0
 8007db0:	461a      	mov	r2, r3
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	73fb      	strb	r3, [r7, #15]
 8007db8:	e01d      	b.n	8007df6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007dba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007dc2:	78bb      	ldrb	r3, [r7, #2]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	21cb      	movs	r1, #203	; 0xcb
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f002 ffb7 	bl	800ad3c <VL53L0X_WrByte>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007dd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007de0:	787b      	ldrb	r3, [r7, #1]
 8007de2:	2280      	movs	r2, #128	; 0x80
 8007de4:	21ee      	movs	r1, #238	; 0xee
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f002 fff6 	bl	800add8 <VL53L0X_UpdateByte>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007df6:	2201      	movs	r2, #1
 8007df8:	21ff      	movs	r1, #255	; 0xff
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f002 ff9e 	bl	800ad3c <VL53L0X_WrByte>
 8007e00:	4603      	mov	r3, r0
 8007e02:	461a      	mov	r2, r3
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f002 ff94 	bl	800ad3c <VL53L0X_WrByte>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	21ff      	movs	r1, #255	; 0xff
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f002 ff8a 	bl	800ad3c <VL53L0X_WrByte>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	f023 0310 	bic.w	r3, r3, #16
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	701a      	strb	r2, [r3, #0]

	return Status;
 8007e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b08a      	sub	sp, #40	; 0x28
 8007e4e:	af04      	add	r7, sp, #16
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	4611      	mov	r1, r2
 8007e56:	461a      	mov	r2, r3
 8007e58:	460b      	mov	r3, r1
 8007e5a:	71fb      	strb	r3, [r7, #7]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007e74:	79bb      	ldrb	r3, [r7, #6]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007e80:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007e82:	2201      	movs	r2, #1
 8007e84:	2101      	movs	r1, #1
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f002 ff58 	bl	800ad3c <VL53L0X_WrByte>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007e90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d105      	bne.n	8007ea4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007e98:	2140      	movs	r1, #64	; 0x40
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff ff01 	bl	8007ca2 <VL53L0X_perform_single_ref_calibration>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007ea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d115      	bne.n	8007ed8 <VL53L0X_perform_vhv_calibration+0x8e>
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d112      	bne.n	8007ed8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007eb2:	7d39      	ldrb	r1, [r7, #20]
 8007eb4:	7d7a      	ldrb	r2, [r7, #21]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9303      	str	r3, [sp, #12]
 8007eba:	2301      	movs	r3, #1
 8007ebc:	9302      	str	r3, [sp, #8]
 8007ebe:	f107 0313 	add.w	r3, r7, #19
 8007ec2:	9301      	str	r3, [sp, #4]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	2101      	movs	r1, #1
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7ff ff23 	bl	8007d18 <VL53L0X_ref_calibration_io>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]
 8007ed6:	e002      	b.n	8007ede <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2200      	movs	r2, #0
 8007edc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007ede:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d112      	bne.n	8007f0c <VL53L0X_perform_vhv_calibration+0xc2>
 8007ee6:	79bb      	ldrb	r3, [r7, #6]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00f      	beq.n	8007f0c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007eec:	7dbb      	ldrb	r3, [r7, #22]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f002 ff22 	bl	800ad3c <VL53L0X_WrByte>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d103      	bne.n	8007f0c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	7dba      	ldrb	r2, [r7, #22]
 8007f08:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8007f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08a      	sub	sp, #40	; 0x28
 8007f1c:	af04      	add	r7, sp, #16
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	4611      	mov	r1, r2
 8007f24:	461a      	mov	r2, r3
 8007f26:	460b      	mov	r3, r1
 8007f28:	71fb      	strb	r3, [r7, #7]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007f3e:	79bb      	ldrb	r3, [r7, #6]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007f4a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	2101      	movs	r1, #1
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f002 fef3 	bl	800ad3c <VL53L0X_WrByte>
 8007f56:	4603      	mov	r3, r0
 8007f58:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d105      	bne.n	8007f6e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8007f62:	2100      	movs	r1, #0
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f7ff fe9c 	bl	8007ca2 <VL53L0X_perform_single_ref_calibration>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d115      	bne.n	8007fa2 <VL53L0X_perform_phase_calibration+0x8a>
 8007f76:	79fb      	ldrb	r3, [r7, #7]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d112      	bne.n	8007fa2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007f7c:	7d39      	ldrb	r1, [r7, #20]
 8007f7e:	7d7a      	ldrb	r2, [r7, #21]
 8007f80:	2301      	movs	r3, #1
 8007f82:	9303      	str	r3, [sp, #12]
 8007f84:	2300      	movs	r3, #0
 8007f86:	9302      	str	r3, [sp, #8]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	f107 0313 	add.w	r3, r7, #19
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	460b      	mov	r3, r1
 8007f94:	2101      	movs	r1, #1
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff febe 	bl	8007d18 <VL53L0X_ref_calibration_io>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]
 8007fa0:	e002      	b.n	8007fa8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d112      	bne.n	8007fd6 <VL53L0X_perform_phase_calibration+0xbe>
 8007fb0:	79bb      	ldrb	r3, [r7, #6]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00f      	beq.n	8007fd6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007fb6:	7dbb      	ldrb	r3, [r7, #22]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	2101      	movs	r1, #1
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f002 febd 	bl	800ad3c <VL53L0X_WrByte>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d103      	bne.n	8007fd6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	7dba      	ldrb	r2, [r7, #22]
 8007fd2:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8007fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
 8007fee:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007ffe:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	2300      	movs	r3, #0
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7ff ff1f 	bl	8007e4a <VL53L0X_perform_vhv_calibration>
 800800c:	4603      	mov	r3, r0
 800800e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d107      	bne.n	8008028 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008018:	78fa      	ldrb	r2, [r7, #3]
 800801a:	2300      	movs	r3, #0
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7ff ff7a 	bl	8007f18 <VL53L0X_perform_phase_calibration>
 8008024:	4603      	mov	r3, r0
 8008026:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10f      	bne.n	8008050 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008030:	7dbb      	ldrb	r3, [r7, #22]
 8008032:	461a      	mov	r2, r3
 8008034:	2101      	movs	r1, #1
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f002 fe80 	bl	800ad3c <VL53L0X_WrByte>
 800803c:	4603      	mov	r3, r0
 800803e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d103      	bne.n	8008050 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	7dba      	ldrb	r2, [r7, #22]
 800804c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8008050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <VL53L0X_measurement_poll_for_completion>:
	return Status;
}
#endif

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008064:	2300      	movs	r3, #0
 8008066:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008070:	f107 030f 	add.w	r3, r7, #15
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7fe fd98 	bl	8006bac <VL53L0X_GetMeasurementDataReady>
 800807c:	4603      	mov	r3, r0
 800807e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008080:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d110      	bne.n	80080aa <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d00f      	beq.n	80080ae <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	3301      	adds	r3, #1
 8008092:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800809a:	d302      	bcc.n	80080a2 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800809c:	23f9      	movs	r3, #249	; 0xf9
 800809e:	75fb      	strb	r3, [r7, #23]
			break;
 80080a0:	e006      	b.n	80080b0 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f002 ff6a 	bl	800af7c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80080a8:	e7e2      	b.n	8008070 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80080aa:	bf00      	nop
 80080ac:	e000      	b.n	80080b0 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80080ae:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80080b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4603      	mov	r3, r0
 80080c4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	3301      	adds	r3, #1
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b085      	sub	sp, #20
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	4603      	mov	r3, r0
 80080ea:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	085b      	lsrs	r3, r3, #1
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008118:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800811a:	e002      	b.n	8008122 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	089b      	lsrs	r3, r3, #2
 8008120:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	429a      	cmp	r2, r3
 8008128:	d8f8      	bhi.n	800811c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800812a:	e017      	b.n	800815c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4413      	add	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	429a      	cmp	r2, r3
 8008136:	d30b      	bcc.n	8008150 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	4413      	add	r3, r2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	085b      	lsrs	r3, r3, #1
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	4413      	add	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	e002      	b.n	8008156 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	085b      	lsrs	r3, r3, #1
 8008154:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	089b      	lsrs	r3, r3, #2
 800815a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e4      	bne.n	800812c <VL53L0X_isqrt+0x24>
	}

	return res;
 8008162:	68fb      	ldr	r3, [r7, #12]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <VL53L0X_device_read_strobe>:
	return res;
}
#endif

VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008178:	2300      	movs	r3, #0
 800817a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800817c:	2200      	movs	r2, #0
 800817e:	2183      	movs	r1, #131	; 0x83
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f002 fddb 	bl	800ad3c <VL53L0X_WrByte>
 8008186:	4603      	mov	r3, r0
 8008188:	461a      	mov	r2, r3
 800818a:	7dfb      	ldrb	r3, [r7, #23]
 800818c:	4313      	orrs	r3, r2
 800818e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8008190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d11e      	bne.n	80081d6 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800819c:	f107 030f 	add.w	r3, r7, #15
 80081a0:	461a      	mov	r2, r3
 80081a2:	2183      	movs	r1, #131	; 0x83
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f002 fe4b 	bl	800ae40 <VL53L0X_RdByte>
 80081aa:	4603      	mov	r3, r0
 80081ac:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10a      	bne.n	80081ca <VL53L0X_device_read_strobe+0x5a>
 80081b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d106      	bne.n	80081ca <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	3301      	adds	r3, #1
 80081c0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80081c8:	d3e8      	bcc.n	800819c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80081d0:	d301      	bcc.n	80081d6 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80081d2:	23f9      	movs	r3, #249	; 0xf9
 80081d4:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80081d6:	2201      	movs	r2, #1
 80081d8:	2183      	movs	r1, #131	; 0x83
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f002 fdae 	bl	800ad3c <VL53L0X_WrByte>
 80081e0:	4603      	mov	r3, r0
 80081e2:	461a      	mov	r2, r3
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80081ea:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b098      	sub	sp, #96	; 0x60
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	460b      	mov	r3, r1
 8008200:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008202:	2300      	movs	r3, #0
 8008204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008226:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800822a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800822c:	2300      	movs	r3, #0
 800822e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800823e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 8008242:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008246:	2b07      	cmp	r3, #7
 8008248:	f000 8408 	beq.w	8008a5c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800824c:	2201      	movs	r2, #1
 800824e:	2180      	movs	r1, #128	; 0x80
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f002 fd73 	bl	800ad3c <VL53L0X_WrByte>
 8008256:	4603      	mov	r3, r0
 8008258:	461a      	mov	r2, r3
 800825a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800825e:	4313      	orrs	r3, r2
 8008260:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008264:	2201      	movs	r2, #1
 8008266:	21ff      	movs	r1, #255	; 0xff
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f002 fd67 	bl	800ad3c <VL53L0X_WrByte>
 800826e:	4603      	mov	r3, r0
 8008270:	461a      	mov	r2, r3
 8008272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008276:	4313      	orrs	r3, r2
 8008278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f002 fd5b 	bl	800ad3c <VL53L0X_WrByte>
 8008286:	4603      	mov	r3, r0
 8008288:	461a      	mov	r2, r3
 800828a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800828e:	4313      	orrs	r3, r2
 8008290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008294:	2206      	movs	r2, #6
 8008296:	21ff      	movs	r1, #255	; 0xff
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f002 fd4f 	bl	800ad3c <VL53L0X_WrByte>
 800829e:	4603      	mov	r3, r0
 80082a0:	461a      	mov	r2, r3
 80082a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80082ac:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80082b0:	461a      	mov	r2, r3
 80082b2:	2183      	movs	r1, #131	; 0x83
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f002 fdc3 	bl	800ae40 <VL53L0X_RdByte>
 80082ba:	4603      	mov	r3, r0
 80082bc:	461a      	mov	r2, r3
 80082be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80082c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082cc:	f043 0304 	orr.w	r3, r3, #4
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	2183      	movs	r1, #131	; 0x83
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f002 fd30 	bl	800ad3c <VL53L0X_WrByte>
 80082dc:	4603      	mov	r3, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082e4:	4313      	orrs	r3, r2
 80082e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80082ea:	2207      	movs	r2, #7
 80082ec:	21ff      	movs	r1, #255	; 0xff
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f002 fd24 	bl	800ad3c <VL53L0X_WrByte>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082fc:	4313      	orrs	r3, r2
 80082fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008302:	2201      	movs	r2, #1
 8008304:	2181      	movs	r1, #129	; 0x81
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f002 fd18 	bl	800ad3c <VL53L0X_WrByte>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008314:	4313      	orrs	r3, r2
 8008316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f002 fe2e 	bl	800af7c <VL53L0X_PollingDelay>
 8008320:	4603      	mov	r3, r0
 8008322:	461a      	mov	r2, r3
 8008324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008328:	4313      	orrs	r3, r2
 800832a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800832e:	2201      	movs	r2, #1
 8008330:	2180      	movs	r1, #128	; 0x80
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f002 fd02 	bl	800ad3c <VL53L0X_WrByte>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008340:	4313      	orrs	r3, r2
 8008342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8098 	beq.w	8008482 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008352:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008356:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800835a:	2b00      	cmp	r3, #0
 800835c:	f040 8091 	bne.w	8008482 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008360:	226b      	movs	r2, #107	; 0x6b
 8008362:	2194      	movs	r1, #148	; 0x94
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f002 fce9 	bl	800ad3c <VL53L0X_WrByte>
 800836a:	4603      	mov	r3, r0
 800836c:	461a      	mov	r2, r3
 800836e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008372:	4313      	orrs	r3, r2
 8008374:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff fef9 	bl	8008170 <VL53L0X_device_read_strobe>
 800837e:	4603      	mov	r3, r0
 8008380:	461a      	mov	r2, r3
 8008382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008386:	4313      	orrs	r3, r2
 8008388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800838c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008390:	461a      	mov	r2, r3
 8008392:	2190      	movs	r1, #144	; 0x90
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f002 fdb5 	bl	800af04 <VL53L0X_RdDWord>
 800839a:	4603      	mov	r3, r0
 800839c:	461a      	mov	r2, r3
 800839e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	0a1b      	lsrs	r3, r3, #8
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	0bdb      	lsrs	r3, r3, #15
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80083c4:	2224      	movs	r2, #36	; 0x24
 80083c6:	2194      	movs	r1, #148	; 0x94
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f002 fcb7 	bl	800ad3c <VL53L0X_WrByte>
 80083ce:	4603      	mov	r3, r0
 80083d0:	461a      	mov	r2, r3
 80083d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff fec7 	bl	8008170 <VL53L0X_device_read_strobe>
 80083e2:	4603      	mov	r3, r0
 80083e4:	461a      	mov	r2, r3
 80083e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80083f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083f4:	461a      	mov	r2, r3
 80083f6:	2190      	movs	r1, #144	; 0x90
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f002 fd83 	bl	800af04 <VL53L0X_RdDWord>
 80083fe:	4603      	mov	r3, r0
 8008400:	461a      	mov	r2, r3
 8008402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008406:	4313      	orrs	r3, r2
 8008408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	0e1b      	lsrs	r3, r3, #24
 8008410:	b2db      	uxtb	r3, r3
 8008412:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	0c1b      	lsrs	r3, r3, #16
 8008418:	b2db      	uxtb	r3, r3
 800841a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800841c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841e:	0a1b      	lsrs	r3, r3, #8
 8008420:	b2db      	uxtb	r3, r3
 8008422:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	b2db      	uxtb	r3, r3
 8008428:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800842a:	2225      	movs	r2, #37	; 0x25
 800842c:	2194      	movs	r1, #148	; 0x94
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f002 fc84 	bl	800ad3c <VL53L0X_WrByte>
 8008434:	4603      	mov	r3, r0
 8008436:	461a      	mov	r2, r3
 8008438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800843c:	4313      	orrs	r3, r2
 800843e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fe94 	bl	8008170 <VL53L0X_device_read_strobe>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008450:	4313      	orrs	r3, r2
 8008452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800845a:	461a      	mov	r2, r3
 800845c:	2190      	movs	r1, #144	; 0x90
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f002 fd50 	bl	800af04 <VL53L0X_RdDWord>
 8008464:	4603      	mov	r3, r0
 8008466:	461a      	mov	r2, r3
 8008468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800846c:	4313      	orrs	r3, r2
 800846e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	0e1b      	lsrs	r3, r3, #24
 8008476:	b2db      	uxtb	r3, r3
 8008478:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	0c1b      	lsrs	r3, r3, #16
 800847e:	b2db      	uxtb	r3, r3
 8008480:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008482:	78fb      	ldrb	r3, [r7, #3]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8189 	beq.w	80087a0 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800848e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008492:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008496:	2b00      	cmp	r3, #0
 8008498:	f040 8182 	bne.w	80087a0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800849c:	2202      	movs	r2, #2
 800849e:	2194      	movs	r1, #148	; 0x94
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f002 fc4b 	bl	800ad3c <VL53L0X_WrByte>
 80084a6:	4603      	mov	r3, r0
 80084a8:	461a      	mov	r2, r3
 80084aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084ae:	4313      	orrs	r3, r2
 80084b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff fe5b 	bl	8008170 <VL53L0X_device_read_strobe>
 80084ba:	4603      	mov	r3, r0
 80084bc:	461a      	mov	r2, r3
 80084be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80084c8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80084cc:	461a      	mov	r2, r3
 80084ce:	2190      	movs	r1, #144	; 0x90
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f002 fcb5 	bl	800ae40 <VL53L0X_RdByte>
 80084d6:	4603      	mov	r3, r0
 80084d8:	461a      	mov	r2, r3
 80084da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084de:	4313      	orrs	r3, r2
 80084e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80084e4:	227b      	movs	r2, #123	; 0x7b
 80084e6:	2194      	movs	r1, #148	; 0x94
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f002 fc27 	bl	800ad3c <VL53L0X_WrByte>
 80084ee:	4603      	mov	r3, r0
 80084f0:	461a      	mov	r2, r3
 80084f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7ff fe37 	bl	8008170 <VL53L0X_device_read_strobe>
 8008502:	4603      	mov	r3, r0
 8008504:	461a      	mov	r2, r3
 8008506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800850a:	4313      	orrs	r3, r2
 800850c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008510:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008514:	461a      	mov	r2, r3
 8008516:	2190      	movs	r1, #144	; 0x90
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f002 fc91 	bl	800ae40 <VL53L0X_RdByte>
 800851e:	4603      	mov	r3, r0
 8008520:	461a      	mov	r2, r3
 8008522:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008526:	4313      	orrs	r3, r2
 8008528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800852c:	2277      	movs	r2, #119	; 0x77
 800852e:	2194      	movs	r1, #148	; 0x94
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f002 fc03 	bl	800ad3c <VL53L0X_WrByte>
 8008536:	4603      	mov	r3, r0
 8008538:	461a      	mov	r2, r3
 800853a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800853e:	4313      	orrs	r3, r2
 8008540:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff fe13 	bl	8008170 <VL53L0X_device_read_strobe>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008552:	4313      	orrs	r3, r2
 8008554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008558:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800855c:	461a      	mov	r2, r3
 800855e:	2190      	movs	r1, #144	; 0x90
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f002 fccf 	bl	800af04 <VL53L0X_RdDWord>
 8008566:	4603      	mov	r3, r0
 8008568:	461a      	mov	r2, r3
 800856a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800856e:	4313      	orrs	r3, r2
 8008570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	0e5b      	lsrs	r3, r3, #25
 8008578:	b2db      	uxtb	r3, r3
 800857a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800857e:	b2db      	uxtb	r3, r3
 8008580:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	0c9b      	lsrs	r3, r3, #18
 8008586:	b2db      	uxtb	r3, r3
 8008588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858c:	b2db      	uxtb	r3, r3
 800858e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	0adb      	lsrs	r3, r3, #11
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859a:	b2db      	uxtb	r3, r3
 800859c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	091b      	lsrs	r3, r3, #4
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80085be:	2278      	movs	r2, #120	; 0x78
 80085c0:	2194      	movs	r1, #148	; 0x94
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f002 fbba 	bl	800ad3c <VL53L0X_WrByte>
 80085c8:	4603      	mov	r3, r0
 80085ca:	461a      	mov	r2, r3
 80085cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085d0:	4313      	orrs	r3, r2
 80085d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff fdca 	bl	8008170 <VL53L0X_device_read_strobe>
 80085dc:	4603      	mov	r3, r0
 80085de:	461a      	mov	r2, r3
 80085e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085e4:	4313      	orrs	r3, r2
 80085e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80085ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085ee:	461a      	mov	r2, r3
 80085f0:	2190      	movs	r1, #144	; 0x90
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f002 fc86 	bl	800af04 <VL53L0X_RdDWord>
 80085f8:	4603      	mov	r3, r0
 80085fa:	461a      	mov	r2, r3
 80085fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008600:	4313      	orrs	r3, r2
 8008602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	0f5b      	lsrs	r3, r3, #29
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008610:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008616:	4413      	add	r3, r2
 8008618:	b2db      	uxtb	r3, r3
 800861a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	0d9b      	lsrs	r3, r3, #22
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008626:	b2db      	uxtb	r3, r3
 8008628:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	0bdb      	lsrs	r3, r3, #15
 800862e:	b2db      	uxtb	r3, r3
 8008630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008634:	b2db      	uxtb	r3, r3
 8008636:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008642:	b2db      	uxtb	r3, r3
 8008644:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	085b      	lsrs	r3, r3, #1
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008650:	b2db      	uxtb	r3, r3
 8008652:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	b2db      	uxtb	r3, r3
 8008658:	019b      	lsls	r3, r3, #6
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008660:	b2db      	uxtb	r3, r3
 8008662:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008666:	2279      	movs	r2, #121	; 0x79
 8008668:	2194      	movs	r1, #148	; 0x94
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f002 fb66 	bl	800ad3c <VL53L0X_WrByte>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008678:	4313      	orrs	r3, r2
 800867a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff fd76 	bl	8008170 <VL53L0X_device_read_strobe>
 8008684:	4603      	mov	r3, r0
 8008686:	461a      	mov	r2, r3
 8008688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800868c:	4313      	orrs	r3, r2
 800868e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008696:	461a      	mov	r2, r3
 8008698:	2190      	movs	r1, #144	; 0x90
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f002 fc32 	bl	800af04 <VL53L0X_RdDWord>
 80086a0:	4603      	mov	r3, r0
 80086a2:	461a      	mov	r2, r3
 80086a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086a8:	4313      	orrs	r3, r2
 80086aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	0e9b      	lsrs	r3, r3, #26
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b8:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80086ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086be:	4413      	add	r3, r2
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	0cdb      	lsrs	r3, r3, #19
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	0b1b      	lsrs	r3, r3, #12
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008700:	227a      	movs	r2, #122	; 0x7a
 8008702:	2194      	movs	r1, #148	; 0x94
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f002 fb19 	bl	800ad3c <VL53L0X_WrByte>
 800870a:	4603      	mov	r3, r0
 800870c:	461a      	mov	r2, r3
 800870e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008712:	4313      	orrs	r3, r2
 8008714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff fd29 	bl	8008170 <VL53L0X_device_read_strobe>
 800871e:	4603      	mov	r3, r0
 8008720:	461a      	mov	r2, r3
 8008722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008726:	4313      	orrs	r3, r2
 8008728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800872c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008730:	461a      	mov	r2, r3
 8008732:	2190      	movs	r1, #144	; 0x90
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f002 fbe5 	bl	800af04 <VL53L0X_RdDWord>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008742:	4313      	orrs	r3, r2
 8008744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	0f9b      	lsrs	r3, r3, #30
 800874c:	b2db      	uxtb	r3, r3
 800874e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008752:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008758:	4413      	add	r3, r2
 800875a:	b2db      	uxtb	r3, r3
 800875c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	0ddb      	lsrs	r3, r3, #23
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008768:	b2db      	uxtb	r3, r3
 800876a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	0c1b      	lsrs	r3, r3, #16
 8008770:	b2db      	uxtb	r3, r3
 8008772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008776:	b2db      	uxtb	r3, r3
 8008778:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	0a5b      	lsrs	r3, r3, #9
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	089b      	lsrs	r3, r3, #2
 800878e:	b2db      	uxtb	r3, r3
 8008790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008794:	b2db      	uxtb	r3, r3
 8008796:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800879a:	2300      	movs	r3, #0
 800879c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80087a0:	78fb      	ldrb	r3, [r7, #3]
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 80f1 	beq.w	800898e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80087ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087b0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f040 80ea 	bne.w	800898e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80087ba:	227b      	movs	r2, #123	; 0x7b
 80087bc:	2194      	movs	r1, #148	; 0x94
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f002 fabc 	bl	800ad3c <VL53L0X_WrByte>
 80087c4:	4603      	mov	r3, r0
 80087c6:	461a      	mov	r2, r3
 80087c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087cc:	4313      	orrs	r3, r2
 80087ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff fccc 	bl	8008170 <VL53L0X_device_read_strobe>
 80087d8:	4603      	mov	r3, r0
 80087da:	461a      	mov	r2, r3
 80087dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087e0:	4313      	orrs	r3, r2
 80087e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80087e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087ea:	461a      	mov	r2, r3
 80087ec:	2190      	movs	r1, #144	; 0x90
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f002 fb88 	bl	800af04 <VL53L0X_RdDWord>
 80087f4:	4603      	mov	r3, r0
 80087f6:	461a      	mov	r2, r3
 80087f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087fc:	4313      	orrs	r3, r2
 80087fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008802:	227c      	movs	r2, #124	; 0x7c
 8008804:	2194      	movs	r1, #148	; 0x94
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f002 fa98 	bl	800ad3c <VL53L0X_WrByte>
 800880c:	4603      	mov	r3, r0
 800880e:	461a      	mov	r2, r3
 8008810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008814:	4313      	orrs	r3, r2
 8008816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff fca8 	bl	8008170 <VL53L0X_device_read_strobe>
 8008820:	4603      	mov	r3, r0
 8008822:	461a      	mov	r2, r3
 8008824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008828:	4313      	orrs	r3, r2
 800882a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800882e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008832:	461a      	mov	r2, r3
 8008834:	2190      	movs	r1, #144	; 0x90
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f002 fb64 	bl	800af04 <VL53L0X_RdDWord>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008844:	4313      	orrs	r3, r2
 8008846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800884a:	2273      	movs	r2, #115	; 0x73
 800884c:	2194      	movs	r1, #148	; 0x94
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f002 fa74 	bl	800ad3c <VL53L0X_WrByte>
 8008854:	4603      	mov	r3, r0
 8008856:	461a      	mov	r2, r3
 8008858:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800885c:	4313      	orrs	r3, r2
 800885e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff fc84 	bl	8008170 <VL53L0X_device_read_strobe>
 8008868:	4603      	mov	r3, r0
 800886a:	461a      	mov	r2, r3
 800886c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008870:	4313      	orrs	r3, r2
 8008872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800887a:	461a      	mov	r2, r3
 800887c:	2190      	movs	r1, #144	; 0x90
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f002 fb40 	bl	800af04 <VL53L0X_RdDWord>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800888c:	4313      	orrs	r3, r2
 800888e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008896:	b29b      	uxth	r3, r3
 8008898:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800889a:	2274      	movs	r2, #116	; 0x74
 800889c:	2194      	movs	r1, #148	; 0x94
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f002 fa4c 	bl	800ad3c <VL53L0X_WrByte>
 80088a4:	4603      	mov	r3, r0
 80088a6:	461a      	mov	r2, r3
 80088a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088ac:	4313      	orrs	r3, r2
 80088ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff fc5c 	bl	8008170 <VL53L0X_device_read_strobe>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088c0:	4313      	orrs	r3, r2
 80088c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80088c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088ca:	461a      	mov	r2, r3
 80088cc:	2190      	movs	r1, #144	; 0x90
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f002 fb18 	bl	800af04 <VL53L0X_RdDWord>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088dc:	4313      	orrs	r3, r2
 80088de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80088e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088e8:	4313      	orrs	r3, r2
 80088ea:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80088ec:	2275      	movs	r2, #117	; 0x75
 80088ee:	2194      	movs	r1, #148	; 0x94
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f002 fa23 	bl	800ad3c <VL53L0X_WrByte>
 80088f6:	4603      	mov	r3, r0
 80088f8:	461a      	mov	r2, r3
 80088fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088fe:	4313      	orrs	r3, r2
 8008900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7ff fc33 	bl	8008170 <VL53L0X_device_read_strobe>
 800890a:	4603      	mov	r3, r0
 800890c:	461a      	mov	r2, r3
 800890e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008912:	4313      	orrs	r3, r2
 8008914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800891c:	461a      	mov	r2, r3
 800891e:	2190      	movs	r1, #144	; 0x90
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f002 faef 	bl	800af04 <VL53L0X_RdDWord>
 8008926:	4603      	mov	r3, r0
 8008928:	461a      	mov	r2, r3
 800892a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800892e:	4313      	orrs	r3, r2
 8008930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8008938:	b29b      	uxth	r3, r3
 800893a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800893c:	2276      	movs	r2, #118	; 0x76
 800893e:	2194      	movs	r1, #148	; 0x94
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f002 f9fb 	bl	800ad3c <VL53L0X_WrByte>
 8008946:	4603      	mov	r3, r0
 8008948:	461a      	mov	r2, r3
 800894a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800894e:	4313      	orrs	r3, r2
 8008950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7ff fc0b 	bl	8008170 <VL53L0X_device_read_strobe>
 800895a:	4603      	mov	r3, r0
 800895c:	461a      	mov	r2, r3
 800895e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008962:	4313      	orrs	r3, r2
 8008964:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008968:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800896c:	461a      	mov	r2, r3
 800896e:	2190      	movs	r1, #144	; 0x90
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f002 fac7 	bl	800af04 <VL53L0X_RdDWord>
 8008976:	4603      	mov	r3, r0
 8008978:	461a      	mov	r2, r3
 800897a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800897e:	4313      	orrs	r3, r2
 8008980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800898a:	4313      	orrs	r3, r2
 800898c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800898e:	2200      	movs	r2, #0
 8008990:	2181      	movs	r1, #129	; 0x81
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f002 f9d2 	bl	800ad3c <VL53L0X_WrByte>
 8008998:	4603      	mov	r3, r0
 800899a:	461a      	mov	r2, r3
 800899c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089a0:	4313      	orrs	r3, r2
 80089a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80089a6:	2206      	movs	r2, #6
 80089a8:	21ff      	movs	r1, #255	; 0xff
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f002 f9c6 	bl	800ad3c <VL53L0X_WrByte>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b8:	4313      	orrs	r3, r2
 80089ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80089be:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80089c2:	461a      	mov	r2, r3
 80089c4:	2183      	movs	r1, #131	; 0x83
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f002 fa3a 	bl	800ae40 <VL53L0X_RdByte>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461a      	mov	r2, r3
 80089d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089d4:	4313      	orrs	r3, r2
 80089d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80089da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089de:	f023 0304 	bic.w	r3, r3, #4
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	461a      	mov	r2, r3
 80089e6:	2183      	movs	r1, #131	; 0x83
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f002 f9a7 	bl	800ad3c <VL53L0X_WrByte>
 80089ee:	4603      	mov	r3, r0
 80089f0:	461a      	mov	r2, r3
 80089f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089f6:	4313      	orrs	r3, r2
 80089f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80089fc:	2201      	movs	r2, #1
 80089fe:	21ff      	movs	r1, #255	; 0xff
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f002 f99b 	bl	800ad3c <VL53L0X_WrByte>
 8008a06:	4603      	mov	r3, r0
 8008a08:	461a      	mov	r2, r3
 8008a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008a14:	2201      	movs	r2, #1
 8008a16:	2100      	movs	r1, #0
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f002 f98f 	bl	800ad3c <VL53L0X_WrByte>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	461a      	mov	r2, r3
 8008a22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a26:	4313      	orrs	r3, r2
 8008a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	21ff      	movs	r1, #255	; 0xff
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f002 f983 	bl	800ad3c <VL53L0X_WrByte>
 8008a36:	4603      	mov	r3, r0
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008a44:	2200      	movs	r2, #0
 8008a46:	2180      	movs	r1, #128	; 0x80
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f002 f977 	bl	800ad3c <VL53L0X_WrByte>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	461a      	mov	r2, r3
 8008a52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a56:	4313      	orrs	r3, r2
 8008a58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008a5c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f040 8090 	bne.w	8008b86 <VL53L0X_get_info_from_device+0x990>
 8008a66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a6a:	2b07      	cmp	r3, #7
 8008a6c:	f000 808b 	beq.w	8008b86 <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d024      	beq.n	8008ac4 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008a7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a7e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d11e      	bne.n	8008ac4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008a8c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008a96:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a9e:	e00e      	b.n	8008abe <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008aa0:	f107 0208 	add.w	r2, r7, #8
 8008aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aa6:	4413      	add	r3, r2
 8008aa8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8008ab4:	460a      	mov	r2, r1
 8008ab6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aba:	3301      	adds	r3, #1
 8008abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac0:	2b05      	cmp	r3, #5
 8008ac2:	dded      	ble.n	8008aa0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d019      	beq.n	8008b02 <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ad2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d113      	bne.n	8008b02 <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ada:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ae4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f203 131f 	addw	r3, r3, #287	; 0x11f
 8008af4:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008af6:	f107 0310 	add.w	r3, r7, #16
 8008afa:	4619      	mov	r1, r3
 8008afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008afe:	f00c fe34 	bl	801576a <strcpy>

		}

		if (((option & 4) == 4) &&
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d030      	beq.n	8008b6e <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008b0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b10:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d12a      	bne.n	8008b6e <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b2a:	025b      	lsls	r3, r3, #9
 8008b2c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b32:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d011      	beq.n	8008b66 <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 8008b42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
 8008b54:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 8008b56:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 8008b5a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008b5e:	425b      	negs	r3, r3
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008b66:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008b6e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008b7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b86:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3760      	adds	r7, #96	; 0x60
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b087      	sub	sp, #28
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 8008b9e:	f240 6277 	movw	r2, #1655	; 0x677
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008baa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008bae:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	fb02 f303 	mul.w	r3, r2, r3
 8008bbe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b087      	sub	sp, #28
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d017      	beq.n	8008c18 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008bee:	e005      	b.n	8008bfc <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	085b      	lsrs	r3, r3, #1
 8008bf4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008bf6:	89fb      	ldrh	r3, [r7, #14]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f4      	bne.n	8008bf0 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008c06:	89fb      	ldrh	r3, [r7, #14]
 8008c08:	021b      	lsls	r3, r3, #8
 8008c0a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008c14:	4413      	add	r3, r2
 8008c16:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008c18:	8afb      	ldrh	r3, [r7, #22]

}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	371c      	adds	r7, #28
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b085      	sub	sp, #20
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008c38:	88fa      	ldrh	r2, [r7, #6]
 8008c3a:	0a12      	lsrs	r2, r2, #8
 8008c3c:	b292      	uxth	r2, r2
 8008c3e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008c40:	3301      	adds	r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008c44:	68fb      	ldr	r3, [r7, #12]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
	...

08008c54 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008c66:	79fb      	ldrb	r3, [r7, #7]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f7ff ff91 	bl	8008b92 <VL53L0X_calc_macro_period_ps>
 8008c70:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008c78:	4a0a      	ldr	r2, [pc, #40]	; (8008ca4 <VL53L0X_calc_timeout_mclks+0x50>)
 8008c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7e:	099b      	lsrs	r3, r3, #6
 8008c80:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c88:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	441a      	add	r2, r3
	timeout_period_mclks =
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c98:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8008c9a:	69fb      	ldr	r3, [r7, #28]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3720      	adds	r7, #32
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	10624dd3 	.word	0x10624dd3

08008ca8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	807b      	strh	r3, [r7, #2]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008cbc:	787b      	ldrb	r3, [r7, #1]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff ff66 	bl	8008b92 <VL53L0X_calc_macro_period_ps>
 8008cc6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008cce:	4a0a      	ldr	r2, [pc, #40]	; (8008cf8 <VL53L0X_calc_timeout_us+0x50>)
 8008cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd4:	099b      	lsrs	r3, r3, #6
 8008cd6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008cd8:	887b      	ldrh	r3, [r7, #2]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	fb02 f303 	mul.w	r3, r2, r3
 8008ce0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8008ce4:	4a04      	ldr	r2, [pc, #16]	; (8008cf8 <VL53L0X_calc_timeout_us+0x50>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	099b      	lsrs	r3, r3, #6
 8008cec:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008cee:	697b      	ldr	r3, [r7, #20]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	10624dd3 	.word	0x10624dd3

08008cfc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08c      	sub	sp, #48	; 0x30
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	460b      	mov	r3, r1
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008d22:	7afb      	ldrb	r3, [r7, #11]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <get_sequence_step_timeout+0x38>
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d002      	beq.n	8008d34 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008d2e:	7afb      	ldrb	r3, [r7, #11]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d128      	bne.n	8008d86 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d34:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008d38:	461a      	mov	r2, r3
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f7fd f8c7 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8008d42:	4603      	mov	r3, r0
 8008d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008d48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008d50:	f107 0320 	add.w	r3, r7, #32
 8008d54:	461a      	mov	r2, r3
 8008d56:	2146      	movs	r1, #70	; 0x46
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f002 f871 	bl	800ae40 <VL53L0X_RdByte>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8008d64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff ff5b 	bl	8008c26 <VL53L0X_decode_timeout>
 8008d70:	4603      	mov	r3, r0
 8008d72:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008d74:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008d78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7ff ff93 	bl	8008ca8 <VL53L0X_calc_timeout_us>
 8008d82:	62b8      	str	r0, [r7, #40]	; 0x28
 8008d84:	e092      	b.n	8008eac <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d135      	bne.n	8008df8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d8c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008d90:	461a      	mov	r2, r3
 8008d92:	2100      	movs	r1, #0
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f7fd f89b 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008da0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f040 8081 	bne.w	8008eac <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008daa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008dae:	461a      	mov	r2, r3
 8008db0:	2100      	movs	r1, #0
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7fd f88c 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008dbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008dc6:	f107 031e 	add.w	r3, r7, #30
 8008dca:	461a      	mov	r2, r3
 8008dcc:	2151      	movs	r1, #81	; 0x51
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f002 f860 	bl	800ae94 <VL53L0X_RdWord>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008dda:	8bfb      	ldrh	r3, [r7, #30]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7ff ff22 	bl	8008c26 <VL53L0X_decode_timeout>
 8008de2:	4603      	mov	r3, r0
 8008de4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008de6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008dea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dec:	4619      	mov	r1, r3
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7ff ff5a 	bl	8008ca8 <VL53L0X_calc_timeout_us>
 8008df4:	62b8      	str	r0, [r7, #40]	; 0x28
 8008df6:	e059      	b.n	8008eac <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008df8:	7afb      	ldrb	r3, [r7, #11]
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d156      	bne.n	8008eac <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008dfe:	f107 0314 	add.w	r3, r7, #20
 8008e02:	4619      	mov	r1, r3
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f7fd f96f 	bl	80060e8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01d      	beq.n	8008e50 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008e14:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008e18:	461a      	mov	r2, r3
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7fd f857 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008e28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10f      	bne.n	8008e50 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8008e30:	f107 031e 	add.w	r3, r7, #30
 8008e34:	461a      	mov	r2, r3
 8008e36:	2151      	movs	r1, #81	; 0x51
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f002 f82b 	bl	800ae94 <VL53L0X_RdWord>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008e44:	8bfb      	ldrh	r3, [r7, #30]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff feed 	bl	8008c26 <VL53L0X_decode_timeout>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008e50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d109      	bne.n	8008e6c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008e58:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	2101      	movs	r1, #1
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f7fd f835 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8008e66:	4603      	mov	r3, r0
 8008e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10f      	bne.n	8008e94 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8008e74:	f107 031c 	add.w	r3, r7, #28
 8008e78:	461a      	mov	r2, r3
 8008e7a:	2171      	movs	r1, #113	; 0x71
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f002 f809 	bl	800ae94 <VL53L0X_RdWord>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008e88:	8bbb      	ldrh	r3, [r7, #28]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff fecb 	bl	8008c26 <VL53L0X_decode_timeout>
 8008e90:	4603      	mov	r3, r0
 8008e92:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8008e94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008e9c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f7ff feff 	bl	8008ca8 <VL53L0X_calc_timeout_us>
 8008eaa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eb0:	601a      	str	r2, [r3, #0]

	return Status;
 8008eb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3730      	adds	r7, #48	; 0x30
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b08a      	sub	sp, #40	; 0x28
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	607a      	str	r2, [r7, #4]
 8008eca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <set_sequence_step_timeout+0x26>
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d002      	beq.n	8008ee4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008ede:	7afb      	ldrb	r3, [r7, #11]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d138      	bne.n	8008f56 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008ee4:	f107 031b 	add.w	r3, r7, #27
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2100      	movs	r1, #0
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7fc ffef 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d11a      	bne.n	8008f36 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008f00:	7efb      	ldrb	r3, [r7, #27]
 8008f02:	461a      	mov	r2, r3
 8008f04:	6879      	ldr	r1, [r7, #4]
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff fea4 	bl	8008c54 <VL53L0X_calc_timeout_mclks>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008f10:	8bbb      	ldrh	r3, [r7, #28]
 8008f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f16:	d903      	bls.n	8008f20 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8008f18:	23ff      	movs	r3, #255	; 0xff
 8008f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f1e:	e004      	b.n	8008f2a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008f20:	8bbb      	ldrh	r3, [r7, #28]
 8008f22:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8008f24:	3b01      	subs	r3, #1
 8008f26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008f36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f040 80ab 	bne.w	8009096 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8008f40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f44:	461a      	mov	r2, r3
 8008f46:	2146      	movs	r1, #70	; 0x46
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f001 fef7 	bl	800ad3c <VL53L0X_WrByte>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8008f54:	e09f      	b.n	8009096 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008f56:	7afb      	ldrb	r3, [r7, #11]
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d135      	bne.n	8008fc8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008f5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d11b      	bne.n	8008f9c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008f64:	f107 031b 	add.w	r3, r7, #27
 8008f68:	461a      	mov	r2, r3
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7fc ffaf 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008f78:	7efb      	ldrb	r3, [r7, #27]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	6879      	ldr	r1, [r7, #4]
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f7ff fe68 	bl	8008c54 <VL53L0X_calc_timeout_mclks>
 8008f84:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8008f86:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7ff fe1f 	bl	8008bce <VL53L0X_encode_timeout>
 8008f90:	4603      	mov	r3, r0
 8008f92:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f94:	8b3a      	ldrh	r2, [r7, #24]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008f9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d108      	bne.n	8008fb6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008fa4:	8b3b      	ldrh	r3, [r7, #24]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	2151      	movs	r1, #81	; 0x51
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f001 feea 	bl	800ad84 <VL53L0X_WrWord>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008fb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d16b      	bne.n	8009096 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8008fc6:	e066      	b.n	8009096 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008fc8:	7afb      	ldrb	r3, [r7, #11]
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d160      	bne.n	8009090 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008fce:	f107 0310 	add.w	r3, r7, #16
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7fd f887 	bl	80060e8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008fde:	7cfb      	ldrb	r3, [r7, #19]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d01d      	beq.n	8009020 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008fe4:	f107 031b 	add.w	r3, r7, #27
 8008fe8:	461a      	mov	r2, r3
 8008fea:	2100      	movs	r1, #0
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f7fc ff6f 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 8008ff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10f      	bne.n	8009020 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009000:	f107 0318 	add.w	r3, r7, #24
 8009004:	461a      	mov	r2, r3
 8009006:	2151      	movs	r1, #81	; 0x51
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f001 ff43 	bl	800ae94 <VL53L0X_RdWord>
 800900e:	4603      	mov	r3, r0
 8009010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009014:	8b3b      	ldrh	r3, [r7, #24]
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fe05 	bl	8008c26 <VL53L0X_decode_timeout>
 800901c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800901e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009020:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009024:	2b00      	cmp	r3, #0
 8009026:	d109      	bne.n	800903c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009028:	f107 031b 	add.w	r3, r7, #27
 800902c:	461a      	mov	r2, r3
 800902e:	2101      	movs	r1, #1
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f7fc ff4d 	bl	8005ed0 <VL53L0X_GetVcselPulsePeriod>
 8009036:	4603      	mov	r3, r0
 8009038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800903c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009040:	2b00      	cmp	r3, #0
 8009042:	d128      	bne.n	8009096 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009044:	7efb      	ldrb	r3, [r7, #27]
 8009046:	461a      	mov	r2, r3
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7ff fe02 	bl	8008c54 <VL53L0X_calc_timeout_mclks>
 8009050:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009054:	6a3a      	ldr	r2, [r7, #32]
 8009056:	4413      	add	r3, r2
 8009058:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800905a:	6a38      	ldr	r0, [r7, #32]
 800905c:	f7ff fdb7 	bl	8008bce <VL53L0X_encode_timeout>
 8009060:	4603      	mov	r3, r0
 8009062:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8009064:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009068:	2b00      	cmp	r3, #0
 800906a:	d108      	bne.n	800907e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800906c:	8bfb      	ldrh	r3, [r7, #30]
 800906e:	461a      	mov	r2, r3
 8009070:	2171      	movs	r1, #113	; 0x71
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f001 fe86 	bl	800ad84 <VL53L0X_WrWord>
 8009078:	4603      	mov	r3, r0
 800907a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800907e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009082:	2b00      	cmp	r3, #0
 8009084:	d107      	bne.n	8009096 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800908e:	e002      	b.n	8009096 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009090:	23fc      	movs	r3, #252	; 0xfc
 8009092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8009096:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800909a:	4618      	mov	r0, r3
 800909c:	3728      	adds	r7, #40	; 0x28
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b08a      	sub	sp, #40	; 0x28
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	70fb      	strb	r3, [r7, #3]
 80090ae:	4613      	mov	r3, r2
 80090b0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090b2:	2300      	movs	r3, #0
 80090b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80090b8:	230c      	movs	r3, #12
 80090ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80090be:	2312      	movs	r3, #18
 80090c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80090c4:	2308      	movs	r3, #8
 80090c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80090ca:	230e      	movs	r3, #14
 80090cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80090d4:	78bb      	ldrb	r3, [r7, #2]
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80090e0:	23fc      	movs	r3, #252	; 0xfc
 80090e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090e6:	e020      	b.n	800912a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10d      	bne.n	800910a <VL53L0X_set_vcsel_pulse_period+0x68>
 80090ee:	78ba      	ldrb	r2, [r7, #2]
 80090f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d304      	bcc.n	8009102 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80090f8:	78ba      	ldrb	r2, [r7, #2]
 80090fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80090fe:	429a      	cmp	r2, r3
 8009100:	d903      	bls.n	800910a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009102:	23fc      	movs	r3, #252	; 0xfc
 8009104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009108:	e00f      	b.n	800912a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d10c      	bne.n	800912a <VL53L0X_set_vcsel_pulse_period+0x88>
 8009110:	78ba      	ldrb	r2, [r7, #2]
 8009112:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009116:	429a      	cmp	r2, r3
 8009118:	d304      	bcc.n	8009124 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800911a:	78ba      	ldrb	r2, [r7, #2]
 800911c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009120:	429a      	cmp	r2, r3
 8009122:	d902      	bls.n	800912a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009124:	23fc      	movs	r3, #252	; 0xfc
 8009126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800912a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8009132:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009136:	e239      	b.n	80095ac <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009138:	78fb      	ldrb	r3, [r7, #3]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d150      	bne.n	80091e0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800913e:	78bb      	ldrb	r3, [r7, #2]
 8009140:	2b0c      	cmp	r3, #12
 8009142:	d110      	bne.n	8009166 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009144:	2218      	movs	r2, #24
 8009146:	2157      	movs	r1, #87	; 0x57
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 fdf7 	bl	800ad3c <VL53L0X_WrByte>
 800914e:	4603      	mov	r3, r0
 8009150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009154:	2208      	movs	r2, #8
 8009156:	2156      	movs	r1, #86	; 0x56
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 fdef 	bl	800ad3c <VL53L0X_WrByte>
 800915e:	4603      	mov	r3, r0
 8009160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009164:	e17f      	b.n	8009466 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009166:	78bb      	ldrb	r3, [r7, #2]
 8009168:	2b0e      	cmp	r3, #14
 800916a:	d110      	bne.n	800918e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800916c:	2230      	movs	r2, #48	; 0x30
 800916e:	2157      	movs	r1, #87	; 0x57
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f001 fde3 	bl	800ad3c <VL53L0X_WrByte>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800917c:	2208      	movs	r2, #8
 800917e:	2156      	movs	r1, #86	; 0x56
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 fddb 	bl	800ad3c <VL53L0X_WrByte>
 8009186:	4603      	mov	r3, r0
 8009188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800918c:	e16b      	b.n	8009466 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800918e:	78bb      	ldrb	r3, [r7, #2]
 8009190:	2b10      	cmp	r3, #16
 8009192:	d110      	bne.n	80091b6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009194:	2240      	movs	r2, #64	; 0x40
 8009196:	2157      	movs	r1, #87	; 0x57
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 fdcf 	bl	800ad3c <VL53L0X_WrByte>
 800919e:	4603      	mov	r3, r0
 80091a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80091a4:	2208      	movs	r2, #8
 80091a6:	2156      	movs	r1, #86	; 0x56
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 fdc7 	bl	800ad3c <VL53L0X_WrByte>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80091b4:	e157      	b.n	8009466 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80091b6:	78bb      	ldrb	r3, [r7, #2]
 80091b8:	2b12      	cmp	r3, #18
 80091ba:	f040 8154 	bne.w	8009466 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80091be:	2250      	movs	r2, #80	; 0x50
 80091c0:	2157      	movs	r1, #87	; 0x57
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fdba 	bl	800ad3c <VL53L0X_WrByte>
 80091c8:	4603      	mov	r3, r0
 80091ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80091ce:	2208      	movs	r2, #8
 80091d0:	2156      	movs	r1, #86	; 0x56
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 fdb2 	bl	800ad3c <VL53L0X_WrByte>
 80091d8:	4603      	mov	r3, r0
 80091da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80091de:	e142      	b.n	8009466 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	f040 813f 	bne.w	8009466 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80091e8:	78bb      	ldrb	r3, [r7, #2]
 80091ea:	2b08      	cmp	r3, #8
 80091ec:	d14c      	bne.n	8009288 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80091ee:	2210      	movs	r2, #16
 80091f0:	2148      	movs	r1, #72	; 0x48
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f001 fda2 	bl	800ad3c <VL53L0X_WrByte>
 80091f8:	4603      	mov	r3, r0
 80091fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80091fe:	2208      	movs	r2, #8
 8009200:	2147      	movs	r1, #71	; 0x47
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 fd9a 	bl	800ad3c <VL53L0X_WrByte>
 8009208:	4603      	mov	r3, r0
 800920a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800920e:	2202      	movs	r2, #2
 8009210:	2132      	movs	r1, #50	; 0x32
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f001 fd92 	bl	800ad3c <VL53L0X_WrByte>
 8009218:	4603      	mov	r3, r0
 800921a:	461a      	mov	r2, r3
 800921c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009220:	4313      	orrs	r3, r2
 8009222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009226:	220c      	movs	r2, #12
 8009228:	2130      	movs	r1, #48	; 0x30
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f001 fd86 	bl	800ad3c <VL53L0X_WrByte>
 8009230:	4603      	mov	r3, r0
 8009232:	461a      	mov	r2, r3
 8009234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009238:	4313      	orrs	r3, r2
 800923a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800923e:	2201      	movs	r2, #1
 8009240:	21ff      	movs	r1, #255	; 0xff
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 fd7a 	bl	800ad3c <VL53L0X_WrByte>
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009250:	4313      	orrs	r3, r2
 8009252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009256:	2230      	movs	r2, #48	; 0x30
 8009258:	2130      	movs	r1, #48	; 0x30
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f001 fd6e 	bl	800ad3c <VL53L0X_WrByte>
 8009260:	4603      	mov	r3, r0
 8009262:	461a      	mov	r2, r3
 8009264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009268:	4313      	orrs	r3, r2
 800926a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800926e:	2200      	movs	r2, #0
 8009270:	21ff      	movs	r1, #255	; 0xff
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 fd62 	bl	800ad3c <VL53L0X_WrByte>
 8009278:	4603      	mov	r3, r0
 800927a:	461a      	mov	r2, r3
 800927c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009280:	4313      	orrs	r3, r2
 8009282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009286:	e0ee      	b.n	8009466 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009288:	78bb      	ldrb	r3, [r7, #2]
 800928a:	2b0a      	cmp	r3, #10
 800928c:	d14c      	bne.n	8009328 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800928e:	2228      	movs	r2, #40	; 0x28
 8009290:	2148      	movs	r1, #72	; 0x48
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f001 fd52 	bl	800ad3c <VL53L0X_WrByte>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800929e:	2208      	movs	r2, #8
 80092a0:	2147      	movs	r1, #71	; 0x47
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 fd4a 	bl	800ad3c <VL53L0X_WrByte>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80092ae:	2203      	movs	r2, #3
 80092b0:	2132      	movs	r1, #50	; 0x32
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f001 fd42 	bl	800ad3c <VL53L0X_WrByte>
 80092b8:	4603      	mov	r3, r0
 80092ba:	461a      	mov	r2, r3
 80092bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092c0:	4313      	orrs	r3, r2
 80092c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80092c6:	2209      	movs	r2, #9
 80092c8:	2130      	movs	r1, #48	; 0x30
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 fd36 	bl	800ad3c <VL53L0X_WrByte>
 80092d0:	4603      	mov	r3, r0
 80092d2:	461a      	mov	r2, r3
 80092d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092d8:	4313      	orrs	r3, r2
 80092da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80092de:	2201      	movs	r2, #1
 80092e0:	21ff      	movs	r1, #255	; 0xff
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 fd2a 	bl	800ad3c <VL53L0X_WrByte>
 80092e8:	4603      	mov	r3, r0
 80092ea:	461a      	mov	r2, r3
 80092ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092f0:	4313      	orrs	r3, r2
 80092f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80092f6:	2220      	movs	r2, #32
 80092f8:	2130      	movs	r1, #48	; 0x30
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 fd1e 	bl	800ad3c <VL53L0X_WrByte>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009308:	4313      	orrs	r3, r2
 800930a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800930e:	2200      	movs	r2, #0
 8009310:	21ff      	movs	r1, #255	; 0xff
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 fd12 	bl	800ad3c <VL53L0X_WrByte>
 8009318:	4603      	mov	r3, r0
 800931a:	461a      	mov	r2, r3
 800931c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009320:	4313      	orrs	r3, r2
 8009322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009326:	e09e      	b.n	8009466 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009328:	78bb      	ldrb	r3, [r7, #2]
 800932a:	2b0c      	cmp	r3, #12
 800932c:	d14c      	bne.n	80093c8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800932e:	2238      	movs	r2, #56	; 0x38
 8009330:	2148      	movs	r1, #72	; 0x48
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 fd02 	bl	800ad3c <VL53L0X_WrByte>
 8009338:	4603      	mov	r3, r0
 800933a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800933e:	2208      	movs	r2, #8
 8009340:	2147      	movs	r1, #71	; 0x47
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 fcfa 	bl	800ad3c <VL53L0X_WrByte>
 8009348:	4603      	mov	r3, r0
 800934a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800934e:	2203      	movs	r2, #3
 8009350:	2132      	movs	r1, #50	; 0x32
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fcf2 	bl	800ad3c <VL53L0X_WrByte>
 8009358:	4603      	mov	r3, r0
 800935a:	461a      	mov	r2, r3
 800935c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009360:	4313      	orrs	r3, r2
 8009362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009366:	2208      	movs	r2, #8
 8009368:	2130      	movs	r1, #48	; 0x30
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fce6 	bl	800ad3c <VL53L0X_WrByte>
 8009370:	4603      	mov	r3, r0
 8009372:	461a      	mov	r2, r3
 8009374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009378:	4313      	orrs	r3, r2
 800937a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800937e:	2201      	movs	r2, #1
 8009380:	21ff      	movs	r1, #255	; 0xff
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 fcda 	bl	800ad3c <VL53L0X_WrByte>
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009390:	4313      	orrs	r3, r2
 8009392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009396:	2220      	movs	r2, #32
 8009398:	2130      	movs	r1, #48	; 0x30
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 fcce 	bl	800ad3c <VL53L0X_WrByte>
 80093a0:	4603      	mov	r3, r0
 80093a2:	461a      	mov	r2, r3
 80093a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093a8:	4313      	orrs	r3, r2
 80093aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80093ae:	2200      	movs	r2, #0
 80093b0:	21ff      	movs	r1, #255	; 0xff
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 fcc2 	bl	800ad3c <VL53L0X_WrByte>
 80093b8:	4603      	mov	r3, r0
 80093ba:	461a      	mov	r2, r3
 80093bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093c6:	e04e      	b.n	8009466 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80093c8:	78bb      	ldrb	r3, [r7, #2]
 80093ca:	2b0e      	cmp	r3, #14
 80093cc:	d14b      	bne.n	8009466 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80093ce:	2248      	movs	r2, #72	; 0x48
 80093d0:	2148      	movs	r1, #72	; 0x48
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f001 fcb2 	bl	800ad3c <VL53L0X_WrByte>
 80093d8:	4603      	mov	r3, r0
 80093da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80093de:	2208      	movs	r2, #8
 80093e0:	2147      	movs	r1, #71	; 0x47
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 fcaa 	bl	800ad3c <VL53L0X_WrByte>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80093ee:	2203      	movs	r2, #3
 80093f0:	2132      	movs	r1, #50	; 0x32
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f001 fca2 	bl	800ad3c <VL53L0X_WrByte>
 80093f8:	4603      	mov	r3, r0
 80093fa:	461a      	mov	r2, r3
 80093fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009400:	4313      	orrs	r3, r2
 8009402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009406:	2207      	movs	r2, #7
 8009408:	2130      	movs	r1, #48	; 0x30
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f001 fc96 	bl	800ad3c <VL53L0X_WrByte>
 8009410:	4603      	mov	r3, r0
 8009412:	461a      	mov	r2, r3
 8009414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009418:	4313      	orrs	r3, r2
 800941a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800941e:	2201      	movs	r2, #1
 8009420:	21ff      	movs	r1, #255	; 0xff
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f001 fc8a 	bl	800ad3c <VL53L0X_WrByte>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009430:	4313      	orrs	r3, r2
 8009432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009436:	2220      	movs	r2, #32
 8009438:	2130      	movs	r1, #48	; 0x30
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 fc7e 	bl	800ad3c <VL53L0X_WrByte>
 8009440:	4603      	mov	r3, r0
 8009442:	461a      	mov	r2, r3
 8009444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009448:	4313      	orrs	r3, r2
 800944a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800944e:	2200      	movs	r2, #0
 8009450:	21ff      	movs	r1, #255	; 0xff
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f001 fc72 	bl	800ad3c <VL53L0X_WrByte>
 8009458:	4603      	mov	r3, r0
 800945a:	461a      	mov	r2, r3
 800945c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009460:	4313      	orrs	r3, r2
 8009462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009466:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800946a:	2b00      	cmp	r3, #0
 800946c:	d17f      	bne.n	800956e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800946e:	78bb      	ldrb	r3, [r7, #2]
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fe36 	bl	80080e2 <VL53L0X_encode_vcsel_period>
 8009476:	4603      	mov	r3, r0
 8009478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8009482:	2b01      	cmp	r3, #1
 8009484:	d045      	beq.n	8009512 <VL53L0X_set_vcsel_pulse_period+0x470>
 8009486:	e06e      	b.n	8009566 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009488:	f107 0314 	add.w	r3, r7, #20
 800948c:	461a      	mov	r2, r3
 800948e:	2103      	movs	r1, #3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff fc33 	bl	8008cfc <get_sequence_step_timeout>
 8009496:	4603      	mov	r3, r0
 8009498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800949c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d109      	bne.n	80094b8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80094a4:	f107 0310 	add.w	r3, r7, #16
 80094a8:	461a      	mov	r2, r3
 80094aa:	2102      	movs	r1, #2
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff fc25 	bl	8008cfc <get_sequence_step_timeout>
 80094b2:	4603      	mov	r3, r0
 80094b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80094b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d109      	bne.n	80094d4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80094c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80094c4:	461a      	mov	r2, r3
 80094c6:	2150      	movs	r1, #80	; 0x50
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 fc37 	bl	800ad3c <VL53L0X_WrByte>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80094d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d108      	bne.n	80094ee <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	461a      	mov	r2, r3
 80094e0:	2103      	movs	r1, #3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff fceb 	bl	8008ebe <set_sequence_step_timeout>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80094ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d108      	bne.n	8009508 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	461a      	mov	r2, r3
 80094fa:	2102      	movs	r1, #2
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7ff fcde 	bl	8008ebe <set_sequence_step_timeout>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	78ba      	ldrb	r2, [r7, #2]
 800950c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009510:	e02e      	b.n	8009570 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009512:	f107 0318 	add.w	r3, r7, #24
 8009516:	461a      	mov	r2, r3
 8009518:	2104      	movs	r1, #4
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff fbee 	bl	8008cfc <get_sequence_step_timeout>
 8009520:	4603      	mov	r3, r0
 8009522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009526:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800952a:	2b00      	cmp	r3, #0
 800952c:	d109      	bne.n	8009542 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800952e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009532:	461a      	mov	r2, r3
 8009534:	2170      	movs	r1, #112	; 0x70
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 fc00 	bl	800ad3c <VL53L0X_WrByte>
 800953c:	4603      	mov	r3, r0
 800953e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009542:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009546:	2b00      	cmp	r3, #0
 8009548:	d108      	bne.n	800955c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	461a      	mov	r2, r3
 800954e:	2104      	movs	r1, #4
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff fcb4 	bl	8008ebe <set_sequence_step_timeout>
 8009556:	4603      	mov	r3, r0
 8009558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	78ba      	ldrb	r2, [r7, #2]
 8009560:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009564:	e004      	b.n	8009570 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009566:	23fc      	movs	r3, #252	; 0xfc
 8009568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800956c:	e000      	b.n	8009570 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800956e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8009570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009574:	2b00      	cmp	r3, #0
 8009576:	d109      	bne.n	800958c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800957e:	69f9      	ldr	r1, [r7, #28]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7fc fc67 	bl	8005e54 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8009586:	4603      	mov	r3, r0
 8009588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800958c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8009594:	f107 010f 	add.w	r1, r7, #15
 8009598:	2301      	movs	r3, #1
 800959a:	2200      	movs	r2, #0
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7fe fcbb 	bl	8007f18 <VL53L0X_perform_phase_calibration>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80095a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3728      	adds	r7, #40	; 0x28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	460b      	mov	r3, r1
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095c2:	2300      	movs	r3, #0
 80095c4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80095c6:	7afb      	ldrb	r3, [r7, #11]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d00a      	beq.n	80095e6 <VL53L0X_get_vcsel_pulse_period+0x32>
 80095d0:	e013      	b.n	80095fa <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80095d2:	f107 0316 	add.w	r3, r7, #22
 80095d6:	461a      	mov	r2, r3
 80095d8:	2150      	movs	r1, #80	; 0x50
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f001 fc30 	bl	800ae40 <VL53L0X_RdByte>
 80095e0:	4603      	mov	r3, r0
 80095e2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80095e4:	e00b      	b.n	80095fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80095e6:	f107 0316 	add.w	r3, r7, #22
 80095ea:	461a      	mov	r2, r3
 80095ec:	2170      	movs	r1, #112	; 0x70
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f001 fc26 	bl	800ae40 <VL53L0X_RdByte>
 80095f4:	4603      	mov	r3, r0
 80095f6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80095f8:	e001      	b.n	80095fe <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80095fa:	23fc      	movs	r3, #252	; 0xfc
 80095fc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80095fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d107      	bne.n	8009616 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009606:	7dbb      	ldrb	r3, [r7, #22]
 8009608:	4618      	mov	r0, r3
 800960a:	f7fe fd57 	bl	80080bc <VL53L0X_decode_vcsel_period>
 800960e:	4603      	mov	r3, r0
 8009610:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	701a      	strb	r2, [r3, #0]

	return Status;
 8009616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b090      	sub	sp, #64	; 0x40
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800962c:	2300      	movs	r3, #0
 800962e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009632:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009636:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009638:	f240 7376 	movw	r3, #1910	; 0x776
 800963c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 800963e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009642:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009644:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009648:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 800964a:	f240 234e 	movw	r3, #590	; 0x24e
 800964e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 8009650:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009654:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009656:	f44f 7325 	mov.w	r3, #660	; 0x294
 800965a:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800965c:	f240 2326 	movw	r3, #550	; 0x226
 8009660:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009662:	2300      	movs	r3, #0
 8009664:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800966a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	1ad3      	subs	r3, r2, r3
 8009674:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009676:	f107 0310 	add.w	r3, r7, #16
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7fc fd33 	bl	80060e8 <VL53L0X_GetSequenceStepEnables>
 8009682:	4603      	mov	r3, r0
 8009684:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 8009688:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800968c:	2b00      	cmp	r3, #0
 800968e:	d15b      	bne.n	8009748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 8009690:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 8009692:	2b00      	cmp	r3, #0
 8009694:	d105      	bne.n	80096a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009696:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 8009698:	2b00      	cmp	r3, #0
 800969a:	d102      	bne.n	80096a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 800969c:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d052      	beq.n	8009748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80096a2:	f107 030c 	add.w	r3, r7, #12
 80096a6:	461a      	mov	r2, r3
 80096a8:	2102      	movs	r1, #2
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7ff fb26 	bl	8008cfc <get_sequence_step_timeout>
 80096b0:	4603      	mov	r3, r0
 80096b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 80096b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 80096be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096c2:	e07d      	b.n	80097c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80096c4:	7c3b      	ldrb	r3, [r7, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00f      	beq.n	80096ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80096ca:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80096cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ce:	4413      	add	r3, r2
 80096d0:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d204      	bcs.n	80096e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80096da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80096e2:	e002      	b.n	80096ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096e4:	23fc      	movs	r3, #252	; 0xfc
 80096e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80096ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 80096f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80096f6:	e063      	b.n	80097c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80096f8:	7cbb      	ldrb	r3, [r7, #18]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d011      	beq.n	8009722 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	4413      	add	r3, r2
 8009704:	005b      	lsls	r3, r3, #1
 8009706:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009708:	69ba      	ldr	r2, [r7, #24]
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	429a      	cmp	r2, r3
 800970e:	d204      	bcs.n	800971a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	63bb      	str	r3, [r7, #56]	; 0x38
 8009718:	e016      	b.n	8009748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800971a:	23fc      	movs	r3, #252	; 0xfc
 800971c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009720:	e012      	b.n	8009748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009722:	7c7b      	ldrb	r3, [r7, #17]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00f      	beq.n	8009748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800972c:	4413      	add	r3, r2
 800972e:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009730:	69ba      	ldr	r2, [r7, #24]
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	429a      	cmp	r2, r3
 8009736:	d204      	bcs.n	8009742 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009740:	e002      	b.n	8009748 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009742:	23fc      	movs	r3, #252	; 0xfc
 8009744:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009748:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 8009750:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009754:	e034      	b.n	80097c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009756:	7cfb      	ldrb	r3, [r7, #19]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d019      	beq.n	8009790 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800975c:	f107 0308 	add.w	r3, r7, #8
 8009760:	461a      	mov	r2, r3
 8009762:	2103      	movs	r1, #3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff fac9 	bl	8008cfc <get_sequence_step_timeout>
 800976a:	4603      	mov	r3, r0
 800976c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	6a3a      	ldr	r2, [r7, #32]
 8009774:	4413      	add	r3, r2
 8009776:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	429a      	cmp	r2, r3
 800977e:	d204      	bcs.n	800978a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	63bb      	str	r3, [r7, #56]	; 0x38
 8009788:	e002      	b.n	8009790 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800978a:	23fc      	movs	r3, #252	; 0xfc
 800978c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009790:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009794:	2b00      	cmp	r3, #0
 8009796:	d111      	bne.n	80097bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009798:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00e      	beq.n	80097bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 800979e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80097a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a8:	2104      	movs	r1, #4
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff fb87 	bl	8008ebe <set_sequence_step_timeout>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80097bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3740      	adds	r7, #64	; 0x40
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b090      	sub	sp, #64	; 0x40
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097d2:	2300      	movs	r3, #0
 80097d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80097d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80097dc:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80097de:	f240 7376 	movw	r3, #1910	; 0x776
 80097e2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80097e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80097e8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80097ea:	f44f 7325 	mov.w	r3, #660	; 0x294
 80097ee:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80097f0:	f240 234e 	movw	r3, #590	; 0x24e
 80097f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80097f6:	f240 23b2 	movw	r3, #690	; 0x2b2
 80097fa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80097fc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009800:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009802:	f240 2326 	movw	r3, #550	; 0x226
 8009806:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009808:	2300      	movs	r3, #0
 800980a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800980c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800980e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009810:	441a      	add	r2, r3
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009816:	f107 0318 	add.w	r3, r7, #24
 800981a:	4619      	mov	r1, r3
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7fc fc63 	bl	80060e8 <VL53L0X_GetSequenceStepEnables>
 8009822:	4603      	mov	r3, r0
 8009824:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8009828:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009830:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009834:	e075      	b.n	8009922 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009836:	7e3b      	ldrb	r3, [r7, #24]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d105      	bne.n	8009848 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800983c:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800983e:	2b00      	cmp	r3, #0
 8009840:	d102      	bne.n	8009848 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009842:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009844:	2b00      	cmp	r3, #0
 8009846:	d030      	beq.n	80098aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009848:	f107 0310 	add.w	r3, r7, #16
 800984c:	461a      	mov	r2, r3
 800984e:	2102      	movs	r1, #2
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff fa53 	bl	8008cfc <get_sequence_step_timeout>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800985c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009860:	2b00      	cmp	r3, #0
 8009862:	d122      	bne.n	80098aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009864:	7e3b      	ldrb	r3, [r7, #24]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800986e:	6939      	ldr	r1, [r7, #16]
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009874:	441a      	add	r2, r3
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800987a:	7ebb      	ldrb	r3, [r7, #26]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d009      	beq.n	8009894 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009884:	6939      	ldr	r1, [r7, #16]
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	440b      	add	r3, r1
 800988a:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800988c:	441a      	add	r2, r3
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	e00a      	b.n	80098aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009894:	7e7b      	ldrb	r3, [r7, #25]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d007      	beq.n	80098aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800989e:	6939      	ldr	r1, [r7, #16]
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80098a4:	441a      	add	r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80098aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d114      	bne.n	80098dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80098b2:	7efb      	ldrb	r3, [r7, #27]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d011      	beq.n	80098dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80098b8:	f107 030c 	add.w	r3, r7, #12
 80098bc:	461a      	mov	r2, r3
 80098be:	2103      	movs	r1, #3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff fa1b 	bl	8008cfc <get_sequence_step_timeout>
 80098c6:	4603      	mov	r3, r0
 80098c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80098d0:	68f9      	ldr	r1, [r7, #12]
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80098d6:	441a      	add	r2, r3
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80098dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d114      	bne.n	800990e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80098e4:	7f3b      	ldrb	r3, [r7, #28]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d011      	beq.n	800990e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80098ea:	f107 0314 	add.w	r3, r7, #20
 80098ee:	461a      	mov	r2, r3
 80098f0:	2104      	movs	r1, #4
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff fa02 	bl	8008cfc <get_sequence_step_timeout>
 80098f8:	4603      	mov	r3, r0
 80098fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009902:	6979      	ldr	r1, [r7, #20]
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009908:	441a      	add	r2, r3
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800990e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009912:	2b00      	cmp	r3, #0
 8009914:	d103      	bne.n	800991e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800991e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009922:	4618      	mov	r0, r3
 8009924:	3740      	adds	r7, #64	; 0x40
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
	...

0800992c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009936:	2300      	movs	r3, #0
 8009938:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800993e:	e0c6      	b.n	8009ace <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	4413      	add	r3, r2
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	74fb      	strb	r3, [r7, #19]
		Index++;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	3301      	adds	r3, #1
 800994e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009950:	7cfb      	ldrb	r3, [r7, #19]
 8009952:	2bff      	cmp	r3, #255	; 0xff
 8009954:	f040 808d 	bne.w	8009a72 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	4413      	add	r3, r2
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	747b      	strb	r3, [r7, #17]
			Index++;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	3301      	adds	r3, #1
 8009966:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009968:	7c7b      	ldrb	r3, [r7, #17]
 800996a:	2b03      	cmp	r3, #3
 800996c:	d87e      	bhi.n	8009a6c <VL53L0X_load_tuning_settings+0x140>
 800996e:	a201      	add	r2, pc, #4	; (adr r2, 8009974 <VL53L0X_load_tuning_settings+0x48>)
 8009970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009974:	08009985 	.word	0x08009985
 8009978:	080099bf 	.word	0x080099bf
 800997c:	080099f9 	.word	0x080099f9
 8009980:	08009a33 	.word	0x08009a33
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	4413      	add	r3, r2
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	743b      	strb	r3, [r7, #16]
				Index++;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	3301      	adds	r3, #1
 8009992:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	4413      	add	r3, r2
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	3301      	adds	r3, #1
 80099a2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80099a4:	7c3b      	ldrb	r3, [r7, #16]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	021b      	lsls	r3, r3, #8
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	4413      	add	r3, r2
 80099b2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	89ba      	ldrh	r2, [r7, #12]
 80099b8:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 80099bc:	e087      	b.n	8009ace <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	4413      	add	r3, r2
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	743b      	strb	r3, [r7, #16]
				Index++;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	3301      	adds	r3, #1
 80099cc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	683a      	ldr	r2, [r7, #0]
 80099d2:	4413      	add	r3, r2
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	3301      	adds	r3, #1
 80099dc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80099de:	7c3b      	ldrb	r3, [r7, #16]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	021b      	lsls	r3, r3, #8
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	4413      	add	r3, r2
 80099ec:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	89ba      	ldrh	r2, [r7, #12]
 80099f2:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 80099f6:	e06a      	b.n	8009ace <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	4413      	add	r3, r2
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	743b      	strb	r3, [r7, #16]
				Index++;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	3301      	adds	r3, #1
 8009a06:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	3301      	adds	r3, #1
 8009a16:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009a18:	7c3b      	ldrb	r3, [r7, #16]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	021b      	lsls	r3, r3, #8
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	4413      	add	r3, r2
 8009a26:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	89ba      	ldrh	r2, [r7, #12]
 8009a2c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 8009a30:	e04d      	b.n	8009ace <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	4413      	add	r3, r2
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	743b      	strb	r3, [r7, #16]
				Index++;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	4413      	add	r3, r2
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009a52:	7c3b      	ldrb	r3, [r7, #16]
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	021b      	lsls	r3, r3, #8
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	4413      	add	r3, r2
 8009a60:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	89ba      	ldrh	r2, [r7, #12]
 8009a66:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 8009a6a:	e030      	b.n	8009ace <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a6c:	23fc      	movs	r3, #252	; 0xfc
 8009a6e:	77fb      	strb	r3, [r7, #31]
 8009a70:	e02d      	b.n	8009ace <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8009a72:	7cfb      	ldrb	r3, [r7, #19]
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d828      	bhi.n	8009aca <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	3301      	adds	r3, #1
 8009a86:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009a88:	2300      	movs	r3, #0
 8009a8a:	61bb      	str	r3, [r7, #24]
 8009a8c:	e00f      	b.n	8009aae <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	4413      	add	r3, r2
 8009a94:	7819      	ldrb	r1, [r3, #0]
 8009a96:	f107 0208 	add.w	r2, r7, #8
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	460a      	mov	r2, r1
 8009aa0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	61bb      	str	r3, [r7, #24]
 8009aae:	7cfb      	ldrb	r3, [r7, #19]
 8009ab0:	69ba      	ldr	r2, [r7, #24]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	dbeb      	blt.n	8009a8e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009ab6:	7cfb      	ldrb	r3, [r7, #19]
 8009ab8:	f107 0208 	add.w	r2, r7, #8
 8009abc:	7cb9      	ldrb	r1, [r7, #18]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f001 f8e0 	bl	800ac84 <VL53L0X_WriteMulti>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	77fb      	strb	r3, [r7, #31]
 8009ac8:	e001      	b.n	8009ace <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009aca:	23fc      	movs	r3, #252	; 0xfc
 8009acc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d004      	beq.n	8009ae4 <VL53L0X_load_tuning_settings+0x1b8>
 8009ada:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f43f af2e 	beq.w	8009940 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ae4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3720      	adds	r7, #32
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009afc:	2300      	movs	r3, #0
 8009afe:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009b06:	f107 0313 	add.w	r3, r7, #19
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f7fc fb77 	bl	8006200 <VL53L0X_GetXTalkCompensationEnable>
 8009b12:	4603      	mov	r3, r0
 8009b14:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009b16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d111      	bne.n	8009b42 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009b1e:	7cfb      	ldrb	r3, [r7, #19]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00e      	beq.n	8009b42 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	8a9b      	ldrh	r3, [r3, #20]
 8009b2e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	fb02 f303 	mul.w	r3, r2, r3
 8009b36:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	3380      	adds	r3, #128	; 0x80
 8009b3c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3720      	adds	r7, #32
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b086      	sub	sp, #24
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009b66:	f107 0310 	add.w	r3, r7, #16
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	68b9      	ldr	r1, [r7, #8]
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7ff ffbe 	bl	8009af0 <VL53L0X_get_total_xtalk_rate>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d105      	bne.n	8009b8c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	441a      	add	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	601a      	str	r2, [r3, #0]

	return Status;
 8009b8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 8009b98:	b084      	sub	sp, #16
 8009b9a:	b480      	push	{r7}
 8009b9c:	b085      	sub	sp, #20
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	f107 0c18 	add.w	ip, r7, #24
 8009ba4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 8009bb8:	2300      	movs	r3, #0
 8009bba:	607b      	str	r3, [r7, #4]
 8009bbc:	e00d      	b.n	8009bda <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f107 0218 	add.w	r2, r7, #24
 8009bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d802      	bhi.n	8009bd4 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	60bb      	str	r3, [r7, #8]
			break;
 8009bd2:	e006      	b.n	8009be2 <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	607b      	str	r3, [r7, #4]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d8ed      	bhi.n	8009bbe <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 8009be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d105      	bne.n	8009bf6 <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 8009bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bec:	3b01      	subs	r3, #1
 8009bee:	60bb      	str	r3, [r7, #8]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	e008      	b.n	8009c08 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e002      	b.n	8009c08 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c0c:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c12:	601a      	str	r2, [r3, #0]

	return Status;
 8009c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	b004      	add	sp, #16
 8009c24:	4770      	bx	lr

08009c26 <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 8009c26:	b5b0      	push	{r4, r5, r7, lr}
 8009c28:	b0ba      	sub	sp, #232	; 0xe8
 8009c2a:	af0e      	add	r7, sp, #56	; 0x38
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c32:	2300      	movs	r3, #0
 8009c34:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009c40:	f107 031c 	add.w	r3, r7, #28
 8009c44:	4619      	mov	r1, r3
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7fb fff0 	bl	8005c2c <VL53L0X_GetDeviceParameters>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 8009c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d803      	bhi.n	8009c62 <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 8009c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c60:	e07c      	b.n	8009d5c <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 8009c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d304      	bcc.n	8009c74 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 8009c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c72:	e073      	b.n	8009d5c <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 8009c74:	f107 0314 	add.w	r3, r7, #20
 8009c78:	930d      	str	r3, [sp, #52]	; 0x34
 8009c7a:	f107 0318 	add.w	r3, r7, #24
 8009c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c84:	2307      	movs	r3, #7
 8009c86:	930a      	str	r3, [sp, #40]	; 0x28
 8009c88:	466d      	mov	r5, sp
 8009c8a:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8009c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009c96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009c9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8009c9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009ca4:	f7ff ff78 	bl	8009b98 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 8009ca8:	69ba      	ldr	r2, [r7, #24]
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d109      	bne.n	8009cc4 <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	3314      	adds	r3, #20
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	33b0      	adds	r3, #176	; 0xb0
 8009cb8:	443b      	add	r3, r7
 8009cba:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8009cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cc2:	e04b      	b.n	8009d5c <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	330e      	adds	r3, #14
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	33b0      	adds	r3, #176	; 0xb0
 8009ccc:	443b      	add	r3, r7
 8009cce:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8009cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	330e      	adds	r3, #14
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	33b0      	adds	r3, #176	; 0xb0
 8009cde:	443b      	add	r3, r7
 8009ce0:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8009ce4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	3314      	adds	r3, #20
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	33b0      	adds	r3, #176	; 0xb0
 8009cf0:	443b      	add	r3, r7
 8009cf2:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8009cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	3314      	adds	r3, #20
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	33b0      	adds	r3, #176	; 0xb0
 8009d02:	443b      	add	r3, r7
 8009d04:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8009d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 8009d0c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009d10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d01d      	beq.n	8009d54 <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 8009d18:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d20:	1ad2      	subs	r2, r2, r3
 8009d22:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009d26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d2a:	1acb      	subs	r3, r1, r3
 8009d2c:	0a1b      	lsrs	r3, r3, #8
 8009d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 8009d36:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 8009d3e:	0a1b      	lsrs	r3, r3, #8
 8009d40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d44:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 8009d48:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d52:	e003      	b.n	8009d5c <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 8009d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 8009d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d60:	0c1a      	lsrs	r2, r3, #16
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009d66:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	37b0      	adds	r7, #176	; 0xb0
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009d74 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b0b0      	sub	sp, #192	; 0xc0
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8009d80:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009d88:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009d8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 8009d90:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8009d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009d98:	f241 235c 	movw	r3, #4700	; 0x125c
 8009d9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8009da0:	4b98      	ldr	r3, [pc, #608]	; (800a004 <VL53L0X_calc_sigma_estimate+0x290>)
 8009da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009da6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8009dae:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8009db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8009dbe:	4b92      	ldr	r3, [pc, #584]	; (800a008 <VL53L0X_calc_sigma_estimate+0x294>)
 8009dc0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8009dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dc6:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8009dc8:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009dcc:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 8009dce:	f240 6377 	movw	r3, #1655	; 0x677
 8009dd2:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009de8:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8009dec:	0c1b      	lsrs	r3, r3, #16
 8009dee:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 8009df0:	f107 0314 	add.w	r3, r7, #20
 8009df4:	461a      	mov	r2, r3
 8009df6:	68b9      	ldr	r1, [r7, #8]
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7ff fea8 	bl	8009b4e <VL53L0X_get_total_signal_rate>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009e04:	f107 0318 	add.w	r3, r7, #24
 8009e08:	461a      	mov	r2, r3
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f7ff fe6f 	bl	8009af0 <VL53L0X_get_total_xtalk_rate>
 8009e12:	4603      	mov	r3, r0
 8009e14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e1e:	fb02 f303 	mul.w	r3, r2, r3
 8009e22:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009e2a:	0c1b      	lsrs	r3, r3, #16
 8009e2c:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e34:	fb02 f303 	mul.w	r3, r2, r3
 8009e38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009e3c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d902      	bls.n	8009e4c <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8009e4c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d160      	bne.n	8009f16 <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8009e64:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009e68:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f7fe feee 	bl	8008c54 <VL53L0X_calc_timeout_mclks>
 8009e78:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8009e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8009e8a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009e8e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009e92:	461a      	mov	r2, r3
 8009e94:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7fe fedb 	bl	8008c54 <VL53L0X_calc_timeout_mclks>
 8009e9e:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 8009ea6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8009eaa:	2b08      	cmp	r3, #8
 8009eac:	d102      	bne.n	8009eb4 <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 8009eae:	2302      	movs	r3, #2
 8009eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8009eb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eb8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8009eba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009ebe:	fb02 f303 	mul.w	r3, r2, r3
 8009ec2:	02db      	lsls	r3, r3, #11
 8009ec4:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ec8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ecc:	4a4f      	ldr	r2, [pc, #316]	; (800a00c <VL53L0X_calc_sigma_estimate+0x298>)
 8009ece:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed2:	099b      	lsrs	r3, r3, #6
 8009ed4:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 8009ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009eda:	fb02 f303 	mul.w	r3, r2, r3
 8009ede:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ee2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ee6:	4a49      	ldr	r2, [pc, #292]	; (800a00c <VL53L0X_calc_sigma_estimate+0x298>)
 8009ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8009eec:	099b      	lsrs	r3, r3, #6
 8009eee:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	3380      	adds	r3, #128	; 0x80
 8009ef4:	0a1b      	lsrs	r3, r3, #8
 8009ef6:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009efc:	fb02 f303 	mul.w	r3, r2, r3
 8009f00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009f04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f08:	3380      	adds	r3, #128	; 0x80
 8009f0a:	0a1b      	lsrs	r3, r3, #8
 8009f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009f16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 8009f1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009f22:	e14a      	b.n	800a1ba <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 8009f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f30:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009f3c:	e13b      	b.n	800a1b6 <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009f3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 8009f46:	2301      	movs	r3, #1
 8009f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f50:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f54:	041a      	lsls	r2, r3, #16
 8009f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009f60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d903      	bls.n	8009f74 <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009f74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f7c:	fb02 f303 	mul.w	r3, r2, r3
 8009f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009f84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f88:	4613      	mov	r3, r2
 8009f8a:	005b      	lsls	r3, r3, #1
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fe f8b9 	bl	8008108 <VL53L0X_isqrt>
 8009f96:	4603      	mov	r3, r0
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	891b      	ldrh	r3, [r3, #8]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fa4:	fb02 f303 	mul.w	r3, r2, r3
 8009fa8:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fac:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fb2:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009fb4:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009fb6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009fba:	4a14      	ldr	r2, [pc, #80]	; (800a00c <VL53L0X_calc_sigma_estimate+0x298>)
 8009fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc0:	099b      	lsrs	r3, r3, #6
 8009fc2:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fc6:	041b      	lsls	r3, r3, #16
 8009fc8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009fcc:	4a0f      	ldr	r2, [pc, #60]	; (800a00c <VL53L0X_calc_sigma_estimate+0x298>)
 8009fce:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd2:	099b      	lsrs	r3, r3, #6
 8009fd4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 8009fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd8:	021b      	lsls	r3, r3, #8
 8009fda:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8009fdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	bfb8      	it	lt
 8009fe8:	425b      	neglt	r3, r3
 8009fea:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	021b      	lsls	r3, r3, #8
 8009ff0:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	7e1b      	ldrb	r3, [r3, #24]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 8009ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a002:	e032      	b.n	800a06a <VL53L0X_calc_sigma_estimate+0x2f6>
 800a004:	028f87ae 	.word	0x028f87ae
 800a008:	0006999a 	.word	0x0006999a
 800a00c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 800a010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a016:	fbb2 f3f3 	udiv	r3, r2, r3
 800a01a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a020:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a028:	fb02 f303 	mul.w	r3, r2, r3
 800a02c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a030:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a036:	4413      	add	r3, r2
 800a038:	0c1b      	lsrs	r3, r3, #16
 800a03a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a03e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a042:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 800a04a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a058:	fb03 f303 	mul.w	r3, r3, r3
 800a05c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a064:	0b9b      	lsrs	r3, r3, #14
 800a066:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a06a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a06e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a070:	fb02 f303 	mul.w	r3, r2, r3
 800a074:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a078:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a07c:	0c1b      	lsrs	r3, r3, #16
 800a07e:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a082:	fb03 f303 	mul.w	r3, r3, r3
 800a086:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 800a088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a08c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a094:	0c1b      	lsrs	r3, r3, #16
 800a096:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	fb03 f303 	mul.w	r3, r3, r3
 800a09e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a0a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	4413      	add	r3, r2
 800a0a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a0a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0aa:	f7fe f82d 	bl	8008108 <VL53L0X_isqrt>
 800a0ae:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	041b      	lsls	r3, r3, #16
 800a0b4:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	3332      	adds	r3, #50	; 0x32
 800a0ba:	4a42      	ldr	r2, [pc, #264]	; (800a1c4 <VL53L0X_calc_sigma_estimate+0x450>)
 800a0bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c0:	095a      	lsrs	r2, r3, #5
 800a0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a0cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0d0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a0d4:	fb02 f303 	mul.w	r3, r2, r3
 800a0d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a0dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0e0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a0e4:	3308      	adds	r3, #8
 800a0e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a0ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a0ee:	4a36      	ldr	r2, [pc, #216]	; (800a1c8 <VL53L0X_calc_sigma_estimate+0x454>)
 800a0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f4:	0b5b      	lsrs	r3, r3, #13
 800a0f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a0fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a0fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a102:	429a      	cmp	r2, r3
 800a104:	d903      	bls.n	800a10e <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a106:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a10a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 800a10e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a112:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a116:	4413      	add	r3, r2
 800a118:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a11c:	4a2b      	ldr	r2, [pc, #172]	; (800a1cc <VL53L0X_calc_sigma_estimate+0x458>)
 800a11e:	fba2 2303 	umull	r2, r3, r2, r3
 800a122:	099b      	lsrs	r3, r3, #6
 800a124:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a12a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a12e:	441a      	add	r2, r3
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	fbb2 f3f3 	udiv	r3, r2, r3
 800a136:	4618      	mov	r0, r3
 800a138:	f7fd ffe6 	bl	8008108 <VL53L0X_isqrt>
 800a13c:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	021b      	lsls	r3, r3, #8
 800a142:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a14a:	4a20      	ldr	r2, [pc, #128]	; (800a1cc <VL53L0X_calc_sigma_estimate+0x458>)
 800a14c:	fba2 2303 	umull	r2, r3, r2, r3
 800a150:	099b      	lsrs	r3, r3, #6
 800a152:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a158:	fb03 f303 	mul.w	r3, r3, r3
 800a15c:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	fb03 f303 	mul.w	r3, r3, r3
 800a164:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	4413      	add	r3, r2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fd ffcb 	bl	8008108 <VL53L0X_isqrt>
 800a172:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a17a:	fb02 f303 	mul.w	r3, r2, r3
 800a17e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a184:	2b00      	cmp	r3, #0
 800a186:	d009      	beq.n	800a19c <VL53L0X_calc_sigma_estimate+0x428>
 800a188:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <VL53L0X_calc_sigma_estimate+0x428>
 800a190:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a198:	429a      	cmp	r2, r3
 800a19a:	d903      	bls.n	800a1a4 <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 800a19c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a1aa:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a1b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	37c0      	adds	r7, #192	; 0xc0
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	51eb851f 	.word	0x51eb851f
 800a1c8:	d1b71759 	.word	0xd1b71759
 800a1cc:	10624dd3 	.word	0x10624dd3

0800a1d0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b090      	sub	sp, #64	; 0x40
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	607a      	str	r2, [r7, #4]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	460b      	mov	r3, r1
 800a1de:	72fb      	strb	r3, [r7, #11]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a21a:	2300      	movs	r3, #0
 800a21c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	10db      	asrs	r3, r3, #3
 800a226:	b2db      	uxtb	r3, r3
 800a228:	f003 030f 	and.w	r3, r3, #15
 800a22c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a230:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a234:	2b00      	cmp	r3, #0
 800a236:	d017      	beq.n	800a268 <VL53L0X_get_pal_range_status+0x98>
 800a238:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a23c:	2b05      	cmp	r3, #5
 800a23e:	d013      	beq.n	800a268 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a240:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a244:	2b07      	cmp	r3, #7
 800a246:	d00f      	beq.n	800a268 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a248:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a24c:	2b0c      	cmp	r3, #12
 800a24e:	d00b      	beq.n	800a268 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a250:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a254:	2b0d      	cmp	r3, #13
 800a256:	d007      	beq.n	800a268 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a258:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a25c:	2b0e      	cmp	r3, #14
 800a25e:	d003      	beq.n	800a268 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a260:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a264:	2b0f      	cmp	r3, #15
 800a266:	d103      	bne.n	800a270 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a268:	2301      	movs	r3, #1
 800a26a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a26e:	e002      	b.n	800a276 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a276:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d109      	bne.n	800a292 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a27e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a282:	461a      	mov	r2, r3
 800a284:	2100      	movs	r1, #0
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f7fc f88e 	bl	80063a8 <VL53L0X_GetLimitCheckEnable>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a292:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a296:	2b00      	cmp	r3, #0
 800a298:	d03c      	beq.n	800a314 <VL53L0X_get_pal_range_status+0x144>
 800a29a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d138      	bne.n	800a314 <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a2a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7ff fd62 	bl	8009d74 <VL53L0X_calc_sigma_estimate>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 800a2b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10a      	bne.n	800a2d4 <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 800a2be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	f107 0210 	add.w	r2, r7, #16
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7ff fcac 	bl	8009c26 <VL53L0X_calc_dmax>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a2d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d103      	bne.n	800a2e4 <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2e2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a2e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d113      	bne.n	800a314 <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a2ec:	f107 0320 	add.w	r3, r7, #32
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f7fc f8dd 	bl	80064b4 <VL53L0X_GetLimitCheckValue>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d006      	beq.n	800a314 <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 800a306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a308:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d902      	bls.n	800a314 <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 800a30e:	2301      	movs	r3, #1
 800a310:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a314:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d109      	bne.n	800a330 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a31c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a320:	461a      	mov	r2, r3
 800a322:	2102      	movs	r1, #2
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7fc f83f 	bl	80063a8 <VL53L0X_GetLimitCheckEnable>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a330:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a334:	2b00      	cmp	r3, #0
 800a336:	d044      	beq.n	800a3c2 <VL53L0X_get_pal_range_status+0x1f2>
 800a338:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d140      	bne.n	800a3c2 <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a340:	f107 031c 	add.w	r3, r7, #28
 800a344:	461a      	mov	r2, r3
 800a346:	2102      	movs	r1, #2
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7fc f8b3 	bl	80064b4 <VL53L0X_GetLimitCheckValue>
 800a34e:	4603      	mov	r3, r0
 800a350:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a354:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d107      	bne.n	800a36c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a35c:	2201      	movs	r2, #1
 800a35e:	21ff      	movs	r1, #255	; 0xff
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 fceb 	bl	800ad3c <VL53L0X_WrByte>
 800a366:	4603      	mov	r3, r0
 800a368:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a36c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a370:	2b00      	cmp	r3, #0
 800a372:	d109      	bne.n	800a388 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 800a374:	f107 0316 	add.w	r3, r7, #22
 800a378:	461a      	mov	r2, r3
 800a37a:	21b6      	movs	r1, #182	; 0xb6
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f000 fd89 	bl	800ae94 <VL53L0X_RdWord>
 800a382:	4603      	mov	r3, r0
 800a384:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a388:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d107      	bne.n	800a3a0 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a390:	2200      	movs	r2, #0
 800a392:	21ff      	movs	r1, #255	; 0xff
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f000 fcd1 	bl	800ad3c <VL53L0X_WrByte>
 800a39a:	4603      	mov	r3, r0
 800a39c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a3a0:	8afb      	ldrh	r3, [r7, #22]
 800a3a2:	025b      	lsls	r3, r3, #9
 800a3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3aa:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d006      	beq.n	800a3c2 <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a3b4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d902      	bls.n	800a3c2 <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a3c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d109      	bne.n	800a3de <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a3ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	2103      	movs	r1, #3
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7fb ffe8 	bl	80063a8 <VL53L0X_GetLimitCheckEnable>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a3de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d023      	beq.n	800a42e <VL53L0X_get_pal_range_status+0x25e>
 800a3e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d11f      	bne.n	800a42e <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a3ee:	893b      	ldrh	r3, [r7, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d102      	bne.n	800a3fa <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a3f8:	e005      	b.n	800a406 <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	021a      	lsls	r2, r3, #8
 800a3fe:	893b      	ldrh	r3, [r7, #8]
 800a400:	fbb2 f3f3 	udiv	r3, r2, r3
 800a404:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a406:	f107 0318 	add.w	r3, r7, #24
 800a40a:	461a      	mov	r2, r3
 800a40c:	2103      	movs	r1, #3
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7fc f850 	bl	80064b4 <VL53L0X_GetLimitCheckValue>
 800a414:	4603      	mov	r3, r0
 800a416:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d006      	beq.n	800a42e <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a420:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a424:	429a      	cmp	r2, r3
 800a426:	d202      	bcs.n	800a42e <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a428:	2301      	movs	r3, #1
 800a42a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a42e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a432:	2b00      	cmp	r3, #0
 800a434:	d14a      	bne.n	800a4cc <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 800a436:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d103      	bne.n	800a446 <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 800a43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a440:	22ff      	movs	r2, #255	; 0xff
 800a442:	701a      	strb	r2, [r3, #0]
 800a444:	e042      	b.n	800a4cc <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a446:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d007      	beq.n	800a45e <VL53L0X_get_pal_range_status+0x28e>
 800a44e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a452:	2b02      	cmp	r3, #2
 800a454:	d003      	beq.n	800a45e <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 800a456:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d103      	bne.n	800a466 <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a45e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a460:	2205      	movs	r2, #5
 800a462:	701a      	strb	r2, [r3, #0]
 800a464:	e032      	b.n	800a4cc <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a466:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a46a:	2b06      	cmp	r3, #6
 800a46c:	d003      	beq.n	800a476 <VL53L0X_get_pal_range_status+0x2a6>
 800a46e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a472:	2b09      	cmp	r3, #9
 800a474:	d103      	bne.n	800a47e <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a478:	2204      	movs	r2, #4
 800a47a:	701a      	strb	r2, [r3, #0]
 800a47c:	e026      	b.n	800a4cc <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a47e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a482:	2b08      	cmp	r3, #8
 800a484:	d007      	beq.n	800a496 <VL53L0X_get_pal_range_status+0x2c6>
 800a486:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a48a:	2b0a      	cmp	r3, #10
 800a48c:	d003      	beq.n	800a496 <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 800a48e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a492:	2b01      	cmp	r3, #1
 800a494:	d103      	bne.n	800a49e <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a498:	2203      	movs	r2, #3
 800a49a:	701a      	strb	r2, [r3, #0]
 800a49c:	e016      	b.n	800a4cc <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a49e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	d003      	beq.n	800a4ae <VL53L0X_get_pal_range_status+0x2de>
 800a4a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d103      	bne.n	800a4b6 <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	701a      	strb	r2, [r3, #0]
 800a4b4:	e00a      	b.n	800a4cc <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 800a4b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d103      	bne.n	800a4c6 <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a4be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	701a      	strb	r2, [r3, #0]
 800a4c4:	e002      	b.n	800a4cc <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a4cc:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f7fb ff67 	bl	80063a8 <VL53L0X_GetLimitCheckEnable>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a4e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d14f      	bne.n	800a588 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a4e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d003      	beq.n	800a4f8 <VL53L0X_get_pal_range_status+0x328>
 800a4f0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d103      	bne.n	800a500 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fe:	e002      	b.n	800a506 <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a50c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a510:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a514:	2b04      	cmp	r3, #4
 800a516:	d003      	beq.n	800a520 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a518:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d103      	bne.n	800a528 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 800a520:	2301      	movs	r3, #1
 800a522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a526:	e002      	b.n	800a52e <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a534:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a538:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d003      	beq.n	800a548 <VL53L0X_get_pal_range_status+0x378>
 800a540:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a544:	2b01      	cmp	r3, #1
 800a546:	d103      	bne.n	800a550 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a548:	2301      	movs	r3, #1
 800a54a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54e:	e002      	b.n	800a556 <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a55c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a560:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <VL53L0X_get_pal_range_status+0x3a0>
 800a568:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d103      	bne.n	800a578 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a570:	2301      	movs	r3, #1
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a576:	e002      	b.n	800a57e <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a584:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a588:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3740      	adds	r7, #64	; 0x40
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800a5a4:	2102      	movs	r1, #2
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7fd fe25 	bl	80081f6 <VL53L0X_get_info_from_device>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800a5b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d11d      	bne.n	800a5f4 <VL53L0X_check_part_used+0x60>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800a5be:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800a5c0:	7dbb      	ldrb	r3, [r7, #22]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d107      	bne.n	800a5d6 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3340      	adds	r3, #64	; 0x40
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]
 800a5d4:	e00e      	b.n	800a5f4 <VL53L0X_check_part_used+0x60>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f203 131f 	addw	r3, r3, #287	; 0x11f
 800a5e6:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId,
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3340      	adds	r3, #64	; 0x40
 800a5ec:	6939      	ldr	r1, [r7, #16]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f00b f8bb 	bl	801576a <strcpy>
				   ProductId_tmp);
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3718      	adds	r7, #24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800a600:	b5b0      	push	{r4, r5, r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800a60e:	f107 030d 	add.w	r3, r7, #13
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff ffbc 	bl	800a594 <VL53L0X_check_part_used>
 800a61c:	4603      	mov	r3, r0
 800a61e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800a620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d13b      	bne.n	800a6a0 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800a628:	7b7b      	ldrb	r3, [r7, #13]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d108      	bne.n	800a640 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	4a30      	ldr	r2, [pc, #192]	; (800a6f4 <VL53L0X_get_device_info+0xf4>)
 800a632:	461c      	mov	r4, r3
 800a634:	4613      	mov	r3, r2
 800a636:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a638:	6020      	str	r0, [r4, #0]
 800a63a:	6061      	str	r1, [r4, #4]
 800a63c:	60a2      	str	r2, [r4, #8]
 800a63e:	e027      	b.n	800a690 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800a640:	7b7b      	ldrb	r3, [r7, #13]
 800a642:	2b22      	cmp	r3, #34	; 0x22
 800a644:	d80b      	bhi.n	800a65e <VL53L0X_get_device_info+0x5e>
 800a646:	7b7b      	ldrb	r3, [r7, #13]
 800a648:	2b20      	cmp	r3, #32
 800a64a:	d008      	beq.n	800a65e <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	4a2a      	ldr	r2, [pc, #168]	; (800a6f8 <VL53L0X_get_device_info+0xf8>)
 800a650:	461c      	mov	r4, r3
 800a652:	4613      	mov	r3, r2
 800a654:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a656:	6020      	str	r0, [r4, #0]
 800a658:	6061      	str	r1, [r4, #4]
 800a65a:	60a2      	str	r2, [r4, #8]
 800a65c:	e018      	b.n	800a690 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800a65e:	7b7b      	ldrb	r3, [r7, #13]
 800a660:	2b26      	cmp	r3, #38	; 0x26
 800a662:	d808      	bhi.n	800a676 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	4a25      	ldr	r2, [pc, #148]	; (800a6fc <VL53L0X_get_device_info+0xfc>)
 800a668:	461c      	mov	r4, r3
 800a66a:	4613      	mov	r3, r2
 800a66c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a66e:	6020      	str	r0, [r4, #0]
 800a670:	6061      	str	r1, [r4, #4]
 800a672:	60a2      	str	r2, [r4, #8]
 800a674:	e00c      	b.n	800a690 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	4a21      	ldr	r2, [pc, #132]	; (800a700 <VL53L0X_get_device_info+0x100>)
 800a67a:	461d      	mov	r5, r3
 800a67c:	4614      	mov	r4, r2
 800a67e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a680:	6028      	str	r0, [r5, #0]
 800a682:	6069      	str	r1, [r5, #4]
 800a684:	60aa      	str	r2, [r5, #8]
 800a686:	60eb      	str	r3, [r5, #12]
 800a688:	6820      	ldr	r0, [r4, #0]
 800a68a:	6128      	str	r0, [r5, #16]
 800a68c:	7923      	ldrb	r3, [r4, #4]
 800a68e:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	3320      	adds	r3, #32
 800a694:	491b      	ldr	r1, [pc, #108]	; (800a704 <VL53L0X_get_device_info+0x104>)
 800a696:	461a      	mov	r2, r3
 800a698:	460b      	mov	r3, r1
 800a69a:	cb03      	ldmia	r3!, {r0, r1}
 800a69c:	6010      	str	r0, [r2, #0]
 800a69e:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a6a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d108      	bne.n	800a6ba <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev,
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	3360      	adds	r3, #96	; 0x60
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	21c0      	movs	r1, #192	; 0xc0
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fbc5 	bl	800ae40 <VL53L0X_RdByte>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_IDENTIFICATION_MODEL_ID,
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a6ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d112      	bne.n	800a6e8 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800a6c2:	f107 030e 	add.w	r3, r7, #14
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	21c2      	movs	r1, #194	; 0xc2
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fbb8 	bl	800ae40 <VL53L0X_RdByte>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	091b      	lsrs	r3, r3, #4
 800a6e0:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800a6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bdb0      	pop	{r4, r5, r7, pc}
 800a6f4:	08019b88 	.word	0x08019b88
 800a6f8:	08019b94 	.word	0x08019b94
 800a6fc:	08019ba0 	.word	0x08019ba0
 800a700:	08019bac 	.word	0x08019bac
 800a704:	08019bc4 	.word	0x08019bc4

0800a708 <VL53L0X_get_range_status_string>:
}
#endif

VL53L0X_Error VL53L0X_get_range_status_string(uint8_t RangeStatus,
		char *pRangeStatusString)
{
 800a708:	b490      	push	{r4, r7}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	6039      	str	r1, [r7, #0]
 800a712:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a714:	2300      	movs	r3, #0
 800a716:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (RangeStatus) {
 800a718:	79fb      	ldrb	r3, [r7, #7]
 800a71a:	2b05      	cmp	r3, #5
 800a71c:	d850      	bhi.n	800a7c0 <VL53L0X_get_range_status_string+0xb8>
 800a71e:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <VL53L0X_get_range_status_string+0x1c>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a73d 	.word	0x0800a73d
 800a728:	0800a74f 	.word	0x0800a74f
 800a72c:	0800a767 	.word	0x0800a767
 800a730:	0800a779 	.word	0x0800a779
 800a734:	0800a793 	.word	0x0800a793
 800a738:	0800a7ab 	.word	0x0800a7ab
	case 0:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	4a28      	ldr	r2, [pc, #160]	; (800a7e0 <VL53L0X_get_range_status_string+0xd8>)
 800a740:	461c      	mov	r4, r3
 800a742:	4613      	mov	r3, r2
 800a744:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a746:	6020      	str	r0, [r4, #0]
 800a748:	6061      	str	r1, [r4, #4]
 800a74a:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_RANGEVALID);
	break;
 800a74c:	e041      	b.n	800a7d2 <VL53L0X_get_range_status_string+0xca>
	case 1:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	4924      	ldr	r1, [pc, #144]	; (800a7e4 <VL53L0X_get_range_status_string+0xdc>)
 800a752:	461a      	mov	r2, r3
 800a754:	460b      	mov	r3, r1
 800a756:	cb03      	ldmia	r3!, {r0, r1}
 800a758:	6010      	str	r0, [r2, #0]
 800a75a:	6051      	str	r1, [r2, #4]
 800a75c:	8819      	ldrh	r1, [r3, #0]
 800a75e:	789b      	ldrb	r3, [r3, #2]
 800a760:	8111      	strh	r1, [r2, #8]
 800a762:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_SIGMA);
	break;
 800a764:	e035      	b.n	800a7d2 <VL53L0X_get_range_status_string+0xca>
	case 2:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	4a1f      	ldr	r2, [pc, #124]	; (800a7e8 <VL53L0X_get_range_status_string+0xe0>)
 800a76a:	461c      	mov	r4, r3
 800a76c:	4613      	mov	r3, r2
 800a76e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a770:	6020      	str	r0, [r4, #0]
 800a772:	6061      	str	r1, [r4, #4]
 800a774:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_SIGNAL);
	break;
 800a776:	e02c      	b.n	800a7d2 <VL53L0X_get_range_status_string+0xca>
	case 3:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	4a1c      	ldr	r2, [pc, #112]	; (800a7ec <VL53L0X_get_range_status_string+0xe4>)
 800a77c:	461c      	mov	r4, r3
 800a77e:	4613      	mov	r3, r2
 800a780:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a782:	6020      	str	r0, [r4, #0]
 800a784:	6061      	str	r1, [r4, #4]
 800a786:	60a2      	str	r2, [r4, #8]
 800a788:	881a      	ldrh	r2, [r3, #0]
 800a78a:	789b      	ldrb	r3, [r3, #2]
 800a78c:	81a2      	strh	r2, [r4, #12]
 800a78e:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_RANGESTATUS_MINRANGE);
	break;
 800a790:	e01f      	b.n	800a7d2 <VL53L0X_get_range_status_string+0xca>
	case 4:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	4916      	ldr	r1, [pc, #88]	; (800a7f0 <VL53L0X_get_range_status_string+0xe8>)
 800a796:	461a      	mov	r2, r3
 800a798:	460b      	mov	r3, r1
 800a79a:	cb03      	ldmia	r3!, {r0, r1}
 800a79c:	6010      	str	r0, [r2, #0]
 800a79e:	6051      	str	r1, [r2, #4]
 800a7a0:	8819      	ldrh	r1, [r3, #0]
 800a7a2:	789b      	ldrb	r3, [r3, #2]
 800a7a4:	8111      	strh	r1, [r2, #8]
 800a7a6:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_PHASE);
	break;
 800a7a8:	e013      	b.n	800a7d2 <VL53L0X_get_range_status_string+0xca>
	case 5:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	4a11      	ldr	r2, [pc, #68]	; (800a7f4 <VL53L0X_get_range_status_string+0xec>)
 800a7ae:	461c      	mov	r4, r3
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a7b4:	6020      	str	r0, [r4, #0]
 800a7b6:	6061      	str	r1, [r4, #4]
 800a7b8:	60a2      	str	r2, [r4, #8]
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	81a3      	strh	r3, [r4, #12]
			VL53L0X_STRING_RANGESTATUS_HW);
	break;
 800a7be:	e008      	b.n	800a7d2 <VL53L0X_get_range_status_string+0xca>

	default: /**/
		VL53L0X_COPYSTRING(pRangeStatusString,
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	490d      	ldr	r1, [pc, #52]	; (800a7f8 <VL53L0X_get_range_status_string+0xf0>)
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	cb03      	ldmia	r3!, {r0, r1}
 800a7ca:	6010      	str	r0, [r2, #0]
 800a7cc:	6051      	str	r1, [r2, #4]
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	8113      	strh	r3, [r2, #8]
				VL53L0X_STRING_RANGESTATUS_NONE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bc90      	pop	{r4, r7}
 800a7de:	4770      	bx	lr
 800a7e0:	08019bcc 	.word	0x08019bcc
 800a7e4:	08019bd8 	.word	0x08019bd8
 800a7e8:	08019be4 	.word	0x08019be4
 800a7ec:	08019bf0 	.word	0x08019bf0
 800a7f0:	08019c00 	.word	0x08019c00
 800a7f4:	08019c0c 	.word	0x08019c0c
 800a7f8:	08019c1c 	.word	0x08019c1c

0800a7fc <VL53L0X_get_pal_error_string>:

VL53L0X_Error VL53L0X_get_pal_error_string(VL53L0X_Error PalErrorCode,
		char *pPalErrorString)
{
 800a7fc:	b4b0      	push	{r4, r5, r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	6039      	str	r1, [r7, #0]
 800a806:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (PalErrorCode) {
 800a80c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a810:	3363      	adds	r3, #99	; 0x63
 800a812:	2b63      	cmp	r3, #99	; 0x63
 800a814:	f200 81b9 	bhi.w	800ab8a <VL53L0X_get_pal_error_string+0x38e>
 800a818:	a201      	add	r2, pc, #4	; (adr r2, 800a820 <VL53L0X_get_pal_error_string+0x24>)
 800a81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81e:	bf00      	nop
 800a820:	0800ab6f 	.word	0x0800ab6f
 800a824:	0800ab8b 	.word	0x0800ab8b
 800a828:	0800ab8b 	.word	0x0800ab8b
 800a82c:	0800ab8b 	.word	0x0800ab8b
 800a830:	0800ab8b 	.word	0x0800ab8b
 800a834:	0800ab8b 	.word	0x0800ab8b
 800a838:	0800ab8b 	.word	0x0800ab8b
 800a83c:	0800ab8b 	.word	0x0800ab8b
 800a840:	0800ab8b 	.word	0x0800ab8b
 800a844:	0800ab8b 	.word	0x0800ab8b
 800a848:	0800ab8b 	.word	0x0800ab8b
 800a84c:	0800ab8b 	.word	0x0800ab8b
 800a850:	0800ab8b 	.word	0x0800ab8b
 800a854:	0800ab8b 	.word	0x0800ab8b
 800a858:	0800ab8b 	.word	0x0800ab8b
 800a85c:	0800ab8b 	.word	0x0800ab8b
 800a860:	0800ab8b 	.word	0x0800ab8b
 800a864:	0800ab8b 	.word	0x0800ab8b
 800a868:	0800ab8b 	.word	0x0800ab8b
 800a86c:	0800ab8b 	.word	0x0800ab8b
 800a870:	0800ab8b 	.word	0x0800ab8b
 800a874:	0800ab8b 	.word	0x0800ab8b
 800a878:	0800ab8b 	.word	0x0800ab8b
 800a87c:	0800ab8b 	.word	0x0800ab8b
 800a880:	0800ab8b 	.word	0x0800ab8b
 800a884:	0800ab8b 	.word	0x0800ab8b
 800a888:	0800ab8b 	.word	0x0800ab8b
 800a88c:	0800ab8b 	.word	0x0800ab8b
 800a890:	0800ab8b 	.word	0x0800ab8b
 800a894:	0800ab8b 	.word	0x0800ab8b
 800a898:	0800ab8b 	.word	0x0800ab8b
 800a89c:	0800ab8b 	.word	0x0800ab8b
 800a8a0:	0800ab8b 	.word	0x0800ab8b
 800a8a4:	0800ab8b 	.word	0x0800ab8b
 800a8a8:	0800ab8b 	.word	0x0800ab8b
 800a8ac:	0800ab8b 	.word	0x0800ab8b
 800a8b0:	0800ab8b 	.word	0x0800ab8b
 800a8b4:	0800ab8b 	.word	0x0800ab8b
 800a8b8:	0800ab8b 	.word	0x0800ab8b
 800a8bc:	0800ab8b 	.word	0x0800ab8b
 800a8c0:	0800ab8b 	.word	0x0800ab8b
 800a8c4:	0800ab8b 	.word	0x0800ab8b
 800a8c8:	0800ab8b 	.word	0x0800ab8b
 800a8cc:	0800ab8b 	.word	0x0800ab8b
 800a8d0:	0800ab8b 	.word	0x0800ab8b
 800a8d4:	0800ab8b 	.word	0x0800ab8b
 800a8d8:	0800ab8b 	.word	0x0800ab8b
 800a8dc:	0800ab8b 	.word	0x0800ab8b
 800a8e0:	0800ab8b 	.word	0x0800ab8b
 800a8e4:	0800ab51 	.word	0x0800ab51
 800a8e8:	0800ab8b 	.word	0x0800ab8b
 800a8ec:	0800ab8b 	.word	0x0800ab8b
 800a8f0:	0800ab8b 	.word	0x0800ab8b
 800a8f4:	0800ab8b 	.word	0x0800ab8b
 800a8f8:	0800ab8b 	.word	0x0800ab8b
 800a8fc:	0800ab8b 	.word	0x0800ab8b
 800a900:	0800ab8b 	.word	0x0800ab8b
 800a904:	0800ab8b 	.word	0x0800ab8b
 800a908:	0800ab8b 	.word	0x0800ab8b
 800a90c:	0800ab2f 	.word	0x0800ab2f
 800a910:	0800ab8b 	.word	0x0800ab8b
 800a914:	0800ab8b 	.word	0x0800ab8b
 800a918:	0800ab8b 	.word	0x0800ab8b
 800a91c:	0800ab8b 	.word	0x0800ab8b
 800a920:	0800ab8b 	.word	0x0800ab8b
 800a924:	0800ab8b 	.word	0x0800ab8b
 800a928:	0800ab8b 	.word	0x0800ab8b
 800a92c:	0800ab8b 	.word	0x0800ab8b
 800a930:	0800ab8b 	.word	0x0800ab8b
 800a934:	0800ab13 	.word	0x0800ab13
 800a938:	0800ab8b 	.word	0x0800ab8b
 800a93c:	0800ab8b 	.word	0x0800ab8b
 800a940:	0800ab8b 	.word	0x0800ab8b
 800a944:	0800ab8b 	.word	0x0800ab8b
 800a948:	0800ab8b 	.word	0x0800ab8b
 800a94c:	0800ab8b 	.word	0x0800ab8b
 800a950:	0800ab8b 	.word	0x0800ab8b
 800a954:	0800ab8b 	.word	0x0800ab8b
 800a958:	0800ab8b 	.word	0x0800ab8b
 800a95c:	0800aaf9 	.word	0x0800aaf9
 800a960:	0800ab8b 	.word	0x0800ab8b
 800a964:	0800ab8b 	.word	0x0800ab8b
 800a968:	0800ab8b 	.word	0x0800ab8b
 800a96c:	0800ab8b 	.word	0x0800ab8b
 800a970:	0800ab8b 	.word	0x0800ab8b
 800a974:	0800ab8b 	.word	0x0800ab8b
 800a978:	0800ab8b 	.word	0x0800ab8b
 800a97c:	0800aa45 	.word	0x0800aa45
 800a980:	0800aadb 	.word	0x0800aadb
 800a984:	0800aac3 	.word	0x0800aac3
 800a988:	0800aaab 	.word	0x0800aaab
 800a98c:	0800aa8d 	.word	0x0800aa8d
 800a990:	0800aa73 	.word	0x0800aa73
 800a994:	0800aa61 	.word	0x0800aa61
 800a998:	0800aa2d 	.word	0x0800aa2d
 800a99c:	0800aa0f 	.word	0x0800aa0f
 800a9a0:	0800a9fb 	.word	0x0800a9fb
 800a9a4:	0800a9e3 	.word	0x0800a9e3
 800a9a8:	0800a9c5 	.word	0x0800a9c5
 800a9ac:	0800a9b1 	.word	0x0800a9b1
	case VL53L0X_ERROR_NONE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	4980      	ldr	r1, [pc, #512]	; (800abb4 <VL53L0X_get_pal_error_string+0x3b8>)
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	cb03      	ldmia	r3!, {r0, r1}
 800a9ba:	6010      	str	r0, [r2, #0]
 800a9bc:	6051      	str	r1, [r2, #4]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	7213      	strb	r3, [r2, #8]
			VL53L0X_STRING_ERROR_NONE);
	break;
 800a9c2:	e0f0      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CALIBRATION_WARNING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	4a7c      	ldr	r2, [pc, #496]	; (800abb8 <VL53L0X_get_pal_error_string+0x3bc>)
 800a9c8:	461d      	mov	r5, r3
 800a9ca:	4614      	mov	r4, r2
 800a9cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9ce:	6028      	str	r0, [r5, #0]
 800a9d0:	6069      	str	r1, [r5, #4]
 800a9d2:	60aa      	str	r2, [r5, #8]
 800a9d4:	60eb      	str	r3, [r5, #12]
 800a9d6:	cc03      	ldmia	r4!, {r0, r1}
 800a9d8:	6128      	str	r0, [r5, #16]
 800a9da:	6169      	str	r1, [r5, #20]
 800a9dc:	8823      	ldrh	r3, [r4, #0]
 800a9de:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_CALIBRATION_WARNING);
	break;
 800a9e0:	e0e1      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MIN_CLIPPED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	4a75      	ldr	r2, [pc, #468]	; (800abbc <VL53L0X_get_pal_error_string+0x3c0>)
 800a9e6:	461d      	mov	r5, r3
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a9ec:	6028      	str	r0, [r5, #0]
 800a9ee:	6069      	str	r1, [r5, #4]
 800a9f0:	60aa      	str	r2, [r5, #8]
 800a9f2:	60eb      	str	r3, [r5, #12]
 800a9f4:	8823      	ldrh	r3, [r4, #0]
 800a9f6:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_MIN_CLIPPED);
	break;
 800a9f8:	e0d5      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_UNDEFINED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	4a70      	ldr	r2, [pc, #448]	; (800abc0 <VL53L0X_get_pal_error_string+0x3c4>)
 800a9fe:	461c      	mov	r4, r3
 800aa00:	4615      	mov	r5, r2
 800aa02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa04:	6020      	str	r0, [r4, #0]
 800aa06:	6061      	str	r1, [r4, #4]
 800aa08:	60a2      	str	r2, [r4, #8]
 800aa0a:	60e3      	str	r3, [r4, #12]
			VL53L0X_STRING_ERROR_UNDEFINED);
	break;
 800aa0c:	e0cb      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_PARAMS:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	4a6c      	ldr	r2, [pc, #432]	; (800abc4 <VL53L0X_get_pal_error_string+0x3c8>)
 800aa12:	461d      	mov	r5, r3
 800aa14:	4614      	mov	r4, r2
 800aa16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa18:	6028      	str	r0, [r5, #0]
 800aa1a:	6069      	str	r1, [r5, #4]
 800aa1c:	60aa      	str	r2, [r5, #8]
 800aa1e:	60eb      	str	r3, [r5, #12]
 800aa20:	cc03      	ldmia	r4!, {r0, r1}
 800aa22:	6128      	str	r0, [r5, #16]
 800aa24:	6169      	str	r1, [r5, #20]
 800aa26:	7823      	ldrb	r3, [r4, #0]
 800aa28:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_INVALID_PARAMS);
	break;
 800aa2a:	e0bc      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	4a66      	ldr	r2, [pc, #408]	; (800abc8 <VL53L0X_get_pal_error_string+0x3cc>)
 800aa30:	461d      	mov	r5, r3
 800aa32:	4614      	mov	r4, r2
 800aa34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa36:	6028      	str	r0, [r5, #0]
 800aa38:	6069      	str	r1, [r5, #4]
 800aa3a:	60aa      	str	r2, [r5, #8]
 800aa3c:	60eb      	str	r3, [r5, #12]
 800aa3e:	6820      	ldr	r0, [r4, #0]
 800aa40:	6128      	str	r0, [r5, #16]
			VL53L0X_STRING_ERROR_NOT_SUPPORTED);
	break;
 800aa42:	e0b0      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INTERRUPT_NOT_CLEARED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	4a61      	ldr	r2, [pc, #388]	; (800abcc <VL53L0X_get_pal_error_string+0x3d0>)
 800aa48:	461d      	mov	r5, r3
 800aa4a:	4614      	mov	r4, r2
 800aa4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa4e:	6028      	str	r0, [r5, #0]
 800aa50:	6069      	str	r1, [r5, #4]
 800aa52:	60aa      	str	r2, [r5, #8]
 800aa54:	60eb      	str	r3, [r5, #12]
 800aa56:	6820      	ldr	r0, [r4, #0]
 800aa58:	6128      	str	r0, [r5, #16]
 800aa5a:	88a3      	ldrh	r3, [r4, #4]
 800aa5c:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INTERRUPT_NOT_CLEARED);
	break;
 800aa5e:	e0a2      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_RANGE_ERROR:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	4a5b      	ldr	r2, [pc, #364]	; (800abd0 <VL53L0X_get_pal_error_string+0x3d4>)
 800aa64:	461c      	mov	r4, r3
 800aa66:	4613      	mov	r3, r2
 800aa68:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa6a:	6020      	str	r0, [r4, #0]
 800aa6c:	6061      	str	r1, [r4, #4]
 800aa6e:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_ERROR_RANGE_ERROR);
	break;
 800aa70:	e099      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_TIME_OUT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	4a57      	ldr	r2, [pc, #348]	; (800abd4 <VL53L0X_get_pal_error_string+0x3d8>)
 800aa76:	461c      	mov	r4, r3
 800aa78:	4613      	mov	r3, r2
 800aa7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa7c:	6020      	str	r0, [r4, #0]
 800aa7e:	6061      	str	r1, [r4, #4]
 800aa80:	60a2      	str	r2, [r4, #8]
 800aa82:	881a      	ldrh	r2, [r3, #0]
 800aa84:	789b      	ldrb	r3, [r3, #2]
 800aa86:	81a2      	strh	r2, [r4, #12]
 800aa88:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_ERROR_TIME_OUT);
	break;
 800aa8a:	e08c      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MODE_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	4a52      	ldr	r2, [pc, #328]	; (800abd8 <VL53L0X_get_pal_error_string+0x3dc>)
 800aa90:	461d      	mov	r5, r3
 800aa92:	4614      	mov	r4, r2
 800aa94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa96:	6028      	str	r0, [r5, #0]
 800aa98:	6069      	str	r1, [r5, #4]
 800aa9a:	60aa      	str	r2, [r5, #8]
 800aa9c:	60eb      	str	r3, [r5, #12]
 800aa9e:	cc03      	ldmia	r4!, {r0, r1}
 800aaa0:	6128      	str	r0, [r5, #16]
 800aaa2:	6169      	str	r1, [r5, #20]
 800aaa4:	7823      	ldrb	r3, [r4, #0]
 800aaa6:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_MODE_NOT_SUPPORTED);
	break;
 800aaa8:	e07d      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_BUFFER_TOO_SMALL:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	4a4b      	ldr	r2, [pc, #300]	; (800abdc <VL53L0X_get_pal_error_string+0x3e0>)
 800aaae:	461d      	mov	r5, r3
 800aab0:	4614      	mov	r4, r2
 800aab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aab4:	6028      	str	r0, [r5, #0]
 800aab6:	6069      	str	r1, [r5, #4]
 800aab8:	60aa      	str	r2, [r5, #8]
 800aaba:	60eb      	str	r3, [r5, #12]
 800aabc:	7823      	ldrb	r3, [r4, #0]
 800aabe:	742b      	strb	r3, [r5, #16]
			VL53L0X_STRING_ERROR_BUFFER_TOO_SMALL);
	break;
 800aac0:	e071      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_NOT_EXISTING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	4a46      	ldr	r2, [pc, #280]	; (800abe0 <VL53L0X_get_pal_error_string+0x3e4>)
 800aac6:	461d      	mov	r5, r3
 800aac8:	4614      	mov	r4, r2
 800aaca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aacc:	6028      	str	r0, [r5, #0]
 800aace:	6069      	str	r1, [r5, #4]
 800aad0:	60aa      	str	r2, [r5, #8]
 800aad2:	60eb      	str	r3, [r5, #12]
 800aad4:	8823      	ldrh	r3, [r4, #0]
 800aad6:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_GPIO_NOT_EXISTING);
	break;
 800aad8:	e065      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	4a41      	ldr	r2, [pc, #260]	; (800abe4 <VL53L0X_get_pal_error_string+0x3e8>)
 800aade:	461d      	mov	r5, r3
 800aae0:	4614      	mov	r4, r2
 800aae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aae4:	6028      	str	r0, [r5, #0]
 800aae6:	6069      	str	r1, [r5, #4]
 800aae8:	60aa      	str	r2, [r5, #8]
 800aaea:	60eb      	str	r3, [r5, #12]
 800aaec:	cc03      	ldmia	r4!, {r0, r1}
 800aaee:	6128      	str	r0, [r5, #16]
 800aaf0:	6169      	str	r1, [r5, #20]
 800aaf2:	7823      	ldrb	r3, [r4, #0]
 800aaf4:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED);
	break;
 800aaf6:	e056      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CONTROL_INTERFACE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	4a3b      	ldr	r2, [pc, #236]	; (800abe8 <VL53L0X_get_pal_error_string+0x3ec>)
 800aafc:	461d      	mov	r5, r3
 800aafe:	4614      	mov	r4, r2
 800ab00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab02:	6028      	str	r0, [r5, #0]
 800ab04:	6069      	str	r1, [r5, #4]
 800ab06:	60aa      	str	r2, [r5, #8]
 800ab08:	60eb      	str	r3, [r5, #12]
 800ab0a:	cc03      	ldmia	r4!, {r0, r1}
 800ab0c:	6128      	str	r0, [r5, #16]
 800ab0e:	6169      	str	r1, [r5, #20]
			VL53L0X_STRING_ERROR_CONTROL_INTERFACE);
	break;
 800ab10:	e049      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_COMMAND:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	4a35      	ldr	r2, [pc, #212]	; (800abec <VL53L0X_get_pal_error_string+0x3f0>)
 800ab16:	461d      	mov	r5, r3
 800ab18:	4614      	mov	r4, r2
 800ab1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab1c:	6028      	str	r0, [r5, #0]
 800ab1e:	6069      	str	r1, [r5, #4]
 800ab20:	60aa      	str	r2, [r5, #8]
 800ab22:	60eb      	str	r3, [r5, #12]
 800ab24:	6820      	ldr	r0, [r4, #0]
 800ab26:	6128      	str	r0, [r5, #16]
 800ab28:	88a3      	ldrh	r3, [r4, #4]
 800ab2a:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INVALID_COMMAND);
	break;
 800ab2c:	e03b      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_DIVISION_BY_ZERO:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	4a2f      	ldr	r2, [pc, #188]	; (800abf0 <VL53L0X_get_pal_error_string+0x3f4>)
 800ab32:	461c      	mov	r4, r3
 800ab34:	4615      	mov	r5, r2
 800ab36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab38:	6020      	str	r0, [r4, #0]
 800ab3a:	6061      	str	r1, [r4, #4]
 800ab3c:	60a2      	str	r2, [r4, #8]
 800ab3e:	60e3      	str	r3, [r4, #12]
 800ab40:	6828      	ldr	r0, [r5, #0]
 800ab42:	6120      	str	r0, [r4, #16]
 800ab44:	88ab      	ldrh	r3, [r5, #4]
 800ab46:	79aa      	ldrb	r2, [r5, #6]
 800ab48:	82a3      	strh	r3, [r4, #20]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	75a3      	strb	r3, [r4, #22]
			VL53L0X_STRING_ERROR_DIVISION_BY_ZERO);
	break;
 800ab4e:	e02a      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_REF_SPAD_INIT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	4a28      	ldr	r2, [pc, #160]	; (800abf4 <VL53L0X_get_pal_error_string+0x3f8>)
 800ab54:	461d      	mov	r5, r3
 800ab56:	4614      	mov	r4, r2
 800ab58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab5a:	6028      	str	r0, [r5, #0]
 800ab5c:	6069      	str	r1, [r5, #4]
 800ab5e:	60aa      	str	r2, [r5, #8]
 800ab60:	60eb      	str	r3, [r5, #12]
 800ab62:	cc03      	ldmia	r4!, {r0, r1}
 800ab64:	6128      	str	r0, [r5, #16]
 800ab66:	6169      	str	r1, [r5, #20]
 800ab68:	8823      	ldrh	r3, [r4, #0]
 800ab6a:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_REF_SPAD_INIT);
	break;
 800ab6c:	e01b      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_IMPLEMENTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	4a21      	ldr	r2, [pc, #132]	; (800abf8 <VL53L0X_get_pal_error_string+0x3fc>)
 800ab72:	461d      	mov	r5, r3
 800ab74:	4614      	mov	r4, r2
 800ab76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab78:	6028      	str	r0, [r5, #0]
 800ab7a:	6069      	str	r1, [r5, #4]
 800ab7c:	60aa      	str	r2, [r5, #8]
 800ab7e:	60eb      	str	r3, [r5, #12]
 800ab80:	6820      	ldr	r0, [r4, #0]
 800ab82:	6128      	str	r0, [r5, #16]
 800ab84:	88a3      	ldrh	r3, [r4, #4]
 800ab86:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_NOT_IMPLEMENTED);
	break;
 800ab88:	e00d      	b.n	800aba6 <VL53L0X_get_pal_error_string+0x3aa>

	default:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	4a1b      	ldr	r2, [pc, #108]	; (800abfc <VL53L0X_get_pal_error_string+0x400>)
 800ab8e:	461d      	mov	r5, r3
 800ab90:	4614      	mov	r4, r2
 800ab92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab94:	6028      	str	r0, [r5, #0]
 800ab96:	6069      	str	r1, [r5, #4]
 800ab98:	60aa      	str	r2, [r5, #8]
 800ab9a:	60eb      	str	r3, [r5, #12]
 800ab9c:	8823      	ldrh	r3, [r4, #0]
 800ab9e:	78a2      	ldrb	r2, [r4, #2]
 800aba0:	822b      	strh	r3, [r5, #16]
 800aba2:	4613      	mov	r3, r2
 800aba4:	74ab      	strb	r3, [r5, #18]
				VL53L0X_STRING_UNKNOW_ERROR_CODE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	bcb0      	pop	{r4, r5, r7}
 800abb2:	4770      	bx	lr
 800abb4:	08019c28 	.word	0x08019c28
 800abb8:	08019c34 	.word	0x08019c34
 800abbc:	08019c50 	.word	0x08019c50
 800abc0:	08019c64 	.word	0x08019c64
 800abc4:	08019c74 	.word	0x08019c74
 800abc8:	08019c90 	.word	0x08019c90
 800abcc:	08019ca4 	.word	0x08019ca4
 800abd0:	08019cbc 	.word	0x08019cbc
 800abd4:	08019cc8 	.word	0x08019cc8
 800abd8:	08019cd8 	.word	0x08019cd8
 800abdc:	08019cf4 	.word	0x08019cf4
 800abe0:	08019d08 	.word	0x08019d08
 800abe4:	08019d1c 	.word	0x08019d1c
 800abe8:	08019d38 	.word	0x08019d38
 800abec:	08019d50 	.word	0x08019d50
 800abf0:	08019d68 	.word	0x08019d68
 800abf4:	08019d80 	.word	0x08019d80
 800abf8:	08019d9c 	.word	0x08019d9c
 800abfc:	08019db4 	.word	0x08019db4

0800ac00 <_I2CWrite>:
uint8_t _I2CBuffer[64];

//======================================================================
//
//======================================================================
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af02      	add	r7, sp, #8
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	330a      	adds	r3, #10
 800ac10:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800ac1e:	b299      	uxth	r1, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	f001 fd54 	bl	800c6d8 <HAL_I2C_Master_Transmit>
 800ac30:	4603      	mov	r3, r0
 800ac32:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ac34:	693b      	ldr	r3, [r7, #16]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3718      	adds	r7, #24
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <_I2CRead>:

//======================================================================
//
//======================================================================
int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b088      	sub	sp, #32
 800ac42:	af02      	add	r7, sp, #8
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	330a      	adds	r3, #10
 800ac4e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800ac5c:	f043 0301 	orr.w	r3, r3, #1
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	b299      	uxth	r1, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	f001 fe30 	bl	800c8d4 <HAL_I2C_Master_Receive>
 800ac74:	4603      	mov	r3, r0
 800ac76:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ac78:	693b      	ldr	r3, [r7, #16]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
	...

0800ac84 <VL53L0X_WriteMulti>:

//======================================================================
//
//======================================================================
// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	607a      	str	r2, [r7, #4]
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	460b      	mov	r3, r1
 800ac92:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac94:	2300      	movs	r3, #0
 800ac96:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	2b3f      	cmp	r3, #63	; 0x3f
 800ac9c:	d902      	bls.n	800aca4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ac9e:	f06f 0303 	mvn.w	r3, #3
 800aca2:	e016      	b.n	800acd2 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800aca4:	4a0d      	ldr	r2, [pc, #52]	; (800acdc <VL53L0X_WriteMulti+0x58>)
 800aca6:	7afb      	ldrb	r3, [r7, #11]
 800aca8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	480c      	ldr	r0, [pc, #48]	; (800ace0 <VL53L0X_WriteMulti+0x5c>)
 800acb0:	f009 ff7a 	bl	8014ba8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	3301      	adds	r3, #1
 800acb8:	461a      	mov	r2, r3
 800acba:	4908      	ldr	r1, [pc, #32]	; (800acdc <VL53L0X_WriteMulti+0x58>)
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7ff ff9f 	bl	800ac00 <_I2CWrite>
 800acc2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800acca:	23ec      	movs	r3, #236	; 0xec
 800accc:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800acce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	200021bc 	.word	0x200021bc
 800ace0:	200021bd 	.word	0x200021bd

0800ace4 <VL53L0X_ReadMulti>:

//======================================================================
//
//======================================================================
// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	607a      	str	r2, [r7, #4]
 800acee:	603b      	str	r3, [r7, #0]
 800acf0:	460b      	mov	r3, r1
 800acf2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acf4:	2300      	movs	r3, #0
 800acf6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800acf8:	f107 030b 	add.w	r3, r7, #11
 800acfc:	2201      	movs	r2, #1
 800acfe:	4619      	mov	r1, r3
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7ff ff7d 	bl	800ac00 <_I2CWrite>
 800ad06:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad0e:	23ec      	movs	r3, #236	; 0xec
 800ad10:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ad12:	e00c      	b.n	800ad2e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	6879      	ldr	r1, [r7, #4]
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff ff90 	bl	800ac3e <_I2CRead>
 800ad1e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d002      	beq.n	800ad2c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad26:	23ec      	movs	r3, #236	; 0xec
 800ad28:	75fb      	strb	r3, [r7, #23]
 800ad2a:	e000      	b.n	800ad2e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ad2c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ad2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3718      	adds	r7, #24
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
	...

0800ad3c <VL53L0X_WrByte>:

//======================================================================
//
//======================================================================
VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ad50:	4a0b      	ldr	r2, [pc, #44]	; (800ad80 <VL53L0X_WrByte+0x44>)
 800ad52:	78fb      	ldrb	r3, [r7, #3]
 800ad54:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ad56:	4a0a      	ldr	r2, [pc, #40]	; (800ad80 <VL53L0X_WrByte+0x44>)
 800ad58:	78bb      	ldrb	r3, [r7, #2]
 800ad5a:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	4908      	ldr	r1, [pc, #32]	; (800ad80 <VL53L0X_WrByte+0x44>)
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff ff4d 	bl	800ac00 <_I2CWrite>
 800ad66:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad6e:	23ec      	movs	r3, #236	; 0xec
 800ad70:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ad72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	200021bc 	.word	0x200021bc

0800ad84 <VL53L0X_WrWord>:

//======================================================================
//
//======================================================================
VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	70fb      	strb	r3, [r7, #3]
 800ad90:	4613      	mov	r3, r2
 800ad92:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad94:	2300      	movs	r3, #0
 800ad96:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ad98:	4a0e      	ldr	r2, [pc, #56]	; (800add4 <VL53L0X_WrWord+0x50>)
 800ad9a:	78fb      	ldrb	r3, [r7, #3]
 800ad9c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ad9e:	883b      	ldrh	r3, [r7, #0]
 800ada0:	0a1b      	lsrs	r3, r3, #8
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	4b0b      	ldr	r3, [pc, #44]	; (800add4 <VL53L0X_WrWord+0x50>)
 800ada8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800adaa:	883b      	ldrh	r3, [r7, #0]
 800adac:	b2da      	uxtb	r2, r3
 800adae:	4b09      	ldr	r3, [pc, #36]	; (800add4 <VL53L0X_WrWord+0x50>)
 800adb0:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800adb2:	2203      	movs	r2, #3
 800adb4:	4907      	ldr	r1, [pc, #28]	; (800add4 <VL53L0X_WrWord+0x50>)
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff ff22 	bl	800ac00 <_I2CWrite>
 800adbc:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800adc4:	23ec      	movs	r3, #236	; 0xec
 800adc6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800adc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	200021bc 	.word	0x200021bc

0800add8 <VL53L0X_UpdateByte>:
}

//======================================================================
//
//======================================================================
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	4608      	mov	r0, r1
 800ade2:	4611      	mov	r1, r2
 800ade4:	461a      	mov	r2, r3
 800ade6:	4603      	mov	r3, r0
 800ade8:	70fb      	strb	r3, [r7, #3]
 800adea:	460b      	mov	r3, r1
 800adec:	70bb      	strb	r3, [r7, #2]
 800adee:	4613      	mov	r3, r2
 800adf0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adf2:	2300      	movs	r3, #0
 800adf4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800adf6:	f107 020e 	add.w	r2, r7, #14
 800adfa:	78fb      	ldrb	r3, [r7, #3]
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f81e 	bl	800ae40 <VL53L0X_RdByte>
 800ae04:	4603      	mov	r3, r0
 800ae06:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ae08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d110      	bne.n	800ae32 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ae10:	7bba      	ldrb	r2, [r7, #14]
 800ae12:	78bb      	ldrb	r3, [r7, #2]
 800ae14:	4013      	ands	r3, r2
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	787b      	ldrb	r3, [r7, #1]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ae20:	7bba      	ldrb	r2, [r7, #14]
 800ae22:	78fb      	ldrb	r3, [r7, #3]
 800ae24:	4619      	mov	r1, r3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff ff88 	bl	800ad3c <VL53L0X_WrByte>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73fb      	strb	r3, [r7, #15]
 800ae30:	e000      	b.n	800ae34 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800ae32:	bf00      	nop
done:
    return Status;
 800ae34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <VL53L0X_RdByte>:

//======================================================================
//
//======================================================================
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ae52:	f107 030b 	add.w	r3, r7, #11
 800ae56:	2201      	movs	r2, #1
 800ae58:	4619      	mov	r1, r3
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f7ff fed0 	bl	800ac00 <_I2CWrite>
 800ae60:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d002      	beq.n	800ae6e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae68:	23ec      	movs	r3, #236	; 0xec
 800ae6a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ae6c:	e00c      	b.n	800ae88 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ae6e:	2201      	movs	r2, #1
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7ff fee3 	bl	800ac3e <_I2CRead>
 800ae78:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ae80:	23ec      	movs	r3, #236	; 0xec
 800ae82:	75fb      	strb	r3, [r7, #23]
 800ae84:	e000      	b.n	800ae88 <VL53L0X_RdByte+0x48>
    }
done:
 800ae86:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ae88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <VL53L0X_RdWord>:

//======================================================================
//
//======================================================================
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800aea6:	f107 030b 	add.w	r3, r7, #11
 800aeaa:	2201      	movs	r2, #1
 800aeac:	4619      	mov	r1, r3
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f7ff fea6 	bl	800ac00 <_I2CWrite>
 800aeb4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aebc:	23ec      	movs	r3, #236	; 0xec
 800aebe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aec0:	e017      	b.n	800aef2 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800aec2:	2202      	movs	r2, #2
 800aec4:	490e      	ldr	r1, [pc, #56]	; (800af00 <VL53L0X_RdWord+0x6c>)
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f7ff feb9 	bl	800ac3e <_I2CRead>
 800aecc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aed4:	23ec      	movs	r3, #236	; 0xec
 800aed6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aed8:	e00b      	b.n	800aef2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800aeda:	4b09      	ldr	r3, [pc, #36]	; (800af00 <VL53L0X_RdWord+0x6c>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	b29b      	uxth	r3, r3
 800aee0:	021b      	lsls	r3, r3, #8
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	4b06      	ldr	r3, [pc, #24]	; (800af00 <VL53L0X_RdWord+0x6c>)
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	4413      	add	r3, r2
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800aef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	200021bc 	.word	0x200021bc

0800af04 <VL53L0X_RdDWord>:

//======================================================================
//
//======================================================================
VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	460b      	mov	r3, r1
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af12:	2300      	movs	r3, #0
 800af14:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800af16:	f107 030b 	add.w	r3, r7, #11
 800af1a:	2201      	movs	r2, #1
 800af1c:	4619      	mov	r1, r3
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f7ff fe6e 	bl	800ac00 <_I2CWrite>
 800af24:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af2c:	23ec      	movs	r3, #236	; 0xec
 800af2e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800af30:	e01b      	b.n	800af6a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800af32:	2204      	movs	r2, #4
 800af34:	4910      	ldr	r1, [pc, #64]	; (800af78 <VL53L0X_RdDWord+0x74>)
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f7ff fe81 	bl	800ac3e <_I2CRead>
 800af3c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800af44:	23ec      	movs	r3, #236	; 0xec
 800af46:	75fb      	strb	r3, [r7, #23]
        goto done;
 800af48:	e00f      	b.n	800af6a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800af4a:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <VL53L0X_RdDWord+0x74>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	061a      	lsls	r2, r3, #24
 800af50:	4b09      	ldr	r3, [pc, #36]	; (800af78 <VL53L0X_RdDWord+0x74>)
 800af52:	785b      	ldrb	r3, [r3, #1]
 800af54:	041b      	lsls	r3, r3, #16
 800af56:	441a      	add	r2, r3
 800af58:	4b07      	ldr	r3, [pc, #28]	; (800af78 <VL53L0X_RdDWord+0x74>)
 800af5a:	789b      	ldrb	r3, [r3, #2]
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	4413      	add	r3, r2
 800af60:	4a05      	ldr	r2, [pc, #20]	; (800af78 <VL53L0X_RdDWord+0x74>)
 800af62:	78d2      	ldrb	r2, [r2, #3]
 800af64:	441a      	add	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800af6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	200021bc 	.word	0x200021bc

0800af7c <VL53L0X_PollingDelay>:

//======================================================================
//
//======================================================================
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800af84:	2300      	movs	r3, #0
 800af86:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800af88:	2002      	movs	r0, #2
 800af8a:	f000 ff1d 	bl	800bdc8 <HAL_Delay>
    return status;
 800af8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800afa0:	f000 fed0 	bl	800bd44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800afa4:	f000 f86a 	bl	800b07c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800afa8:	f000 fa9c 	bl	800b4e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800afac:	f000 fa70 	bl	800b490 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800afb0:	f000 f900 	bl	800b1b4 <MX_RTC_Init>
  MX_TIM1_Init();
 800afb4:	f000 f9a0 	bl	800b2f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800afb8:	f000 f9f2 	bl	800b3a0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800afbc:	f000 fa3e 	bl	800b43c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800afc0:	f000 f8ca 	bl	800b158 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  LogInfo_clear();
 800afc4:	f7f7 fc20 	bl	8002808 <LogInfo_clear>
  user_init();		// SK ADDSKprint
 800afc8:	f7f7 ff0c 	bl	8002de4 <user_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800afcc:	f006 fd7e 	bl	8011acc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(void *), &myQueue01_attributes);
 800afd0:	4a1a      	ldr	r2, [pc, #104]	; (800b03c <main+0xa0>)
 800afd2:	2104      	movs	r1, #4
 800afd4:	2010      	movs	r0, #16
 800afd6:	f006 fe70 	bl	8011cba <osMessageQueueNew>
 800afda:	4603      	mov	r3, r0
 800afdc:	4a18      	ldr	r2, [pc, #96]	; (800b040 <main+0xa4>)
 800afde:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(void *), &myQueue02_attributes);
 800afe0:	4a18      	ldr	r2, [pc, #96]	; (800b044 <main+0xa8>)
 800afe2:	2104      	movs	r1, #4
 800afe4:	2010      	movs	r0, #16
 800afe6:	f006 fe68 	bl	8011cba <osMessageQueueNew>
 800afea:	4603      	mov	r3, r0
 800afec:	4a16      	ldr	r2, [pc, #88]	; (800b048 <main+0xac>)
 800afee:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (16, sizeof(void *), &myQueue03_attributes);
 800aff0:	4a16      	ldr	r2, [pc, #88]	; (800b04c <main+0xb0>)
 800aff2:	2104      	movs	r1, #4
 800aff4:	2010      	movs	r0, #16
 800aff6:	f006 fe60 	bl	8011cba <osMessageQueueNew>
 800affa:	4603      	mov	r3, r0
 800affc:	4a14      	ldr	r2, [pc, #80]	; (800b050 <main+0xb4>)
 800affe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_main */
  Task_mainHandle = osThreadNew(StartDefaultTask, NULL, &Task_main_attributes);
 800b000:	4a14      	ldr	r2, [pc, #80]	; (800b054 <main+0xb8>)
 800b002:	2100      	movs	r1, #0
 800b004:	4814      	ldr	r0, [pc, #80]	; (800b058 <main+0xbc>)
 800b006:	f006 fdab 	bl	8011b60 <osThreadNew>
 800b00a:	4603      	mov	r3, r0
 800b00c:	4a13      	ldr	r2, [pc, #76]	; (800b05c <main+0xc0>)
 800b00e:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub1 */
  Task_sub1Handle = osThreadNew(StartTask02, NULL, &Task_sub1_attributes);
 800b010:	4a13      	ldr	r2, [pc, #76]	; (800b060 <main+0xc4>)
 800b012:	2100      	movs	r1, #0
 800b014:	4813      	ldr	r0, [pc, #76]	; (800b064 <main+0xc8>)
 800b016:	f006 fda3 	bl	8011b60 <osThreadNew>
 800b01a:	4603      	mov	r3, r0
 800b01c:	4a12      	ldr	r2, [pc, #72]	; (800b068 <main+0xcc>)
 800b01e:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub2 */
  Task_sub2Handle = osThreadNew(StartTask03, NULL, &Task_sub2_attributes);
 800b020:	4a12      	ldr	r2, [pc, #72]	; (800b06c <main+0xd0>)
 800b022:	2100      	movs	r1, #0
 800b024:	4812      	ldr	r0, [pc, #72]	; (800b070 <main+0xd4>)
 800b026:	f006 fd9b 	bl	8011b60 <osThreadNew>
 800b02a:	4603      	mov	r3, r0
 800b02c:	4a11      	ldr	r2, [pc, #68]	; (800b074 <main+0xd8>)
 800b02e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  SKprintf("osKernelStart()\r\n");
 800b030:	4811      	ldr	r0, [pc, #68]	; (800b078 <main+0xdc>)
 800b032:	f7f9 f8ff 	bl	8004234 <SKprintf>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800b036:	f006 fd6d 	bl	8011b14 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b03a:	e7fe      	b.n	800b03a <main+0x9e>
 800b03c:	0801a454 	.word	0x0801a454
 800b040:	20002394 	.word	0x20002394
 800b044:	0801a46c 	.word	0x0801a46c
 800b048:	20002398 	.word	0x20002398
 800b04c:	0801a484 	.word	0x0801a484
 800b050:	2000239c 	.word	0x2000239c
 800b054:	0801a3e8 	.word	0x0801a3e8
 800b058:	0800b5e9 	.word	0x0800b5e9
 800b05c:	20002388 	.word	0x20002388
 800b060:	0801a40c 	.word	0x0801a40c
 800b064:	0800b609 	.word	0x0800b609
 800b068:	2000238c 	.word	0x2000238c
 800b06c:	0801a430 	.word	0x0801a430
 800b070:	0800b631 	.word	0x0800b631
 800b074:	20002390 	.word	0x20002390
 800b078:	08019e10 	.word	0x08019e10

0800b07c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b094      	sub	sp, #80	; 0x50
 800b080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b082:	f107 0320 	add.w	r3, r7, #32
 800b086:	2230      	movs	r2, #48	; 0x30
 800b088:	2100      	movs	r1, #0
 800b08a:	4618      	mov	r0, r3
 800b08c:	f009 fd9a 	bl	8014bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b090:	f107 030c 	add.w	r3, r7, #12
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	605a      	str	r2, [r3, #4]
 800b09a:	609a      	str	r2, [r3, #8]
 800b09c:	60da      	str	r2, [r3, #12]
 800b09e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	60bb      	str	r3, [r7, #8]
 800b0a4:	4b2a      	ldr	r3, [pc, #168]	; (800b150 <SystemClock_Config+0xd4>)
 800b0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a8:	4a29      	ldr	r2, [pc, #164]	; (800b150 <SystemClock_Config+0xd4>)
 800b0aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0ae:	6413      	str	r3, [r2, #64]	; 0x40
 800b0b0:	4b27      	ldr	r3, [pc, #156]	; (800b150 <SystemClock_Config+0xd4>)
 800b0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0b8:	60bb      	str	r3, [r7, #8]
 800b0ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800b0bc:	2300      	movs	r3, #0
 800b0be:	607b      	str	r3, [r7, #4]
 800b0c0:	4b24      	ldr	r3, [pc, #144]	; (800b154 <SystemClock_Config+0xd8>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b0c8:	4a22      	ldr	r2, [pc, #136]	; (800b154 <SystemClock_Config+0xd8>)
 800b0ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	4b20      	ldr	r3, [pc, #128]	; (800b154 <SystemClock_Config+0xd8>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b0d8:	607b      	str	r3, [r7, #4]
 800b0da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800b0dc:	2306      	movs	r3, #6
 800b0de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b0e8:	2310      	movs	r3, #16
 800b0ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800b0f4:	2310      	movs	r3, #16
 800b0f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800b0f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800b0fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800b0fe:	2304      	movs	r3, #4
 800b100:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800b102:	2307      	movs	r3, #7
 800b104:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b106:	f107 0320 	add.w	r3, r7, #32
 800b10a:	4618      	mov	r0, r3
 800b10c:	f003 fe10 	bl	800ed30 <HAL_RCC_OscConfig>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800b116:	f000 fab1 	bl	800b67c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b11a:	230f      	movs	r3, #15
 800b11c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b11e:	2302      	movs	r3, #2
 800b120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b122:	2300      	movs	r3, #0
 800b124:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b12a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b12c:	2300      	movs	r3, #0
 800b12e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b130:	f107 030c 	add.w	r3, r7, #12
 800b134:	2102      	movs	r1, #2
 800b136:	4618      	mov	r0, r3
 800b138:	f004 f872 	bl	800f220 <HAL_RCC_ClockConfig>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800b142:	f000 fa9b 	bl	800b67c <Error_Handler>
  }
}
 800b146:	bf00      	nop
 800b148:	3750      	adds	r7, #80	; 0x50
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	40023800 	.word	0x40023800
 800b154:	40007000 	.word	0x40007000

0800b158 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800b15c:	4b12      	ldr	r3, [pc, #72]	; (800b1a8 <MX_I2C1_Init+0x50>)
 800b15e:	4a13      	ldr	r2, [pc, #76]	; (800b1ac <MX_I2C1_Init+0x54>)
 800b160:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800b162:	4b11      	ldr	r3, [pc, #68]	; (800b1a8 <MX_I2C1_Init+0x50>)
 800b164:	4a12      	ldr	r2, [pc, #72]	; (800b1b0 <MX_I2C1_Init+0x58>)
 800b166:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b168:	4b0f      	ldr	r3, [pc, #60]	; (800b1a8 <MX_I2C1_Init+0x50>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b16e:	4b0e      	ldr	r3, [pc, #56]	; (800b1a8 <MX_I2C1_Init+0x50>)
 800b170:	2200      	movs	r2, #0
 800b172:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b174:	4b0c      	ldr	r3, [pc, #48]	; (800b1a8 <MX_I2C1_Init+0x50>)
 800b176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b17a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b17c:	4b0a      	ldr	r3, [pc, #40]	; (800b1a8 <MX_I2C1_Init+0x50>)
 800b17e:	2200      	movs	r2, #0
 800b180:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b182:	4b09      	ldr	r3, [pc, #36]	; (800b1a8 <MX_I2C1_Init+0x50>)
 800b184:	2200      	movs	r2, #0
 800b186:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b188:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <MX_I2C1_Init+0x50>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b18e:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <MX_I2C1_Init+0x50>)
 800b190:	2200      	movs	r2, #0
 800b192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b194:	4804      	ldr	r0, [pc, #16]	; (800b1a8 <MX_I2C1_Init+0x50>)
 800b196:	f001 f95b 	bl	800c450 <HAL_I2C_Init>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800b1a0:	f000 fa6c 	bl	800b67c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800b1a4:	bf00      	nop
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	200021fc 	.word	0x200021fc
 800b1ac:	40005400 	.word	0x40005400
 800b1b0:	00061a80 	.word	0x00061a80

0800b1b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b08c      	sub	sp, #48	; 0x30
 800b1b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800b1ba:	f107 031c 	add.w	r3, r7, #28
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	605a      	str	r2, [r3, #4]
 800b1c4:	609a      	str	r2, [r3, #8]
 800b1c6:	60da      	str	r2, [r3, #12]
 800b1c8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	61bb      	str	r3, [r7, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800b1ce:	4b48      	ldr	r3, [pc, #288]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b1d0:	4a48      	ldr	r2, [pc, #288]	; (800b2f4 <MX_RTC_Init+0x140>)
 800b1d2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b1d4:	4b46      	ldr	r3, [pc, #280]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b1da:	4b45      	ldr	r3, [pc, #276]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b1dc:	227f      	movs	r2, #127	; 0x7f
 800b1de:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b1e0:	4b43      	ldr	r3, [pc, #268]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b1e2:	22ff      	movs	r2, #255	; 0xff
 800b1e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b1e6:	4b42      	ldr	r3, [pc, #264]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b1ec:	4b40      	ldr	r3, [pc, #256]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b1f2:	4b3f      	ldr	r3, [pc, #252]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b1f8:	483d      	ldr	r0, [pc, #244]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b1fa:	f004 fb51 	bl	800f8a0 <HAL_RTC_Init>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 800b204:	f000 fa3a 	bl	800b67c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800b208:	2300      	movs	r3, #0
 800b20a:	773b      	strb	r3, [r7, #28]
  sTime.Minutes = 0x0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	777b      	strb	r3, [r7, #29]
  sTime.Seconds = 0x0;
 800b210:	2300      	movs	r3, #0
 800b212:	77bb      	strb	r3, [r7, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b214:	2300      	movs	r3, #0
 800b216:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b218:	2300      	movs	r3, #0
 800b21a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800b21c:	f107 031c 	add.w	r3, r7, #28
 800b220:	2201      	movs	r2, #1
 800b222:	4619      	mov	r1, r3
 800b224:	4832      	ldr	r0, [pc, #200]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b226:	f004 fbb1 	bl	800f98c <HAL_RTC_SetTime>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 800b230:	f000 fa24 	bl	800b67c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800b234:	2301      	movs	r3, #1
 800b236:	763b      	strb	r3, [r7, #24]
  sDate.Month = RTC_MONTH_JANUARY;
 800b238:	2301      	movs	r3, #1
 800b23a:	767b      	strb	r3, [r7, #25]
  sDate.Date = 0x1;
 800b23c:	2301      	movs	r3, #1
 800b23e:	76bb      	strb	r3, [r7, #26]
  sDate.Year = 0x0;
 800b240:	2300      	movs	r3, #0
 800b242:	76fb      	strb	r3, [r7, #27]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800b244:	f107 0318 	add.w	r3, r7, #24
 800b248:	2201      	movs	r2, #1
 800b24a:	4619      	mov	r1, r3
 800b24c:	4828      	ldr	r0, [pc, #160]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b24e:	f004 fc95 	bl	800fb7c <HAL_RTC_SetDate>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800b258:	f000 fa10 	bl	800b67c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800b25c:	2204      	movs	r2, #4
 800b25e:	2100      	movs	r1, #0
 800b260:	4823      	ldr	r0, [pc, #140]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b262:	f004 fe1b 	bl	800fe9c <HAL_RTCEx_SetWakeUpTimer_IT>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800b26c:	f000 fa06 	bl	800b67c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#define MAGIC_NO 0x12a5			// SK ADD

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != MAGIC_NO)
 800b270:	2100      	movs	r1, #0
 800b272:	481f      	ldr	r0, [pc, #124]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b274:	f004 ff10 	bl	8010098 <HAL_RTCEx_BKUPRead>
 800b278:	4603      	mov	r3, r0
 800b27a:	f241 22a5 	movw	r2, #4773	; 0x12a5
 800b27e:	4293      	cmp	r3, r2
 800b280:	d032      	beq.n	800b2e8 <MX_RTC_Init+0x134>
  {
    RTC_TimeTypeDef sTime = {0};
 800b282:	1d3b      	adds	r3, r7, #4
 800b284:	2200      	movs	r2, #0
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	605a      	str	r2, [r3, #4]
 800b28a:	609a      	str	r2, [r3, #8]
 800b28c:	60da      	str	r2, [r3, #12]
 800b28e:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 800b290:	2300      	movs	r3, #0
 800b292:	603b      	str	r3, [r7, #0]

    sTime.Hours = 1;
 800b294:	2301      	movs	r3, #1
 800b296:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	71bb      	strb	r3, [r7, #6]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800b2a0:	1d3b      	adds	r3, r7, #4
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4812      	ldr	r0, [pc, #72]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b2a8:	f004 fb70 	bl	800f98c <HAL_RTC_SetTime>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <MX_RTC_Init+0x102>
    {
      Error_Handler();
 800b2b2:	f000 f9e3 	bl	800b67c <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	707b      	strb	r3, [r7, #1]
    sDate.Date = 1;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 20;
 800b2c2:	2314      	movs	r3, #20
 800b2c4:	70fb      	strb	r3, [r7, #3]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800b2c6:	463b      	mov	r3, r7
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4808      	ldr	r0, [pc, #32]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b2ce:	f004 fc55 	bl	800fb7c <HAL_RTC_SetDate>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <MX_RTC_Init+0x128>
    {
      Error_Handler();
 800b2d8:	f000 f9d0 	bl	800b67c <Error_Handler>

    }
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, MAGIC_NO);
 800b2dc:	f241 22a5 	movw	r2, #4773	; 0x12a5
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	4803      	ldr	r0, [pc, #12]	; (800b2f0 <MX_RTC_Init+0x13c>)
 800b2e4:	f004 febe 	bl	8010064 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 800b2e8:	bf00      	nop
 800b2ea:	3730      	adds	r7, #48	; 0x30
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20002250 	.word	0x20002250
 800b2f4:	40002800 	.word	0x40002800

0800b2f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b2fe:	f107 0308 	add.w	r3, r7, #8
 800b302:	2200      	movs	r2, #0
 800b304:	601a      	str	r2, [r3, #0]
 800b306:	605a      	str	r2, [r3, #4]
 800b308:	609a      	str	r2, [r3, #8]
 800b30a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b30c:	463b      	mov	r3, r7
 800b30e:	2200      	movs	r2, #0
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b314:	4b20      	ldr	r3, [pc, #128]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b316:	4a21      	ldr	r2, [pc, #132]	; (800b39c <MX_TIM1_Init+0xa4>)
 800b318:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800b31a:	4b1f      	ldr	r3, [pc, #124]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b31c:	f640 729f 	movw	r2, #3999	; 0xf9f
 800b320:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b322:	4b1d      	ldr	r3, [pc, #116]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b324:	2200      	movs	r2, #0
 800b326:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 800b328:	4b1b      	ldr	r3, [pc, #108]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b32a:	f245 2207 	movw	r2, #20999	; 0x5207
 800b32e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b330:	4b19      	ldr	r3, [pc, #100]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b332:	2200      	movs	r2, #0
 800b334:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b336:	4b18      	ldr	r3, [pc, #96]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b338:	2200      	movs	r2, #0
 800b33a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b33c:	4b16      	ldr	r3, [pc, #88]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b33e:	2200      	movs	r2, #0
 800b340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b342:	4815      	ldr	r0, [pc, #84]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b344:	f004 fec0 	bl	80100c8 <HAL_TIM_Base_Init>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800b34e:	f000 f995 	bl	800b67c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b358:	f107 0308 	add.w	r3, r7, #8
 800b35c:	4619      	mov	r1, r3
 800b35e:	480e      	ldr	r0, [pc, #56]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b360:	f005 f86c 	bl	801043c <HAL_TIM_ConfigClockSource>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d001      	beq.n	800b36e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800b36a:	f000 f987 	bl	800b67c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b36e:	2300      	movs	r3, #0
 800b370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b372:	2300      	movs	r3, #0
 800b374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b376:	463b      	mov	r3, r7
 800b378:	4619      	mov	r1, r3
 800b37a:	4807      	ldr	r0, [pc, #28]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b37c:	f005 fa68 	bl	8010850 <HAL_TIMEx_MasterConfigSynchronization>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800b386:	f000 f979 	bl	800b67c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);    // SK ADD
 800b38a:	4803      	ldr	r0, [pc, #12]	; (800b398 <MX_TIM1_Init+0xa0>)
 800b38c:	f004 feec 	bl	8010168 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 800b390:	bf00      	nop
 800b392:	3718      	adds	r7, #24
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	20002270 	.word	0x20002270
 800b39c:	40010000 	.word	0x40010000

0800b3a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b3a6:	f107 0308 	add.w	r3, r7, #8
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	605a      	str	r2, [r3, #4]
 800b3b0:	609a      	str	r2, [r3, #8]
 800b3b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b3b4:	463b      	mov	r3, r7
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b3bc:	4b1e      	ldr	r3, [pc, #120]	; (800b438 <MX_TIM2_Init+0x98>)
 800b3be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b3c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 800b3c4:	4b1c      	ldr	r3, [pc, #112]	; (800b438 <MX_TIM2_Init+0x98>)
 800b3c6:	2203      	movs	r2, #3
 800b3c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b3ca:	4b1b      	ldr	r3, [pc, #108]	; (800b438 <MX_TIM2_Init+0x98>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 209;
 800b3d0:	4b19      	ldr	r3, [pc, #100]	; (800b438 <MX_TIM2_Init+0x98>)
 800b3d2:	22d1      	movs	r2, #209	; 0xd1
 800b3d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b3d6:	4b18      	ldr	r3, [pc, #96]	; (800b438 <MX_TIM2_Init+0x98>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b3dc:	4b16      	ldr	r3, [pc, #88]	; (800b438 <MX_TIM2_Init+0x98>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b3e2:	4815      	ldr	r0, [pc, #84]	; (800b438 <MX_TIM2_Init+0x98>)
 800b3e4:	f004 fe70 	bl	80100c8 <HAL_TIM_Base_Init>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800b3ee:	f000 f945 	bl	800b67c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b3f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b3f8:	f107 0308 	add.w	r3, r7, #8
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	480e      	ldr	r0, [pc, #56]	; (800b438 <MX_TIM2_Init+0x98>)
 800b400:	f005 f81c 	bl	801043c <HAL_TIM_ConfigClockSource>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800b40a:	f000 f937 	bl	800b67c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b40e:	2300      	movs	r3, #0
 800b410:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b412:	2300      	movs	r3, #0
 800b414:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b416:	463b      	mov	r3, r7
 800b418:	4619      	mov	r1, r3
 800b41a:	4807      	ldr	r0, [pc, #28]	; (800b438 <MX_TIM2_Init+0x98>)
 800b41c:	f005 fa18 	bl	8010850 <HAL_TIMEx_MasterConfigSynchronization>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800b426:	f000 f929 	bl	800b67c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);    // SK ADD
 800b42a:	4803      	ldr	r0, [pc, #12]	; (800b438 <MX_TIM2_Init+0x98>)
 800b42c:	f004 fe9c 	bl	8010168 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 800b430:	bf00      	nop
 800b432:	3718      	adds	r7, #24
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	200022b8 	.word	0x200022b8

0800b43c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b440:	4b11      	ldr	r3, [pc, #68]	; (800b488 <MX_USART1_UART_Init+0x4c>)
 800b442:	4a12      	ldr	r2, [pc, #72]	; (800b48c <MX_USART1_UART_Init+0x50>)
 800b444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800b446:	4b10      	ldr	r3, [pc, #64]	; (800b488 <MX_USART1_UART_Init+0x4c>)
 800b448:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800b44c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b44e:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <MX_USART1_UART_Init+0x4c>)
 800b450:	2200      	movs	r2, #0
 800b452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b454:	4b0c      	ldr	r3, [pc, #48]	; (800b488 <MX_USART1_UART_Init+0x4c>)
 800b456:	2200      	movs	r2, #0
 800b458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b45a:	4b0b      	ldr	r3, [pc, #44]	; (800b488 <MX_USART1_UART_Init+0x4c>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b460:	4b09      	ldr	r3, [pc, #36]	; (800b488 <MX_USART1_UART_Init+0x4c>)
 800b462:	220c      	movs	r2, #12
 800b464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b466:	4b08      	ldr	r3, [pc, #32]	; (800b488 <MX_USART1_UART_Init+0x4c>)
 800b468:	2200      	movs	r2, #0
 800b46a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <MX_USART1_UART_Init+0x4c>)
 800b46e:	2200      	movs	r2, #0
 800b470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b472:	4805      	ldr	r0, [pc, #20]	; (800b488 <MX_USART1_UART_Init+0x4c>)
 800b474:	f005 fa6e 	bl	8010954 <HAL_UART_Init>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b47e:	f000 f8fd 	bl	800b67c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b482:	bf00      	nop
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	20002300 	.word	0x20002300
 800b48c:	40011000 	.word	0x40011000

0800b490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b494:	4b11      	ldr	r3, [pc, #68]	; (800b4dc <MX_USART2_UART_Init+0x4c>)
 800b496:	4a12      	ldr	r2, [pc, #72]	; (800b4e0 <MX_USART2_UART_Init+0x50>)
 800b498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b49a:	4b10      	ldr	r3, [pc, #64]	; (800b4dc <MX_USART2_UART_Init+0x4c>)
 800b49c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b4a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b4a2:	4b0e      	ldr	r3, [pc, #56]	; (800b4dc <MX_USART2_UART_Init+0x4c>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <MX_USART2_UART_Init+0x4c>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b4ae:	4b0b      	ldr	r3, [pc, #44]	; (800b4dc <MX_USART2_UART_Init+0x4c>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b4b4:	4b09      	ldr	r3, [pc, #36]	; (800b4dc <MX_USART2_UART_Init+0x4c>)
 800b4b6:	220c      	movs	r2, #12
 800b4b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b4ba:	4b08      	ldr	r3, [pc, #32]	; (800b4dc <MX_USART2_UART_Init+0x4c>)
 800b4bc:	2200      	movs	r2, #0
 800b4be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b4c0:	4b06      	ldr	r3, [pc, #24]	; (800b4dc <MX_USART2_UART_Init+0x4c>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b4c6:	4805      	ldr	r0, [pc, #20]	; (800b4dc <MX_USART2_UART_Init+0x4c>)
 800b4c8:	f005 fa44 	bl	8010954 <HAL_UART_Init>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800b4d2:	f000 f8d3 	bl	800b67c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b4d6:	bf00      	nop
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20002344 	.word	0x20002344
 800b4e0:	40004400 	.word	0x40004400

0800b4e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b08a      	sub	sp, #40	; 0x28
 800b4e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4ea:	f107 0314 	add.w	r3, r7, #20
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	605a      	str	r2, [r3, #4]
 800b4f4:	609a      	str	r2, [r3, #8]
 800b4f6:	60da      	str	r2, [r3, #12]
 800b4f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	613b      	str	r3, [r7, #16]
 800b4fe:	4b37      	ldr	r3, [pc, #220]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b502:	4a36      	ldr	r2, [pc, #216]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b504:	f043 0304 	orr.w	r3, r3, #4
 800b508:	6313      	str	r3, [r2, #48]	; 0x30
 800b50a:	4b34      	ldr	r3, [pc, #208]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	613b      	str	r3, [r7, #16]
 800b514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b516:	2300      	movs	r3, #0
 800b518:	60fb      	str	r3, [r7, #12]
 800b51a:	4b30      	ldr	r3, [pc, #192]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51e:	4a2f      	ldr	r2, [pc, #188]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b524:	6313      	str	r3, [r2, #48]	; 0x30
 800b526:	4b2d      	ldr	r3, [pc, #180]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b532:	2300      	movs	r3, #0
 800b534:	60bb      	str	r3, [r7, #8]
 800b536:	4b29      	ldr	r3, [pc, #164]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53a:	4a28      	ldr	r2, [pc, #160]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b53c:	f043 0301 	orr.w	r3, r3, #1
 800b540:	6313      	str	r3, [r2, #48]	; 0x30
 800b542:	4b26      	ldr	r3, [pc, #152]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b546:	f003 0301 	and.w	r3, r3, #1
 800b54a:	60bb      	str	r3, [r7, #8]
 800b54c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b54e:	2300      	movs	r3, #0
 800b550:	607b      	str	r3, [r7, #4]
 800b552:	4b22      	ldr	r3, [pc, #136]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b556:	4a21      	ldr	r2, [pc, #132]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b558:	f043 0302 	orr.w	r3, r3, #2
 800b55c:	6313      	str	r3, [r2, #48]	; 0x30
 800b55e:	4b1f      	ldr	r3, [pc, #124]	; (800b5dc <MX_GPIO_Init+0xf8>)
 800b560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b562:	f003 0302 	and.w	r3, r3, #2
 800b566:	607b      	str	r3, [r7, #4]
 800b568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIM1_PLS_GPIO_Port, TIM1_PLS_Pin, GPIO_PIN_RESET);
 800b56a:	2200      	movs	r2, #0
 800b56c:	2104      	movs	r1, #4
 800b56e:	481c      	ldr	r0, [pc, #112]	; (800b5e0 <MX_GPIO_Init+0xfc>)
 800b570:	f000 ff54 	bl	800c41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800b574:	2200      	movs	r2, #0
 800b576:	2120      	movs	r1, #32
 800b578:	481a      	ldr	r0, [pc, #104]	; (800b5e4 <MX_GPIO_Init+0x100>)
 800b57a:	f000 ff4f 	bl	800c41c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800b57e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b584:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800b588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b58a:	2300      	movs	r3, #0
 800b58c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800b58e:	f107 0314 	add.w	r3, r7, #20
 800b592:	4619      	mov	r1, r3
 800b594:	4812      	ldr	r0, [pc, #72]	; (800b5e0 <MX_GPIO_Init+0xfc>)
 800b596:	f000 fdbd 	bl	800c114 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM1_PLS_Pin */
  GPIO_InitStruct.Pin = TIM1_PLS_Pin;
 800b59a:	2304      	movs	r3, #4
 800b59c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIM1_PLS_GPIO_Port, &GPIO_InitStruct);
 800b5aa:	f107 0314 	add.w	r3, r7, #20
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	480b      	ldr	r0, [pc, #44]	; (800b5e0 <MX_GPIO_Init+0xfc>)
 800b5b2:	f000 fdaf 	bl	800c114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800b5b6:	2320      	movs	r3, #32
 800b5b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800b5c6:	f107 0314 	add.w	r3, r7, #20
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	4805      	ldr	r0, [pc, #20]	; (800b5e4 <MX_GPIO_Init+0x100>)
 800b5ce:	f000 fda1 	bl	800c114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800b5d2:	bf00      	nop
 800b5d4:	3728      	adds	r7, #40	; 0x28
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	40023800 	.word	0x40023800
 800b5e0:	40020800 	.word	0x40020800
 800b5e4:	40020000 	.word	0x40020000

0800b5e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	task_chk_init();
 800b5f0:	f7f7 f946 	bl	8002880 <task_chk_init>
  /* Infinite loop */
  for(;;)
  {
//	  rtc_display();
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  task_stack_chk();
 800b5f4:	f7f7 fa2a 	bl	8002a4c <task_stack_chk>
	  vl53_main();
 800b5f8:	f7f8 ffcc 	bl	8004594 <vl53_main>

    osDelay(1000);
 800b5fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b600:	f006 fb40 	bl	8011c84 <osDelay>
	  task_stack_chk();
 800b604:	e7f6      	b.n	800b5f4 <StartDefaultTask+0xc>
	...

0800b608 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	 SKprintf("task2 start()\r\n");
 800b610:	4805      	ldr	r0, [pc, #20]	; (800b628 <StartTask02+0x20>)
 800b612:	f7f8 fe0f 	bl	8004234 <SKprintf>




	 SKprintf("task2 loop()\r\n");
 800b616:	4805      	ldr	r0, [pc, #20]	; (800b62c <StartTask02+0x24>)
 800b618:	f7f8 fe0c 	bl	8004234 <SKprintf>
  /* Infinite loop */
  for(;;)
  {
	  //task_stack_chk();
	  debu_main();
 800b61c:	f7f5 fc5e 	bl	8000edc <debu_main>
	  TimerEventCtrl();
 800b620:	f7f7 fca8 	bl	8002f74 <TimerEventCtrl>
  {
 800b624:	e7fa      	b.n	800b61c <StartTask02+0x14>
 800b626:	bf00      	nop
 800b628:	08019e24 	.word	0x08019e24
 800b62c:	08019e34 	.word	0x08019e34

0800b630 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
__weak void StartTask03(void *argument)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
    osDelay(100);
 800b638:	2064      	movs	r0, #100	; 0x64
 800b63a:	f006 fb23 	bl	8011c84 <osDelay>
    //char c[2];

	//SKprintf_uart1("===================\r\n");
	SKprintf_uart1("=== UART1 START ===\r\n");
 800b63e:	4805      	ldr	r0, [pc, #20]	; (800b654 <StartTask03+0x24>)
 800b640:	f7f8 fdb4 	bl	80041ac <SKprintf_uart1>
	//SKprintf_uart1("===================\r\n");
	tasuk3_init();
 800b644:	f7f7 fd58 	bl	80030f8 <tasuk3_init>

	/* Infinite loop */

	for(;;)
	{
		rs485_com_task();
 800b648:	f7f7 ff64 	bl	8003514 <rs485_com_task>
		osDelay(100);
 800b64c:	2064      	movs	r0, #100	; 0x64
 800b64e:	f006 fb19 	bl	8011c84 <osDelay>
		rs485_com_task();
 800b652:	e7f9      	b.n	800b648 <StartTask03+0x18>
 800b654:	08019e44 	.word	0x08019e44

0800b658 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a04      	ldr	r2, [pc, #16]	; (800b678 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d101      	bne.n	800b66e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b66a:	f000 fb8d 	bl	800bd88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	40014400 	.word	0x40014400

0800b67c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b67c:	b480      	push	{r7}
 800b67e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b680:	b672      	cpsid	i
}
 800b682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b684:	e7fe      	b.n	800b684 <Error_Handler+0x8>
	...

0800b688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b68e:	2300      	movs	r3, #0
 800b690:	607b      	str	r3, [r7, #4]
 800b692:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <HAL_MspInit+0x54>)
 800b694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b696:	4a11      	ldr	r2, [pc, #68]	; (800b6dc <HAL_MspInit+0x54>)
 800b698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b69c:	6453      	str	r3, [r2, #68]	; 0x44
 800b69e:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <HAL_MspInit+0x54>)
 800b6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6a6:	607b      	str	r3, [r7, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	603b      	str	r3, [r7, #0]
 800b6ae:	4b0b      	ldr	r3, [pc, #44]	; (800b6dc <HAL_MspInit+0x54>)
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b2:	4a0a      	ldr	r2, [pc, #40]	; (800b6dc <HAL_MspInit+0x54>)
 800b6b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6b8:	6413      	str	r3, [r2, #64]	; 0x40
 800b6ba:	4b08      	ldr	r3, [pc, #32]	; (800b6dc <HAL_MspInit+0x54>)
 800b6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6c2:	603b      	str	r3, [r7, #0]
 800b6c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	210f      	movs	r1, #15
 800b6ca:	f06f 0001 	mvn.w	r0, #1
 800b6ce:	f000 fc57 	bl	800bf80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	40023800 	.word	0x40023800

0800b6e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b08a      	sub	sp, #40	; 0x28
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6e8:	f107 0314 	add.w	r3, r7, #20
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	601a      	str	r2, [r3, #0]
 800b6f0:	605a      	str	r2, [r3, #4]
 800b6f2:	609a      	str	r2, [r3, #8]
 800b6f4:	60da      	str	r2, [r3, #12]
 800b6f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a21      	ldr	r2, [pc, #132]	; (800b784 <HAL_I2C_MspInit+0xa4>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d13b      	bne.n	800b77a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b702:	2300      	movs	r3, #0
 800b704:	613b      	str	r3, [r7, #16]
 800b706:	4b20      	ldr	r3, [pc, #128]	; (800b788 <HAL_I2C_MspInit+0xa8>)
 800b708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70a:	4a1f      	ldr	r2, [pc, #124]	; (800b788 <HAL_I2C_MspInit+0xa8>)
 800b70c:	f043 0302 	orr.w	r3, r3, #2
 800b710:	6313      	str	r3, [r2, #48]	; 0x30
 800b712:	4b1d      	ldr	r3, [pc, #116]	; (800b788 <HAL_I2C_MspInit+0xa8>)
 800b714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b716:	f003 0302 	and.w	r3, r3, #2
 800b71a:	613b      	str	r3, [r7, #16]
 800b71c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b71e:	23c0      	movs	r3, #192	; 0xc0
 800b720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b722:	2312      	movs	r3, #18
 800b724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b726:	2300      	movs	r3, #0
 800b728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b72a:	2303      	movs	r3, #3
 800b72c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b72e:	2304      	movs	r3, #4
 800b730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b732:	f107 0314 	add.w	r3, r7, #20
 800b736:	4619      	mov	r1, r3
 800b738:	4814      	ldr	r0, [pc, #80]	; (800b78c <HAL_I2C_MspInit+0xac>)
 800b73a:	f000 fceb 	bl	800c114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b73e:	2300      	movs	r3, #0
 800b740:	60fb      	str	r3, [r7, #12]
 800b742:	4b11      	ldr	r3, [pc, #68]	; (800b788 <HAL_I2C_MspInit+0xa8>)
 800b744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b746:	4a10      	ldr	r2, [pc, #64]	; (800b788 <HAL_I2C_MspInit+0xa8>)
 800b748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b74c:	6413      	str	r3, [r2, #64]	; 0x40
 800b74e:	4b0e      	ldr	r3, [pc, #56]	; (800b788 <HAL_I2C_MspInit+0xa8>)
 800b750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b756:	60fb      	str	r3, [r7, #12]
 800b758:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800b75a:	2200      	movs	r2, #0
 800b75c:	2105      	movs	r1, #5
 800b75e:	201f      	movs	r0, #31
 800b760:	f000 fc0e 	bl	800bf80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b764:	201f      	movs	r0, #31
 800b766:	f000 fc27 	bl	800bfb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800b76a:	2200      	movs	r2, #0
 800b76c:	2105      	movs	r1, #5
 800b76e:	2020      	movs	r0, #32
 800b770:	f000 fc06 	bl	800bf80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800b774:	2020      	movs	r0, #32
 800b776:	f000 fc1f 	bl	800bfb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800b77a:	bf00      	nop
 800b77c:	3728      	adds	r7, #40	; 0x28
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	40005400 	.word	0x40005400
 800b788:	40023800 	.word	0x40023800
 800b78c:	40020400 	.word	0x40020400

0800b790 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b798:	f107 030c 	add.w	r3, r7, #12
 800b79c:	2200      	movs	r2, #0
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	605a      	str	r2, [r3, #4]
 800b7a2:	609a      	str	r2, [r3, #8]
 800b7a4:	60da      	str	r2, [r3, #12]
 800b7a6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a10      	ldr	r2, [pc, #64]	; (800b7f0 <HAL_RTC_MspInit+0x60>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d119      	bne.n	800b7e6 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b7b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7ba:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b7bc:	f107 030c 	add.w	r3, r7, #12
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f003 ff7f 	bl	800f6c4 <HAL_RCCEx_PeriphCLKConfig>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800b7cc:	f7ff ff56 	bl	800b67c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b7d0:	4b08      	ldr	r3, [pc, #32]	; (800b7f4 <HAL_RTC_MspInit+0x64>)
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2105      	movs	r1, #5
 800b7da:	2003      	movs	r0, #3
 800b7dc:	f000 fbd0 	bl	800bf80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800b7e0:	2003      	movs	r0, #3
 800b7e2:	f000 fbe9 	bl	800bfb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b7e6:	bf00      	nop
 800b7e8:	3720      	adds	r7, #32
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	40002800 	.word	0x40002800
 800b7f4:	42470e3c 	.word	0x42470e3c

0800b7f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a1c      	ldr	r2, [pc, #112]	; (800b878 <HAL_TIM_Base_MspInit+0x80>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d116      	bne.n	800b838 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b80a:	2300      	movs	r3, #0
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	4b1b      	ldr	r3, [pc, #108]	; (800b87c <HAL_TIM_Base_MspInit+0x84>)
 800b810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b812:	4a1a      	ldr	r2, [pc, #104]	; (800b87c <HAL_TIM_Base_MspInit+0x84>)
 800b814:	f043 0301 	orr.w	r3, r3, #1
 800b818:	6453      	str	r3, [r2, #68]	; 0x44
 800b81a:	4b18      	ldr	r3, [pc, #96]	; (800b87c <HAL_TIM_Base_MspInit+0x84>)
 800b81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	60fb      	str	r3, [r7, #12]
 800b824:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800b826:	2200      	movs	r2, #0
 800b828:	210f      	movs	r1, #15
 800b82a:	2019      	movs	r0, #25
 800b82c:	f000 fba8 	bl	800bf80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800b830:	2019      	movs	r0, #25
 800b832:	f000 fbc1 	bl	800bfb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b836:	e01a      	b.n	800b86e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b840:	d115      	bne.n	800b86e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b842:	2300      	movs	r3, #0
 800b844:	60bb      	str	r3, [r7, #8]
 800b846:	4b0d      	ldr	r3, [pc, #52]	; (800b87c <HAL_TIM_Base_MspInit+0x84>)
 800b848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b84a:	4a0c      	ldr	r2, [pc, #48]	; (800b87c <HAL_TIM_Base_MspInit+0x84>)
 800b84c:	f043 0301 	orr.w	r3, r3, #1
 800b850:	6413      	str	r3, [r2, #64]	; 0x40
 800b852:	4b0a      	ldr	r3, [pc, #40]	; (800b87c <HAL_TIM_Base_MspInit+0x84>)
 800b854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	60bb      	str	r3, [r7, #8]
 800b85c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800b85e:	2200      	movs	r2, #0
 800b860:	2105      	movs	r1, #5
 800b862:	201c      	movs	r0, #28
 800b864:	f000 fb8c 	bl	800bf80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b868:	201c      	movs	r0, #28
 800b86a:	f000 fba5 	bl	800bfb8 <HAL_NVIC_EnableIRQ>
}
 800b86e:	bf00      	nop
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	40010000 	.word	0x40010000
 800b87c:	40023800 	.word	0x40023800

0800b880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b08c      	sub	sp, #48	; 0x30
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b888:	f107 031c 	add.w	r3, r7, #28
 800b88c:	2200      	movs	r2, #0
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	605a      	str	r2, [r3, #4]
 800b892:	609a      	str	r2, [r3, #8]
 800b894:	60da      	str	r2, [r3, #12]
 800b896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a3a      	ldr	r2, [pc, #232]	; (800b988 <HAL_UART_MspInit+0x108>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d135      	bne.n	800b90e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	61bb      	str	r3, [r7, #24]
 800b8a6:	4b39      	ldr	r3, [pc, #228]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8aa:	4a38      	ldr	r2, [pc, #224]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b8ac:	f043 0310 	orr.w	r3, r3, #16
 800b8b0:	6453      	str	r3, [r2, #68]	; 0x44
 800b8b2:	4b36      	ldr	r3, [pc, #216]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8b6:	f003 0310 	and.w	r3, r3, #16
 800b8ba:	61bb      	str	r3, [r7, #24]
 800b8bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8be:	2300      	movs	r3, #0
 800b8c0:	617b      	str	r3, [r7, #20]
 800b8c2:	4b32      	ldr	r3, [pc, #200]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c6:	4a31      	ldr	r2, [pc, #196]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b8c8:	f043 0301 	orr.w	r3, r3, #1
 800b8cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b8ce:	4b2f      	ldr	r3, [pc, #188]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	617b      	str	r3, [r7, #20]
 800b8d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b8da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b8de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8e0:	2302      	movs	r3, #2
 800b8e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b8ec:	2307      	movs	r3, #7
 800b8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8f0:	f107 031c 	add.w	r3, r7, #28
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4826      	ldr	r0, [pc, #152]	; (800b990 <HAL_UART_MspInit+0x110>)
 800b8f8:	f000 fc0c 	bl	800c114 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	2105      	movs	r1, #5
 800b900:	2025      	movs	r0, #37	; 0x25
 800b902:	f000 fb3d 	bl	800bf80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b906:	2025      	movs	r0, #37	; 0x25
 800b908:	f000 fb56 	bl	800bfb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800b90c:	e038      	b.n	800b980 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a20      	ldr	r2, [pc, #128]	; (800b994 <HAL_UART_MspInit+0x114>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d133      	bne.n	800b980 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b918:	2300      	movs	r3, #0
 800b91a:	613b      	str	r3, [r7, #16]
 800b91c:	4b1b      	ldr	r3, [pc, #108]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b920:	4a1a      	ldr	r2, [pc, #104]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b926:	6413      	str	r3, [r2, #64]	; 0x40
 800b928:	4b18      	ldr	r3, [pc, #96]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b930:	613b      	str	r3, [r7, #16]
 800b932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b934:	2300      	movs	r3, #0
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	4b14      	ldr	r3, [pc, #80]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93c:	4a13      	ldr	r2, [pc, #76]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b93e:	f043 0301 	orr.w	r3, r3, #1
 800b942:	6313      	str	r3, [r2, #48]	; 0x30
 800b944:	4b11      	ldr	r3, [pc, #68]	; (800b98c <HAL_UART_MspInit+0x10c>)
 800b946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	60fb      	str	r3, [r7, #12]
 800b94e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800b950:	230c      	movs	r3, #12
 800b952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b954:	2302      	movs	r3, #2
 800b956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b958:	2300      	movs	r3, #0
 800b95a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b95c:	2300      	movs	r3, #0
 800b95e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b960:	2307      	movs	r3, #7
 800b962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b964:	f107 031c 	add.w	r3, r7, #28
 800b968:	4619      	mov	r1, r3
 800b96a:	4809      	ldr	r0, [pc, #36]	; (800b990 <HAL_UART_MspInit+0x110>)
 800b96c:	f000 fbd2 	bl	800c114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800b970:	2200      	movs	r2, #0
 800b972:	2105      	movs	r1, #5
 800b974:	2026      	movs	r0, #38	; 0x26
 800b976:	f000 fb03 	bl	800bf80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800b97a:	2026      	movs	r0, #38	; 0x26
 800b97c:	f000 fb1c 	bl	800bfb8 <HAL_NVIC_EnableIRQ>
}
 800b980:	bf00      	nop
 800b982:	3730      	adds	r7, #48	; 0x30
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	40011000 	.word	0x40011000
 800b98c:	40023800 	.word	0x40023800
 800b990:	40020000 	.word	0x40020000
 800b994:	40004400 	.word	0x40004400

0800b998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b08c      	sub	sp, #48	; 0x30
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	60bb      	str	r3, [r7, #8]
 800b9ac:	4b2e      	ldr	r3, [pc, #184]	; (800ba68 <HAL_InitTick+0xd0>)
 800b9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b0:	4a2d      	ldr	r2, [pc, #180]	; (800ba68 <HAL_InitTick+0xd0>)
 800b9b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9b6:	6453      	str	r3, [r2, #68]	; 0x44
 800b9b8:	4b2b      	ldr	r3, [pc, #172]	; (800ba68 <HAL_InitTick+0xd0>)
 800b9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9c0:	60bb      	str	r3, [r7, #8]
 800b9c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b9c4:	f107 020c 	add.w	r2, r7, #12
 800b9c8:	f107 0310 	add.w	r3, r7, #16
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f003 fe46 	bl	800f660 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800b9d4:	f003 fe30 	bl	800f638 <HAL_RCC_GetPCLK2Freq>
 800b9d8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9dc:	4a23      	ldr	r2, [pc, #140]	; (800ba6c <HAL_InitTick+0xd4>)
 800b9de:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e2:	0c9b      	lsrs	r3, r3, #18
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800b9e8:	4b21      	ldr	r3, [pc, #132]	; (800ba70 <HAL_InitTick+0xd8>)
 800b9ea:	4a22      	ldr	r2, [pc, #136]	; (800ba74 <HAL_InitTick+0xdc>)
 800b9ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800b9ee:	4b20      	ldr	r3, [pc, #128]	; (800ba70 <HAL_InitTick+0xd8>)
 800b9f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b9f4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800b9f6:	4a1e      	ldr	r2, [pc, #120]	; (800ba70 <HAL_InitTick+0xd8>)
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800b9fc:	4b1c      	ldr	r3, [pc, #112]	; (800ba70 <HAL_InitTick+0xd8>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ba02:	4b1b      	ldr	r3, [pc, #108]	; (800ba70 <HAL_InitTick+0xd8>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ba08:	4b19      	ldr	r3, [pc, #100]	; (800ba70 <HAL_InitTick+0xd8>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800ba0e:	4818      	ldr	r0, [pc, #96]	; (800ba70 <HAL_InitTick+0xd8>)
 800ba10:	f004 fb5a 	bl	80100c8 <HAL_TIM_Base_Init>
 800ba14:	4603      	mov	r3, r0
 800ba16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800ba1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d11b      	bne.n	800ba5a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800ba22:	4813      	ldr	r0, [pc, #76]	; (800ba70 <HAL_InitTick+0xd8>)
 800ba24:	f004 fba0 	bl	8010168 <HAL_TIM_Base_Start_IT>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800ba2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d111      	bne.n	800ba5a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ba36:	2019      	movs	r0, #25
 800ba38:	f000 fabe 	bl	800bfb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b0f      	cmp	r3, #15
 800ba40:	d808      	bhi.n	800ba54 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800ba42:	2200      	movs	r2, #0
 800ba44:	6879      	ldr	r1, [r7, #4]
 800ba46:	2019      	movs	r0, #25
 800ba48:	f000 fa9a 	bl	800bf80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ba4c:	4a0a      	ldr	r2, [pc, #40]	; (800ba78 <HAL_InitTick+0xe0>)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6013      	str	r3, [r2, #0]
 800ba52:	e002      	b.n	800ba5a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800ba5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3730      	adds	r7, #48	; 0x30
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	40023800 	.word	0x40023800
 800ba6c:	431bde83 	.word	0x431bde83
 800ba70:	200023a0 	.word	0x200023a0
 800ba74:	40014400 	.word	0x40014400
 800ba78:	20000314 	.word	0x20000314

0800ba7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ba80:	e7fe      	b.n	800ba80 <NMI_Handler+0x4>

0800ba82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ba82:	b480      	push	{r7}
 800ba84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ba86:	e7fe      	b.n	800ba86 <HardFault_Handler+0x4>

0800ba88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ba8c:	e7fe      	b.n	800ba8c <MemManage_Handler+0x4>

0800ba8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ba8e:	b480      	push	{r7}
 800ba90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ba92:	e7fe      	b.n	800ba92 <BusFault_Handler+0x4>

0800ba94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ba94:	b480      	push	{r7}
 800ba96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ba98:	e7fe      	b.n	800ba98 <UsageFault_Handler+0x4>

0800ba9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ba9e:	bf00      	nop
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800baac:	4802      	ldr	r0, [pc, #8]	; (800bab8 <RTC_WKUP_IRQHandler+0x10>)
 800baae:	f004 fab5 	bl	801001c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800bab2:	bf00      	nop
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	20002250 	.word	0x20002250

0800babc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bac0:	4803      	ldr	r0, [pc, #12]	; (800bad0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800bac2:	f004 fbb3 	bl	801022c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800bac6:	4803      	ldr	r0, [pc, #12]	; (800bad4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800bac8:	f004 fbb0 	bl	801022c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//  usr_isr_tim1_up();	// SK ADD
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800bacc:	bf00      	nop
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	20002270 	.word	0x20002270
 800bad4:	200023a0 	.word	0x200023a0

0800bad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800badc:	4803      	ldr	r0, [pc, #12]	; (800baec <TIM2_IRQHandler+0x14>)
 800bade:	f004 fba5 	bl	801022c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  usr_isr_tim1_up();	// SK ADD
 800bae2:	f7f6 f999 	bl	8001e18 <usr_isr_tim1_up>

  /* USER CODE END TIM2_IRQn 1 */
}
 800bae6:	bf00      	nop
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200022b8 	.word	0x200022b8

0800baf0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800baf4:	4802      	ldr	r0, [pc, #8]	; (800bb00 <I2C1_EV_IRQHandler+0x10>)
 800baf6:	f001 f913 	bl	800cd20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800bafa:	bf00      	nop
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	200021fc 	.word	0x200021fc

0800bb04 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800bb08:	4802      	ldr	r0, [pc, #8]	; (800bb14 <I2C1_ER_IRQHandler+0x10>)
 800bb0a:	f001 fa7a 	bl	800d002 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800bb0e:	bf00      	nop
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	200021fc 	.word	0x200021fc

0800bb18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800bb1c:	4802      	ldr	r0, [pc, #8]	; (800bb28 <USART1_IRQHandler+0x10>)
 800bb1e:	f005 f829 	bl	8010b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800bb22:	bf00      	nop
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20002300 	.word	0x20002300

0800bb2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800bb30:	4802      	ldr	r0, [pc, #8]	; (800bb3c <USART2_IRQHandler+0x10>)
 800bb32:	f005 f81f 	bl	8010b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800bb36:	bf00      	nop
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20002344 	.word	0x20002344

0800bb40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bb40:	b480      	push	{r7}
 800bb42:	af00      	add	r7, sp, #0
  return 1;
 800bb44:	2301      	movs	r3, #1
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <_kill>:

int _kill(int pid, int sig)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800bb5a:	f008 ffe3 	bl	8014b24 <__errno>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2216      	movs	r2, #22
 800bb62:	601a      	str	r2, [r3, #0]
  return -1;
 800bb64:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <_exit>:

void _exit (int status)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800bb78:	f04f 31ff 	mov.w	r1, #4294967295
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff ffe7 	bl	800bb50 <_kill>
  while (1) {}    /* Make sure we hang here */
 800bb82:	e7fe      	b.n	800bb82 <_exit+0x12>

0800bb84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bb90:	2300      	movs	r3, #0
 800bb92:	617b      	str	r3, [r7, #20]
 800bb94:	e00a      	b.n	800bbac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800bb96:	f3af 8000 	nop.w
 800bb9a:	4601      	mov	r1, r0
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	60ba      	str	r2, [r7, #8]
 800bba2:	b2ca      	uxtb	r2, r1
 800bba4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	dbf0      	blt.n	800bb96 <_read+0x12>
  }

  return len;
 800bbb4:	687b      	ldr	r3, [r7, #4]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b086      	sub	sp, #24
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	60f8      	str	r0, [r7, #12]
 800bbc6:	60b9      	str	r1, [r7, #8]
 800bbc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bbca:	2300      	movs	r3, #0
 800bbcc:	617b      	str	r3, [r7, #20]
 800bbce:	e009      	b.n	800bbe4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	1c5a      	adds	r2, r3, #1
 800bbd4:	60ba      	str	r2, [r7, #8]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	617b      	str	r3, [r7, #20]
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	dbf1      	blt.n	800bbd0 <_write+0x12>
  }
  return len;
 800bbec:	687b      	ldr	r3, [r7, #4]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <_close>:

int _close(int file)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800bbfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b083      	sub	sp, #12
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bc1e:	605a      	str	r2, [r3, #4]
  return 0;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <_isatty>:

int _isatty(int file)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800bc36:	2301      	movs	r3, #1
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
	...

0800bc60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bc68:	4a14      	ldr	r2, [pc, #80]	; (800bcbc <_sbrk+0x5c>)
 800bc6a:	4b15      	ldr	r3, [pc, #84]	; (800bcc0 <_sbrk+0x60>)
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bc74:	4b13      	ldr	r3, [pc, #76]	; (800bcc4 <_sbrk+0x64>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d102      	bne.n	800bc82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bc7c:	4b11      	ldr	r3, [pc, #68]	; (800bcc4 <_sbrk+0x64>)
 800bc7e:	4a12      	ldr	r2, [pc, #72]	; (800bcc8 <_sbrk+0x68>)
 800bc80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bc82:	4b10      	ldr	r3, [pc, #64]	; (800bcc4 <_sbrk+0x64>)
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	4413      	add	r3, r2
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d207      	bcs.n	800bca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bc90:	f008 ff48 	bl	8014b24 <__errno>
 800bc94:	4603      	mov	r3, r0
 800bc96:	220c      	movs	r2, #12
 800bc98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bc9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc9e:	e009      	b.n	800bcb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bca0:	4b08      	ldr	r3, [pc, #32]	; (800bcc4 <_sbrk+0x64>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bca6:	4b07      	ldr	r3, [pc, #28]	; (800bcc4 <_sbrk+0x64>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4413      	add	r3, r2
 800bcae:	4a05      	ldr	r2, [pc, #20]	; (800bcc4 <_sbrk+0x64>)
 800bcb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3718      	adds	r7, #24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20018000 	.word	0x20018000
 800bcc0:	00000400 	.word	0x00000400
 800bcc4:	200023e8 	.word	0x200023e8
 800bcc8:	20006d50 	.word	0x20006d50

0800bccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bccc:	b480      	push	{r7}
 800bcce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bcd0:	4b06      	ldr	r3, [pc, #24]	; (800bcec <SystemInit+0x20>)
 800bcd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcd6:	4a05      	ldr	r2, [pc, #20]	; (800bcec <SystemInit+0x20>)
 800bcd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bcdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800bce0:	bf00      	nop
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	e000ed00 	.word	0xe000ed00

0800bcf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800bcf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bd28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800bcf4:	480d      	ldr	r0, [pc, #52]	; (800bd2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800bcf6:	490e      	ldr	r1, [pc, #56]	; (800bd30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800bcf8:	4a0e      	ldr	r2, [pc, #56]	; (800bd34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800bcfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bcfc:	e002      	b.n	800bd04 <LoopCopyDataInit>

0800bcfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bcfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bd00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bd02:	3304      	adds	r3, #4

0800bd04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bd04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bd06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bd08:	d3f9      	bcc.n	800bcfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bd0a:	4a0b      	ldr	r2, [pc, #44]	; (800bd38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800bd0c:	4c0b      	ldr	r4, [pc, #44]	; (800bd3c <LoopFillZerobss+0x26>)
  movs r3, #0
 800bd0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bd10:	e001      	b.n	800bd16 <LoopFillZerobss>

0800bd12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bd12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bd14:	3204      	adds	r2, #4

0800bd16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bd16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bd18:	d3fb      	bcc.n	800bd12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800bd1a:	f7ff ffd7 	bl	800bccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bd1e:	f008 ff07 	bl	8014b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bd22:	f7ff f93b 	bl	800af9c <main>
  bx  lr    
 800bd26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800bd28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800bd2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bd30:	200004f0 	.word	0x200004f0
  ldr r2, =_sidata
 800bd34:	0801a8b8 	.word	0x0801a8b8
  ldr r2, =_sbss
 800bd38:	200004f0 	.word	0x200004f0
  ldr r4, =_ebss
 800bd3c:	20006d50 	.word	0x20006d50

0800bd40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bd40:	e7fe      	b.n	800bd40 <ADC_IRQHandler>
	...

0800bd44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bd48:	4b0e      	ldr	r3, [pc, #56]	; (800bd84 <HAL_Init+0x40>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a0d      	ldr	r2, [pc, #52]	; (800bd84 <HAL_Init+0x40>)
 800bd4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bd54:	4b0b      	ldr	r3, [pc, #44]	; (800bd84 <HAL_Init+0x40>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a0a      	ldr	r2, [pc, #40]	; (800bd84 <HAL_Init+0x40>)
 800bd5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bd60:	4b08      	ldr	r3, [pc, #32]	; (800bd84 <HAL_Init+0x40>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a07      	ldr	r2, [pc, #28]	; (800bd84 <HAL_Init+0x40>)
 800bd66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bd6c:	2003      	movs	r0, #3
 800bd6e:	f000 f8fc 	bl	800bf6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bd72:	200f      	movs	r0, #15
 800bd74:	f7ff fe10 	bl	800b998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bd78:	f7ff fc86 	bl	800b688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	40023c00 	.word	0x40023c00

0800bd88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <HAL_IncTick+0x20>)
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	461a      	mov	r2, r3
 800bd92:	4b06      	ldr	r3, [pc, #24]	; (800bdac <HAL_IncTick+0x24>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4413      	add	r3, r2
 800bd98:	4a04      	ldr	r2, [pc, #16]	; (800bdac <HAL_IncTick+0x24>)
 800bd9a:	6013      	str	r3, [r2, #0]
}
 800bd9c:	bf00      	nop
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	20000318 	.word	0x20000318
 800bdac:	200023ec 	.word	0x200023ec

0800bdb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	af00      	add	r7, sp, #0
  return uwTick;
 800bdb4:	4b03      	ldr	r3, [pc, #12]	; (800bdc4 <HAL_GetTick+0x14>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	200023ec 	.word	0x200023ec

0800bdc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bdd0:	f7ff ffee 	bl	800bdb0 <HAL_GetTick>
 800bdd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde0:	d005      	beq.n	800bdee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bde2:	4b0a      	ldr	r3, [pc, #40]	; (800be0c <HAL_Delay+0x44>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	461a      	mov	r2, r3
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	4413      	add	r3, r2
 800bdec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bdee:	bf00      	nop
 800bdf0:	f7ff ffde 	bl	800bdb0 <HAL_GetTick>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d8f7      	bhi.n	800bdf0 <HAL_Delay+0x28>
  {
  }
}
 800be00:	bf00      	nop
 800be02:	bf00      	nop
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20000318 	.word	0x20000318

0800be10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f003 0307 	and.w	r3, r3, #7
 800be1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800be20:	4b0c      	ldr	r3, [pc, #48]	; (800be54 <__NVIC_SetPriorityGrouping+0x44>)
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800be2c:	4013      	ands	r3, r2
 800be2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800be38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800be3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800be42:	4a04      	ldr	r2, [pc, #16]	; (800be54 <__NVIC_SetPriorityGrouping+0x44>)
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	60d3      	str	r3, [r2, #12]
}
 800be48:	bf00      	nop
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	e000ed00 	.word	0xe000ed00

0800be58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800be58:	b480      	push	{r7}
 800be5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800be5c:	4b04      	ldr	r3, [pc, #16]	; (800be70 <__NVIC_GetPriorityGrouping+0x18>)
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	0a1b      	lsrs	r3, r3, #8
 800be62:	f003 0307 	and.w	r3, r3, #7
}
 800be66:	4618      	mov	r0, r3
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	e000ed00 	.word	0xe000ed00

0800be74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	4603      	mov	r3, r0
 800be7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be82:	2b00      	cmp	r3, #0
 800be84:	db0b      	blt.n	800be9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	f003 021f 	and.w	r2, r3, #31
 800be8c:	4907      	ldr	r1, [pc, #28]	; (800beac <__NVIC_EnableIRQ+0x38>)
 800be8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be92:	095b      	lsrs	r3, r3, #5
 800be94:	2001      	movs	r0, #1
 800be96:	fa00 f202 	lsl.w	r2, r0, r2
 800be9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800be9e:	bf00      	nop
 800bea0:	370c      	adds	r7, #12
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	e000e100 	.word	0xe000e100

0800beb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	4603      	mov	r3, r0
 800beb8:	6039      	str	r1, [r7, #0]
 800beba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	db0a      	blt.n	800beda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	490c      	ldr	r1, [pc, #48]	; (800befc <__NVIC_SetPriority+0x4c>)
 800beca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bece:	0112      	lsls	r2, r2, #4
 800bed0:	b2d2      	uxtb	r2, r2
 800bed2:	440b      	add	r3, r1
 800bed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bed8:	e00a      	b.n	800bef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	4908      	ldr	r1, [pc, #32]	; (800bf00 <__NVIC_SetPriority+0x50>)
 800bee0:	79fb      	ldrb	r3, [r7, #7]
 800bee2:	f003 030f 	and.w	r3, r3, #15
 800bee6:	3b04      	subs	r3, #4
 800bee8:	0112      	lsls	r2, r2, #4
 800beea:	b2d2      	uxtb	r2, r2
 800beec:	440b      	add	r3, r1
 800beee:	761a      	strb	r2, [r3, #24]
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	e000e100 	.word	0xe000e100
 800bf00:	e000ed00 	.word	0xe000ed00

0800bf04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b089      	sub	sp, #36	; 0x24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f003 0307 	and.w	r3, r3, #7
 800bf16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	f1c3 0307 	rsb	r3, r3, #7
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	bf28      	it	cs
 800bf22:	2304      	movcs	r3, #4
 800bf24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	3304      	adds	r3, #4
 800bf2a:	2b06      	cmp	r3, #6
 800bf2c:	d902      	bls.n	800bf34 <NVIC_EncodePriority+0x30>
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	3b03      	subs	r3, #3
 800bf32:	e000      	b.n	800bf36 <NVIC_EncodePriority+0x32>
 800bf34:	2300      	movs	r3, #0
 800bf36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bf38:	f04f 32ff 	mov.w	r2, #4294967295
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf42:	43da      	mvns	r2, r3
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	401a      	ands	r2, r3
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bf4c:	f04f 31ff 	mov.w	r1, #4294967295
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	fa01 f303 	lsl.w	r3, r1, r3
 800bf56:	43d9      	mvns	r1, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bf5c:	4313      	orrs	r3, r2
         );
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3724      	adds	r7, #36	; 0x24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b082      	sub	sp, #8
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7ff ff4c 	bl	800be10 <__NVIC_SetPriorityGrouping>
}
 800bf78:	bf00      	nop
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	4603      	mov	r3, r0
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
 800bf8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bf92:	f7ff ff61 	bl	800be58 <__NVIC_GetPriorityGrouping>
 800bf96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	68b9      	ldr	r1, [r7, #8]
 800bf9c:	6978      	ldr	r0, [r7, #20]
 800bf9e:	f7ff ffb1 	bl	800bf04 <NVIC_EncodePriority>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfa8:	4611      	mov	r1, r2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7ff ff80 	bl	800beb0 <__NVIC_SetPriority>
}
 800bfb0:	bf00      	nop
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bfc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7ff ff54 	bl	800be74 <__NVIC_EnableIRQ>
}
 800bfcc:	bf00      	nop
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bfe2:	f7ff fee5 	bl	800bdb0 <HAL_GetTick>
 800bfe6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	d008      	beq.n	800c006 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2280      	movs	r2, #128	; 0x80
 800bff8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e052      	b.n	800c0ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f022 0216 	bic.w	r2, r2, #22
 800c014:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	695a      	ldr	r2, [r3, #20]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c024:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d103      	bne.n	800c036 <HAL_DMA_Abort+0x62>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c032:	2b00      	cmp	r3, #0
 800c034:	d007      	beq.n	800c046 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f022 0208 	bic.w	r2, r2, #8
 800c044:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f022 0201 	bic.w	r2, r2, #1
 800c054:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c056:	e013      	b.n	800c080 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c058:	f7ff feaa 	bl	800bdb0 <HAL_GetTick>
 800c05c:	4602      	mov	r2, r0
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	2b05      	cmp	r3, #5
 800c064:	d90c      	bls.n	800c080 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2220      	movs	r2, #32
 800c06a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2203      	movs	r2, #3
 800c070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e015      	b.n	800c0ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f003 0301 	and.w	r3, r3, #1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1e4      	bne.n	800c058 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c092:	223f      	movs	r2, #63	; 0x3f
 800c094:	409a      	lsls	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d004      	beq.n	800c0d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2280      	movs	r2, #128	; 0x80
 800c0cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e00c      	b.n	800c0ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2205      	movs	r2, #5
 800c0d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f022 0201 	bic.w	r2, r2, #1
 800c0e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c106:	b2db      	uxtb	r3, r3
}
 800c108:	4618      	mov	r0, r3
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c114:	b480      	push	{r7}
 800c116:	b089      	sub	sp, #36	; 0x24
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c11e:	2300      	movs	r3, #0
 800c120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c122:	2300      	movs	r3, #0
 800c124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c126:	2300      	movs	r3, #0
 800c128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c12a:	2300      	movs	r3, #0
 800c12c:	61fb      	str	r3, [r7, #28]
 800c12e:	e159      	b.n	800c3e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c130:	2201      	movs	r2, #1
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	fa02 f303 	lsl.w	r3, r2, r3
 800c138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	697a      	ldr	r2, [r7, #20]
 800c140:	4013      	ands	r3, r2
 800c142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c144:	693a      	ldr	r2, [r7, #16]
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	429a      	cmp	r2, r3
 800c14a:	f040 8148 	bne.w	800c3de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	f003 0303 	and.w	r3, r3, #3
 800c156:	2b01      	cmp	r3, #1
 800c158:	d005      	beq.n	800c166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c162:	2b02      	cmp	r3, #2
 800c164:	d130      	bne.n	800c1c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	2203      	movs	r2, #3
 800c172:	fa02 f303 	lsl.w	r3, r2, r3
 800c176:	43db      	mvns	r3, r3
 800c178:	69ba      	ldr	r2, [r7, #24]
 800c17a:	4013      	ands	r3, r2
 800c17c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	005b      	lsls	r3, r3, #1
 800c186:	fa02 f303 	lsl.w	r3, r2, r3
 800c18a:	69ba      	ldr	r2, [r7, #24]
 800c18c:	4313      	orrs	r3, r2
 800c18e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	69ba      	ldr	r2, [r7, #24]
 800c194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c19c:	2201      	movs	r2, #1
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a4:	43db      	mvns	r3, r3
 800c1a6:	69ba      	ldr	r2, [r7, #24]
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	091b      	lsrs	r3, r3, #4
 800c1b2:	f003 0201 	and.w	r2, r3, #1
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	69ba      	ldr	r2, [r7, #24]
 800c1c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	685b      	ldr	r3, [r3, #4]
 800c1cc:	f003 0303 	and.w	r3, r3, #3
 800c1d0:	2b03      	cmp	r3, #3
 800c1d2:	d017      	beq.n	800c204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	2203      	movs	r2, #3
 800c1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e4:	43db      	mvns	r3, r3
 800c1e6:	69ba      	ldr	r2, [r7, #24]
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	689a      	ldr	r2, [r3, #8]
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	69ba      	ldr	r2, [r7, #24]
 800c202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	f003 0303 	and.w	r3, r3, #3
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d123      	bne.n	800c258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	08da      	lsrs	r2, r3, #3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3208      	adds	r2, #8
 800c218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	f003 0307 	and.w	r3, r3, #7
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	220f      	movs	r2, #15
 800c228:	fa02 f303 	lsl.w	r3, r2, r3
 800c22c:	43db      	mvns	r3, r3
 800c22e:	69ba      	ldr	r2, [r7, #24]
 800c230:	4013      	ands	r3, r2
 800c232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	691a      	ldr	r2, [r3, #16]
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	f003 0307 	and.w	r3, r3, #7
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	fa02 f303 	lsl.w	r3, r2, r3
 800c244:	69ba      	ldr	r2, [r7, #24]
 800c246:	4313      	orrs	r3, r2
 800c248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	08da      	lsrs	r2, r3, #3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	3208      	adds	r2, #8
 800c252:	69b9      	ldr	r1, [r7, #24]
 800c254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	2203      	movs	r2, #3
 800c264:	fa02 f303 	lsl.w	r3, r2, r3
 800c268:	43db      	mvns	r3, r3
 800c26a:	69ba      	ldr	r2, [r7, #24]
 800c26c:	4013      	ands	r3, r2
 800c26e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	f003 0203 	and.w	r2, r3, #3
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	fa02 f303 	lsl.w	r3, r2, r3
 800c280:	69ba      	ldr	r2, [r7, #24]
 800c282:	4313      	orrs	r3, r2
 800c284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	69ba      	ldr	r2, [r7, #24]
 800c28a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 80a2 	beq.w	800c3de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c29a:	2300      	movs	r3, #0
 800c29c:	60fb      	str	r3, [r7, #12]
 800c29e:	4b57      	ldr	r3, [pc, #348]	; (800c3fc <HAL_GPIO_Init+0x2e8>)
 800c2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2a2:	4a56      	ldr	r2, [pc, #344]	; (800c3fc <HAL_GPIO_Init+0x2e8>)
 800c2a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c2a8:	6453      	str	r3, [r2, #68]	; 0x44
 800c2aa:	4b54      	ldr	r3, [pc, #336]	; (800c3fc <HAL_GPIO_Init+0x2e8>)
 800c2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2b2:	60fb      	str	r3, [r7, #12]
 800c2b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c2b6:	4a52      	ldr	r2, [pc, #328]	; (800c400 <HAL_GPIO_Init+0x2ec>)
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	089b      	lsrs	r3, r3, #2
 800c2bc:	3302      	adds	r3, #2
 800c2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	f003 0303 	and.w	r3, r3, #3
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	220f      	movs	r2, #15
 800c2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d2:	43db      	mvns	r3, r3
 800c2d4:	69ba      	ldr	r2, [r7, #24]
 800c2d6:	4013      	ands	r3, r2
 800c2d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a49      	ldr	r2, [pc, #292]	; (800c404 <HAL_GPIO_Init+0x2f0>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d019      	beq.n	800c316 <HAL_GPIO_Init+0x202>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a48      	ldr	r2, [pc, #288]	; (800c408 <HAL_GPIO_Init+0x2f4>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d013      	beq.n	800c312 <HAL_GPIO_Init+0x1fe>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4a47      	ldr	r2, [pc, #284]	; (800c40c <HAL_GPIO_Init+0x2f8>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d00d      	beq.n	800c30e <HAL_GPIO_Init+0x1fa>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a46      	ldr	r2, [pc, #280]	; (800c410 <HAL_GPIO_Init+0x2fc>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d007      	beq.n	800c30a <HAL_GPIO_Init+0x1f6>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a45      	ldr	r2, [pc, #276]	; (800c414 <HAL_GPIO_Init+0x300>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d101      	bne.n	800c306 <HAL_GPIO_Init+0x1f2>
 800c302:	2304      	movs	r3, #4
 800c304:	e008      	b.n	800c318 <HAL_GPIO_Init+0x204>
 800c306:	2307      	movs	r3, #7
 800c308:	e006      	b.n	800c318 <HAL_GPIO_Init+0x204>
 800c30a:	2303      	movs	r3, #3
 800c30c:	e004      	b.n	800c318 <HAL_GPIO_Init+0x204>
 800c30e:	2302      	movs	r3, #2
 800c310:	e002      	b.n	800c318 <HAL_GPIO_Init+0x204>
 800c312:	2301      	movs	r3, #1
 800c314:	e000      	b.n	800c318 <HAL_GPIO_Init+0x204>
 800c316:	2300      	movs	r3, #0
 800c318:	69fa      	ldr	r2, [r7, #28]
 800c31a:	f002 0203 	and.w	r2, r2, #3
 800c31e:	0092      	lsls	r2, r2, #2
 800c320:	4093      	lsls	r3, r2
 800c322:	69ba      	ldr	r2, [r7, #24]
 800c324:	4313      	orrs	r3, r2
 800c326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c328:	4935      	ldr	r1, [pc, #212]	; (800c400 <HAL_GPIO_Init+0x2ec>)
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	089b      	lsrs	r3, r3, #2
 800c32e:	3302      	adds	r3, #2
 800c330:	69ba      	ldr	r2, [r7, #24]
 800c332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c336:	4b38      	ldr	r3, [pc, #224]	; (800c418 <HAL_GPIO_Init+0x304>)
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	43db      	mvns	r3, r3
 800c340:	69ba      	ldr	r2, [r7, #24]
 800c342:	4013      	ands	r3, r2
 800c344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800c352:	69ba      	ldr	r2, [r7, #24]
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	4313      	orrs	r3, r2
 800c358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c35a:	4a2f      	ldr	r2, [pc, #188]	; (800c418 <HAL_GPIO_Init+0x304>)
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c360:	4b2d      	ldr	r3, [pc, #180]	; (800c418 <HAL_GPIO_Init+0x304>)
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	43db      	mvns	r3, r3
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	4013      	ands	r3, r2
 800c36e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800c37c:	69ba      	ldr	r2, [r7, #24]
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	4313      	orrs	r3, r2
 800c382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c384:	4a24      	ldr	r2, [pc, #144]	; (800c418 <HAL_GPIO_Init+0x304>)
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c38a:	4b23      	ldr	r3, [pc, #140]	; (800c418 <HAL_GPIO_Init+0x304>)
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	43db      	mvns	r3, r3
 800c394:	69ba      	ldr	r2, [r7, #24]
 800c396:	4013      	ands	r3, r2
 800c398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800c3a6:	69ba      	ldr	r2, [r7, #24]
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c3ae:	4a1a      	ldr	r2, [pc, #104]	; (800c418 <HAL_GPIO_Init+0x304>)
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c3b4:	4b18      	ldr	r3, [pc, #96]	; (800c418 <HAL_GPIO_Init+0x304>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	43db      	mvns	r3, r3
 800c3be:	69ba      	ldr	r2, [r7, #24]
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d003      	beq.n	800c3d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800c3d0:	69ba      	ldr	r2, [r7, #24]
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c3d8:	4a0f      	ldr	r2, [pc, #60]	; (800c418 <HAL_GPIO_Init+0x304>)
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	61fb      	str	r3, [r7, #28]
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	2b0f      	cmp	r3, #15
 800c3e8:	f67f aea2 	bls.w	800c130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c3ec:	bf00      	nop
 800c3ee:	bf00      	nop
 800c3f0:	3724      	adds	r7, #36	; 0x24
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	40023800 	.word	0x40023800
 800c400:	40013800 	.word	0x40013800
 800c404:	40020000 	.word	0x40020000
 800c408:	40020400 	.word	0x40020400
 800c40c:	40020800 	.word	0x40020800
 800c410:	40020c00 	.word	0x40020c00
 800c414:	40021000 	.word	0x40021000
 800c418:	40013c00 	.word	0x40013c00

0800c41c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	460b      	mov	r3, r1
 800c426:	807b      	strh	r3, [r7, #2]
 800c428:	4613      	mov	r3, r2
 800c42a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c42c:	787b      	ldrb	r3, [r7, #1]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d003      	beq.n	800c43a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c432:	887a      	ldrh	r2, [r7, #2]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c438:	e003      	b.n	800c442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c43a:	887b      	ldrh	r3, [r7, #2]
 800c43c:	041a      	lsls	r2, r3, #16
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	619a      	str	r2, [r3, #24]
}
 800c442:	bf00      	nop
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
	...

0800c450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d101      	bne.n	800c462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	e12b      	b.n	800c6ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d106      	bne.n	800c47c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7ff f932 	bl	800b6e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2224      	movs	r2, #36	; 0x24
 800c480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f022 0201 	bic.w	r2, r2, #1
 800c492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c4b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c4b4:	f003 f8ac 	bl	800f610 <HAL_RCC_GetPCLK1Freq>
 800c4b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	4a81      	ldr	r2, [pc, #516]	; (800c6c4 <HAL_I2C_Init+0x274>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d807      	bhi.n	800c4d4 <HAL_I2C_Init+0x84>
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	4a80      	ldr	r2, [pc, #512]	; (800c6c8 <HAL_I2C_Init+0x278>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	bf94      	ite	ls
 800c4cc:	2301      	movls	r3, #1
 800c4ce:	2300      	movhi	r3, #0
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	e006      	b.n	800c4e2 <HAL_I2C_Init+0x92>
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	4a7d      	ldr	r2, [pc, #500]	; (800c6cc <HAL_I2C_Init+0x27c>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	bf94      	ite	ls
 800c4dc:	2301      	movls	r3, #1
 800c4de:	2300      	movhi	r3, #0
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d001      	beq.n	800c4ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e0e7      	b.n	800c6ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4a78      	ldr	r2, [pc, #480]	; (800c6d0 <HAL_I2C_Init+0x280>)
 800c4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f2:	0c9b      	lsrs	r3, r3, #18
 800c4f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	430a      	orrs	r2, r1
 800c508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6a1b      	ldr	r3, [r3, #32]
 800c510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	4a6a      	ldr	r2, [pc, #424]	; (800c6c4 <HAL_I2C_Init+0x274>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d802      	bhi.n	800c524 <HAL_I2C_Init+0xd4>
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	3301      	adds	r3, #1
 800c522:	e009      	b.n	800c538 <HAL_I2C_Init+0xe8>
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c52a:	fb02 f303 	mul.w	r3, r2, r3
 800c52e:	4a69      	ldr	r2, [pc, #420]	; (800c6d4 <HAL_I2C_Init+0x284>)
 800c530:	fba2 2303 	umull	r2, r3, r2, r3
 800c534:	099b      	lsrs	r3, r3, #6
 800c536:	3301      	adds	r3, #1
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	6812      	ldr	r2, [r2, #0]
 800c53c:	430b      	orrs	r3, r1
 800c53e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	69db      	ldr	r3, [r3, #28]
 800c546:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c54a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	495c      	ldr	r1, [pc, #368]	; (800c6c4 <HAL_I2C_Init+0x274>)
 800c554:	428b      	cmp	r3, r1
 800c556:	d819      	bhi.n	800c58c <HAL_I2C_Init+0x13c>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	1e59      	subs	r1, r3, #1
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	fbb1 f3f3 	udiv	r3, r1, r3
 800c566:	1c59      	adds	r1, r3, #1
 800c568:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c56c:	400b      	ands	r3, r1
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00a      	beq.n	800c588 <HAL_I2C_Init+0x138>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	1e59      	subs	r1, r3, #1
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	fbb1 f3f3 	udiv	r3, r1, r3
 800c580:	3301      	adds	r3, #1
 800c582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c586:	e051      	b.n	800c62c <HAL_I2C_Init+0x1dc>
 800c588:	2304      	movs	r3, #4
 800c58a:	e04f      	b.n	800c62c <HAL_I2C_Init+0x1dc>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d111      	bne.n	800c5b8 <HAL_I2C_Init+0x168>
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	1e58      	subs	r0, r3, #1
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6859      	ldr	r1, [r3, #4]
 800c59c:	460b      	mov	r3, r1
 800c59e:	005b      	lsls	r3, r3, #1
 800c5a0:	440b      	add	r3, r1
 800c5a2:	fbb0 f3f3 	udiv	r3, r0, r3
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	bf0c      	ite	eq
 800c5b0:	2301      	moveq	r3, #1
 800c5b2:	2300      	movne	r3, #0
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	e012      	b.n	800c5de <HAL_I2C_Init+0x18e>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	1e58      	subs	r0, r3, #1
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6859      	ldr	r1, [r3, #4]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	440b      	add	r3, r1
 800c5c6:	0099      	lsls	r1, r3, #2
 800c5c8:	440b      	add	r3, r1
 800c5ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	bf0c      	ite	eq
 800c5d8:	2301      	moveq	r3, #1
 800c5da:	2300      	movne	r3, #0
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d001      	beq.n	800c5e6 <HAL_I2C_Init+0x196>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e022      	b.n	800c62c <HAL_I2C_Init+0x1dc>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d10e      	bne.n	800c60c <HAL_I2C_Init+0x1bc>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	1e58      	subs	r0, r3, #1
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6859      	ldr	r1, [r3, #4]
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	440b      	add	r3, r1
 800c5fc:	fbb0 f3f3 	udiv	r3, r0, r3
 800c600:	3301      	adds	r3, #1
 800c602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c60a:	e00f      	b.n	800c62c <HAL_I2C_Init+0x1dc>
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	1e58      	subs	r0, r3, #1
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6859      	ldr	r1, [r3, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	440b      	add	r3, r1
 800c61a:	0099      	lsls	r1, r3, #2
 800c61c:	440b      	add	r3, r1
 800c61e:	fbb0 f3f3 	udiv	r3, r0, r3
 800c622:	3301      	adds	r3, #1
 800c624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c62c:	6879      	ldr	r1, [r7, #4]
 800c62e:	6809      	ldr	r1, [r1, #0]
 800c630:	4313      	orrs	r3, r2
 800c632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	69da      	ldr	r2, [r3, #28]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6a1b      	ldr	r3, [r3, #32]
 800c646:	431a      	orrs	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	430a      	orrs	r2, r1
 800c64e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c65a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	6911      	ldr	r1, [r2, #16]
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	68d2      	ldr	r2, [r2, #12]
 800c666:	4311      	orrs	r1, r2
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	6812      	ldr	r2, [r2, #0]
 800c66c:	430b      	orrs	r3, r1
 800c66e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	695a      	ldr	r2, [r3, #20]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	431a      	orrs	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	430a      	orrs	r2, r1
 800c68a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f042 0201 	orr.w	r2, r2, #1
 800c69a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2220      	movs	r2, #32
 800c6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	000186a0 	.word	0x000186a0
 800c6c8:	001e847f 	.word	0x001e847f
 800c6cc:	003d08ff 	.word	0x003d08ff
 800c6d0:	431bde83 	.word	0x431bde83
 800c6d4:	10624dd3 	.word	0x10624dd3

0800c6d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af02      	add	r7, sp, #8
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	607a      	str	r2, [r7, #4]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	817b      	strh	r3, [r7, #10]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c6ec:	f7ff fb60 	bl	800bdb0 <HAL_GetTick>
 800c6f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	2b20      	cmp	r3, #32
 800c6fc:	f040 80e0 	bne.w	800c8c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	2319      	movs	r3, #25
 800c706:	2201      	movs	r2, #1
 800c708:	4970      	ldr	r1, [pc, #448]	; (800c8cc <HAL_I2C_Master_Transmit+0x1f4>)
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f002 f8e6 	bl	800e8dc <I2C_WaitOnFlagUntilTimeout>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c716:	2302      	movs	r3, #2
 800c718:	e0d3      	b.n	800c8c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c720:	2b01      	cmp	r3, #1
 800c722:	d101      	bne.n	800c728 <HAL_I2C_Master_Transmit+0x50>
 800c724:	2302      	movs	r3, #2
 800c726:	e0cc      	b.n	800c8c2 <HAL_I2C_Master_Transmit+0x1ea>
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2201      	movs	r2, #1
 800c72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d007      	beq.n	800c74e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f042 0201 	orr.w	r2, r2, #1
 800c74c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c75c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2221      	movs	r2, #33	; 0x21
 800c762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2210      	movs	r2, #16
 800c76a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2200      	movs	r2, #0
 800c772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	893a      	ldrh	r2, [r7, #8]
 800c77e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c784:	b29a      	uxth	r2, r3
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	4a50      	ldr	r2, [pc, #320]	; (800c8d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800c78e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c790:	8979      	ldrh	r1, [r7, #10]
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	6a3a      	ldr	r2, [r7, #32]
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f001 fea8 	bl	800e4ec <I2C_MasterRequestWrite>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d001      	beq.n	800c7a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e08d      	b.n	800c8c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	613b      	str	r3, [r7, #16]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	695b      	ldr	r3, [r3, #20]
 800c7b0:	613b      	str	r3, [r7, #16]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	613b      	str	r3, [r7, #16]
 800c7ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c7bc:	e066      	b.n	800c88c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	6a39      	ldr	r1, [r7, #32]
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f002 f960 	bl	800ea88 <I2C_WaitOnTXEFlagUntilTimeout>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00d      	beq.n	800c7ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	d107      	bne.n	800c7e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e06b      	b.n	800c8c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ee:	781a      	ldrb	r2, [r3, #0]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fa:	1c5a      	adds	r2, r3, #1
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c804:	b29b      	uxth	r3, r3
 800c806:	3b01      	subs	r3, #1
 800c808:	b29a      	uxth	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c812:	3b01      	subs	r3, #1
 800c814:	b29a      	uxth	r2, r3
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	695b      	ldr	r3, [r3, #20]
 800c820:	f003 0304 	and.w	r3, r3, #4
 800c824:	2b04      	cmp	r3, #4
 800c826:	d11b      	bne.n	800c860 <HAL_I2C_Master_Transmit+0x188>
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d017      	beq.n	800c860 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c834:	781a      	ldrb	r2, [r3, #0]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	3b01      	subs	r3, #1
 800c84e:	b29a      	uxth	r2, r3
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c858:	3b01      	subs	r3, #1
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	6a39      	ldr	r1, [r7, #32]
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f002 f950 	bl	800eb0a <I2C_WaitOnBTFFlagUntilTimeout>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00d      	beq.n	800c88c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c874:	2b04      	cmp	r3, #4
 800c876:	d107      	bne.n	800c888 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c886:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c888:	2301      	movs	r3, #1
 800c88a:	e01a      	b.n	800c8c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c890:	2b00      	cmp	r3, #0
 800c892:	d194      	bne.n	800c7be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2220      	movs	r2, #32
 800c8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e000      	b.n	800c8c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c8c0:	2302      	movs	r3, #2
  }
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	00100002 	.word	0x00100002
 800c8d0:	ffff0000 	.word	0xffff0000

0800c8d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08c      	sub	sp, #48	; 0x30
 800c8d8:	af02      	add	r7, sp, #8
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	607a      	str	r2, [r7, #4]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	817b      	strh	r3, [r7, #10]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c8e8:	f7ff fa62 	bl	800bdb0 <HAL_GetTick>
 800c8ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b20      	cmp	r3, #32
 800c8f8:	f040 820b 	bne.w	800cd12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	2319      	movs	r3, #25
 800c902:	2201      	movs	r2, #1
 800c904:	497c      	ldr	r1, [pc, #496]	; (800caf8 <HAL_I2C_Master_Receive+0x224>)
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f001 ffe8 	bl	800e8dc <I2C_WaitOnFlagUntilTimeout>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d001      	beq.n	800c916 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800c912:	2302      	movs	r3, #2
 800c914:	e1fe      	b.n	800cd14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d101      	bne.n	800c924 <HAL_I2C_Master_Receive+0x50>
 800c920:	2302      	movs	r3, #2
 800c922:	e1f7      	b.n	800cd14 <HAL_I2C_Master_Receive+0x440>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	2b01      	cmp	r3, #1
 800c938:	d007      	beq.n	800c94a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f042 0201 	orr.w	r2, r2, #1
 800c948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c958:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2222      	movs	r2, #34	; 0x22
 800c95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2210      	movs	r2, #16
 800c966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	893a      	ldrh	r2, [r7, #8]
 800c97a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c980:	b29a      	uxth	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	4a5c      	ldr	r2, [pc, #368]	; (800cafc <HAL_I2C_Master_Receive+0x228>)
 800c98a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c98c:	8979      	ldrh	r1, [r7, #10]
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f001 fe2c 	bl	800e5f0 <I2C_MasterRequestRead>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e1b8      	b.n	800cd14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d113      	bne.n	800c9d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	623b      	str	r3, [r7, #32]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	695b      	ldr	r3, [r3, #20]
 800c9b4:	623b      	str	r3, [r7, #32]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	699b      	ldr	r3, [r3, #24]
 800c9bc:	623b      	str	r3, [r7, #32]
 800c9be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	e18c      	b.n	800ccec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d11b      	bne.n	800ca12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	61fb      	str	r3, [r7, #28]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	695b      	ldr	r3, [r3, #20]
 800c9f4:	61fb      	str	r3, [r7, #28]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	699b      	ldr	r3, [r3, #24]
 800c9fc:	61fb      	str	r3, [r7, #28]
 800c9fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca0e:	601a      	str	r2, [r3, #0]
 800ca10:	e16c      	b.n	800ccec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d11b      	bne.n	800ca52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	61bb      	str	r3, [r7, #24]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	695b      	ldr	r3, [r3, #20]
 800ca44:	61bb      	str	r3, [r7, #24]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	699b      	ldr	r3, [r3, #24]
 800ca4c:	61bb      	str	r3, [r7, #24]
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	e14c      	b.n	800ccec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ca60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca62:	2300      	movs	r3, #0
 800ca64:	617b      	str	r3, [r7, #20]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	617b      	str	r3, [r7, #20]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	699b      	ldr	r3, [r3, #24]
 800ca74:	617b      	str	r3, [r7, #20]
 800ca76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ca78:	e138      	b.n	800ccec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca7e:	2b03      	cmp	r3, #3
 800ca80:	f200 80f1 	bhi.w	800cc66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d123      	bne.n	800cad4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f002 f8ad 	bl	800ebf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	e139      	b.n	800cd14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	691a      	ldr	r2, [r3, #16]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab2:	1c5a      	adds	r2, r3, #1
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cabc:	3b01      	subs	r3, #1
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cac8:	b29b      	uxth	r3, r3
 800caca:	3b01      	subs	r3, #1
 800cacc:	b29a      	uxth	r2, r3
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cad2:	e10b      	b.n	800ccec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d14e      	bne.n	800cb7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae2:	2200      	movs	r2, #0
 800cae4:	4906      	ldr	r1, [pc, #24]	; (800cb00 <HAL_I2C_Master_Receive+0x22c>)
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f001 fef8 	bl	800e8dc <I2C_WaitOnFlagUntilTimeout>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d008      	beq.n	800cb04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e10e      	b.n	800cd14 <HAL_I2C_Master_Receive+0x440>
 800caf6:	bf00      	nop
 800caf8:	00100002 	.word	0x00100002
 800cafc:	ffff0000 	.word	0xffff0000
 800cb00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	691a      	ldr	r2, [r3, #16]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1e:	b2d2      	uxtb	r2, r2
 800cb20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb26:	1c5a      	adds	r2, r3, #1
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb30:	3b01      	subs	r3, #1
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	691a      	ldr	r2, [r3, #16]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb50:	b2d2      	uxtb	r2, r2
 800cb52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb62:	3b01      	subs	r3, #1
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	3b01      	subs	r3, #1
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cb78:	e0b8      	b.n	800ccec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	2200      	movs	r2, #0
 800cb82:	4966      	ldr	r1, [pc, #408]	; (800cd1c <HAL_I2C_Master_Receive+0x448>)
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f001 fea9 	bl	800e8dc <I2C_WaitOnFlagUntilTimeout>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d001      	beq.n	800cb94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	e0bf      	b.n	800cd14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	691a      	ldr	r2, [r3, #16]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbae:	b2d2      	uxtb	r2, r2
 800cbb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb6:	1c5a      	adds	r2, r3, #1
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbdc:	2200      	movs	r2, #0
 800cbde:	494f      	ldr	r1, [pc, #316]	; (800cd1c <HAL_I2C_Master_Receive+0x448>)
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f001 fe7b 	bl	800e8dc <I2C_WaitOnFlagUntilTimeout>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800cbec:	2301      	movs	r3, #1
 800cbee:	e091      	b.n	800cd14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	691a      	ldr	r2, [r3, #16]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	b2d2      	uxtb	r2, r2
 800cc0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc12:	1c5a      	adds	r2, r3, #1
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	b29a      	uxth	r2, r3
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	691a      	ldr	r2, [r3, #16]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3c:	b2d2      	uxtb	r2, r2
 800cc3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc44:	1c5a      	adds	r2, r3, #1
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	3b01      	subs	r3, #1
 800cc5e:	b29a      	uxth	r2, r3
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc64:	e042      	b.n	800ccec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f001 ffc0 	bl	800ebf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e04c      	b.n	800cd14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	691a      	ldr	r2, [r3, #16]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc84:	b2d2      	uxtb	r2, r2
 800cc86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc96:	3b01      	subs	r3, #1
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	3b01      	subs	r3, #1
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	f003 0304 	and.w	r3, r3, #4
 800ccb6:	2b04      	cmp	r3, #4
 800ccb8:	d118      	bne.n	800ccec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	691a      	ldr	r2, [r3, #16]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc4:	b2d2      	uxtb	r2, r2
 800ccc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	3b01      	subs	r3, #1
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	f47f aec2 	bne.w	800ca7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2220      	movs	r2, #32
 800ccfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e000      	b.n	800cd14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800cd12:	2302      	movs	r3, #2
  }
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3728      	adds	r7, #40	; 0x28
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	00010004 	.word	0x00010004

0800cd20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b088      	sub	sp, #32
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
 800cd4c:	2b10      	cmp	r3, #16
 800cd4e:	d003      	beq.n	800cd58 <HAL_I2C_EV_IRQHandler+0x38>
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
 800cd52:	2b40      	cmp	r3, #64	; 0x40
 800cd54:	f040 80c1 	bne.w	800ceda <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	695b      	ldr	r3, [r3, #20]
 800cd66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	f003 0301 	and.w	r3, r3, #1
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10d      	bne.n	800cd8e <HAL_I2C_EV_IRQHandler+0x6e>
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800cd78:	d003      	beq.n	800cd82 <HAL_I2C_EV_IRQHandler+0x62>
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800cd80:	d101      	bne.n	800cd86 <HAL_I2C_EV_IRQHandler+0x66>
 800cd82:	2301      	movs	r3, #1
 800cd84:	e000      	b.n	800cd88 <HAL_I2C_EV_IRQHandler+0x68>
 800cd86:	2300      	movs	r3, #0
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	f000 8132 	beq.w	800cff2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	f003 0301 	and.w	r3, r3, #1
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00c      	beq.n	800cdb2 <HAL_I2C_EV_IRQHandler+0x92>
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	0a5b      	lsrs	r3, r3, #9
 800cd9c:	f003 0301 	and.w	r3, r3, #1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d006      	beq.n	800cdb2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f001 ffa8 	bl	800ecfa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fd83 	bl	800d8b6 <I2C_Master_SB>
 800cdb0:	e092      	b.n	800ced8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	08db      	lsrs	r3, r3, #3
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d009      	beq.n	800cdd2 <HAL_I2C_EV_IRQHandler+0xb2>
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	0a5b      	lsrs	r3, r3, #9
 800cdc2:	f003 0301 	and.w	r3, r3, #1
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d003      	beq.n	800cdd2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fdf9 	bl	800d9c2 <I2C_Master_ADD10>
 800cdd0:	e082      	b.n	800ced8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	085b      	lsrs	r3, r3, #1
 800cdd6:	f003 0301 	and.w	r3, r3, #1
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d009      	beq.n	800cdf2 <HAL_I2C_EV_IRQHandler+0xd2>
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	0a5b      	lsrs	r3, r3, #9
 800cde2:	f003 0301 	and.w	r3, r3, #1
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d003      	beq.n	800cdf2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fe13 	bl	800da16 <I2C_Master_ADDR>
 800cdf0:	e072      	b.n	800ced8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	089b      	lsrs	r3, r3, #2
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d03b      	beq.n	800ce76 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce0c:	f000 80f3 	beq.w	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	09db      	lsrs	r3, r3, #7
 800ce14:	f003 0301 	and.w	r3, r3, #1
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00f      	beq.n	800ce3c <HAL_I2C_EV_IRQHandler+0x11c>
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	0a9b      	lsrs	r3, r3, #10
 800ce20:	f003 0301 	and.w	r3, r3, #1
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d009      	beq.n	800ce3c <HAL_I2C_EV_IRQHandler+0x11c>
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	089b      	lsrs	r3, r3, #2
 800ce2c:	f003 0301 	and.w	r3, r3, #1
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d103      	bne.n	800ce3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 f9f3 	bl	800d220 <I2C_MasterTransmit_TXE>
 800ce3a:	e04d      	b.n	800ced8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	089b      	lsrs	r3, r3, #2
 800ce40:	f003 0301 	and.w	r3, r3, #1
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 80d6 	beq.w	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	0a5b      	lsrs	r3, r3, #9
 800ce4e:	f003 0301 	and.w	r3, r3, #1
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 80cf 	beq.w	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ce58:	7bbb      	ldrb	r3, [r7, #14]
 800ce5a:	2b21      	cmp	r3, #33	; 0x21
 800ce5c:	d103      	bne.n	800ce66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fa7a 	bl	800d358 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce64:	e0c7      	b.n	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
 800ce68:	2b40      	cmp	r3, #64	; 0x40
 800ce6a:	f040 80c4 	bne.w	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 fae8 	bl	800d444 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce74:	e0bf      	b.n	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce84:	f000 80b7 	beq.w	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	099b      	lsrs	r3, r3, #6
 800ce8c:	f003 0301 	and.w	r3, r3, #1
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00f      	beq.n	800ceb4 <HAL_I2C_EV_IRQHandler+0x194>
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	0a9b      	lsrs	r3, r3, #10
 800ce98:	f003 0301 	and.w	r3, r3, #1
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d009      	beq.n	800ceb4 <HAL_I2C_EV_IRQHandler+0x194>
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	089b      	lsrs	r3, r3, #2
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d103      	bne.n	800ceb4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fb5d 	bl	800d56c <I2C_MasterReceive_RXNE>
 800ceb2:	e011      	b.n	800ced8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	089b      	lsrs	r3, r3, #2
 800ceb8:	f003 0301 	and.w	r3, r3, #1
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 809a 	beq.w	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	0a5b      	lsrs	r3, r3, #9
 800cec6:	f003 0301 	and.w	r3, r3, #1
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 8093 	beq.w	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 fc06 	bl	800d6e2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ced6:	e08e      	b.n	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800ced8:	e08d      	b.n	800cff6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d004      	beq.n	800ceec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	695b      	ldr	r3, [r3, #20]
 800cee8:	61fb      	str	r3, [r7, #28]
 800ceea:	e007      	b.n	800cefc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	699b      	ldr	r3, [r3, #24]
 800cef2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	695b      	ldr	r3, [r3, #20]
 800cefa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cefc:	69fb      	ldr	r3, [r7, #28]
 800cefe:	085b      	lsrs	r3, r3, #1
 800cf00:	f003 0301 	and.w	r3, r3, #1
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d012      	beq.n	800cf2e <HAL_I2C_EV_IRQHandler+0x20e>
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	0a5b      	lsrs	r3, r3, #9
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00c      	beq.n	800cf2e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d003      	beq.n	800cf24 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	699b      	ldr	r3, [r3, #24]
 800cf22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800cf24:	69b9      	ldr	r1, [r7, #24]
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 ffc4 	bl	800deb4 <I2C_Slave_ADDR>
 800cf2c:	e066      	b.n	800cffc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	091b      	lsrs	r3, r3, #4
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d009      	beq.n	800cf4e <HAL_I2C_EV_IRQHandler+0x22e>
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	0a5b      	lsrs	r3, r3, #9
 800cf3e:	f003 0301 	and.w	r3, r3, #1
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d003      	beq.n	800cf4e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fffe 	bl	800df48 <I2C_Slave_STOPF>
 800cf4c:	e056      	b.n	800cffc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cf4e:	7bbb      	ldrb	r3, [r7, #14]
 800cf50:	2b21      	cmp	r3, #33	; 0x21
 800cf52:	d002      	beq.n	800cf5a <HAL_I2C_EV_IRQHandler+0x23a>
 800cf54:	7bbb      	ldrb	r3, [r7, #14]
 800cf56:	2b29      	cmp	r3, #41	; 0x29
 800cf58:	d125      	bne.n	800cfa6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	09db      	lsrs	r3, r3, #7
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00f      	beq.n	800cf86 <HAL_I2C_EV_IRQHandler+0x266>
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	0a9b      	lsrs	r3, r3, #10
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d009      	beq.n	800cf86 <HAL_I2C_EV_IRQHandler+0x266>
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	089b      	lsrs	r3, r3, #2
 800cf76:	f003 0301 	and.w	r3, r3, #1
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d103      	bne.n	800cf86 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 feda 	bl	800dd38 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cf84:	e039      	b.n	800cffa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	089b      	lsrs	r3, r3, #2
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d033      	beq.n	800cffa <HAL_I2C_EV_IRQHandler+0x2da>
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	0a5b      	lsrs	r3, r3, #9
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d02d      	beq.n	800cffa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 ff07 	bl	800ddb2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cfa4:	e029      	b.n	800cffa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	099b      	lsrs	r3, r3, #6
 800cfaa:	f003 0301 	and.w	r3, r3, #1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00f      	beq.n	800cfd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	0a9b      	lsrs	r3, r3, #10
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d009      	beq.n	800cfd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	089b      	lsrs	r3, r3, #2
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d103      	bne.n	800cfd2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 ff12 	bl	800ddf4 <I2C_SlaveReceive_RXNE>
 800cfd0:	e014      	b.n	800cffc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	089b      	lsrs	r3, r3, #2
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00e      	beq.n	800cffc <HAL_I2C_EV_IRQHandler+0x2dc>
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	0a5b      	lsrs	r3, r3, #9
 800cfe2:	f003 0301 	and.w	r3, r3, #1
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d008      	beq.n	800cffc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 ff40 	bl	800de70 <I2C_SlaveReceive_BTF>
 800cff0:	e004      	b.n	800cffc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800cff2:	bf00      	nop
 800cff4:	e002      	b.n	800cffc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cff6:	bf00      	nop
 800cff8:	e000      	b.n	800cffc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cffa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800cffc:	3720      	adds	r7, #32
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b08a      	sub	sp, #40	; 0x28
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	695b      	ldr	r3, [r3, #20]
 800d010:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800d01a:	2300      	movs	r3, #0
 800d01c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d024:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	0a1b      	lsrs	r3, r3, #8
 800d02a:	f003 0301 	and.w	r3, r3, #1
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00e      	beq.n	800d050 <HAL_I2C_ER_IRQHandler+0x4e>
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	0a1b      	lsrs	r3, r3, #8
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d008      	beq.n	800d050 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800d03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d040:	f043 0301 	orr.w	r3, r3, #1
 800d044:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d04e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	0a5b      	lsrs	r3, r3, #9
 800d054:	f003 0301 	and.w	r3, r3, #1
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00e      	beq.n	800d07a <HAL_I2C_ER_IRQHandler+0x78>
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	0a1b      	lsrs	r3, r3, #8
 800d060:	f003 0301 	and.w	r3, r3, #1
 800d064:	2b00      	cmp	r3, #0
 800d066:	d008      	beq.n	800d07a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	f043 0302 	orr.w	r3, r3, #2
 800d06e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800d078:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	0a9b      	lsrs	r3, r3, #10
 800d07e:	f003 0301 	and.w	r3, r3, #1
 800d082:	2b00      	cmp	r3, #0
 800d084:	d03f      	beq.n	800d106 <HAL_I2C_ER_IRQHandler+0x104>
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	0a1b      	lsrs	r3, r3, #8
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d039      	beq.n	800d106 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800d092:	7efb      	ldrb	r3, [r7, #27]
 800d094:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800d0ac:	7ebb      	ldrb	r3, [r7, #26]
 800d0ae:	2b20      	cmp	r3, #32
 800d0b0:	d112      	bne.n	800d0d8 <HAL_I2C_ER_IRQHandler+0xd6>
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10f      	bne.n	800d0d8 <HAL_I2C_ER_IRQHandler+0xd6>
 800d0b8:	7cfb      	ldrb	r3, [r7, #19]
 800d0ba:	2b21      	cmp	r3, #33	; 0x21
 800d0bc:	d008      	beq.n	800d0d0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800d0be:	7cfb      	ldrb	r3, [r7, #19]
 800d0c0:	2b29      	cmp	r3, #41	; 0x29
 800d0c2:	d005      	beq.n	800d0d0 <HAL_I2C_ER_IRQHandler+0xce>
 800d0c4:	7cfb      	ldrb	r3, [r7, #19]
 800d0c6:	2b28      	cmp	r3, #40	; 0x28
 800d0c8:	d106      	bne.n	800d0d8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b21      	cmp	r3, #33	; 0x21
 800d0ce:	d103      	bne.n	800d0d8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f001 f869 	bl	800e1a8 <I2C_Slave_AF>
 800d0d6:	e016      	b.n	800d106 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d0e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	f043 0304 	orr.w	r3, r3, #4
 800d0e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d0ea:	7efb      	ldrb	r3, [r7, #27]
 800d0ec:	2b10      	cmp	r3, #16
 800d0ee:	d002      	beq.n	800d0f6 <HAL_I2C_ER_IRQHandler+0xf4>
 800d0f0:	7efb      	ldrb	r3, [r7, #27]
 800d0f2:	2b40      	cmp	r3, #64	; 0x40
 800d0f4:	d107      	bne.n	800d106 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d104:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	0adb      	lsrs	r3, r3, #11
 800d10a:	f003 0301 	and.w	r3, r3, #1
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00e      	beq.n	800d130 <HAL_I2C_ER_IRQHandler+0x12e>
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	0a1b      	lsrs	r3, r3, #8
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d008      	beq.n	800d130 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	f043 0308 	orr.w	r3, r3, #8
 800d124:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800d12e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d132:	2b00      	cmp	r3, #0
 800d134:	d008      	beq.n	800d148 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13c:	431a      	orrs	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f001 f8a0 	bl	800e288 <I2C_ITError>
  }
}
 800d148:	bf00      	nop
 800d14a:	3728      	adds	r7, #40	; 0x28
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d158:	bf00      	nop
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800d16c:	bf00      	nop
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d194:	bf00      	nop
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	70fb      	strb	r3, [r7, #3]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d1d8:	bf00      	nop
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d1ec:	bf00      	nop
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d200:	bf00      	nop
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d22e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d236:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d242:	2b00      	cmp	r3, #0
 800d244:	d150      	bne.n	800d2e8 <I2C_MasterTransmit_TXE+0xc8>
 800d246:	7bfb      	ldrb	r3, [r7, #15]
 800d248:	2b21      	cmp	r3, #33	; 0x21
 800d24a:	d14d      	bne.n	800d2e8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	2b08      	cmp	r3, #8
 800d250:	d01d      	beq.n	800d28e <I2C_MasterTransmit_TXE+0x6e>
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2b20      	cmp	r3, #32
 800d256:	d01a      	beq.n	800d28e <I2C_MasterTransmit_TXE+0x6e>
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d25e:	d016      	beq.n	800d28e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	685a      	ldr	r2, [r3, #4]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d26e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2211      	movs	r2, #17
 800d274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2220      	movs	r2, #32
 800d282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff ff62 	bl	800d150 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d28c:	e060      	b.n	800d350 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d29c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2ac:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2220      	movs	r2, #32
 800d2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	2b40      	cmp	r3, #64	; 0x40
 800d2c6:	d107      	bne.n	800d2d8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7ff ff7d 	bl	800d1d0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d2d6:	e03b      	b.n	800d350 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7ff ff35 	bl	800d150 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d2e6:	e033      	b.n	800d350 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ea:	2b21      	cmp	r3, #33	; 0x21
 800d2ec:	d005      	beq.n	800d2fa <I2C_MasterTransmit_TXE+0xda>
 800d2ee:	7bbb      	ldrb	r3, [r7, #14]
 800d2f0:	2b40      	cmp	r3, #64	; 0x40
 800d2f2:	d12d      	bne.n	800d350 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
 800d2f6:	2b22      	cmp	r3, #34	; 0x22
 800d2f8:	d12a      	bne.n	800d350 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	2b00      	cmp	r3, #0
 800d302:	d108      	bne.n	800d316 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d312:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d314:	e01c      	b.n	800d350 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	2b40      	cmp	r3, #64	; 0x40
 800d320:	d103      	bne.n	800d32a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 f88e 	bl	800d444 <I2C_MemoryTransmit_TXE_BTF>
}
 800d328:	e012      	b.n	800d350 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32e:	781a      	ldrb	r2, [r3, #0]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d344:	b29b      	uxth	r3, r3
 800d346:	3b01      	subs	r3, #1
 800d348:	b29a      	uxth	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d34e:	e7ff      	b.n	800d350 <I2C_MasterTransmit_TXE+0x130>
 800d350:	bf00      	nop
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d364:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	2b21      	cmp	r3, #33	; 0x21
 800d370:	d164      	bne.n	800d43c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d376:	b29b      	uxth	r3, r3
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d012      	beq.n	800d3a2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d380:	781a      	ldrb	r2, [r3, #0]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38c:	1c5a      	adds	r2, r3, #1
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d396:	b29b      	uxth	r3, r3
 800d398:	3b01      	subs	r3, #1
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800d3a0:	e04c      	b.n	800d43c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b08      	cmp	r3, #8
 800d3a6:	d01d      	beq.n	800d3e4 <I2C_MasterTransmit_BTF+0x8c>
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2b20      	cmp	r3, #32
 800d3ac:	d01a      	beq.n	800d3e4 <I2C_MasterTransmit_BTF+0x8c>
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d3b4:	d016      	beq.n	800d3e4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d3c4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2211      	movs	r2, #17
 800d3ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2220      	movs	r2, #32
 800d3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f7ff feb7 	bl	800d150 <HAL_I2C_MasterTxCpltCallback>
}
 800d3e2:	e02b      	b.n	800d43c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d3f2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d402:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2220      	movs	r2, #32
 800d40e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	2b40      	cmp	r3, #64	; 0x40
 800d41c:	d107      	bne.n	800d42e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff fed2 	bl	800d1d0 <HAL_I2C_MemTxCpltCallback>
}
 800d42c:	e006      	b.n	800d43c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7ff fe8a 	bl	800d150 <HAL_I2C_MasterTxCpltCallback>
}
 800d43c:	bf00      	nop
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d452:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d11d      	bne.n	800d498 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d460:	2b01      	cmp	r3, #1
 800d462:	d10b      	bne.n	800d47c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d474:	1c9a      	adds	r2, r3, #2
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800d47a:	e073      	b.n	800d564 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d480:	b29b      	uxth	r3, r3
 800d482:	121b      	asrs	r3, r3, #8
 800d484:	b2da      	uxtb	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d496:	e065      	b.n	800d564 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d10b      	bne.n	800d4b8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4b0:	1c5a      	adds	r2, r3, #1
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d4b6:	e055      	b.n	800d564 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	d151      	bne.n	800d564 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800d4c0:	7bfb      	ldrb	r3, [r7, #15]
 800d4c2:	2b22      	cmp	r3, #34	; 0x22
 800d4c4:	d10d      	bne.n	800d4e2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4d4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d4e0:	e040      	b.n	800d564 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d015      	beq.n	800d518 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800d4ec:	7bfb      	ldrb	r3, [r7, #15]
 800d4ee:	2b21      	cmp	r3, #33	; 0x21
 800d4f0:	d112      	bne.n	800d518 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f6:	781a      	ldrb	r2, [r3, #0]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d502:	1c5a      	adds	r2, r3, #1
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	3b01      	subs	r3, #1
 800d510:	b29a      	uxth	r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d516:	e025      	b.n	800d564 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d120      	bne.n	800d564 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800d522:	7bfb      	ldrb	r3, [r7, #15]
 800d524:	2b21      	cmp	r3, #33	; 0x21
 800d526:	d11d      	bne.n	800d564 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	685a      	ldr	r2, [r3, #4]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d536:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d546:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2220      	movs	r2, #32
 800d552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff fe36 	bl	800d1d0 <HAL_I2C_MemTxCpltCallback>
}
 800d564:	bf00      	nop
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b22      	cmp	r3, #34	; 0x22
 800d57e:	f040 80ac 	bne.w	800d6da <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d586:	b29b      	uxth	r3, r3
 800d588:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2b03      	cmp	r3, #3
 800d58e:	d921      	bls.n	800d5d4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	691a      	ldr	r2, [r3, #16]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59a:	b2d2      	uxtb	r2, r2
 800d59c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a2:	1c5a      	adds	r2, r3, #1
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	2b03      	cmp	r3, #3
 800d5be:	f040 808c 	bne.w	800d6da <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5d0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800d5d2:	e082      	b.n	800d6da <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	2b02      	cmp	r3, #2
 800d5da:	d075      	beq.n	800d6c8 <I2C_MasterReceive_RXNE+0x15c>
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d002      	beq.n	800d5e8 <I2C_MasterReceive_RXNE+0x7c>
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d16f      	bne.n	800d6c8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f001 facf 	bl	800eb8c <I2C_WaitOnSTOPRequestThroughIT>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d142      	bne.n	800d67a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d602:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	685a      	ldr	r2, [r3, #4]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d612:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	691a      	ldr	r2, [r3, #16]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61e:	b2d2      	uxtb	r2, r2
 800d620:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d630:	b29b      	uxth	r3, r3
 800d632:	3b01      	subs	r3, #1
 800d634:	b29a      	uxth	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2220      	movs	r2, #32
 800d63e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	2b40      	cmp	r3, #64	; 0x40
 800d64c:	d10a      	bne.n	800d664 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7ff fdc1 	bl	800d1e4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d662:	e03a      	b.n	800d6da <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2212      	movs	r2, #18
 800d670:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7ff fd76 	bl	800d164 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d678:	e02f      	b.n	800d6da <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	685a      	ldr	r2, [r3, #4]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d688:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	691a      	ldr	r2, [r3, #16]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d694:	b2d2      	uxtb	r2, r2
 800d696:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d69c:	1c5a      	adds	r2, r3, #1
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2220      	movs	r2, #32
 800d6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f7ff fd99 	bl	800d1f8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d6c6:	e008      	b.n	800d6da <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6d6:	605a      	str	r2, [r3, #4]
}
 800d6d8:	e7ff      	b.n	800d6da <I2C_MasterReceive_RXNE+0x16e>
 800d6da:	bf00      	nop
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b084      	sub	sp, #16
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	2b04      	cmp	r3, #4
 800d6f8:	d11b      	bne.n	800d732 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	685a      	ldr	r2, [r3, #4]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d708:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	691a      	ldr	r2, [r3, #16]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d714:	b2d2      	uxtb	r2, r2
 800d716:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d726:	b29b      	uxth	r3, r3
 800d728:	3b01      	subs	r3, #1
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d730:	e0bd      	b.n	800d8ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d736:	b29b      	uxth	r3, r3
 800d738:	2b03      	cmp	r3, #3
 800d73a:	d129      	bne.n	800d790 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d74a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b04      	cmp	r3, #4
 800d750:	d00a      	beq.n	800d768 <I2C_MasterReceive_BTF+0x86>
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2b02      	cmp	r3, #2
 800d756:	d007      	beq.n	800d768 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d766:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	691a      	ldr	r2, [r3, #16]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d772:	b2d2      	uxtb	r2, r2
 800d774:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77a:	1c5a      	adds	r2, r3, #1
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d784:	b29b      	uxth	r3, r3
 800d786:	3b01      	subs	r3, #1
 800d788:	b29a      	uxth	r2, r3
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d78e:	e08e      	b.n	800d8ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d794:	b29b      	uxth	r3, r3
 800d796:	2b02      	cmp	r3, #2
 800d798:	d176      	bne.n	800d888 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d002      	beq.n	800d7a6 <I2C_MasterReceive_BTF+0xc4>
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b10      	cmp	r3, #16
 800d7a4:	d108      	bne.n	800d7b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	e019      	b.n	800d7ec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2b04      	cmp	r3, #4
 800d7bc:	d002      	beq.n	800d7c4 <I2C_MasterReceive_BTF+0xe2>
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d108      	bne.n	800d7d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	e00a      	b.n	800d7ec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b10      	cmp	r3, #16
 800d7da:	d007      	beq.n	800d7ec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	691a      	ldr	r2, [r3, #16]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f6:	b2d2      	uxtb	r2, r2
 800d7f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fe:	1c5a      	adds	r2, r3, #1
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d808:	b29b      	uxth	r3, r3
 800d80a:	3b01      	subs	r3, #1
 800d80c:	b29a      	uxth	r2, r3
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	691a      	ldr	r2, [r3, #16]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81c:	b2d2      	uxtb	r2, r2
 800d81e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d824:	1c5a      	adds	r2, r3, #1
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d82e:	b29b      	uxth	r3, r3
 800d830:	3b01      	subs	r3, #1
 800d832:	b29a      	uxth	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d846:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2220      	movs	r2, #32
 800d84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d856:	b2db      	uxtb	r3, r3
 800d858:	2b40      	cmp	r3, #64	; 0x40
 800d85a:	d10a      	bne.n	800d872 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff fcba 	bl	800d1e4 <HAL_I2C_MemRxCpltCallback>
}
 800d870:	e01d      	b.n	800d8ae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2212      	movs	r2, #18
 800d87e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff fc6f 	bl	800d164 <HAL_I2C_MasterRxCpltCallback>
}
 800d886:	e012      	b.n	800d8ae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	691a      	ldr	r2, [r3, #16]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d892:	b2d2      	uxtb	r2, r2
 800d894:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89a:	1c5a      	adds	r2, r3, #1
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d8ae:	bf00      	nop
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800d8b6:	b480      	push	{r7}
 800d8b8:	b083      	sub	sp, #12
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	2b40      	cmp	r3, #64	; 0x40
 800d8c8:	d117      	bne.n	800d8fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d109      	bne.n	800d8e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	461a      	mov	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d8e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800d8e4:	e067      	b.n	800d9b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	f043 0301 	orr.w	r3, r3, #1
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	611a      	str	r2, [r3, #16]
}
 800d8f8:	e05d      	b.n	800d9b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d902:	d133      	bne.n	800d96c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b21      	cmp	r3, #33	; 0x21
 800d90e:	d109      	bne.n	800d924 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d914:	b2db      	uxtb	r3, r3
 800d916:	461a      	mov	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d920:	611a      	str	r2, [r3, #16]
 800d922:	e008      	b.n	800d936 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	f043 0301 	orr.w	r3, r3, #1
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d004      	beq.n	800d948 <I2C_Master_SB+0x92>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d108      	bne.n	800d95a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d032      	beq.n	800d9b6 <I2C_Master_SB+0x100>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d956:	2b00      	cmp	r3, #0
 800d958:	d02d      	beq.n	800d9b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	685a      	ldr	r2, [r3, #4]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d968:	605a      	str	r2, [r3, #4]
}
 800d96a:	e024      	b.n	800d9b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d970:	2b00      	cmp	r3, #0
 800d972:	d10e      	bne.n	800d992 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d978:	b29b      	uxth	r3, r3
 800d97a:	11db      	asrs	r3, r3, #7
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	f003 0306 	and.w	r3, r3, #6
 800d982:	b2db      	uxtb	r3, r3
 800d984:	f063 030f 	orn	r3, r3, #15
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	611a      	str	r2, [r3, #16]
}
 800d990:	e011      	b.n	800d9b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d996:	2b01      	cmp	r3, #1
 800d998:	d10d      	bne.n	800d9b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	11db      	asrs	r3, r3, #7
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	f003 0306 	and.w	r3, r3, #6
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	f063 030e 	orn	r3, r3, #14
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	611a      	str	r2, [r3, #16]
}
 800d9b6:	bf00      	nop
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b083      	sub	sp, #12
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d004      	beq.n	800d9e8 <I2C_Master_ADD10+0x26>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d108      	bne.n	800d9fa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00c      	beq.n	800da0a <I2C_Master_ADD10+0x48>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d007      	beq.n	800da0a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	685a      	ldr	r2, [r3, #4]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da08:	605a      	str	r2, [r3, #4]
  }
}
 800da0a:	bf00      	nop
 800da0c:	370c      	adds	r7, #12
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr

0800da16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800da16:	b480      	push	{r7}
 800da18:	b091      	sub	sp, #68	; 0x44
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da32:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	2b22      	cmp	r3, #34	; 0x22
 800da3e:	f040 8169 	bne.w	800dd14 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10f      	bne.n	800da6a <I2C_Master_ADDR+0x54>
 800da4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da4e:	2b40      	cmp	r3, #64	; 0x40
 800da50:	d10b      	bne.n	800da6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da52:	2300      	movs	r3, #0
 800da54:	633b      	str	r3, [r7, #48]	; 0x30
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	633b      	str	r3, [r7, #48]	; 0x30
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	633b      	str	r3, [r7, #48]	; 0x30
 800da66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da68:	e160      	b.n	800dd2c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d11d      	bne.n	800daae <I2C_Master_ADDR+0x98>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800da7a:	d118      	bne.n	800daae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da7c:	2300      	movs	r3, #0
 800da7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	695b      	ldr	r3, [r3, #20]
 800da86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da90:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800daa0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daa6:	1c5a      	adds	r2, r3, #1
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	651a      	str	r2, [r3, #80]	; 0x50
 800daac:	e13e      	b.n	800dd2c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d113      	bne.n	800dae0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dab8:	2300      	movs	r3, #0
 800daba:	62bb      	str	r3, [r7, #40]	; 0x28
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	695b      	ldr	r3, [r3, #20]
 800dac2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	62bb      	str	r3, [r7, #40]	; 0x28
 800dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dadc:	601a      	str	r2, [r3, #0]
 800dade:	e115      	b.n	800dd0c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	f040 808a 	bne.w	800dc00 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800daec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800daf2:	d137      	bne.n	800db64 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db02:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db12:	d113      	bne.n	800db3c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db22:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db24:	2300      	movs	r3, #0
 800db26:	627b      	str	r3, [r7, #36]	; 0x24
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	695b      	ldr	r3, [r3, #20]
 800db2e:	627b      	str	r3, [r7, #36]	; 0x24
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	699b      	ldr	r3, [r3, #24]
 800db36:	627b      	str	r3, [r7, #36]	; 0x24
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	e0e7      	b.n	800dd0c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db3c:	2300      	movs	r3, #0
 800db3e:	623b      	str	r3, [r7, #32]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	695b      	ldr	r3, [r3, #20]
 800db46:	623b      	str	r3, [r7, #32]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	699b      	ldr	r3, [r3, #24]
 800db4e:	623b      	str	r3, [r7, #32]
 800db50:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db60:	601a      	str	r2, [r3, #0]
 800db62:	e0d3      	b.n	800dd0c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800db64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db66:	2b08      	cmp	r3, #8
 800db68:	d02e      	beq.n	800dbc8 <I2C_Master_ADDR+0x1b2>
 800db6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6c:	2b20      	cmp	r3, #32
 800db6e:	d02b      	beq.n	800dbc8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800db70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db72:	2b12      	cmp	r3, #18
 800db74:	d102      	bne.n	800db7c <I2C_Master_ADDR+0x166>
 800db76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d125      	bne.n	800dbc8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800db7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7e:	2b04      	cmp	r3, #4
 800db80:	d00e      	beq.n	800dba0 <I2C_Master_ADDR+0x18a>
 800db82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db84:	2b02      	cmp	r3, #2
 800db86:	d00b      	beq.n	800dba0 <I2C_Master_ADDR+0x18a>
 800db88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8a:	2b10      	cmp	r3, #16
 800db8c:	d008      	beq.n	800dba0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	e007      	b.n	800dbb0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dbae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	61fb      	str	r3, [r7, #28]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	695b      	ldr	r3, [r3, #20]
 800dbba:	61fb      	str	r3, [r7, #28]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	699b      	ldr	r3, [r3, #24]
 800dbc2:	61fb      	str	r3, [r7, #28]
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	e0a1      	b.n	800dd0c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbd6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbd8:	2300      	movs	r3, #0
 800dbda:	61bb      	str	r3, [r7, #24]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	61bb      	str	r3, [r7, #24]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	699b      	ldr	r3, [r3, #24]
 800dbea:	61bb      	str	r3, [r7, #24]
 800dbec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbfc:	601a      	str	r2, [r3, #0]
 800dbfe:	e085      	b.n	800dd0c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	d14d      	bne.n	800dca6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800dc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0c:	2b04      	cmp	r3, #4
 800dc0e:	d016      	beq.n	800dc3e <I2C_Master_ADDR+0x228>
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	2b02      	cmp	r3, #2
 800dc14:	d013      	beq.n	800dc3e <I2C_Master_ADDR+0x228>
 800dc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc18:	2b10      	cmp	r3, #16
 800dc1a:	d010      	beq.n	800dc3e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc2a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc3a:	601a      	str	r2, [r3, #0]
 800dc3c:	e007      	b.n	800dc4e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc4c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc5c:	d117      	bne.n	800dc8e <I2C_Master_ADDR+0x278>
 800dc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dc64:	d00b      	beq.n	800dc7e <I2C_Master_ADDR+0x268>
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d008      	beq.n	800dc7e <I2C_Master_ADDR+0x268>
 800dc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6e:	2b08      	cmp	r3, #8
 800dc70:	d005      	beq.n	800dc7e <I2C_Master_ADDR+0x268>
 800dc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc74:	2b10      	cmp	r3, #16
 800dc76:	d002      	beq.n	800dc7e <I2C_Master_ADDR+0x268>
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	2b20      	cmp	r3, #32
 800dc7c:	d107      	bne.n	800dc8e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	685a      	ldr	r2, [r3, #4]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dc8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc8e:	2300      	movs	r3, #0
 800dc90:	617b      	str	r3, [r7, #20]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	695b      	ldr	r3, [r3, #20]
 800dc98:	617b      	str	r3, [r7, #20]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	617b      	str	r3, [r7, #20]
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	e032      	b.n	800dd0c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dcb4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dcc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcc4:	d117      	bne.n	800dcf6 <I2C_Master_ADDR+0x2e0>
 800dcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dccc:	d00b      	beq.n	800dce6 <I2C_Master_ADDR+0x2d0>
 800dcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d008      	beq.n	800dce6 <I2C_Master_ADDR+0x2d0>
 800dcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd6:	2b08      	cmp	r3, #8
 800dcd8:	d005      	beq.n	800dce6 <I2C_Master_ADDR+0x2d0>
 800dcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcdc:	2b10      	cmp	r3, #16
 800dcde:	d002      	beq.n	800dce6 <I2C_Master_ADDR+0x2d0>
 800dce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce2:	2b20      	cmp	r3, #32
 800dce4:	d107      	bne.n	800dcf6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	685a      	ldr	r2, [r3, #4]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dcf4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	613b      	str	r3, [r7, #16]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	695b      	ldr	r3, [r3, #20]
 800dd00:	613b      	str	r3, [r7, #16]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	699b      	ldr	r3, [r3, #24]
 800dd08:	613b      	str	r3, [r7, #16]
 800dd0a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800dd12:	e00b      	b.n	800dd2c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd14:	2300      	movs	r3, #0
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	60fb      	str	r3, [r7, #12]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	699b      	ldr	r3, [r3, #24]
 800dd26:	60fb      	str	r3, [r7, #12]
 800dd28:	68fb      	ldr	r3, [r7, #12]
}
 800dd2a:	e7ff      	b.n	800dd2c <I2C_Master_ADDR+0x316>
 800dd2c:	bf00      	nop
 800dd2e:	3744      	adds	r7, #68	; 0x44
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr

0800dd38 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d02b      	beq.n	800ddaa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd56:	781a      	ldrb	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd62:	1c5a      	adds	r2, r3, #1
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	b29a      	uxth	r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d114      	bne.n	800ddaa <I2C_SlaveTransmit_TXE+0x72>
 800dd80:	7bfb      	ldrb	r3, [r7, #15]
 800dd82:	2b29      	cmp	r3, #41	; 0x29
 800dd84:	d111      	bne.n	800ddaa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd94:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2221      	movs	r2, #33	; 0x21
 800dd9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2228      	movs	r2, #40	; 0x28
 800dda0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff f9e7 	bl	800d178 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ddaa:	bf00      	nop
 800ddac:	3710      	adds	r7, #16
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ddb2:	b480      	push	{r7}
 800ddb4:	b083      	sub	sp, #12
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d011      	beq.n	800dde8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc8:	781a      	ldrb	r2, [r3, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd4:	1c5a      	adds	r2, r3, #1
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	3b01      	subs	r3, #1
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800dde8:	bf00      	nop
 800ddea:	370c      	adds	r7, #12
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de08:	b29b      	uxth	r3, r3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d02c      	beq.n	800de68 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	691a      	ldr	r2, [r3, #16]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de18:	b2d2      	uxtb	r2, r2
 800de1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de20:	1c5a      	adds	r2, r3, #1
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	3b01      	subs	r3, #1
 800de2e:	b29a      	uxth	r2, r3
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de38:	b29b      	uxth	r3, r3
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d114      	bne.n	800de68 <I2C_SlaveReceive_RXNE+0x74>
 800de3e:	7bfb      	ldrb	r3, [r7, #15]
 800de40:	2b2a      	cmp	r3, #42	; 0x2a
 800de42:	d111      	bne.n	800de68 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	685a      	ldr	r2, [r3, #4]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de52:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2222      	movs	r2, #34	; 0x22
 800de58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2228      	movs	r2, #40	; 0x28
 800de5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7ff f992 	bl	800d18c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800de68:	bf00      	nop
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d012      	beq.n	800dea8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	691a      	ldr	r2, [r3, #16]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8c:	b2d2      	uxtb	r2, r2
 800de8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de94:	1c5a      	adds	r2, r3, #1
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	3b01      	subs	r3, #1
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800dea8:	bf00      	nop
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr

0800deb4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800debe:	2300      	movs	r3, #0
 800dec0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dece:	2b28      	cmp	r3, #40	; 0x28
 800ded0:	d127      	bne.n	800df22 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	685a      	ldr	r2, [r3, #4]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dee0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	089b      	lsrs	r3, r3, #2
 800dee6:	f003 0301 	and.w	r3, r3, #1
 800deea:	2b00      	cmp	r3, #0
 800deec:	d101      	bne.n	800def2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800deee:	2301      	movs	r3, #1
 800def0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	09db      	lsrs	r3, r3, #7
 800def6:	f003 0301 	and.w	r3, r3, #1
 800defa:	2b00      	cmp	r3, #0
 800defc:	d103      	bne.n	800df06 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	81bb      	strh	r3, [r7, #12]
 800df04:	e002      	b.n	800df0c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	699b      	ldr	r3, [r3, #24]
 800df0a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800df14:	89ba      	ldrh	r2, [r7, #12]
 800df16:	7bfb      	ldrb	r3, [r7, #15]
 800df18:	4619      	mov	r1, r3
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7ff f940 	bl	800d1a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800df20:	e00e      	b.n	800df40 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df22:	2300      	movs	r3, #0
 800df24:	60bb      	str	r3, [r7, #8]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	695b      	ldr	r3, [r3, #20]
 800df2c:	60bb      	str	r3, [r7, #8]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	699b      	ldr	r3, [r3, #24]
 800df34:	60bb      	str	r3, [r7, #8]
 800df36:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800df40:	bf00      	nop
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800df66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800df68:	2300      	movs	r3, #0
 800df6a:	60bb      	str	r3, [r7, #8]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	60bb      	str	r3, [r7, #8]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f042 0201 	orr.w	r2, r2, #1
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfa4:	d172      	bne.n	800e08c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800dfa6:	7bfb      	ldrb	r3, [r7, #15]
 800dfa8:	2b22      	cmp	r3, #34	; 0x22
 800dfaa:	d002      	beq.n	800dfb2 <I2C_Slave_STOPF+0x6a>
 800dfac:	7bfb      	ldrb	r3, [r7, #15]
 800dfae:	2b2a      	cmp	r3, #42	; 0x2a
 800dfb0:	d135      	bne.n	800e01e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d005      	beq.n	800dfd6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfce:	f043 0204 	orr.w	r2, r3, #4
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	685a      	ldr	r2, [r3, #4]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfe4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fe f884 	bl	800c0f8 <HAL_DMA_GetState>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d049      	beq.n	800e08a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffa:	4a69      	ldr	r2, [pc, #420]	; (800e1a0 <I2C_Slave_STOPF+0x258>)
 800dffc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e002:	4618      	mov	r0, r3
 800e004:	f7fe f856 	bl	800c0b4 <HAL_DMA_Abort_IT>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d03d      	beq.n	800e08a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e018:	4610      	mov	r0, r2
 800e01a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e01c:	e035      	b.n	800e08a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	b29a      	uxth	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e030:	b29b      	uxth	r3, r3
 800e032:	2b00      	cmp	r3, #0
 800e034:	d005      	beq.n	800e042 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e03a:	f043 0204 	orr.w	r2, r3, #4
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	685a      	ldr	r2, [r3, #4]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e050:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e056:	4618      	mov	r0, r3
 800e058:	f7fe f84e 	bl	800c0f8 <HAL_DMA_GetState>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d014      	beq.n	800e08c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e066:	4a4e      	ldr	r2, [pc, #312]	; (800e1a0 <I2C_Slave_STOPF+0x258>)
 800e068:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe f820 	bl	800c0b4 <HAL_DMA_Abort_IT>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d008      	beq.n	800e08c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e084:	4610      	mov	r0, r2
 800e086:	4798      	blx	r3
 800e088:	e000      	b.n	800e08c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e08a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e090:	b29b      	uxth	r3, r3
 800e092:	2b00      	cmp	r3, #0
 800e094:	d03e      	beq.n	800e114 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	695b      	ldr	r3, [r3, #20]
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b04      	cmp	r3, #4
 800e0a2:	d112      	bne.n	800e0ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	691a      	ldr	r2, [r3, #16]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ae:	b2d2      	uxtb	r2, r2
 800e0b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b6:	1c5a      	adds	r2, r3, #1
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	3b01      	subs	r3, #1
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	695b      	ldr	r3, [r3, #20]
 800e0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0d4:	2b40      	cmp	r3, #64	; 0x40
 800e0d6:	d112      	bne.n	800e0fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	691a      	ldr	r2, [r3, #16]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e2:	b2d2      	uxtb	r2, r2
 800e0e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ea:	1c5a      	adds	r2, r3, #1
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	3b01      	subs	r3, #1
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e102:	b29b      	uxth	r3, r3
 800e104:	2b00      	cmp	r3, #0
 800e106:	d005      	beq.n	800e114 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e10c:	f043 0204 	orr.w	r2, r3, #4
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d003      	beq.n	800e124 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 f8b3 	bl	800e288 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800e122:	e039      	b.n	800e198 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e124:	7bfb      	ldrb	r3, [r7, #15]
 800e126:	2b2a      	cmp	r3, #42	; 0x2a
 800e128:	d109      	bne.n	800e13e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2228      	movs	r2, #40	; 0x28
 800e134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7ff f827 	bl	800d18c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b28      	cmp	r3, #40	; 0x28
 800e148:	d111      	bne.n	800e16e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	4a15      	ldr	r2, [pc, #84]	; (800e1a4 <I2C_Slave_STOPF+0x25c>)
 800e14e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2220      	movs	r2, #32
 800e15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7ff f828 	bl	800d1bc <HAL_I2C_ListenCpltCallback>
}
 800e16c:	e014      	b.n	800e198 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e172:	2b22      	cmp	r3, #34	; 0x22
 800e174:	d002      	beq.n	800e17c <I2C_Slave_STOPF+0x234>
 800e176:	7bfb      	ldrb	r3, [r7, #15]
 800e178:	2b22      	cmp	r3, #34	; 0x22
 800e17a:	d10d      	bne.n	800e198 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2220      	movs	r2, #32
 800e186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7fe fffa 	bl	800d18c <HAL_I2C_SlaveRxCpltCallback>
}
 800e198:	bf00      	nop
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	0800e78d 	.word	0x0800e78d
 800e1a4:	ffff0000 	.word	0xffff0000

0800e1a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	2b08      	cmp	r3, #8
 800e1c2:	d002      	beq.n	800e1ca <I2C_Slave_AF+0x22>
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	2b20      	cmp	r3, #32
 800e1c8:	d129      	bne.n	800e21e <I2C_Slave_AF+0x76>
 800e1ca:	7bfb      	ldrb	r3, [r7, #15]
 800e1cc:	2b28      	cmp	r3, #40	; 0x28
 800e1ce:	d126      	bne.n	800e21e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	4a2c      	ldr	r2, [pc, #176]	; (800e284 <I2C_Slave_AF+0xdc>)
 800e1d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	685a      	ldr	r2, [r3, #4]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e1e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e1ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e1fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2220      	movs	r2, #32
 800e20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2200      	movs	r2, #0
 800e212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7fe ffd0 	bl	800d1bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e21c:	e02e      	b.n	800e27c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
 800e220:	2b21      	cmp	r3, #33	; 0x21
 800e222:	d126      	bne.n	800e272 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	4a17      	ldr	r2, [pc, #92]	; (800e284 <I2C_Slave_AF+0xdc>)
 800e228:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2221      	movs	r2, #33	; 0x21
 800e22e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2220      	movs	r2, #32
 800e234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e24e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e258:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e268:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7fe ff84 	bl	800d178 <HAL_I2C_SlaveTxCpltCallback>
}
 800e270:	e004      	b.n	800e27c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e27a:	615a      	str	r2, [r3, #20]
}
 800e27c:	bf00      	nop
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	ffff0000 	.word	0xffff0000

0800e288 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e296:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e29e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e2a0:	7bbb      	ldrb	r3, [r7, #14]
 800e2a2:	2b10      	cmp	r3, #16
 800e2a4:	d002      	beq.n	800e2ac <I2C_ITError+0x24>
 800e2a6:	7bbb      	ldrb	r3, [r7, #14]
 800e2a8:	2b40      	cmp	r3, #64	; 0x40
 800e2aa:	d10a      	bne.n	800e2c2 <I2C_ITError+0x3a>
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
 800e2ae:	2b22      	cmp	r3, #34	; 0x22
 800e2b0:	d107      	bne.n	800e2c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e2c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e2c2:	7bfb      	ldrb	r3, [r7, #15]
 800e2c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e2c8:	2b28      	cmp	r3, #40	; 0x28
 800e2ca:	d107      	bne.n	800e2dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2228      	movs	r2, #40	; 0x28
 800e2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e2da:	e015      	b.n	800e308 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2ea:	d00a      	beq.n	800e302 <I2C_ITError+0x7a>
 800e2ec:	7bfb      	ldrb	r3, [r7, #15]
 800e2ee:	2b60      	cmp	r3, #96	; 0x60
 800e2f0:	d007      	beq.n	800e302 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2220      	movs	r2, #32
 800e2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2200      	movs	r2, #0
 800e306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e316:	d162      	bne.n	800e3de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	685a      	ldr	r2, [r3, #4]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e326:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e330:	b2db      	uxtb	r3, r3
 800e332:	2b01      	cmp	r3, #1
 800e334:	d020      	beq.n	800e378 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33a:	4a6a      	ldr	r2, [pc, #424]	; (800e4e4 <I2C_ITError+0x25c>)
 800e33c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e342:	4618      	mov	r0, r3
 800e344:	f7fd feb6 	bl	800c0b4 <HAL_DMA_Abort_IT>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 8089 	beq.w	800e462 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f022 0201 	bic.w	r2, r2, #1
 800e35e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2220      	movs	r2, #32
 800e364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e372:	4610      	mov	r0, r2
 800e374:	4798      	blx	r3
 800e376:	e074      	b.n	800e462 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e37c:	4a59      	ldr	r2, [pc, #356]	; (800e4e4 <I2C_ITError+0x25c>)
 800e37e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e384:	4618      	mov	r0, r3
 800e386:	f7fd fe95 	bl	800c0b4 <HAL_DMA_Abort_IT>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d068      	beq.n	800e462 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	695b      	ldr	r3, [r3, #20]
 800e396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e39a:	2b40      	cmp	r3, #64	; 0x40
 800e39c:	d10b      	bne.n	800e3b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	691a      	ldr	r2, [r3, #16]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a8:	b2d2      	uxtb	r2, r2
 800e3aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b0:	1c5a      	adds	r2, r3, #1
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f022 0201 	bic.w	r2, r2, #1
 800e3c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2220      	movs	r2, #32
 800e3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e3d8:	4610      	mov	r0, r2
 800e3da:	4798      	blx	r3
 800e3dc:	e041      	b.n	800e462 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	2b60      	cmp	r3, #96	; 0x60
 800e3e8:	d125      	bne.n	800e436 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2220      	movs	r2, #32
 800e3ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	695b      	ldr	r3, [r3, #20]
 800e3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e402:	2b40      	cmp	r3, #64	; 0x40
 800e404:	d10b      	bne.n	800e41e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	691a      	ldr	r2, [r3, #16]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e410:	b2d2      	uxtb	r2, r2
 800e412:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e418:	1c5a      	adds	r2, r3, #1
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f022 0201 	bic.w	r2, r2, #1
 800e42c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f7fe feec 	bl	800d20c <HAL_I2C_AbortCpltCallback>
 800e434:	e015      	b.n	800e462 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	695b      	ldr	r3, [r3, #20]
 800e43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e440:	2b40      	cmp	r3, #64	; 0x40
 800e442:	d10b      	bne.n	800e45c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	691a      	ldr	r2, [r3, #16]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e44e:	b2d2      	uxtb	r2, r2
 800e450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e456:	1c5a      	adds	r2, r3, #1
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7fe fecb 	bl	800d1f8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e466:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	f003 0301 	and.w	r3, r3, #1
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d10e      	bne.n	800e490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d109      	bne.n	800e490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e482:	2b00      	cmp	r3, #0
 800e484:	d104      	bne.n	800e490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d007      	beq.n	800e4a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	685a      	ldr	r2, [r3, #4]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e49e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ac:	f003 0304 	and.w	r3, r3, #4
 800e4b0:	2b04      	cmp	r3, #4
 800e4b2:	d113      	bne.n	800e4dc <I2C_ITError+0x254>
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	2b28      	cmp	r3, #40	; 0x28
 800e4b8:	d110      	bne.n	800e4dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4a0a      	ldr	r2, [pc, #40]	; (800e4e8 <I2C_ITError+0x260>)
 800e4be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2220      	movs	r2, #32
 800e4ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f7fe fe70 	bl	800d1bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e4dc:	bf00      	nop
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	0800e78d 	.word	0x0800e78d
 800e4e8:	ffff0000 	.word	0xffff0000

0800e4ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b088      	sub	sp, #32
 800e4f0:	af02      	add	r7, sp, #8
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	607a      	str	r2, [r7, #4]
 800e4f6:	603b      	str	r3, [r7, #0]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e500:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	2b08      	cmp	r3, #8
 800e506:	d006      	beq.n	800e516 <I2C_MasterRequestWrite+0x2a>
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d003      	beq.n	800e516 <I2C_MasterRequestWrite+0x2a>
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e514:	d108      	bne.n	800e528 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e524:	601a      	str	r2, [r3, #0]
 800e526:	e00b      	b.n	800e540 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52c:	2b12      	cmp	r3, #18
 800e52e:	d107      	bne.n	800e540 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e53e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f000 f9c5 	bl	800e8dc <I2C_WaitOnFlagUntilTimeout>
 800e552:	4603      	mov	r3, r0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00d      	beq.n	800e574 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e566:	d103      	bne.n	800e570 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e56e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e570:	2303      	movs	r3, #3
 800e572:	e035      	b.n	800e5e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e57c:	d108      	bne.n	800e590 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e57e:	897b      	ldrh	r3, [r7, #10]
 800e580:	b2db      	uxtb	r3, r3
 800e582:	461a      	mov	r2, r3
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e58c:	611a      	str	r2, [r3, #16]
 800e58e:	e01b      	b.n	800e5c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e590:	897b      	ldrh	r3, [r7, #10]
 800e592:	11db      	asrs	r3, r3, #7
 800e594:	b2db      	uxtb	r3, r3
 800e596:	f003 0306 	and.w	r3, r3, #6
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	f063 030f 	orn	r3, r3, #15
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	490e      	ldr	r1, [pc, #56]	; (800e5e8 <I2C_MasterRequestWrite+0xfc>)
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f000 f9eb 	bl	800e98a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e010      	b.n	800e5e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e5be:	897b      	ldrh	r3, [r7, #10]
 800e5c0:	b2da      	uxtb	r2, r3
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	4907      	ldr	r1, [pc, #28]	; (800e5ec <I2C_MasterRequestWrite+0x100>)
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f000 f9db 	bl	800e98a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e000      	b.n	800e5e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3718      	adds	r7, #24
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	00010008 	.word	0x00010008
 800e5ec:	00010002 	.word	0x00010002

0800e5f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b088      	sub	sp, #32
 800e5f4:	af02      	add	r7, sp, #8
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	607a      	str	r2, [r7, #4]
 800e5fa:	603b      	str	r3, [r7, #0]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e604:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e614:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	2b08      	cmp	r3, #8
 800e61a:	d006      	beq.n	800e62a <I2C_MasterRequestRead+0x3a>
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d003      	beq.n	800e62a <I2C_MasterRequestRead+0x3a>
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e628:	d108      	bne.n	800e63c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e638:	601a      	str	r2, [r3, #0]
 800e63a:	e00b      	b.n	800e654 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e640:	2b11      	cmp	r3, #17
 800e642:	d107      	bne.n	800e654 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f000 f93b 	bl	800e8dc <I2C_WaitOnFlagUntilTimeout>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00d      	beq.n	800e688 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e67a:	d103      	bne.n	800e684 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e682:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e684:	2303      	movs	r3, #3
 800e686:	e079      	b.n	800e77c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	691b      	ldr	r3, [r3, #16]
 800e68c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e690:	d108      	bne.n	800e6a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e692:	897b      	ldrh	r3, [r7, #10]
 800e694:	b2db      	uxtb	r3, r3
 800e696:	f043 0301 	orr.w	r3, r3, #1
 800e69a:	b2da      	uxtb	r2, r3
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	611a      	str	r2, [r3, #16]
 800e6a2:	e05f      	b.n	800e764 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e6a4:	897b      	ldrh	r3, [r7, #10]
 800e6a6:	11db      	asrs	r3, r3, #7
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	f003 0306 	and.w	r3, r3, #6
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	f063 030f 	orn	r3, r3, #15
 800e6b4:	b2da      	uxtb	r2, r3
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	4930      	ldr	r1, [pc, #192]	; (800e784 <I2C_MasterRequestRead+0x194>)
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f000 f961 	bl	800e98a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d001      	beq.n	800e6d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e054      	b.n	800e77c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e6d2:	897b      	ldrh	r3, [r7, #10]
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	4929      	ldr	r1, [pc, #164]	; (800e788 <I2C_MasterRequestRead+0x198>)
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f000 f951 	bl	800e98a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e044      	b.n	800e77c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	613b      	str	r3, [r7, #16]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	695b      	ldr	r3, [r3, #20]
 800e6fc:	613b      	str	r3, [r7, #16]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	699b      	ldr	r3, [r3, #24]
 800e704:	613b      	str	r3, [r7, #16]
 800e706:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e716:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2200      	movs	r2, #0
 800e720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f000 f8d9 	bl	800e8dc <I2C_WaitOnFlagUntilTimeout>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00d      	beq.n	800e74c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e73a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e73e:	d103      	bne.n	800e748 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e746:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e748:	2303      	movs	r3, #3
 800e74a:	e017      	b.n	800e77c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e74c:	897b      	ldrh	r3, [r7, #10]
 800e74e:	11db      	asrs	r3, r3, #7
 800e750:	b2db      	uxtb	r3, r3
 800e752:	f003 0306 	and.w	r3, r3, #6
 800e756:	b2db      	uxtb	r3, r3
 800e758:	f063 030e 	orn	r3, r3, #14
 800e75c:	b2da      	uxtb	r2, r3
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	4907      	ldr	r1, [pc, #28]	; (800e788 <I2C_MasterRequestRead+0x198>)
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f000 f90d 	bl	800e98a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d001      	beq.n	800e77a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e776:	2301      	movs	r3, #1
 800e778:	e000      	b.n	800e77c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3718      	adds	r7, #24
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	00010008 	.word	0x00010008
 800e788:	00010002 	.word	0x00010002

0800e78c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b086      	sub	sp, #24
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e794:	2300      	movs	r3, #0
 800e796:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e7a6:	4b4b      	ldr	r3, [pc, #300]	; (800e8d4 <I2C_DMAAbort+0x148>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	08db      	lsrs	r3, r3, #3
 800e7ac:	4a4a      	ldr	r2, [pc, #296]	; (800e8d8 <I2C_DMAAbort+0x14c>)
 800e7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e7b2:	0a1a      	lsrs	r2, r3, #8
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	4413      	add	r3, r2
 800e7ba:	00da      	lsls	r2, r3, #3
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d106      	bne.n	800e7d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ca:	f043 0220 	orr.w	r2, r3, #32
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800e7d2:	e00a      	b.n	800e7ea <I2C_DMAAbort+0x5e>
    }
    count--;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7e8:	d0ea      	beq.n	800e7c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d003      	beq.n	800e7fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d003      	beq.n	800e80a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e806:	2200      	movs	r2, #0
 800e808:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e818:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	2200      	movs	r2, #0
 800e81e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e824:	2b00      	cmp	r3, #0
 800e826:	d003      	beq.n	800e830 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e82c:	2200      	movs	r2, #0
 800e82e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e834:	2b00      	cmp	r3, #0
 800e836:	d003      	beq.n	800e840 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83c:	2200      	movs	r2, #0
 800e83e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f022 0201 	bic.w	r2, r2, #1
 800e84e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e856:	b2db      	uxtb	r3, r3
 800e858:	2b60      	cmp	r3, #96	; 0x60
 800e85a:	d10e      	bne.n	800e87a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	2220      	movs	r2, #32
 800e860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	2200      	movs	r2, #0
 800e868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	2200      	movs	r2, #0
 800e870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e872:	6978      	ldr	r0, [r7, #20]
 800e874:	f7fe fcca 	bl	800d20c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e878:	e027      	b.n	800e8ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e87a:	7cfb      	ldrb	r3, [r7, #19]
 800e87c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e880:	2b28      	cmp	r3, #40	; 0x28
 800e882:	d117      	bne.n	800e8b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f042 0201 	orr.w	r2, r2, #1
 800e892:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e8a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	2228      	movs	r2, #40	; 0x28
 800e8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e8b2:	e007      	b.n	800e8c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	2220      	movs	r2, #32
 800e8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e8c4:	6978      	ldr	r0, [r7, #20]
 800e8c6:	f7fe fc97 	bl	800d1f8 <HAL_I2C_ErrorCallback>
}
 800e8ca:	bf00      	nop
 800e8cc:	3718      	adds	r7, #24
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	20000310 	.word	0x20000310
 800e8d8:	14f8b589 	.word	0x14f8b589

0800e8dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	603b      	str	r3, [r7, #0]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e8ec:	e025      	b.n	800e93a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f4:	d021      	beq.n	800e93a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8f6:	f7fd fa5b 	bl	800bdb0 <HAL_GetTick>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	429a      	cmp	r2, r3
 800e904:	d302      	bcc.n	800e90c <I2C_WaitOnFlagUntilTimeout+0x30>
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d116      	bne.n	800e93a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2200      	movs	r2, #0
 800e910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2220      	movs	r2, #32
 800e916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e926:	f043 0220 	orr.w	r2, r3, #32
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2200      	movs	r2, #0
 800e932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e936:	2301      	movs	r3, #1
 800e938:	e023      	b.n	800e982 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	0c1b      	lsrs	r3, r3, #16
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	2b01      	cmp	r3, #1
 800e942:	d10d      	bne.n	800e960 <I2C_WaitOnFlagUntilTimeout+0x84>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	695b      	ldr	r3, [r3, #20]
 800e94a:	43da      	mvns	r2, r3
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	4013      	ands	r3, r2
 800e950:	b29b      	uxth	r3, r3
 800e952:	2b00      	cmp	r3, #0
 800e954:	bf0c      	ite	eq
 800e956:	2301      	moveq	r3, #1
 800e958:	2300      	movne	r3, #0
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	461a      	mov	r2, r3
 800e95e:	e00c      	b.n	800e97a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	699b      	ldr	r3, [r3, #24]
 800e966:	43da      	mvns	r2, r3
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	4013      	ands	r3, r2
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	2b00      	cmp	r3, #0
 800e970:	bf0c      	ite	eq
 800e972:	2301      	moveq	r3, #1
 800e974:	2300      	movne	r3, #0
 800e976:	b2db      	uxtb	r3, r3
 800e978:	461a      	mov	r2, r3
 800e97a:	79fb      	ldrb	r3, [r7, #7]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d0b6      	beq.n	800e8ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3710      	adds	r7, #16
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b084      	sub	sp, #16
 800e98e:	af00      	add	r7, sp, #0
 800e990:	60f8      	str	r0, [r7, #12]
 800e992:	60b9      	str	r1, [r7, #8]
 800e994:	607a      	str	r2, [r7, #4]
 800e996:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e998:	e051      	b.n	800ea3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	695b      	ldr	r3, [r3, #20]
 800e9a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e9a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9a8:	d123      	bne.n	800e9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e9c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2220      	movs	r2, #32
 800e9ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9de:	f043 0204 	orr.w	r2, r3, #4
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e046      	b.n	800ea80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9f8:	d021      	beq.n	800ea3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9fa:	f7fd f9d9 	bl	800bdb0 <HAL_GetTick>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	1ad3      	subs	r3, r2, r3
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d302      	bcc.n	800ea10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d116      	bne.n	800ea3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2200      	movs	r2, #0
 800ea14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2220      	movs	r2, #32
 800ea1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea2a:	f043 0220 	orr.w	r2, r3, #32
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e020      	b.n	800ea80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	0c1b      	lsrs	r3, r3, #16
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d10c      	bne.n	800ea62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	695b      	ldr	r3, [r3, #20]
 800ea4e:	43da      	mvns	r2, r3
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	4013      	ands	r3, r2
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	bf14      	ite	ne
 800ea5a:	2301      	movne	r3, #1
 800ea5c:	2300      	moveq	r3, #0
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	e00b      	b.n	800ea7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	699b      	ldr	r3, [r3, #24]
 800ea68:	43da      	mvns	r2, r3
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	4013      	ands	r3, r2
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	bf14      	ite	ne
 800ea74:	2301      	movne	r3, #1
 800ea76:	2300      	moveq	r3, #0
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d18d      	bne.n	800e99a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3710      	adds	r7, #16
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ea94:	e02d      	b.n	800eaf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f000 f900 	bl	800ec9c <I2C_IsAcknowledgeFailed>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d001      	beq.n	800eaa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e02d      	b.n	800eb02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaac:	d021      	beq.n	800eaf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eaae:	f7fd f97f 	bl	800bdb0 <HAL_GetTick>
 800eab2:	4602      	mov	r2, r0
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	68ba      	ldr	r2, [r7, #8]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d302      	bcc.n	800eac4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d116      	bne.n	800eaf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2200      	movs	r2, #0
 800eac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2220      	movs	r2, #32
 800eace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eade:	f043 0220 	orr.w	r2, r3, #32
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	e007      	b.n	800eb02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	695b      	ldr	r3, [r3, #20]
 800eaf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eafc:	2b80      	cmp	r3, #128	; 0x80
 800eafe:	d1ca      	bne.n	800ea96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800eb00:	2300      	movs	r3, #0
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b084      	sub	sp, #16
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	60f8      	str	r0, [r7, #12]
 800eb12:	60b9      	str	r1, [r7, #8]
 800eb14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800eb16:	e02d      	b.n	800eb74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f000 f8bf 	bl	800ec9c <I2C_IsAcknowledgeFailed>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d001      	beq.n	800eb28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800eb24:	2301      	movs	r3, #1
 800eb26:	e02d      	b.n	800eb84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb2e:	d021      	beq.n	800eb74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb30:	f7fd f93e 	bl	800bdb0 <HAL_GetTick>
 800eb34:	4602      	mov	r2, r0
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	68ba      	ldr	r2, [r7, #8]
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d302      	bcc.n	800eb46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d116      	bne.n	800eb74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2220      	movs	r2, #32
 800eb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb60:	f043 0220 	orr.w	r2, r3, #32
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800eb70:	2301      	movs	r3, #1
 800eb72:	e007      	b.n	800eb84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	695b      	ldr	r3, [r3, #20]
 800eb7a:	f003 0304 	and.w	r3, r3, #4
 800eb7e:	2b04      	cmp	r3, #4
 800eb80:	d1ca      	bne.n	800eb18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800eb82:	2300      	movs	r3, #0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eb94:	2300      	movs	r3, #0
 800eb96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800eb98:	4b13      	ldr	r3, [pc, #76]	; (800ebe8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	08db      	lsrs	r3, r3, #3
 800eb9e:	4a13      	ldr	r2, [pc, #76]	; (800ebec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800eba0:	fba2 2303 	umull	r2, r3, r2, r3
 800eba4:	0a1a      	lsrs	r2, r3, #8
 800eba6:	4613      	mov	r3, r2
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	4413      	add	r3, r2
 800ebac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d107      	bne.n	800ebca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebbe:	f043 0220 	orr.w	r2, r3, #32
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e008      	b.n	800ebdc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ebd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebd8:	d0e9      	beq.n	800ebae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3714      	adds	r7, #20
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr
 800ebe8:	20000310 	.word	0x20000310
 800ebec:	14f8b589 	.word	0x14f8b589

0800ebf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ebfc:	e042      	b.n	800ec84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	695b      	ldr	r3, [r3, #20]
 800ec04:	f003 0310 	and.w	r3, r3, #16
 800ec08:	2b10      	cmp	r3, #16
 800ec0a:	d119      	bne.n	800ec40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f06f 0210 	mvn.w	r2, #16
 800ec14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2220      	movs	r2, #32
 800ec20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	e029      	b.n	800ec94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec40:	f7fd f8b6 	bl	800bdb0 <HAL_GetTick>
 800ec44:	4602      	mov	r2, r0
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d302      	bcc.n	800ec56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d116      	bne.n	800ec84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2220      	movs	r2, #32
 800ec60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2200      	movs	r2, #0
 800ec68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec70:	f043 0220 	orr.w	r2, r3, #32
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e007      	b.n	800ec94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	695b      	ldr	r3, [r3, #20]
 800ec8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec8e:	2b40      	cmp	r3, #64	; 0x40
 800ec90:	d1b5      	bne.n	800ebfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ec92:	2300      	movs	r3, #0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	695b      	ldr	r3, [r3, #20]
 800ecaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ecae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecb2:	d11b      	bne.n	800ecec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ecbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2220      	movs	r2, #32
 800ecc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd8:	f043 0204 	orr.w	r2, r3, #4
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ece8:	2301      	movs	r3, #1
 800ecea:	e000      	b.n	800ecee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ecec:	2300      	movs	r3, #0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	370c      	adds	r7, #12
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr

0800ecfa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ecfa:	b480      	push	{r7}
 800ecfc:	b083      	sub	sp, #12
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed06:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ed0a:	d103      	bne.n	800ed14 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ed12:	e007      	b.n	800ed24 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ed1c:	d102      	bne.n	800ed24 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2208      	movs	r2, #8
 800ed22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b086      	sub	sp, #24
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d101      	bne.n	800ed42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e267      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f003 0301 	and.w	r3, r3, #1
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d075      	beq.n	800ee3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ed4e:	4b88      	ldr	r3, [pc, #544]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	f003 030c 	and.w	r3, r3, #12
 800ed56:	2b04      	cmp	r3, #4
 800ed58:	d00c      	beq.n	800ed74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ed5a:	4b85      	ldr	r3, [pc, #532]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ed62:	2b08      	cmp	r3, #8
 800ed64:	d112      	bne.n	800ed8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ed66:	4b82      	ldr	r3, [pc, #520]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed72:	d10b      	bne.n	800ed8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ed74:	4b7e      	ldr	r3, [pc, #504]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d05b      	beq.n	800ee38 <HAL_RCC_OscConfig+0x108>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d157      	bne.n	800ee38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ed88:	2301      	movs	r3, #1
 800ed8a:	e242      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed94:	d106      	bne.n	800eda4 <HAL_RCC_OscConfig+0x74>
 800ed96:	4b76      	ldr	r3, [pc, #472]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a75      	ldr	r2, [pc, #468]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ed9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eda0:	6013      	str	r3, [r2, #0]
 800eda2:	e01d      	b.n	800ede0 <HAL_RCC_OscConfig+0xb0>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800edac:	d10c      	bne.n	800edc8 <HAL_RCC_OscConfig+0x98>
 800edae:	4b70      	ldr	r3, [pc, #448]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a6f      	ldr	r2, [pc, #444]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800edb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800edb8:	6013      	str	r3, [r2, #0]
 800edba:	4b6d      	ldr	r3, [pc, #436]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a6c      	ldr	r2, [pc, #432]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800edc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800edc4:	6013      	str	r3, [r2, #0]
 800edc6:	e00b      	b.n	800ede0 <HAL_RCC_OscConfig+0xb0>
 800edc8:	4b69      	ldr	r3, [pc, #420]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4a68      	ldr	r2, [pc, #416]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800edce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800edd2:	6013      	str	r3, [r2, #0]
 800edd4:	4b66      	ldr	r3, [pc, #408]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a65      	ldr	r2, [pc, #404]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800edda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800edde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d013      	beq.n	800ee10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ede8:	f7fc ffe2 	bl	800bdb0 <HAL_GetTick>
 800edec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800edee:	e008      	b.n	800ee02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800edf0:	f7fc ffde 	bl	800bdb0 <HAL_GetTick>
 800edf4:	4602      	mov	r2, r0
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	2b64      	cmp	r3, #100	; 0x64
 800edfc:	d901      	bls.n	800ee02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800edfe:	2303      	movs	r3, #3
 800ee00:	e207      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee02:	4b5b      	ldr	r3, [pc, #364]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d0f0      	beq.n	800edf0 <HAL_RCC_OscConfig+0xc0>
 800ee0e:	e014      	b.n	800ee3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee10:	f7fc ffce 	bl	800bdb0 <HAL_GetTick>
 800ee14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee16:	e008      	b.n	800ee2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ee18:	f7fc ffca 	bl	800bdb0 <HAL_GetTick>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	1ad3      	subs	r3, r2, r3
 800ee22:	2b64      	cmp	r3, #100	; 0x64
 800ee24:	d901      	bls.n	800ee2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ee26:	2303      	movs	r3, #3
 800ee28:	e1f3      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ee2a:	4b51      	ldr	r3, [pc, #324]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d1f0      	bne.n	800ee18 <HAL_RCC_OscConfig+0xe8>
 800ee36:	e000      	b.n	800ee3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f003 0302 	and.w	r3, r3, #2
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d063      	beq.n	800ef0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ee46:	4b4a      	ldr	r3, [pc, #296]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ee48:	689b      	ldr	r3, [r3, #8]
 800ee4a:	f003 030c 	and.w	r3, r3, #12
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00b      	beq.n	800ee6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ee52:	4b47      	ldr	r3, [pc, #284]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ee5a:	2b08      	cmp	r3, #8
 800ee5c:	d11c      	bne.n	800ee98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ee5e:	4b44      	ldr	r3, [pc, #272]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d116      	bne.n	800ee98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ee6a:	4b41      	ldr	r3, [pc, #260]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f003 0302 	and.w	r3, r3, #2
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d005      	beq.n	800ee82 <HAL_RCC_OscConfig+0x152>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d001      	beq.n	800ee82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e1c7      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ee82:	4b3b      	ldr	r3, [pc, #236]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	00db      	lsls	r3, r3, #3
 800ee90:	4937      	ldr	r1, [pc, #220]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ee92:	4313      	orrs	r3, r2
 800ee94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ee96:	e03a      	b.n	800ef0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d020      	beq.n	800eee2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eea0:	4b34      	ldr	r3, [pc, #208]	; (800ef74 <HAL_RCC_OscConfig+0x244>)
 800eea2:	2201      	movs	r2, #1
 800eea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eea6:	f7fc ff83 	bl	800bdb0 <HAL_GetTick>
 800eeaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eeac:	e008      	b.n	800eec0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eeae:	f7fc ff7f 	bl	800bdb0 <HAL_GetTick>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	2b02      	cmp	r3, #2
 800eeba:	d901      	bls.n	800eec0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800eebc:	2303      	movs	r3, #3
 800eebe:	e1a8      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eec0:	4b2b      	ldr	r3, [pc, #172]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f003 0302 	and.w	r3, r3, #2
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d0f0      	beq.n	800eeae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eecc:	4b28      	ldr	r3, [pc, #160]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	691b      	ldr	r3, [r3, #16]
 800eed8:	00db      	lsls	r3, r3, #3
 800eeda:	4925      	ldr	r1, [pc, #148]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800eedc:	4313      	orrs	r3, r2
 800eede:	600b      	str	r3, [r1, #0]
 800eee0:	e015      	b.n	800ef0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800eee2:	4b24      	ldr	r3, [pc, #144]	; (800ef74 <HAL_RCC_OscConfig+0x244>)
 800eee4:	2200      	movs	r2, #0
 800eee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eee8:	f7fc ff62 	bl	800bdb0 <HAL_GetTick>
 800eeec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eeee:	e008      	b.n	800ef02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eef0:	f7fc ff5e 	bl	800bdb0 <HAL_GetTick>
 800eef4:	4602      	mov	r2, r0
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d901      	bls.n	800ef02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800eefe:	2303      	movs	r3, #3
 800ef00:	e187      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef02:	4b1b      	ldr	r3, [pc, #108]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f003 0302 	and.w	r3, r3, #2
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1f0      	bne.n	800eef0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f003 0308 	and.w	r3, r3, #8
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d036      	beq.n	800ef88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d016      	beq.n	800ef50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ef22:	4b15      	ldr	r3, [pc, #84]	; (800ef78 <HAL_RCC_OscConfig+0x248>)
 800ef24:	2201      	movs	r2, #1
 800ef26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef28:	f7fc ff42 	bl	800bdb0 <HAL_GetTick>
 800ef2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ef2e:	e008      	b.n	800ef42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ef30:	f7fc ff3e 	bl	800bdb0 <HAL_GetTick>
 800ef34:	4602      	mov	r2, r0
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	1ad3      	subs	r3, r2, r3
 800ef3a:	2b02      	cmp	r3, #2
 800ef3c:	d901      	bls.n	800ef42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ef3e:	2303      	movs	r3, #3
 800ef40:	e167      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ef42:	4b0b      	ldr	r3, [pc, #44]	; (800ef70 <HAL_RCC_OscConfig+0x240>)
 800ef44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef46:	f003 0302 	and.w	r3, r3, #2
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d0f0      	beq.n	800ef30 <HAL_RCC_OscConfig+0x200>
 800ef4e:	e01b      	b.n	800ef88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ef50:	4b09      	ldr	r3, [pc, #36]	; (800ef78 <HAL_RCC_OscConfig+0x248>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef56:	f7fc ff2b 	bl	800bdb0 <HAL_GetTick>
 800ef5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ef5c:	e00e      	b.n	800ef7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ef5e:	f7fc ff27 	bl	800bdb0 <HAL_GetTick>
 800ef62:	4602      	mov	r2, r0
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	1ad3      	subs	r3, r2, r3
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d907      	bls.n	800ef7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ef6c:	2303      	movs	r3, #3
 800ef6e:	e150      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
 800ef70:	40023800 	.word	0x40023800
 800ef74:	42470000 	.word	0x42470000
 800ef78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ef7c:	4b88      	ldr	r3, [pc, #544]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800ef7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef80:	f003 0302 	and.w	r3, r3, #2
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d1ea      	bne.n	800ef5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f003 0304 	and.w	r3, r3, #4
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f000 8097 	beq.w	800f0c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ef96:	2300      	movs	r3, #0
 800ef98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ef9a:	4b81      	ldr	r3, [pc, #516]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800ef9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d10f      	bne.n	800efc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800efa6:	2300      	movs	r3, #0
 800efa8:	60bb      	str	r3, [r7, #8]
 800efaa:	4b7d      	ldr	r3, [pc, #500]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800efac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efae:	4a7c      	ldr	r2, [pc, #496]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800efb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800efb4:	6413      	str	r3, [r2, #64]	; 0x40
 800efb6:	4b7a      	ldr	r3, [pc, #488]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800efb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800efbe:	60bb      	str	r3, [r7, #8]
 800efc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800efc2:	2301      	movs	r3, #1
 800efc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800efc6:	4b77      	ldr	r3, [pc, #476]	; (800f1a4 <HAL_RCC_OscConfig+0x474>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d118      	bne.n	800f004 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800efd2:	4b74      	ldr	r3, [pc, #464]	; (800f1a4 <HAL_RCC_OscConfig+0x474>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4a73      	ldr	r2, [pc, #460]	; (800f1a4 <HAL_RCC_OscConfig+0x474>)
 800efd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800efdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800efde:	f7fc fee7 	bl	800bdb0 <HAL_GetTick>
 800efe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800efe4:	e008      	b.n	800eff8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800efe6:	f7fc fee3 	bl	800bdb0 <HAL_GetTick>
 800efea:	4602      	mov	r2, r0
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d901      	bls.n	800eff8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800eff4:	2303      	movs	r3, #3
 800eff6:	e10c      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eff8:	4b6a      	ldr	r3, [pc, #424]	; (800f1a4 <HAL_RCC_OscConfig+0x474>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f000:	2b00      	cmp	r3, #0
 800f002:	d0f0      	beq.n	800efe6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d106      	bne.n	800f01a <HAL_RCC_OscConfig+0x2ea>
 800f00c:	4b64      	ldr	r3, [pc, #400]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f010:	4a63      	ldr	r2, [pc, #396]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f012:	f043 0301 	orr.w	r3, r3, #1
 800f016:	6713      	str	r3, [r2, #112]	; 0x70
 800f018:	e01c      	b.n	800f054 <HAL_RCC_OscConfig+0x324>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	689b      	ldr	r3, [r3, #8]
 800f01e:	2b05      	cmp	r3, #5
 800f020:	d10c      	bne.n	800f03c <HAL_RCC_OscConfig+0x30c>
 800f022:	4b5f      	ldr	r3, [pc, #380]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f026:	4a5e      	ldr	r2, [pc, #376]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f028:	f043 0304 	orr.w	r3, r3, #4
 800f02c:	6713      	str	r3, [r2, #112]	; 0x70
 800f02e:	4b5c      	ldr	r3, [pc, #368]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f032:	4a5b      	ldr	r2, [pc, #364]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f034:	f043 0301 	orr.w	r3, r3, #1
 800f038:	6713      	str	r3, [r2, #112]	; 0x70
 800f03a:	e00b      	b.n	800f054 <HAL_RCC_OscConfig+0x324>
 800f03c:	4b58      	ldr	r3, [pc, #352]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f040:	4a57      	ldr	r2, [pc, #348]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f042:	f023 0301 	bic.w	r3, r3, #1
 800f046:	6713      	str	r3, [r2, #112]	; 0x70
 800f048:	4b55      	ldr	r3, [pc, #340]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f04c:	4a54      	ldr	r2, [pc, #336]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f04e:	f023 0304 	bic.w	r3, r3, #4
 800f052:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d015      	beq.n	800f088 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f05c:	f7fc fea8 	bl	800bdb0 <HAL_GetTick>
 800f060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f062:	e00a      	b.n	800f07a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f064:	f7fc fea4 	bl	800bdb0 <HAL_GetTick>
 800f068:	4602      	mov	r2, r0
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f072:	4293      	cmp	r3, r2
 800f074:	d901      	bls.n	800f07a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f076:	2303      	movs	r3, #3
 800f078:	e0cb      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f07a:	4b49      	ldr	r3, [pc, #292]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f07e:	f003 0302 	and.w	r3, r3, #2
 800f082:	2b00      	cmp	r3, #0
 800f084:	d0ee      	beq.n	800f064 <HAL_RCC_OscConfig+0x334>
 800f086:	e014      	b.n	800f0b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f088:	f7fc fe92 	bl	800bdb0 <HAL_GetTick>
 800f08c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f08e:	e00a      	b.n	800f0a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f090:	f7fc fe8e 	bl	800bdb0 <HAL_GetTick>
 800f094:	4602      	mov	r2, r0
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d901      	bls.n	800f0a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f0a2:	2303      	movs	r3, #3
 800f0a4:	e0b5      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f0a6:	4b3e      	ldr	r3, [pc, #248]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f0a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0aa:	f003 0302 	and.w	r3, r3, #2
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1ee      	bne.n	800f090 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f0b2:	7dfb      	ldrb	r3, [r7, #23]
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d105      	bne.n	800f0c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f0b8:	4b39      	ldr	r3, [pc, #228]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0bc:	4a38      	ldr	r2, [pc, #224]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f0be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f0c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	699b      	ldr	r3, [r3, #24]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f000 80a1 	beq.w	800f210 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f0ce:	4b34      	ldr	r3, [pc, #208]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	f003 030c 	and.w	r3, r3, #12
 800f0d6:	2b08      	cmp	r3, #8
 800f0d8:	d05c      	beq.n	800f194 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	699b      	ldr	r3, [r3, #24]
 800f0de:	2b02      	cmp	r3, #2
 800f0e0:	d141      	bne.n	800f166 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f0e2:	4b31      	ldr	r3, [pc, #196]	; (800f1a8 <HAL_RCC_OscConfig+0x478>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f0e8:	f7fc fe62 	bl	800bdb0 <HAL_GetTick>
 800f0ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f0ee:	e008      	b.n	800f102 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f0f0:	f7fc fe5e 	bl	800bdb0 <HAL_GetTick>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	1ad3      	subs	r3, r2, r3
 800f0fa:	2b02      	cmp	r3, #2
 800f0fc:	d901      	bls.n	800f102 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f0fe:	2303      	movs	r3, #3
 800f100:	e087      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f102:	4b27      	ldr	r3, [pc, #156]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d1f0      	bne.n	800f0f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	69da      	ldr	r2, [r3, #28]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6a1b      	ldr	r3, [r3, #32]
 800f116:	431a      	orrs	r2, r3
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11c:	019b      	lsls	r3, r3, #6
 800f11e:	431a      	orrs	r2, r3
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f124:	085b      	lsrs	r3, r3, #1
 800f126:	3b01      	subs	r3, #1
 800f128:	041b      	lsls	r3, r3, #16
 800f12a:	431a      	orrs	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f130:	061b      	lsls	r3, r3, #24
 800f132:	491b      	ldr	r1, [pc, #108]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f134:	4313      	orrs	r3, r2
 800f136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f138:	4b1b      	ldr	r3, [pc, #108]	; (800f1a8 <HAL_RCC_OscConfig+0x478>)
 800f13a:	2201      	movs	r2, #1
 800f13c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f13e:	f7fc fe37 	bl	800bdb0 <HAL_GetTick>
 800f142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f144:	e008      	b.n	800f158 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f146:	f7fc fe33 	bl	800bdb0 <HAL_GetTick>
 800f14a:	4602      	mov	r2, r0
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	2b02      	cmp	r3, #2
 800f152:	d901      	bls.n	800f158 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f154:	2303      	movs	r3, #3
 800f156:	e05c      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f158:	4b11      	ldr	r3, [pc, #68]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f160:	2b00      	cmp	r3, #0
 800f162:	d0f0      	beq.n	800f146 <HAL_RCC_OscConfig+0x416>
 800f164:	e054      	b.n	800f210 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f166:	4b10      	ldr	r3, [pc, #64]	; (800f1a8 <HAL_RCC_OscConfig+0x478>)
 800f168:	2200      	movs	r2, #0
 800f16a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f16c:	f7fc fe20 	bl	800bdb0 <HAL_GetTick>
 800f170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f172:	e008      	b.n	800f186 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f174:	f7fc fe1c 	bl	800bdb0 <HAL_GetTick>
 800f178:	4602      	mov	r2, r0
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	2b02      	cmp	r3, #2
 800f180:	d901      	bls.n	800f186 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f182:	2303      	movs	r3, #3
 800f184:	e045      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f186:	4b06      	ldr	r3, [pc, #24]	; (800f1a0 <HAL_RCC_OscConfig+0x470>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1f0      	bne.n	800f174 <HAL_RCC_OscConfig+0x444>
 800f192:	e03d      	b.n	800f210 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	699b      	ldr	r3, [r3, #24]
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d107      	bne.n	800f1ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f19c:	2301      	movs	r3, #1
 800f19e:	e038      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
 800f1a0:	40023800 	.word	0x40023800
 800f1a4:	40007000 	.word	0x40007000
 800f1a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f1ac:	4b1b      	ldr	r3, [pc, #108]	; (800f21c <HAL_RCC_OscConfig+0x4ec>)
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	699b      	ldr	r3, [r3, #24]
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d028      	beq.n	800f20c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d121      	bne.n	800f20c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d11a      	bne.n	800f20c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f1dc:	4013      	ands	r3, r2
 800f1de:	687a      	ldr	r2, [r7, #4]
 800f1e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f1e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d111      	bne.n	800f20c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1f2:	085b      	lsrs	r3, r3, #1
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d107      	bne.n	800f20c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f208:	429a      	cmp	r2, r3
 800f20a:	d001      	beq.n	800f210 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800f20c:	2301      	movs	r3, #1
 800f20e:	e000      	b.n	800f212 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f210:	2300      	movs	r3, #0
}
 800f212:	4618      	mov	r0, r3
 800f214:	3718      	adds	r7, #24
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	40023800 	.word	0x40023800

0800f220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f230:	2301      	movs	r3, #1
 800f232:	e0cc      	b.n	800f3ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f234:	4b68      	ldr	r3, [pc, #416]	; (800f3d8 <HAL_RCC_ClockConfig+0x1b8>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f003 0307 	and.w	r3, r3, #7
 800f23c:	683a      	ldr	r2, [r7, #0]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d90c      	bls.n	800f25c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f242:	4b65      	ldr	r3, [pc, #404]	; (800f3d8 <HAL_RCC_ClockConfig+0x1b8>)
 800f244:	683a      	ldr	r2, [r7, #0]
 800f246:	b2d2      	uxtb	r2, r2
 800f248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f24a:	4b63      	ldr	r3, [pc, #396]	; (800f3d8 <HAL_RCC_ClockConfig+0x1b8>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f003 0307 	and.w	r3, r3, #7
 800f252:	683a      	ldr	r2, [r7, #0]
 800f254:	429a      	cmp	r2, r3
 800f256:	d001      	beq.n	800f25c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f258:	2301      	movs	r3, #1
 800f25a:	e0b8      	b.n	800f3ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f003 0302 	and.w	r3, r3, #2
 800f264:	2b00      	cmp	r3, #0
 800f266:	d020      	beq.n	800f2aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f003 0304 	and.w	r3, r3, #4
 800f270:	2b00      	cmp	r3, #0
 800f272:	d005      	beq.n	800f280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f274:	4b59      	ldr	r3, [pc, #356]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f276:	689b      	ldr	r3, [r3, #8]
 800f278:	4a58      	ldr	r2, [pc, #352]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f27a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f27e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f003 0308 	and.w	r3, r3, #8
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d005      	beq.n	800f298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f28c:	4b53      	ldr	r3, [pc, #332]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	4a52      	ldr	r2, [pc, #328]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f298:	4b50      	ldr	r3, [pc, #320]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	494d      	ldr	r1, [pc, #308]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f003 0301 	and.w	r3, r3, #1
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d044      	beq.n	800f340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d107      	bne.n	800f2ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f2be:	4b47      	ldr	r3, [pc, #284]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d119      	bne.n	800f2fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e07f      	b.n	800f3ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d003      	beq.n	800f2de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f2da:	2b03      	cmp	r3, #3
 800f2dc:	d107      	bne.n	800f2ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f2de:	4b3f      	ldr	r3, [pc, #252]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d109      	bne.n	800f2fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e06f      	b.n	800f3ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f2ee:	4b3b      	ldr	r3, [pc, #236]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f003 0302 	and.w	r3, r3, #2
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d101      	bne.n	800f2fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e067      	b.n	800f3ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f2fe:	4b37      	ldr	r3, [pc, #220]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	f023 0203 	bic.w	r2, r3, #3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	4934      	ldr	r1, [pc, #208]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f30c:	4313      	orrs	r3, r2
 800f30e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f310:	f7fc fd4e 	bl	800bdb0 <HAL_GetTick>
 800f314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f316:	e00a      	b.n	800f32e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f318:	f7fc fd4a 	bl	800bdb0 <HAL_GetTick>
 800f31c:	4602      	mov	r2, r0
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	1ad3      	subs	r3, r2, r3
 800f322:	f241 3288 	movw	r2, #5000	; 0x1388
 800f326:	4293      	cmp	r3, r2
 800f328:	d901      	bls.n	800f32e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f32a:	2303      	movs	r3, #3
 800f32c:	e04f      	b.n	800f3ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f32e:	4b2b      	ldr	r3, [pc, #172]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	f003 020c 	and.w	r2, r3, #12
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d1eb      	bne.n	800f318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f340:	4b25      	ldr	r3, [pc, #148]	; (800f3d8 <HAL_RCC_ClockConfig+0x1b8>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f003 0307 	and.w	r3, r3, #7
 800f348:	683a      	ldr	r2, [r7, #0]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d20c      	bcs.n	800f368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f34e:	4b22      	ldr	r3, [pc, #136]	; (800f3d8 <HAL_RCC_ClockConfig+0x1b8>)
 800f350:	683a      	ldr	r2, [r7, #0]
 800f352:	b2d2      	uxtb	r2, r2
 800f354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f356:	4b20      	ldr	r3, [pc, #128]	; (800f3d8 <HAL_RCC_ClockConfig+0x1b8>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f003 0307 	and.w	r3, r3, #7
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	429a      	cmp	r2, r3
 800f362:	d001      	beq.n	800f368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f364:	2301      	movs	r3, #1
 800f366:	e032      	b.n	800f3ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f003 0304 	and.w	r3, r3, #4
 800f370:	2b00      	cmp	r3, #0
 800f372:	d008      	beq.n	800f386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f374:	4b19      	ldr	r3, [pc, #100]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f376:	689b      	ldr	r3, [r3, #8]
 800f378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	4916      	ldr	r1, [pc, #88]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f382:	4313      	orrs	r3, r2
 800f384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f003 0308 	and.w	r3, r3, #8
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d009      	beq.n	800f3a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f392:	4b12      	ldr	r3, [pc, #72]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	691b      	ldr	r3, [r3, #16]
 800f39e:	00db      	lsls	r3, r3, #3
 800f3a0:	490e      	ldr	r1, [pc, #56]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f3a6:	f000 f821 	bl	800f3ec <HAL_RCC_GetSysClockFreq>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	4b0b      	ldr	r3, [pc, #44]	; (800f3dc <HAL_RCC_ClockConfig+0x1bc>)
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	091b      	lsrs	r3, r3, #4
 800f3b2:	f003 030f 	and.w	r3, r3, #15
 800f3b6:	490a      	ldr	r1, [pc, #40]	; (800f3e0 <HAL_RCC_ClockConfig+0x1c0>)
 800f3b8:	5ccb      	ldrb	r3, [r1, r3]
 800f3ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f3be:	4a09      	ldr	r2, [pc, #36]	; (800f3e4 <HAL_RCC_ClockConfig+0x1c4>)
 800f3c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f3c2:	4b09      	ldr	r3, [pc, #36]	; (800f3e8 <HAL_RCC_ClockConfig+0x1c8>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fc fae6 	bl	800b998 <HAL_InitTick>

  return HAL_OK;
 800f3cc:	2300      	movs	r3, #0
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3710      	adds	r7, #16
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	40023c00 	.word	0x40023c00
 800f3dc:	40023800 	.word	0x40023800
 800f3e0:	0801a49c 	.word	0x0801a49c
 800f3e4:	20000310 	.word	0x20000310
 800f3e8:	20000314 	.word	0x20000314

0800f3ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f3ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3f0:	b094      	sub	sp, #80	; 0x50
 800f3f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	647b      	str	r3, [r7, #68]	; 0x44
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800f400:	2300      	movs	r3, #0
 800f402:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f404:	4b79      	ldr	r3, [pc, #484]	; (800f5ec <HAL_RCC_GetSysClockFreq+0x200>)
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	f003 030c 	and.w	r3, r3, #12
 800f40c:	2b08      	cmp	r3, #8
 800f40e:	d00d      	beq.n	800f42c <HAL_RCC_GetSysClockFreq+0x40>
 800f410:	2b08      	cmp	r3, #8
 800f412:	f200 80e1 	bhi.w	800f5d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800f416:	2b00      	cmp	r3, #0
 800f418:	d002      	beq.n	800f420 <HAL_RCC_GetSysClockFreq+0x34>
 800f41a:	2b04      	cmp	r3, #4
 800f41c:	d003      	beq.n	800f426 <HAL_RCC_GetSysClockFreq+0x3a>
 800f41e:	e0db      	b.n	800f5d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f420:	4b73      	ldr	r3, [pc, #460]	; (800f5f0 <HAL_RCC_GetSysClockFreq+0x204>)
 800f422:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800f424:	e0db      	b.n	800f5de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f426:	4b73      	ldr	r3, [pc, #460]	; (800f5f4 <HAL_RCC_GetSysClockFreq+0x208>)
 800f428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800f42a:	e0d8      	b.n	800f5de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f42c:	4b6f      	ldr	r3, [pc, #444]	; (800f5ec <HAL_RCC_GetSysClockFreq+0x200>)
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f434:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f436:	4b6d      	ldr	r3, [pc, #436]	; (800f5ec <HAL_RCC_GetSysClockFreq+0x200>)
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d063      	beq.n	800f50a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f442:	4b6a      	ldr	r3, [pc, #424]	; (800f5ec <HAL_RCC_GetSysClockFreq+0x200>)
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	099b      	lsrs	r3, r3, #6
 800f448:	2200      	movs	r2, #0
 800f44a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f44c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f454:	633b      	str	r3, [r7, #48]	; 0x30
 800f456:	2300      	movs	r3, #0
 800f458:	637b      	str	r3, [r7, #52]	; 0x34
 800f45a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800f45e:	4622      	mov	r2, r4
 800f460:	462b      	mov	r3, r5
 800f462:	f04f 0000 	mov.w	r0, #0
 800f466:	f04f 0100 	mov.w	r1, #0
 800f46a:	0159      	lsls	r1, r3, #5
 800f46c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f470:	0150      	lsls	r0, r2, #5
 800f472:	4602      	mov	r2, r0
 800f474:	460b      	mov	r3, r1
 800f476:	4621      	mov	r1, r4
 800f478:	1a51      	subs	r1, r2, r1
 800f47a:	6139      	str	r1, [r7, #16]
 800f47c:	4629      	mov	r1, r5
 800f47e:	eb63 0301 	sbc.w	r3, r3, r1
 800f482:	617b      	str	r3, [r7, #20]
 800f484:	f04f 0200 	mov.w	r2, #0
 800f488:	f04f 0300 	mov.w	r3, #0
 800f48c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f490:	4659      	mov	r1, fp
 800f492:	018b      	lsls	r3, r1, #6
 800f494:	4651      	mov	r1, sl
 800f496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f49a:	4651      	mov	r1, sl
 800f49c:	018a      	lsls	r2, r1, #6
 800f49e:	4651      	mov	r1, sl
 800f4a0:	ebb2 0801 	subs.w	r8, r2, r1
 800f4a4:	4659      	mov	r1, fp
 800f4a6:	eb63 0901 	sbc.w	r9, r3, r1
 800f4aa:	f04f 0200 	mov.w	r2, #0
 800f4ae:	f04f 0300 	mov.w	r3, #0
 800f4b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f4b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f4ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f4be:	4690      	mov	r8, r2
 800f4c0:	4699      	mov	r9, r3
 800f4c2:	4623      	mov	r3, r4
 800f4c4:	eb18 0303 	adds.w	r3, r8, r3
 800f4c8:	60bb      	str	r3, [r7, #8]
 800f4ca:	462b      	mov	r3, r5
 800f4cc:	eb49 0303 	adc.w	r3, r9, r3
 800f4d0:	60fb      	str	r3, [r7, #12]
 800f4d2:	f04f 0200 	mov.w	r2, #0
 800f4d6:	f04f 0300 	mov.w	r3, #0
 800f4da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f4de:	4629      	mov	r1, r5
 800f4e0:	024b      	lsls	r3, r1, #9
 800f4e2:	4621      	mov	r1, r4
 800f4e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	024a      	lsls	r2, r1, #9
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f4f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f4fc:	f7f1 fb6c 	bl	8000bd8 <__aeabi_uldivmod>
 800f500:	4602      	mov	r2, r0
 800f502:	460b      	mov	r3, r1
 800f504:	4613      	mov	r3, r2
 800f506:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f508:	e058      	b.n	800f5bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f50a:	4b38      	ldr	r3, [pc, #224]	; (800f5ec <HAL_RCC_GetSysClockFreq+0x200>)
 800f50c:	685b      	ldr	r3, [r3, #4]
 800f50e:	099b      	lsrs	r3, r3, #6
 800f510:	2200      	movs	r2, #0
 800f512:	4618      	mov	r0, r3
 800f514:	4611      	mov	r1, r2
 800f516:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f51a:	623b      	str	r3, [r7, #32]
 800f51c:	2300      	movs	r3, #0
 800f51e:	627b      	str	r3, [r7, #36]	; 0x24
 800f520:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f524:	4642      	mov	r2, r8
 800f526:	464b      	mov	r3, r9
 800f528:	f04f 0000 	mov.w	r0, #0
 800f52c:	f04f 0100 	mov.w	r1, #0
 800f530:	0159      	lsls	r1, r3, #5
 800f532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f536:	0150      	lsls	r0, r2, #5
 800f538:	4602      	mov	r2, r0
 800f53a:	460b      	mov	r3, r1
 800f53c:	4641      	mov	r1, r8
 800f53e:	ebb2 0a01 	subs.w	sl, r2, r1
 800f542:	4649      	mov	r1, r9
 800f544:	eb63 0b01 	sbc.w	fp, r3, r1
 800f548:	f04f 0200 	mov.w	r2, #0
 800f54c:	f04f 0300 	mov.w	r3, #0
 800f550:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f554:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f558:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f55c:	ebb2 040a 	subs.w	r4, r2, sl
 800f560:	eb63 050b 	sbc.w	r5, r3, fp
 800f564:	f04f 0200 	mov.w	r2, #0
 800f568:	f04f 0300 	mov.w	r3, #0
 800f56c:	00eb      	lsls	r3, r5, #3
 800f56e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f572:	00e2      	lsls	r2, r4, #3
 800f574:	4614      	mov	r4, r2
 800f576:	461d      	mov	r5, r3
 800f578:	4643      	mov	r3, r8
 800f57a:	18e3      	adds	r3, r4, r3
 800f57c:	603b      	str	r3, [r7, #0]
 800f57e:	464b      	mov	r3, r9
 800f580:	eb45 0303 	adc.w	r3, r5, r3
 800f584:	607b      	str	r3, [r7, #4]
 800f586:	f04f 0200 	mov.w	r2, #0
 800f58a:	f04f 0300 	mov.w	r3, #0
 800f58e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f592:	4629      	mov	r1, r5
 800f594:	028b      	lsls	r3, r1, #10
 800f596:	4621      	mov	r1, r4
 800f598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f59c:	4621      	mov	r1, r4
 800f59e:	028a      	lsls	r2, r1, #10
 800f5a0:	4610      	mov	r0, r2
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	61bb      	str	r3, [r7, #24]
 800f5aa:	61fa      	str	r2, [r7, #28]
 800f5ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f5b0:	f7f1 fb12 	bl	8000bd8 <__aeabi_uldivmod>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f5bc:	4b0b      	ldr	r3, [pc, #44]	; (800f5ec <HAL_RCC_GetSysClockFreq+0x200>)
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	0c1b      	lsrs	r3, r3, #16
 800f5c2:	f003 0303 	and.w	r3, r3, #3
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	005b      	lsls	r3, r3, #1
 800f5ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800f5cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f5ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800f5d6:	e002      	b.n	800f5de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f5d8:	4b05      	ldr	r3, [pc, #20]	; (800f5f0 <HAL_RCC_GetSysClockFreq+0x204>)
 800f5da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800f5dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f5de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3750      	adds	r7, #80	; 0x50
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f5ea:	bf00      	nop
 800f5ec:	40023800 	.word	0x40023800
 800f5f0:	00f42400 	.word	0x00f42400
 800f5f4:	007a1200 	.word	0x007a1200

0800f5f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f5fc:	4b03      	ldr	r3, [pc, #12]	; (800f60c <HAL_RCC_GetHCLKFreq+0x14>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
}
 800f600:	4618      	mov	r0, r3
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr
 800f60a:	bf00      	nop
 800f60c:	20000310 	.word	0x20000310

0800f610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f614:	f7ff fff0 	bl	800f5f8 <HAL_RCC_GetHCLKFreq>
 800f618:	4602      	mov	r2, r0
 800f61a:	4b05      	ldr	r3, [pc, #20]	; (800f630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	0a9b      	lsrs	r3, r3, #10
 800f620:	f003 0307 	and.w	r3, r3, #7
 800f624:	4903      	ldr	r1, [pc, #12]	; (800f634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f626:	5ccb      	ldrb	r3, [r1, r3]
 800f628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	40023800 	.word	0x40023800
 800f634:	0801a4ac 	.word	0x0801a4ac

0800f638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f63c:	f7ff ffdc 	bl	800f5f8 <HAL_RCC_GetHCLKFreq>
 800f640:	4602      	mov	r2, r0
 800f642:	4b05      	ldr	r3, [pc, #20]	; (800f658 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	0b5b      	lsrs	r3, r3, #13
 800f648:	f003 0307 	and.w	r3, r3, #7
 800f64c:	4903      	ldr	r1, [pc, #12]	; (800f65c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f64e:	5ccb      	ldrb	r3, [r1, r3]
 800f650:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f654:	4618      	mov	r0, r3
 800f656:	bd80      	pop	{r7, pc}
 800f658:	40023800 	.word	0x40023800
 800f65c:	0801a4ac 	.word	0x0801a4ac

0800f660 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	220f      	movs	r2, #15
 800f66e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f670:	4b12      	ldr	r3, [pc, #72]	; (800f6bc <HAL_RCC_GetClockConfig+0x5c>)
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	f003 0203 	and.w	r2, r3, #3
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f67c:	4b0f      	ldr	r3, [pc, #60]	; (800f6bc <HAL_RCC_GetClockConfig+0x5c>)
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f688:	4b0c      	ldr	r3, [pc, #48]	; (800f6bc <HAL_RCC_GetClockConfig+0x5c>)
 800f68a:	689b      	ldr	r3, [r3, #8]
 800f68c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f694:	4b09      	ldr	r3, [pc, #36]	; (800f6bc <HAL_RCC_GetClockConfig+0x5c>)
 800f696:	689b      	ldr	r3, [r3, #8]
 800f698:	08db      	lsrs	r3, r3, #3
 800f69a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f6a2:	4b07      	ldr	r3, [pc, #28]	; (800f6c0 <HAL_RCC_GetClockConfig+0x60>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f003 0207 	and.w	r2, r3, #7
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	601a      	str	r2, [r3, #0]
}
 800f6ae:	bf00      	nop
 800f6b0:	370c      	adds	r7, #12
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	40023800 	.word	0x40023800
 800f6c0:	40023c00 	.word	0x40023c00

0800f6c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b086      	sub	sp, #24
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f003 0301 	and.w	r3, r3, #1
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d105      	bne.n	800f6ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d035      	beq.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800f6ec:	4b67      	ldr	r3, [pc, #412]	; (800f88c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f6f2:	f7fc fb5d 	bl	800bdb0 <HAL_GetTick>
 800f6f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f6f8:	e008      	b.n	800f70c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800f6fa:	f7fc fb59 	bl	800bdb0 <HAL_GetTick>
 800f6fe:	4602      	mov	r2, r0
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	1ad3      	subs	r3, r2, r3
 800f704:	2b02      	cmp	r3, #2
 800f706:	d901      	bls.n	800f70c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f708:	2303      	movs	r3, #3
 800f70a:	e0ba      	b.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800f70c:	4b60      	ldr	r3, [pc, #384]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f714:	2b00      	cmp	r3, #0
 800f716:	d1f0      	bne.n	800f6fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	019a      	lsls	r2, r3, #6
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	071b      	lsls	r3, r3, #28
 800f724:	495a      	ldr	r1, [pc, #360]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f726:	4313      	orrs	r3, r2
 800f728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800f72c:	4b57      	ldr	r3, [pc, #348]	; (800f88c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800f72e:	2201      	movs	r2, #1
 800f730:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800f732:	f7fc fb3d 	bl	800bdb0 <HAL_GetTick>
 800f736:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f738:	e008      	b.n	800f74c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800f73a:	f7fc fb39 	bl	800bdb0 <HAL_GetTick>
 800f73e:	4602      	mov	r2, r0
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	2b02      	cmp	r3, #2
 800f746:	d901      	bls.n	800f74c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800f748:	2303      	movs	r3, #3
 800f74a:	e09a      	b.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800f74c:	4b50      	ldr	r3, [pc, #320]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f754:	2b00      	cmp	r3, #0
 800f756:	d0f0      	beq.n	800f73a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f003 0302 	and.w	r3, r3, #2
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 8083 	beq.w	800f86c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800f766:	2300      	movs	r3, #0
 800f768:	60fb      	str	r3, [r7, #12]
 800f76a:	4b49      	ldr	r3, [pc, #292]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f76e:	4a48      	ldr	r2, [pc, #288]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f774:	6413      	str	r3, [r2, #64]	; 0x40
 800f776:	4b46      	ldr	r3, [pc, #280]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f77a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f77e:	60fb      	str	r3, [r7, #12]
 800f780:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800f782:	4b44      	ldr	r3, [pc, #272]	; (800f894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a43      	ldr	r2, [pc, #268]	; (800f894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f78c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f78e:	f7fc fb0f 	bl	800bdb0 <HAL_GetTick>
 800f792:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f794:	e008      	b.n	800f7a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f796:	f7fc fb0b 	bl	800bdb0 <HAL_GetTick>
 800f79a:	4602      	mov	r2, r0
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	2b02      	cmp	r3, #2
 800f7a2:	d901      	bls.n	800f7a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800f7a4:	2303      	movs	r3, #3
 800f7a6:	e06c      	b.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800f7a8:	4b3a      	ldr	r3, [pc, #232]	; (800f894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d0f0      	beq.n	800f796 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800f7b4:	4b36      	ldr	r3, [pc, #216]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d02f      	beq.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	68db      	ldr	r3, [r3, #12]
 800f7c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7cc:	693a      	ldr	r2, [r7, #16]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d028      	beq.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f7d2:	4b2f      	ldr	r3, [pc, #188]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f7dc:	4b2e      	ldr	r3, [pc, #184]	; (800f898 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f7de:	2201      	movs	r2, #1
 800f7e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f7e2:	4b2d      	ldr	r3, [pc, #180]	; (800f898 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800f7e8:	4a29      	ldr	r2, [pc, #164]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800f7ee:	4b28      	ldr	r3, [pc, #160]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7f2:	f003 0301 	and.w	r3, r3, #1
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d114      	bne.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800f7fa:	f7fc fad9 	bl	800bdb0 <HAL_GetTick>
 800f7fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f800:	e00a      	b.n	800f818 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f802:	f7fc fad5 	bl	800bdb0 <HAL_GetTick>
 800f806:	4602      	mov	r2, r0
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	1ad3      	subs	r3, r2, r3
 800f80c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f810:	4293      	cmp	r3, r2
 800f812:	d901      	bls.n	800f818 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800f814:	2303      	movs	r3, #3
 800f816:	e034      	b.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f818:	4b1d      	ldr	r3, [pc, #116]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f81c:	f003 0302 	and.w	r3, r3, #2
 800f820:	2b00      	cmp	r3, #0
 800f822:	d0ee      	beq.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f82c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f830:	d10d      	bne.n	800f84e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800f832:	4b17      	ldr	r3, [pc, #92]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f834:	689b      	ldr	r3, [r3, #8]
 800f836:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f846:	4912      	ldr	r1, [pc, #72]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f848:	4313      	orrs	r3, r2
 800f84a:	608b      	str	r3, [r1, #8]
 800f84c:	e005      	b.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800f84e:	4b10      	ldr	r3, [pc, #64]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f850:	689b      	ldr	r3, [r3, #8]
 800f852:	4a0f      	ldr	r2, [pc, #60]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f854:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f858:	6093      	str	r3, [r2, #8]
 800f85a:	4b0d      	ldr	r3, [pc, #52]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f85c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	68db      	ldr	r3, [r3, #12]
 800f862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f866:	490a      	ldr	r1, [pc, #40]	; (800f890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800f868:	4313      	orrs	r3, r2
 800f86a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f003 0308 	and.w	r3, r3, #8
 800f874:	2b00      	cmp	r3, #0
 800f876:	d003      	beq.n	800f880 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	7c1a      	ldrb	r2, [r3, #16]
 800f87c:	4b07      	ldr	r3, [pc, #28]	; (800f89c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800f87e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3718      	adds	r7, #24
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	42470068 	.word	0x42470068
 800f890:	40023800 	.word	0x40023800
 800f894:	40007000 	.word	0x40007000
 800f898:	42470e40 	.word	0x42470e40
 800f89c:	424711e0 	.word	0x424711e0

0800f8a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d101      	bne.n	800f8b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e066      	b.n	800f984 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	7f5b      	ldrb	r3, [r3, #29]
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d105      	bne.n	800f8cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f7fb ff62 	bl	800b790 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2202      	movs	r2, #2
 800f8d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	22ca      	movs	r2, #202	; 0xca
 800f8d8:	625a      	str	r2, [r3, #36]	; 0x24
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2253      	movs	r2, #83	; 0x53
 800f8e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 fa45 	bl	800fd72 <RTC_EnterInitMode>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800f8ec:	7bfb      	ldrb	r3, [r7, #15]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d12c      	bne.n	800f94c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	689b      	ldr	r3, [r3, #8]
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	6812      	ldr	r2, [r2, #0]
 800f8fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f904:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	6899      	ldr	r1, [r3, #8]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	685a      	ldr	r2, [r3, #4]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	691b      	ldr	r3, [r3, #16]
 800f914:	431a      	orrs	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	695b      	ldr	r3, [r3, #20]
 800f91a:	431a      	orrs	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	430a      	orrs	r2, r1
 800f922:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	68d2      	ldr	r2, [r2, #12]
 800f92c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	6919      	ldr	r1, [r3, #16]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	041a      	lsls	r2, r3, #16
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	430a      	orrs	r2, r1
 800f940:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 fa4c 	bl	800fde0 <RTC_ExitInitMode>
 800f948:	4603      	mov	r3, r0
 800f94a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d113      	bne.n	800f97a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f960:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	699a      	ldr	r2, [r3, #24]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	430a      	orrs	r2, r1
 800f972:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2201      	movs	r2, #1
 800f978:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	22ff      	movs	r2, #255	; 0xff
 800f980:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800f982:	7bfb      	ldrb	r3, [r7, #15]
}
 800f984:	4618      	mov	r0, r3
 800f986:	3710      	adds	r7, #16
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f98c:	b590      	push	{r4, r7, lr}
 800f98e:	b087      	sub	sp, #28
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800f998:	2300      	movs	r3, #0
 800f99a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	7f1b      	ldrb	r3, [r3, #28]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d101      	bne.n	800f9a8 <HAL_RTC_SetTime+0x1c>
 800f9a4:	2302      	movs	r3, #2
 800f9a6:	e087      	b.n	800fab8 <HAL_RTC_SetTime+0x12c>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	2202      	movs	r2, #2
 800f9b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d126      	bne.n	800fa08 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d102      	bne.n	800f9ce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f000 fa29 	bl	800fe2a <RTC_ByteToBcd2>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	785b      	ldrb	r3, [r3, #1]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f000 fa22 	bl	800fe2a <RTC_ByteToBcd2>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f9ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	789b      	ldrb	r3, [r3, #2]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f000 fa1a 	bl	800fe2a <RTC_ByteToBcd2>
 800f9f6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f9f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	78db      	ldrb	r3, [r3, #3]
 800fa00:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800fa02:	4313      	orrs	r3, r2
 800fa04:	617b      	str	r3, [r7, #20]
 800fa06:	e018      	b.n	800fa3a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	689b      	ldr	r3, [r3, #8]
 800fa0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d102      	bne.n	800fa1c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	785b      	ldrb	r3, [r3, #1]
 800fa26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800fa28:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800fa2a:	68ba      	ldr	r2, [r7, #8]
 800fa2c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800fa2e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	78db      	ldrb	r3, [r3, #3]
 800fa34:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800fa36:	4313      	orrs	r3, r2
 800fa38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	22ca      	movs	r2, #202	; 0xca
 800fa40:	625a      	str	r2, [r3, #36]	; 0x24
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2253      	movs	r2, #83	; 0x53
 800fa48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f000 f991 	bl	800fd72 <RTC_EnterInitMode>
 800fa50:	4603      	mov	r3, r0
 800fa52:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800fa54:	7cfb      	ldrb	r3, [r7, #19]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d120      	bne.n	800fa9c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800fa64:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800fa68:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	689a      	ldr	r2, [r3, #8]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fa78:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	6899      	ldr	r1, [r3, #8]
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	68da      	ldr	r2, [r3, #12]
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	431a      	orrs	r2, r3
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	430a      	orrs	r2, r1
 800fa90:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800fa92:	68f8      	ldr	r0, [r7, #12]
 800fa94:	f000 f9a4 	bl	800fde0 <RTC_ExitInitMode>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800fa9c:	7cfb      	ldrb	r3, [r7, #19]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d102      	bne.n	800faa8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2201      	movs	r2, #1
 800faa6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	22ff      	movs	r2, #255	; 0xff
 800faae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2200      	movs	r2, #0
 800fab4:	771a      	strb	r2, [r3, #28]

  return status;
 800fab6:	7cfb      	ldrb	r3, [r7, #19]
}
 800fab8:	4618      	mov	r0, r3
 800faba:	371c      	adds	r7, #28
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd90      	pop	{r4, r7, pc}

0800fac0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b086      	sub	sp, #24
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800facc:	2300      	movs	r3, #0
 800face:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	691b      	ldr	r3, [r3, #16]
 800fae0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800faf2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800faf6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	0c1b      	lsrs	r3, r3, #16
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb02:	b2da      	uxtb	r2, r3
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	0a1b      	lsrs	r3, r3, #8
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb12:	b2da      	uxtb	r2, r3
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb20:	b2da      	uxtb	r2, r3
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	0d9b      	lsrs	r3, r3, #22
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	f003 0301 	and.w	r3, r3, #1
 800fb30:	b2da      	uxtb	r2, r3
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d11a      	bne.n	800fb72 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	4618      	mov	r0, r3
 800fb42:	f000 f98f 	bl	800fe64 <RTC_Bcd2ToByte>
 800fb46:	4603      	mov	r3, r0
 800fb48:	461a      	mov	r2, r3
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	785b      	ldrb	r3, [r3, #1]
 800fb52:	4618      	mov	r0, r3
 800fb54:	f000 f986 	bl	800fe64 <RTC_Bcd2ToByte>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	789b      	ldrb	r3, [r3, #2]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f000 f97d 	bl	800fe64 <RTC_Bcd2ToByte>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3718      	adds	r7, #24
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800fb7c:	b590      	push	{r4, r7, lr}
 800fb7e:	b087      	sub	sp, #28
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	7f1b      	ldrb	r3, [r3, #28]
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d101      	bne.n	800fb98 <HAL_RTC_SetDate+0x1c>
 800fb94:	2302      	movs	r3, #2
 800fb96:	e071      	b.n	800fc7c <HAL_RTC_SetDate+0x100>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2202      	movs	r2, #2
 800fba2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d10e      	bne.n	800fbc8 <HAL_RTC_SetDate+0x4c>
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	785b      	ldrb	r3, [r3, #1]
 800fbae:	f003 0310 	and.w	r3, r3, #16
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d008      	beq.n	800fbc8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	785b      	ldrb	r3, [r3, #1]
 800fbba:	f023 0310 	bic.w	r3, r3, #16
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	330a      	adds	r3, #10
 800fbc2:	b2da      	uxtb	r2, r3
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d11c      	bne.n	800fc08 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	78db      	ldrb	r3, [r3, #3]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f000 f929 	bl	800fe2a <RTC_ByteToBcd2>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	785b      	ldrb	r3, [r3, #1]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f000 f922 	bl	800fe2a <RTC_ByteToBcd2>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800fbea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	789b      	ldrb	r3, [r3, #2]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f000 f91a 	bl	800fe2a <RTC_ByteToBcd2>
 800fbf6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800fbf8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800fc02:	4313      	orrs	r3, r2
 800fc04:	617b      	str	r3, [r7, #20]
 800fc06:	e00e      	b.n	800fc26 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	78db      	ldrb	r3, [r3, #3]
 800fc0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	785b      	ldrb	r3, [r3, #1]
 800fc12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800fc14:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800fc16:	68ba      	ldr	r2, [r7, #8]
 800fc18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800fc1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800fc22:	4313      	orrs	r3, r2
 800fc24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	22ca      	movs	r2, #202	; 0xca
 800fc2c:	625a      	str	r2, [r3, #36]	; 0x24
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2253      	movs	r2, #83	; 0x53
 800fc34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f000 f89b 	bl	800fd72 <RTC_EnterInitMode>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800fc40:	7cfb      	ldrb	r3, [r7, #19]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d10c      	bne.n	800fc60 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fc54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800fc56:	68f8      	ldr	r0, [r7, #12]
 800fc58:	f000 f8c2 	bl	800fde0 <RTC_ExitInitMode>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800fc60:	7cfb      	ldrb	r3, [r7, #19]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d102      	bne.n	800fc6c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2201      	movs	r2, #1
 800fc6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	22ff      	movs	r2, #255	; 0xff
 800fc72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2200      	movs	r2, #0
 800fc78:	771a      	strb	r2, [r3, #28]

  return status;
 800fc7a:	7cfb      	ldrb	r3, [r7, #19]
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	371c      	adds	r7, #28
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd90      	pop	{r4, r7, pc}

0800fc84 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	60b9      	str	r1, [r7, #8]
 800fc8e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800fc90:	2300      	movs	r3, #0
 800fc92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fca2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	0c1b      	lsrs	r3, r3, #16
 800fca8:	b2da      	uxtb	r2, r3
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	0a1b      	lsrs	r3, r3, #8
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	f003 031f 	and.w	r3, r3, #31
 800fcb8:	b2da      	uxtb	r2, r3
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcc6:	b2da      	uxtb	r2, r3
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	0b5b      	lsrs	r3, r3, #13
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	f003 0307 	and.w	r3, r3, #7
 800fcd6:	b2da      	uxtb	r2, r3
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d11a      	bne.n	800fd18 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	78db      	ldrb	r3, [r3, #3]
 800fce6:	4618      	mov	r0, r3
 800fce8:	f000 f8bc 	bl	800fe64 <RTC_Bcd2ToByte>
 800fcec:	4603      	mov	r3, r0
 800fcee:	461a      	mov	r2, r3
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	785b      	ldrb	r3, [r3, #1]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f000 f8b3 	bl	800fe64 <RTC_Bcd2ToByte>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	461a      	mov	r2, r3
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	789b      	ldrb	r3, [r3, #2]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 f8aa 	bl	800fe64 <RTC_Bcd2ToByte>
 800fd10:	4603      	mov	r3, r0
 800fd12:	461a      	mov	r2, r3
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3718      	adds	r7, #24
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	b084      	sub	sp, #16
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	68da      	ldr	r2, [r3, #12]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800fd3c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800fd3e:	f7fc f837 	bl	800bdb0 <HAL_GetTick>
 800fd42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fd44:	e009      	b.n	800fd5a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fd46:	f7fc f833 	bl	800bdb0 <HAL_GetTick>
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	1ad3      	subs	r3, r2, r3
 800fd50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fd54:	d901      	bls.n	800fd5a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800fd56:	2303      	movs	r3, #3
 800fd58:	e007      	b.n	800fd6a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	f003 0320 	and.w	r3, r3, #32
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d0ee      	beq.n	800fd46 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800fd68:	2300      	movs	r3, #0
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}

0800fd72 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800fd72:	b580      	push	{r7, lr}
 800fd74:	b084      	sub	sp, #16
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d122      	bne.n	800fdd6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68da      	ldr	r2, [r3, #12]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fd9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800fda0:	f7fc f806 	bl	800bdb0 <HAL_GetTick>
 800fda4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800fda6:	e00c      	b.n	800fdc2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fda8:	f7fc f802 	bl	800bdb0 <HAL_GetTick>
 800fdac:	4602      	mov	r2, r0
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fdb6:	d904      	bls.n	800fdc2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2204      	movs	r2, #4
 800fdbc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d102      	bne.n	800fdd6 <RTC_EnterInitMode+0x64>
 800fdd0:	7bfb      	ldrb	r3, [r7, #15]
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d1e8      	bne.n	800fda8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800fdd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3710      	adds	r7, #16
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fde8:	2300      	movs	r3, #0
 800fdea:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	68da      	ldr	r2, [r3, #12]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fdfa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	f003 0320 	and.w	r3, r3, #32
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d10a      	bne.n	800fe20 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f7ff ff89 	bl	800fd22 <HAL_RTC_WaitForSynchro>
 800fe10:	4603      	mov	r3, r0
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d004      	beq.n	800fe20 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2204      	movs	r2, #4
 800fe1a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800fe20:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3710      	adds	r7, #16
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800fe2a:	b480      	push	{r7}
 800fe2c:	b085      	sub	sp, #20
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	4603      	mov	r3, r0
 800fe32:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800fe34:	2300      	movs	r3, #0
 800fe36:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800fe38:	e005      	b.n	800fe46 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800fe3a:	7bfb      	ldrb	r3, [r7, #15]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800fe40:	79fb      	ldrb	r3, [r7, #7]
 800fe42:	3b0a      	subs	r3, #10
 800fe44:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800fe46:	79fb      	ldrb	r3, [r7, #7]
 800fe48:	2b09      	cmp	r3, #9
 800fe4a:	d8f6      	bhi.n	800fe3a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800fe4c:	7bfb      	ldrb	r3, [r7, #15]
 800fe4e:	011b      	lsls	r3, r3, #4
 800fe50:	b2da      	uxtb	r2, r3
 800fe52:	79fb      	ldrb	r3, [r7, #7]
 800fe54:	4313      	orrs	r3, r2
 800fe56:	b2db      	uxtb	r3, r3
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3714      	adds	r7, #20
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800fe72:	79fb      	ldrb	r3, [r7, #7]
 800fe74:	091b      	lsrs	r3, r3, #4
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	461a      	mov	r2, r3
 800fe7a:	0092      	lsls	r2, r2, #2
 800fe7c:	4413      	add	r3, r2
 800fe7e:	005b      	lsls	r3, r3, #1
 800fe80:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800fe82:	79fb      	ldrb	r3, [r7, #7]
 800fe84:	f003 030f 	and.w	r3, r3, #15
 800fe88:	b2da      	uxtb	r2, r3
 800fe8a:	7bfb      	ldrb	r3, [r7, #15]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	b2db      	uxtb	r3, r3
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b087      	sub	sp, #28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800fea8:	4b59      	ldr	r3, [pc, #356]	; (8010010 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4a59      	ldr	r2, [pc, #356]	; (8010014 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800feae:	fba2 2303 	umull	r2, r3, r2, r3
 800feb2:	0adb      	lsrs	r3, r3, #11
 800feb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800feb8:	fb02 f303 	mul.w	r3, r2, r3
 800febc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	7f1b      	ldrb	r3, [r3, #28]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d101      	bne.n	800feca <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800fec6:	2302      	movs	r3, #2
 800fec8:	e09b      	b.n	8010002 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2201      	movs	r2, #1
 800fece:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2202      	movs	r2, #2
 800fed4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	22ca      	movs	r2, #202	; 0xca
 800fedc:	625a      	str	r2, [r3, #36]	; 0x24
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2253      	movs	r2, #83	; 0x53
 800fee4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d017      	beq.n	800ff24 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	1e5a      	subs	r2, r3, #1
 800fef8:	617a      	str	r2, [r7, #20]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d10b      	bne.n	800ff16 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	22ff      	movs	r2, #255	; 0xff
 800ff04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2203      	movs	r2, #3
 800ff0a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ff12:	2303      	movs	r3, #3
 800ff14:	e075      	b.n	8010002 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	f003 0304 	and.w	r3, r3, #4
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d1e7      	bne.n	800fef4 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	689a      	ldr	r2, [r3, #8]
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff32:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	68db      	ldr	r3, [r3, #12]
 800ff3a:	b2da      	uxtb	r2, r3
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800ff44:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800ff46:	4b32      	ldr	r3, [pc, #200]	; (8010010 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4a32      	ldr	r2, [pc, #200]	; (8010014 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800ff4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ff50:	0adb      	lsrs	r3, r3, #11
 800ff52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ff56:	fb02 f303 	mul.w	r3, r2, r3
 800ff5a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	1e5a      	subs	r2, r3, #1
 800ff60:	617a      	str	r2, [r7, #20]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d10b      	bne.n	800ff7e <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	22ff      	movs	r2, #255	; 0xff
 800ff6c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2203      	movs	r2, #3
 800ff72:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2200      	movs	r2, #0
 800ff78:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800ff7a:	2303      	movs	r3, #3
 800ff7c:	e041      	b.n	8010002 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	f003 0304 	and.w	r3, r3, #4
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d0e7      	beq.n	800ff5c <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	689a      	ldr	r2, [r3, #8]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f022 0207 	bic.w	r2, r2, #7
 800ff9a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	6899      	ldr	r1, [r3, #8]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	430a      	orrs	r2, r1
 800ffaa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	68ba      	ldr	r2, [r7, #8]
 800ffb2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800ffb4:	4b18      	ldr	r3, [pc, #96]	; (8010018 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a17      	ldr	r2, [pc, #92]	; (8010018 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800ffba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ffbe:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800ffc0:	4b15      	ldr	r3, [pc, #84]	; (8010018 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	4a14      	ldr	r2, [pc, #80]	; (8010018 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800ffc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ffca:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	689a      	ldr	r2, [r3, #8]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ffda:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	689a      	ldr	r2, [r3, #8]
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ffea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	22ff      	movs	r2, #255	; 0xff
 800fff2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	2201      	movs	r2, #1
 800fff8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2200      	movs	r2, #0
 800fffe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	371c      	adds	r7, #28
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	20000310 	.word	0x20000310
 8010014:	10624dd3 	.word	0x10624dd3
 8010018:	40013c00 	.word	0x40013c00

0801001c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00b      	beq.n	801004a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f7f1 fe92 	bl	8001d5c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	b2da      	uxtb	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8010048:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801004a:	4b05      	ldr	r3, [pc, #20]	; (8010060 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 801004c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8010050:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2201      	movs	r2, #1
 8010056:	775a      	strb	r2, [r3, #29]
}
 8010058:	bf00      	nop
 801005a:	3708      	adds	r7, #8
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	40013c00 	.word	0x40013c00

08010064 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8010064:	b480      	push	{r7}
 8010066:	b087      	sub	sp, #28
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8010070:	2300      	movs	r3, #0
 8010072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	3350      	adds	r3, #80	; 0x50
 801007a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	009b      	lsls	r3, r3, #2
 8010080:	697a      	ldr	r2, [r7, #20]
 8010082:	4413      	add	r3, r2
 8010084:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	601a      	str	r2, [r3, #0]
}
 801008c:	bf00      	nop
 801008e:	371c      	adds	r7, #28
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr

08010098 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8010098:	b480      	push	{r7}
 801009a:	b085      	sub	sp, #20
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80100a2:	2300      	movs	r3, #0
 80100a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3350      	adds	r3, #80	; 0x50
 80100ac:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	68fa      	ldr	r2, [r7, #12]
 80100b4:	4413      	add	r3, r2
 80100b6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3714      	adds	r7, #20
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr

080100c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d101      	bne.n	80100da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80100d6:	2301      	movs	r3, #1
 80100d8:	e041      	b.n	801015e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d106      	bne.n	80100f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2200      	movs	r2, #0
 80100ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f7fb fb82 	bl	800b7f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2202      	movs	r2, #2
 80100f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681a      	ldr	r2, [r3, #0]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	3304      	adds	r3, #4
 8010104:	4619      	mov	r1, r3
 8010106:	4610      	mov	r0, r2
 8010108:	f000 fa88 	bl	801061c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2201      	movs	r2, #1
 8010110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2201      	movs	r2, #1
 8010118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2201      	movs	r2, #1
 8010120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2201      	movs	r2, #1
 8010128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2201      	movs	r2, #1
 8010130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2201      	movs	r2, #1
 8010138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2201      	movs	r2, #1
 8010140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2201      	movs	r2, #1
 8010148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2201      	movs	r2, #1
 8010150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2201      	movs	r2, #1
 8010158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801015c:	2300      	movs	r3, #0
}
 801015e:	4618      	mov	r0, r3
 8010160:	3708      	adds	r7, #8
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
	...

08010168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010168:	b480      	push	{r7}
 801016a:	b085      	sub	sp, #20
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010176:	b2db      	uxtb	r3, r3
 8010178:	2b01      	cmp	r3, #1
 801017a:	d001      	beq.n	8010180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	e044      	b.n	801020a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2202      	movs	r2, #2
 8010184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	68da      	ldr	r2, [r3, #12]
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f042 0201 	orr.w	r2, r2, #1
 8010196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4a1e      	ldr	r2, [pc, #120]	; (8010218 <HAL_TIM_Base_Start_IT+0xb0>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d018      	beq.n	80101d4 <HAL_TIM_Base_Start_IT+0x6c>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101aa:	d013      	beq.n	80101d4 <HAL_TIM_Base_Start_IT+0x6c>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a1a      	ldr	r2, [pc, #104]	; (801021c <HAL_TIM_Base_Start_IT+0xb4>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d00e      	beq.n	80101d4 <HAL_TIM_Base_Start_IT+0x6c>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a19      	ldr	r2, [pc, #100]	; (8010220 <HAL_TIM_Base_Start_IT+0xb8>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d009      	beq.n	80101d4 <HAL_TIM_Base_Start_IT+0x6c>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4a17      	ldr	r2, [pc, #92]	; (8010224 <HAL_TIM_Base_Start_IT+0xbc>)
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d004      	beq.n	80101d4 <HAL_TIM_Base_Start_IT+0x6c>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	4a16      	ldr	r2, [pc, #88]	; (8010228 <HAL_TIM_Base_Start_IT+0xc0>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d111      	bne.n	80101f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	f003 0307 	and.w	r3, r3, #7
 80101de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2b06      	cmp	r3, #6
 80101e4:	d010      	beq.n	8010208 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f042 0201 	orr.w	r2, r2, #1
 80101f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101f6:	e007      	b.n	8010208 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f042 0201 	orr.w	r2, r2, #1
 8010206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010208:	2300      	movs	r3, #0
}
 801020a:	4618      	mov	r0, r3
 801020c:	3714      	adds	r7, #20
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr
 8010216:	bf00      	nop
 8010218:	40010000 	.word	0x40010000
 801021c:	40000400 	.word	0x40000400
 8010220:	40000800 	.word	0x40000800
 8010224:	40000c00 	.word	0x40000c00
 8010228:	40014000 	.word	0x40014000

0801022c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	691b      	ldr	r3, [r3, #16]
 801023a:	f003 0302 	and.w	r3, r3, #2
 801023e:	2b02      	cmp	r3, #2
 8010240:	d122      	bne.n	8010288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	f003 0302 	and.w	r3, r3, #2
 801024c:	2b02      	cmp	r3, #2
 801024e:	d11b      	bne.n	8010288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f06f 0202 	mvn.w	r2, #2
 8010258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2201      	movs	r2, #1
 801025e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	699b      	ldr	r3, [r3, #24]
 8010266:	f003 0303 	and.w	r3, r3, #3
 801026a:	2b00      	cmp	r3, #0
 801026c:	d003      	beq.n	8010276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 f9b5 	bl	80105de <HAL_TIM_IC_CaptureCallback>
 8010274:	e005      	b.n	8010282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 f9a7 	bl	80105ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 f9b8 	bl	80105f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2200      	movs	r2, #0
 8010286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	691b      	ldr	r3, [r3, #16]
 801028e:	f003 0304 	and.w	r3, r3, #4
 8010292:	2b04      	cmp	r3, #4
 8010294:	d122      	bne.n	80102dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	f003 0304 	and.w	r3, r3, #4
 80102a0:	2b04      	cmp	r3, #4
 80102a2:	d11b      	bne.n	80102dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	f06f 0204 	mvn.w	r2, #4
 80102ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2202      	movs	r2, #2
 80102b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	699b      	ldr	r3, [r3, #24]
 80102ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d003      	beq.n	80102ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 f98b 	bl	80105de <HAL_TIM_IC_CaptureCallback>
 80102c8:	e005      	b.n	80102d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 f97d 	bl	80105ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f000 f98e 	bl	80105f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2200      	movs	r2, #0
 80102da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	691b      	ldr	r3, [r3, #16]
 80102e2:	f003 0308 	and.w	r3, r3, #8
 80102e6:	2b08      	cmp	r3, #8
 80102e8:	d122      	bne.n	8010330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	f003 0308 	and.w	r3, r3, #8
 80102f4:	2b08      	cmp	r3, #8
 80102f6:	d11b      	bne.n	8010330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f06f 0208 	mvn.w	r2, #8
 8010300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2204      	movs	r2, #4
 8010306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	69db      	ldr	r3, [r3, #28]
 801030e:	f003 0303 	and.w	r3, r3, #3
 8010312:	2b00      	cmp	r3, #0
 8010314:	d003      	beq.n	801031e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 f961 	bl	80105de <HAL_TIM_IC_CaptureCallback>
 801031c:	e005      	b.n	801032a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 f953 	bl	80105ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 f964 	bl	80105f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2200      	movs	r2, #0
 801032e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	691b      	ldr	r3, [r3, #16]
 8010336:	f003 0310 	and.w	r3, r3, #16
 801033a:	2b10      	cmp	r3, #16
 801033c:	d122      	bne.n	8010384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	f003 0310 	and.w	r3, r3, #16
 8010348:	2b10      	cmp	r3, #16
 801034a:	d11b      	bne.n	8010384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f06f 0210 	mvn.w	r2, #16
 8010354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2208      	movs	r2, #8
 801035a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	69db      	ldr	r3, [r3, #28]
 8010362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010366:	2b00      	cmp	r3, #0
 8010368:	d003      	beq.n	8010372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f000 f937 	bl	80105de <HAL_TIM_IC_CaptureCallback>
 8010370:	e005      	b.n	801037e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f000 f929 	bl	80105ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 f93a 	bl	80105f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2200      	movs	r2, #0
 8010382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	691b      	ldr	r3, [r3, #16]
 801038a:	f003 0301 	and.w	r3, r3, #1
 801038e:	2b01      	cmp	r3, #1
 8010390:	d10e      	bne.n	80103b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	f003 0301 	and.w	r3, r3, #1
 801039c:	2b01      	cmp	r3, #1
 801039e:	d107      	bne.n	80103b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f06f 0201 	mvn.w	r2, #1
 80103a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f7fb f954 	bl	800b658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	691b      	ldr	r3, [r3, #16]
 80103b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103ba:	2b80      	cmp	r3, #128	; 0x80
 80103bc:	d10e      	bne.n	80103dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	68db      	ldr	r3, [r3, #12]
 80103c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103c8:	2b80      	cmp	r3, #128	; 0x80
 80103ca:	d107      	bne.n	80103dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80103d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 fab2 	bl	8010940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	691b      	ldr	r3, [r3, #16]
 80103e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103e6:	2b40      	cmp	r3, #64	; 0x40
 80103e8:	d10e      	bne.n	8010408 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103f4:	2b40      	cmp	r3, #64	; 0x40
 80103f6:	d107      	bne.n	8010408 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 f8ff 	bl	8010606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	691b      	ldr	r3, [r3, #16]
 801040e:	f003 0320 	and.w	r3, r3, #32
 8010412:	2b20      	cmp	r3, #32
 8010414:	d10e      	bne.n	8010434 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	f003 0320 	and.w	r3, r3, #32
 8010420:	2b20      	cmp	r3, #32
 8010422:	d107      	bne.n	8010434 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f06f 0220 	mvn.w	r2, #32
 801042c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 fa7c 	bl	801092c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010434:	bf00      	nop
 8010436:	3708      	adds	r7, #8
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010446:	2300      	movs	r3, #0
 8010448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010450:	2b01      	cmp	r3, #1
 8010452:	d101      	bne.n	8010458 <HAL_TIM_ConfigClockSource+0x1c>
 8010454:	2302      	movs	r3, #2
 8010456:	e0b4      	b.n	80105c2 <HAL_TIM_ConfigClockSource+0x186>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2201      	movs	r2, #1
 801045c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2202      	movs	r2, #2
 8010464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801047e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010490:	d03e      	beq.n	8010510 <HAL_TIM_ConfigClockSource+0xd4>
 8010492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010496:	f200 8087 	bhi.w	80105a8 <HAL_TIM_ConfigClockSource+0x16c>
 801049a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801049e:	f000 8086 	beq.w	80105ae <HAL_TIM_ConfigClockSource+0x172>
 80104a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104a6:	d87f      	bhi.n	80105a8 <HAL_TIM_ConfigClockSource+0x16c>
 80104a8:	2b70      	cmp	r3, #112	; 0x70
 80104aa:	d01a      	beq.n	80104e2 <HAL_TIM_ConfigClockSource+0xa6>
 80104ac:	2b70      	cmp	r3, #112	; 0x70
 80104ae:	d87b      	bhi.n	80105a8 <HAL_TIM_ConfigClockSource+0x16c>
 80104b0:	2b60      	cmp	r3, #96	; 0x60
 80104b2:	d050      	beq.n	8010556 <HAL_TIM_ConfigClockSource+0x11a>
 80104b4:	2b60      	cmp	r3, #96	; 0x60
 80104b6:	d877      	bhi.n	80105a8 <HAL_TIM_ConfigClockSource+0x16c>
 80104b8:	2b50      	cmp	r3, #80	; 0x50
 80104ba:	d03c      	beq.n	8010536 <HAL_TIM_ConfigClockSource+0xfa>
 80104bc:	2b50      	cmp	r3, #80	; 0x50
 80104be:	d873      	bhi.n	80105a8 <HAL_TIM_ConfigClockSource+0x16c>
 80104c0:	2b40      	cmp	r3, #64	; 0x40
 80104c2:	d058      	beq.n	8010576 <HAL_TIM_ConfigClockSource+0x13a>
 80104c4:	2b40      	cmp	r3, #64	; 0x40
 80104c6:	d86f      	bhi.n	80105a8 <HAL_TIM_ConfigClockSource+0x16c>
 80104c8:	2b30      	cmp	r3, #48	; 0x30
 80104ca:	d064      	beq.n	8010596 <HAL_TIM_ConfigClockSource+0x15a>
 80104cc:	2b30      	cmp	r3, #48	; 0x30
 80104ce:	d86b      	bhi.n	80105a8 <HAL_TIM_ConfigClockSource+0x16c>
 80104d0:	2b20      	cmp	r3, #32
 80104d2:	d060      	beq.n	8010596 <HAL_TIM_ConfigClockSource+0x15a>
 80104d4:	2b20      	cmp	r3, #32
 80104d6:	d867      	bhi.n	80105a8 <HAL_TIM_ConfigClockSource+0x16c>
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d05c      	beq.n	8010596 <HAL_TIM_ConfigClockSource+0x15a>
 80104dc:	2b10      	cmp	r3, #16
 80104de:	d05a      	beq.n	8010596 <HAL_TIM_ConfigClockSource+0x15a>
 80104e0:	e062      	b.n	80105a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6818      	ldr	r0, [r3, #0]
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	6899      	ldr	r1, [r3, #8]
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	685a      	ldr	r2, [r3, #4]
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	f000 f98d 	bl	8010810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	689b      	ldr	r3, [r3, #8]
 80104fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	68ba      	ldr	r2, [r7, #8]
 801050c:	609a      	str	r2, [r3, #8]
      break;
 801050e:	e04f      	b.n	80105b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6818      	ldr	r0, [r3, #0]
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	6899      	ldr	r1, [r3, #8]
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	685a      	ldr	r2, [r3, #4]
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	f000 f976 	bl	8010810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	689a      	ldr	r2, [r3, #8]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010532:	609a      	str	r2, [r3, #8]
      break;
 8010534:	e03c      	b.n	80105b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6818      	ldr	r0, [r3, #0]
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	6859      	ldr	r1, [r3, #4]
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	68db      	ldr	r3, [r3, #12]
 8010542:	461a      	mov	r2, r3
 8010544:	f000 f8ea 	bl	801071c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	2150      	movs	r1, #80	; 0x50
 801054e:	4618      	mov	r0, r3
 8010550:	f000 f943 	bl	80107da <TIM_ITRx_SetConfig>
      break;
 8010554:	e02c      	b.n	80105b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6818      	ldr	r0, [r3, #0]
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	6859      	ldr	r1, [r3, #4]
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	68db      	ldr	r3, [r3, #12]
 8010562:	461a      	mov	r2, r3
 8010564:	f000 f909 	bl	801077a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2160      	movs	r1, #96	; 0x60
 801056e:	4618      	mov	r0, r3
 8010570:	f000 f933 	bl	80107da <TIM_ITRx_SetConfig>
      break;
 8010574:	e01c      	b.n	80105b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6818      	ldr	r0, [r3, #0]
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	6859      	ldr	r1, [r3, #4]
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	461a      	mov	r2, r3
 8010584:	f000 f8ca 	bl	801071c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2140      	movs	r1, #64	; 0x40
 801058e:	4618      	mov	r0, r3
 8010590:	f000 f923 	bl	80107da <TIM_ITRx_SetConfig>
      break;
 8010594:	e00c      	b.n	80105b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	4619      	mov	r1, r3
 80105a0:	4610      	mov	r0, r2
 80105a2:	f000 f91a 	bl	80107da <TIM_ITRx_SetConfig>
      break;
 80105a6:	e003      	b.n	80105b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80105a8:	2301      	movs	r3, #1
 80105aa:	73fb      	strb	r3, [r7, #15]
      break;
 80105ac:	e000      	b.n	80105b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80105ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2201      	movs	r2, #1
 80105b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3710      	adds	r7, #16
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80105ca:	b480      	push	{r7}
 80105cc:	b083      	sub	sp, #12
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80105d2:	bf00      	nop
 80105d4:	370c      	adds	r7, #12
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80105de:	b480      	push	{r7}
 80105e0:	b083      	sub	sp, #12
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80105e6:	bf00      	nop
 80105e8:	370c      	adds	r7, #12
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr

080105f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80105f2:	b480      	push	{r7}
 80105f4:	b083      	sub	sp, #12
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80105fa:	bf00      	nop
 80105fc:	370c      	adds	r7, #12
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr

08010606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010606:	b480      	push	{r7}
 8010608:	b083      	sub	sp, #12
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801060e:	bf00      	nop
 8010610:	370c      	adds	r7, #12
 8010612:	46bd      	mov	sp, r7
 8010614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010618:	4770      	bx	lr
	...

0801061c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801061c:	b480      	push	{r7}
 801061e:	b085      	sub	sp, #20
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	4a34      	ldr	r2, [pc, #208]	; (8010700 <TIM_Base_SetConfig+0xe4>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d00f      	beq.n	8010654 <TIM_Base_SetConfig+0x38>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801063a:	d00b      	beq.n	8010654 <TIM_Base_SetConfig+0x38>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	4a31      	ldr	r2, [pc, #196]	; (8010704 <TIM_Base_SetConfig+0xe8>)
 8010640:	4293      	cmp	r3, r2
 8010642:	d007      	beq.n	8010654 <TIM_Base_SetConfig+0x38>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	4a30      	ldr	r2, [pc, #192]	; (8010708 <TIM_Base_SetConfig+0xec>)
 8010648:	4293      	cmp	r3, r2
 801064a:	d003      	beq.n	8010654 <TIM_Base_SetConfig+0x38>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	4a2f      	ldr	r2, [pc, #188]	; (801070c <TIM_Base_SetConfig+0xf0>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d108      	bne.n	8010666 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801065a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	68fa      	ldr	r2, [r7, #12]
 8010662:	4313      	orrs	r3, r2
 8010664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4a25      	ldr	r2, [pc, #148]	; (8010700 <TIM_Base_SetConfig+0xe4>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d01b      	beq.n	80106a6 <TIM_Base_SetConfig+0x8a>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010674:	d017      	beq.n	80106a6 <TIM_Base_SetConfig+0x8a>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4a22      	ldr	r2, [pc, #136]	; (8010704 <TIM_Base_SetConfig+0xe8>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d013      	beq.n	80106a6 <TIM_Base_SetConfig+0x8a>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	4a21      	ldr	r2, [pc, #132]	; (8010708 <TIM_Base_SetConfig+0xec>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d00f      	beq.n	80106a6 <TIM_Base_SetConfig+0x8a>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	4a20      	ldr	r2, [pc, #128]	; (801070c <TIM_Base_SetConfig+0xf0>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d00b      	beq.n	80106a6 <TIM_Base_SetConfig+0x8a>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a1f      	ldr	r2, [pc, #124]	; (8010710 <TIM_Base_SetConfig+0xf4>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d007      	beq.n	80106a6 <TIM_Base_SetConfig+0x8a>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a1e      	ldr	r2, [pc, #120]	; (8010714 <TIM_Base_SetConfig+0xf8>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d003      	beq.n	80106a6 <TIM_Base_SetConfig+0x8a>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	4a1d      	ldr	r2, [pc, #116]	; (8010718 <TIM_Base_SetConfig+0xfc>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d108      	bne.n	80106b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	4313      	orrs	r3, r2
 80106b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	695b      	ldr	r3, [r3, #20]
 80106c2:	4313      	orrs	r3, r2
 80106c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	689a      	ldr	r2, [r3, #8]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4a08      	ldr	r2, [pc, #32]	; (8010700 <TIM_Base_SetConfig+0xe4>)
 80106e0:	4293      	cmp	r3, r2
 80106e2:	d103      	bne.n	80106ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	691a      	ldr	r2, [r3, #16]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2201      	movs	r2, #1
 80106f0:	615a      	str	r2, [r3, #20]
}
 80106f2:	bf00      	nop
 80106f4:	3714      	adds	r7, #20
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	40010000 	.word	0x40010000
 8010704:	40000400 	.word	0x40000400
 8010708:	40000800 	.word	0x40000800
 801070c:	40000c00 	.word	0x40000c00
 8010710:	40014000 	.word	0x40014000
 8010714:	40014400 	.word	0x40014400
 8010718:	40014800 	.word	0x40014800

0801071c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801071c:	b480      	push	{r7}
 801071e:	b087      	sub	sp, #28
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	60b9      	str	r1, [r7, #8]
 8010726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	6a1b      	ldr	r3, [r3, #32]
 801072c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	6a1b      	ldr	r3, [r3, #32]
 8010732:	f023 0201 	bic.w	r2, r3, #1
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	699b      	ldr	r3, [r3, #24]
 801073e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	011b      	lsls	r3, r3, #4
 801074c:	693a      	ldr	r2, [r7, #16]
 801074e:	4313      	orrs	r3, r2
 8010750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	f023 030a 	bic.w	r3, r3, #10
 8010758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801075a:	697a      	ldr	r2, [r7, #20]
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	4313      	orrs	r3, r2
 8010760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	693a      	ldr	r2, [r7, #16]
 8010766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	697a      	ldr	r2, [r7, #20]
 801076c:	621a      	str	r2, [r3, #32]
}
 801076e:	bf00      	nop
 8010770:	371c      	adds	r7, #28
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr

0801077a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801077a:	b480      	push	{r7}
 801077c:	b087      	sub	sp, #28
 801077e:	af00      	add	r7, sp, #0
 8010780:	60f8      	str	r0, [r7, #12]
 8010782:	60b9      	str	r1, [r7, #8]
 8010784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	6a1b      	ldr	r3, [r3, #32]
 801078a:	f023 0210 	bic.w	r2, r3, #16
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	699b      	ldr	r3, [r3, #24]
 8010796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	6a1b      	ldr	r3, [r3, #32]
 801079c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80107a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	031b      	lsls	r3, r3, #12
 80107aa:	697a      	ldr	r2, [r7, #20]
 80107ac:	4313      	orrs	r3, r2
 80107ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80107b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	011b      	lsls	r3, r3, #4
 80107bc:	693a      	ldr	r2, [r7, #16]
 80107be:	4313      	orrs	r3, r2
 80107c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	697a      	ldr	r2, [r7, #20]
 80107c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	693a      	ldr	r2, [r7, #16]
 80107cc:	621a      	str	r2, [r3, #32]
}
 80107ce:	bf00      	nop
 80107d0:	371c      	adds	r7, #28
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80107da:	b480      	push	{r7}
 80107dc:	b085      	sub	sp, #20
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
 80107e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	689b      	ldr	r3, [r3, #8]
 80107e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80107f2:	683a      	ldr	r2, [r7, #0]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	4313      	orrs	r3, r2
 80107f8:	f043 0307 	orr.w	r3, r3, #7
 80107fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	68fa      	ldr	r2, [r7, #12]
 8010802:	609a      	str	r2, [r3, #8]
}
 8010804:	bf00      	nop
 8010806:	3714      	adds	r7, #20
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010810:	b480      	push	{r7}
 8010812:	b087      	sub	sp, #28
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	607a      	str	r2, [r7, #4]
 801081c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	689b      	ldr	r3, [r3, #8]
 8010822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801082a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	021a      	lsls	r2, r3, #8
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	431a      	orrs	r2, r3
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	4313      	orrs	r3, r2
 8010838:	697a      	ldr	r2, [r7, #20]
 801083a:	4313      	orrs	r3, r2
 801083c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	697a      	ldr	r2, [r7, #20]
 8010842:	609a      	str	r2, [r3, #8]
}
 8010844:	bf00      	nop
 8010846:	371c      	adds	r7, #28
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr

08010850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010850:	b480      	push	{r7}
 8010852:	b085      	sub	sp, #20
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010860:	2b01      	cmp	r3, #1
 8010862:	d101      	bne.n	8010868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010864:	2302      	movs	r3, #2
 8010866:	e050      	b.n	801090a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2201      	movs	r2, #1
 801086c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2202      	movs	r2, #2
 8010874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	689b      	ldr	r3, [r3, #8]
 8010886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801088e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	68fa      	ldr	r2, [r7, #12]
 8010896:	4313      	orrs	r3, r2
 8010898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	68fa      	ldr	r2, [r7, #12]
 80108a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a1c      	ldr	r2, [pc, #112]	; (8010918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d018      	beq.n	80108de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108b4:	d013      	beq.n	80108de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4a18      	ldr	r2, [pc, #96]	; (801091c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80108bc:	4293      	cmp	r3, r2
 80108be:	d00e      	beq.n	80108de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a16      	ldr	r2, [pc, #88]	; (8010920 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d009      	beq.n	80108de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4a15      	ldr	r2, [pc, #84]	; (8010924 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d004      	beq.n	80108de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a13      	ldr	r2, [pc, #76]	; (8010928 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d10c      	bne.n	80108f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	68ba      	ldr	r2, [r7, #8]
 80108ec:	4313      	orrs	r3, r2
 80108ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	68ba      	ldr	r2, [r7, #8]
 80108f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2201      	movs	r2, #1
 80108fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2200      	movs	r2, #0
 8010904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	3714      	adds	r7, #20
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop
 8010918:	40010000 	.word	0x40010000
 801091c:	40000400 	.word	0x40000400
 8010920:	40000800 	.word	0x40000800
 8010924:	40000c00 	.word	0x40000c00
 8010928:	40014000 	.word	0x40014000

0801092c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801092c:	b480      	push	{r7}
 801092e:	b083      	sub	sp, #12
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010934:	bf00      	nop
 8010936:	370c      	adds	r7, #12
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr

08010940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010940:	b480      	push	{r7}
 8010942:	b083      	sub	sp, #12
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010948:	bf00      	nop
 801094a:	370c      	adds	r7, #12
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr

08010954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d101      	bne.n	8010966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010962:	2301      	movs	r3, #1
 8010964:	e03f      	b.n	80109e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801096c:	b2db      	uxtb	r3, r3
 801096e:	2b00      	cmp	r3, #0
 8010970:	d106      	bne.n	8010980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f7fa ff80 	bl	800b880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2224      	movs	r2, #36	; 0x24
 8010984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	68da      	ldr	r2, [r3, #12]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 fddf 	bl	801155c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	691a      	ldr	r2, [r3, #16]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80109ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	695a      	ldr	r2, [r3, #20]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80109bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	68da      	ldr	r2, [r3, #12]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80109cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2200      	movs	r2, #0
 80109d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2220      	movs	r2, #32
 80109d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2220      	movs	r2, #32
 80109e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3708      	adds	r7, #8
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}

080109ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b08a      	sub	sp, #40	; 0x28
 80109f2:	af02      	add	r7, sp, #8
 80109f4:	60f8      	str	r0, [r7, #12]
 80109f6:	60b9      	str	r1, [r7, #8]
 80109f8:	603b      	str	r3, [r7, #0]
 80109fa:	4613      	mov	r3, r2
 80109fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80109fe:	2300      	movs	r3, #0
 8010a00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	2b20      	cmp	r3, #32
 8010a0c:	d17c      	bne.n	8010b08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d002      	beq.n	8010a1a <HAL_UART_Transmit+0x2c>
 8010a14:	88fb      	ldrh	r3, [r7, #6]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d101      	bne.n	8010a1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	e075      	b.n	8010b0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a24:	2b01      	cmp	r3, #1
 8010a26:	d101      	bne.n	8010a2c <HAL_UART_Transmit+0x3e>
 8010a28:	2302      	movs	r3, #2
 8010a2a:	e06e      	b.n	8010b0a <HAL_UART_Transmit+0x11c>
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2201      	movs	r2, #1
 8010a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2200      	movs	r2, #0
 8010a38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2221      	movs	r2, #33	; 0x21
 8010a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010a42:	f7fb f9b5 	bl	800bdb0 <HAL_GetTick>
 8010a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	88fa      	ldrh	r2, [r7, #6]
 8010a4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	88fa      	ldrh	r2, [r7, #6]
 8010a52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	689b      	ldr	r3, [r3, #8]
 8010a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a5c:	d108      	bne.n	8010a70 <HAL_UART_Transmit+0x82>
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	691b      	ldr	r3, [r3, #16]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d104      	bne.n	8010a70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8010a66:	2300      	movs	r3, #0
 8010a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	61bb      	str	r3, [r7, #24]
 8010a6e:	e003      	b.n	8010a78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010a74:	2300      	movs	r3, #0
 8010a76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8010a80:	e02a      	b.n	8010ad8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	9300      	str	r3, [sp, #0]
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	2180      	movs	r1, #128	; 0x80
 8010a8c:	68f8      	ldr	r0, [r7, #12]
 8010a8e:	f000 fb1f 	bl	80110d0 <UART_WaitOnFlagUntilTimeout>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d001      	beq.n	8010a9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8010a98:	2303      	movs	r3, #3
 8010a9a:	e036      	b.n	8010b0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d10b      	bne.n	8010aba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010aa2:	69bb      	ldr	r3, [r7, #24]
 8010aa4:	881b      	ldrh	r3, [r3, #0]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	3302      	adds	r3, #2
 8010ab6:	61bb      	str	r3, [r7, #24]
 8010ab8:	e007      	b.n	8010aca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	781a      	ldrb	r2, [r3, #0]
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1cf      	bne.n	8010a82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	9300      	str	r3, [sp, #0]
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	2140      	movs	r1, #64	; 0x40
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	f000 faef 	bl	80110d0 <UART_WaitOnFlagUntilTimeout>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d001      	beq.n	8010afc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8010af8:	2303      	movs	r3, #3
 8010afa:	e006      	b.n	8010b0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2220      	movs	r2, #32
 8010b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8010b04:	2300      	movs	r3, #0
 8010b06:	e000      	b.n	8010b0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8010b08:	2302      	movs	r3, #2
  }
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3720      	adds	r7, #32
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}

08010b12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b12:	b580      	push	{r7, lr}
 8010b14:	b084      	sub	sp, #16
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	60f8      	str	r0, [r7, #12]
 8010b1a:	60b9      	str	r1, [r7, #8]
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	2b20      	cmp	r3, #32
 8010b2a:	d11d      	bne.n	8010b68 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d002      	beq.n	8010b38 <HAL_UART_Receive_IT+0x26>
 8010b32:	88fb      	ldrh	r3, [r7, #6]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d101      	bne.n	8010b3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	e016      	b.n	8010b6a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d101      	bne.n	8010b4a <HAL_UART_Receive_IT+0x38>
 8010b46:	2302      	movs	r3, #2
 8010b48:	e00f      	b.n	8010b6a <HAL_UART_Receive_IT+0x58>
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2200      	movs	r2, #0
 8010b56:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010b58:	88fb      	ldrh	r3, [r7, #6]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	68b9      	ldr	r1, [r7, #8]
 8010b5e:	68f8      	ldr	r0, [r7, #12]
 8010b60:	f000 fb24 	bl	80111ac <UART_Start_Receive_IT>
 8010b64:	4603      	mov	r3, r0
 8010b66:	e000      	b.n	8010b6a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8010b68:	2302      	movs	r3, #2
  }
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3710      	adds	r7, #16
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
	...

08010b74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b0ba      	sub	sp, #232	; 0xe8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	695b      	ldr	r3, [r3, #20]
 8010b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010baa:	f003 030f 	and.w	r3, r3, #15
 8010bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8010bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d10f      	bne.n	8010bda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bbe:	f003 0320 	and.w	r3, r3, #32
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d009      	beq.n	8010bda <HAL_UART_IRQHandler+0x66>
 8010bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bca:	f003 0320 	and.w	r3, r3, #32
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d003      	beq.n	8010bda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f000 fc07 	bl	80113e6 <UART_Receive_IT>
      return;
 8010bd8:	e256      	b.n	8011088 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	f000 80de 	beq.w	8010da0 <HAL_UART_IRQHandler+0x22c>
 8010be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010be8:	f003 0301 	and.w	r3, r3, #1
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d106      	bne.n	8010bfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bf4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	f000 80d1 	beq.w	8010da0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c02:	f003 0301 	and.w	r3, r3, #1
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d00b      	beq.n	8010c22 <HAL_UART_IRQHandler+0xae>
 8010c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d005      	beq.n	8010c22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c1a:	f043 0201 	orr.w	r2, r3, #1
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c26:	f003 0304 	and.w	r3, r3, #4
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00b      	beq.n	8010c46 <HAL_UART_IRQHandler+0xd2>
 8010c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c32:	f003 0301 	and.w	r3, r3, #1
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d005      	beq.n	8010c46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c3e:	f043 0202 	orr.w	r2, r3, #2
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c4a:	f003 0302 	and.w	r3, r3, #2
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d00b      	beq.n	8010c6a <HAL_UART_IRQHandler+0xf6>
 8010c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c56:	f003 0301 	and.w	r3, r3, #1
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d005      	beq.n	8010c6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c62:	f043 0204 	orr.w	r2, r3, #4
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c6e:	f003 0308 	and.w	r3, r3, #8
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d011      	beq.n	8010c9a <HAL_UART_IRQHandler+0x126>
 8010c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c7a:	f003 0320 	and.w	r3, r3, #32
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d105      	bne.n	8010c8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c86:	f003 0301 	and.w	r3, r3, #1
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d005      	beq.n	8010c9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c92:	f043 0208 	orr.w	r2, r3, #8
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	f000 81ed 	beq.w	801107e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ca8:	f003 0320 	and.w	r3, r3, #32
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d008      	beq.n	8010cc2 <HAL_UART_IRQHandler+0x14e>
 8010cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cb4:	f003 0320 	and.w	r3, r3, #32
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d002      	beq.n	8010cc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f000 fb92 	bl	80113e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	695b      	ldr	r3, [r3, #20]
 8010cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ccc:	2b40      	cmp	r3, #64	; 0x40
 8010cce:	bf0c      	ite	eq
 8010cd0:	2301      	moveq	r3, #1
 8010cd2:	2300      	movne	r3, #0
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cde:	f003 0308 	and.w	r3, r3, #8
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d103      	bne.n	8010cee <HAL_UART_IRQHandler+0x17a>
 8010ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d04f      	beq.n	8010d8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f000 fa9a 	bl	8011228 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	695b      	ldr	r3, [r3, #20]
 8010cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cfe:	2b40      	cmp	r3, #64	; 0x40
 8010d00:	d141      	bne.n	8010d86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	3314      	adds	r3, #20
 8010d08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d10:	e853 3f00 	ldrex	r3, [r3]
 8010d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	3314      	adds	r3, #20
 8010d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010d32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010d3e:	e841 2300 	strex	r3, r2, [r1]
 8010d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d1d9      	bne.n	8010d02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d013      	beq.n	8010d7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d5a:	4a7d      	ldr	r2, [pc, #500]	; (8010f50 <HAL_UART_IRQHandler+0x3dc>)
 8010d5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fb f9a6 	bl	800c0b4 <HAL_DMA_Abort_IT>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d016      	beq.n	8010d9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010d78:	4610      	mov	r0, r2
 8010d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d7c:	e00e      	b.n	8010d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 f990 	bl	80110a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d84:	e00a      	b.n	8010d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 f98c 	bl	80110a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d8c:	e006      	b.n	8010d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 f988 	bl	80110a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2200      	movs	r2, #0
 8010d98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8010d9a:	e170      	b.n	801107e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d9c:	bf00      	nop
    return;
 8010d9e:	e16e      	b.n	801107e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	f040 814a 	bne.w	801103e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dae:	f003 0310 	and.w	r3, r3, #16
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f000 8143 	beq.w	801103e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dbc:	f003 0310 	and.w	r3, r3, #16
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f000 813c 	beq.w	801103e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	60bb      	str	r3, [r7, #8]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	60bb      	str	r3, [r7, #8]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	60bb      	str	r3, [r7, #8]
 8010dda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	695b      	ldr	r3, [r3, #20]
 8010de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010de6:	2b40      	cmp	r3, #64	; 0x40
 8010de8:	f040 80b4 	bne.w	8010f54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010df8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f000 8140 	beq.w	8011082 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	f080 8139 	bcs.w	8011082 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010e16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e1c:	69db      	ldr	r3, [r3, #28]
 8010e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e22:	f000 8088 	beq.w	8010f36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	330c      	adds	r3, #12
 8010e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e34:	e853 3f00 	ldrex	r3, [r3]
 8010e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	330c      	adds	r3, #12
 8010e4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010e52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010e62:	e841 2300 	strex	r3, r2, [r1]
 8010e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d1d9      	bne.n	8010e26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	3314      	adds	r3, #20
 8010e78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e7c:	e853 3f00 	ldrex	r3, [r3]
 8010e80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e84:	f023 0301 	bic.w	r3, r3, #1
 8010e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	3314      	adds	r3, #20
 8010e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010e96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010e9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010ea2:	e841 2300 	strex	r3, r2, [r1]
 8010ea6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d1e1      	bne.n	8010e72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	3314      	adds	r3, #20
 8010eb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010eb8:	e853 3f00 	ldrex	r3, [r3]
 8010ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	3314      	adds	r3, #20
 8010ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010ed2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010ed4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ed6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010eda:	e841 2300 	strex	r3, r2, [r1]
 8010ede:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d1e3      	bne.n	8010eae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2220      	movs	r2, #32
 8010eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	330c      	adds	r3, #12
 8010efa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010efe:	e853 3f00 	ldrex	r3, [r3]
 8010f02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f06:	f023 0310 	bic.w	r3, r3, #16
 8010f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	330c      	adds	r3, #12
 8010f14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010f18:	65ba      	str	r2, [r7, #88]	; 0x58
 8010f1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f20:	e841 2300 	strex	r3, r2, [r1]
 8010f24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d1e3      	bne.n	8010ef4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7fb f84f 	bl	800bfd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	1ad3      	subs	r3, r2, r3
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	4619      	mov	r1, r3
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 f8b6 	bl	80110b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010f4c:	e099      	b.n	8011082 <HAL_UART_IRQHandler+0x50e>
 8010f4e:	bf00      	nop
 8010f50:	080112ef 	.word	0x080112ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	1ad3      	subs	r3, r2, r3
 8010f60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	f000 808b 	beq.w	8011086 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	f000 8086 	beq.w	8011086 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	330c      	adds	r3, #12
 8010f80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f84:	e853 3f00 	ldrex	r3, [r3]
 8010f88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010f90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	330c      	adds	r3, #12
 8010f9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010f9e:	647a      	str	r2, [r7, #68]	; 0x44
 8010fa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fa6:	e841 2300 	strex	r3, r2, [r1]
 8010faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d1e3      	bne.n	8010f7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	3314      	adds	r3, #20
 8010fb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbc:	e853 3f00 	ldrex	r3, [r3]
 8010fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8010fc2:	6a3b      	ldr	r3, [r7, #32]
 8010fc4:	f023 0301 	bic.w	r3, r3, #1
 8010fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	3314      	adds	r3, #20
 8010fd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010fd6:	633a      	str	r2, [r7, #48]	; 0x30
 8010fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fde:	e841 2300 	strex	r3, r2, [r1]
 8010fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d1e3      	bne.n	8010fb2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2220      	movs	r2, #32
 8010fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	330c      	adds	r3, #12
 8010ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	e853 3f00 	ldrex	r3, [r3]
 8011006:	60fb      	str	r3, [r7, #12]
   return(result);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f023 0310 	bic.w	r3, r3, #16
 801100e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	330c      	adds	r3, #12
 8011018:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801101c:	61fa      	str	r2, [r7, #28]
 801101e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011020:	69b9      	ldr	r1, [r7, #24]
 8011022:	69fa      	ldr	r2, [r7, #28]
 8011024:	e841 2300 	strex	r3, r2, [r1]
 8011028:	617b      	str	r3, [r7, #20]
   return(result);
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d1e3      	bne.n	8010ff8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011034:	4619      	mov	r1, r3
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 f83e 	bl	80110b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801103c:	e023      	b.n	8011086 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801103e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011046:	2b00      	cmp	r3, #0
 8011048:	d009      	beq.n	801105e <HAL_UART_IRQHandler+0x4ea>
 801104a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011052:	2b00      	cmp	r3, #0
 8011054:	d003      	beq.n	801105e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 f95d 	bl	8011316 <UART_Transmit_IT>
    return;
 801105c:	e014      	b.n	8011088 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801105e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011066:	2b00      	cmp	r3, #0
 8011068:	d00e      	beq.n	8011088 <HAL_UART_IRQHandler+0x514>
 801106a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801106e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011072:	2b00      	cmp	r3, #0
 8011074:	d008      	beq.n	8011088 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f000 f99d 	bl	80113b6 <UART_EndTransmit_IT>
    return;
 801107c:	e004      	b.n	8011088 <HAL_UART_IRQHandler+0x514>
    return;
 801107e:	bf00      	nop
 8011080:	e002      	b.n	8011088 <HAL_UART_IRQHandler+0x514>
      return;
 8011082:	bf00      	nop
 8011084:	e000      	b.n	8011088 <HAL_UART_IRQHandler+0x514>
      return;
 8011086:	bf00      	nop
  }
}
 8011088:	37e8      	adds	r7, #232	; 0xe8
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}
 801108e:	bf00      	nop

08011090 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011090:	b480      	push	{r7}
 8011092:	b083      	sub	sp, #12
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011098:	bf00      	nop
 801109a:	370c      	adds	r7, #12
 801109c:	46bd      	mov	sp, r7
 801109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a2:	4770      	bx	lr

080110a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b083      	sub	sp, #12
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80110ac:	bf00      	nop
 80110ae:	370c      	adds	r7, #12
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr

080110b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b083      	sub	sp, #12
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	460b      	mov	r3, r1
 80110c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80110c4:	bf00      	nop
 80110c6:	370c      	adds	r7, #12
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr

080110d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b090      	sub	sp, #64	; 0x40
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	60f8      	str	r0, [r7, #12]
 80110d8:	60b9      	str	r1, [r7, #8]
 80110da:	603b      	str	r3, [r7, #0]
 80110dc:	4613      	mov	r3, r2
 80110de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110e0:	e050      	b.n	8011184 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80110e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110e8:	d04c      	beq.n	8011184 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80110ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d007      	beq.n	8011100 <UART_WaitOnFlagUntilTimeout+0x30>
 80110f0:	f7fa fe5e 	bl	800bdb0 <HAL_GetTick>
 80110f4:	4602      	mov	r2, r0
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d241      	bcs.n	8011184 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	330c      	adds	r3, #12
 8011106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110a:	e853 3f00 	ldrex	r3, [r3]
 801110e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011112:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	330c      	adds	r3, #12
 801111e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011120:	637a      	str	r2, [r7, #52]	; 0x34
 8011122:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011128:	e841 2300 	strex	r3, r2, [r1]
 801112c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011130:	2b00      	cmp	r3, #0
 8011132:	d1e5      	bne.n	8011100 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	3314      	adds	r3, #20
 801113a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	e853 3f00 	ldrex	r3, [r3]
 8011142:	613b      	str	r3, [r7, #16]
   return(result);
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	f023 0301 	bic.w	r3, r3, #1
 801114a:	63bb      	str	r3, [r7, #56]	; 0x38
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	3314      	adds	r3, #20
 8011152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011154:	623a      	str	r2, [r7, #32]
 8011156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011158:	69f9      	ldr	r1, [r7, #28]
 801115a:	6a3a      	ldr	r2, [r7, #32]
 801115c:	e841 2300 	strex	r3, r2, [r1]
 8011160:	61bb      	str	r3, [r7, #24]
   return(result);
 8011162:	69bb      	ldr	r3, [r7, #24]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1e5      	bne.n	8011134 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2220      	movs	r2, #32
 801116c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2220      	movs	r2, #32
 8011174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	2200      	movs	r2, #0
 801117c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8011180:	2303      	movs	r3, #3
 8011182:	e00f      	b.n	80111a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	4013      	ands	r3, r2
 801118e:	68ba      	ldr	r2, [r7, #8]
 8011190:	429a      	cmp	r2, r3
 8011192:	bf0c      	ite	eq
 8011194:	2301      	moveq	r3, #1
 8011196:	2300      	movne	r3, #0
 8011198:	b2db      	uxtb	r3, r3
 801119a:	461a      	mov	r2, r3
 801119c:	79fb      	ldrb	r3, [r7, #7]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d09f      	beq.n	80110e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80111a2:	2300      	movs	r3, #0
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3740      	adds	r7, #64	; 0x40
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	60b9      	str	r1, [r7, #8]
 80111b6:	4613      	mov	r3, r2
 80111b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	68ba      	ldr	r2, [r7, #8]
 80111be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	88fa      	ldrh	r2, [r7, #6]
 80111c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	88fa      	ldrh	r2, [r7, #6]
 80111ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2200      	movs	r2, #0
 80111d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2222      	movs	r2, #34	; 0x22
 80111d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2200      	movs	r2, #0
 80111de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	691b      	ldr	r3, [r3, #16]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d007      	beq.n	80111fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	68da      	ldr	r2, [r3, #12]
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80111f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	695a      	ldr	r2, [r3, #20]
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	f042 0201 	orr.w	r2, r2, #1
 8011208:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68da      	ldr	r2, [r3, #12]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f042 0220 	orr.w	r2, r2, #32
 8011218:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801121a:	2300      	movs	r3, #0
}
 801121c:	4618      	mov	r0, r3
 801121e:	3714      	adds	r7, #20
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr

08011228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011228:	b480      	push	{r7}
 801122a:	b095      	sub	sp, #84	; 0x54
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	330c      	adds	r3, #12
 8011236:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801123a:	e853 3f00 	ldrex	r3, [r3]
 801123e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011242:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	330c      	adds	r3, #12
 801124e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011250:	643a      	str	r2, [r7, #64]	; 0x40
 8011252:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011254:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011258:	e841 2300 	strex	r3, r2, [r1]
 801125c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	2b00      	cmp	r3, #0
 8011262:	d1e5      	bne.n	8011230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	3314      	adds	r3, #20
 801126a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801126c:	6a3b      	ldr	r3, [r7, #32]
 801126e:	e853 3f00 	ldrex	r3, [r3]
 8011272:	61fb      	str	r3, [r7, #28]
   return(result);
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	f023 0301 	bic.w	r3, r3, #1
 801127a:	64bb      	str	r3, [r7, #72]	; 0x48
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	3314      	adds	r3, #20
 8011282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801128a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801128c:	e841 2300 	strex	r3, r2, [r1]
 8011290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011294:	2b00      	cmp	r3, #0
 8011296:	d1e5      	bne.n	8011264 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801129c:	2b01      	cmp	r3, #1
 801129e:	d119      	bne.n	80112d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	330c      	adds	r3, #12
 80112a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	e853 3f00 	ldrex	r3, [r3]
 80112ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	f023 0310 	bic.w	r3, r3, #16
 80112b6:	647b      	str	r3, [r7, #68]	; 0x44
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	330c      	adds	r3, #12
 80112be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112c0:	61ba      	str	r2, [r7, #24]
 80112c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112c4:	6979      	ldr	r1, [r7, #20]
 80112c6:	69ba      	ldr	r2, [r7, #24]
 80112c8:	e841 2300 	strex	r3, r2, [r1]
 80112cc:	613b      	str	r3, [r7, #16]
   return(result);
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1e5      	bne.n	80112a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2220      	movs	r2, #32
 80112d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2200      	movs	r2, #0
 80112e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80112e2:	bf00      	nop
 80112e4:	3754      	adds	r7, #84	; 0x54
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr

080112ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b084      	sub	sp, #16
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	2200      	movs	r2, #0
 8011300:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2200      	movs	r2, #0
 8011306:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	f7ff fecb 	bl	80110a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801130e:	bf00      	nop
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011316:	b480      	push	{r7}
 8011318:	b085      	sub	sp, #20
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011324:	b2db      	uxtb	r3, r3
 8011326:	2b21      	cmp	r3, #33	; 0x21
 8011328:	d13e      	bne.n	80113a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	689b      	ldr	r3, [r3, #8]
 801132e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011332:	d114      	bne.n	801135e <UART_Transmit_IT+0x48>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	691b      	ldr	r3, [r3, #16]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d110      	bne.n	801135e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6a1b      	ldr	r3, [r3, #32]
 8011340:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	881b      	ldrh	r3, [r3, #0]
 8011346:	461a      	mov	r2, r3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011350:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6a1b      	ldr	r3, [r3, #32]
 8011356:	1c9a      	adds	r2, r3, #2
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	621a      	str	r2, [r3, #32]
 801135c:	e008      	b.n	8011370 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6a1b      	ldr	r3, [r3, #32]
 8011362:	1c59      	adds	r1, r3, #1
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	6211      	str	r1, [r2, #32]
 8011368:	781a      	ldrb	r2, [r3, #0]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011374:	b29b      	uxth	r3, r3
 8011376:	3b01      	subs	r3, #1
 8011378:	b29b      	uxth	r3, r3
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	4619      	mov	r1, r3
 801137e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011380:	2b00      	cmp	r3, #0
 8011382:	d10f      	bne.n	80113a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	68da      	ldr	r2, [r3, #12]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011392:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	68da      	ldr	r2, [r3, #12]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80113a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80113a4:	2300      	movs	r3, #0
 80113a6:	e000      	b.n	80113aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80113a8:	2302      	movs	r3, #2
  }
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3714      	adds	r7, #20
 80113ae:	46bd      	mov	sp, r7
 80113b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b4:	4770      	bx	lr

080113b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80113b6:	b580      	push	{r7, lr}
 80113b8:	b082      	sub	sp, #8
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	68da      	ldr	r2, [r3, #12]
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80113cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2220      	movs	r2, #32
 80113d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f7ff fe5a 	bl	8011090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80113dc:	2300      	movs	r3, #0
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3708      	adds	r7, #8
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}

080113e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80113e6:	b580      	push	{r7, lr}
 80113e8:	b08c      	sub	sp, #48	; 0x30
 80113ea:	af00      	add	r7, sp, #0
 80113ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	2b22      	cmp	r3, #34	; 0x22
 80113f8:	f040 80ab 	bne.w	8011552 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011404:	d117      	bne.n	8011436 <UART_Receive_IT+0x50>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	691b      	ldr	r3, [r3, #16]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d113      	bne.n	8011436 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801140e:	2300      	movs	r3, #0
 8011410:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011416:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	b29b      	uxth	r3, r3
 8011420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011424:	b29a      	uxth	r2, r3
 8011426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011428:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801142e:	1c9a      	adds	r2, r3, #2
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	629a      	str	r2, [r3, #40]	; 0x28
 8011434:	e026      	b.n	8011484 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801143a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801143c:	2300      	movs	r3, #0
 801143e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	689b      	ldr	r3, [r3, #8]
 8011444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011448:	d007      	beq.n	801145a <UART_Receive_IT+0x74>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	689b      	ldr	r3, [r3, #8]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d10a      	bne.n	8011468 <UART_Receive_IT+0x82>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	691b      	ldr	r3, [r3, #16]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d106      	bne.n	8011468 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	b2da      	uxtb	r2, r3
 8011462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011464:	701a      	strb	r2, [r3, #0]
 8011466:	e008      	b.n	801147a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	b2db      	uxtb	r3, r3
 8011470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011474:	b2da      	uxtb	r2, r3
 8011476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011478:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801147e:	1c5a      	adds	r2, r3, #1
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011488:	b29b      	uxth	r3, r3
 801148a:	3b01      	subs	r3, #1
 801148c:	b29b      	uxth	r3, r3
 801148e:	687a      	ldr	r2, [r7, #4]
 8011490:	4619      	mov	r1, r3
 8011492:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011494:	2b00      	cmp	r3, #0
 8011496:	d15a      	bne.n	801154e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	68da      	ldr	r2, [r3, #12]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f022 0220 	bic.w	r2, r2, #32
 80114a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	68da      	ldr	r2, [r3, #12]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80114b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	695a      	ldr	r2, [r3, #20]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f022 0201 	bic.w	r2, r2, #1
 80114c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2220      	movs	r2, #32
 80114cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	d135      	bne.n	8011544 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2200      	movs	r2, #0
 80114dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	330c      	adds	r3, #12
 80114e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	e853 3f00 	ldrex	r3, [r3]
 80114ec:	613b      	str	r3, [r7, #16]
   return(result);
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	f023 0310 	bic.w	r3, r3, #16
 80114f4:	627b      	str	r3, [r7, #36]	; 0x24
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	330c      	adds	r3, #12
 80114fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114fe:	623a      	str	r2, [r7, #32]
 8011500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011502:	69f9      	ldr	r1, [r7, #28]
 8011504:	6a3a      	ldr	r2, [r7, #32]
 8011506:	e841 2300 	strex	r3, r2, [r1]
 801150a:	61bb      	str	r3, [r7, #24]
   return(result);
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1e5      	bne.n	80114de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f003 0310 	and.w	r3, r3, #16
 801151c:	2b10      	cmp	r3, #16
 801151e:	d10a      	bne.n	8011536 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011520:	2300      	movs	r3, #0
 8011522:	60fb      	str	r3, [r7, #12]
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	60fb      	str	r3, [r7, #12]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	60fb      	str	r3, [r7, #12]
 8011534:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801153a:	4619      	mov	r1, r3
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f7ff fdbb 	bl	80110b8 <HAL_UARTEx_RxEventCallback>
 8011542:	e002      	b.n	801154a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7f1 ff23 	bl	8003390 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801154a:	2300      	movs	r3, #0
 801154c:	e002      	b.n	8011554 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801154e:	2300      	movs	r3, #0
 8011550:	e000      	b.n	8011554 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8011552:	2302      	movs	r3, #2
  }
}
 8011554:	4618      	mov	r0, r3
 8011556:	3730      	adds	r7, #48	; 0x30
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801155c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011560:	b0c0      	sub	sp, #256	; 0x100
 8011562:	af00      	add	r7, sp, #0
 8011564:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	691b      	ldr	r3, [r3, #16]
 8011570:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011578:	68d9      	ldr	r1, [r3, #12]
 801157a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	ea40 0301 	orr.w	r3, r0, r1
 8011584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801158a:	689a      	ldr	r2, [r3, #8]
 801158c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011590:	691b      	ldr	r3, [r3, #16]
 8011592:	431a      	orrs	r2, r3
 8011594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011598:	695b      	ldr	r3, [r3, #20]
 801159a:	431a      	orrs	r2, r3
 801159c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115a0:	69db      	ldr	r3, [r3, #28]
 80115a2:	4313      	orrs	r3, r2
 80115a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80115a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80115b4:	f021 010c 	bic.w	r1, r1, #12
 80115b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80115c2:	430b      	orrs	r3, r1
 80115c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80115c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	695b      	ldr	r3, [r3, #20]
 80115ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80115d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115d6:	6999      	ldr	r1, [r3, #24]
 80115d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	ea40 0301 	orr.w	r3, r0, r1
 80115e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80115e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	4b8f      	ldr	r3, [pc, #572]	; (8011828 <UART_SetConfig+0x2cc>)
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d005      	beq.n	80115fc <UART_SetConfig+0xa0>
 80115f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80115f4:	681a      	ldr	r2, [r3, #0]
 80115f6:	4b8d      	ldr	r3, [pc, #564]	; (801182c <UART_SetConfig+0x2d0>)
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d104      	bne.n	8011606 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80115fc:	f7fe f81c 	bl	800f638 <HAL_RCC_GetPCLK2Freq>
 8011600:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8011604:	e003      	b.n	801160e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011606:	f7fe f803 	bl	800f610 <HAL_RCC_GetPCLK1Freq>
 801160a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801160e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011612:	69db      	ldr	r3, [r3, #28]
 8011614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011618:	f040 810c 	bne.w	8011834 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801161c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011620:	2200      	movs	r2, #0
 8011622:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011626:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801162a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801162e:	4622      	mov	r2, r4
 8011630:	462b      	mov	r3, r5
 8011632:	1891      	adds	r1, r2, r2
 8011634:	65b9      	str	r1, [r7, #88]	; 0x58
 8011636:	415b      	adcs	r3, r3
 8011638:	65fb      	str	r3, [r7, #92]	; 0x5c
 801163a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801163e:	4621      	mov	r1, r4
 8011640:	eb12 0801 	adds.w	r8, r2, r1
 8011644:	4629      	mov	r1, r5
 8011646:	eb43 0901 	adc.w	r9, r3, r1
 801164a:	f04f 0200 	mov.w	r2, #0
 801164e:	f04f 0300 	mov.w	r3, #0
 8011652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801165a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801165e:	4690      	mov	r8, r2
 8011660:	4699      	mov	r9, r3
 8011662:	4623      	mov	r3, r4
 8011664:	eb18 0303 	adds.w	r3, r8, r3
 8011668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801166c:	462b      	mov	r3, r5
 801166e:	eb49 0303 	adc.w	r3, r9, r3
 8011672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	2200      	movs	r2, #0
 801167e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011682:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8011686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801168a:	460b      	mov	r3, r1
 801168c:	18db      	adds	r3, r3, r3
 801168e:	653b      	str	r3, [r7, #80]	; 0x50
 8011690:	4613      	mov	r3, r2
 8011692:	eb42 0303 	adc.w	r3, r2, r3
 8011696:	657b      	str	r3, [r7, #84]	; 0x54
 8011698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801169c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80116a0:	f7ef fa9a 	bl	8000bd8 <__aeabi_uldivmod>
 80116a4:	4602      	mov	r2, r0
 80116a6:	460b      	mov	r3, r1
 80116a8:	4b61      	ldr	r3, [pc, #388]	; (8011830 <UART_SetConfig+0x2d4>)
 80116aa:	fba3 2302 	umull	r2, r3, r3, r2
 80116ae:	095b      	lsrs	r3, r3, #5
 80116b0:	011c      	lsls	r4, r3, #4
 80116b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80116b6:	2200      	movs	r2, #0
 80116b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80116bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80116c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80116c4:	4642      	mov	r2, r8
 80116c6:	464b      	mov	r3, r9
 80116c8:	1891      	adds	r1, r2, r2
 80116ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80116cc:	415b      	adcs	r3, r3
 80116ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80116d4:	4641      	mov	r1, r8
 80116d6:	eb12 0a01 	adds.w	sl, r2, r1
 80116da:	4649      	mov	r1, r9
 80116dc:	eb43 0b01 	adc.w	fp, r3, r1
 80116e0:	f04f 0200 	mov.w	r2, #0
 80116e4:	f04f 0300 	mov.w	r3, #0
 80116e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80116ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80116f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80116f4:	4692      	mov	sl, r2
 80116f6:	469b      	mov	fp, r3
 80116f8:	4643      	mov	r3, r8
 80116fa:	eb1a 0303 	adds.w	r3, sl, r3
 80116fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011702:	464b      	mov	r3, r9
 8011704:	eb4b 0303 	adc.w	r3, fp, r3
 8011708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801170c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	2200      	movs	r2, #0
 8011714:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011718:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801171c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8011720:	460b      	mov	r3, r1
 8011722:	18db      	adds	r3, r3, r3
 8011724:	643b      	str	r3, [r7, #64]	; 0x40
 8011726:	4613      	mov	r3, r2
 8011728:	eb42 0303 	adc.w	r3, r2, r3
 801172c:	647b      	str	r3, [r7, #68]	; 0x44
 801172e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011732:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011736:	f7ef fa4f 	bl	8000bd8 <__aeabi_uldivmod>
 801173a:	4602      	mov	r2, r0
 801173c:	460b      	mov	r3, r1
 801173e:	4611      	mov	r1, r2
 8011740:	4b3b      	ldr	r3, [pc, #236]	; (8011830 <UART_SetConfig+0x2d4>)
 8011742:	fba3 2301 	umull	r2, r3, r3, r1
 8011746:	095b      	lsrs	r3, r3, #5
 8011748:	2264      	movs	r2, #100	; 0x64
 801174a:	fb02 f303 	mul.w	r3, r2, r3
 801174e:	1acb      	subs	r3, r1, r3
 8011750:	00db      	lsls	r3, r3, #3
 8011752:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011756:	4b36      	ldr	r3, [pc, #216]	; (8011830 <UART_SetConfig+0x2d4>)
 8011758:	fba3 2302 	umull	r2, r3, r3, r2
 801175c:	095b      	lsrs	r3, r3, #5
 801175e:	005b      	lsls	r3, r3, #1
 8011760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011764:	441c      	add	r4, r3
 8011766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801176a:	2200      	movs	r2, #0
 801176c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011770:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8011774:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8011778:	4642      	mov	r2, r8
 801177a:	464b      	mov	r3, r9
 801177c:	1891      	adds	r1, r2, r2
 801177e:	63b9      	str	r1, [r7, #56]	; 0x38
 8011780:	415b      	adcs	r3, r3
 8011782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011788:	4641      	mov	r1, r8
 801178a:	1851      	adds	r1, r2, r1
 801178c:	6339      	str	r1, [r7, #48]	; 0x30
 801178e:	4649      	mov	r1, r9
 8011790:	414b      	adcs	r3, r1
 8011792:	637b      	str	r3, [r7, #52]	; 0x34
 8011794:	f04f 0200 	mov.w	r2, #0
 8011798:	f04f 0300 	mov.w	r3, #0
 801179c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80117a0:	4659      	mov	r1, fp
 80117a2:	00cb      	lsls	r3, r1, #3
 80117a4:	4651      	mov	r1, sl
 80117a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80117aa:	4651      	mov	r1, sl
 80117ac:	00ca      	lsls	r2, r1, #3
 80117ae:	4610      	mov	r0, r2
 80117b0:	4619      	mov	r1, r3
 80117b2:	4603      	mov	r3, r0
 80117b4:	4642      	mov	r2, r8
 80117b6:	189b      	adds	r3, r3, r2
 80117b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80117bc:	464b      	mov	r3, r9
 80117be:	460a      	mov	r2, r1
 80117c0:	eb42 0303 	adc.w	r3, r2, r3
 80117c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80117c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	2200      	movs	r2, #0
 80117d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80117d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80117d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80117dc:	460b      	mov	r3, r1
 80117de:	18db      	adds	r3, r3, r3
 80117e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80117e2:	4613      	mov	r3, r2
 80117e4:	eb42 0303 	adc.w	r3, r2, r3
 80117e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80117ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80117f2:	f7ef f9f1 	bl	8000bd8 <__aeabi_uldivmod>
 80117f6:	4602      	mov	r2, r0
 80117f8:	460b      	mov	r3, r1
 80117fa:	4b0d      	ldr	r3, [pc, #52]	; (8011830 <UART_SetConfig+0x2d4>)
 80117fc:	fba3 1302 	umull	r1, r3, r3, r2
 8011800:	095b      	lsrs	r3, r3, #5
 8011802:	2164      	movs	r1, #100	; 0x64
 8011804:	fb01 f303 	mul.w	r3, r1, r3
 8011808:	1ad3      	subs	r3, r2, r3
 801180a:	00db      	lsls	r3, r3, #3
 801180c:	3332      	adds	r3, #50	; 0x32
 801180e:	4a08      	ldr	r2, [pc, #32]	; (8011830 <UART_SetConfig+0x2d4>)
 8011810:	fba2 2303 	umull	r2, r3, r2, r3
 8011814:	095b      	lsrs	r3, r3, #5
 8011816:	f003 0207 	and.w	r2, r3, #7
 801181a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	4422      	add	r2, r4
 8011822:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011824:	e105      	b.n	8011a32 <UART_SetConfig+0x4d6>
 8011826:	bf00      	nop
 8011828:	40011000 	.word	0x40011000
 801182c:	40011400 	.word	0x40011400
 8011830:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011838:	2200      	movs	r2, #0
 801183a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801183e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8011842:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8011846:	4642      	mov	r2, r8
 8011848:	464b      	mov	r3, r9
 801184a:	1891      	adds	r1, r2, r2
 801184c:	6239      	str	r1, [r7, #32]
 801184e:	415b      	adcs	r3, r3
 8011850:	627b      	str	r3, [r7, #36]	; 0x24
 8011852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011856:	4641      	mov	r1, r8
 8011858:	1854      	adds	r4, r2, r1
 801185a:	4649      	mov	r1, r9
 801185c:	eb43 0501 	adc.w	r5, r3, r1
 8011860:	f04f 0200 	mov.w	r2, #0
 8011864:	f04f 0300 	mov.w	r3, #0
 8011868:	00eb      	lsls	r3, r5, #3
 801186a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801186e:	00e2      	lsls	r2, r4, #3
 8011870:	4614      	mov	r4, r2
 8011872:	461d      	mov	r5, r3
 8011874:	4643      	mov	r3, r8
 8011876:	18e3      	adds	r3, r4, r3
 8011878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801187c:	464b      	mov	r3, r9
 801187e:	eb45 0303 	adc.w	r3, r5, r3
 8011882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	2200      	movs	r2, #0
 801188e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011896:	f04f 0200 	mov.w	r2, #0
 801189a:	f04f 0300 	mov.w	r3, #0
 801189e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80118a2:	4629      	mov	r1, r5
 80118a4:	008b      	lsls	r3, r1, #2
 80118a6:	4621      	mov	r1, r4
 80118a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80118ac:	4621      	mov	r1, r4
 80118ae:	008a      	lsls	r2, r1, #2
 80118b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80118b4:	f7ef f990 	bl	8000bd8 <__aeabi_uldivmod>
 80118b8:	4602      	mov	r2, r0
 80118ba:	460b      	mov	r3, r1
 80118bc:	4b60      	ldr	r3, [pc, #384]	; (8011a40 <UART_SetConfig+0x4e4>)
 80118be:	fba3 2302 	umull	r2, r3, r3, r2
 80118c2:	095b      	lsrs	r3, r3, #5
 80118c4:	011c      	lsls	r4, r3, #4
 80118c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80118ca:	2200      	movs	r2, #0
 80118cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80118d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80118d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80118d8:	4642      	mov	r2, r8
 80118da:	464b      	mov	r3, r9
 80118dc:	1891      	adds	r1, r2, r2
 80118de:	61b9      	str	r1, [r7, #24]
 80118e0:	415b      	adcs	r3, r3
 80118e2:	61fb      	str	r3, [r7, #28]
 80118e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80118e8:	4641      	mov	r1, r8
 80118ea:	1851      	adds	r1, r2, r1
 80118ec:	6139      	str	r1, [r7, #16]
 80118ee:	4649      	mov	r1, r9
 80118f0:	414b      	adcs	r3, r1
 80118f2:	617b      	str	r3, [r7, #20]
 80118f4:	f04f 0200 	mov.w	r2, #0
 80118f8:	f04f 0300 	mov.w	r3, #0
 80118fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011900:	4659      	mov	r1, fp
 8011902:	00cb      	lsls	r3, r1, #3
 8011904:	4651      	mov	r1, sl
 8011906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801190a:	4651      	mov	r1, sl
 801190c:	00ca      	lsls	r2, r1, #3
 801190e:	4610      	mov	r0, r2
 8011910:	4619      	mov	r1, r3
 8011912:	4603      	mov	r3, r0
 8011914:	4642      	mov	r2, r8
 8011916:	189b      	adds	r3, r3, r2
 8011918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801191c:	464b      	mov	r3, r9
 801191e:	460a      	mov	r2, r1
 8011920:	eb42 0303 	adc.w	r3, r2, r3
 8011924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	2200      	movs	r2, #0
 8011930:	67bb      	str	r3, [r7, #120]	; 0x78
 8011932:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011934:	f04f 0200 	mov.w	r2, #0
 8011938:	f04f 0300 	mov.w	r3, #0
 801193c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8011940:	4649      	mov	r1, r9
 8011942:	008b      	lsls	r3, r1, #2
 8011944:	4641      	mov	r1, r8
 8011946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801194a:	4641      	mov	r1, r8
 801194c:	008a      	lsls	r2, r1, #2
 801194e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011952:	f7ef f941 	bl	8000bd8 <__aeabi_uldivmod>
 8011956:	4602      	mov	r2, r0
 8011958:	460b      	mov	r3, r1
 801195a:	4b39      	ldr	r3, [pc, #228]	; (8011a40 <UART_SetConfig+0x4e4>)
 801195c:	fba3 1302 	umull	r1, r3, r3, r2
 8011960:	095b      	lsrs	r3, r3, #5
 8011962:	2164      	movs	r1, #100	; 0x64
 8011964:	fb01 f303 	mul.w	r3, r1, r3
 8011968:	1ad3      	subs	r3, r2, r3
 801196a:	011b      	lsls	r3, r3, #4
 801196c:	3332      	adds	r3, #50	; 0x32
 801196e:	4a34      	ldr	r2, [pc, #208]	; (8011a40 <UART_SetConfig+0x4e4>)
 8011970:	fba2 2303 	umull	r2, r3, r2, r3
 8011974:	095b      	lsrs	r3, r3, #5
 8011976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801197a:	441c      	add	r4, r3
 801197c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011980:	2200      	movs	r2, #0
 8011982:	673b      	str	r3, [r7, #112]	; 0x70
 8011984:	677a      	str	r2, [r7, #116]	; 0x74
 8011986:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801198a:	4642      	mov	r2, r8
 801198c:	464b      	mov	r3, r9
 801198e:	1891      	adds	r1, r2, r2
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	415b      	adcs	r3, r3
 8011994:	60fb      	str	r3, [r7, #12]
 8011996:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801199a:	4641      	mov	r1, r8
 801199c:	1851      	adds	r1, r2, r1
 801199e:	6039      	str	r1, [r7, #0]
 80119a0:	4649      	mov	r1, r9
 80119a2:	414b      	adcs	r3, r1
 80119a4:	607b      	str	r3, [r7, #4]
 80119a6:	f04f 0200 	mov.w	r2, #0
 80119aa:	f04f 0300 	mov.w	r3, #0
 80119ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80119b2:	4659      	mov	r1, fp
 80119b4:	00cb      	lsls	r3, r1, #3
 80119b6:	4651      	mov	r1, sl
 80119b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80119bc:	4651      	mov	r1, sl
 80119be:	00ca      	lsls	r2, r1, #3
 80119c0:	4610      	mov	r0, r2
 80119c2:	4619      	mov	r1, r3
 80119c4:	4603      	mov	r3, r0
 80119c6:	4642      	mov	r2, r8
 80119c8:	189b      	adds	r3, r3, r2
 80119ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80119cc:	464b      	mov	r3, r9
 80119ce:	460a      	mov	r2, r1
 80119d0:	eb42 0303 	adc.w	r3, r2, r3
 80119d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80119d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	2200      	movs	r2, #0
 80119de:	663b      	str	r3, [r7, #96]	; 0x60
 80119e0:	667a      	str	r2, [r7, #100]	; 0x64
 80119e2:	f04f 0200 	mov.w	r2, #0
 80119e6:	f04f 0300 	mov.w	r3, #0
 80119ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80119ee:	4649      	mov	r1, r9
 80119f0:	008b      	lsls	r3, r1, #2
 80119f2:	4641      	mov	r1, r8
 80119f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80119f8:	4641      	mov	r1, r8
 80119fa:	008a      	lsls	r2, r1, #2
 80119fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8011a00:	f7ef f8ea 	bl	8000bd8 <__aeabi_uldivmod>
 8011a04:	4602      	mov	r2, r0
 8011a06:	460b      	mov	r3, r1
 8011a08:	4b0d      	ldr	r3, [pc, #52]	; (8011a40 <UART_SetConfig+0x4e4>)
 8011a0a:	fba3 1302 	umull	r1, r3, r3, r2
 8011a0e:	095b      	lsrs	r3, r3, #5
 8011a10:	2164      	movs	r1, #100	; 0x64
 8011a12:	fb01 f303 	mul.w	r3, r1, r3
 8011a16:	1ad3      	subs	r3, r2, r3
 8011a18:	011b      	lsls	r3, r3, #4
 8011a1a:	3332      	adds	r3, #50	; 0x32
 8011a1c:	4a08      	ldr	r2, [pc, #32]	; (8011a40 <UART_SetConfig+0x4e4>)
 8011a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a22:	095b      	lsrs	r3, r3, #5
 8011a24:	f003 020f 	and.w	r2, r3, #15
 8011a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	4422      	add	r2, r4
 8011a30:	609a      	str	r2, [r3, #8]
}
 8011a32:	bf00      	nop
 8011a34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011a3e:	bf00      	nop
 8011a40:	51eb851f 	.word	0x51eb851f

08011a44 <__NVIC_SetPriority>:
{
 8011a44:	b480      	push	{r7}
 8011a46:	b083      	sub	sp, #12
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	6039      	str	r1, [r7, #0]
 8011a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	db0a      	blt.n	8011a6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	b2da      	uxtb	r2, r3
 8011a5c:	490c      	ldr	r1, [pc, #48]	; (8011a90 <__NVIC_SetPriority+0x4c>)
 8011a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a62:	0112      	lsls	r2, r2, #4
 8011a64:	b2d2      	uxtb	r2, r2
 8011a66:	440b      	add	r3, r1
 8011a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011a6c:	e00a      	b.n	8011a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	b2da      	uxtb	r2, r3
 8011a72:	4908      	ldr	r1, [pc, #32]	; (8011a94 <__NVIC_SetPriority+0x50>)
 8011a74:	79fb      	ldrb	r3, [r7, #7]
 8011a76:	f003 030f 	and.w	r3, r3, #15
 8011a7a:	3b04      	subs	r3, #4
 8011a7c:	0112      	lsls	r2, r2, #4
 8011a7e:	b2d2      	uxtb	r2, r2
 8011a80:	440b      	add	r3, r1
 8011a82:	761a      	strb	r2, [r3, #24]
}
 8011a84:	bf00      	nop
 8011a86:	370c      	adds	r7, #12
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr
 8011a90:	e000e100 	.word	0xe000e100
 8011a94:	e000ed00 	.word	0xe000ed00

08011a98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011a9c:	4b05      	ldr	r3, [pc, #20]	; (8011ab4 <SysTick_Handler+0x1c>)
 8011a9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011aa0:	f001 ffca 	bl	8013a38 <xTaskGetSchedulerState>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d001      	beq.n	8011aae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011aaa:	f002 fdb5 	bl	8014618 <xPortSysTickHandler>
  }
}
 8011aae:	bf00      	nop
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	e000e010 	.word	0xe000e010

08011ab8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011abc:	2100      	movs	r1, #0
 8011abe:	f06f 0004 	mvn.w	r0, #4
 8011ac2:	f7ff ffbf 	bl	8011a44 <__NVIC_SetPriority>
#endif
}
 8011ac6:	bf00      	nop
 8011ac8:	bd80      	pop	{r7, pc}
	...

08011acc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011acc:	b480      	push	{r7}
 8011ace:	b083      	sub	sp, #12
 8011ad0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ad2:	f3ef 8305 	mrs	r3, IPSR
 8011ad6:	603b      	str	r3, [r7, #0]
  return(result);
 8011ad8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d003      	beq.n	8011ae6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011ade:	f06f 0305 	mvn.w	r3, #5
 8011ae2:	607b      	str	r3, [r7, #4]
 8011ae4:	e00c      	b.n	8011b00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011ae6:	4b0a      	ldr	r3, [pc, #40]	; (8011b10 <osKernelInitialize+0x44>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d105      	bne.n	8011afa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011aee:	4b08      	ldr	r3, [pc, #32]	; (8011b10 <osKernelInitialize+0x44>)
 8011af0:	2201      	movs	r2, #1
 8011af2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011af4:	2300      	movs	r3, #0
 8011af6:	607b      	str	r3, [r7, #4]
 8011af8:	e002      	b.n	8011b00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011afa:	f04f 33ff 	mov.w	r3, #4294967295
 8011afe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011b00:	687b      	ldr	r3, [r7, #4]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	370c      	adds	r7, #12
 8011b06:	46bd      	mov	sp, r7
 8011b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop
 8011b10:	200023f0 	.word	0x200023f0

08011b14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b082      	sub	sp, #8
 8011b18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b1a:	f3ef 8305 	mrs	r3, IPSR
 8011b1e:	603b      	str	r3, [r7, #0]
  return(result);
 8011b20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d003      	beq.n	8011b2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8011b26:	f06f 0305 	mvn.w	r3, #5
 8011b2a:	607b      	str	r3, [r7, #4]
 8011b2c:	e010      	b.n	8011b50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011b2e:	4b0b      	ldr	r3, [pc, #44]	; (8011b5c <osKernelStart+0x48>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	2b01      	cmp	r3, #1
 8011b34:	d109      	bne.n	8011b4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011b36:	f7ff ffbf 	bl	8011ab8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011b3a:	4b08      	ldr	r3, [pc, #32]	; (8011b5c <osKernelStart+0x48>)
 8011b3c:	2202      	movs	r2, #2
 8011b3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011b40:	f001 fb32 	bl	80131a8 <vTaskStartScheduler>
      stat = osOK;
 8011b44:	2300      	movs	r3, #0
 8011b46:	607b      	str	r3, [r7, #4]
 8011b48:	e002      	b.n	8011b50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011b50:	687b      	ldr	r3, [r7, #4]
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3708      	adds	r7, #8
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	200023f0 	.word	0x200023f0

08011b60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b08e      	sub	sp, #56	; 0x38
 8011b64:	af04      	add	r7, sp, #16
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b70:	f3ef 8305 	mrs	r3, IPSR
 8011b74:	617b      	str	r3, [r7, #20]
  return(result);
 8011b76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d17e      	bne.n	8011c7a <osThreadNew+0x11a>
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d07b      	beq.n	8011c7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011b82:	2380      	movs	r3, #128	; 0x80
 8011b84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011b86:	2318      	movs	r3, #24
 8011b88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d045      	beq.n	8011c26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d002      	beq.n	8011ba8 <osThreadNew+0x48>
        name = attr->name;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	699b      	ldr	r3, [r3, #24]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d002      	beq.n	8011bb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	699b      	ldr	r3, [r3, #24]
 8011bb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011bb6:	69fb      	ldr	r3, [r7, #28]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d008      	beq.n	8011bce <osThreadNew+0x6e>
 8011bbc:	69fb      	ldr	r3, [r7, #28]
 8011bbe:	2b38      	cmp	r3, #56	; 0x38
 8011bc0:	d805      	bhi.n	8011bce <osThreadNew+0x6e>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	f003 0301 	and.w	r3, r3, #1
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d001      	beq.n	8011bd2 <osThreadNew+0x72>
        return (NULL);
 8011bce:	2300      	movs	r3, #0
 8011bd0:	e054      	b.n	8011c7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	695b      	ldr	r3, [r3, #20]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d003      	beq.n	8011be2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	695b      	ldr	r3, [r3, #20]
 8011bde:	089b      	lsrs	r3, r3, #2
 8011be0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	689b      	ldr	r3, [r3, #8]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d00e      	beq.n	8011c08 <osThreadNew+0xa8>
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	68db      	ldr	r3, [r3, #12]
 8011bee:	2b5b      	cmp	r3, #91	; 0x5b
 8011bf0:	d90a      	bls.n	8011c08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d006      	beq.n	8011c08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	695b      	ldr	r3, [r3, #20]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d002      	beq.n	8011c08 <osThreadNew+0xa8>
        mem = 1;
 8011c02:	2301      	movs	r3, #1
 8011c04:	61bb      	str	r3, [r7, #24]
 8011c06:	e010      	b.n	8011c2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	689b      	ldr	r3, [r3, #8]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10c      	bne.n	8011c2a <osThreadNew+0xca>
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d108      	bne.n	8011c2a <osThreadNew+0xca>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	691b      	ldr	r3, [r3, #16]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d104      	bne.n	8011c2a <osThreadNew+0xca>
          mem = 0;
 8011c20:	2300      	movs	r3, #0
 8011c22:	61bb      	str	r3, [r7, #24]
 8011c24:	e001      	b.n	8011c2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011c26:	2300      	movs	r3, #0
 8011c28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011c2a:	69bb      	ldr	r3, [r7, #24]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d110      	bne.n	8011c52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011c34:	687a      	ldr	r2, [r7, #4]
 8011c36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011c38:	9202      	str	r2, [sp, #8]
 8011c3a:	9301      	str	r3, [sp, #4]
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	9300      	str	r3, [sp, #0]
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	6a3a      	ldr	r2, [r7, #32]
 8011c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c46:	68f8      	ldr	r0, [r7, #12]
 8011c48:	f001 f8d8 	bl	8012dfc <xTaskCreateStatic>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	613b      	str	r3, [r7, #16]
 8011c50:	e013      	b.n	8011c7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d110      	bne.n	8011c7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011c58:	6a3b      	ldr	r3, [r7, #32]
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	f107 0310 	add.w	r3, r7, #16
 8011c60:	9301      	str	r3, [sp, #4]
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	9300      	str	r3, [sp, #0]
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c6a:	68f8      	ldr	r0, [r7, #12]
 8011c6c:	f001 f923 	bl	8012eb6 <xTaskCreate>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b01      	cmp	r3, #1
 8011c74:	d001      	beq.n	8011c7a <osThreadNew+0x11a>
            hTask = NULL;
 8011c76:	2300      	movs	r3, #0
 8011c78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011c7a:	693b      	ldr	r3, [r7, #16]
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3728      	adds	r7, #40	; 0x28
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c8c:	f3ef 8305 	mrs	r3, IPSR
 8011c90:	60bb      	str	r3, [r7, #8]
  return(result);
 8011c92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d003      	beq.n	8011ca0 <osDelay+0x1c>
    stat = osErrorISR;
 8011c98:	f06f 0305 	mvn.w	r3, #5
 8011c9c:	60fb      	str	r3, [r7, #12]
 8011c9e:	e007      	b.n	8011cb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d002      	beq.n	8011cb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f001 fa48 	bl	8013140 <vTaskDelay>
    }
  }

  return (stat);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b08a      	sub	sp, #40	; 0x28
 8011cbe:	af02      	add	r7, sp, #8
 8011cc0:	60f8      	str	r0, [r7, #12]
 8011cc2:	60b9      	str	r1, [r7, #8]
 8011cc4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cca:	f3ef 8305 	mrs	r3, IPSR
 8011cce:	613b      	str	r3, [r7, #16]
  return(result);
 8011cd0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d15f      	bne.n	8011d96 <osMessageQueueNew+0xdc>
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d05c      	beq.n	8011d96 <osMessageQueueNew+0xdc>
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d059      	beq.n	8011d96 <osMessageQueueNew+0xdc>
    mem = -1;
 8011ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ce6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d029      	beq.n	8011d42 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	689b      	ldr	r3, [r3, #8]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d012      	beq.n	8011d1c <osMessageQueueNew+0x62>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	68db      	ldr	r3, [r3, #12]
 8011cfa:	2b4f      	cmp	r3, #79	; 0x4f
 8011cfc:	d90e      	bls.n	8011d1c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d00a      	beq.n	8011d1c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	695a      	ldr	r2, [r3, #20]
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	68b9      	ldr	r1, [r7, #8]
 8011d0e:	fb01 f303 	mul.w	r3, r1, r3
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d302      	bcc.n	8011d1c <osMessageQueueNew+0x62>
        mem = 1;
 8011d16:	2301      	movs	r3, #1
 8011d18:	61bb      	str	r3, [r7, #24]
 8011d1a:	e014      	b.n	8011d46 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	689b      	ldr	r3, [r3, #8]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d110      	bne.n	8011d46 <osMessageQueueNew+0x8c>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d10c      	bne.n	8011d46 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d108      	bne.n	8011d46 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	695b      	ldr	r3, [r3, #20]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d104      	bne.n	8011d46 <osMessageQueueNew+0x8c>
          mem = 0;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	61bb      	str	r3, [r7, #24]
 8011d40:	e001      	b.n	8011d46 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011d46:	69bb      	ldr	r3, [r7, #24]
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	d10b      	bne.n	8011d64 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	691a      	ldr	r2, [r3, #16]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	2100      	movs	r1, #0
 8011d56:	9100      	str	r1, [sp, #0]
 8011d58:	68b9      	ldr	r1, [r7, #8]
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f000 fab0 	bl	80122c0 <xQueueGenericCreateStatic>
 8011d60:	61f8      	str	r0, [r7, #28]
 8011d62:	e008      	b.n	8011d76 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d105      	bne.n	8011d76 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	68b9      	ldr	r1, [r7, #8]
 8011d6e:	68f8      	ldr	r0, [r7, #12]
 8011d70:	f000 fb1e 	bl	80123b0 <xQueueGenericCreate>
 8011d74:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011d76:	69fb      	ldr	r3, [r7, #28]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00c      	beq.n	8011d96 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d003      	beq.n	8011d8a <osMessageQueueNew+0xd0>
        name = attr->name;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	617b      	str	r3, [r7, #20]
 8011d88:	e001      	b.n	8011d8e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011d8e:	6979      	ldr	r1, [r7, #20]
 8011d90:	69f8      	ldr	r0, [r7, #28]
 8011d92:	f000 ffd5 	bl	8012d40 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011d96:	69fb      	ldr	r3, [r7, #28]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3720      	adds	r7, #32
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b088      	sub	sp, #32
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	60f8      	str	r0, [r7, #12]
 8011da8:	60b9      	str	r1, [r7, #8]
 8011daa:	603b      	str	r3, [r7, #0]
 8011dac:	4613      	mov	r3, r2
 8011dae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011db4:	2300      	movs	r3, #0
 8011db6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011db8:	f3ef 8305 	mrs	r3, IPSR
 8011dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8011dbe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d028      	beq.n	8011e16 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d005      	beq.n	8011dd6 <osMessageQueuePut+0x36>
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d002      	beq.n	8011dd6 <osMessageQueuePut+0x36>
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d003      	beq.n	8011dde <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8011dd6:	f06f 0303 	mvn.w	r3, #3
 8011dda:	61fb      	str	r3, [r7, #28]
 8011ddc:	e038      	b.n	8011e50 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011dde:	2300      	movs	r3, #0
 8011de0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011de2:	f107 0210 	add.w	r2, r7, #16
 8011de6:	2300      	movs	r3, #0
 8011de8:	68b9      	ldr	r1, [r7, #8]
 8011dea:	69b8      	ldr	r0, [r7, #24]
 8011dec:	f000 fc3c 	bl	8012668 <xQueueGenericSendFromISR>
 8011df0:	4603      	mov	r3, r0
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d003      	beq.n	8011dfe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011df6:	f06f 0302 	mvn.w	r3, #2
 8011dfa:	61fb      	str	r3, [r7, #28]
 8011dfc:	e028      	b.n	8011e50 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d025      	beq.n	8011e50 <osMessageQueuePut+0xb0>
 8011e04:	4b15      	ldr	r3, [pc, #84]	; (8011e5c <osMessageQueuePut+0xbc>)
 8011e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e0a:	601a      	str	r2, [r3, #0]
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	f3bf 8f6f 	isb	sy
 8011e14:	e01c      	b.n	8011e50 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d002      	beq.n	8011e22 <osMessageQueuePut+0x82>
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d103      	bne.n	8011e2a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8011e22:	f06f 0303 	mvn.w	r3, #3
 8011e26:	61fb      	str	r3, [r7, #28]
 8011e28:	e012      	b.n	8011e50 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	683a      	ldr	r2, [r7, #0]
 8011e2e:	68b9      	ldr	r1, [r7, #8]
 8011e30:	69b8      	ldr	r0, [r7, #24]
 8011e32:	f000 fb1b 	bl	801246c <xQueueGenericSend>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d009      	beq.n	8011e50 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d003      	beq.n	8011e4a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011e42:	f06f 0301 	mvn.w	r3, #1
 8011e46:	61fb      	str	r3, [r7, #28]
 8011e48:	e002      	b.n	8011e50 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011e4a:	f06f 0302 	mvn.w	r3, #2
 8011e4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011e50:	69fb      	ldr	r3, [r7, #28]
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3720      	adds	r7, #32
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}
 8011e5a:	bf00      	nop
 8011e5c:	e000ed04 	.word	0xe000ed04

08011e60 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b088      	sub	sp, #32
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	60f8      	str	r0, [r7, #12]
 8011e68:	60b9      	str	r1, [r7, #8]
 8011e6a:	607a      	str	r2, [r7, #4]
 8011e6c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011e72:	2300      	movs	r3, #0
 8011e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e76:	f3ef 8305 	mrs	r3, IPSR
 8011e7a:	617b      	str	r3, [r7, #20]
  return(result);
 8011e7c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d028      	beq.n	8011ed4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011e82:	69bb      	ldr	r3, [r7, #24]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d005      	beq.n	8011e94 <osMessageQueueGet+0x34>
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d002      	beq.n	8011e94 <osMessageQueueGet+0x34>
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d003      	beq.n	8011e9c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011e94:	f06f 0303 	mvn.w	r3, #3
 8011e98:	61fb      	str	r3, [r7, #28]
 8011e9a:	e037      	b.n	8011f0c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011ea0:	f107 0310 	add.w	r3, r7, #16
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	68b9      	ldr	r1, [r7, #8]
 8011ea8:	69b8      	ldr	r0, [r7, #24]
 8011eaa:	f000 fd59 	bl	8012960 <xQueueReceiveFromISR>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d003      	beq.n	8011ebc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011eb4:	f06f 0302 	mvn.w	r3, #2
 8011eb8:	61fb      	str	r3, [r7, #28]
 8011eba:	e027      	b.n	8011f0c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d024      	beq.n	8011f0c <osMessageQueueGet+0xac>
 8011ec2:	4b15      	ldr	r3, [pc, #84]	; (8011f18 <osMessageQueueGet+0xb8>)
 8011ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ec8:	601a      	str	r2, [r3, #0]
 8011eca:	f3bf 8f4f 	dsb	sy
 8011ece:	f3bf 8f6f 	isb	sy
 8011ed2:	e01b      	b.n	8011f0c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d002      	beq.n	8011ee0 <osMessageQueueGet+0x80>
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d103      	bne.n	8011ee8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011ee0:	f06f 0303 	mvn.w	r3, #3
 8011ee4:	61fb      	str	r3, [r7, #28]
 8011ee6:	e011      	b.n	8011f0c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011ee8:	683a      	ldr	r2, [r7, #0]
 8011eea:	68b9      	ldr	r1, [r7, #8]
 8011eec:	69b8      	ldr	r0, [r7, #24]
 8011eee:	f000 fc57 	bl	80127a0 <xQueueReceive>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	d009      	beq.n	8011f0c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d003      	beq.n	8011f06 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011efe:	f06f 0301 	mvn.w	r3, #1
 8011f02:	61fb      	str	r3, [r7, #28]
 8011f04:	e002      	b.n	8011f0c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8011f06:	f06f 0302 	mvn.w	r3, #2
 8011f0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011f0c:	69fb      	ldr	r3, [r7, #28]
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3720      	adds	r7, #32
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	e000ed04 	.word	0xe000ed04

08011f1c <osMessageQueueGetCapacity>:

uint32_t osMessageQueueGetCapacity (osMessageQueueId_t mq_id) {
 8011f1c:	b480      	push	{r7}
 8011f1e:	b085      	sub	sp, #20
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	60bb      	str	r3, [r7, #8]
  uint32_t capacity;

  if (mq == NULL) {
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d102      	bne.n	8011f34 <osMessageQueueGetCapacity+0x18>
    capacity = 0U;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	60fb      	str	r3, [r7, #12]
 8011f32:	e002      	b.n	8011f3a <osMessageQueueGetCapacity+0x1e>
  } else {
    /* capacity = pxQueue->uxLength */
    capacity = mq->uxDummy4[1];
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f38:	60fb      	str	r3, [r7, #12]
  }

  return (capacity);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3714      	adds	r7, #20
 8011f40:	46bd      	mov	sp, r7
 8011f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f46:	4770      	bx	lr

08011f48 <osMessageQueueGetMsgSize>:

uint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id) {
 8011f48:	b480      	push	{r7}
 8011f4a:	b085      	sub	sp, #20
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	60bb      	str	r3, [r7, #8]
  uint32_t size;

  if (mq == NULL) {
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d102      	bne.n	8011f60 <osMessageQueueGetMsgSize+0x18>
    size = 0U;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	60fb      	str	r3, [r7, #12]
 8011f5e:	e002      	b.n	8011f66 <osMessageQueueGetMsgSize+0x1e>
  } else {
    /* size = pxQueue->uxItemSize */
    size = mq->uxDummy4[2];
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f64:	60fb      	str	r3, [r7, #12]
  }

  return (size);
 8011f66:	68fb      	ldr	r3, [r7, #12]
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3714      	adds	r7, #20
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr

08011f74 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b086      	sub	sp, #24
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d102      	bne.n	8011f8c <osMessageQueueGetCount+0x18>
    count = 0U;
 8011f86:	2300      	movs	r3, #0
 8011f88:	617b      	str	r3, [r7, #20]
 8011f8a:	e00e      	b.n	8011faa <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f8c:	f3ef 8305 	mrs	r3, IPSR
 8011f90:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f92:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d004      	beq.n	8011fa2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8011f98:	6938      	ldr	r0, [r7, #16]
 8011f9a:	f000 fda2 	bl	8012ae2 <uxQueueMessagesWaitingFromISR>
 8011f9e:	6178      	str	r0, [r7, #20]
 8011fa0:	e003      	b.n	8011faa <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8011fa2:	6938      	ldr	r0, [r7, #16]
 8011fa4:	f000 fd5c 	bl	8012a60 <uxQueueMessagesWaiting>
 8011fa8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8011faa:	697b      	ldr	r3, [r7, #20]
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3718      	adds	r7, #24
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b08a      	sub	sp, #40	; 0x28
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8011fc0:	6a3b      	ldr	r3, [r7, #32]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d102      	bne.n	8011fcc <osMessageQueueGetSpace+0x18>
    space = 0U;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8011fca:	e023      	b.n	8012014 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011fcc:	f3ef 8305 	mrs	r3, IPSR
 8011fd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8011fd2:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d019      	beq.n	801200c <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011fd8:	f3ef 8211 	mrs	r2, BASEPRI
 8011fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe0:	f383 8811 	msr	BASEPRI, r3
 8011fe4:	f3bf 8f6f 	isb	sy
 8011fe8:	f3bf 8f4f 	dsb	sy
 8011fec:	613a      	str	r2, [r7, #16]
 8011fee:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011ff0:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8011ff2:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8011ff4:	6a3b      	ldr	r3, [r7, #32]
 8011ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011ff8:	6a3b      	ldr	r3, [r7, #32]
 8011ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ffc:	1ad3      	subs	r3, r2, r3
 8011ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8012000:	69fb      	ldr	r3, [r7, #28]
 8012002:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801200a:	e003      	b.n	8012014 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 801200c:	6a38      	ldr	r0, [r7, #32]
 801200e:	f000 fd45 	bl	8012a9c <uxQueueSpacesAvailable>
 8012012:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return (space);
 8012014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012016:	4618      	mov	r0, r3
 8012018:	3728      	adds	r7, #40	; 0x28
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
	...

08012020 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012020:	b480      	push	{r7}
 8012022:	b085      	sub	sp, #20
 8012024:	af00      	add	r7, sp, #0
 8012026:	60f8      	str	r0, [r7, #12]
 8012028:	60b9      	str	r1, [r7, #8]
 801202a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	4a07      	ldr	r2, [pc, #28]	; (801204c <vApplicationGetIdleTaskMemory+0x2c>)
 8012030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	4a06      	ldr	r2, [pc, #24]	; (8012050 <vApplicationGetIdleTaskMemory+0x30>)
 8012036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2280      	movs	r2, #128	; 0x80
 801203c:	601a      	str	r2, [r3, #0]
}
 801203e:	bf00      	nop
 8012040:	3714      	adds	r7, #20
 8012042:	46bd      	mov	sp, r7
 8012044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	200023f4 	.word	0x200023f4
 8012050:	20002450 	.word	0x20002450

08012054 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012054:	b480      	push	{r7}
 8012056:	b085      	sub	sp, #20
 8012058:	af00      	add	r7, sp, #0
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	4a07      	ldr	r2, [pc, #28]	; (8012080 <vApplicationGetTimerTaskMemory+0x2c>)
 8012064:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	4a06      	ldr	r2, [pc, #24]	; (8012084 <vApplicationGetTimerTaskMemory+0x30>)
 801206a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012072:	601a      	str	r2, [r3, #0]
}
 8012074:	bf00      	nop
 8012076:	3714      	adds	r7, #20
 8012078:	46bd      	mov	sp, r7
 801207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207e:	4770      	bx	lr
 8012080:	20002650 	.word	0x20002650
 8012084:	200026ac 	.word	0x200026ac

08012088 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f103 0208 	add.w	r2, r3, #8
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f04f 32ff 	mov.w	r2, #4294967295
 80120a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f103 0208 	add.w	r2, r3, #8
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f103 0208 	add.w	r2, r3, #8
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2200      	movs	r2, #0
 80120ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80120bc:	bf00      	nop
 80120be:	370c      	adds	r7, #12
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2200      	movs	r2, #0
 80120d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80120d6:	bf00      	nop
 80120d8:	370c      	adds	r7, #12
 80120da:	46bd      	mov	sp, r7
 80120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e0:	4770      	bx	lr

080120e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80120e2:	b480      	push	{r7}
 80120e4:	b085      	sub	sp, #20
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
 80120ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	68fa      	ldr	r2, [r7, #12]
 80120f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	689a      	ldr	r2, [r3, #8]
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	689b      	ldr	r3, [r3, #8]
 8012104:	683a      	ldr	r2, [r7, #0]
 8012106:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	683a      	ldr	r2, [r7, #0]
 801210c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	1c5a      	adds	r2, r3, #1
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	601a      	str	r2, [r3, #0]
}
 801211e:	bf00      	nop
 8012120:	3714      	adds	r7, #20
 8012122:	46bd      	mov	sp, r7
 8012124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012128:	4770      	bx	lr

0801212a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801212a:	b480      	push	{r7}
 801212c:	b085      	sub	sp, #20
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
 8012132:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012140:	d103      	bne.n	801214a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	691b      	ldr	r3, [r3, #16]
 8012146:	60fb      	str	r3, [r7, #12]
 8012148:	e00c      	b.n	8012164 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	3308      	adds	r3, #8
 801214e:	60fb      	str	r3, [r7, #12]
 8012150:	e002      	b.n	8012158 <vListInsert+0x2e>
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	60fb      	str	r3, [r7, #12]
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	685b      	ldr	r3, [r3, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	68ba      	ldr	r2, [r7, #8]
 8012160:	429a      	cmp	r2, r3
 8012162:	d2f6      	bcs.n	8012152 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	685a      	ldr	r2, [r3, #4]
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	685b      	ldr	r3, [r3, #4]
 8012170:	683a      	ldr	r2, [r7, #0]
 8012172:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	68fa      	ldr	r2, [r7, #12]
 8012178:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	683a      	ldr	r2, [r7, #0]
 801217e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	1c5a      	adds	r2, r3, #1
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	601a      	str	r2, [r3, #0]
}
 8012190:	bf00      	nop
 8012192:	3714      	adds	r7, #20
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr

0801219c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801219c:	b480      	push	{r7}
 801219e:	b085      	sub	sp, #20
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	691b      	ldr	r3, [r3, #16]
 80121a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	687a      	ldr	r2, [r7, #4]
 80121b0:	6892      	ldr	r2, [r2, #8]
 80121b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	689b      	ldr	r3, [r3, #8]
 80121b8:	687a      	ldr	r2, [r7, #4]
 80121ba:	6852      	ldr	r2, [r2, #4]
 80121bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	687a      	ldr	r2, [r7, #4]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d103      	bne.n	80121d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	689a      	ldr	r2, [r3, #8]
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2200      	movs	r2, #0
 80121d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	1e5a      	subs	r2, r3, #1
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	681b      	ldr	r3, [r3, #0]
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3714      	adds	r7, #20
 80121e8:	46bd      	mov	sp, r7
 80121ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ee:	4770      	bx	lr

080121f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d10a      	bne.n	801221a <xQueueGenericReset+0x2a>
	__asm volatile
 8012204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012208:	f383 8811 	msr	BASEPRI, r3
 801220c:	f3bf 8f6f 	isb	sy
 8012210:	f3bf 8f4f 	dsb	sy
 8012214:	60bb      	str	r3, [r7, #8]
}
 8012216:	bf00      	nop
 8012218:	e7fe      	b.n	8012218 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801221a:	f002 f96b 	bl	80144f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012226:	68f9      	ldr	r1, [r7, #12]
 8012228:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801222a:	fb01 f303 	mul.w	r3, r1, r3
 801222e:	441a      	add	r2, r3
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2200      	movs	r2, #0
 8012238:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801224a:	3b01      	subs	r3, #1
 801224c:	68f9      	ldr	r1, [r7, #12]
 801224e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012250:	fb01 f303 	mul.w	r3, r1, r3
 8012254:	441a      	add	r2, r3
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	22ff      	movs	r2, #255	; 0xff
 801225e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	22ff      	movs	r2, #255	; 0xff
 8012266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d114      	bne.n	801229a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	691b      	ldr	r3, [r3, #16]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d01a      	beq.n	80122ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	3310      	adds	r3, #16
 801227c:	4618      	mov	r0, r3
 801227e:	f001 fa1d 	bl	80136bc <xTaskRemoveFromEventList>
 8012282:	4603      	mov	r3, r0
 8012284:	2b00      	cmp	r3, #0
 8012286:	d012      	beq.n	80122ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012288:	4b0c      	ldr	r3, [pc, #48]	; (80122bc <xQueueGenericReset+0xcc>)
 801228a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801228e:	601a      	str	r2, [r3, #0]
 8012290:	f3bf 8f4f 	dsb	sy
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	e009      	b.n	80122ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	3310      	adds	r3, #16
 801229e:	4618      	mov	r0, r3
 80122a0:	f7ff fef2 	bl	8012088 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	3324      	adds	r3, #36	; 0x24
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7ff feed 	bl	8012088 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80122ae:	f002 f951 	bl	8014554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80122b2:	2301      	movs	r3, #1
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3710      	adds	r7, #16
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	e000ed04 	.word	0xe000ed04

080122c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b08e      	sub	sp, #56	; 0x38
 80122c4:	af02      	add	r7, sp, #8
 80122c6:	60f8      	str	r0, [r7, #12]
 80122c8:	60b9      	str	r1, [r7, #8]
 80122ca:	607a      	str	r2, [r7, #4]
 80122cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d10a      	bne.n	80122ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80122d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d8:	f383 8811 	msr	BASEPRI, r3
 80122dc:	f3bf 8f6f 	isb	sy
 80122e0:	f3bf 8f4f 	dsb	sy
 80122e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80122e6:	bf00      	nop
 80122e8:	e7fe      	b.n	80122e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d10a      	bne.n	8012306 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012302:	bf00      	nop
 8012304:	e7fe      	b.n	8012304 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d002      	beq.n	8012312 <xQueueGenericCreateStatic+0x52>
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d001      	beq.n	8012316 <xQueueGenericCreateStatic+0x56>
 8012312:	2301      	movs	r3, #1
 8012314:	e000      	b.n	8012318 <xQueueGenericCreateStatic+0x58>
 8012316:	2300      	movs	r3, #0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d10a      	bne.n	8012332 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012320:	f383 8811 	msr	BASEPRI, r3
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	f3bf 8f4f 	dsb	sy
 801232c:	623b      	str	r3, [r7, #32]
}
 801232e:	bf00      	nop
 8012330:	e7fe      	b.n	8012330 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d102      	bne.n	801233e <xQueueGenericCreateStatic+0x7e>
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d101      	bne.n	8012342 <xQueueGenericCreateStatic+0x82>
 801233e:	2301      	movs	r3, #1
 8012340:	e000      	b.n	8012344 <xQueueGenericCreateStatic+0x84>
 8012342:	2300      	movs	r3, #0
 8012344:	2b00      	cmp	r3, #0
 8012346:	d10a      	bne.n	801235e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234c:	f383 8811 	msr	BASEPRI, r3
 8012350:	f3bf 8f6f 	isb	sy
 8012354:	f3bf 8f4f 	dsb	sy
 8012358:	61fb      	str	r3, [r7, #28]
}
 801235a:	bf00      	nop
 801235c:	e7fe      	b.n	801235c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801235e:	2350      	movs	r3, #80	; 0x50
 8012360:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	2b50      	cmp	r3, #80	; 0x50
 8012366:	d00a      	beq.n	801237e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801236c:	f383 8811 	msr	BASEPRI, r3
 8012370:	f3bf 8f6f 	isb	sy
 8012374:	f3bf 8f4f 	dsb	sy
 8012378:	61bb      	str	r3, [r7, #24]
}
 801237a:	bf00      	nop
 801237c:	e7fe      	b.n	801237c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801237e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012386:	2b00      	cmp	r3, #0
 8012388:	d00d      	beq.n	80123a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238c:	2201      	movs	r2, #1
 801238e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012392:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012398:	9300      	str	r3, [sp, #0]
 801239a:	4613      	mov	r3, r2
 801239c:	687a      	ldr	r2, [r7, #4]
 801239e:	68b9      	ldr	r1, [r7, #8]
 80123a0:	68f8      	ldr	r0, [r7, #12]
 80123a2:	f000 f83f 	bl	8012424 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80123a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3730      	adds	r7, #48	; 0x30
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}

080123b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b08a      	sub	sp, #40	; 0x28
 80123b4:	af02      	add	r7, sp, #8
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	4613      	mov	r3, r2
 80123bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d10a      	bne.n	80123da <xQueueGenericCreate+0x2a>
	__asm volatile
 80123c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c8:	f383 8811 	msr	BASEPRI, r3
 80123cc:	f3bf 8f6f 	isb	sy
 80123d0:	f3bf 8f4f 	dsb	sy
 80123d4:	613b      	str	r3, [r7, #16]
}
 80123d6:	bf00      	nop
 80123d8:	e7fe      	b.n	80123d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	68ba      	ldr	r2, [r7, #8]
 80123de:	fb02 f303 	mul.w	r3, r2, r3
 80123e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	3350      	adds	r3, #80	; 0x50
 80123e8:	4618      	mov	r0, r3
 80123ea:	f002 f9a5 	bl	8014738 <pvPortMalloc>
 80123ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80123f0:	69bb      	ldr	r3, [r7, #24]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d011      	beq.n	801241a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	3350      	adds	r3, #80	; 0x50
 80123fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	2200      	movs	r2, #0
 8012404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012408:	79fa      	ldrb	r2, [r7, #7]
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	9300      	str	r3, [sp, #0]
 801240e:	4613      	mov	r3, r2
 8012410:	697a      	ldr	r2, [r7, #20]
 8012412:	68b9      	ldr	r1, [r7, #8]
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f000 f805 	bl	8012424 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801241a:	69bb      	ldr	r3, [r7, #24]
	}
 801241c:	4618      	mov	r0, r3
 801241e:	3720      	adds	r7, #32
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b084      	sub	sp, #16
 8012428:	af00      	add	r7, sp, #0
 801242a:	60f8      	str	r0, [r7, #12]
 801242c:	60b9      	str	r1, [r7, #8]
 801242e:	607a      	str	r2, [r7, #4]
 8012430:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d103      	bne.n	8012440 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012438:	69bb      	ldr	r3, [r7, #24]
 801243a:	69ba      	ldr	r2, [r7, #24]
 801243c:	601a      	str	r2, [r3, #0]
 801243e:	e002      	b.n	8012446 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012440:	69bb      	ldr	r3, [r7, #24]
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	68fa      	ldr	r2, [r7, #12]
 801244a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	68ba      	ldr	r2, [r7, #8]
 8012450:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012452:	2101      	movs	r1, #1
 8012454:	69b8      	ldr	r0, [r7, #24]
 8012456:	f7ff fecb 	bl	80121f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801245a:	69bb      	ldr	r3, [r7, #24]
 801245c:	78fa      	ldrb	r2, [r7, #3]
 801245e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012462:	bf00      	nop
 8012464:	3710      	adds	r7, #16
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
	...

0801246c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b08e      	sub	sp, #56	; 0x38
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]
 8012478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801247a:	2300      	movs	r3, #0
 801247c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012484:	2b00      	cmp	r3, #0
 8012486:	d10a      	bne.n	801249e <xQueueGenericSend+0x32>
	__asm volatile
 8012488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248c:	f383 8811 	msr	BASEPRI, r3
 8012490:	f3bf 8f6f 	isb	sy
 8012494:	f3bf 8f4f 	dsb	sy
 8012498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801249a:	bf00      	nop
 801249c:	e7fe      	b.n	801249c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801249e:	68bb      	ldr	r3, [r7, #8]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d103      	bne.n	80124ac <xQueueGenericSend+0x40>
 80124a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d101      	bne.n	80124b0 <xQueueGenericSend+0x44>
 80124ac:	2301      	movs	r3, #1
 80124ae:	e000      	b.n	80124b2 <xQueueGenericSend+0x46>
 80124b0:	2300      	movs	r3, #0
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d10a      	bne.n	80124cc <xQueueGenericSend+0x60>
	__asm volatile
 80124b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ba:	f383 8811 	msr	BASEPRI, r3
 80124be:	f3bf 8f6f 	isb	sy
 80124c2:	f3bf 8f4f 	dsb	sy
 80124c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80124c8:	bf00      	nop
 80124ca:	e7fe      	b.n	80124ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	2b02      	cmp	r3, #2
 80124d0:	d103      	bne.n	80124da <xQueueGenericSend+0x6e>
 80124d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124d6:	2b01      	cmp	r3, #1
 80124d8:	d101      	bne.n	80124de <xQueueGenericSend+0x72>
 80124da:	2301      	movs	r3, #1
 80124dc:	e000      	b.n	80124e0 <xQueueGenericSend+0x74>
 80124de:	2300      	movs	r3, #0
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d10a      	bne.n	80124fa <xQueueGenericSend+0x8e>
	__asm volatile
 80124e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e8:	f383 8811 	msr	BASEPRI, r3
 80124ec:	f3bf 8f6f 	isb	sy
 80124f0:	f3bf 8f4f 	dsb	sy
 80124f4:	623b      	str	r3, [r7, #32]
}
 80124f6:	bf00      	nop
 80124f8:	e7fe      	b.n	80124f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80124fa:	f001 fa9d 	bl	8013a38 <xTaskGetSchedulerState>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d102      	bne.n	801250a <xQueueGenericSend+0x9e>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d101      	bne.n	801250e <xQueueGenericSend+0xa2>
 801250a:	2301      	movs	r3, #1
 801250c:	e000      	b.n	8012510 <xQueueGenericSend+0xa4>
 801250e:	2300      	movs	r3, #0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d10a      	bne.n	801252a <xQueueGenericSend+0xbe>
	__asm volatile
 8012514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012518:	f383 8811 	msr	BASEPRI, r3
 801251c:	f3bf 8f6f 	isb	sy
 8012520:	f3bf 8f4f 	dsb	sy
 8012524:	61fb      	str	r3, [r7, #28]
}
 8012526:	bf00      	nop
 8012528:	e7fe      	b.n	8012528 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801252a:	f001 ffe3 	bl	80144f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012536:	429a      	cmp	r2, r3
 8012538:	d302      	bcc.n	8012540 <xQueueGenericSend+0xd4>
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	2b02      	cmp	r3, #2
 801253e:	d129      	bne.n	8012594 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012540:	683a      	ldr	r2, [r7, #0]
 8012542:	68b9      	ldr	r1, [r7, #8]
 8012544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012546:	f000 faea 	bl	8012b1e <prvCopyDataToQueue>
 801254a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012550:	2b00      	cmp	r3, #0
 8012552:	d010      	beq.n	8012576 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012556:	3324      	adds	r3, #36	; 0x24
 8012558:	4618      	mov	r0, r3
 801255a:	f001 f8af 	bl	80136bc <xTaskRemoveFromEventList>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d013      	beq.n	801258c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012564:	4b3f      	ldr	r3, [pc, #252]	; (8012664 <xQueueGenericSend+0x1f8>)
 8012566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801256a:	601a      	str	r2, [r3, #0]
 801256c:	f3bf 8f4f 	dsb	sy
 8012570:	f3bf 8f6f 	isb	sy
 8012574:	e00a      	b.n	801258c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012578:	2b00      	cmp	r3, #0
 801257a:	d007      	beq.n	801258c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801257c:	4b39      	ldr	r3, [pc, #228]	; (8012664 <xQueueGenericSend+0x1f8>)
 801257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012582:	601a      	str	r2, [r3, #0]
 8012584:	f3bf 8f4f 	dsb	sy
 8012588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801258c:	f001 ffe2 	bl	8014554 <vPortExitCritical>
				return pdPASS;
 8012590:	2301      	movs	r3, #1
 8012592:	e063      	b.n	801265c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d103      	bne.n	80125a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801259a:	f001 ffdb 	bl	8014554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801259e:	2300      	movs	r3, #0
 80125a0:	e05c      	b.n	801265c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80125a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d106      	bne.n	80125b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80125a8:	f107 0314 	add.w	r3, r7, #20
 80125ac:	4618      	mov	r0, r3
 80125ae:	f001 f8e9 	bl	8013784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80125b2:	2301      	movs	r3, #1
 80125b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80125b6:	f001 ffcd 	bl	8014554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80125ba:	f000 fe5b 	bl	8013274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80125be:	f001 ff99 	bl	80144f4 <vPortEnterCritical>
 80125c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80125c8:	b25b      	sxtb	r3, r3
 80125ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125ce:	d103      	bne.n	80125d8 <xQueueGenericSend+0x16c>
 80125d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d2:	2200      	movs	r2, #0
 80125d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80125d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125de:	b25b      	sxtb	r3, r3
 80125e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e4:	d103      	bne.n	80125ee <xQueueGenericSend+0x182>
 80125e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e8:	2200      	movs	r2, #0
 80125ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80125ee:	f001 ffb1 	bl	8014554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80125f2:	1d3a      	adds	r2, r7, #4
 80125f4:	f107 0314 	add.w	r3, r7, #20
 80125f8:	4611      	mov	r1, r2
 80125fa:	4618      	mov	r0, r3
 80125fc:	f001 f8d8 	bl	80137b0 <xTaskCheckForTimeOut>
 8012600:	4603      	mov	r3, r0
 8012602:	2b00      	cmp	r3, #0
 8012604:	d124      	bne.n	8012650 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012608:	f000 fb81 	bl	8012d0e <prvIsQueueFull>
 801260c:	4603      	mov	r3, r0
 801260e:	2b00      	cmp	r3, #0
 8012610:	d018      	beq.n	8012644 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012614:	3310      	adds	r3, #16
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	4611      	mov	r1, r2
 801261a:	4618      	mov	r0, r3
 801261c:	f000 fffe 	bl	801361c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012622:	f000 fb0c 	bl	8012c3e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012626:	f000 fe33 	bl	8013290 <xTaskResumeAll>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	f47f af7c 	bne.w	801252a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012632:	4b0c      	ldr	r3, [pc, #48]	; (8012664 <xQueueGenericSend+0x1f8>)
 8012634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012638:	601a      	str	r2, [r3, #0]
 801263a:	f3bf 8f4f 	dsb	sy
 801263e:	f3bf 8f6f 	isb	sy
 8012642:	e772      	b.n	801252a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012646:	f000 fafa 	bl	8012c3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801264a:	f000 fe21 	bl	8013290 <xTaskResumeAll>
 801264e:	e76c      	b.n	801252a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012652:	f000 faf4 	bl	8012c3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012656:	f000 fe1b 	bl	8013290 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801265a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801265c:	4618      	mov	r0, r3
 801265e:	3738      	adds	r7, #56	; 0x38
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	e000ed04 	.word	0xe000ed04

08012668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b090      	sub	sp, #64	; 0x40
 801266c:	af00      	add	r7, sp, #0
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	60b9      	str	r1, [r7, #8]
 8012672:	607a      	str	r2, [r7, #4]
 8012674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801267c:	2b00      	cmp	r3, #0
 801267e:	d10a      	bne.n	8012696 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012684:	f383 8811 	msr	BASEPRI, r3
 8012688:	f3bf 8f6f 	isb	sy
 801268c:	f3bf 8f4f 	dsb	sy
 8012690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012692:	bf00      	nop
 8012694:	e7fe      	b.n	8012694 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d103      	bne.n	80126a4 <xQueueGenericSendFromISR+0x3c>
 801269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d101      	bne.n	80126a8 <xQueueGenericSendFromISR+0x40>
 80126a4:	2301      	movs	r3, #1
 80126a6:	e000      	b.n	80126aa <xQueueGenericSendFromISR+0x42>
 80126a8:	2300      	movs	r3, #0
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d10a      	bne.n	80126c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80126ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b2:	f383 8811 	msr	BASEPRI, r3
 80126b6:	f3bf 8f6f 	isb	sy
 80126ba:	f3bf 8f4f 	dsb	sy
 80126be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80126c0:	bf00      	nop
 80126c2:	e7fe      	b.n	80126c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	2b02      	cmp	r3, #2
 80126c8:	d103      	bne.n	80126d2 <xQueueGenericSendFromISR+0x6a>
 80126ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126ce:	2b01      	cmp	r3, #1
 80126d0:	d101      	bne.n	80126d6 <xQueueGenericSendFromISR+0x6e>
 80126d2:	2301      	movs	r3, #1
 80126d4:	e000      	b.n	80126d8 <xQueueGenericSendFromISR+0x70>
 80126d6:	2300      	movs	r3, #0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d10a      	bne.n	80126f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80126dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e0:	f383 8811 	msr	BASEPRI, r3
 80126e4:	f3bf 8f6f 	isb	sy
 80126e8:	f3bf 8f4f 	dsb	sy
 80126ec:	623b      	str	r3, [r7, #32]
}
 80126ee:	bf00      	nop
 80126f0:	e7fe      	b.n	80126f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80126f2:	f001 ffe1 	bl	80146b8 <vPortValidateInterruptPriority>
	__asm volatile
 80126f6:	f3ef 8211 	mrs	r2, BASEPRI
 80126fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126fe:	f383 8811 	msr	BASEPRI, r3
 8012702:	f3bf 8f6f 	isb	sy
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	61fa      	str	r2, [r7, #28]
 801270c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801270e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012710:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801271a:	429a      	cmp	r2, r3
 801271c:	d302      	bcc.n	8012724 <xQueueGenericSendFromISR+0xbc>
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	2b02      	cmp	r3, #2
 8012722:	d12f      	bne.n	8012784 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801272a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012732:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012734:	683a      	ldr	r2, [r7, #0]
 8012736:	68b9      	ldr	r1, [r7, #8]
 8012738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801273a:	f000 f9f0 	bl	8012b1e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801273e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012746:	d112      	bne.n	801276e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801274c:	2b00      	cmp	r3, #0
 801274e:	d016      	beq.n	801277e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012752:	3324      	adds	r3, #36	; 0x24
 8012754:	4618      	mov	r0, r3
 8012756:	f000 ffb1 	bl	80136bc <xTaskRemoveFromEventList>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d00e      	beq.n	801277e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d00b      	beq.n	801277e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2201      	movs	r2, #1
 801276a:	601a      	str	r2, [r3, #0]
 801276c:	e007      	b.n	801277e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801276e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012772:	3301      	adds	r3, #1
 8012774:	b2db      	uxtb	r3, r3
 8012776:	b25a      	sxtb	r2, r3
 8012778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801277a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801277e:	2301      	movs	r3, #1
 8012780:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012782:	e001      	b.n	8012788 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012784:	2300      	movs	r3, #0
 8012786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801278a:	617b      	str	r3, [r7, #20]
	__asm volatile
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	f383 8811 	msr	BASEPRI, r3
}
 8012792:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012796:	4618      	mov	r0, r3
 8012798:	3740      	adds	r7, #64	; 0x40
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
	...

080127a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b08c      	sub	sp, #48	; 0x30
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60f8      	str	r0, [r7, #12]
 80127a8:	60b9      	str	r1, [r7, #8]
 80127aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80127ac:	2300      	movs	r3, #0
 80127ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80127b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d10a      	bne.n	80127d0 <xQueueReceive+0x30>
	__asm volatile
 80127ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127be:	f383 8811 	msr	BASEPRI, r3
 80127c2:	f3bf 8f6f 	isb	sy
 80127c6:	f3bf 8f4f 	dsb	sy
 80127ca:	623b      	str	r3, [r7, #32]
}
 80127cc:	bf00      	nop
 80127ce:	e7fe      	b.n	80127ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d103      	bne.n	80127de <xQueueReceive+0x3e>
 80127d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d101      	bne.n	80127e2 <xQueueReceive+0x42>
 80127de:	2301      	movs	r3, #1
 80127e0:	e000      	b.n	80127e4 <xQueueReceive+0x44>
 80127e2:	2300      	movs	r3, #0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d10a      	bne.n	80127fe <xQueueReceive+0x5e>
	__asm volatile
 80127e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ec:	f383 8811 	msr	BASEPRI, r3
 80127f0:	f3bf 8f6f 	isb	sy
 80127f4:	f3bf 8f4f 	dsb	sy
 80127f8:	61fb      	str	r3, [r7, #28]
}
 80127fa:	bf00      	nop
 80127fc:	e7fe      	b.n	80127fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80127fe:	f001 f91b 	bl	8013a38 <xTaskGetSchedulerState>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d102      	bne.n	801280e <xQueueReceive+0x6e>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d101      	bne.n	8012812 <xQueueReceive+0x72>
 801280e:	2301      	movs	r3, #1
 8012810:	e000      	b.n	8012814 <xQueueReceive+0x74>
 8012812:	2300      	movs	r3, #0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d10a      	bne.n	801282e <xQueueReceive+0x8e>
	__asm volatile
 8012818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801281c:	f383 8811 	msr	BASEPRI, r3
 8012820:	f3bf 8f6f 	isb	sy
 8012824:	f3bf 8f4f 	dsb	sy
 8012828:	61bb      	str	r3, [r7, #24]
}
 801282a:	bf00      	nop
 801282c:	e7fe      	b.n	801282c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801282e:	f001 fe61 	bl	80144f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012836:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283a:	2b00      	cmp	r3, #0
 801283c:	d01f      	beq.n	801287e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801283e:	68b9      	ldr	r1, [r7, #8]
 8012840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012842:	f000 f9d6 	bl	8012bf2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012848:	1e5a      	subs	r2, r3, #1
 801284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801284c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012850:	691b      	ldr	r3, [r3, #16]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d00f      	beq.n	8012876 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012858:	3310      	adds	r3, #16
 801285a:	4618      	mov	r0, r3
 801285c:	f000 ff2e 	bl	80136bc <xTaskRemoveFromEventList>
 8012860:	4603      	mov	r3, r0
 8012862:	2b00      	cmp	r3, #0
 8012864:	d007      	beq.n	8012876 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012866:	4b3d      	ldr	r3, [pc, #244]	; (801295c <xQueueReceive+0x1bc>)
 8012868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801286c:	601a      	str	r2, [r3, #0]
 801286e:	f3bf 8f4f 	dsb	sy
 8012872:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012876:	f001 fe6d 	bl	8014554 <vPortExitCritical>
				return pdPASS;
 801287a:	2301      	movs	r3, #1
 801287c:	e069      	b.n	8012952 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d103      	bne.n	801288c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012884:	f001 fe66 	bl	8014554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012888:	2300      	movs	r3, #0
 801288a:	e062      	b.n	8012952 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288e:	2b00      	cmp	r3, #0
 8012890:	d106      	bne.n	80128a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012892:	f107 0310 	add.w	r3, r7, #16
 8012896:	4618      	mov	r0, r3
 8012898:	f000 ff74 	bl	8013784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801289c:	2301      	movs	r3, #1
 801289e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80128a0:	f001 fe58 	bl	8014554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80128a4:	f000 fce6 	bl	8013274 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80128a8:	f001 fe24 	bl	80144f4 <vPortEnterCritical>
 80128ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128b2:	b25b      	sxtb	r3, r3
 80128b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128b8:	d103      	bne.n	80128c2 <xQueueReceive+0x122>
 80128ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128bc:	2200      	movs	r2, #0
 80128be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80128c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128c8:	b25b      	sxtb	r3, r3
 80128ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128ce:	d103      	bne.n	80128d8 <xQueueReceive+0x138>
 80128d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128d2:	2200      	movs	r2, #0
 80128d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80128d8:	f001 fe3c 	bl	8014554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80128dc:	1d3a      	adds	r2, r7, #4
 80128de:	f107 0310 	add.w	r3, r7, #16
 80128e2:	4611      	mov	r1, r2
 80128e4:	4618      	mov	r0, r3
 80128e6:	f000 ff63 	bl	80137b0 <xTaskCheckForTimeOut>
 80128ea:	4603      	mov	r3, r0
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d123      	bne.n	8012938 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80128f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128f2:	f000 f9f6 	bl	8012ce2 <prvIsQueueEmpty>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d017      	beq.n	801292c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80128fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128fe:	3324      	adds	r3, #36	; 0x24
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	4611      	mov	r1, r2
 8012904:	4618      	mov	r0, r3
 8012906:	f000 fe89 	bl	801361c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801290a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801290c:	f000 f997 	bl	8012c3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012910:	f000 fcbe 	bl	8013290 <xTaskResumeAll>
 8012914:	4603      	mov	r3, r0
 8012916:	2b00      	cmp	r3, #0
 8012918:	d189      	bne.n	801282e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801291a:	4b10      	ldr	r3, [pc, #64]	; (801295c <xQueueReceive+0x1bc>)
 801291c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012920:	601a      	str	r2, [r3, #0]
 8012922:	f3bf 8f4f 	dsb	sy
 8012926:	f3bf 8f6f 	isb	sy
 801292a:	e780      	b.n	801282e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801292c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801292e:	f000 f986 	bl	8012c3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012932:	f000 fcad 	bl	8013290 <xTaskResumeAll>
 8012936:	e77a      	b.n	801282e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801293a:	f000 f980 	bl	8012c3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801293e:	f000 fca7 	bl	8013290 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012944:	f000 f9cd 	bl	8012ce2 <prvIsQueueEmpty>
 8012948:	4603      	mov	r3, r0
 801294a:	2b00      	cmp	r3, #0
 801294c:	f43f af6f 	beq.w	801282e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012952:	4618      	mov	r0, r3
 8012954:	3730      	adds	r7, #48	; 0x30
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	e000ed04 	.word	0xe000ed04

08012960 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b08e      	sub	sp, #56	; 0x38
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012972:	2b00      	cmp	r3, #0
 8012974:	d10a      	bne.n	801298c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297a:	f383 8811 	msr	BASEPRI, r3
 801297e:	f3bf 8f6f 	isb	sy
 8012982:	f3bf 8f4f 	dsb	sy
 8012986:	623b      	str	r3, [r7, #32]
}
 8012988:	bf00      	nop
 801298a:	e7fe      	b.n	801298a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d103      	bne.n	801299a <xQueueReceiveFromISR+0x3a>
 8012992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012996:	2b00      	cmp	r3, #0
 8012998:	d101      	bne.n	801299e <xQueueReceiveFromISR+0x3e>
 801299a:	2301      	movs	r3, #1
 801299c:	e000      	b.n	80129a0 <xQueueReceiveFromISR+0x40>
 801299e:	2300      	movs	r3, #0
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d10a      	bne.n	80129ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80129a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a8:	f383 8811 	msr	BASEPRI, r3
 80129ac:	f3bf 8f6f 	isb	sy
 80129b0:	f3bf 8f4f 	dsb	sy
 80129b4:	61fb      	str	r3, [r7, #28]
}
 80129b6:	bf00      	nop
 80129b8:	e7fe      	b.n	80129b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80129ba:	f001 fe7d 	bl	80146b8 <vPortValidateInterruptPriority>
	__asm volatile
 80129be:	f3ef 8211 	mrs	r2, BASEPRI
 80129c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c6:	f383 8811 	msr	BASEPRI, r3
 80129ca:	f3bf 8f6f 	isb	sy
 80129ce:	f3bf 8f4f 	dsb	sy
 80129d2:	61ba      	str	r2, [r7, #24]
 80129d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80129d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80129d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80129da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80129e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d02f      	beq.n	8012a46 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80129e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80129ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80129f0:	68b9      	ldr	r1, [r7, #8]
 80129f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129f4:	f000 f8fd 	bl	8012bf2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80129f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fa:	1e5a      	subs	r2, r3, #1
 80129fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012a00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a08:	d112      	bne.n	8012a30 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0c:	691b      	ldr	r3, [r3, #16]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d016      	beq.n	8012a40 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a14:	3310      	adds	r3, #16
 8012a16:	4618      	mov	r0, r3
 8012a18:	f000 fe50 	bl	80136bc <xTaskRemoveFromEventList>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d00e      	beq.n	8012a40 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d00b      	beq.n	8012a40 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	601a      	str	r2, [r3, #0]
 8012a2e:	e007      	b.n	8012a40 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a34:	3301      	adds	r3, #1
 8012a36:	b2db      	uxtb	r3, r3
 8012a38:	b25a      	sxtb	r2, r3
 8012a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012a40:	2301      	movs	r3, #1
 8012a42:	637b      	str	r3, [r7, #52]	; 0x34
 8012a44:	e001      	b.n	8012a4a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012a46:	2300      	movs	r3, #0
 8012a48:	637b      	str	r3, [r7, #52]	; 0x34
 8012a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	f383 8811 	msr	BASEPRI, r3
}
 8012a54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3738      	adds	r7, #56	; 0x38
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b084      	sub	sp, #16
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d10a      	bne.n	8012a84 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8012a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a72:	f383 8811 	msr	BASEPRI, r3
 8012a76:	f3bf 8f6f 	isb	sy
 8012a7a:	f3bf 8f4f 	dsb	sy
 8012a7e:	60bb      	str	r3, [r7, #8]
}
 8012a80:	bf00      	nop
 8012a82:	e7fe      	b.n	8012a82 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8012a84:	f001 fd36 	bl	80144f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a8c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8012a8e:	f001 fd61 	bl	8014554 <vPortExitCritical>

	return uxReturn;
 8012a92:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012a94:	4618      	mov	r0, r3
 8012a96:	3710      	adds	r7, #16
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}

08012a9c <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b086      	sub	sp, #24
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d10a      	bne.n	8012ac4 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 8012aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab2:	f383 8811 	msr	BASEPRI, r3
 8012ab6:	f3bf 8f6f 	isb	sy
 8012aba:	f3bf 8f4f 	dsb	sy
 8012abe:	60fb      	str	r3, [r7, #12]
}
 8012ac0:	bf00      	nop
 8012ac2:	e7fe      	b.n	8012ac2 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8012ac4:	f001 fd16 	bl	80144f4 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8012ad4:	f001 fd3e 	bl	8014554 <vPortExitCritical>

	return uxReturn;
 8012ad8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012ada:	4618      	mov	r0, r3
 8012adc:	3718      	adds	r7, #24
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}

08012ae2 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8012ae2:	b480      	push	{r7}
 8012ae4:	b087      	sub	sp, #28
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012aee:	697b      	ldr	r3, [r7, #20]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d10a      	bne.n	8012b0a <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8012af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af8:	f383 8811 	msr	BASEPRI, r3
 8012afc:	f3bf 8f6f 	isb	sy
 8012b00:	f3bf 8f4f 	dsb	sy
 8012b04:	60fb      	str	r3, [r7, #12]
}
 8012b06:	bf00      	nop
 8012b08:	e7fe      	b.n	8012b08 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b0e:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8012b10:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012b12:	4618      	mov	r0, r3
 8012b14:	371c      	adds	r7, #28
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr

08012b1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b086      	sub	sp, #24
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	60f8      	str	r0, [r7, #12]
 8012b26:	60b9      	str	r1, [r7, #8]
 8012b28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d10d      	bne.n	8012b58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d14d      	bne.n	8012be0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	689b      	ldr	r3, [r3, #8]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f000 ff93 	bl	8013a74 <xTaskPriorityDisinherit>
 8012b4e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	2200      	movs	r2, #0
 8012b54:	609a      	str	r2, [r3, #8]
 8012b56:	e043      	b.n	8012be0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d119      	bne.n	8012b92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	6858      	ldr	r0, [r3, #4]
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b66:	461a      	mov	r2, r3
 8012b68:	68b9      	ldr	r1, [r7, #8]
 8012b6a:	f002 f81d 	bl	8014ba8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	685a      	ldr	r2, [r3, #4]
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b76:	441a      	add	r2, r3
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	685a      	ldr	r2, [r3, #4]
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	689b      	ldr	r3, [r3, #8]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d32b      	bcc.n	8012be0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	605a      	str	r2, [r3, #4]
 8012b90:	e026      	b.n	8012be0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	68d8      	ldr	r0, [r3, #12]
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	68b9      	ldr	r1, [r7, #8]
 8012b9e:	f002 f803 	bl	8014ba8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	68da      	ldr	r2, [r3, #12]
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012baa:	425b      	negs	r3, r3
 8012bac:	441a      	add	r2, r3
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	68da      	ldr	r2, [r3, #12]
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d207      	bcs.n	8012bce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	689a      	ldr	r2, [r3, #8]
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bc6:	425b      	negs	r3, r3
 8012bc8:	441a      	add	r2, r3
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2b02      	cmp	r3, #2
 8012bd2:	d105      	bne.n	8012be0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d002      	beq.n	8012be0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	3b01      	subs	r3, #1
 8012bde:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	1c5a      	adds	r2, r3, #1
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012be8:	697b      	ldr	r3, [r7, #20]
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3718      	adds	r7, #24
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}

08012bf2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b082      	sub	sp, #8
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
 8012bfa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d018      	beq.n	8012c36 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	68da      	ldr	r2, [r3, #12]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c0c:	441a      	add	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	68da      	ldr	r2, [r3, #12]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	689b      	ldr	r3, [r3, #8]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d303      	bcc.n	8012c26 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681a      	ldr	r2, [r3, #0]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	68d9      	ldr	r1, [r3, #12]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c2e:	461a      	mov	r2, r3
 8012c30:	6838      	ldr	r0, [r7, #0]
 8012c32:	f001 ffb9 	bl	8014ba8 <memcpy>
	}
}
 8012c36:	bf00      	nop
 8012c38:	3708      	adds	r7, #8
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}

08012c3e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012c3e:	b580      	push	{r7, lr}
 8012c40:	b084      	sub	sp, #16
 8012c42:	af00      	add	r7, sp, #0
 8012c44:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012c46:	f001 fc55 	bl	80144f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c50:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012c52:	e011      	b.n	8012c78 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d012      	beq.n	8012c82 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	3324      	adds	r3, #36	; 0x24
 8012c60:	4618      	mov	r0, r3
 8012c62:	f000 fd2b 	bl	80136bc <xTaskRemoveFromEventList>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d001      	beq.n	8012c70 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012c6c:	f000 fe02 	bl	8013874 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012c70:	7bfb      	ldrb	r3, [r7, #15]
 8012c72:	3b01      	subs	r3, #1
 8012c74:	b2db      	uxtb	r3, r3
 8012c76:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	dce9      	bgt.n	8012c54 <prvUnlockQueue+0x16>
 8012c80:	e000      	b.n	8012c84 <prvUnlockQueue+0x46>
					break;
 8012c82:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	22ff      	movs	r2, #255	; 0xff
 8012c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012c8c:	f001 fc62 	bl	8014554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012c90:	f001 fc30 	bl	80144f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c9a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012c9c:	e011      	b.n	8012cc2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	691b      	ldr	r3, [r3, #16]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d012      	beq.n	8012ccc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	3310      	adds	r3, #16
 8012caa:	4618      	mov	r0, r3
 8012cac:	f000 fd06 	bl	80136bc <xTaskRemoveFromEventList>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d001      	beq.n	8012cba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012cb6:	f000 fddd 	bl	8013874 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012cba:	7bbb      	ldrb	r3, [r7, #14]
 8012cbc:	3b01      	subs	r3, #1
 8012cbe:	b2db      	uxtb	r3, r3
 8012cc0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012cc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	dce9      	bgt.n	8012c9e <prvUnlockQueue+0x60>
 8012cca:	e000      	b.n	8012cce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012ccc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	22ff      	movs	r2, #255	; 0xff
 8012cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012cd6:	f001 fc3d 	bl	8014554 <vPortExitCritical>
}
 8012cda:	bf00      	nop
 8012cdc:	3710      	adds	r7, #16
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}

08012ce2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012ce2:	b580      	push	{r7, lr}
 8012ce4:	b084      	sub	sp, #16
 8012ce6:	af00      	add	r7, sp, #0
 8012ce8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012cea:	f001 fc03 	bl	80144f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d102      	bne.n	8012cfc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	60fb      	str	r3, [r7, #12]
 8012cfa:	e001      	b.n	8012d00 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012d00:	f001 fc28 	bl	8014554 <vPortExitCritical>

	return xReturn;
 8012d04:	68fb      	ldr	r3, [r7, #12]
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	3710      	adds	r7, #16
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}

08012d0e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012d0e:	b580      	push	{r7, lr}
 8012d10:	b084      	sub	sp, #16
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012d16:	f001 fbed 	bl	80144f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d102      	bne.n	8012d2c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012d26:	2301      	movs	r3, #1
 8012d28:	60fb      	str	r3, [r7, #12]
 8012d2a:	e001      	b.n	8012d30 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012d30:	f001 fc10 	bl	8014554 <vPortExitCritical>

	return xReturn;
 8012d34:	68fb      	ldr	r3, [r7, #12]
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3710      	adds	r7, #16
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}
	...

08012d40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012d40:	b480      	push	{r7}
 8012d42:	b085      	sub	sp, #20
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	60fb      	str	r3, [r7, #12]
 8012d4e:	e014      	b.n	8012d7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012d50:	4a0f      	ldr	r2, [pc, #60]	; (8012d90 <vQueueAddToRegistry+0x50>)
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d10b      	bne.n	8012d74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012d5c:	490c      	ldr	r1, [pc, #48]	; (8012d90 <vQueueAddToRegistry+0x50>)
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	683a      	ldr	r2, [r7, #0]
 8012d62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012d66:	4a0a      	ldr	r2, [pc, #40]	; (8012d90 <vQueueAddToRegistry+0x50>)
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	00db      	lsls	r3, r3, #3
 8012d6c:	4413      	add	r3, r2
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012d72:	e006      	b.n	8012d82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	3301      	adds	r3, #1
 8012d78:	60fb      	str	r3, [r7, #12]
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b07      	cmp	r3, #7
 8012d7e:	d9e7      	bls.n	8012d50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012d80:	bf00      	nop
 8012d82:	bf00      	nop
 8012d84:	3714      	adds	r7, #20
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr
 8012d8e:	bf00      	nop
 8012d90:	20002aac 	.word	0x20002aac

08012d94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b086      	sub	sp, #24
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	60f8      	str	r0, [r7, #12]
 8012d9c:	60b9      	str	r1, [r7, #8]
 8012d9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012da4:	f001 fba6 	bl	80144f4 <vPortEnterCritical>
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012dae:	b25b      	sxtb	r3, r3
 8012db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012db4:	d103      	bne.n	8012dbe <vQueueWaitForMessageRestricted+0x2a>
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	2200      	movs	r2, #0
 8012dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012dc4:	b25b      	sxtb	r3, r3
 8012dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dca:	d103      	bne.n	8012dd4 <vQueueWaitForMessageRestricted+0x40>
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	2200      	movs	r2, #0
 8012dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012dd4:	f001 fbbe 	bl	8014554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d106      	bne.n	8012dee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	3324      	adds	r3, #36	; 0x24
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	68b9      	ldr	r1, [r7, #8]
 8012de8:	4618      	mov	r0, r3
 8012dea:	f000 fc3b 	bl	8013664 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012dee:	6978      	ldr	r0, [r7, #20]
 8012df0:	f7ff ff25 	bl	8012c3e <prvUnlockQueue>
	}
 8012df4:	bf00      	nop
 8012df6:	3718      	adds	r7, #24
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b08e      	sub	sp, #56	; 0x38
 8012e00:	af04      	add	r7, sp, #16
 8012e02:	60f8      	str	r0, [r7, #12]
 8012e04:	60b9      	str	r1, [r7, #8]
 8012e06:	607a      	str	r2, [r7, #4]
 8012e08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d10a      	bne.n	8012e26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e14:	f383 8811 	msr	BASEPRI, r3
 8012e18:	f3bf 8f6f 	isb	sy
 8012e1c:	f3bf 8f4f 	dsb	sy
 8012e20:	623b      	str	r3, [r7, #32]
}
 8012e22:	bf00      	nop
 8012e24:	e7fe      	b.n	8012e24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d10a      	bne.n	8012e42 <xTaskCreateStatic+0x46>
	__asm volatile
 8012e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e30:	f383 8811 	msr	BASEPRI, r3
 8012e34:	f3bf 8f6f 	isb	sy
 8012e38:	f3bf 8f4f 	dsb	sy
 8012e3c:	61fb      	str	r3, [r7, #28]
}
 8012e3e:	bf00      	nop
 8012e40:	e7fe      	b.n	8012e40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012e42:	235c      	movs	r3, #92	; 0x5c
 8012e44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	2b5c      	cmp	r3, #92	; 0x5c
 8012e4a:	d00a      	beq.n	8012e62 <xTaskCreateStatic+0x66>
	__asm volatile
 8012e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e50:	f383 8811 	msr	BASEPRI, r3
 8012e54:	f3bf 8f6f 	isb	sy
 8012e58:	f3bf 8f4f 	dsb	sy
 8012e5c:	61bb      	str	r3, [r7, #24]
}
 8012e5e:	bf00      	nop
 8012e60:	e7fe      	b.n	8012e60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012e62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d01e      	beq.n	8012ea8 <xTaskCreateStatic+0xac>
 8012e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d01b      	beq.n	8012ea8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e7c:	2202      	movs	r2, #2
 8012e7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012e82:	2300      	movs	r3, #0
 8012e84:	9303      	str	r3, [sp, #12]
 8012e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e88:	9302      	str	r3, [sp, #8]
 8012e8a:	f107 0314 	add.w	r3, r7, #20
 8012e8e:	9301      	str	r3, [sp, #4]
 8012e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e92:	9300      	str	r3, [sp, #0]
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	687a      	ldr	r2, [r7, #4]
 8012e98:	68b9      	ldr	r1, [r7, #8]
 8012e9a:	68f8      	ldr	r0, [r7, #12]
 8012e9c:	f000 f850 	bl	8012f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ea2:	f000 f8dd 	bl	8013060 <prvAddNewTaskToReadyList>
 8012ea6:	e001      	b.n	8012eac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012eac:	697b      	ldr	r3, [r7, #20]
	}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3728      	adds	r7, #40	; 0x28
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}

08012eb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012eb6:	b580      	push	{r7, lr}
 8012eb8:	b08c      	sub	sp, #48	; 0x30
 8012eba:	af04      	add	r7, sp, #16
 8012ebc:	60f8      	str	r0, [r7, #12]
 8012ebe:	60b9      	str	r1, [r7, #8]
 8012ec0:	603b      	str	r3, [r7, #0]
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012ec6:	88fb      	ldrh	r3, [r7, #6]
 8012ec8:	009b      	lsls	r3, r3, #2
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f001 fc34 	bl	8014738 <pvPortMalloc>
 8012ed0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d00e      	beq.n	8012ef6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012ed8:	205c      	movs	r0, #92	; 0x5c
 8012eda:	f001 fc2d 	bl	8014738 <pvPortMalloc>
 8012ede:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d003      	beq.n	8012eee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012ee6:	69fb      	ldr	r3, [r7, #28]
 8012ee8:	697a      	ldr	r2, [r7, #20]
 8012eea:	631a      	str	r2, [r3, #48]	; 0x30
 8012eec:	e005      	b.n	8012efa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012eee:	6978      	ldr	r0, [r7, #20]
 8012ef0:	f001 fcee 	bl	80148d0 <vPortFree>
 8012ef4:	e001      	b.n	8012efa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012efa:	69fb      	ldr	r3, [r7, #28]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d017      	beq.n	8012f30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012f00:	69fb      	ldr	r3, [r7, #28]
 8012f02:	2200      	movs	r2, #0
 8012f04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012f08:	88fa      	ldrh	r2, [r7, #6]
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	9303      	str	r3, [sp, #12]
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	9302      	str	r3, [sp, #8]
 8012f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f14:	9301      	str	r3, [sp, #4]
 8012f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f18:	9300      	str	r3, [sp, #0]
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	68b9      	ldr	r1, [r7, #8]
 8012f1e:	68f8      	ldr	r0, [r7, #12]
 8012f20:	f000 f80e 	bl	8012f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012f24:	69f8      	ldr	r0, [r7, #28]
 8012f26:	f000 f89b 	bl	8013060 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	61bb      	str	r3, [r7, #24]
 8012f2e:	e002      	b.n	8012f36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012f30:	f04f 33ff 	mov.w	r3, #4294967295
 8012f34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012f36:	69bb      	ldr	r3, [r7, #24]
	}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3720      	adds	r7, #32
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b088      	sub	sp, #32
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	60f8      	str	r0, [r7, #12]
 8012f48:	60b9      	str	r1, [r7, #8]
 8012f4a:	607a      	str	r2, [r7, #4]
 8012f4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	009b      	lsls	r3, r3, #2
 8012f56:	461a      	mov	r2, r3
 8012f58:	21a5      	movs	r1, #165	; 0xa5
 8012f5a:	f001 fe33 	bl	8014bc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	009b      	lsls	r3, r3, #2
 8012f6c:	4413      	add	r3, r2
 8012f6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012f70:	69bb      	ldr	r3, [r7, #24]
 8012f72:	f023 0307 	bic.w	r3, r3, #7
 8012f76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012f78:	69bb      	ldr	r3, [r7, #24]
 8012f7a:	f003 0307 	and.w	r3, r3, #7
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d00a      	beq.n	8012f98 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f86:	f383 8811 	msr	BASEPRI, r3
 8012f8a:	f3bf 8f6f 	isb	sy
 8012f8e:	f3bf 8f4f 	dsb	sy
 8012f92:	617b      	str	r3, [r7, #20]
}
 8012f94:	bf00      	nop
 8012f96:	e7fe      	b.n	8012f96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d01f      	beq.n	8012fde <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	61fb      	str	r3, [r7, #28]
 8012fa2:	e012      	b.n	8012fca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012fa4:	68ba      	ldr	r2, [r7, #8]
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	4413      	add	r3, r2
 8012faa:	7819      	ldrb	r1, [r3, #0]
 8012fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	4413      	add	r3, r2
 8012fb2:	3334      	adds	r3, #52	; 0x34
 8012fb4:	460a      	mov	r2, r1
 8012fb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012fb8:	68ba      	ldr	r2, [r7, #8]
 8012fba:	69fb      	ldr	r3, [r7, #28]
 8012fbc:	4413      	add	r3, r2
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d006      	beq.n	8012fd2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012fc4:	69fb      	ldr	r3, [r7, #28]
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	61fb      	str	r3, [r7, #28]
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	2b0f      	cmp	r3, #15
 8012fce:	d9e9      	bls.n	8012fa4 <prvInitialiseNewTask+0x64>
 8012fd0:	e000      	b.n	8012fd4 <prvInitialiseNewTask+0x94>
			{
				break;
 8012fd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012fdc:	e003      	b.n	8012fe6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe8:	2b37      	cmp	r3, #55	; 0x37
 8012fea:	d901      	bls.n	8012ff0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012fec:	2337      	movs	r3, #55	; 0x37
 8012fee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ff4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ffa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ffe:	2200      	movs	r2, #0
 8013000:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013004:	3304      	adds	r3, #4
 8013006:	4618      	mov	r0, r3
 8013008:	f7ff f85e 	bl	80120c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300e:	3318      	adds	r3, #24
 8013010:	4618      	mov	r0, r3
 8013012:	f7ff f859 	bl	80120c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801301a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801301e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013024:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801302a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801302e:	2200      	movs	r2, #0
 8013030:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013034:	2200      	movs	r2, #0
 8013036:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801303a:	683a      	ldr	r2, [r7, #0]
 801303c:	68f9      	ldr	r1, [r7, #12]
 801303e:	69b8      	ldr	r0, [r7, #24]
 8013040:	f001 f928 	bl	8014294 <pxPortInitialiseStack>
 8013044:	4602      	mov	r2, r0
 8013046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013048:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801304c:	2b00      	cmp	r3, #0
 801304e:	d002      	beq.n	8013056 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013056:	bf00      	nop
 8013058:	3720      	adds	r7, #32
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}
	...

08013060 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013068:	f001 fa44 	bl	80144f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801306c:	4b2d      	ldr	r3, [pc, #180]	; (8013124 <prvAddNewTaskToReadyList+0xc4>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	3301      	adds	r3, #1
 8013072:	4a2c      	ldr	r2, [pc, #176]	; (8013124 <prvAddNewTaskToReadyList+0xc4>)
 8013074:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013076:	4b2c      	ldr	r3, [pc, #176]	; (8013128 <prvAddNewTaskToReadyList+0xc8>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d109      	bne.n	8013092 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801307e:	4a2a      	ldr	r2, [pc, #168]	; (8013128 <prvAddNewTaskToReadyList+0xc8>)
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013084:	4b27      	ldr	r3, [pc, #156]	; (8013124 <prvAddNewTaskToReadyList+0xc4>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	2b01      	cmp	r3, #1
 801308a:	d110      	bne.n	80130ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801308c:	f000 fc16 	bl	80138bc <prvInitialiseTaskLists>
 8013090:	e00d      	b.n	80130ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013092:	4b26      	ldr	r3, [pc, #152]	; (801312c <prvAddNewTaskToReadyList+0xcc>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d109      	bne.n	80130ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801309a:	4b23      	ldr	r3, [pc, #140]	; (8013128 <prvAddNewTaskToReadyList+0xc8>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d802      	bhi.n	80130ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80130a8:	4a1f      	ldr	r2, [pc, #124]	; (8013128 <prvAddNewTaskToReadyList+0xc8>)
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80130ae:	4b20      	ldr	r3, [pc, #128]	; (8013130 <prvAddNewTaskToReadyList+0xd0>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	3301      	adds	r3, #1
 80130b4:	4a1e      	ldr	r2, [pc, #120]	; (8013130 <prvAddNewTaskToReadyList+0xd0>)
 80130b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80130b8:	4b1d      	ldr	r3, [pc, #116]	; (8013130 <prvAddNewTaskToReadyList+0xd0>)
 80130ba:	681a      	ldr	r2, [r3, #0]
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130c4:	4b1b      	ldr	r3, [pc, #108]	; (8013134 <prvAddNewTaskToReadyList+0xd4>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d903      	bls.n	80130d4 <prvAddNewTaskToReadyList+0x74>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130d0:	4a18      	ldr	r2, [pc, #96]	; (8013134 <prvAddNewTaskToReadyList+0xd4>)
 80130d2:	6013      	str	r3, [r2, #0]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130d8:	4613      	mov	r3, r2
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	4413      	add	r3, r2
 80130de:	009b      	lsls	r3, r3, #2
 80130e0:	4a15      	ldr	r2, [pc, #84]	; (8013138 <prvAddNewTaskToReadyList+0xd8>)
 80130e2:	441a      	add	r2, r3
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	3304      	adds	r3, #4
 80130e8:	4619      	mov	r1, r3
 80130ea:	4610      	mov	r0, r2
 80130ec:	f7fe fff9 	bl	80120e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80130f0:	f001 fa30 	bl	8014554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80130f4:	4b0d      	ldr	r3, [pc, #52]	; (801312c <prvAddNewTaskToReadyList+0xcc>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d00e      	beq.n	801311a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80130fc:	4b0a      	ldr	r3, [pc, #40]	; (8013128 <prvAddNewTaskToReadyList+0xc8>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013106:	429a      	cmp	r2, r3
 8013108:	d207      	bcs.n	801311a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801310a:	4b0c      	ldr	r3, [pc, #48]	; (801313c <prvAddNewTaskToReadyList+0xdc>)
 801310c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013110:	601a      	str	r2, [r3, #0]
 8013112:	f3bf 8f4f 	dsb	sy
 8013116:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801311a:	bf00      	nop
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	20002fc0 	.word	0x20002fc0
 8013128:	20002aec 	.word	0x20002aec
 801312c:	20002fcc 	.word	0x20002fcc
 8013130:	20002fdc 	.word	0x20002fdc
 8013134:	20002fc8 	.word	0x20002fc8
 8013138:	20002af0 	.word	0x20002af0
 801313c:	e000ed04 	.word	0xe000ed04

08013140 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013140:	b580      	push	{r7, lr}
 8013142:	b084      	sub	sp, #16
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013148:	2300      	movs	r3, #0
 801314a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d017      	beq.n	8013182 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013152:	4b13      	ldr	r3, [pc, #76]	; (80131a0 <vTaskDelay+0x60>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d00a      	beq.n	8013170 <vTaskDelay+0x30>
	__asm volatile
 801315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801315e:	f383 8811 	msr	BASEPRI, r3
 8013162:	f3bf 8f6f 	isb	sy
 8013166:	f3bf 8f4f 	dsb	sy
 801316a:	60bb      	str	r3, [r7, #8]
}
 801316c:	bf00      	nop
 801316e:	e7fe      	b.n	801316e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013170:	f000 f880 	bl	8013274 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013174:	2100      	movs	r1, #0
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f000 fcea 	bl	8013b50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801317c:	f000 f888 	bl	8013290 <xTaskResumeAll>
 8013180:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d107      	bne.n	8013198 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013188:	4b06      	ldr	r3, [pc, #24]	; (80131a4 <vTaskDelay+0x64>)
 801318a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801318e:	601a      	str	r2, [r3, #0]
 8013190:	f3bf 8f4f 	dsb	sy
 8013194:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013198:	bf00      	nop
 801319a:	3710      	adds	r7, #16
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}
 80131a0:	20002fe8 	.word	0x20002fe8
 80131a4:	e000ed04 	.word	0xe000ed04

080131a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b08a      	sub	sp, #40	; 0x28
 80131ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80131ae:	2300      	movs	r3, #0
 80131b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80131b2:	2300      	movs	r3, #0
 80131b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80131b6:	463a      	mov	r2, r7
 80131b8:	1d39      	adds	r1, r7, #4
 80131ba:	f107 0308 	add.w	r3, r7, #8
 80131be:	4618      	mov	r0, r3
 80131c0:	f7fe ff2e 	bl	8012020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80131c4:	6839      	ldr	r1, [r7, #0]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	68ba      	ldr	r2, [r7, #8]
 80131ca:	9202      	str	r2, [sp, #8]
 80131cc:	9301      	str	r3, [sp, #4]
 80131ce:	2300      	movs	r3, #0
 80131d0:	9300      	str	r3, [sp, #0]
 80131d2:	2300      	movs	r3, #0
 80131d4:	460a      	mov	r2, r1
 80131d6:	4921      	ldr	r1, [pc, #132]	; (801325c <vTaskStartScheduler+0xb4>)
 80131d8:	4821      	ldr	r0, [pc, #132]	; (8013260 <vTaskStartScheduler+0xb8>)
 80131da:	f7ff fe0f 	bl	8012dfc <xTaskCreateStatic>
 80131de:	4603      	mov	r3, r0
 80131e0:	4a20      	ldr	r2, [pc, #128]	; (8013264 <vTaskStartScheduler+0xbc>)
 80131e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80131e4:	4b1f      	ldr	r3, [pc, #124]	; (8013264 <vTaskStartScheduler+0xbc>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d002      	beq.n	80131f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80131ec:	2301      	movs	r3, #1
 80131ee:	617b      	str	r3, [r7, #20]
 80131f0:	e001      	b.n	80131f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80131f2:	2300      	movs	r3, #0
 80131f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d102      	bne.n	8013202 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80131fc:	f000 fcfc 	bl	8013bf8 <xTimerCreateTimerTask>
 8013200:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	2b01      	cmp	r3, #1
 8013206:	d116      	bne.n	8013236 <vTaskStartScheduler+0x8e>
	__asm volatile
 8013208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801320c:	f383 8811 	msr	BASEPRI, r3
 8013210:	f3bf 8f6f 	isb	sy
 8013214:	f3bf 8f4f 	dsb	sy
 8013218:	613b      	str	r3, [r7, #16]
}
 801321a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801321c:	4b12      	ldr	r3, [pc, #72]	; (8013268 <vTaskStartScheduler+0xc0>)
 801321e:	f04f 32ff 	mov.w	r2, #4294967295
 8013222:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013224:	4b11      	ldr	r3, [pc, #68]	; (801326c <vTaskStartScheduler+0xc4>)
 8013226:	2201      	movs	r2, #1
 8013228:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801322a:	4b11      	ldr	r3, [pc, #68]	; (8013270 <vTaskStartScheduler+0xc8>)
 801322c:	2200      	movs	r2, #0
 801322e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013230:	f001 f8be 	bl	80143b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013234:	e00e      	b.n	8013254 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801323c:	d10a      	bne.n	8013254 <vTaskStartScheduler+0xac>
	__asm volatile
 801323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013242:	f383 8811 	msr	BASEPRI, r3
 8013246:	f3bf 8f6f 	isb	sy
 801324a:	f3bf 8f4f 	dsb	sy
 801324e:	60fb      	str	r3, [r7, #12]
}
 8013250:	bf00      	nop
 8013252:	e7fe      	b.n	8013252 <vTaskStartScheduler+0xaa>
}
 8013254:	bf00      	nop
 8013256:	3718      	adds	r7, #24
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}
 801325c:	08019e5c 	.word	0x08019e5c
 8013260:	0801388d 	.word	0x0801388d
 8013264:	20002fe4 	.word	0x20002fe4
 8013268:	20002fe0 	.word	0x20002fe0
 801326c:	20002fcc 	.word	0x20002fcc
 8013270:	20002fc4 	.word	0x20002fc4

08013274 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013274:	b480      	push	{r7}
 8013276:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013278:	4b04      	ldr	r3, [pc, #16]	; (801328c <vTaskSuspendAll+0x18>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	3301      	adds	r3, #1
 801327e:	4a03      	ldr	r2, [pc, #12]	; (801328c <vTaskSuspendAll+0x18>)
 8013280:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013282:	bf00      	nop
 8013284:	46bd      	mov	sp, r7
 8013286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328a:	4770      	bx	lr
 801328c:	20002fe8 	.word	0x20002fe8

08013290 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b084      	sub	sp, #16
 8013294:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013296:	2300      	movs	r3, #0
 8013298:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801329a:	2300      	movs	r3, #0
 801329c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801329e:	4b42      	ldr	r3, [pc, #264]	; (80133a8 <xTaskResumeAll+0x118>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d10a      	bne.n	80132bc <xTaskResumeAll+0x2c>
	__asm volatile
 80132a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132aa:	f383 8811 	msr	BASEPRI, r3
 80132ae:	f3bf 8f6f 	isb	sy
 80132b2:	f3bf 8f4f 	dsb	sy
 80132b6:	603b      	str	r3, [r7, #0]
}
 80132b8:	bf00      	nop
 80132ba:	e7fe      	b.n	80132ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80132bc:	f001 f91a 	bl	80144f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80132c0:	4b39      	ldr	r3, [pc, #228]	; (80133a8 <xTaskResumeAll+0x118>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	3b01      	subs	r3, #1
 80132c6:	4a38      	ldr	r2, [pc, #224]	; (80133a8 <xTaskResumeAll+0x118>)
 80132c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80132ca:	4b37      	ldr	r3, [pc, #220]	; (80133a8 <xTaskResumeAll+0x118>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d162      	bne.n	8013398 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80132d2:	4b36      	ldr	r3, [pc, #216]	; (80133ac <xTaskResumeAll+0x11c>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d05e      	beq.n	8013398 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80132da:	e02f      	b.n	801333c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132dc:	4b34      	ldr	r3, [pc, #208]	; (80133b0 <xTaskResumeAll+0x120>)
 80132de:	68db      	ldr	r3, [r3, #12]
 80132e0:	68db      	ldr	r3, [r3, #12]
 80132e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	3318      	adds	r3, #24
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7fe ff57 	bl	801219c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	3304      	adds	r3, #4
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fe ff52 	bl	801219c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132fc:	4b2d      	ldr	r3, [pc, #180]	; (80133b4 <xTaskResumeAll+0x124>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	429a      	cmp	r2, r3
 8013302:	d903      	bls.n	801330c <xTaskResumeAll+0x7c>
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013308:	4a2a      	ldr	r2, [pc, #168]	; (80133b4 <xTaskResumeAll+0x124>)
 801330a:	6013      	str	r3, [r2, #0]
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013310:	4613      	mov	r3, r2
 8013312:	009b      	lsls	r3, r3, #2
 8013314:	4413      	add	r3, r2
 8013316:	009b      	lsls	r3, r3, #2
 8013318:	4a27      	ldr	r2, [pc, #156]	; (80133b8 <xTaskResumeAll+0x128>)
 801331a:	441a      	add	r2, r3
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	3304      	adds	r3, #4
 8013320:	4619      	mov	r1, r3
 8013322:	4610      	mov	r0, r2
 8013324:	f7fe fedd 	bl	80120e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801332c:	4b23      	ldr	r3, [pc, #140]	; (80133bc <xTaskResumeAll+0x12c>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013332:	429a      	cmp	r2, r3
 8013334:	d302      	bcc.n	801333c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013336:	4b22      	ldr	r3, [pc, #136]	; (80133c0 <xTaskResumeAll+0x130>)
 8013338:	2201      	movs	r2, #1
 801333a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801333c:	4b1c      	ldr	r3, [pc, #112]	; (80133b0 <xTaskResumeAll+0x120>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d1cb      	bne.n	80132dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d001      	beq.n	801334e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801334a:	f000 fb55 	bl	80139f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801334e:	4b1d      	ldr	r3, [pc, #116]	; (80133c4 <xTaskResumeAll+0x134>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d010      	beq.n	801337c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801335a:	f000 f847 	bl	80133ec <xTaskIncrementTick>
 801335e:	4603      	mov	r3, r0
 8013360:	2b00      	cmp	r3, #0
 8013362:	d002      	beq.n	801336a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013364:	4b16      	ldr	r3, [pc, #88]	; (80133c0 <xTaskResumeAll+0x130>)
 8013366:	2201      	movs	r2, #1
 8013368:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	3b01      	subs	r3, #1
 801336e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d1f1      	bne.n	801335a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013376:	4b13      	ldr	r3, [pc, #76]	; (80133c4 <xTaskResumeAll+0x134>)
 8013378:	2200      	movs	r2, #0
 801337a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801337c:	4b10      	ldr	r3, [pc, #64]	; (80133c0 <xTaskResumeAll+0x130>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d009      	beq.n	8013398 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013384:	2301      	movs	r3, #1
 8013386:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013388:	4b0f      	ldr	r3, [pc, #60]	; (80133c8 <xTaskResumeAll+0x138>)
 801338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801338e:	601a      	str	r2, [r3, #0]
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013398:	f001 f8dc 	bl	8014554 <vPortExitCritical>

	return xAlreadyYielded;
 801339c:	68bb      	ldr	r3, [r7, #8]
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3710      	adds	r7, #16
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}
 80133a6:	bf00      	nop
 80133a8:	20002fe8 	.word	0x20002fe8
 80133ac:	20002fc0 	.word	0x20002fc0
 80133b0:	20002f80 	.word	0x20002f80
 80133b4:	20002fc8 	.word	0x20002fc8
 80133b8:	20002af0 	.word	0x20002af0
 80133bc:	20002aec 	.word	0x20002aec
 80133c0:	20002fd4 	.word	0x20002fd4
 80133c4:	20002fd0 	.word	0x20002fd0
 80133c8:	e000ed04 	.word	0xe000ed04

080133cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80133cc:	b480      	push	{r7}
 80133ce:	b083      	sub	sp, #12
 80133d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80133d2:	4b05      	ldr	r3, [pc, #20]	; (80133e8 <xTaskGetTickCount+0x1c>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80133d8:	687b      	ldr	r3, [r7, #4]
}
 80133da:	4618      	mov	r0, r3
 80133dc:	370c      	adds	r7, #12
 80133de:	46bd      	mov	sp, r7
 80133e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e4:	4770      	bx	lr
 80133e6:	bf00      	nop
 80133e8:	20002fc4 	.word	0x20002fc4

080133ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b086      	sub	sp, #24
 80133f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80133f2:	2300      	movs	r3, #0
 80133f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133f6:	4b4f      	ldr	r3, [pc, #316]	; (8013534 <xTaskIncrementTick+0x148>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	f040 808f 	bne.w	801351e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013400:	4b4d      	ldr	r3, [pc, #308]	; (8013538 <xTaskIncrementTick+0x14c>)
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	3301      	adds	r3, #1
 8013406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013408:	4a4b      	ldr	r2, [pc, #300]	; (8013538 <xTaskIncrementTick+0x14c>)
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d120      	bne.n	8013456 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013414:	4b49      	ldr	r3, [pc, #292]	; (801353c <xTaskIncrementTick+0x150>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d00a      	beq.n	8013434 <xTaskIncrementTick+0x48>
	__asm volatile
 801341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013422:	f383 8811 	msr	BASEPRI, r3
 8013426:	f3bf 8f6f 	isb	sy
 801342a:	f3bf 8f4f 	dsb	sy
 801342e:	603b      	str	r3, [r7, #0]
}
 8013430:	bf00      	nop
 8013432:	e7fe      	b.n	8013432 <xTaskIncrementTick+0x46>
 8013434:	4b41      	ldr	r3, [pc, #260]	; (801353c <xTaskIncrementTick+0x150>)
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	60fb      	str	r3, [r7, #12]
 801343a:	4b41      	ldr	r3, [pc, #260]	; (8013540 <xTaskIncrementTick+0x154>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	4a3f      	ldr	r2, [pc, #252]	; (801353c <xTaskIncrementTick+0x150>)
 8013440:	6013      	str	r3, [r2, #0]
 8013442:	4a3f      	ldr	r2, [pc, #252]	; (8013540 <xTaskIncrementTick+0x154>)
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	6013      	str	r3, [r2, #0]
 8013448:	4b3e      	ldr	r3, [pc, #248]	; (8013544 <xTaskIncrementTick+0x158>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	3301      	adds	r3, #1
 801344e:	4a3d      	ldr	r2, [pc, #244]	; (8013544 <xTaskIncrementTick+0x158>)
 8013450:	6013      	str	r3, [r2, #0]
 8013452:	f000 fad1 	bl	80139f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013456:	4b3c      	ldr	r3, [pc, #240]	; (8013548 <xTaskIncrementTick+0x15c>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	693a      	ldr	r2, [r7, #16]
 801345c:	429a      	cmp	r2, r3
 801345e:	d349      	bcc.n	80134f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013460:	4b36      	ldr	r3, [pc, #216]	; (801353c <xTaskIncrementTick+0x150>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d104      	bne.n	8013474 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801346a:	4b37      	ldr	r3, [pc, #220]	; (8013548 <xTaskIncrementTick+0x15c>)
 801346c:	f04f 32ff 	mov.w	r2, #4294967295
 8013470:	601a      	str	r2, [r3, #0]
					break;
 8013472:	e03f      	b.n	80134f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013474:	4b31      	ldr	r3, [pc, #196]	; (801353c <xTaskIncrementTick+0x150>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	68db      	ldr	r3, [r3, #12]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	685b      	ldr	r3, [r3, #4]
 8013482:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013484:	693a      	ldr	r2, [r7, #16]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	429a      	cmp	r2, r3
 801348a:	d203      	bcs.n	8013494 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801348c:	4a2e      	ldr	r2, [pc, #184]	; (8013548 <xTaskIncrementTick+0x15c>)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013492:	e02f      	b.n	80134f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	3304      	adds	r3, #4
 8013498:	4618      	mov	r0, r3
 801349a:	f7fe fe7f 	bl	801219c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d004      	beq.n	80134b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	3318      	adds	r3, #24
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7fe fe76 	bl	801219c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134b4:	4b25      	ldr	r3, [pc, #148]	; (801354c <xTaskIncrementTick+0x160>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d903      	bls.n	80134c4 <xTaskIncrementTick+0xd8>
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134c0:	4a22      	ldr	r2, [pc, #136]	; (801354c <xTaskIncrementTick+0x160>)
 80134c2:	6013      	str	r3, [r2, #0]
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134c8:	4613      	mov	r3, r2
 80134ca:	009b      	lsls	r3, r3, #2
 80134cc:	4413      	add	r3, r2
 80134ce:	009b      	lsls	r3, r3, #2
 80134d0:	4a1f      	ldr	r2, [pc, #124]	; (8013550 <xTaskIncrementTick+0x164>)
 80134d2:	441a      	add	r2, r3
 80134d4:	68bb      	ldr	r3, [r7, #8]
 80134d6:	3304      	adds	r3, #4
 80134d8:	4619      	mov	r1, r3
 80134da:	4610      	mov	r0, r2
 80134dc:	f7fe fe01 	bl	80120e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e4:	4b1b      	ldr	r3, [pc, #108]	; (8013554 <xTaskIncrementTick+0x168>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d3b8      	bcc.n	8013460 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80134ee:	2301      	movs	r3, #1
 80134f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80134f2:	e7b5      	b.n	8013460 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80134f4:	4b17      	ldr	r3, [pc, #92]	; (8013554 <xTaskIncrementTick+0x168>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134fa:	4915      	ldr	r1, [pc, #84]	; (8013550 <xTaskIncrementTick+0x164>)
 80134fc:	4613      	mov	r3, r2
 80134fe:	009b      	lsls	r3, r3, #2
 8013500:	4413      	add	r3, r2
 8013502:	009b      	lsls	r3, r3, #2
 8013504:	440b      	add	r3, r1
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	2b01      	cmp	r3, #1
 801350a:	d901      	bls.n	8013510 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801350c:	2301      	movs	r3, #1
 801350e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013510:	4b11      	ldr	r3, [pc, #68]	; (8013558 <xTaskIncrementTick+0x16c>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d007      	beq.n	8013528 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013518:	2301      	movs	r3, #1
 801351a:	617b      	str	r3, [r7, #20]
 801351c:	e004      	b.n	8013528 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801351e:	4b0f      	ldr	r3, [pc, #60]	; (801355c <xTaskIncrementTick+0x170>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	3301      	adds	r3, #1
 8013524:	4a0d      	ldr	r2, [pc, #52]	; (801355c <xTaskIncrementTick+0x170>)
 8013526:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013528:	697b      	ldr	r3, [r7, #20]
}
 801352a:	4618      	mov	r0, r3
 801352c:	3718      	adds	r7, #24
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	20002fe8 	.word	0x20002fe8
 8013538:	20002fc4 	.word	0x20002fc4
 801353c:	20002f78 	.word	0x20002f78
 8013540:	20002f7c 	.word	0x20002f7c
 8013544:	20002fd8 	.word	0x20002fd8
 8013548:	20002fe0 	.word	0x20002fe0
 801354c:	20002fc8 	.word	0x20002fc8
 8013550:	20002af0 	.word	0x20002af0
 8013554:	20002aec 	.word	0x20002aec
 8013558:	20002fd4 	.word	0x20002fd4
 801355c:	20002fd0 	.word	0x20002fd0

08013560 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013560:	b480      	push	{r7}
 8013562:	b085      	sub	sp, #20
 8013564:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013566:	4b28      	ldr	r3, [pc, #160]	; (8013608 <vTaskSwitchContext+0xa8>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d003      	beq.n	8013576 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801356e:	4b27      	ldr	r3, [pc, #156]	; (801360c <vTaskSwitchContext+0xac>)
 8013570:	2201      	movs	r2, #1
 8013572:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013574:	e041      	b.n	80135fa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013576:	4b25      	ldr	r3, [pc, #148]	; (801360c <vTaskSwitchContext+0xac>)
 8013578:	2200      	movs	r2, #0
 801357a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801357c:	4b24      	ldr	r3, [pc, #144]	; (8013610 <vTaskSwitchContext+0xb0>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	60fb      	str	r3, [r7, #12]
 8013582:	e010      	b.n	80135a6 <vTaskSwitchContext+0x46>
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d10a      	bne.n	80135a0 <vTaskSwitchContext+0x40>
	__asm volatile
 801358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801358e:	f383 8811 	msr	BASEPRI, r3
 8013592:	f3bf 8f6f 	isb	sy
 8013596:	f3bf 8f4f 	dsb	sy
 801359a:	607b      	str	r3, [r7, #4]
}
 801359c:	bf00      	nop
 801359e:	e7fe      	b.n	801359e <vTaskSwitchContext+0x3e>
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	3b01      	subs	r3, #1
 80135a4:	60fb      	str	r3, [r7, #12]
 80135a6:	491b      	ldr	r1, [pc, #108]	; (8013614 <vTaskSwitchContext+0xb4>)
 80135a8:	68fa      	ldr	r2, [r7, #12]
 80135aa:	4613      	mov	r3, r2
 80135ac:	009b      	lsls	r3, r3, #2
 80135ae:	4413      	add	r3, r2
 80135b0:	009b      	lsls	r3, r3, #2
 80135b2:	440b      	add	r3, r1
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d0e4      	beq.n	8013584 <vTaskSwitchContext+0x24>
 80135ba:	68fa      	ldr	r2, [r7, #12]
 80135bc:	4613      	mov	r3, r2
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	4413      	add	r3, r2
 80135c2:	009b      	lsls	r3, r3, #2
 80135c4:	4a13      	ldr	r2, [pc, #76]	; (8013614 <vTaskSwitchContext+0xb4>)
 80135c6:	4413      	add	r3, r2
 80135c8:	60bb      	str	r3, [r7, #8]
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	685a      	ldr	r2, [r3, #4]
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	605a      	str	r2, [r3, #4]
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	685a      	ldr	r2, [r3, #4]
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	3308      	adds	r3, #8
 80135dc:	429a      	cmp	r2, r3
 80135de:	d104      	bne.n	80135ea <vTaskSwitchContext+0x8a>
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	685a      	ldr	r2, [r3, #4]
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	605a      	str	r2, [r3, #4]
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	68db      	ldr	r3, [r3, #12]
 80135f0:	4a09      	ldr	r2, [pc, #36]	; (8013618 <vTaskSwitchContext+0xb8>)
 80135f2:	6013      	str	r3, [r2, #0]
 80135f4:	4a06      	ldr	r2, [pc, #24]	; (8013610 <vTaskSwitchContext+0xb0>)
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	6013      	str	r3, [r2, #0]
}
 80135fa:	bf00      	nop
 80135fc:	3714      	adds	r7, #20
 80135fe:	46bd      	mov	sp, r7
 8013600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013604:	4770      	bx	lr
 8013606:	bf00      	nop
 8013608:	20002fe8 	.word	0x20002fe8
 801360c:	20002fd4 	.word	0x20002fd4
 8013610:	20002fc8 	.word	0x20002fc8
 8013614:	20002af0 	.word	0x20002af0
 8013618:	20002aec 	.word	0x20002aec

0801361c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b084      	sub	sp, #16
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d10a      	bne.n	8013642 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013630:	f383 8811 	msr	BASEPRI, r3
 8013634:	f3bf 8f6f 	isb	sy
 8013638:	f3bf 8f4f 	dsb	sy
 801363c:	60fb      	str	r3, [r7, #12]
}
 801363e:	bf00      	nop
 8013640:	e7fe      	b.n	8013640 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013642:	4b07      	ldr	r3, [pc, #28]	; (8013660 <vTaskPlaceOnEventList+0x44>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	3318      	adds	r3, #24
 8013648:	4619      	mov	r1, r3
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f7fe fd6d 	bl	801212a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013650:	2101      	movs	r1, #1
 8013652:	6838      	ldr	r0, [r7, #0]
 8013654:	f000 fa7c 	bl	8013b50 <prvAddCurrentTaskToDelayedList>
}
 8013658:	bf00      	nop
 801365a:	3710      	adds	r7, #16
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}
 8013660:	20002aec 	.word	0x20002aec

08013664 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013664:	b580      	push	{r7, lr}
 8013666:	b086      	sub	sp, #24
 8013668:	af00      	add	r7, sp, #0
 801366a:	60f8      	str	r0, [r7, #12]
 801366c:	60b9      	str	r1, [r7, #8]
 801366e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d10a      	bne.n	801368c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367a:	f383 8811 	msr	BASEPRI, r3
 801367e:	f3bf 8f6f 	isb	sy
 8013682:	f3bf 8f4f 	dsb	sy
 8013686:	617b      	str	r3, [r7, #20]
}
 8013688:	bf00      	nop
 801368a:	e7fe      	b.n	801368a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801368c:	4b0a      	ldr	r3, [pc, #40]	; (80136b8 <vTaskPlaceOnEventListRestricted+0x54>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	3318      	adds	r3, #24
 8013692:	4619      	mov	r1, r3
 8013694:	68f8      	ldr	r0, [r7, #12]
 8013696:	f7fe fd24 	bl	80120e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d002      	beq.n	80136a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80136a0:	f04f 33ff 	mov.w	r3, #4294967295
 80136a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80136a6:	6879      	ldr	r1, [r7, #4]
 80136a8:	68b8      	ldr	r0, [r7, #8]
 80136aa:	f000 fa51 	bl	8013b50 <prvAddCurrentTaskToDelayedList>
	}
 80136ae:	bf00      	nop
 80136b0:	3718      	adds	r7, #24
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	20002aec 	.word	0x20002aec

080136bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b086      	sub	sp, #24
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	68db      	ldr	r3, [r3, #12]
 80136ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d10a      	bne.n	80136e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80136d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136d6:	f383 8811 	msr	BASEPRI, r3
 80136da:	f3bf 8f6f 	isb	sy
 80136de:	f3bf 8f4f 	dsb	sy
 80136e2:	60fb      	str	r3, [r7, #12]
}
 80136e4:	bf00      	nop
 80136e6:	e7fe      	b.n	80136e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80136e8:	693b      	ldr	r3, [r7, #16]
 80136ea:	3318      	adds	r3, #24
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7fe fd55 	bl	801219c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80136f2:	4b1e      	ldr	r3, [pc, #120]	; (801376c <xTaskRemoveFromEventList+0xb0>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d11d      	bne.n	8013736 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80136fa:	693b      	ldr	r3, [r7, #16]
 80136fc:	3304      	adds	r3, #4
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fe fd4c 	bl	801219c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013704:	693b      	ldr	r3, [r7, #16]
 8013706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013708:	4b19      	ldr	r3, [pc, #100]	; (8013770 <xTaskRemoveFromEventList+0xb4>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	429a      	cmp	r2, r3
 801370e:	d903      	bls.n	8013718 <xTaskRemoveFromEventList+0x5c>
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013714:	4a16      	ldr	r2, [pc, #88]	; (8013770 <xTaskRemoveFromEventList+0xb4>)
 8013716:	6013      	str	r3, [r2, #0]
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801371c:	4613      	mov	r3, r2
 801371e:	009b      	lsls	r3, r3, #2
 8013720:	4413      	add	r3, r2
 8013722:	009b      	lsls	r3, r3, #2
 8013724:	4a13      	ldr	r2, [pc, #76]	; (8013774 <xTaskRemoveFromEventList+0xb8>)
 8013726:	441a      	add	r2, r3
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	3304      	adds	r3, #4
 801372c:	4619      	mov	r1, r3
 801372e:	4610      	mov	r0, r2
 8013730:	f7fe fcd7 	bl	80120e2 <vListInsertEnd>
 8013734:	e005      	b.n	8013742 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	3318      	adds	r3, #24
 801373a:	4619      	mov	r1, r3
 801373c:	480e      	ldr	r0, [pc, #56]	; (8013778 <xTaskRemoveFromEventList+0xbc>)
 801373e:	f7fe fcd0 	bl	80120e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013742:	693b      	ldr	r3, [r7, #16]
 8013744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013746:	4b0d      	ldr	r3, [pc, #52]	; (801377c <xTaskRemoveFromEventList+0xc0>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801374c:	429a      	cmp	r2, r3
 801374e:	d905      	bls.n	801375c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013750:	2301      	movs	r3, #1
 8013752:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013754:	4b0a      	ldr	r3, [pc, #40]	; (8013780 <xTaskRemoveFromEventList+0xc4>)
 8013756:	2201      	movs	r2, #1
 8013758:	601a      	str	r2, [r3, #0]
 801375a:	e001      	b.n	8013760 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801375c:	2300      	movs	r3, #0
 801375e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013760:	697b      	ldr	r3, [r7, #20]
}
 8013762:	4618      	mov	r0, r3
 8013764:	3718      	adds	r7, #24
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	20002fe8 	.word	0x20002fe8
 8013770:	20002fc8 	.word	0x20002fc8
 8013774:	20002af0 	.word	0x20002af0
 8013778:	20002f80 	.word	0x20002f80
 801377c:	20002aec 	.word	0x20002aec
 8013780:	20002fd4 	.word	0x20002fd4

08013784 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013784:	b480      	push	{r7}
 8013786:	b083      	sub	sp, #12
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801378c:	4b06      	ldr	r3, [pc, #24]	; (80137a8 <vTaskInternalSetTimeOutState+0x24>)
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013794:	4b05      	ldr	r3, [pc, #20]	; (80137ac <vTaskInternalSetTimeOutState+0x28>)
 8013796:	681a      	ldr	r2, [r3, #0]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	605a      	str	r2, [r3, #4]
}
 801379c:	bf00      	nop
 801379e:	370c      	adds	r7, #12
 80137a0:	46bd      	mov	sp, r7
 80137a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a6:	4770      	bx	lr
 80137a8:	20002fd8 	.word	0x20002fd8
 80137ac:	20002fc4 	.word	0x20002fc4

080137b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b088      	sub	sp, #32
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d10a      	bne.n	80137d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80137c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c4:	f383 8811 	msr	BASEPRI, r3
 80137c8:	f3bf 8f6f 	isb	sy
 80137cc:	f3bf 8f4f 	dsb	sy
 80137d0:	613b      	str	r3, [r7, #16]
}
 80137d2:	bf00      	nop
 80137d4:	e7fe      	b.n	80137d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d10a      	bne.n	80137f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80137dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e0:	f383 8811 	msr	BASEPRI, r3
 80137e4:	f3bf 8f6f 	isb	sy
 80137e8:	f3bf 8f4f 	dsb	sy
 80137ec:	60fb      	str	r3, [r7, #12]
}
 80137ee:	bf00      	nop
 80137f0:	e7fe      	b.n	80137f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80137f2:	f000 fe7f 	bl	80144f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80137f6:	4b1d      	ldr	r3, [pc, #116]	; (801386c <xTaskCheckForTimeOut+0xbc>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	69ba      	ldr	r2, [r7, #24]
 8013802:	1ad3      	subs	r3, r2, r3
 8013804:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801380e:	d102      	bne.n	8013816 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013810:	2300      	movs	r3, #0
 8013812:	61fb      	str	r3, [r7, #28]
 8013814:	e023      	b.n	801385e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681a      	ldr	r2, [r3, #0]
 801381a:	4b15      	ldr	r3, [pc, #84]	; (8013870 <xTaskCheckForTimeOut+0xc0>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	429a      	cmp	r2, r3
 8013820:	d007      	beq.n	8013832 <xTaskCheckForTimeOut+0x82>
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	69ba      	ldr	r2, [r7, #24]
 8013828:	429a      	cmp	r2, r3
 801382a:	d302      	bcc.n	8013832 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801382c:	2301      	movs	r3, #1
 801382e:	61fb      	str	r3, [r7, #28]
 8013830:	e015      	b.n	801385e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	697a      	ldr	r2, [r7, #20]
 8013838:	429a      	cmp	r2, r3
 801383a:	d20b      	bcs.n	8013854 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	681a      	ldr	r2, [r3, #0]
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	1ad2      	subs	r2, r2, r3
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f7ff ff9b 	bl	8013784 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801384e:	2300      	movs	r3, #0
 8013850:	61fb      	str	r3, [r7, #28]
 8013852:	e004      	b.n	801385e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	2200      	movs	r2, #0
 8013858:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801385a:	2301      	movs	r3, #1
 801385c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801385e:	f000 fe79 	bl	8014554 <vPortExitCritical>

	return xReturn;
 8013862:	69fb      	ldr	r3, [r7, #28]
}
 8013864:	4618      	mov	r0, r3
 8013866:	3720      	adds	r7, #32
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}
 801386c:	20002fc4 	.word	0x20002fc4
 8013870:	20002fd8 	.word	0x20002fd8

08013874 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013874:	b480      	push	{r7}
 8013876:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013878:	4b03      	ldr	r3, [pc, #12]	; (8013888 <vTaskMissedYield+0x14>)
 801387a:	2201      	movs	r2, #1
 801387c:	601a      	str	r2, [r3, #0]
}
 801387e:	bf00      	nop
 8013880:	46bd      	mov	sp, r7
 8013882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013886:	4770      	bx	lr
 8013888:	20002fd4 	.word	0x20002fd4

0801388c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b082      	sub	sp, #8
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013894:	f000 f852 	bl	801393c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013898:	4b06      	ldr	r3, [pc, #24]	; (80138b4 <prvIdleTask+0x28>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	2b01      	cmp	r3, #1
 801389e:	d9f9      	bls.n	8013894 <prvIdleTask+0x8>
			{
				taskYIELD();
 80138a0:	4b05      	ldr	r3, [pc, #20]	; (80138b8 <prvIdleTask+0x2c>)
 80138a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138a6:	601a      	str	r2, [r3, #0]
 80138a8:	f3bf 8f4f 	dsb	sy
 80138ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80138b0:	e7f0      	b.n	8013894 <prvIdleTask+0x8>
 80138b2:	bf00      	nop
 80138b4:	20002af0 	.word	0x20002af0
 80138b8:	e000ed04 	.word	0xe000ed04

080138bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80138c2:	2300      	movs	r3, #0
 80138c4:	607b      	str	r3, [r7, #4]
 80138c6:	e00c      	b.n	80138e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	4613      	mov	r3, r2
 80138cc:	009b      	lsls	r3, r3, #2
 80138ce:	4413      	add	r3, r2
 80138d0:	009b      	lsls	r3, r3, #2
 80138d2:	4a12      	ldr	r2, [pc, #72]	; (801391c <prvInitialiseTaskLists+0x60>)
 80138d4:	4413      	add	r3, r2
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7fe fbd6 	bl	8012088 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	3301      	adds	r3, #1
 80138e0:	607b      	str	r3, [r7, #4]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2b37      	cmp	r3, #55	; 0x37
 80138e6:	d9ef      	bls.n	80138c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80138e8:	480d      	ldr	r0, [pc, #52]	; (8013920 <prvInitialiseTaskLists+0x64>)
 80138ea:	f7fe fbcd 	bl	8012088 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80138ee:	480d      	ldr	r0, [pc, #52]	; (8013924 <prvInitialiseTaskLists+0x68>)
 80138f0:	f7fe fbca 	bl	8012088 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80138f4:	480c      	ldr	r0, [pc, #48]	; (8013928 <prvInitialiseTaskLists+0x6c>)
 80138f6:	f7fe fbc7 	bl	8012088 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80138fa:	480c      	ldr	r0, [pc, #48]	; (801392c <prvInitialiseTaskLists+0x70>)
 80138fc:	f7fe fbc4 	bl	8012088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013900:	480b      	ldr	r0, [pc, #44]	; (8013930 <prvInitialiseTaskLists+0x74>)
 8013902:	f7fe fbc1 	bl	8012088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013906:	4b0b      	ldr	r3, [pc, #44]	; (8013934 <prvInitialiseTaskLists+0x78>)
 8013908:	4a05      	ldr	r2, [pc, #20]	; (8013920 <prvInitialiseTaskLists+0x64>)
 801390a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801390c:	4b0a      	ldr	r3, [pc, #40]	; (8013938 <prvInitialiseTaskLists+0x7c>)
 801390e:	4a05      	ldr	r2, [pc, #20]	; (8013924 <prvInitialiseTaskLists+0x68>)
 8013910:	601a      	str	r2, [r3, #0]
}
 8013912:	bf00      	nop
 8013914:	3708      	adds	r7, #8
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}
 801391a:	bf00      	nop
 801391c:	20002af0 	.word	0x20002af0
 8013920:	20002f50 	.word	0x20002f50
 8013924:	20002f64 	.word	0x20002f64
 8013928:	20002f80 	.word	0x20002f80
 801392c:	20002f94 	.word	0x20002f94
 8013930:	20002fac 	.word	0x20002fac
 8013934:	20002f78 	.word	0x20002f78
 8013938:	20002f7c 	.word	0x20002f7c

0801393c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b082      	sub	sp, #8
 8013940:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013942:	e019      	b.n	8013978 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013944:	f000 fdd6 	bl	80144f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013948:	4b10      	ldr	r3, [pc, #64]	; (801398c <prvCheckTasksWaitingTermination+0x50>)
 801394a:	68db      	ldr	r3, [r3, #12]
 801394c:	68db      	ldr	r3, [r3, #12]
 801394e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	3304      	adds	r3, #4
 8013954:	4618      	mov	r0, r3
 8013956:	f7fe fc21 	bl	801219c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801395a:	4b0d      	ldr	r3, [pc, #52]	; (8013990 <prvCheckTasksWaitingTermination+0x54>)
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	3b01      	subs	r3, #1
 8013960:	4a0b      	ldr	r2, [pc, #44]	; (8013990 <prvCheckTasksWaitingTermination+0x54>)
 8013962:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013964:	4b0b      	ldr	r3, [pc, #44]	; (8013994 <prvCheckTasksWaitingTermination+0x58>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	3b01      	subs	r3, #1
 801396a:	4a0a      	ldr	r2, [pc, #40]	; (8013994 <prvCheckTasksWaitingTermination+0x58>)
 801396c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801396e:	f000 fdf1 	bl	8014554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f000 f810 	bl	8013998 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013978:	4b06      	ldr	r3, [pc, #24]	; (8013994 <prvCheckTasksWaitingTermination+0x58>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d1e1      	bne.n	8013944 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013980:	bf00      	nop
 8013982:	bf00      	nop
 8013984:	3708      	adds	r7, #8
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}
 801398a:	bf00      	nop
 801398c:	20002f94 	.word	0x20002f94
 8013990:	20002fc0 	.word	0x20002fc0
 8013994:	20002fa8 	.word	0x20002fa8

08013998 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013998:	b580      	push	{r7, lr}
 801399a:	b084      	sub	sp, #16
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d108      	bne.n	80139bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ae:	4618      	mov	r0, r3
 80139b0:	f000 ff8e 	bl	80148d0 <vPortFree>
				vPortFree( pxTCB );
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f000 ff8b 	bl	80148d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80139ba:	e018      	b.n	80139ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80139c2:	2b01      	cmp	r3, #1
 80139c4:	d103      	bne.n	80139ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f000 ff82 	bl	80148d0 <vPortFree>
	}
 80139cc:	e00f      	b.n	80139ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80139d4:	2b02      	cmp	r3, #2
 80139d6:	d00a      	beq.n	80139ee <prvDeleteTCB+0x56>
	__asm volatile
 80139d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139dc:	f383 8811 	msr	BASEPRI, r3
 80139e0:	f3bf 8f6f 	isb	sy
 80139e4:	f3bf 8f4f 	dsb	sy
 80139e8:	60fb      	str	r3, [r7, #12]
}
 80139ea:	bf00      	nop
 80139ec:	e7fe      	b.n	80139ec <prvDeleteTCB+0x54>
	}
 80139ee:	bf00      	nop
 80139f0:	3710      	adds	r7, #16
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
	...

080139f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80139f8:	b480      	push	{r7}
 80139fa:	b083      	sub	sp, #12
 80139fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80139fe:	4b0c      	ldr	r3, [pc, #48]	; (8013a30 <prvResetNextTaskUnblockTime+0x38>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d104      	bne.n	8013a12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013a08:	4b0a      	ldr	r3, [pc, #40]	; (8013a34 <prvResetNextTaskUnblockTime+0x3c>)
 8013a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013a10:	e008      	b.n	8013a24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a12:	4b07      	ldr	r3, [pc, #28]	; (8013a30 <prvResetNextTaskUnblockTime+0x38>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	68db      	ldr	r3, [r3, #12]
 8013a18:	68db      	ldr	r3, [r3, #12]
 8013a1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	685b      	ldr	r3, [r3, #4]
 8013a20:	4a04      	ldr	r2, [pc, #16]	; (8013a34 <prvResetNextTaskUnblockTime+0x3c>)
 8013a22:	6013      	str	r3, [r2, #0]
}
 8013a24:	bf00      	nop
 8013a26:	370c      	adds	r7, #12
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2e:	4770      	bx	lr
 8013a30:	20002f78 	.word	0x20002f78
 8013a34:	20002fe0 	.word	0x20002fe0

08013a38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013a38:	b480      	push	{r7}
 8013a3a:	b083      	sub	sp, #12
 8013a3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013a3e:	4b0b      	ldr	r3, [pc, #44]	; (8013a6c <xTaskGetSchedulerState+0x34>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d102      	bne.n	8013a4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013a46:	2301      	movs	r3, #1
 8013a48:	607b      	str	r3, [r7, #4]
 8013a4a:	e008      	b.n	8013a5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a4c:	4b08      	ldr	r3, [pc, #32]	; (8013a70 <xTaskGetSchedulerState+0x38>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d102      	bne.n	8013a5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013a54:	2302      	movs	r3, #2
 8013a56:	607b      	str	r3, [r7, #4]
 8013a58:	e001      	b.n	8013a5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013a5e:	687b      	ldr	r3, [r7, #4]
	}
 8013a60:	4618      	mov	r0, r3
 8013a62:	370c      	adds	r7, #12
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr
 8013a6c:	20002fcc 	.word	0x20002fcc
 8013a70:	20002fe8 	.word	0x20002fe8

08013a74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b086      	sub	sp, #24
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013a80:	2300      	movs	r3, #0
 8013a82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d056      	beq.n	8013b38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013a8a:	4b2e      	ldr	r3, [pc, #184]	; (8013b44 <xTaskPriorityDisinherit+0xd0>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	693a      	ldr	r2, [r7, #16]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d00a      	beq.n	8013aaa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a98:	f383 8811 	msr	BASEPRI, r3
 8013a9c:	f3bf 8f6f 	isb	sy
 8013aa0:	f3bf 8f4f 	dsb	sy
 8013aa4:	60fb      	str	r3, [r7, #12]
}
 8013aa6:	bf00      	nop
 8013aa8:	e7fe      	b.n	8013aa8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013aaa:	693b      	ldr	r3, [r7, #16]
 8013aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d10a      	bne.n	8013ac8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab6:	f383 8811 	msr	BASEPRI, r3
 8013aba:	f3bf 8f6f 	isb	sy
 8013abe:	f3bf 8f4f 	dsb	sy
 8013ac2:	60bb      	str	r3, [r7, #8]
}
 8013ac4:	bf00      	nop
 8013ac6:	e7fe      	b.n	8013ac6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013ac8:	693b      	ldr	r3, [r7, #16]
 8013aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013acc:	1e5a      	subs	r2, r3, #1
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d02c      	beq.n	8013b38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013ade:	693b      	ldr	r3, [r7, #16]
 8013ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d128      	bne.n	8013b38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	3304      	adds	r3, #4
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7fe fb56 	bl	801219c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013af0:	693b      	ldr	r3, [r7, #16]
 8013af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013af4:	693b      	ldr	r3, [r7, #16]
 8013af6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013afc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013b04:	693b      	ldr	r3, [r7, #16]
 8013b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b08:	4b0f      	ldr	r3, [pc, #60]	; (8013b48 <xTaskPriorityDisinherit+0xd4>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d903      	bls.n	8013b18 <xTaskPriorityDisinherit+0xa4>
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b14:	4a0c      	ldr	r2, [pc, #48]	; (8013b48 <xTaskPriorityDisinherit+0xd4>)
 8013b16:	6013      	str	r3, [r2, #0]
 8013b18:	693b      	ldr	r3, [r7, #16]
 8013b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b1c:	4613      	mov	r3, r2
 8013b1e:	009b      	lsls	r3, r3, #2
 8013b20:	4413      	add	r3, r2
 8013b22:	009b      	lsls	r3, r3, #2
 8013b24:	4a09      	ldr	r2, [pc, #36]	; (8013b4c <xTaskPriorityDisinherit+0xd8>)
 8013b26:	441a      	add	r2, r3
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	3304      	adds	r3, #4
 8013b2c:	4619      	mov	r1, r3
 8013b2e:	4610      	mov	r0, r2
 8013b30:	f7fe fad7 	bl	80120e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013b34:	2301      	movs	r3, #1
 8013b36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013b38:	697b      	ldr	r3, [r7, #20]
	}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3718      	adds	r7, #24
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}
 8013b42:	bf00      	nop
 8013b44:	20002aec 	.word	0x20002aec
 8013b48:	20002fc8 	.word	0x20002fc8
 8013b4c:	20002af0 	.word	0x20002af0

08013b50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b084      	sub	sp, #16
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013b5a:	4b21      	ldr	r3, [pc, #132]	; (8013be0 <prvAddCurrentTaskToDelayedList+0x90>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b60:	4b20      	ldr	r3, [pc, #128]	; (8013be4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	3304      	adds	r3, #4
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7fe fb18 	bl	801219c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b72:	d10a      	bne.n	8013b8a <prvAddCurrentTaskToDelayedList+0x3a>
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d007      	beq.n	8013b8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b7a:	4b1a      	ldr	r3, [pc, #104]	; (8013be4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	3304      	adds	r3, #4
 8013b80:	4619      	mov	r1, r3
 8013b82:	4819      	ldr	r0, [pc, #100]	; (8013be8 <prvAddCurrentTaskToDelayedList+0x98>)
 8013b84:	f7fe faad 	bl	80120e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013b88:	e026      	b.n	8013bd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013b8a:	68fa      	ldr	r2, [r7, #12]
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	4413      	add	r3, r2
 8013b90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013b92:	4b14      	ldr	r3, [pc, #80]	; (8013be4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	68ba      	ldr	r2, [r7, #8]
 8013b98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013b9a:	68ba      	ldr	r2, [r7, #8]
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d209      	bcs.n	8013bb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ba2:	4b12      	ldr	r3, [pc, #72]	; (8013bec <prvAddCurrentTaskToDelayedList+0x9c>)
 8013ba4:	681a      	ldr	r2, [r3, #0]
 8013ba6:	4b0f      	ldr	r3, [pc, #60]	; (8013be4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	3304      	adds	r3, #4
 8013bac:	4619      	mov	r1, r3
 8013bae:	4610      	mov	r0, r2
 8013bb0:	f7fe fabb 	bl	801212a <vListInsert>
}
 8013bb4:	e010      	b.n	8013bd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013bb6:	4b0e      	ldr	r3, [pc, #56]	; (8013bf0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013bb8:	681a      	ldr	r2, [r3, #0]
 8013bba:	4b0a      	ldr	r3, [pc, #40]	; (8013be4 <prvAddCurrentTaskToDelayedList+0x94>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	3304      	adds	r3, #4
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	4610      	mov	r0, r2
 8013bc4:	f7fe fab1 	bl	801212a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013bc8:	4b0a      	ldr	r3, [pc, #40]	; (8013bf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	68ba      	ldr	r2, [r7, #8]
 8013bce:	429a      	cmp	r2, r3
 8013bd0:	d202      	bcs.n	8013bd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013bd2:	4a08      	ldr	r2, [pc, #32]	; (8013bf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	6013      	str	r3, [r2, #0]
}
 8013bd8:	bf00      	nop
 8013bda:	3710      	adds	r7, #16
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	20002fc4 	.word	0x20002fc4
 8013be4:	20002aec 	.word	0x20002aec
 8013be8:	20002fac 	.word	0x20002fac
 8013bec:	20002f7c 	.word	0x20002f7c
 8013bf0:	20002f78 	.word	0x20002f78
 8013bf4:	20002fe0 	.word	0x20002fe0

08013bf8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b08a      	sub	sp, #40	; 0x28
 8013bfc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013c02:	f000 fb07 	bl	8014214 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013c06:	4b1c      	ldr	r3, [pc, #112]	; (8013c78 <xTimerCreateTimerTask+0x80>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d021      	beq.n	8013c52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013c12:	2300      	movs	r3, #0
 8013c14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013c16:	1d3a      	adds	r2, r7, #4
 8013c18:	f107 0108 	add.w	r1, r7, #8
 8013c1c:	f107 030c 	add.w	r3, r7, #12
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7fe fa17 	bl	8012054 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013c26:	6879      	ldr	r1, [r7, #4]
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	68fa      	ldr	r2, [r7, #12]
 8013c2c:	9202      	str	r2, [sp, #8]
 8013c2e:	9301      	str	r3, [sp, #4]
 8013c30:	2302      	movs	r3, #2
 8013c32:	9300      	str	r3, [sp, #0]
 8013c34:	2300      	movs	r3, #0
 8013c36:	460a      	mov	r2, r1
 8013c38:	4910      	ldr	r1, [pc, #64]	; (8013c7c <xTimerCreateTimerTask+0x84>)
 8013c3a:	4811      	ldr	r0, [pc, #68]	; (8013c80 <xTimerCreateTimerTask+0x88>)
 8013c3c:	f7ff f8de 	bl	8012dfc <xTaskCreateStatic>
 8013c40:	4603      	mov	r3, r0
 8013c42:	4a10      	ldr	r2, [pc, #64]	; (8013c84 <xTimerCreateTimerTask+0x8c>)
 8013c44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013c46:	4b0f      	ldr	r3, [pc, #60]	; (8013c84 <xTimerCreateTimerTask+0x8c>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d001      	beq.n	8013c52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013c4e:	2301      	movs	r3, #1
 8013c50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d10a      	bne.n	8013c6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c5c:	f383 8811 	msr	BASEPRI, r3
 8013c60:	f3bf 8f6f 	isb	sy
 8013c64:	f3bf 8f4f 	dsb	sy
 8013c68:	613b      	str	r3, [r7, #16]
}
 8013c6a:	bf00      	nop
 8013c6c:	e7fe      	b.n	8013c6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013c6e:	697b      	ldr	r3, [r7, #20]
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	3718      	adds	r7, #24
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	2000301c 	.word	0x2000301c
 8013c7c:	08019e64 	.word	0x08019e64
 8013c80:	08013dbd 	.word	0x08013dbd
 8013c84:	20003020 	.word	0x20003020

08013c88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b08a      	sub	sp, #40	; 0x28
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	607a      	str	r2, [r7, #4]
 8013c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013c96:	2300      	movs	r3, #0
 8013c98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d10a      	bne.n	8013cb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8013ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca4:	f383 8811 	msr	BASEPRI, r3
 8013ca8:	f3bf 8f6f 	isb	sy
 8013cac:	f3bf 8f4f 	dsb	sy
 8013cb0:	623b      	str	r3, [r7, #32]
}
 8013cb2:	bf00      	nop
 8013cb4:	e7fe      	b.n	8013cb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013cb6:	4b1a      	ldr	r3, [pc, #104]	; (8013d20 <xTimerGenericCommand+0x98>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d02a      	beq.n	8013d14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	2b05      	cmp	r3, #5
 8013cce:	dc18      	bgt.n	8013d02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013cd0:	f7ff feb2 	bl	8013a38 <xTaskGetSchedulerState>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	2b02      	cmp	r3, #2
 8013cd8:	d109      	bne.n	8013cee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013cda:	4b11      	ldr	r3, [pc, #68]	; (8013d20 <xTimerGenericCommand+0x98>)
 8013cdc:	6818      	ldr	r0, [r3, #0]
 8013cde:	f107 0110 	add.w	r1, r7, #16
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ce6:	f7fe fbc1 	bl	801246c <xQueueGenericSend>
 8013cea:	6278      	str	r0, [r7, #36]	; 0x24
 8013cec:	e012      	b.n	8013d14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013cee:	4b0c      	ldr	r3, [pc, #48]	; (8013d20 <xTimerGenericCommand+0x98>)
 8013cf0:	6818      	ldr	r0, [r3, #0]
 8013cf2:	f107 0110 	add.w	r1, r7, #16
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	f7fe fbb7 	bl	801246c <xQueueGenericSend>
 8013cfe:	6278      	str	r0, [r7, #36]	; 0x24
 8013d00:	e008      	b.n	8013d14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013d02:	4b07      	ldr	r3, [pc, #28]	; (8013d20 <xTimerGenericCommand+0x98>)
 8013d04:	6818      	ldr	r0, [r3, #0]
 8013d06:	f107 0110 	add.w	r1, r7, #16
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	683a      	ldr	r2, [r7, #0]
 8013d0e:	f7fe fcab 	bl	8012668 <xQueueGenericSendFromISR>
 8013d12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3728      	adds	r7, #40	; 0x28
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	2000301c 	.word	0x2000301c

08013d24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b088      	sub	sp, #32
 8013d28:	af02      	add	r7, sp, #8
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d2e:	4b22      	ldr	r3, [pc, #136]	; (8013db8 <prvProcessExpiredTimer+0x94>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	68db      	ldr	r3, [r3, #12]
 8013d34:	68db      	ldr	r3, [r3, #12]
 8013d36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	3304      	adds	r3, #4
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7fe fa2d 	bl	801219c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d48:	f003 0304 	and.w	r3, r3, #4
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d022      	beq.n	8013d96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	699a      	ldr	r2, [r3, #24]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	18d1      	adds	r1, r2, r3
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	683a      	ldr	r2, [r7, #0]
 8013d5c:	6978      	ldr	r0, [r7, #20]
 8013d5e:	f000 f8d1 	bl	8013f04 <prvInsertTimerInActiveList>
 8013d62:	4603      	mov	r3, r0
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d01f      	beq.n	8013da8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013d68:	2300      	movs	r3, #0
 8013d6a:	9300      	str	r3, [sp, #0]
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	2100      	movs	r1, #0
 8013d72:	6978      	ldr	r0, [r7, #20]
 8013d74:	f7ff ff88 	bl	8013c88 <xTimerGenericCommand>
 8013d78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d113      	bne.n	8013da8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d84:	f383 8811 	msr	BASEPRI, r3
 8013d88:	f3bf 8f6f 	isb	sy
 8013d8c:	f3bf 8f4f 	dsb	sy
 8013d90:	60fb      	str	r3, [r7, #12]
}
 8013d92:	bf00      	nop
 8013d94:	e7fe      	b.n	8013d94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d9c:	f023 0301 	bic.w	r3, r3, #1
 8013da0:	b2da      	uxtb	r2, r3
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	6a1b      	ldr	r3, [r3, #32]
 8013dac:	6978      	ldr	r0, [r7, #20]
 8013dae:	4798      	blx	r3
}
 8013db0:	bf00      	nop
 8013db2:	3718      	adds	r7, #24
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}
 8013db8:	20003014 	.word	0x20003014

08013dbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b084      	sub	sp, #16
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013dc4:	f107 0308 	add.w	r3, r7, #8
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f000 f857 	bl	8013e7c <prvGetNextExpireTime>
 8013dce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	68f8      	ldr	r0, [r7, #12]
 8013dd6:	f000 f803 	bl	8013de0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013dda:	f000 f8d5 	bl	8013f88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013dde:	e7f1      	b.n	8013dc4 <prvTimerTask+0x8>

08013de0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013dea:	f7ff fa43 	bl	8013274 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013dee:	f107 0308 	add.w	r3, r7, #8
 8013df2:	4618      	mov	r0, r3
 8013df4:	f000 f866 	bl	8013ec4 <prvSampleTimeNow>
 8013df8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013dfa:	68bb      	ldr	r3, [r7, #8]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d130      	bne.n	8013e62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d10a      	bne.n	8013e1c <prvProcessTimerOrBlockTask+0x3c>
 8013e06:	687a      	ldr	r2, [r7, #4]
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d806      	bhi.n	8013e1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013e0e:	f7ff fa3f 	bl	8013290 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013e12:	68f9      	ldr	r1, [r7, #12]
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f7ff ff85 	bl	8013d24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013e1a:	e024      	b.n	8013e66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d008      	beq.n	8013e34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013e22:	4b13      	ldr	r3, [pc, #76]	; (8013e70 <prvProcessTimerOrBlockTask+0x90>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d101      	bne.n	8013e30 <prvProcessTimerOrBlockTask+0x50>
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	e000      	b.n	8013e32 <prvProcessTimerOrBlockTask+0x52>
 8013e30:	2300      	movs	r3, #0
 8013e32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013e34:	4b0f      	ldr	r3, [pc, #60]	; (8013e74 <prvProcessTimerOrBlockTask+0x94>)
 8013e36:	6818      	ldr	r0, [r3, #0]
 8013e38:	687a      	ldr	r2, [r7, #4]
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	1ad3      	subs	r3, r2, r3
 8013e3e:	683a      	ldr	r2, [r7, #0]
 8013e40:	4619      	mov	r1, r3
 8013e42:	f7fe ffa7 	bl	8012d94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013e46:	f7ff fa23 	bl	8013290 <xTaskResumeAll>
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d10a      	bne.n	8013e66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013e50:	4b09      	ldr	r3, [pc, #36]	; (8013e78 <prvProcessTimerOrBlockTask+0x98>)
 8013e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e56:	601a      	str	r2, [r3, #0]
 8013e58:	f3bf 8f4f 	dsb	sy
 8013e5c:	f3bf 8f6f 	isb	sy
}
 8013e60:	e001      	b.n	8013e66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013e62:	f7ff fa15 	bl	8013290 <xTaskResumeAll>
}
 8013e66:	bf00      	nop
 8013e68:	3710      	adds	r7, #16
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}
 8013e6e:	bf00      	nop
 8013e70:	20003018 	.word	0x20003018
 8013e74:	2000301c 	.word	0x2000301c
 8013e78:	e000ed04 	.word	0xe000ed04

08013e7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	b085      	sub	sp, #20
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013e84:	4b0e      	ldr	r3, [pc, #56]	; (8013ec0 <prvGetNextExpireTime+0x44>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d101      	bne.n	8013e92 <prvGetNextExpireTime+0x16>
 8013e8e:	2201      	movs	r2, #1
 8013e90:	e000      	b.n	8013e94 <prvGetNextExpireTime+0x18>
 8013e92:	2200      	movs	r2, #0
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d105      	bne.n	8013eac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013ea0:	4b07      	ldr	r3, [pc, #28]	; (8013ec0 <prvGetNextExpireTime+0x44>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	68db      	ldr	r3, [r3, #12]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	60fb      	str	r3, [r7, #12]
 8013eaa:	e001      	b.n	8013eb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013eac:	2300      	movs	r3, #0
 8013eae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3714      	adds	r7, #20
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebc:	4770      	bx	lr
 8013ebe:	bf00      	nop
 8013ec0:	20003014 	.word	0x20003014

08013ec4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b084      	sub	sp, #16
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013ecc:	f7ff fa7e 	bl	80133cc <xTaskGetTickCount>
 8013ed0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013ed2:	4b0b      	ldr	r3, [pc, #44]	; (8013f00 <prvSampleTimeNow+0x3c>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	68fa      	ldr	r2, [r7, #12]
 8013ed8:	429a      	cmp	r2, r3
 8013eda:	d205      	bcs.n	8013ee8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013edc:	f000 f936 	bl	801414c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	601a      	str	r2, [r3, #0]
 8013ee6:	e002      	b.n	8013eee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2200      	movs	r2, #0
 8013eec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013eee:	4a04      	ldr	r2, [pc, #16]	; (8013f00 <prvSampleTimeNow+0x3c>)
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3710      	adds	r7, #16
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}
 8013efe:	bf00      	nop
 8013f00:	20003024 	.word	0x20003024

08013f04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b086      	sub	sp, #24
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	60f8      	str	r0, [r7, #12]
 8013f0c:	60b9      	str	r1, [r7, #8]
 8013f0e:	607a      	str	r2, [r7, #4]
 8013f10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013f12:	2300      	movs	r3, #0
 8013f14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	68ba      	ldr	r2, [r7, #8]
 8013f1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	68fa      	ldr	r2, [r7, #12]
 8013f20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013f22:	68ba      	ldr	r2, [r7, #8]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d812      	bhi.n	8013f50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	1ad2      	subs	r2, r2, r3
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	699b      	ldr	r3, [r3, #24]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d302      	bcc.n	8013f3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013f38:	2301      	movs	r3, #1
 8013f3a:	617b      	str	r3, [r7, #20]
 8013f3c:	e01b      	b.n	8013f76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013f3e:	4b10      	ldr	r3, [pc, #64]	; (8013f80 <prvInsertTimerInActiveList+0x7c>)
 8013f40:	681a      	ldr	r2, [r3, #0]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	3304      	adds	r3, #4
 8013f46:	4619      	mov	r1, r3
 8013f48:	4610      	mov	r0, r2
 8013f4a:	f7fe f8ee 	bl	801212a <vListInsert>
 8013f4e:	e012      	b.n	8013f76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013f50:	687a      	ldr	r2, [r7, #4]
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d206      	bcs.n	8013f66 <prvInsertTimerInActiveList+0x62>
 8013f58:	68ba      	ldr	r2, [r7, #8]
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d302      	bcc.n	8013f66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013f60:	2301      	movs	r3, #1
 8013f62:	617b      	str	r3, [r7, #20]
 8013f64:	e007      	b.n	8013f76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013f66:	4b07      	ldr	r3, [pc, #28]	; (8013f84 <prvInsertTimerInActiveList+0x80>)
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	3304      	adds	r3, #4
 8013f6e:	4619      	mov	r1, r3
 8013f70:	4610      	mov	r0, r2
 8013f72:	f7fe f8da 	bl	801212a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013f76:	697b      	ldr	r3, [r7, #20]
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3718      	adds	r7, #24
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}
 8013f80:	20003018 	.word	0x20003018
 8013f84:	20003014 	.word	0x20003014

08013f88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b08e      	sub	sp, #56	; 0x38
 8013f8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013f8e:	e0ca      	b.n	8014126 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	da18      	bge.n	8013fc8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013f96:	1d3b      	adds	r3, r7, #4
 8013f98:	3304      	adds	r3, #4
 8013f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d10a      	bne.n	8013fb8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa6:	f383 8811 	msr	BASEPRI, r3
 8013faa:	f3bf 8f6f 	isb	sy
 8013fae:	f3bf 8f4f 	dsb	sy
 8013fb2:	61fb      	str	r3, [r7, #28]
}
 8013fb4:	bf00      	nop
 8013fb6:	e7fe      	b.n	8013fb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fbe:	6850      	ldr	r0, [r2, #4]
 8013fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fc2:	6892      	ldr	r2, [r2, #8]
 8013fc4:	4611      	mov	r1, r2
 8013fc6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	f2c0 80aa 	blt.w	8014124 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd6:	695b      	ldr	r3, [r3, #20]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d004      	beq.n	8013fe6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fde:	3304      	adds	r3, #4
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fe f8db 	bl	801219c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013fe6:	463b      	mov	r3, r7
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7ff ff6b 	bl	8013ec4 <prvSampleTimeNow>
 8013fee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2b09      	cmp	r3, #9
 8013ff4:	f200 8097 	bhi.w	8014126 <prvProcessReceivedCommands+0x19e>
 8013ff8:	a201      	add	r2, pc, #4	; (adr r2, 8014000 <prvProcessReceivedCommands+0x78>)
 8013ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ffe:	bf00      	nop
 8014000:	08014029 	.word	0x08014029
 8014004:	08014029 	.word	0x08014029
 8014008:	08014029 	.word	0x08014029
 801400c:	0801409d 	.word	0x0801409d
 8014010:	080140b1 	.word	0x080140b1
 8014014:	080140fb 	.word	0x080140fb
 8014018:	08014029 	.word	0x08014029
 801401c:	08014029 	.word	0x08014029
 8014020:	0801409d 	.word	0x0801409d
 8014024:	080140b1 	.word	0x080140b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801402a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801402e:	f043 0301 	orr.w	r3, r3, #1
 8014032:	b2da      	uxtb	r2, r3
 8014034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801403a:	68ba      	ldr	r2, [r7, #8]
 801403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801403e:	699b      	ldr	r3, [r3, #24]
 8014040:	18d1      	adds	r1, r2, r3
 8014042:	68bb      	ldr	r3, [r7, #8]
 8014044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014048:	f7ff ff5c 	bl	8013f04 <prvInsertTimerInActiveList>
 801404c:	4603      	mov	r3, r0
 801404e:	2b00      	cmp	r3, #0
 8014050:	d069      	beq.n	8014126 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014054:	6a1b      	ldr	r3, [r3, #32]
 8014056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014058:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801405c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014060:	f003 0304 	and.w	r3, r3, #4
 8014064:	2b00      	cmp	r3, #0
 8014066:	d05e      	beq.n	8014126 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014068:	68ba      	ldr	r2, [r7, #8]
 801406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801406c:	699b      	ldr	r3, [r3, #24]
 801406e:	441a      	add	r2, r3
 8014070:	2300      	movs	r3, #0
 8014072:	9300      	str	r3, [sp, #0]
 8014074:	2300      	movs	r3, #0
 8014076:	2100      	movs	r1, #0
 8014078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801407a:	f7ff fe05 	bl	8013c88 <xTimerGenericCommand>
 801407e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014080:	6a3b      	ldr	r3, [r7, #32]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d14f      	bne.n	8014126 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801408a:	f383 8811 	msr	BASEPRI, r3
 801408e:	f3bf 8f6f 	isb	sy
 8014092:	f3bf 8f4f 	dsb	sy
 8014096:	61bb      	str	r3, [r7, #24]
}
 8014098:	bf00      	nop
 801409a:	e7fe      	b.n	801409a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801409e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140a2:	f023 0301 	bic.w	r3, r3, #1
 80140a6:	b2da      	uxtb	r2, r3
 80140a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80140ae:	e03a      	b.n	8014126 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80140b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140b6:	f043 0301 	orr.w	r3, r3, #1
 80140ba:	b2da      	uxtb	r2, r3
 80140bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80140c2:	68ba      	ldr	r2, [r7, #8]
 80140c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80140c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ca:	699b      	ldr	r3, [r3, #24]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d10a      	bne.n	80140e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80140d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d4:	f383 8811 	msr	BASEPRI, r3
 80140d8:	f3bf 8f6f 	isb	sy
 80140dc:	f3bf 8f4f 	dsb	sy
 80140e0:	617b      	str	r3, [r7, #20]
}
 80140e2:	bf00      	nop
 80140e4:	e7fe      	b.n	80140e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80140e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140e8:	699a      	ldr	r2, [r3, #24]
 80140ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ec:	18d1      	adds	r1, r2, r3
 80140ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140f4:	f7ff ff06 	bl	8013f04 <prvInsertTimerInActiveList>
					break;
 80140f8:	e015      	b.n	8014126 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80140fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014100:	f003 0302 	and.w	r3, r3, #2
 8014104:	2b00      	cmp	r3, #0
 8014106:	d103      	bne.n	8014110 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801410a:	f000 fbe1 	bl	80148d0 <vPortFree>
 801410e:	e00a      	b.n	8014126 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014116:	f023 0301 	bic.w	r3, r3, #1
 801411a:	b2da      	uxtb	r2, r3
 801411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801411e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014122:	e000      	b.n	8014126 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014124:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014126:	4b08      	ldr	r3, [pc, #32]	; (8014148 <prvProcessReceivedCommands+0x1c0>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	1d39      	adds	r1, r7, #4
 801412c:	2200      	movs	r2, #0
 801412e:	4618      	mov	r0, r3
 8014130:	f7fe fb36 	bl	80127a0 <xQueueReceive>
 8014134:	4603      	mov	r3, r0
 8014136:	2b00      	cmp	r3, #0
 8014138:	f47f af2a 	bne.w	8013f90 <prvProcessReceivedCommands+0x8>
	}
}
 801413c:	bf00      	nop
 801413e:	bf00      	nop
 8014140:	3730      	adds	r7, #48	; 0x30
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}
 8014146:	bf00      	nop
 8014148:	2000301c 	.word	0x2000301c

0801414c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b088      	sub	sp, #32
 8014150:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014152:	e048      	b.n	80141e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014154:	4b2d      	ldr	r3, [pc, #180]	; (801420c <prvSwitchTimerLists+0xc0>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	68db      	ldr	r3, [r3, #12]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801415e:	4b2b      	ldr	r3, [pc, #172]	; (801420c <prvSwitchTimerLists+0xc0>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	68db      	ldr	r3, [r3, #12]
 8014164:	68db      	ldr	r3, [r3, #12]
 8014166:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	3304      	adds	r3, #4
 801416c:	4618      	mov	r0, r3
 801416e:	f7fe f815 	bl	801219c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	6a1b      	ldr	r3, [r3, #32]
 8014176:	68f8      	ldr	r0, [r7, #12]
 8014178:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014180:	f003 0304 	and.w	r3, r3, #4
 8014184:	2b00      	cmp	r3, #0
 8014186:	d02e      	beq.n	80141e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	699b      	ldr	r3, [r3, #24]
 801418c:	693a      	ldr	r2, [r7, #16]
 801418e:	4413      	add	r3, r2
 8014190:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014192:	68ba      	ldr	r2, [r7, #8]
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	429a      	cmp	r2, r3
 8014198:	d90e      	bls.n	80141b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	68ba      	ldr	r2, [r7, #8]
 801419e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	68fa      	ldr	r2, [r7, #12]
 80141a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80141a6:	4b19      	ldr	r3, [pc, #100]	; (801420c <prvSwitchTimerLists+0xc0>)
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	3304      	adds	r3, #4
 80141ae:	4619      	mov	r1, r3
 80141b0:	4610      	mov	r0, r2
 80141b2:	f7fd ffba 	bl	801212a <vListInsert>
 80141b6:	e016      	b.n	80141e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80141b8:	2300      	movs	r3, #0
 80141ba:	9300      	str	r3, [sp, #0]
 80141bc:	2300      	movs	r3, #0
 80141be:	693a      	ldr	r2, [r7, #16]
 80141c0:	2100      	movs	r1, #0
 80141c2:	68f8      	ldr	r0, [r7, #12]
 80141c4:	f7ff fd60 	bl	8013c88 <xTimerGenericCommand>
 80141c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d10a      	bne.n	80141e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80141d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141d4:	f383 8811 	msr	BASEPRI, r3
 80141d8:	f3bf 8f6f 	isb	sy
 80141dc:	f3bf 8f4f 	dsb	sy
 80141e0:	603b      	str	r3, [r7, #0]
}
 80141e2:	bf00      	nop
 80141e4:	e7fe      	b.n	80141e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80141e6:	4b09      	ldr	r3, [pc, #36]	; (801420c <prvSwitchTimerLists+0xc0>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d1b1      	bne.n	8014154 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80141f0:	4b06      	ldr	r3, [pc, #24]	; (801420c <prvSwitchTimerLists+0xc0>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80141f6:	4b06      	ldr	r3, [pc, #24]	; (8014210 <prvSwitchTimerLists+0xc4>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	4a04      	ldr	r2, [pc, #16]	; (801420c <prvSwitchTimerLists+0xc0>)
 80141fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80141fe:	4a04      	ldr	r2, [pc, #16]	; (8014210 <prvSwitchTimerLists+0xc4>)
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	6013      	str	r3, [r2, #0]
}
 8014204:	bf00      	nop
 8014206:	3718      	adds	r7, #24
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	20003014 	.word	0x20003014
 8014210:	20003018 	.word	0x20003018

08014214 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801421a:	f000 f96b 	bl	80144f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801421e:	4b15      	ldr	r3, [pc, #84]	; (8014274 <prvCheckForValidListAndQueue+0x60>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d120      	bne.n	8014268 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014226:	4814      	ldr	r0, [pc, #80]	; (8014278 <prvCheckForValidListAndQueue+0x64>)
 8014228:	f7fd ff2e 	bl	8012088 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801422c:	4813      	ldr	r0, [pc, #76]	; (801427c <prvCheckForValidListAndQueue+0x68>)
 801422e:	f7fd ff2b 	bl	8012088 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014232:	4b13      	ldr	r3, [pc, #76]	; (8014280 <prvCheckForValidListAndQueue+0x6c>)
 8014234:	4a10      	ldr	r2, [pc, #64]	; (8014278 <prvCheckForValidListAndQueue+0x64>)
 8014236:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014238:	4b12      	ldr	r3, [pc, #72]	; (8014284 <prvCheckForValidListAndQueue+0x70>)
 801423a:	4a10      	ldr	r2, [pc, #64]	; (801427c <prvCheckForValidListAndQueue+0x68>)
 801423c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801423e:	2300      	movs	r3, #0
 8014240:	9300      	str	r3, [sp, #0]
 8014242:	4b11      	ldr	r3, [pc, #68]	; (8014288 <prvCheckForValidListAndQueue+0x74>)
 8014244:	4a11      	ldr	r2, [pc, #68]	; (801428c <prvCheckForValidListAndQueue+0x78>)
 8014246:	2110      	movs	r1, #16
 8014248:	200a      	movs	r0, #10
 801424a:	f7fe f839 	bl	80122c0 <xQueueGenericCreateStatic>
 801424e:	4603      	mov	r3, r0
 8014250:	4a08      	ldr	r2, [pc, #32]	; (8014274 <prvCheckForValidListAndQueue+0x60>)
 8014252:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014254:	4b07      	ldr	r3, [pc, #28]	; (8014274 <prvCheckForValidListAndQueue+0x60>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d005      	beq.n	8014268 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801425c:	4b05      	ldr	r3, [pc, #20]	; (8014274 <prvCheckForValidListAndQueue+0x60>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	490b      	ldr	r1, [pc, #44]	; (8014290 <prvCheckForValidListAndQueue+0x7c>)
 8014262:	4618      	mov	r0, r3
 8014264:	f7fe fd6c 	bl	8012d40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014268:	f000 f974 	bl	8014554 <vPortExitCritical>
}
 801426c:	bf00      	nop
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}
 8014272:	bf00      	nop
 8014274:	2000301c 	.word	0x2000301c
 8014278:	20002fec 	.word	0x20002fec
 801427c:	20003000 	.word	0x20003000
 8014280:	20003014 	.word	0x20003014
 8014284:	20003018 	.word	0x20003018
 8014288:	200030c8 	.word	0x200030c8
 801428c:	20003028 	.word	0x20003028
 8014290:	08019e6c 	.word	0x08019e6c

08014294 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014294:	b480      	push	{r7}
 8014296:	b085      	sub	sp, #20
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	3b04      	subs	r3, #4
 80142a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80142ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	3b04      	subs	r3, #4
 80142b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	f023 0201 	bic.w	r2, r3, #1
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	3b04      	subs	r3, #4
 80142c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80142c4:	4a0c      	ldr	r2, [pc, #48]	; (80142f8 <pxPortInitialiseStack+0x64>)
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	3b14      	subs	r3, #20
 80142ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80142d0:	687a      	ldr	r2, [r7, #4]
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	3b04      	subs	r3, #4
 80142da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	f06f 0202 	mvn.w	r2, #2
 80142e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	3b20      	subs	r3, #32
 80142e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80142ea:	68fb      	ldr	r3, [r7, #12]
}
 80142ec:	4618      	mov	r0, r3
 80142ee:	3714      	adds	r7, #20
 80142f0:	46bd      	mov	sp, r7
 80142f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f6:	4770      	bx	lr
 80142f8:	080142fd 	.word	0x080142fd

080142fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80142fc:	b480      	push	{r7}
 80142fe:	b085      	sub	sp, #20
 8014300:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014302:	2300      	movs	r3, #0
 8014304:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014306:	4b12      	ldr	r3, [pc, #72]	; (8014350 <prvTaskExitError+0x54>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801430e:	d00a      	beq.n	8014326 <prvTaskExitError+0x2a>
	__asm volatile
 8014310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014314:	f383 8811 	msr	BASEPRI, r3
 8014318:	f3bf 8f6f 	isb	sy
 801431c:	f3bf 8f4f 	dsb	sy
 8014320:	60fb      	str	r3, [r7, #12]
}
 8014322:	bf00      	nop
 8014324:	e7fe      	b.n	8014324 <prvTaskExitError+0x28>
	__asm volatile
 8014326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801432a:	f383 8811 	msr	BASEPRI, r3
 801432e:	f3bf 8f6f 	isb	sy
 8014332:	f3bf 8f4f 	dsb	sy
 8014336:	60bb      	str	r3, [r7, #8]
}
 8014338:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801433a:	bf00      	nop
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d0fc      	beq.n	801433c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014342:	bf00      	nop
 8014344:	bf00      	nop
 8014346:	3714      	adds	r7, #20
 8014348:	46bd      	mov	sp, r7
 801434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434e:	4770      	bx	lr
 8014350:	2000031c 	.word	0x2000031c
	...

08014360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014360:	4b07      	ldr	r3, [pc, #28]	; (8014380 <pxCurrentTCBConst2>)
 8014362:	6819      	ldr	r1, [r3, #0]
 8014364:	6808      	ldr	r0, [r1, #0]
 8014366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801436a:	f380 8809 	msr	PSP, r0
 801436e:	f3bf 8f6f 	isb	sy
 8014372:	f04f 0000 	mov.w	r0, #0
 8014376:	f380 8811 	msr	BASEPRI, r0
 801437a:	4770      	bx	lr
 801437c:	f3af 8000 	nop.w

08014380 <pxCurrentTCBConst2>:
 8014380:	20002aec 	.word	0x20002aec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014384:	bf00      	nop
 8014386:	bf00      	nop

08014388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014388:	4808      	ldr	r0, [pc, #32]	; (80143ac <prvPortStartFirstTask+0x24>)
 801438a:	6800      	ldr	r0, [r0, #0]
 801438c:	6800      	ldr	r0, [r0, #0]
 801438e:	f380 8808 	msr	MSP, r0
 8014392:	f04f 0000 	mov.w	r0, #0
 8014396:	f380 8814 	msr	CONTROL, r0
 801439a:	b662      	cpsie	i
 801439c:	b661      	cpsie	f
 801439e:	f3bf 8f4f 	dsb	sy
 80143a2:	f3bf 8f6f 	isb	sy
 80143a6:	df00      	svc	0
 80143a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80143aa:	bf00      	nop
 80143ac:	e000ed08 	.word	0xe000ed08

080143b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b086      	sub	sp, #24
 80143b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80143b6:	4b46      	ldr	r3, [pc, #280]	; (80144d0 <xPortStartScheduler+0x120>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	4a46      	ldr	r2, [pc, #280]	; (80144d4 <xPortStartScheduler+0x124>)
 80143bc:	4293      	cmp	r3, r2
 80143be:	d10a      	bne.n	80143d6 <xPortStartScheduler+0x26>
	__asm volatile
 80143c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143c4:	f383 8811 	msr	BASEPRI, r3
 80143c8:	f3bf 8f6f 	isb	sy
 80143cc:	f3bf 8f4f 	dsb	sy
 80143d0:	613b      	str	r3, [r7, #16]
}
 80143d2:	bf00      	nop
 80143d4:	e7fe      	b.n	80143d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80143d6:	4b3e      	ldr	r3, [pc, #248]	; (80144d0 <xPortStartScheduler+0x120>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	4a3f      	ldr	r2, [pc, #252]	; (80144d8 <xPortStartScheduler+0x128>)
 80143dc:	4293      	cmp	r3, r2
 80143de:	d10a      	bne.n	80143f6 <xPortStartScheduler+0x46>
	__asm volatile
 80143e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e4:	f383 8811 	msr	BASEPRI, r3
 80143e8:	f3bf 8f6f 	isb	sy
 80143ec:	f3bf 8f4f 	dsb	sy
 80143f0:	60fb      	str	r3, [r7, #12]
}
 80143f2:	bf00      	nop
 80143f4:	e7fe      	b.n	80143f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80143f6:	4b39      	ldr	r3, [pc, #228]	; (80144dc <xPortStartScheduler+0x12c>)
 80143f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	b2db      	uxtb	r3, r3
 8014400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	22ff      	movs	r2, #255	; 0xff
 8014406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	781b      	ldrb	r3, [r3, #0]
 801440c:	b2db      	uxtb	r3, r3
 801440e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014410:	78fb      	ldrb	r3, [r7, #3]
 8014412:	b2db      	uxtb	r3, r3
 8014414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014418:	b2da      	uxtb	r2, r3
 801441a:	4b31      	ldr	r3, [pc, #196]	; (80144e0 <xPortStartScheduler+0x130>)
 801441c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801441e:	4b31      	ldr	r3, [pc, #196]	; (80144e4 <xPortStartScheduler+0x134>)
 8014420:	2207      	movs	r2, #7
 8014422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014424:	e009      	b.n	801443a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014426:	4b2f      	ldr	r3, [pc, #188]	; (80144e4 <xPortStartScheduler+0x134>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	3b01      	subs	r3, #1
 801442c:	4a2d      	ldr	r2, [pc, #180]	; (80144e4 <xPortStartScheduler+0x134>)
 801442e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014430:	78fb      	ldrb	r3, [r7, #3]
 8014432:	b2db      	uxtb	r3, r3
 8014434:	005b      	lsls	r3, r3, #1
 8014436:	b2db      	uxtb	r3, r3
 8014438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801443a:	78fb      	ldrb	r3, [r7, #3]
 801443c:	b2db      	uxtb	r3, r3
 801443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014442:	2b80      	cmp	r3, #128	; 0x80
 8014444:	d0ef      	beq.n	8014426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014446:	4b27      	ldr	r3, [pc, #156]	; (80144e4 <xPortStartScheduler+0x134>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	f1c3 0307 	rsb	r3, r3, #7
 801444e:	2b04      	cmp	r3, #4
 8014450:	d00a      	beq.n	8014468 <xPortStartScheduler+0xb8>
	__asm volatile
 8014452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014456:	f383 8811 	msr	BASEPRI, r3
 801445a:	f3bf 8f6f 	isb	sy
 801445e:	f3bf 8f4f 	dsb	sy
 8014462:	60bb      	str	r3, [r7, #8]
}
 8014464:	bf00      	nop
 8014466:	e7fe      	b.n	8014466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014468:	4b1e      	ldr	r3, [pc, #120]	; (80144e4 <xPortStartScheduler+0x134>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	021b      	lsls	r3, r3, #8
 801446e:	4a1d      	ldr	r2, [pc, #116]	; (80144e4 <xPortStartScheduler+0x134>)
 8014470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014472:	4b1c      	ldr	r3, [pc, #112]	; (80144e4 <xPortStartScheduler+0x134>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801447a:	4a1a      	ldr	r2, [pc, #104]	; (80144e4 <xPortStartScheduler+0x134>)
 801447c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	b2da      	uxtb	r2, r3
 8014482:	697b      	ldr	r3, [r7, #20]
 8014484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014486:	4b18      	ldr	r3, [pc, #96]	; (80144e8 <xPortStartScheduler+0x138>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	4a17      	ldr	r2, [pc, #92]	; (80144e8 <xPortStartScheduler+0x138>)
 801448c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014492:	4b15      	ldr	r3, [pc, #84]	; (80144e8 <xPortStartScheduler+0x138>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	4a14      	ldr	r2, [pc, #80]	; (80144e8 <xPortStartScheduler+0x138>)
 8014498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801449c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801449e:	f000 f8dd 	bl	801465c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80144a2:	4b12      	ldr	r3, [pc, #72]	; (80144ec <xPortStartScheduler+0x13c>)
 80144a4:	2200      	movs	r2, #0
 80144a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80144a8:	f000 f8fc 	bl	80146a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80144ac:	4b10      	ldr	r3, [pc, #64]	; (80144f0 <xPortStartScheduler+0x140>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	4a0f      	ldr	r2, [pc, #60]	; (80144f0 <xPortStartScheduler+0x140>)
 80144b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80144b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80144b8:	f7ff ff66 	bl	8014388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80144bc:	f7ff f850 	bl	8013560 <vTaskSwitchContext>
	prvTaskExitError();
 80144c0:	f7ff ff1c 	bl	80142fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80144c4:	2300      	movs	r3, #0
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3718      	adds	r7, #24
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}
 80144ce:	bf00      	nop
 80144d0:	e000ed00 	.word	0xe000ed00
 80144d4:	410fc271 	.word	0x410fc271
 80144d8:	410fc270 	.word	0x410fc270
 80144dc:	e000e400 	.word	0xe000e400
 80144e0:	20003118 	.word	0x20003118
 80144e4:	2000311c 	.word	0x2000311c
 80144e8:	e000ed20 	.word	0xe000ed20
 80144ec:	2000031c 	.word	0x2000031c
 80144f0:	e000ef34 	.word	0xe000ef34

080144f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80144f4:	b480      	push	{r7}
 80144f6:	b083      	sub	sp, #12
 80144f8:	af00      	add	r7, sp, #0
	__asm volatile
 80144fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144fe:	f383 8811 	msr	BASEPRI, r3
 8014502:	f3bf 8f6f 	isb	sy
 8014506:	f3bf 8f4f 	dsb	sy
 801450a:	607b      	str	r3, [r7, #4]
}
 801450c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801450e:	4b0f      	ldr	r3, [pc, #60]	; (801454c <vPortEnterCritical+0x58>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	3301      	adds	r3, #1
 8014514:	4a0d      	ldr	r2, [pc, #52]	; (801454c <vPortEnterCritical+0x58>)
 8014516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014518:	4b0c      	ldr	r3, [pc, #48]	; (801454c <vPortEnterCritical+0x58>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2b01      	cmp	r3, #1
 801451e:	d10f      	bne.n	8014540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014520:	4b0b      	ldr	r3, [pc, #44]	; (8014550 <vPortEnterCritical+0x5c>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	b2db      	uxtb	r3, r3
 8014526:	2b00      	cmp	r3, #0
 8014528:	d00a      	beq.n	8014540 <vPortEnterCritical+0x4c>
	__asm volatile
 801452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801452e:	f383 8811 	msr	BASEPRI, r3
 8014532:	f3bf 8f6f 	isb	sy
 8014536:	f3bf 8f4f 	dsb	sy
 801453a:	603b      	str	r3, [r7, #0]
}
 801453c:	bf00      	nop
 801453e:	e7fe      	b.n	801453e <vPortEnterCritical+0x4a>
	}
}
 8014540:	bf00      	nop
 8014542:	370c      	adds	r7, #12
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr
 801454c:	2000031c 	.word	0x2000031c
 8014550:	e000ed04 	.word	0xe000ed04

08014554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014554:	b480      	push	{r7}
 8014556:	b083      	sub	sp, #12
 8014558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801455a:	4b12      	ldr	r3, [pc, #72]	; (80145a4 <vPortExitCritical+0x50>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d10a      	bne.n	8014578 <vPortExitCritical+0x24>
	__asm volatile
 8014562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014566:	f383 8811 	msr	BASEPRI, r3
 801456a:	f3bf 8f6f 	isb	sy
 801456e:	f3bf 8f4f 	dsb	sy
 8014572:	607b      	str	r3, [r7, #4]
}
 8014574:	bf00      	nop
 8014576:	e7fe      	b.n	8014576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014578:	4b0a      	ldr	r3, [pc, #40]	; (80145a4 <vPortExitCritical+0x50>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	3b01      	subs	r3, #1
 801457e:	4a09      	ldr	r2, [pc, #36]	; (80145a4 <vPortExitCritical+0x50>)
 8014580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014582:	4b08      	ldr	r3, [pc, #32]	; (80145a4 <vPortExitCritical+0x50>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d105      	bne.n	8014596 <vPortExitCritical+0x42>
 801458a:	2300      	movs	r3, #0
 801458c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	f383 8811 	msr	BASEPRI, r3
}
 8014594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014596:	bf00      	nop
 8014598:	370c      	adds	r7, #12
 801459a:	46bd      	mov	sp, r7
 801459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a0:	4770      	bx	lr
 80145a2:	bf00      	nop
 80145a4:	2000031c 	.word	0x2000031c
	...

080145b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80145b0:	f3ef 8009 	mrs	r0, PSP
 80145b4:	f3bf 8f6f 	isb	sy
 80145b8:	4b15      	ldr	r3, [pc, #84]	; (8014610 <pxCurrentTCBConst>)
 80145ba:	681a      	ldr	r2, [r3, #0]
 80145bc:	f01e 0f10 	tst.w	lr, #16
 80145c0:	bf08      	it	eq
 80145c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80145c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145ca:	6010      	str	r0, [r2, #0]
 80145cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80145d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80145d4:	f380 8811 	msr	BASEPRI, r0
 80145d8:	f3bf 8f4f 	dsb	sy
 80145dc:	f3bf 8f6f 	isb	sy
 80145e0:	f7fe ffbe 	bl	8013560 <vTaskSwitchContext>
 80145e4:	f04f 0000 	mov.w	r0, #0
 80145e8:	f380 8811 	msr	BASEPRI, r0
 80145ec:	bc09      	pop	{r0, r3}
 80145ee:	6819      	ldr	r1, [r3, #0]
 80145f0:	6808      	ldr	r0, [r1, #0]
 80145f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145f6:	f01e 0f10 	tst.w	lr, #16
 80145fa:	bf08      	it	eq
 80145fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014600:	f380 8809 	msr	PSP, r0
 8014604:	f3bf 8f6f 	isb	sy
 8014608:	4770      	bx	lr
 801460a:	bf00      	nop
 801460c:	f3af 8000 	nop.w

08014610 <pxCurrentTCBConst>:
 8014610:	20002aec 	.word	0x20002aec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014614:	bf00      	nop
 8014616:	bf00      	nop

08014618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b082      	sub	sp, #8
 801461c:	af00      	add	r7, sp, #0
	__asm volatile
 801461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014622:	f383 8811 	msr	BASEPRI, r3
 8014626:	f3bf 8f6f 	isb	sy
 801462a:	f3bf 8f4f 	dsb	sy
 801462e:	607b      	str	r3, [r7, #4]
}
 8014630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014632:	f7fe fedb 	bl	80133ec <xTaskIncrementTick>
 8014636:	4603      	mov	r3, r0
 8014638:	2b00      	cmp	r3, #0
 801463a:	d003      	beq.n	8014644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801463c:	4b06      	ldr	r3, [pc, #24]	; (8014658 <xPortSysTickHandler+0x40>)
 801463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014642:	601a      	str	r2, [r3, #0]
 8014644:	2300      	movs	r3, #0
 8014646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	f383 8811 	msr	BASEPRI, r3
}
 801464e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014650:	bf00      	nop
 8014652:	3708      	adds	r7, #8
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}
 8014658:	e000ed04 	.word	0xe000ed04

0801465c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801465c:	b480      	push	{r7}
 801465e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014660:	4b0b      	ldr	r3, [pc, #44]	; (8014690 <vPortSetupTimerInterrupt+0x34>)
 8014662:	2200      	movs	r2, #0
 8014664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014666:	4b0b      	ldr	r3, [pc, #44]	; (8014694 <vPortSetupTimerInterrupt+0x38>)
 8014668:	2200      	movs	r2, #0
 801466a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801466c:	4b0a      	ldr	r3, [pc, #40]	; (8014698 <vPortSetupTimerInterrupt+0x3c>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	4a0a      	ldr	r2, [pc, #40]	; (801469c <vPortSetupTimerInterrupt+0x40>)
 8014672:	fba2 2303 	umull	r2, r3, r2, r3
 8014676:	099b      	lsrs	r3, r3, #6
 8014678:	4a09      	ldr	r2, [pc, #36]	; (80146a0 <vPortSetupTimerInterrupt+0x44>)
 801467a:	3b01      	subs	r3, #1
 801467c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801467e:	4b04      	ldr	r3, [pc, #16]	; (8014690 <vPortSetupTimerInterrupt+0x34>)
 8014680:	2207      	movs	r2, #7
 8014682:	601a      	str	r2, [r3, #0]
}
 8014684:	bf00      	nop
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr
 801468e:	bf00      	nop
 8014690:	e000e010 	.word	0xe000e010
 8014694:	e000e018 	.word	0xe000e018
 8014698:	20000310 	.word	0x20000310
 801469c:	10624dd3 	.word	0x10624dd3
 80146a0:	e000e014 	.word	0xe000e014

080146a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80146a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80146b4 <vPortEnableVFP+0x10>
 80146a8:	6801      	ldr	r1, [r0, #0]
 80146aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80146ae:	6001      	str	r1, [r0, #0]
 80146b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80146b2:	bf00      	nop
 80146b4:	e000ed88 	.word	0xe000ed88

080146b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80146b8:	b480      	push	{r7}
 80146ba:	b085      	sub	sp, #20
 80146bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80146be:	f3ef 8305 	mrs	r3, IPSR
 80146c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	2b0f      	cmp	r3, #15
 80146c8:	d914      	bls.n	80146f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80146ca:	4a17      	ldr	r2, [pc, #92]	; (8014728 <vPortValidateInterruptPriority+0x70>)
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	4413      	add	r3, r2
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80146d4:	4b15      	ldr	r3, [pc, #84]	; (801472c <vPortValidateInterruptPriority+0x74>)
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	7afa      	ldrb	r2, [r7, #11]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d20a      	bcs.n	80146f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80146de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e2:	f383 8811 	msr	BASEPRI, r3
 80146e6:	f3bf 8f6f 	isb	sy
 80146ea:	f3bf 8f4f 	dsb	sy
 80146ee:	607b      	str	r3, [r7, #4]
}
 80146f0:	bf00      	nop
 80146f2:	e7fe      	b.n	80146f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80146f4:	4b0e      	ldr	r3, [pc, #56]	; (8014730 <vPortValidateInterruptPriority+0x78>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80146fc:	4b0d      	ldr	r3, [pc, #52]	; (8014734 <vPortValidateInterruptPriority+0x7c>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	429a      	cmp	r2, r3
 8014702:	d90a      	bls.n	801471a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014708:	f383 8811 	msr	BASEPRI, r3
 801470c:	f3bf 8f6f 	isb	sy
 8014710:	f3bf 8f4f 	dsb	sy
 8014714:	603b      	str	r3, [r7, #0]
}
 8014716:	bf00      	nop
 8014718:	e7fe      	b.n	8014718 <vPortValidateInterruptPriority+0x60>
	}
 801471a:	bf00      	nop
 801471c:	3714      	adds	r7, #20
 801471e:	46bd      	mov	sp, r7
 8014720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014724:	4770      	bx	lr
 8014726:	bf00      	nop
 8014728:	e000e3f0 	.word	0xe000e3f0
 801472c:	20003118 	.word	0x20003118
 8014730:	e000ed0c 	.word	0xe000ed0c
 8014734:	2000311c 	.word	0x2000311c

08014738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b08a      	sub	sp, #40	; 0x28
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014740:	2300      	movs	r3, #0
 8014742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014744:	f7fe fd96 	bl	8013274 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014748:	4b5b      	ldr	r3, [pc, #364]	; (80148b8 <pvPortMalloc+0x180>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d101      	bne.n	8014754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014750:	f000 f92c 	bl	80149ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014754:	4b59      	ldr	r3, [pc, #356]	; (80148bc <pvPortMalloc+0x184>)
 8014756:	681a      	ldr	r2, [r3, #0]
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	4013      	ands	r3, r2
 801475c:	2b00      	cmp	r3, #0
 801475e:	f040 8093 	bne.w	8014888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d01d      	beq.n	80147a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014768:	2208      	movs	r2, #8
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	4413      	add	r3, r2
 801476e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f003 0307 	and.w	r3, r3, #7
 8014776:	2b00      	cmp	r3, #0
 8014778:	d014      	beq.n	80147a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f023 0307 	bic.w	r3, r3, #7
 8014780:	3308      	adds	r3, #8
 8014782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f003 0307 	and.w	r3, r3, #7
 801478a:	2b00      	cmp	r3, #0
 801478c:	d00a      	beq.n	80147a4 <pvPortMalloc+0x6c>
	__asm volatile
 801478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014792:	f383 8811 	msr	BASEPRI, r3
 8014796:	f3bf 8f6f 	isb	sy
 801479a:	f3bf 8f4f 	dsb	sy
 801479e:	617b      	str	r3, [r7, #20]
}
 80147a0:	bf00      	nop
 80147a2:	e7fe      	b.n	80147a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d06e      	beq.n	8014888 <pvPortMalloc+0x150>
 80147aa:	4b45      	ldr	r3, [pc, #276]	; (80148c0 <pvPortMalloc+0x188>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	687a      	ldr	r2, [r7, #4]
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d869      	bhi.n	8014888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80147b4:	4b43      	ldr	r3, [pc, #268]	; (80148c4 <pvPortMalloc+0x18c>)
 80147b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80147b8:	4b42      	ldr	r3, [pc, #264]	; (80148c4 <pvPortMalloc+0x18c>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80147be:	e004      	b.n	80147ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80147c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80147c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80147ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147cc:	685b      	ldr	r3, [r3, #4]
 80147ce:	687a      	ldr	r2, [r7, #4]
 80147d0:	429a      	cmp	r2, r3
 80147d2:	d903      	bls.n	80147dc <pvPortMalloc+0xa4>
 80147d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d1f1      	bne.n	80147c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80147dc:	4b36      	ldr	r3, [pc, #216]	; (80148b8 <pvPortMalloc+0x180>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147e2:	429a      	cmp	r2, r3
 80147e4:	d050      	beq.n	8014888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80147e6:	6a3b      	ldr	r3, [r7, #32]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	2208      	movs	r2, #8
 80147ec:	4413      	add	r3, r2
 80147ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80147f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f2:	681a      	ldr	r2, [r3, #0]
 80147f4:	6a3b      	ldr	r3, [r7, #32]
 80147f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80147f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fa:	685a      	ldr	r2, [r3, #4]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	1ad2      	subs	r2, r2, r3
 8014800:	2308      	movs	r3, #8
 8014802:	005b      	lsls	r3, r3, #1
 8014804:	429a      	cmp	r2, r3
 8014806:	d91f      	bls.n	8014848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	4413      	add	r3, r2
 801480e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014810:	69bb      	ldr	r3, [r7, #24]
 8014812:	f003 0307 	and.w	r3, r3, #7
 8014816:	2b00      	cmp	r3, #0
 8014818:	d00a      	beq.n	8014830 <pvPortMalloc+0xf8>
	__asm volatile
 801481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801481e:	f383 8811 	msr	BASEPRI, r3
 8014822:	f3bf 8f6f 	isb	sy
 8014826:	f3bf 8f4f 	dsb	sy
 801482a:	613b      	str	r3, [r7, #16]
}
 801482c:	bf00      	nop
 801482e:	e7fe      	b.n	801482e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014832:	685a      	ldr	r2, [r3, #4]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	1ad2      	subs	r2, r2, r3
 8014838:	69bb      	ldr	r3, [r7, #24]
 801483a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801483e:	687a      	ldr	r2, [r7, #4]
 8014840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014842:	69b8      	ldr	r0, [r7, #24]
 8014844:	f000 f914 	bl	8014a70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014848:	4b1d      	ldr	r3, [pc, #116]	; (80148c0 <pvPortMalloc+0x188>)
 801484a:	681a      	ldr	r2, [r3, #0]
 801484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484e:	685b      	ldr	r3, [r3, #4]
 8014850:	1ad3      	subs	r3, r2, r3
 8014852:	4a1b      	ldr	r2, [pc, #108]	; (80148c0 <pvPortMalloc+0x188>)
 8014854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014856:	4b1a      	ldr	r3, [pc, #104]	; (80148c0 <pvPortMalloc+0x188>)
 8014858:	681a      	ldr	r2, [r3, #0]
 801485a:	4b1b      	ldr	r3, [pc, #108]	; (80148c8 <pvPortMalloc+0x190>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	429a      	cmp	r2, r3
 8014860:	d203      	bcs.n	801486a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014862:	4b17      	ldr	r3, [pc, #92]	; (80148c0 <pvPortMalloc+0x188>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	4a18      	ldr	r2, [pc, #96]	; (80148c8 <pvPortMalloc+0x190>)
 8014868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486c:	685a      	ldr	r2, [r3, #4]
 801486e:	4b13      	ldr	r3, [pc, #76]	; (80148bc <pvPortMalloc+0x184>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	431a      	orrs	r2, r3
 8014874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801487a:	2200      	movs	r2, #0
 801487c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801487e:	4b13      	ldr	r3, [pc, #76]	; (80148cc <pvPortMalloc+0x194>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	3301      	adds	r3, #1
 8014884:	4a11      	ldr	r2, [pc, #68]	; (80148cc <pvPortMalloc+0x194>)
 8014886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014888:	f7fe fd02 	bl	8013290 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801488c:	69fb      	ldr	r3, [r7, #28]
 801488e:	f003 0307 	and.w	r3, r3, #7
 8014892:	2b00      	cmp	r3, #0
 8014894:	d00a      	beq.n	80148ac <pvPortMalloc+0x174>
	__asm volatile
 8014896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801489a:	f383 8811 	msr	BASEPRI, r3
 801489e:	f3bf 8f6f 	isb	sy
 80148a2:	f3bf 8f4f 	dsb	sy
 80148a6:	60fb      	str	r3, [r7, #12]
}
 80148a8:	bf00      	nop
 80148aa:	e7fe      	b.n	80148aa <pvPortMalloc+0x172>
	return pvReturn;
 80148ac:	69fb      	ldr	r3, [r7, #28]
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3728      	adds	r7, #40	; 0x28
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	20006d28 	.word	0x20006d28
 80148bc:	20006d3c 	.word	0x20006d3c
 80148c0:	20006d2c 	.word	0x20006d2c
 80148c4:	20006d20 	.word	0x20006d20
 80148c8:	20006d30 	.word	0x20006d30
 80148cc:	20006d34 	.word	0x20006d34

080148d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b086      	sub	sp, #24
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d04d      	beq.n	801497e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80148e2:	2308      	movs	r3, #8
 80148e4:	425b      	negs	r3, r3
 80148e6:	697a      	ldr	r2, [r7, #20]
 80148e8:	4413      	add	r3, r2
 80148ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80148f0:	693b      	ldr	r3, [r7, #16]
 80148f2:	685a      	ldr	r2, [r3, #4]
 80148f4:	4b24      	ldr	r3, [pc, #144]	; (8014988 <vPortFree+0xb8>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	4013      	ands	r3, r2
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d10a      	bne.n	8014914 <vPortFree+0x44>
	__asm volatile
 80148fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014902:	f383 8811 	msr	BASEPRI, r3
 8014906:	f3bf 8f6f 	isb	sy
 801490a:	f3bf 8f4f 	dsb	sy
 801490e:	60fb      	str	r3, [r7, #12]
}
 8014910:	bf00      	nop
 8014912:	e7fe      	b.n	8014912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d00a      	beq.n	8014932 <vPortFree+0x62>
	__asm volatile
 801491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014920:	f383 8811 	msr	BASEPRI, r3
 8014924:	f3bf 8f6f 	isb	sy
 8014928:	f3bf 8f4f 	dsb	sy
 801492c:	60bb      	str	r3, [r7, #8]
}
 801492e:	bf00      	nop
 8014930:	e7fe      	b.n	8014930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	685a      	ldr	r2, [r3, #4]
 8014936:	4b14      	ldr	r3, [pc, #80]	; (8014988 <vPortFree+0xb8>)
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	4013      	ands	r3, r2
 801493c:	2b00      	cmp	r3, #0
 801493e:	d01e      	beq.n	801497e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d11a      	bne.n	801497e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	685a      	ldr	r2, [r3, #4]
 801494c:	4b0e      	ldr	r3, [pc, #56]	; (8014988 <vPortFree+0xb8>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	43db      	mvns	r3, r3
 8014952:	401a      	ands	r2, r3
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014958:	f7fe fc8c 	bl	8013274 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	685a      	ldr	r2, [r3, #4]
 8014960:	4b0a      	ldr	r3, [pc, #40]	; (801498c <vPortFree+0xbc>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	4413      	add	r3, r2
 8014966:	4a09      	ldr	r2, [pc, #36]	; (801498c <vPortFree+0xbc>)
 8014968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801496a:	6938      	ldr	r0, [r7, #16]
 801496c:	f000 f880 	bl	8014a70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014970:	4b07      	ldr	r3, [pc, #28]	; (8014990 <vPortFree+0xc0>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	3301      	adds	r3, #1
 8014976:	4a06      	ldr	r2, [pc, #24]	; (8014990 <vPortFree+0xc0>)
 8014978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801497a:	f7fe fc89 	bl	8013290 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801497e:	bf00      	nop
 8014980:	3718      	adds	r7, #24
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
 8014986:	bf00      	nop
 8014988:	20006d3c 	.word	0x20006d3c
 801498c:	20006d2c 	.word	0x20006d2c
 8014990:	20006d38 	.word	0x20006d38

08014994 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8014994:	b480      	push	{r7}
 8014996:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8014998:	4b03      	ldr	r3, [pc, #12]	; (80149a8 <xPortGetFreeHeapSize+0x14>)
 801499a:	681b      	ldr	r3, [r3, #0]
}
 801499c:	4618      	mov	r0, r3
 801499e:	46bd      	mov	sp, r7
 80149a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a4:	4770      	bx	lr
 80149a6:	bf00      	nop
 80149a8:	20006d2c 	.word	0x20006d2c

080149ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80149ac:	b480      	push	{r7}
 80149ae:	b085      	sub	sp, #20
 80149b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80149b2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80149b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80149b8:	4b27      	ldr	r3, [pc, #156]	; (8014a58 <prvHeapInit+0xac>)
 80149ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	f003 0307 	and.w	r3, r3, #7
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d00c      	beq.n	80149e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	3307      	adds	r3, #7
 80149ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	f023 0307 	bic.w	r3, r3, #7
 80149d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80149d4:	68ba      	ldr	r2, [r7, #8]
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	4a1f      	ldr	r2, [pc, #124]	; (8014a58 <prvHeapInit+0xac>)
 80149dc:	4413      	add	r3, r2
 80149de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80149e4:	4a1d      	ldr	r2, [pc, #116]	; (8014a5c <prvHeapInit+0xb0>)
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80149ea:	4b1c      	ldr	r3, [pc, #112]	; (8014a5c <prvHeapInit+0xb0>)
 80149ec:	2200      	movs	r2, #0
 80149ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	68ba      	ldr	r2, [r7, #8]
 80149f4:	4413      	add	r3, r2
 80149f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80149f8:	2208      	movs	r2, #8
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	1a9b      	subs	r3, r3, r2
 80149fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	f023 0307 	bic.w	r3, r3, #7
 8014a06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	4a15      	ldr	r2, [pc, #84]	; (8014a60 <prvHeapInit+0xb4>)
 8014a0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014a0e:	4b14      	ldr	r3, [pc, #80]	; (8014a60 <prvHeapInit+0xb4>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2200      	movs	r2, #0
 8014a14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014a16:	4b12      	ldr	r3, [pc, #72]	; (8014a60 <prvHeapInit+0xb4>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	68fa      	ldr	r2, [r7, #12]
 8014a26:	1ad2      	subs	r2, r2, r3
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014a2c:	4b0c      	ldr	r3, [pc, #48]	; (8014a60 <prvHeapInit+0xb4>)
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	685b      	ldr	r3, [r3, #4]
 8014a38:	4a0a      	ldr	r2, [pc, #40]	; (8014a64 <prvHeapInit+0xb8>)
 8014a3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	4a09      	ldr	r2, [pc, #36]	; (8014a68 <prvHeapInit+0xbc>)
 8014a42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014a44:	4b09      	ldr	r3, [pc, #36]	; (8014a6c <prvHeapInit+0xc0>)
 8014a46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014a4a:	601a      	str	r2, [r3, #0]
}
 8014a4c:	bf00      	nop
 8014a4e:	3714      	adds	r7, #20
 8014a50:	46bd      	mov	sp, r7
 8014a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a56:	4770      	bx	lr
 8014a58:	20003120 	.word	0x20003120
 8014a5c:	20006d20 	.word	0x20006d20
 8014a60:	20006d28 	.word	0x20006d28
 8014a64:	20006d30 	.word	0x20006d30
 8014a68:	20006d2c 	.word	0x20006d2c
 8014a6c:	20006d3c 	.word	0x20006d3c

08014a70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014a70:	b480      	push	{r7}
 8014a72:	b085      	sub	sp, #20
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014a78:	4b28      	ldr	r3, [pc, #160]	; (8014b1c <prvInsertBlockIntoFreeList+0xac>)
 8014a7a:	60fb      	str	r3, [r7, #12]
 8014a7c:	e002      	b.n	8014a84 <prvInsertBlockIntoFreeList+0x14>
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	60fb      	str	r3, [r7, #12]
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	687a      	ldr	r2, [r7, #4]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d8f7      	bhi.n	8014a7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	685b      	ldr	r3, [r3, #4]
 8014a96:	68ba      	ldr	r2, [r7, #8]
 8014a98:	4413      	add	r3, r2
 8014a9a:	687a      	ldr	r2, [r7, #4]
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d108      	bne.n	8014ab2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	685a      	ldr	r2, [r3, #4]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	685b      	ldr	r3, [r3, #4]
 8014aa8:	441a      	add	r2, r3
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	68ba      	ldr	r2, [r7, #8]
 8014abc:	441a      	add	r2, r3
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d118      	bne.n	8014af8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	681a      	ldr	r2, [r3, #0]
 8014aca:	4b15      	ldr	r3, [pc, #84]	; (8014b20 <prvInsertBlockIntoFreeList+0xb0>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d00d      	beq.n	8014aee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	685a      	ldr	r2, [r3, #4]
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	685b      	ldr	r3, [r3, #4]
 8014adc:	441a      	add	r2, r3
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	681a      	ldr	r2, [r3, #0]
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	601a      	str	r2, [r3, #0]
 8014aec:	e008      	b.n	8014b00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014aee:	4b0c      	ldr	r3, [pc, #48]	; (8014b20 <prvInsertBlockIntoFreeList+0xb0>)
 8014af0:	681a      	ldr	r2, [r3, #0]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	601a      	str	r2, [r3, #0]
 8014af6:	e003      	b.n	8014b00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014b00:	68fa      	ldr	r2, [r7, #12]
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d002      	beq.n	8014b0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	687a      	ldr	r2, [r7, #4]
 8014b0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014b0e:	bf00      	nop
 8014b10:	3714      	adds	r7, #20
 8014b12:	46bd      	mov	sp, r7
 8014b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b18:	4770      	bx	lr
 8014b1a:	bf00      	nop
 8014b1c:	20006d20 	.word	0x20006d20
 8014b20:	20006d28 	.word	0x20006d28

08014b24 <__errno>:
 8014b24:	4b01      	ldr	r3, [pc, #4]	; (8014b2c <__errno+0x8>)
 8014b26:	6818      	ldr	r0, [r3, #0]
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop
 8014b2c:	20000320 	.word	0x20000320

08014b30 <__libc_init_array>:
 8014b30:	b570      	push	{r4, r5, r6, lr}
 8014b32:	4d0d      	ldr	r5, [pc, #52]	; (8014b68 <__libc_init_array+0x38>)
 8014b34:	4c0d      	ldr	r4, [pc, #52]	; (8014b6c <__libc_init_array+0x3c>)
 8014b36:	1b64      	subs	r4, r4, r5
 8014b38:	10a4      	asrs	r4, r4, #2
 8014b3a:	2600      	movs	r6, #0
 8014b3c:	42a6      	cmp	r6, r4
 8014b3e:	d109      	bne.n	8014b54 <__libc_init_array+0x24>
 8014b40:	4d0b      	ldr	r5, [pc, #44]	; (8014b70 <__libc_init_array+0x40>)
 8014b42:	4c0c      	ldr	r4, [pc, #48]	; (8014b74 <__libc_init_array+0x44>)
 8014b44:	f003 fbd4 	bl	80182f0 <_init>
 8014b48:	1b64      	subs	r4, r4, r5
 8014b4a:	10a4      	asrs	r4, r4, #2
 8014b4c:	2600      	movs	r6, #0
 8014b4e:	42a6      	cmp	r6, r4
 8014b50:	d105      	bne.n	8014b5e <__libc_init_array+0x2e>
 8014b52:	bd70      	pop	{r4, r5, r6, pc}
 8014b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b58:	4798      	blx	r3
 8014b5a:	3601      	adds	r6, #1
 8014b5c:	e7ee      	b.n	8014b3c <__libc_init_array+0xc>
 8014b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b62:	4798      	blx	r3
 8014b64:	3601      	adds	r6, #1
 8014b66:	e7f2      	b.n	8014b4e <__libc_init_array+0x1e>
 8014b68:	0801a8b0 	.word	0x0801a8b0
 8014b6c:	0801a8b0 	.word	0x0801a8b0
 8014b70:	0801a8b0 	.word	0x0801a8b0
 8014b74:	0801a8b4 	.word	0x0801a8b4

08014b78 <isprint>:
 8014b78:	4b02      	ldr	r3, [pc, #8]	; (8014b84 <isprint+0xc>)
 8014b7a:	4418      	add	r0, r3
 8014b7c:	7840      	ldrb	r0, [r0, #1]
 8014b7e:	f000 0097 	and.w	r0, r0, #151	; 0x97
 8014b82:	4770      	bx	lr
 8014b84:	0801a4ea 	.word	0x0801a4ea

08014b88 <malloc>:
 8014b88:	4b02      	ldr	r3, [pc, #8]	; (8014b94 <malloc+0xc>)
 8014b8a:	4601      	mov	r1, r0
 8014b8c:	6818      	ldr	r0, [r3, #0]
 8014b8e:	f000 b88d 	b.w	8014cac <_malloc_r>
 8014b92:	bf00      	nop
 8014b94:	20000320 	.word	0x20000320

08014b98 <free>:
 8014b98:	4b02      	ldr	r3, [pc, #8]	; (8014ba4 <free+0xc>)
 8014b9a:	4601      	mov	r1, r0
 8014b9c:	6818      	ldr	r0, [r3, #0]
 8014b9e:	f000 b819 	b.w	8014bd4 <_free_r>
 8014ba2:	bf00      	nop
 8014ba4:	20000320 	.word	0x20000320

08014ba8 <memcpy>:
 8014ba8:	440a      	add	r2, r1
 8014baa:	4291      	cmp	r1, r2
 8014bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8014bb0:	d100      	bne.n	8014bb4 <memcpy+0xc>
 8014bb2:	4770      	bx	lr
 8014bb4:	b510      	push	{r4, lr}
 8014bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014bbe:	4291      	cmp	r1, r2
 8014bc0:	d1f9      	bne.n	8014bb6 <memcpy+0xe>
 8014bc2:	bd10      	pop	{r4, pc}

08014bc4 <memset>:
 8014bc4:	4402      	add	r2, r0
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	4293      	cmp	r3, r2
 8014bca:	d100      	bne.n	8014bce <memset+0xa>
 8014bcc:	4770      	bx	lr
 8014bce:	f803 1b01 	strb.w	r1, [r3], #1
 8014bd2:	e7f9      	b.n	8014bc8 <memset+0x4>

08014bd4 <_free_r>:
 8014bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014bd6:	2900      	cmp	r1, #0
 8014bd8:	d044      	beq.n	8014c64 <_free_r+0x90>
 8014bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014bde:	9001      	str	r0, [sp, #4]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	f1a1 0404 	sub.w	r4, r1, #4
 8014be6:	bfb8      	it	lt
 8014be8:	18e4      	addlt	r4, r4, r3
 8014bea:	f001 fc99 	bl	8016520 <__malloc_lock>
 8014bee:	4a1e      	ldr	r2, [pc, #120]	; (8014c68 <_free_r+0x94>)
 8014bf0:	9801      	ldr	r0, [sp, #4]
 8014bf2:	6813      	ldr	r3, [r2, #0]
 8014bf4:	b933      	cbnz	r3, 8014c04 <_free_r+0x30>
 8014bf6:	6063      	str	r3, [r4, #4]
 8014bf8:	6014      	str	r4, [r2, #0]
 8014bfa:	b003      	add	sp, #12
 8014bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c00:	f001 bc94 	b.w	801652c <__malloc_unlock>
 8014c04:	42a3      	cmp	r3, r4
 8014c06:	d908      	bls.n	8014c1a <_free_r+0x46>
 8014c08:	6825      	ldr	r5, [r4, #0]
 8014c0a:	1961      	adds	r1, r4, r5
 8014c0c:	428b      	cmp	r3, r1
 8014c0e:	bf01      	itttt	eq
 8014c10:	6819      	ldreq	r1, [r3, #0]
 8014c12:	685b      	ldreq	r3, [r3, #4]
 8014c14:	1949      	addeq	r1, r1, r5
 8014c16:	6021      	streq	r1, [r4, #0]
 8014c18:	e7ed      	b.n	8014bf6 <_free_r+0x22>
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	685b      	ldr	r3, [r3, #4]
 8014c1e:	b10b      	cbz	r3, 8014c24 <_free_r+0x50>
 8014c20:	42a3      	cmp	r3, r4
 8014c22:	d9fa      	bls.n	8014c1a <_free_r+0x46>
 8014c24:	6811      	ldr	r1, [r2, #0]
 8014c26:	1855      	adds	r5, r2, r1
 8014c28:	42a5      	cmp	r5, r4
 8014c2a:	d10b      	bne.n	8014c44 <_free_r+0x70>
 8014c2c:	6824      	ldr	r4, [r4, #0]
 8014c2e:	4421      	add	r1, r4
 8014c30:	1854      	adds	r4, r2, r1
 8014c32:	42a3      	cmp	r3, r4
 8014c34:	6011      	str	r1, [r2, #0]
 8014c36:	d1e0      	bne.n	8014bfa <_free_r+0x26>
 8014c38:	681c      	ldr	r4, [r3, #0]
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	6053      	str	r3, [r2, #4]
 8014c3e:	4421      	add	r1, r4
 8014c40:	6011      	str	r1, [r2, #0]
 8014c42:	e7da      	b.n	8014bfa <_free_r+0x26>
 8014c44:	d902      	bls.n	8014c4c <_free_r+0x78>
 8014c46:	230c      	movs	r3, #12
 8014c48:	6003      	str	r3, [r0, #0]
 8014c4a:	e7d6      	b.n	8014bfa <_free_r+0x26>
 8014c4c:	6825      	ldr	r5, [r4, #0]
 8014c4e:	1961      	adds	r1, r4, r5
 8014c50:	428b      	cmp	r3, r1
 8014c52:	bf04      	itt	eq
 8014c54:	6819      	ldreq	r1, [r3, #0]
 8014c56:	685b      	ldreq	r3, [r3, #4]
 8014c58:	6063      	str	r3, [r4, #4]
 8014c5a:	bf04      	itt	eq
 8014c5c:	1949      	addeq	r1, r1, r5
 8014c5e:	6021      	streq	r1, [r4, #0]
 8014c60:	6054      	str	r4, [r2, #4]
 8014c62:	e7ca      	b.n	8014bfa <_free_r+0x26>
 8014c64:	b003      	add	sp, #12
 8014c66:	bd30      	pop	{r4, r5, pc}
 8014c68:	20006d40 	.word	0x20006d40

08014c6c <sbrk_aligned>:
 8014c6c:	b570      	push	{r4, r5, r6, lr}
 8014c6e:	4e0e      	ldr	r6, [pc, #56]	; (8014ca8 <sbrk_aligned+0x3c>)
 8014c70:	460c      	mov	r4, r1
 8014c72:	6831      	ldr	r1, [r6, #0]
 8014c74:	4605      	mov	r5, r0
 8014c76:	b911      	cbnz	r1, 8014c7e <sbrk_aligned+0x12>
 8014c78:	f000 fcf6 	bl	8015668 <_sbrk_r>
 8014c7c:	6030      	str	r0, [r6, #0]
 8014c7e:	4621      	mov	r1, r4
 8014c80:	4628      	mov	r0, r5
 8014c82:	f000 fcf1 	bl	8015668 <_sbrk_r>
 8014c86:	1c43      	adds	r3, r0, #1
 8014c88:	d00a      	beq.n	8014ca0 <sbrk_aligned+0x34>
 8014c8a:	1cc4      	adds	r4, r0, #3
 8014c8c:	f024 0403 	bic.w	r4, r4, #3
 8014c90:	42a0      	cmp	r0, r4
 8014c92:	d007      	beq.n	8014ca4 <sbrk_aligned+0x38>
 8014c94:	1a21      	subs	r1, r4, r0
 8014c96:	4628      	mov	r0, r5
 8014c98:	f000 fce6 	bl	8015668 <_sbrk_r>
 8014c9c:	3001      	adds	r0, #1
 8014c9e:	d101      	bne.n	8014ca4 <sbrk_aligned+0x38>
 8014ca0:	f04f 34ff 	mov.w	r4, #4294967295
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	bd70      	pop	{r4, r5, r6, pc}
 8014ca8:	20006d44 	.word	0x20006d44

08014cac <_malloc_r>:
 8014cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cb0:	1ccd      	adds	r5, r1, #3
 8014cb2:	f025 0503 	bic.w	r5, r5, #3
 8014cb6:	3508      	adds	r5, #8
 8014cb8:	2d0c      	cmp	r5, #12
 8014cba:	bf38      	it	cc
 8014cbc:	250c      	movcc	r5, #12
 8014cbe:	2d00      	cmp	r5, #0
 8014cc0:	4607      	mov	r7, r0
 8014cc2:	db01      	blt.n	8014cc8 <_malloc_r+0x1c>
 8014cc4:	42a9      	cmp	r1, r5
 8014cc6:	d905      	bls.n	8014cd4 <_malloc_r+0x28>
 8014cc8:	230c      	movs	r3, #12
 8014cca:	603b      	str	r3, [r7, #0]
 8014ccc:	2600      	movs	r6, #0
 8014cce:	4630      	mov	r0, r6
 8014cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cd4:	4e2e      	ldr	r6, [pc, #184]	; (8014d90 <_malloc_r+0xe4>)
 8014cd6:	f001 fc23 	bl	8016520 <__malloc_lock>
 8014cda:	6833      	ldr	r3, [r6, #0]
 8014cdc:	461c      	mov	r4, r3
 8014cde:	bb34      	cbnz	r4, 8014d2e <_malloc_r+0x82>
 8014ce0:	4629      	mov	r1, r5
 8014ce2:	4638      	mov	r0, r7
 8014ce4:	f7ff ffc2 	bl	8014c6c <sbrk_aligned>
 8014ce8:	1c43      	adds	r3, r0, #1
 8014cea:	4604      	mov	r4, r0
 8014cec:	d14d      	bne.n	8014d8a <_malloc_r+0xde>
 8014cee:	6834      	ldr	r4, [r6, #0]
 8014cf0:	4626      	mov	r6, r4
 8014cf2:	2e00      	cmp	r6, #0
 8014cf4:	d140      	bne.n	8014d78 <_malloc_r+0xcc>
 8014cf6:	6823      	ldr	r3, [r4, #0]
 8014cf8:	4631      	mov	r1, r6
 8014cfa:	4638      	mov	r0, r7
 8014cfc:	eb04 0803 	add.w	r8, r4, r3
 8014d00:	f000 fcb2 	bl	8015668 <_sbrk_r>
 8014d04:	4580      	cmp	r8, r0
 8014d06:	d13a      	bne.n	8014d7e <_malloc_r+0xd2>
 8014d08:	6821      	ldr	r1, [r4, #0]
 8014d0a:	3503      	adds	r5, #3
 8014d0c:	1a6d      	subs	r5, r5, r1
 8014d0e:	f025 0503 	bic.w	r5, r5, #3
 8014d12:	3508      	adds	r5, #8
 8014d14:	2d0c      	cmp	r5, #12
 8014d16:	bf38      	it	cc
 8014d18:	250c      	movcc	r5, #12
 8014d1a:	4629      	mov	r1, r5
 8014d1c:	4638      	mov	r0, r7
 8014d1e:	f7ff ffa5 	bl	8014c6c <sbrk_aligned>
 8014d22:	3001      	adds	r0, #1
 8014d24:	d02b      	beq.n	8014d7e <_malloc_r+0xd2>
 8014d26:	6823      	ldr	r3, [r4, #0]
 8014d28:	442b      	add	r3, r5
 8014d2a:	6023      	str	r3, [r4, #0]
 8014d2c:	e00e      	b.n	8014d4c <_malloc_r+0xa0>
 8014d2e:	6822      	ldr	r2, [r4, #0]
 8014d30:	1b52      	subs	r2, r2, r5
 8014d32:	d41e      	bmi.n	8014d72 <_malloc_r+0xc6>
 8014d34:	2a0b      	cmp	r2, #11
 8014d36:	d916      	bls.n	8014d66 <_malloc_r+0xba>
 8014d38:	1961      	adds	r1, r4, r5
 8014d3a:	42a3      	cmp	r3, r4
 8014d3c:	6025      	str	r5, [r4, #0]
 8014d3e:	bf18      	it	ne
 8014d40:	6059      	strne	r1, [r3, #4]
 8014d42:	6863      	ldr	r3, [r4, #4]
 8014d44:	bf08      	it	eq
 8014d46:	6031      	streq	r1, [r6, #0]
 8014d48:	5162      	str	r2, [r4, r5]
 8014d4a:	604b      	str	r3, [r1, #4]
 8014d4c:	4638      	mov	r0, r7
 8014d4e:	f104 060b 	add.w	r6, r4, #11
 8014d52:	f001 fbeb 	bl	801652c <__malloc_unlock>
 8014d56:	f026 0607 	bic.w	r6, r6, #7
 8014d5a:	1d23      	adds	r3, r4, #4
 8014d5c:	1af2      	subs	r2, r6, r3
 8014d5e:	d0b6      	beq.n	8014cce <_malloc_r+0x22>
 8014d60:	1b9b      	subs	r3, r3, r6
 8014d62:	50a3      	str	r3, [r4, r2]
 8014d64:	e7b3      	b.n	8014cce <_malloc_r+0x22>
 8014d66:	6862      	ldr	r2, [r4, #4]
 8014d68:	42a3      	cmp	r3, r4
 8014d6a:	bf0c      	ite	eq
 8014d6c:	6032      	streq	r2, [r6, #0]
 8014d6e:	605a      	strne	r2, [r3, #4]
 8014d70:	e7ec      	b.n	8014d4c <_malloc_r+0xa0>
 8014d72:	4623      	mov	r3, r4
 8014d74:	6864      	ldr	r4, [r4, #4]
 8014d76:	e7b2      	b.n	8014cde <_malloc_r+0x32>
 8014d78:	4634      	mov	r4, r6
 8014d7a:	6876      	ldr	r6, [r6, #4]
 8014d7c:	e7b9      	b.n	8014cf2 <_malloc_r+0x46>
 8014d7e:	230c      	movs	r3, #12
 8014d80:	603b      	str	r3, [r7, #0]
 8014d82:	4638      	mov	r0, r7
 8014d84:	f001 fbd2 	bl	801652c <__malloc_unlock>
 8014d88:	e7a1      	b.n	8014cce <_malloc_r+0x22>
 8014d8a:	6025      	str	r5, [r4, #0]
 8014d8c:	e7de      	b.n	8014d4c <_malloc_r+0xa0>
 8014d8e:	bf00      	nop
 8014d90:	20006d40 	.word	0x20006d40

08014d94 <__cvt>:
 8014d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d98:	ec55 4b10 	vmov	r4, r5, d0
 8014d9c:	2d00      	cmp	r5, #0
 8014d9e:	460e      	mov	r6, r1
 8014da0:	4619      	mov	r1, r3
 8014da2:	462b      	mov	r3, r5
 8014da4:	bfbb      	ittet	lt
 8014da6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014daa:	461d      	movlt	r5, r3
 8014dac:	2300      	movge	r3, #0
 8014dae:	232d      	movlt	r3, #45	; 0x2d
 8014db0:	700b      	strb	r3, [r1, #0]
 8014db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014db4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014db8:	4691      	mov	r9, r2
 8014dba:	f023 0820 	bic.w	r8, r3, #32
 8014dbe:	bfbc      	itt	lt
 8014dc0:	4622      	movlt	r2, r4
 8014dc2:	4614      	movlt	r4, r2
 8014dc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014dc8:	d005      	beq.n	8014dd6 <__cvt+0x42>
 8014dca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014dce:	d100      	bne.n	8014dd2 <__cvt+0x3e>
 8014dd0:	3601      	adds	r6, #1
 8014dd2:	2102      	movs	r1, #2
 8014dd4:	e000      	b.n	8014dd8 <__cvt+0x44>
 8014dd6:	2103      	movs	r1, #3
 8014dd8:	ab03      	add	r3, sp, #12
 8014dda:	9301      	str	r3, [sp, #4]
 8014ddc:	ab02      	add	r3, sp, #8
 8014dde:	9300      	str	r3, [sp, #0]
 8014de0:	ec45 4b10 	vmov	d0, r4, r5
 8014de4:	4653      	mov	r3, sl
 8014de6:	4632      	mov	r2, r6
 8014de8:	f000 fd96 	bl	8015918 <_dtoa_r>
 8014dec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014df0:	4607      	mov	r7, r0
 8014df2:	d102      	bne.n	8014dfa <__cvt+0x66>
 8014df4:	f019 0f01 	tst.w	r9, #1
 8014df8:	d022      	beq.n	8014e40 <__cvt+0xac>
 8014dfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014dfe:	eb07 0906 	add.w	r9, r7, r6
 8014e02:	d110      	bne.n	8014e26 <__cvt+0x92>
 8014e04:	783b      	ldrb	r3, [r7, #0]
 8014e06:	2b30      	cmp	r3, #48	; 0x30
 8014e08:	d10a      	bne.n	8014e20 <__cvt+0x8c>
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	4620      	mov	r0, r4
 8014e10:	4629      	mov	r1, r5
 8014e12:	f7eb fe71 	bl	8000af8 <__aeabi_dcmpeq>
 8014e16:	b918      	cbnz	r0, 8014e20 <__cvt+0x8c>
 8014e18:	f1c6 0601 	rsb	r6, r6, #1
 8014e1c:	f8ca 6000 	str.w	r6, [sl]
 8014e20:	f8da 3000 	ldr.w	r3, [sl]
 8014e24:	4499      	add	r9, r3
 8014e26:	2200      	movs	r2, #0
 8014e28:	2300      	movs	r3, #0
 8014e2a:	4620      	mov	r0, r4
 8014e2c:	4629      	mov	r1, r5
 8014e2e:	f7eb fe63 	bl	8000af8 <__aeabi_dcmpeq>
 8014e32:	b108      	cbz	r0, 8014e38 <__cvt+0xa4>
 8014e34:	f8cd 900c 	str.w	r9, [sp, #12]
 8014e38:	2230      	movs	r2, #48	; 0x30
 8014e3a:	9b03      	ldr	r3, [sp, #12]
 8014e3c:	454b      	cmp	r3, r9
 8014e3e:	d307      	bcc.n	8014e50 <__cvt+0xbc>
 8014e40:	9b03      	ldr	r3, [sp, #12]
 8014e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e44:	1bdb      	subs	r3, r3, r7
 8014e46:	4638      	mov	r0, r7
 8014e48:	6013      	str	r3, [r2, #0]
 8014e4a:	b004      	add	sp, #16
 8014e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e50:	1c59      	adds	r1, r3, #1
 8014e52:	9103      	str	r1, [sp, #12]
 8014e54:	701a      	strb	r2, [r3, #0]
 8014e56:	e7f0      	b.n	8014e3a <__cvt+0xa6>

08014e58 <__exponent>:
 8014e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2900      	cmp	r1, #0
 8014e5e:	bfb8      	it	lt
 8014e60:	4249      	neglt	r1, r1
 8014e62:	f803 2b02 	strb.w	r2, [r3], #2
 8014e66:	bfb4      	ite	lt
 8014e68:	222d      	movlt	r2, #45	; 0x2d
 8014e6a:	222b      	movge	r2, #43	; 0x2b
 8014e6c:	2909      	cmp	r1, #9
 8014e6e:	7042      	strb	r2, [r0, #1]
 8014e70:	dd2a      	ble.n	8014ec8 <__exponent+0x70>
 8014e72:	f10d 0407 	add.w	r4, sp, #7
 8014e76:	46a4      	mov	ip, r4
 8014e78:	270a      	movs	r7, #10
 8014e7a:	46a6      	mov	lr, r4
 8014e7c:	460a      	mov	r2, r1
 8014e7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8014e82:	fb07 1516 	mls	r5, r7, r6, r1
 8014e86:	3530      	adds	r5, #48	; 0x30
 8014e88:	2a63      	cmp	r2, #99	; 0x63
 8014e8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8014e8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014e92:	4631      	mov	r1, r6
 8014e94:	dcf1      	bgt.n	8014e7a <__exponent+0x22>
 8014e96:	3130      	adds	r1, #48	; 0x30
 8014e98:	f1ae 0502 	sub.w	r5, lr, #2
 8014e9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014ea0:	1c44      	adds	r4, r0, #1
 8014ea2:	4629      	mov	r1, r5
 8014ea4:	4561      	cmp	r1, ip
 8014ea6:	d30a      	bcc.n	8014ebe <__exponent+0x66>
 8014ea8:	f10d 0209 	add.w	r2, sp, #9
 8014eac:	eba2 020e 	sub.w	r2, r2, lr
 8014eb0:	4565      	cmp	r5, ip
 8014eb2:	bf88      	it	hi
 8014eb4:	2200      	movhi	r2, #0
 8014eb6:	4413      	add	r3, r2
 8014eb8:	1a18      	subs	r0, r3, r0
 8014eba:	b003      	add	sp, #12
 8014ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ec2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014ec6:	e7ed      	b.n	8014ea4 <__exponent+0x4c>
 8014ec8:	2330      	movs	r3, #48	; 0x30
 8014eca:	3130      	adds	r1, #48	; 0x30
 8014ecc:	7083      	strb	r3, [r0, #2]
 8014ece:	70c1      	strb	r1, [r0, #3]
 8014ed0:	1d03      	adds	r3, r0, #4
 8014ed2:	e7f1      	b.n	8014eb8 <__exponent+0x60>

08014ed4 <_printf_float>:
 8014ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ed8:	ed2d 8b02 	vpush	{d8}
 8014edc:	b08d      	sub	sp, #52	; 0x34
 8014ede:	460c      	mov	r4, r1
 8014ee0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014ee4:	4616      	mov	r6, r2
 8014ee6:	461f      	mov	r7, r3
 8014ee8:	4605      	mov	r5, r0
 8014eea:	f001 fb03 	bl	80164f4 <_localeconv_r>
 8014eee:	f8d0 a000 	ldr.w	sl, [r0]
 8014ef2:	4650      	mov	r0, sl
 8014ef4:	f7eb f97e 	bl	80001f4 <strlen>
 8014ef8:	2300      	movs	r3, #0
 8014efa:	930a      	str	r3, [sp, #40]	; 0x28
 8014efc:	6823      	ldr	r3, [r4, #0]
 8014efe:	9305      	str	r3, [sp, #20]
 8014f00:	f8d8 3000 	ldr.w	r3, [r8]
 8014f04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014f08:	3307      	adds	r3, #7
 8014f0a:	f023 0307 	bic.w	r3, r3, #7
 8014f0e:	f103 0208 	add.w	r2, r3, #8
 8014f12:	f8c8 2000 	str.w	r2, [r8]
 8014f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014f1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014f22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014f26:	9307      	str	r3, [sp, #28]
 8014f28:	f8cd 8018 	str.w	r8, [sp, #24]
 8014f2c:	ee08 0a10 	vmov	s16, r0
 8014f30:	4b9f      	ldr	r3, [pc, #636]	; (80151b0 <_printf_float+0x2dc>)
 8014f32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014f36:	f04f 32ff 	mov.w	r2, #4294967295
 8014f3a:	f7eb fe0f 	bl	8000b5c <__aeabi_dcmpun>
 8014f3e:	bb88      	cbnz	r0, 8014fa4 <_printf_float+0xd0>
 8014f40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014f44:	4b9a      	ldr	r3, [pc, #616]	; (80151b0 <_printf_float+0x2dc>)
 8014f46:	f04f 32ff 	mov.w	r2, #4294967295
 8014f4a:	f7eb fde9 	bl	8000b20 <__aeabi_dcmple>
 8014f4e:	bb48      	cbnz	r0, 8014fa4 <_printf_float+0xd0>
 8014f50:	2200      	movs	r2, #0
 8014f52:	2300      	movs	r3, #0
 8014f54:	4640      	mov	r0, r8
 8014f56:	4649      	mov	r1, r9
 8014f58:	f7eb fdd8 	bl	8000b0c <__aeabi_dcmplt>
 8014f5c:	b110      	cbz	r0, 8014f64 <_printf_float+0x90>
 8014f5e:	232d      	movs	r3, #45	; 0x2d
 8014f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f64:	4b93      	ldr	r3, [pc, #588]	; (80151b4 <_printf_float+0x2e0>)
 8014f66:	4894      	ldr	r0, [pc, #592]	; (80151b8 <_printf_float+0x2e4>)
 8014f68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014f6c:	bf94      	ite	ls
 8014f6e:	4698      	movls	r8, r3
 8014f70:	4680      	movhi	r8, r0
 8014f72:	2303      	movs	r3, #3
 8014f74:	6123      	str	r3, [r4, #16]
 8014f76:	9b05      	ldr	r3, [sp, #20]
 8014f78:	f023 0204 	bic.w	r2, r3, #4
 8014f7c:	6022      	str	r2, [r4, #0]
 8014f7e:	f04f 0900 	mov.w	r9, #0
 8014f82:	9700      	str	r7, [sp, #0]
 8014f84:	4633      	mov	r3, r6
 8014f86:	aa0b      	add	r2, sp, #44	; 0x2c
 8014f88:	4621      	mov	r1, r4
 8014f8a:	4628      	mov	r0, r5
 8014f8c:	f000 f9d8 	bl	8015340 <_printf_common>
 8014f90:	3001      	adds	r0, #1
 8014f92:	f040 8090 	bne.w	80150b6 <_printf_float+0x1e2>
 8014f96:	f04f 30ff 	mov.w	r0, #4294967295
 8014f9a:	b00d      	add	sp, #52	; 0x34
 8014f9c:	ecbd 8b02 	vpop	{d8}
 8014fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fa4:	4642      	mov	r2, r8
 8014fa6:	464b      	mov	r3, r9
 8014fa8:	4640      	mov	r0, r8
 8014faa:	4649      	mov	r1, r9
 8014fac:	f7eb fdd6 	bl	8000b5c <__aeabi_dcmpun>
 8014fb0:	b140      	cbz	r0, 8014fc4 <_printf_float+0xf0>
 8014fb2:	464b      	mov	r3, r9
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	bfbc      	itt	lt
 8014fb8:	232d      	movlt	r3, #45	; 0x2d
 8014fba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014fbe:	487f      	ldr	r0, [pc, #508]	; (80151bc <_printf_float+0x2e8>)
 8014fc0:	4b7f      	ldr	r3, [pc, #508]	; (80151c0 <_printf_float+0x2ec>)
 8014fc2:	e7d1      	b.n	8014f68 <_printf_float+0x94>
 8014fc4:	6863      	ldr	r3, [r4, #4]
 8014fc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014fca:	9206      	str	r2, [sp, #24]
 8014fcc:	1c5a      	adds	r2, r3, #1
 8014fce:	d13f      	bne.n	8015050 <_printf_float+0x17c>
 8014fd0:	2306      	movs	r3, #6
 8014fd2:	6063      	str	r3, [r4, #4]
 8014fd4:	9b05      	ldr	r3, [sp, #20]
 8014fd6:	6861      	ldr	r1, [r4, #4]
 8014fd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014fdc:	2300      	movs	r3, #0
 8014fde:	9303      	str	r3, [sp, #12]
 8014fe0:	ab0a      	add	r3, sp, #40	; 0x28
 8014fe2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014fe6:	ab09      	add	r3, sp, #36	; 0x24
 8014fe8:	ec49 8b10 	vmov	d0, r8, r9
 8014fec:	9300      	str	r3, [sp, #0]
 8014fee:	6022      	str	r2, [r4, #0]
 8014ff0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014ff4:	4628      	mov	r0, r5
 8014ff6:	f7ff fecd 	bl	8014d94 <__cvt>
 8014ffa:	9b06      	ldr	r3, [sp, #24]
 8014ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ffe:	2b47      	cmp	r3, #71	; 0x47
 8015000:	4680      	mov	r8, r0
 8015002:	d108      	bne.n	8015016 <_printf_float+0x142>
 8015004:	1cc8      	adds	r0, r1, #3
 8015006:	db02      	blt.n	801500e <_printf_float+0x13a>
 8015008:	6863      	ldr	r3, [r4, #4]
 801500a:	4299      	cmp	r1, r3
 801500c:	dd41      	ble.n	8015092 <_printf_float+0x1be>
 801500e:	f1ab 0b02 	sub.w	fp, fp, #2
 8015012:	fa5f fb8b 	uxtb.w	fp, fp
 8015016:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801501a:	d820      	bhi.n	801505e <_printf_float+0x18a>
 801501c:	3901      	subs	r1, #1
 801501e:	465a      	mov	r2, fp
 8015020:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015024:	9109      	str	r1, [sp, #36]	; 0x24
 8015026:	f7ff ff17 	bl	8014e58 <__exponent>
 801502a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801502c:	1813      	adds	r3, r2, r0
 801502e:	2a01      	cmp	r2, #1
 8015030:	4681      	mov	r9, r0
 8015032:	6123      	str	r3, [r4, #16]
 8015034:	dc02      	bgt.n	801503c <_printf_float+0x168>
 8015036:	6822      	ldr	r2, [r4, #0]
 8015038:	07d2      	lsls	r2, r2, #31
 801503a:	d501      	bpl.n	8015040 <_printf_float+0x16c>
 801503c:	3301      	adds	r3, #1
 801503e:	6123      	str	r3, [r4, #16]
 8015040:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015044:	2b00      	cmp	r3, #0
 8015046:	d09c      	beq.n	8014f82 <_printf_float+0xae>
 8015048:	232d      	movs	r3, #45	; 0x2d
 801504a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801504e:	e798      	b.n	8014f82 <_printf_float+0xae>
 8015050:	9a06      	ldr	r2, [sp, #24]
 8015052:	2a47      	cmp	r2, #71	; 0x47
 8015054:	d1be      	bne.n	8014fd4 <_printf_float+0x100>
 8015056:	2b00      	cmp	r3, #0
 8015058:	d1bc      	bne.n	8014fd4 <_printf_float+0x100>
 801505a:	2301      	movs	r3, #1
 801505c:	e7b9      	b.n	8014fd2 <_printf_float+0xfe>
 801505e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015062:	d118      	bne.n	8015096 <_printf_float+0x1c2>
 8015064:	2900      	cmp	r1, #0
 8015066:	6863      	ldr	r3, [r4, #4]
 8015068:	dd0b      	ble.n	8015082 <_printf_float+0x1ae>
 801506a:	6121      	str	r1, [r4, #16]
 801506c:	b913      	cbnz	r3, 8015074 <_printf_float+0x1a0>
 801506e:	6822      	ldr	r2, [r4, #0]
 8015070:	07d0      	lsls	r0, r2, #31
 8015072:	d502      	bpl.n	801507a <_printf_float+0x1a6>
 8015074:	3301      	adds	r3, #1
 8015076:	440b      	add	r3, r1
 8015078:	6123      	str	r3, [r4, #16]
 801507a:	65a1      	str	r1, [r4, #88]	; 0x58
 801507c:	f04f 0900 	mov.w	r9, #0
 8015080:	e7de      	b.n	8015040 <_printf_float+0x16c>
 8015082:	b913      	cbnz	r3, 801508a <_printf_float+0x1b6>
 8015084:	6822      	ldr	r2, [r4, #0]
 8015086:	07d2      	lsls	r2, r2, #31
 8015088:	d501      	bpl.n	801508e <_printf_float+0x1ba>
 801508a:	3302      	adds	r3, #2
 801508c:	e7f4      	b.n	8015078 <_printf_float+0x1a4>
 801508e:	2301      	movs	r3, #1
 8015090:	e7f2      	b.n	8015078 <_printf_float+0x1a4>
 8015092:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015098:	4299      	cmp	r1, r3
 801509a:	db05      	blt.n	80150a8 <_printf_float+0x1d4>
 801509c:	6823      	ldr	r3, [r4, #0]
 801509e:	6121      	str	r1, [r4, #16]
 80150a0:	07d8      	lsls	r0, r3, #31
 80150a2:	d5ea      	bpl.n	801507a <_printf_float+0x1a6>
 80150a4:	1c4b      	adds	r3, r1, #1
 80150a6:	e7e7      	b.n	8015078 <_printf_float+0x1a4>
 80150a8:	2900      	cmp	r1, #0
 80150aa:	bfd4      	ite	le
 80150ac:	f1c1 0202 	rsble	r2, r1, #2
 80150b0:	2201      	movgt	r2, #1
 80150b2:	4413      	add	r3, r2
 80150b4:	e7e0      	b.n	8015078 <_printf_float+0x1a4>
 80150b6:	6823      	ldr	r3, [r4, #0]
 80150b8:	055a      	lsls	r2, r3, #21
 80150ba:	d407      	bmi.n	80150cc <_printf_float+0x1f8>
 80150bc:	6923      	ldr	r3, [r4, #16]
 80150be:	4642      	mov	r2, r8
 80150c0:	4631      	mov	r1, r6
 80150c2:	4628      	mov	r0, r5
 80150c4:	47b8      	blx	r7
 80150c6:	3001      	adds	r0, #1
 80150c8:	d12c      	bne.n	8015124 <_printf_float+0x250>
 80150ca:	e764      	b.n	8014f96 <_printf_float+0xc2>
 80150cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80150d0:	f240 80e0 	bls.w	8015294 <_printf_float+0x3c0>
 80150d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80150d8:	2200      	movs	r2, #0
 80150da:	2300      	movs	r3, #0
 80150dc:	f7eb fd0c 	bl	8000af8 <__aeabi_dcmpeq>
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d034      	beq.n	801514e <_printf_float+0x27a>
 80150e4:	4a37      	ldr	r2, [pc, #220]	; (80151c4 <_printf_float+0x2f0>)
 80150e6:	2301      	movs	r3, #1
 80150e8:	4631      	mov	r1, r6
 80150ea:	4628      	mov	r0, r5
 80150ec:	47b8      	blx	r7
 80150ee:	3001      	adds	r0, #1
 80150f0:	f43f af51 	beq.w	8014f96 <_printf_float+0xc2>
 80150f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80150f8:	429a      	cmp	r2, r3
 80150fa:	db02      	blt.n	8015102 <_printf_float+0x22e>
 80150fc:	6823      	ldr	r3, [r4, #0]
 80150fe:	07d8      	lsls	r0, r3, #31
 8015100:	d510      	bpl.n	8015124 <_printf_float+0x250>
 8015102:	ee18 3a10 	vmov	r3, s16
 8015106:	4652      	mov	r2, sl
 8015108:	4631      	mov	r1, r6
 801510a:	4628      	mov	r0, r5
 801510c:	47b8      	blx	r7
 801510e:	3001      	adds	r0, #1
 8015110:	f43f af41 	beq.w	8014f96 <_printf_float+0xc2>
 8015114:	f04f 0800 	mov.w	r8, #0
 8015118:	f104 091a 	add.w	r9, r4, #26
 801511c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801511e:	3b01      	subs	r3, #1
 8015120:	4543      	cmp	r3, r8
 8015122:	dc09      	bgt.n	8015138 <_printf_float+0x264>
 8015124:	6823      	ldr	r3, [r4, #0]
 8015126:	079b      	lsls	r3, r3, #30
 8015128:	f100 8105 	bmi.w	8015336 <_printf_float+0x462>
 801512c:	68e0      	ldr	r0, [r4, #12]
 801512e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015130:	4298      	cmp	r0, r3
 8015132:	bfb8      	it	lt
 8015134:	4618      	movlt	r0, r3
 8015136:	e730      	b.n	8014f9a <_printf_float+0xc6>
 8015138:	2301      	movs	r3, #1
 801513a:	464a      	mov	r2, r9
 801513c:	4631      	mov	r1, r6
 801513e:	4628      	mov	r0, r5
 8015140:	47b8      	blx	r7
 8015142:	3001      	adds	r0, #1
 8015144:	f43f af27 	beq.w	8014f96 <_printf_float+0xc2>
 8015148:	f108 0801 	add.w	r8, r8, #1
 801514c:	e7e6      	b.n	801511c <_printf_float+0x248>
 801514e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015150:	2b00      	cmp	r3, #0
 8015152:	dc39      	bgt.n	80151c8 <_printf_float+0x2f4>
 8015154:	4a1b      	ldr	r2, [pc, #108]	; (80151c4 <_printf_float+0x2f0>)
 8015156:	2301      	movs	r3, #1
 8015158:	4631      	mov	r1, r6
 801515a:	4628      	mov	r0, r5
 801515c:	47b8      	blx	r7
 801515e:	3001      	adds	r0, #1
 8015160:	f43f af19 	beq.w	8014f96 <_printf_float+0xc2>
 8015164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015168:	4313      	orrs	r3, r2
 801516a:	d102      	bne.n	8015172 <_printf_float+0x29e>
 801516c:	6823      	ldr	r3, [r4, #0]
 801516e:	07d9      	lsls	r1, r3, #31
 8015170:	d5d8      	bpl.n	8015124 <_printf_float+0x250>
 8015172:	ee18 3a10 	vmov	r3, s16
 8015176:	4652      	mov	r2, sl
 8015178:	4631      	mov	r1, r6
 801517a:	4628      	mov	r0, r5
 801517c:	47b8      	blx	r7
 801517e:	3001      	adds	r0, #1
 8015180:	f43f af09 	beq.w	8014f96 <_printf_float+0xc2>
 8015184:	f04f 0900 	mov.w	r9, #0
 8015188:	f104 0a1a 	add.w	sl, r4, #26
 801518c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801518e:	425b      	negs	r3, r3
 8015190:	454b      	cmp	r3, r9
 8015192:	dc01      	bgt.n	8015198 <_printf_float+0x2c4>
 8015194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015196:	e792      	b.n	80150be <_printf_float+0x1ea>
 8015198:	2301      	movs	r3, #1
 801519a:	4652      	mov	r2, sl
 801519c:	4631      	mov	r1, r6
 801519e:	4628      	mov	r0, r5
 80151a0:	47b8      	blx	r7
 80151a2:	3001      	adds	r0, #1
 80151a4:	f43f aef7 	beq.w	8014f96 <_printf_float+0xc2>
 80151a8:	f109 0901 	add.w	r9, r9, #1
 80151ac:	e7ee      	b.n	801518c <_printf_float+0x2b8>
 80151ae:	bf00      	nop
 80151b0:	7fefffff 	.word	0x7fefffff
 80151b4:	0801a4b8 	.word	0x0801a4b8
 80151b8:	0801a4bc 	.word	0x0801a4bc
 80151bc:	0801a4c4 	.word	0x0801a4c4
 80151c0:	0801a4c0 	.word	0x0801a4c0
 80151c4:	0801a7e9 	.word	0x0801a7e9
 80151c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80151cc:	429a      	cmp	r2, r3
 80151ce:	bfa8      	it	ge
 80151d0:	461a      	movge	r2, r3
 80151d2:	2a00      	cmp	r2, #0
 80151d4:	4691      	mov	r9, r2
 80151d6:	dc37      	bgt.n	8015248 <_printf_float+0x374>
 80151d8:	f04f 0b00 	mov.w	fp, #0
 80151dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80151e0:	f104 021a 	add.w	r2, r4, #26
 80151e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80151e6:	9305      	str	r3, [sp, #20]
 80151e8:	eba3 0309 	sub.w	r3, r3, r9
 80151ec:	455b      	cmp	r3, fp
 80151ee:	dc33      	bgt.n	8015258 <_printf_float+0x384>
 80151f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80151f4:	429a      	cmp	r2, r3
 80151f6:	db3b      	blt.n	8015270 <_printf_float+0x39c>
 80151f8:	6823      	ldr	r3, [r4, #0]
 80151fa:	07da      	lsls	r2, r3, #31
 80151fc:	d438      	bmi.n	8015270 <_printf_float+0x39c>
 80151fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015200:	9a05      	ldr	r2, [sp, #20]
 8015202:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015204:	1a9a      	subs	r2, r3, r2
 8015206:	eba3 0901 	sub.w	r9, r3, r1
 801520a:	4591      	cmp	r9, r2
 801520c:	bfa8      	it	ge
 801520e:	4691      	movge	r9, r2
 8015210:	f1b9 0f00 	cmp.w	r9, #0
 8015214:	dc35      	bgt.n	8015282 <_printf_float+0x3ae>
 8015216:	f04f 0800 	mov.w	r8, #0
 801521a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801521e:	f104 0a1a 	add.w	sl, r4, #26
 8015222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015226:	1a9b      	subs	r3, r3, r2
 8015228:	eba3 0309 	sub.w	r3, r3, r9
 801522c:	4543      	cmp	r3, r8
 801522e:	f77f af79 	ble.w	8015124 <_printf_float+0x250>
 8015232:	2301      	movs	r3, #1
 8015234:	4652      	mov	r2, sl
 8015236:	4631      	mov	r1, r6
 8015238:	4628      	mov	r0, r5
 801523a:	47b8      	blx	r7
 801523c:	3001      	adds	r0, #1
 801523e:	f43f aeaa 	beq.w	8014f96 <_printf_float+0xc2>
 8015242:	f108 0801 	add.w	r8, r8, #1
 8015246:	e7ec      	b.n	8015222 <_printf_float+0x34e>
 8015248:	4613      	mov	r3, r2
 801524a:	4631      	mov	r1, r6
 801524c:	4642      	mov	r2, r8
 801524e:	4628      	mov	r0, r5
 8015250:	47b8      	blx	r7
 8015252:	3001      	adds	r0, #1
 8015254:	d1c0      	bne.n	80151d8 <_printf_float+0x304>
 8015256:	e69e      	b.n	8014f96 <_printf_float+0xc2>
 8015258:	2301      	movs	r3, #1
 801525a:	4631      	mov	r1, r6
 801525c:	4628      	mov	r0, r5
 801525e:	9205      	str	r2, [sp, #20]
 8015260:	47b8      	blx	r7
 8015262:	3001      	adds	r0, #1
 8015264:	f43f ae97 	beq.w	8014f96 <_printf_float+0xc2>
 8015268:	9a05      	ldr	r2, [sp, #20]
 801526a:	f10b 0b01 	add.w	fp, fp, #1
 801526e:	e7b9      	b.n	80151e4 <_printf_float+0x310>
 8015270:	ee18 3a10 	vmov	r3, s16
 8015274:	4652      	mov	r2, sl
 8015276:	4631      	mov	r1, r6
 8015278:	4628      	mov	r0, r5
 801527a:	47b8      	blx	r7
 801527c:	3001      	adds	r0, #1
 801527e:	d1be      	bne.n	80151fe <_printf_float+0x32a>
 8015280:	e689      	b.n	8014f96 <_printf_float+0xc2>
 8015282:	9a05      	ldr	r2, [sp, #20]
 8015284:	464b      	mov	r3, r9
 8015286:	4442      	add	r2, r8
 8015288:	4631      	mov	r1, r6
 801528a:	4628      	mov	r0, r5
 801528c:	47b8      	blx	r7
 801528e:	3001      	adds	r0, #1
 8015290:	d1c1      	bne.n	8015216 <_printf_float+0x342>
 8015292:	e680      	b.n	8014f96 <_printf_float+0xc2>
 8015294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015296:	2a01      	cmp	r2, #1
 8015298:	dc01      	bgt.n	801529e <_printf_float+0x3ca>
 801529a:	07db      	lsls	r3, r3, #31
 801529c:	d538      	bpl.n	8015310 <_printf_float+0x43c>
 801529e:	2301      	movs	r3, #1
 80152a0:	4642      	mov	r2, r8
 80152a2:	4631      	mov	r1, r6
 80152a4:	4628      	mov	r0, r5
 80152a6:	47b8      	blx	r7
 80152a8:	3001      	adds	r0, #1
 80152aa:	f43f ae74 	beq.w	8014f96 <_printf_float+0xc2>
 80152ae:	ee18 3a10 	vmov	r3, s16
 80152b2:	4652      	mov	r2, sl
 80152b4:	4631      	mov	r1, r6
 80152b6:	4628      	mov	r0, r5
 80152b8:	47b8      	blx	r7
 80152ba:	3001      	adds	r0, #1
 80152bc:	f43f ae6b 	beq.w	8014f96 <_printf_float+0xc2>
 80152c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80152c4:	2200      	movs	r2, #0
 80152c6:	2300      	movs	r3, #0
 80152c8:	f7eb fc16 	bl	8000af8 <__aeabi_dcmpeq>
 80152cc:	b9d8      	cbnz	r0, 8015306 <_printf_float+0x432>
 80152ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152d0:	f108 0201 	add.w	r2, r8, #1
 80152d4:	3b01      	subs	r3, #1
 80152d6:	4631      	mov	r1, r6
 80152d8:	4628      	mov	r0, r5
 80152da:	47b8      	blx	r7
 80152dc:	3001      	adds	r0, #1
 80152de:	d10e      	bne.n	80152fe <_printf_float+0x42a>
 80152e0:	e659      	b.n	8014f96 <_printf_float+0xc2>
 80152e2:	2301      	movs	r3, #1
 80152e4:	4652      	mov	r2, sl
 80152e6:	4631      	mov	r1, r6
 80152e8:	4628      	mov	r0, r5
 80152ea:	47b8      	blx	r7
 80152ec:	3001      	adds	r0, #1
 80152ee:	f43f ae52 	beq.w	8014f96 <_printf_float+0xc2>
 80152f2:	f108 0801 	add.w	r8, r8, #1
 80152f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152f8:	3b01      	subs	r3, #1
 80152fa:	4543      	cmp	r3, r8
 80152fc:	dcf1      	bgt.n	80152e2 <_printf_float+0x40e>
 80152fe:	464b      	mov	r3, r9
 8015300:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015304:	e6dc      	b.n	80150c0 <_printf_float+0x1ec>
 8015306:	f04f 0800 	mov.w	r8, #0
 801530a:	f104 0a1a 	add.w	sl, r4, #26
 801530e:	e7f2      	b.n	80152f6 <_printf_float+0x422>
 8015310:	2301      	movs	r3, #1
 8015312:	4642      	mov	r2, r8
 8015314:	e7df      	b.n	80152d6 <_printf_float+0x402>
 8015316:	2301      	movs	r3, #1
 8015318:	464a      	mov	r2, r9
 801531a:	4631      	mov	r1, r6
 801531c:	4628      	mov	r0, r5
 801531e:	47b8      	blx	r7
 8015320:	3001      	adds	r0, #1
 8015322:	f43f ae38 	beq.w	8014f96 <_printf_float+0xc2>
 8015326:	f108 0801 	add.w	r8, r8, #1
 801532a:	68e3      	ldr	r3, [r4, #12]
 801532c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801532e:	1a5b      	subs	r3, r3, r1
 8015330:	4543      	cmp	r3, r8
 8015332:	dcf0      	bgt.n	8015316 <_printf_float+0x442>
 8015334:	e6fa      	b.n	801512c <_printf_float+0x258>
 8015336:	f04f 0800 	mov.w	r8, #0
 801533a:	f104 0919 	add.w	r9, r4, #25
 801533e:	e7f4      	b.n	801532a <_printf_float+0x456>

08015340 <_printf_common>:
 8015340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015344:	4616      	mov	r6, r2
 8015346:	4699      	mov	r9, r3
 8015348:	688a      	ldr	r2, [r1, #8]
 801534a:	690b      	ldr	r3, [r1, #16]
 801534c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015350:	4293      	cmp	r3, r2
 8015352:	bfb8      	it	lt
 8015354:	4613      	movlt	r3, r2
 8015356:	6033      	str	r3, [r6, #0]
 8015358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801535c:	4607      	mov	r7, r0
 801535e:	460c      	mov	r4, r1
 8015360:	b10a      	cbz	r2, 8015366 <_printf_common+0x26>
 8015362:	3301      	adds	r3, #1
 8015364:	6033      	str	r3, [r6, #0]
 8015366:	6823      	ldr	r3, [r4, #0]
 8015368:	0699      	lsls	r1, r3, #26
 801536a:	bf42      	ittt	mi
 801536c:	6833      	ldrmi	r3, [r6, #0]
 801536e:	3302      	addmi	r3, #2
 8015370:	6033      	strmi	r3, [r6, #0]
 8015372:	6825      	ldr	r5, [r4, #0]
 8015374:	f015 0506 	ands.w	r5, r5, #6
 8015378:	d106      	bne.n	8015388 <_printf_common+0x48>
 801537a:	f104 0a19 	add.w	sl, r4, #25
 801537e:	68e3      	ldr	r3, [r4, #12]
 8015380:	6832      	ldr	r2, [r6, #0]
 8015382:	1a9b      	subs	r3, r3, r2
 8015384:	42ab      	cmp	r3, r5
 8015386:	dc26      	bgt.n	80153d6 <_printf_common+0x96>
 8015388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801538c:	1e13      	subs	r3, r2, #0
 801538e:	6822      	ldr	r2, [r4, #0]
 8015390:	bf18      	it	ne
 8015392:	2301      	movne	r3, #1
 8015394:	0692      	lsls	r2, r2, #26
 8015396:	d42b      	bmi.n	80153f0 <_printf_common+0xb0>
 8015398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801539c:	4649      	mov	r1, r9
 801539e:	4638      	mov	r0, r7
 80153a0:	47c0      	blx	r8
 80153a2:	3001      	adds	r0, #1
 80153a4:	d01e      	beq.n	80153e4 <_printf_common+0xa4>
 80153a6:	6823      	ldr	r3, [r4, #0]
 80153a8:	68e5      	ldr	r5, [r4, #12]
 80153aa:	6832      	ldr	r2, [r6, #0]
 80153ac:	f003 0306 	and.w	r3, r3, #6
 80153b0:	2b04      	cmp	r3, #4
 80153b2:	bf08      	it	eq
 80153b4:	1aad      	subeq	r5, r5, r2
 80153b6:	68a3      	ldr	r3, [r4, #8]
 80153b8:	6922      	ldr	r2, [r4, #16]
 80153ba:	bf0c      	ite	eq
 80153bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80153c0:	2500      	movne	r5, #0
 80153c2:	4293      	cmp	r3, r2
 80153c4:	bfc4      	itt	gt
 80153c6:	1a9b      	subgt	r3, r3, r2
 80153c8:	18ed      	addgt	r5, r5, r3
 80153ca:	2600      	movs	r6, #0
 80153cc:	341a      	adds	r4, #26
 80153ce:	42b5      	cmp	r5, r6
 80153d0:	d11a      	bne.n	8015408 <_printf_common+0xc8>
 80153d2:	2000      	movs	r0, #0
 80153d4:	e008      	b.n	80153e8 <_printf_common+0xa8>
 80153d6:	2301      	movs	r3, #1
 80153d8:	4652      	mov	r2, sl
 80153da:	4649      	mov	r1, r9
 80153dc:	4638      	mov	r0, r7
 80153de:	47c0      	blx	r8
 80153e0:	3001      	adds	r0, #1
 80153e2:	d103      	bne.n	80153ec <_printf_common+0xac>
 80153e4:	f04f 30ff 	mov.w	r0, #4294967295
 80153e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153ec:	3501      	adds	r5, #1
 80153ee:	e7c6      	b.n	801537e <_printf_common+0x3e>
 80153f0:	18e1      	adds	r1, r4, r3
 80153f2:	1c5a      	adds	r2, r3, #1
 80153f4:	2030      	movs	r0, #48	; 0x30
 80153f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80153fa:	4422      	add	r2, r4
 80153fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015400:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015404:	3302      	adds	r3, #2
 8015406:	e7c7      	b.n	8015398 <_printf_common+0x58>
 8015408:	2301      	movs	r3, #1
 801540a:	4622      	mov	r2, r4
 801540c:	4649      	mov	r1, r9
 801540e:	4638      	mov	r0, r7
 8015410:	47c0      	blx	r8
 8015412:	3001      	adds	r0, #1
 8015414:	d0e6      	beq.n	80153e4 <_printf_common+0xa4>
 8015416:	3601      	adds	r6, #1
 8015418:	e7d9      	b.n	80153ce <_printf_common+0x8e>
	...

0801541c <_printf_i>:
 801541c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015420:	7e0f      	ldrb	r7, [r1, #24]
 8015422:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015424:	2f78      	cmp	r7, #120	; 0x78
 8015426:	4691      	mov	r9, r2
 8015428:	4680      	mov	r8, r0
 801542a:	460c      	mov	r4, r1
 801542c:	469a      	mov	sl, r3
 801542e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015432:	d807      	bhi.n	8015444 <_printf_i+0x28>
 8015434:	2f62      	cmp	r7, #98	; 0x62
 8015436:	d80a      	bhi.n	801544e <_printf_i+0x32>
 8015438:	2f00      	cmp	r7, #0
 801543a:	f000 80d8 	beq.w	80155ee <_printf_i+0x1d2>
 801543e:	2f58      	cmp	r7, #88	; 0x58
 8015440:	f000 80a3 	beq.w	801558a <_printf_i+0x16e>
 8015444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801544c:	e03a      	b.n	80154c4 <_printf_i+0xa8>
 801544e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015452:	2b15      	cmp	r3, #21
 8015454:	d8f6      	bhi.n	8015444 <_printf_i+0x28>
 8015456:	a101      	add	r1, pc, #4	; (adr r1, 801545c <_printf_i+0x40>)
 8015458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801545c:	080154b5 	.word	0x080154b5
 8015460:	080154c9 	.word	0x080154c9
 8015464:	08015445 	.word	0x08015445
 8015468:	08015445 	.word	0x08015445
 801546c:	08015445 	.word	0x08015445
 8015470:	08015445 	.word	0x08015445
 8015474:	080154c9 	.word	0x080154c9
 8015478:	08015445 	.word	0x08015445
 801547c:	08015445 	.word	0x08015445
 8015480:	08015445 	.word	0x08015445
 8015484:	08015445 	.word	0x08015445
 8015488:	080155d5 	.word	0x080155d5
 801548c:	080154f9 	.word	0x080154f9
 8015490:	080155b7 	.word	0x080155b7
 8015494:	08015445 	.word	0x08015445
 8015498:	08015445 	.word	0x08015445
 801549c:	080155f7 	.word	0x080155f7
 80154a0:	08015445 	.word	0x08015445
 80154a4:	080154f9 	.word	0x080154f9
 80154a8:	08015445 	.word	0x08015445
 80154ac:	08015445 	.word	0x08015445
 80154b0:	080155bf 	.word	0x080155bf
 80154b4:	682b      	ldr	r3, [r5, #0]
 80154b6:	1d1a      	adds	r2, r3, #4
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	602a      	str	r2, [r5, #0]
 80154bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80154c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80154c4:	2301      	movs	r3, #1
 80154c6:	e0a3      	b.n	8015610 <_printf_i+0x1f4>
 80154c8:	6820      	ldr	r0, [r4, #0]
 80154ca:	6829      	ldr	r1, [r5, #0]
 80154cc:	0606      	lsls	r6, r0, #24
 80154ce:	f101 0304 	add.w	r3, r1, #4
 80154d2:	d50a      	bpl.n	80154ea <_printf_i+0xce>
 80154d4:	680e      	ldr	r6, [r1, #0]
 80154d6:	602b      	str	r3, [r5, #0]
 80154d8:	2e00      	cmp	r6, #0
 80154da:	da03      	bge.n	80154e4 <_printf_i+0xc8>
 80154dc:	232d      	movs	r3, #45	; 0x2d
 80154de:	4276      	negs	r6, r6
 80154e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154e4:	485e      	ldr	r0, [pc, #376]	; (8015660 <_printf_i+0x244>)
 80154e6:	230a      	movs	r3, #10
 80154e8:	e019      	b.n	801551e <_printf_i+0x102>
 80154ea:	680e      	ldr	r6, [r1, #0]
 80154ec:	602b      	str	r3, [r5, #0]
 80154ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80154f2:	bf18      	it	ne
 80154f4:	b236      	sxthne	r6, r6
 80154f6:	e7ef      	b.n	80154d8 <_printf_i+0xbc>
 80154f8:	682b      	ldr	r3, [r5, #0]
 80154fa:	6820      	ldr	r0, [r4, #0]
 80154fc:	1d19      	adds	r1, r3, #4
 80154fe:	6029      	str	r1, [r5, #0]
 8015500:	0601      	lsls	r1, r0, #24
 8015502:	d501      	bpl.n	8015508 <_printf_i+0xec>
 8015504:	681e      	ldr	r6, [r3, #0]
 8015506:	e002      	b.n	801550e <_printf_i+0xf2>
 8015508:	0646      	lsls	r6, r0, #25
 801550a:	d5fb      	bpl.n	8015504 <_printf_i+0xe8>
 801550c:	881e      	ldrh	r6, [r3, #0]
 801550e:	4854      	ldr	r0, [pc, #336]	; (8015660 <_printf_i+0x244>)
 8015510:	2f6f      	cmp	r7, #111	; 0x6f
 8015512:	bf0c      	ite	eq
 8015514:	2308      	moveq	r3, #8
 8015516:	230a      	movne	r3, #10
 8015518:	2100      	movs	r1, #0
 801551a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801551e:	6865      	ldr	r5, [r4, #4]
 8015520:	60a5      	str	r5, [r4, #8]
 8015522:	2d00      	cmp	r5, #0
 8015524:	bfa2      	ittt	ge
 8015526:	6821      	ldrge	r1, [r4, #0]
 8015528:	f021 0104 	bicge.w	r1, r1, #4
 801552c:	6021      	strge	r1, [r4, #0]
 801552e:	b90e      	cbnz	r6, 8015534 <_printf_i+0x118>
 8015530:	2d00      	cmp	r5, #0
 8015532:	d04d      	beq.n	80155d0 <_printf_i+0x1b4>
 8015534:	4615      	mov	r5, r2
 8015536:	fbb6 f1f3 	udiv	r1, r6, r3
 801553a:	fb03 6711 	mls	r7, r3, r1, r6
 801553e:	5dc7      	ldrb	r7, [r0, r7]
 8015540:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015544:	4637      	mov	r7, r6
 8015546:	42bb      	cmp	r3, r7
 8015548:	460e      	mov	r6, r1
 801554a:	d9f4      	bls.n	8015536 <_printf_i+0x11a>
 801554c:	2b08      	cmp	r3, #8
 801554e:	d10b      	bne.n	8015568 <_printf_i+0x14c>
 8015550:	6823      	ldr	r3, [r4, #0]
 8015552:	07de      	lsls	r6, r3, #31
 8015554:	d508      	bpl.n	8015568 <_printf_i+0x14c>
 8015556:	6923      	ldr	r3, [r4, #16]
 8015558:	6861      	ldr	r1, [r4, #4]
 801555a:	4299      	cmp	r1, r3
 801555c:	bfde      	ittt	le
 801555e:	2330      	movle	r3, #48	; 0x30
 8015560:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015564:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015568:	1b52      	subs	r2, r2, r5
 801556a:	6122      	str	r2, [r4, #16]
 801556c:	f8cd a000 	str.w	sl, [sp]
 8015570:	464b      	mov	r3, r9
 8015572:	aa03      	add	r2, sp, #12
 8015574:	4621      	mov	r1, r4
 8015576:	4640      	mov	r0, r8
 8015578:	f7ff fee2 	bl	8015340 <_printf_common>
 801557c:	3001      	adds	r0, #1
 801557e:	d14c      	bne.n	801561a <_printf_i+0x1fe>
 8015580:	f04f 30ff 	mov.w	r0, #4294967295
 8015584:	b004      	add	sp, #16
 8015586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801558a:	4835      	ldr	r0, [pc, #212]	; (8015660 <_printf_i+0x244>)
 801558c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015590:	6829      	ldr	r1, [r5, #0]
 8015592:	6823      	ldr	r3, [r4, #0]
 8015594:	f851 6b04 	ldr.w	r6, [r1], #4
 8015598:	6029      	str	r1, [r5, #0]
 801559a:	061d      	lsls	r5, r3, #24
 801559c:	d514      	bpl.n	80155c8 <_printf_i+0x1ac>
 801559e:	07df      	lsls	r7, r3, #31
 80155a0:	bf44      	itt	mi
 80155a2:	f043 0320 	orrmi.w	r3, r3, #32
 80155a6:	6023      	strmi	r3, [r4, #0]
 80155a8:	b91e      	cbnz	r6, 80155b2 <_printf_i+0x196>
 80155aa:	6823      	ldr	r3, [r4, #0]
 80155ac:	f023 0320 	bic.w	r3, r3, #32
 80155b0:	6023      	str	r3, [r4, #0]
 80155b2:	2310      	movs	r3, #16
 80155b4:	e7b0      	b.n	8015518 <_printf_i+0xfc>
 80155b6:	6823      	ldr	r3, [r4, #0]
 80155b8:	f043 0320 	orr.w	r3, r3, #32
 80155bc:	6023      	str	r3, [r4, #0]
 80155be:	2378      	movs	r3, #120	; 0x78
 80155c0:	4828      	ldr	r0, [pc, #160]	; (8015664 <_printf_i+0x248>)
 80155c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80155c6:	e7e3      	b.n	8015590 <_printf_i+0x174>
 80155c8:	0659      	lsls	r1, r3, #25
 80155ca:	bf48      	it	mi
 80155cc:	b2b6      	uxthmi	r6, r6
 80155ce:	e7e6      	b.n	801559e <_printf_i+0x182>
 80155d0:	4615      	mov	r5, r2
 80155d2:	e7bb      	b.n	801554c <_printf_i+0x130>
 80155d4:	682b      	ldr	r3, [r5, #0]
 80155d6:	6826      	ldr	r6, [r4, #0]
 80155d8:	6961      	ldr	r1, [r4, #20]
 80155da:	1d18      	adds	r0, r3, #4
 80155dc:	6028      	str	r0, [r5, #0]
 80155de:	0635      	lsls	r5, r6, #24
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	d501      	bpl.n	80155e8 <_printf_i+0x1cc>
 80155e4:	6019      	str	r1, [r3, #0]
 80155e6:	e002      	b.n	80155ee <_printf_i+0x1d2>
 80155e8:	0670      	lsls	r0, r6, #25
 80155ea:	d5fb      	bpl.n	80155e4 <_printf_i+0x1c8>
 80155ec:	8019      	strh	r1, [r3, #0]
 80155ee:	2300      	movs	r3, #0
 80155f0:	6123      	str	r3, [r4, #16]
 80155f2:	4615      	mov	r5, r2
 80155f4:	e7ba      	b.n	801556c <_printf_i+0x150>
 80155f6:	682b      	ldr	r3, [r5, #0]
 80155f8:	1d1a      	adds	r2, r3, #4
 80155fa:	602a      	str	r2, [r5, #0]
 80155fc:	681d      	ldr	r5, [r3, #0]
 80155fe:	6862      	ldr	r2, [r4, #4]
 8015600:	2100      	movs	r1, #0
 8015602:	4628      	mov	r0, r5
 8015604:	f7ea fe04 	bl	8000210 <memchr>
 8015608:	b108      	cbz	r0, 801560e <_printf_i+0x1f2>
 801560a:	1b40      	subs	r0, r0, r5
 801560c:	6060      	str	r0, [r4, #4]
 801560e:	6863      	ldr	r3, [r4, #4]
 8015610:	6123      	str	r3, [r4, #16]
 8015612:	2300      	movs	r3, #0
 8015614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015618:	e7a8      	b.n	801556c <_printf_i+0x150>
 801561a:	6923      	ldr	r3, [r4, #16]
 801561c:	462a      	mov	r2, r5
 801561e:	4649      	mov	r1, r9
 8015620:	4640      	mov	r0, r8
 8015622:	47d0      	blx	sl
 8015624:	3001      	adds	r0, #1
 8015626:	d0ab      	beq.n	8015580 <_printf_i+0x164>
 8015628:	6823      	ldr	r3, [r4, #0]
 801562a:	079b      	lsls	r3, r3, #30
 801562c:	d413      	bmi.n	8015656 <_printf_i+0x23a>
 801562e:	68e0      	ldr	r0, [r4, #12]
 8015630:	9b03      	ldr	r3, [sp, #12]
 8015632:	4298      	cmp	r0, r3
 8015634:	bfb8      	it	lt
 8015636:	4618      	movlt	r0, r3
 8015638:	e7a4      	b.n	8015584 <_printf_i+0x168>
 801563a:	2301      	movs	r3, #1
 801563c:	4632      	mov	r2, r6
 801563e:	4649      	mov	r1, r9
 8015640:	4640      	mov	r0, r8
 8015642:	47d0      	blx	sl
 8015644:	3001      	adds	r0, #1
 8015646:	d09b      	beq.n	8015580 <_printf_i+0x164>
 8015648:	3501      	adds	r5, #1
 801564a:	68e3      	ldr	r3, [r4, #12]
 801564c:	9903      	ldr	r1, [sp, #12]
 801564e:	1a5b      	subs	r3, r3, r1
 8015650:	42ab      	cmp	r3, r5
 8015652:	dcf2      	bgt.n	801563a <_printf_i+0x21e>
 8015654:	e7eb      	b.n	801562e <_printf_i+0x212>
 8015656:	2500      	movs	r5, #0
 8015658:	f104 0619 	add.w	r6, r4, #25
 801565c:	e7f5      	b.n	801564a <_printf_i+0x22e>
 801565e:	bf00      	nop
 8015660:	0801a4c8 	.word	0x0801a4c8
 8015664:	0801a4d9 	.word	0x0801a4d9

08015668 <_sbrk_r>:
 8015668:	b538      	push	{r3, r4, r5, lr}
 801566a:	4d06      	ldr	r5, [pc, #24]	; (8015684 <_sbrk_r+0x1c>)
 801566c:	2300      	movs	r3, #0
 801566e:	4604      	mov	r4, r0
 8015670:	4608      	mov	r0, r1
 8015672:	602b      	str	r3, [r5, #0]
 8015674:	f7f6 faf4 	bl	800bc60 <_sbrk>
 8015678:	1c43      	adds	r3, r0, #1
 801567a:	d102      	bne.n	8015682 <_sbrk_r+0x1a>
 801567c:	682b      	ldr	r3, [r5, #0]
 801567e:	b103      	cbz	r3, 8015682 <_sbrk_r+0x1a>
 8015680:	6023      	str	r3, [r4, #0]
 8015682:	bd38      	pop	{r3, r4, r5, pc}
 8015684:	20006d48 	.word	0x20006d48

08015688 <siscanf>:
 8015688:	b40e      	push	{r1, r2, r3}
 801568a:	b510      	push	{r4, lr}
 801568c:	b09f      	sub	sp, #124	; 0x7c
 801568e:	ac21      	add	r4, sp, #132	; 0x84
 8015690:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015694:	f854 2b04 	ldr.w	r2, [r4], #4
 8015698:	9201      	str	r2, [sp, #4]
 801569a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801569e:	9004      	str	r0, [sp, #16]
 80156a0:	9008      	str	r0, [sp, #32]
 80156a2:	f7ea fda7 	bl	80001f4 <strlen>
 80156a6:	4b0c      	ldr	r3, [pc, #48]	; (80156d8 <siscanf+0x50>)
 80156a8:	9005      	str	r0, [sp, #20]
 80156aa:	9009      	str	r0, [sp, #36]	; 0x24
 80156ac:	930d      	str	r3, [sp, #52]	; 0x34
 80156ae:	480b      	ldr	r0, [pc, #44]	; (80156dc <siscanf+0x54>)
 80156b0:	9a01      	ldr	r2, [sp, #4]
 80156b2:	6800      	ldr	r0, [r0, #0]
 80156b4:	9403      	str	r4, [sp, #12]
 80156b6:	2300      	movs	r3, #0
 80156b8:	9311      	str	r3, [sp, #68]	; 0x44
 80156ba:	9316      	str	r3, [sp, #88]	; 0x58
 80156bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80156c4:	a904      	add	r1, sp, #16
 80156c6:	4623      	mov	r3, r4
 80156c8:	f001 fc86 	bl	8016fd8 <__ssvfiscanf_r>
 80156cc:	b01f      	add	sp, #124	; 0x7c
 80156ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156d2:	b003      	add	sp, #12
 80156d4:	4770      	bx	lr
 80156d6:	bf00      	nop
 80156d8:	08015703 	.word	0x08015703
 80156dc:	20000320 	.word	0x20000320

080156e0 <__sread>:
 80156e0:	b510      	push	{r4, lr}
 80156e2:	460c      	mov	r4, r1
 80156e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156e8:	f001 ff40 	bl	801756c <_read_r>
 80156ec:	2800      	cmp	r0, #0
 80156ee:	bfab      	itete	ge
 80156f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80156f2:	89a3      	ldrhlt	r3, [r4, #12]
 80156f4:	181b      	addge	r3, r3, r0
 80156f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80156fa:	bfac      	ite	ge
 80156fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80156fe:	81a3      	strhlt	r3, [r4, #12]
 8015700:	bd10      	pop	{r4, pc}

08015702 <__seofread>:
 8015702:	2000      	movs	r0, #0
 8015704:	4770      	bx	lr

08015706 <__swrite>:
 8015706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801570a:	461f      	mov	r7, r3
 801570c:	898b      	ldrh	r3, [r1, #12]
 801570e:	05db      	lsls	r3, r3, #23
 8015710:	4605      	mov	r5, r0
 8015712:	460c      	mov	r4, r1
 8015714:	4616      	mov	r6, r2
 8015716:	d505      	bpl.n	8015724 <__swrite+0x1e>
 8015718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801571c:	2302      	movs	r3, #2
 801571e:	2200      	movs	r2, #0
 8015720:	f000 feec 	bl	80164fc <_lseek_r>
 8015724:	89a3      	ldrh	r3, [r4, #12]
 8015726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801572a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801572e:	81a3      	strh	r3, [r4, #12]
 8015730:	4632      	mov	r2, r6
 8015732:	463b      	mov	r3, r7
 8015734:	4628      	mov	r0, r5
 8015736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801573a:	f000 b83f 	b.w	80157bc <_write_r>

0801573e <__sseek>:
 801573e:	b510      	push	{r4, lr}
 8015740:	460c      	mov	r4, r1
 8015742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015746:	f000 fed9 	bl	80164fc <_lseek_r>
 801574a:	1c43      	adds	r3, r0, #1
 801574c:	89a3      	ldrh	r3, [r4, #12]
 801574e:	bf15      	itete	ne
 8015750:	6560      	strne	r0, [r4, #84]	; 0x54
 8015752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801575a:	81a3      	strheq	r3, [r4, #12]
 801575c:	bf18      	it	ne
 801575e:	81a3      	strhne	r3, [r4, #12]
 8015760:	bd10      	pop	{r4, pc}

08015762 <__sclose>:
 8015762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015766:	f000 b83b 	b.w	80157e0 <_close_r>

0801576a <strcpy>:
 801576a:	4603      	mov	r3, r0
 801576c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015770:	f803 2b01 	strb.w	r2, [r3], #1
 8015774:	2a00      	cmp	r2, #0
 8015776:	d1f9      	bne.n	801576c <strcpy+0x2>
 8015778:	4770      	bx	lr
	...

0801577c <_vsiprintf_r>:
 801577c:	b500      	push	{lr}
 801577e:	b09b      	sub	sp, #108	; 0x6c
 8015780:	9100      	str	r1, [sp, #0]
 8015782:	9104      	str	r1, [sp, #16]
 8015784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015788:	9105      	str	r1, [sp, #20]
 801578a:	9102      	str	r1, [sp, #8]
 801578c:	4905      	ldr	r1, [pc, #20]	; (80157a4 <_vsiprintf_r+0x28>)
 801578e:	9103      	str	r1, [sp, #12]
 8015790:	4669      	mov	r1, sp
 8015792:	f001 fac7 	bl	8016d24 <_svfiprintf_r>
 8015796:	9b00      	ldr	r3, [sp, #0]
 8015798:	2200      	movs	r2, #0
 801579a:	701a      	strb	r2, [r3, #0]
 801579c:	b01b      	add	sp, #108	; 0x6c
 801579e:	f85d fb04 	ldr.w	pc, [sp], #4
 80157a2:	bf00      	nop
 80157a4:	ffff0208 	.word	0xffff0208

080157a8 <vsiprintf>:
 80157a8:	4613      	mov	r3, r2
 80157aa:	460a      	mov	r2, r1
 80157ac:	4601      	mov	r1, r0
 80157ae:	4802      	ldr	r0, [pc, #8]	; (80157b8 <vsiprintf+0x10>)
 80157b0:	6800      	ldr	r0, [r0, #0]
 80157b2:	f7ff bfe3 	b.w	801577c <_vsiprintf_r>
 80157b6:	bf00      	nop
 80157b8:	20000320 	.word	0x20000320

080157bc <_write_r>:
 80157bc:	b538      	push	{r3, r4, r5, lr}
 80157be:	4d07      	ldr	r5, [pc, #28]	; (80157dc <_write_r+0x20>)
 80157c0:	4604      	mov	r4, r0
 80157c2:	4608      	mov	r0, r1
 80157c4:	4611      	mov	r1, r2
 80157c6:	2200      	movs	r2, #0
 80157c8:	602a      	str	r2, [r5, #0]
 80157ca:	461a      	mov	r2, r3
 80157cc:	f7f6 f9f7 	bl	800bbbe <_write>
 80157d0:	1c43      	adds	r3, r0, #1
 80157d2:	d102      	bne.n	80157da <_write_r+0x1e>
 80157d4:	682b      	ldr	r3, [r5, #0]
 80157d6:	b103      	cbz	r3, 80157da <_write_r+0x1e>
 80157d8:	6023      	str	r3, [r4, #0]
 80157da:	bd38      	pop	{r3, r4, r5, pc}
 80157dc:	20006d48 	.word	0x20006d48

080157e0 <_close_r>:
 80157e0:	b538      	push	{r3, r4, r5, lr}
 80157e2:	4d06      	ldr	r5, [pc, #24]	; (80157fc <_close_r+0x1c>)
 80157e4:	2300      	movs	r3, #0
 80157e6:	4604      	mov	r4, r0
 80157e8:	4608      	mov	r0, r1
 80157ea:	602b      	str	r3, [r5, #0]
 80157ec:	f7f6 fa03 	bl	800bbf6 <_close>
 80157f0:	1c43      	adds	r3, r0, #1
 80157f2:	d102      	bne.n	80157fa <_close_r+0x1a>
 80157f4:	682b      	ldr	r3, [r5, #0]
 80157f6:	b103      	cbz	r3, 80157fa <_close_r+0x1a>
 80157f8:	6023      	str	r3, [r4, #0]
 80157fa:	bd38      	pop	{r3, r4, r5, pc}
 80157fc:	20006d48 	.word	0x20006d48

08015800 <quorem>:
 8015800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015804:	6903      	ldr	r3, [r0, #16]
 8015806:	690c      	ldr	r4, [r1, #16]
 8015808:	42a3      	cmp	r3, r4
 801580a:	4607      	mov	r7, r0
 801580c:	f2c0 8081 	blt.w	8015912 <quorem+0x112>
 8015810:	3c01      	subs	r4, #1
 8015812:	f101 0814 	add.w	r8, r1, #20
 8015816:	f100 0514 	add.w	r5, r0, #20
 801581a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801581e:	9301      	str	r3, [sp, #4]
 8015820:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015828:	3301      	adds	r3, #1
 801582a:	429a      	cmp	r2, r3
 801582c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015830:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015834:	fbb2 f6f3 	udiv	r6, r2, r3
 8015838:	d331      	bcc.n	801589e <quorem+0x9e>
 801583a:	f04f 0e00 	mov.w	lr, #0
 801583e:	4640      	mov	r0, r8
 8015840:	46ac      	mov	ip, r5
 8015842:	46f2      	mov	sl, lr
 8015844:	f850 2b04 	ldr.w	r2, [r0], #4
 8015848:	b293      	uxth	r3, r2
 801584a:	fb06 e303 	mla	r3, r6, r3, lr
 801584e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015852:	b29b      	uxth	r3, r3
 8015854:	ebaa 0303 	sub.w	r3, sl, r3
 8015858:	f8dc a000 	ldr.w	sl, [ip]
 801585c:	0c12      	lsrs	r2, r2, #16
 801585e:	fa13 f38a 	uxtah	r3, r3, sl
 8015862:	fb06 e202 	mla	r2, r6, r2, lr
 8015866:	9300      	str	r3, [sp, #0]
 8015868:	9b00      	ldr	r3, [sp, #0]
 801586a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801586e:	b292      	uxth	r2, r2
 8015870:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015878:	f8bd 3000 	ldrh.w	r3, [sp]
 801587c:	4581      	cmp	r9, r0
 801587e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015882:	f84c 3b04 	str.w	r3, [ip], #4
 8015886:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801588a:	d2db      	bcs.n	8015844 <quorem+0x44>
 801588c:	f855 300b 	ldr.w	r3, [r5, fp]
 8015890:	b92b      	cbnz	r3, 801589e <quorem+0x9e>
 8015892:	9b01      	ldr	r3, [sp, #4]
 8015894:	3b04      	subs	r3, #4
 8015896:	429d      	cmp	r5, r3
 8015898:	461a      	mov	r2, r3
 801589a:	d32e      	bcc.n	80158fa <quorem+0xfa>
 801589c:	613c      	str	r4, [r7, #16]
 801589e:	4638      	mov	r0, r7
 80158a0:	f001 f8cc 	bl	8016a3c <__mcmp>
 80158a4:	2800      	cmp	r0, #0
 80158a6:	db24      	blt.n	80158f2 <quorem+0xf2>
 80158a8:	3601      	adds	r6, #1
 80158aa:	4628      	mov	r0, r5
 80158ac:	f04f 0c00 	mov.w	ip, #0
 80158b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80158b4:	f8d0 e000 	ldr.w	lr, [r0]
 80158b8:	b293      	uxth	r3, r2
 80158ba:	ebac 0303 	sub.w	r3, ip, r3
 80158be:	0c12      	lsrs	r2, r2, #16
 80158c0:	fa13 f38e 	uxtah	r3, r3, lr
 80158c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80158c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80158cc:	b29b      	uxth	r3, r3
 80158ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80158d2:	45c1      	cmp	r9, r8
 80158d4:	f840 3b04 	str.w	r3, [r0], #4
 80158d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80158dc:	d2e8      	bcs.n	80158b0 <quorem+0xb0>
 80158de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80158e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80158e6:	b922      	cbnz	r2, 80158f2 <quorem+0xf2>
 80158e8:	3b04      	subs	r3, #4
 80158ea:	429d      	cmp	r5, r3
 80158ec:	461a      	mov	r2, r3
 80158ee:	d30a      	bcc.n	8015906 <quorem+0x106>
 80158f0:	613c      	str	r4, [r7, #16]
 80158f2:	4630      	mov	r0, r6
 80158f4:	b003      	add	sp, #12
 80158f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158fa:	6812      	ldr	r2, [r2, #0]
 80158fc:	3b04      	subs	r3, #4
 80158fe:	2a00      	cmp	r2, #0
 8015900:	d1cc      	bne.n	801589c <quorem+0x9c>
 8015902:	3c01      	subs	r4, #1
 8015904:	e7c7      	b.n	8015896 <quorem+0x96>
 8015906:	6812      	ldr	r2, [r2, #0]
 8015908:	3b04      	subs	r3, #4
 801590a:	2a00      	cmp	r2, #0
 801590c:	d1f0      	bne.n	80158f0 <quorem+0xf0>
 801590e:	3c01      	subs	r4, #1
 8015910:	e7eb      	b.n	80158ea <quorem+0xea>
 8015912:	2000      	movs	r0, #0
 8015914:	e7ee      	b.n	80158f4 <quorem+0xf4>
	...

08015918 <_dtoa_r>:
 8015918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801591c:	ed2d 8b04 	vpush	{d8-d9}
 8015920:	ec57 6b10 	vmov	r6, r7, d0
 8015924:	b093      	sub	sp, #76	; 0x4c
 8015926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801592c:	9106      	str	r1, [sp, #24]
 801592e:	ee10 aa10 	vmov	sl, s0
 8015932:	4604      	mov	r4, r0
 8015934:	9209      	str	r2, [sp, #36]	; 0x24
 8015936:	930c      	str	r3, [sp, #48]	; 0x30
 8015938:	46bb      	mov	fp, r7
 801593a:	b975      	cbnz	r5, 801595a <_dtoa_r+0x42>
 801593c:	2010      	movs	r0, #16
 801593e:	f7ff f923 	bl	8014b88 <malloc>
 8015942:	4602      	mov	r2, r0
 8015944:	6260      	str	r0, [r4, #36]	; 0x24
 8015946:	b920      	cbnz	r0, 8015952 <_dtoa_r+0x3a>
 8015948:	4ba7      	ldr	r3, [pc, #668]	; (8015be8 <_dtoa_r+0x2d0>)
 801594a:	21ea      	movs	r1, #234	; 0xea
 801594c:	48a7      	ldr	r0, [pc, #668]	; (8015bec <_dtoa_r+0x2d4>)
 801594e:	f001 ff89 	bl	8017864 <__assert_func>
 8015952:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015956:	6005      	str	r5, [r0, #0]
 8015958:	60c5      	str	r5, [r0, #12]
 801595a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801595c:	6819      	ldr	r1, [r3, #0]
 801595e:	b151      	cbz	r1, 8015976 <_dtoa_r+0x5e>
 8015960:	685a      	ldr	r2, [r3, #4]
 8015962:	604a      	str	r2, [r1, #4]
 8015964:	2301      	movs	r3, #1
 8015966:	4093      	lsls	r3, r2
 8015968:	608b      	str	r3, [r1, #8]
 801596a:	4620      	mov	r0, r4
 801596c:	f000 fe24 	bl	80165b8 <_Bfree>
 8015970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015972:	2200      	movs	r2, #0
 8015974:	601a      	str	r2, [r3, #0]
 8015976:	1e3b      	subs	r3, r7, #0
 8015978:	bfaa      	itet	ge
 801597a:	2300      	movge	r3, #0
 801597c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015980:	f8c8 3000 	strge.w	r3, [r8]
 8015984:	4b9a      	ldr	r3, [pc, #616]	; (8015bf0 <_dtoa_r+0x2d8>)
 8015986:	bfbc      	itt	lt
 8015988:	2201      	movlt	r2, #1
 801598a:	f8c8 2000 	strlt.w	r2, [r8]
 801598e:	ea33 030b 	bics.w	r3, r3, fp
 8015992:	d11b      	bne.n	80159cc <_dtoa_r+0xb4>
 8015994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015996:	f242 730f 	movw	r3, #9999	; 0x270f
 801599a:	6013      	str	r3, [r2, #0]
 801599c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80159a0:	4333      	orrs	r3, r6
 80159a2:	f000 8592 	beq.w	80164ca <_dtoa_r+0xbb2>
 80159a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159a8:	b963      	cbnz	r3, 80159c4 <_dtoa_r+0xac>
 80159aa:	4b92      	ldr	r3, [pc, #584]	; (8015bf4 <_dtoa_r+0x2dc>)
 80159ac:	e022      	b.n	80159f4 <_dtoa_r+0xdc>
 80159ae:	4b92      	ldr	r3, [pc, #584]	; (8015bf8 <_dtoa_r+0x2e0>)
 80159b0:	9301      	str	r3, [sp, #4]
 80159b2:	3308      	adds	r3, #8
 80159b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80159b6:	6013      	str	r3, [r2, #0]
 80159b8:	9801      	ldr	r0, [sp, #4]
 80159ba:	b013      	add	sp, #76	; 0x4c
 80159bc:	ecbd 8b04 	vpop	{d8-d9}
 80159c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c4:	4b8b      	ldr	r3, [pc, #556]	; (8015bf4 <_dtoa_r+0x2dc>)
 80159c6:	9301      	str	r3, [sp, #4]
 80159c8:	3303      	adds	r3, #3
 80159ca:	e7f3      	b.n	80159b4 <_dtoa_r+0x9c>
 80159cc:	2200      	movs	r2, #0
 80159ce:	2300      	movs	r3, #0
 80159d0:	4650      	mov	r0, sl
 80159d2:	4659      	mov	r1, fp
 80159d4:	f7eb f890 	bl	8000af8 <__aeabi_dcmpeq>
 80159d8:	ec4b ab19 	vmov	d9, sl, fp
 80159dc:	4680      	mov	r8, r0
 80159de:	b158      	cbz	r0, 80159f8 <_dtoa_r+0xe0>
 80159e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159e2:	2301      	movs	r3, #1
 80159e4:	6013      	str	r3, [r2, #0]
 80159e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	f000 856b 	beq.w	80164c4 <_dtoa_r+0xbac>
 80159ee:	4883      	ldr	r0, [pc, #524]	; (8015bfc <_dtoa_r+0x2e4>)
 80159f0:	6018      	str	r0, [r3, #0]
 80159f2:	1e43      	subs	r3, r0, #1
 80159f4:	9301      	str	r3, [sp, #4]
 80159f6:	e7df      	b.n	80159b8 <_dtoa_r+0xa0>
 80159f8:	ec4b ab10 	vmov	d0, sl, fp
 80159fc:	aa10      	add	r2, sp, #64	; 0x40
 80159fe:	a911      	add	r1, sp, #68	; 0x44
 8015a00:	4620      	mov	r0, r4
 8015a02:	f001 f8c1 	bl	8016b88 <__d2b>
 8015a06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015a0a:	ee08 0a10 	vmov	s16, r0
 8015a0e:	2d00      	cmp	r5, #0
 8015a10:	f000 8084 	beq.w	8015b1c <_dtoa_r+0x204>
 8015a14:	ee19 3a90 	vmov	r3, s19
 8015a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015a1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015a20:	4656      	mov	r6, sl
 8015a22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015a26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015a2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015a2e:	4b74      	ldr	r3, [pc, #464]	; (8015c00 <_dtoa_r+0x2e8>)
 8015a30:	2200      	movs	r2, #0
 8015a32:	4630      	mov	r0, r6
 8015a34:	4639      	mov	r1, r7
 8015a36:	f7ea fc3f 	bl	80002b8 <__aeabi_dsub>
 8015a3a:	a365      	add	r3, pc, #404	; (adr r3, 8015bd0 <_dtoa_r+0x2b8>)
 8015a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a40:	f7ea fdf2 	bl	8000628 <__aeabi_dmul>
 8015a44:	a364      	add	r3, pc, #400	; (adr r3, 8015bd8 <_dtoa_r+0x2c0>)
 8015a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a4a:	f7ea fc37 	bl	80002bc <__adddf3>
 8015a4e:	4606      	mov	r6, r0
 8015a50:	4628      	mov	r0, r5
 8015a52:	460f      	mov	r7, r1
 8015a54:	f7ea fd7e 	bl	8000554 <__aeabi_i2d>
 8015a58:	a361      	add	r3, pc, #388	; (adr r3, 8015be0 <_dtoa_r+0x2c8>)
 8015a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5e:	f7ea fde3 	bl	8000628 <__aeabi_dmul>
 8015a62:	4602      	mov	r2, r0
 8015a64:	460b      	mov	r3, r1
 8015a66:	4630      	mov	r0, r6
 8015a68:	4639      	mov	r1, r7
 8015a6a:	f7ea fc27 	bl	80002bc <__adddf3>
 8015a6e:	4606      	mov	r6, r0
 8015a70:	460f      	mov	r7, r1
 8015a72:	f7eb f889 	bl	8000b88 <__aeabi_d2iz>
 8015a76:	2200      	movs	r2, #0
 8015a78:	9000      	str	r0, [sp, #0]
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	4630      	mov	r0, r6
 8015a7e:	4639      	mov	r1, r7
 8015a80:	f7eb f844 	bl	8000b0c <__aeabi_dcmplt>
 8015a84:	b150      	cbz	r0, 8015a9c <_dtoa_r+0x184>
 8015a86:	9800      	ldr	r0, [sp, #0]
 8015a88:	f7ea fd64 	bl	8000554 <__aeabi_i2d>
 8015a8c:	4632      	mov	r2, r6
 8015a8e:	463b      	mov	r3, r7
 8015a90:	f7eb f832 	bl	8000af8 <__aeabi_dcmpeq>
 8015a94:	b910      	cbnz	r0, 8015a9c <_dtoa_r+0x184>
 8015a96:	9b00      	ldr	r3, [sp, #0]
 8015a98:	3b01      	subs	r3, #1
 8015a9a:	9300      	str	r3, [sp, #0]
 8015a9c:	9b00      	ldr	r3, [sp, #0]
 8015a9e:	2b16      	cmp	r3, #22
 8015aa0:	d85a      	bhi.n	8015b58 <_dtoa_r+0x240>
 8015aa2:	9a00      	ldr	r2, [sp, #0]
 8015aa4:	4b57      	ldr	r3, [pc, #348]	; (8015c04 <_dtoa_r+0x2ec>)
 8015aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aae:	ec51 0b19 	vmov	r0, r1, d9
 8015ab2:	f7eb f82b 	bl	8000b0c <__aeabi_dcmplt>
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	d050      	beq.n	8015b5c <_dtoa_r+0x244>
 8015aba:	9b00      	ldr	r3, [sp, #0]
 8015abc:	3b01      	subs	r3, #1
 8015abe:	9300      	str	r3, [sp, #0]
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ac6:	1b5d      	subs	r5, r3, r5
 8015ac8:	1e6b      	subs	r3, r5, #1
 8015aca:	9305      	str	r3, [sp, #20]
 8015acc:	bf45      	ittet	mi
 8015ace:	f1c5 0301 	rsbmi	r3, r5, #1
 8015ad2:	9304      	strmi	r3, [sp, #16]
 8015ad4:	2300      	movpl	r3, #0
 8015ad6:	2300      	movmi	r3, #0
 8015ad8:	bf4c      	ite	mi
 8015ada:	9305      	strmi	r3, [sp, #20]
 8015adc:	9304      	strpl	r3, [sp, #16]
 8015ade:	9b00      	ldr	r3, [sp, #0]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	db3d      	blt.n	8015b60 <_dtoa_r+0x248>
 8015ae4:	9b05      	ldr	r3, [sp, #20]
 8015ae6:	9a00      	ldr	r2, [sp, #0]
 8015ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8015aea:	4413      	add	r3, r2
 8015aec:	9305      	str	r3, [sp, #20]
 8015aee:	2300      	movs	r3, #0
 8015af0:	9307      	str	r3, [sp, #28]
 8015af2:	9b06      	ldr	r3, [sp, #24]
 8015af4:	2b09      	cmp	r3, #9
 8015af6:	f200 8089 	bhi.w	8015c0c <_dtoa_r+0x2f4>
 8015afa:	2b05      	cmp	r3, #5
 8015afc:	bfc4      	itt	gt
 8015afe:	3b04      	subgt	r3, #4
 8015b00:	9306      	strgt	r3, [sp, #24]
 8015b02:	9b06      	ldr	r3, [sp, #24]
 8015b04:	f1a3 0302 	sub.w	r3, r3, #2
 8015b08:	bfcc      	ite	gt
 8015b0a:	2500      	movgt	r5, #0
 8015b0c:	2501      	movle	r5, #1
 8015b0e:	2b03      	cmp	r3, #3
 8015b10:	f200 8087 	bhi.w	8015c22 <_dtoa_r+0x30a>
 8015b14:	e8df f003 	tbb	[pc, r3]
 8015b18:	59383a2d 	.word	0x59383a2d
 8015b1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015b20:	441d      	add	r5, r3
 8015b22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015b26:	2b20      	cmp	r3, #32
 8015b28:	bfc1      	itttt	gt
 8015b2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015b2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015b32:	fa0b f303 	lslgt.w	r3, fp, r3
 8015b36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015b3a:	bfda      	itte	le
 8015b3c:	f1c3 0320 	rsble	r3, r3, #32
 8015b40:	fa06 f003 	lslle.w	r0, r6, r3
 8015b44:	4318      	orrgt	r0, r3
 8015b46:	f7ea fcf5 	bl	8000534 <__aeabi_ui2d>
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	4606      	mov	r6, r0
 8015b4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015b52:	3d01      	subs	r5, #1
 8015b54:	930e      	str	r3, [sp, #56]	; 0x38
 8015b56:	e76a      	b.n	8015a2e <_dtoa_r+0x116>
 8015b58:	2301      	movs	r3, #1
 8015b5a:	e7b2      	b.n	8015ac2 <_dtoa_r+0x1aa>
 8015b5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8015b5e:	e7b1      	b.n	8015ac4 <_dtoa_r+0x1ac>
 8015b60:	9b04      	ldr	r3, [sp, #16]
 8015b62:	9a00      	ldr	r2, [sp, #0]
 8015b64:	1a9b      	subs	r3, r3, r2
 8015b66:	9304      	str	r3, [sp, #16]
 8015b68:	4253      	negs	r3, r2
 8015b6a:	9307      	str	r3, [sp, #28]
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8015b70:	e7bf      	b.n	8015af2 <_dtoa_r+0x1da>
 8015b72:	2300      	movs	r3, #0
 8015b74:	9308      	str	r3, [sp, #32]
 8015b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	dc55      	bgt.n	8015c28 <_dtoa_r+0x310>
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015b82:	461a      	mov	r2, r3
 8015b84:	9209      	str	r2, [sp, #36]	; 0x24
 8015b86:	e00c      	b.n	8015ba2 <_dtoa_r+0x28a>
 8015b88:	2301      	movs	r3, #1
 8015b8a:	e7f3      	b.n	8015b74 <_dtoa_r+0x25c>
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b90:	9308      	str	r3, [sp, #32]
 8015b92:	9b00      	ldr	r3, [sp, #0]
 8015b94:	4413      	add	r3, r2
 8015b96:	9302      	str	r3, [sp, #8]
 8015b98:	3301      	adds	r3, #1
 8015b9a:	2b01      	cmp	r3, #1
 8015b9c:	9303      	str	r3, [sp, #12]
 8015b9e:	bfb8      	it	lt
 8015ba0:	2301      	movlt	r3, #1
 8015ba2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	6042      	str	r2, [r0, #4]
 8015ba8:	2204      	movs	r2, #4
 8015baa:	f102 0614 	add.w	r6, r2, #20
 8015bae:	429e      	cmp	r6, r3
 8015bb0:	6841      	ldr	r1, [r0, #4]
 8015bb2:	d93d      	bls.n	8015c30 <_dtoa_r+0x318>
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	f000 fcbf 	bl	8016538 <_Balloc>
 8015bba:	9001      	str	r0, [sp, #4]
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	d13b      	bne.n	8015c38 <_dtoa_r+0x320>
 8015bc0:	4b11      	ldr	r3, [pc, #68]	; (8015c08 <_dtoa_r+0x2f0>)
 8015bc2:	4602      	mov	r2, r0
 8015bc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015bc8:	e6c0      	b.n	801594c <_dtoa_r+0x34>
 8015bca:	2301      	movs	r3, #1
 8015bcc:	e7df      	b.n	8015b8e <_dtoa_r+0x276>
 8015bce:	bf00      	nop
 8015bd0:	636f4361 	.word	0x636f4361
 8015bd4:	3fd287a7 	.word	0x3fd287a7
 8015bd8:	8b60c8b3 	.word	0x8b60c8b3
 8015bdc:	3fc68a28 	.word	0x3fc68a28
 8015be0:	509f79fb 	.word	0x509f79fb
 8015be4:	3fd34413 	.word	0x3fd34413
 8015be8:	0801a5f8 	.word	0x0801a5f8
 8015bec:	0801a60f 	.word	0x0801a60f
 8015bf0:	7ff00000 	.word	0x7ff00000
 8015bf4:	0801a5f4 	.word	0x0801a5f4
 8015bf8:	0801a5eb 	.word	0x0801a5eb
 8015bfc:	0801a7ea 	.word	0x0801a7ea
 8015c00:	3ff80000 	.word	0x3ff80000
 8015c04:	0801a700 	.word	0x0801a700
 8015c08:	0801a66a 	.word	0x0801a66a
 8015c0c:	2501      	movs	r5, #1
 8015c0e:	2300      	movs	r3, #0
 8015c10:	9306      	str	r3, [sp, #24]
 8015c12:	9508      	str	r5, [sp, #32]
 8015c14:	f04f 33ff 	mov.w	r3, #4294967295
 8015c18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	2312      	movs	r3, #18
 8015c20:	e7b0      	b.n	8015b84 <_dtoa_r+0x26c>
 8015c22:	2301      	movs	r3, #1
 8015c24:	9308      	str	r3, [sp, #32]
 8015c26:	e7f5      	b.n	8015c14 <_dtoa_r+0x2fc>
 8015c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015c2e:	e7b8      	b.n	8015ba2 <_dtoa_r+0x28a>
 8015c30:	3101      	adds	r1, #1
 8015c32:	6041      	str	r1, [r0, #4]
 8015c34:	0052      	lsls	r2, r2, #1
 8015c36:	e7b8      	b.n	8015baa <_dtoa_r+0x292>
 8015c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c3a:	9a01      	ldr	r2, [sp, #4]
 8015c3c:	601a      	str	r2, [r3, #0]
 8015c3e:	9b03      	ldr	r3, [sp, #12]
 8015c40:	2b0e      	cmp	r3, #14
 8015c42:	f200 809d 	bhi.w	8015d80 <_dtoa_r+0x468>
 8015c46:	2d00      	cmp	r5, #0
 8015c48:	f000 809a 	beq.w	8015d80 <_dtoa_r+0x468>
 8015c4c:	9b00      	ldr	r3, [sp, #0]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	dd32      	ble.n	8015cb8 <_dtoa_r+0x3a0>
 8015c52:	4ab7      	ldr	r2, [pc, #732]	; (8015f30 <_dtoa_r+0x618>)
 8015c54:	f003 030f 	and.w	r3, r3, #15
 8015c58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015c5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015c60:	9b00      	ldr	r3, [sp, #0]
 8015c62:	05d8      	lsls	r0, r3, #23
 8015c64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015c68:	d516      	bpl.n	8015c98 <_dtoa_r+0x380>
 8015c6a:	4bb2      	ldr	r3, [pc, #712]	; (8015f34 <_dtoa_r+0x61c>)
 8015c6c:	ec51 0b19 	vmov	r0, r1, d9
 8015c70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015c74:	f7ea fe02 	bl	800087c <__aeabi_ddiv>
 8015c78:	f007 070f 	and.w	r7, r7, #15
 8015c7c:	4682      	mov	sl, r0
 8015c7e:	468b      	mov	fp, r1
 8015c80:	2503      	movs	r5, #3
 8015c82:	4eac      	ldr	r6, [pc, #688]	; (8015f34 <_dtoa_r+0x61c>)
 8015c84:	b957      	cbnz	r7, 8015c9c <_dtoa_r+0x384>
 8015c86:	4642      	mov	r2, r8
 8015c88:	464b      	mov	r3, r9
 8015c8a:	4650      	mov	r0, sl
 8015c8c:	4659      	mov	r1, fp
 8015c8e:	f7ea fdf5 	bl	800087c <__aeabi_ddiv>
 8015c92:	4682      	mov	sl, r0
 8015c94:	468b      	mov	fp, r1
 8015c96:	e028      	b.n	8015cea <_dtoa_r+0x3d2>
 8015c98:	2502      	movs	r5, #2
 8015c9a:	e7f2      	b.n	8015c82 <_dtoa_r+0x36a>
 8015c9c:	07f9      	lsls	r1, r7, #31
 8015c9e:	d508      	bpl.n	8015cb2 <_dtoa_r+0x39a>
 8015ca0:	4640      	mov	r0, r8
 8015ca2:	4649      	mov	r1, r9
 8015ca4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015ca8:	f7ea fcbe 	bl	8000628 <__aeabi_dmul>
 8015cac:	3501      	adds	r5, #1
 8015cae:	4680      	mov	r8, r0
 8015cb0:	4689      	mov	r9, r1
 8015cb2:	107f      	asrs	r7, r7, #1
 8015cb4:	3608      	adds	r6, #8
 8015cb6:	e7e5      	b.n	8015c84 <_dtoa_r+0x36c>
 8015cb8:	f000 809b 	beq.w	8015df2 <_dtoa_r+0x4da>
 8015cbc:	9b00      	ldr	r3, [sp, #0]
 8015cbe:	4f9d      	ldr	r7, [pc, #628]	; (8015f34 <_dtoa_r+0x61c>)
 8015cc0:	425e      	negs	r6, r3
 8015cc2:	4b9b      	ldr	r3, [pc, #620]	; (8015f30 <_dtoa_r+0x618>)
 8015cc4:	f006 020f 	and.w	r2, r6, #15
 8015cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd0:	ec51 0b19 	vmov	r0, r1, d9
 8015cd4:	f7ea fca8 	bl	8000628 <__aeabi_dmul>
 8015cd8:	1136      	asrs	r6, r6, #4
 8015cda:	4682      	mov	sl, r0
 8015cdc:	468b      	mov	fp, r1
 8015cde:	2300      	movs	r3, #0
 8015ce0:	2502      	movs	r5, #2
 8015ce2:	2e00      	cmp	r6, #0
 8015ce4:	d17a      	bne.n	8015ddc <_dtoa_r+0x4c4>
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d1d3      	bne.n	8015c92 <_dtoa_r+0x37a>
 8015cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	f000 8082 	beq.w	8015df6 <_dtoa_r+0x4de>
 8015cf2:	4b91      	ldr	r3, [pc, #580]	; (8015f38 <_dtoa_r+0x620>)
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	4650      	mov	r0, sl
 8015cf8:	4659      	mov	r1, fp
 8015cfa:	f7ea ff07 	bl	8000b0c <__aeabi_dcmplt>
 8015cfe:	2800      	cmp	r0, #0
 8015d00:	d079      	beq.n	8015df6 <_dtoa_r+0x4de>
 8015d02:	9b03      	ldr	r3, [sp, #12]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d076      	beq.n	8015df6 <_dtoa_r+0x4de>
 8015d08:	9b02      	ldr	r3, [sp, #8]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	dd36      	ble.n	8015d7c <_dtoa_r+0x464>
 8015d0e:	9b00      	ldr	r3, [sp, #0]
 8015d10:	4650      	mov	r0, sl
 8015d12:	4659      	mov	r1, fp
 8015d14:	1e5f      	subs	r7, r3, #1
 8015d16:	2200      	movs	r2, #0
 8015d18:	4b88      	ldr	r3, [pc, #544]	; (8015f3c <_dtoa_r+0x624>)
 8015d1a:	f7ea fc85 	bl	8000628 <__aeabi_dmul>
 8015d1e:	9e02      	ldr	r6, [sp, #8]
 8015d20:	4682      	mov	sl, r0
 8015d22:	468b      	mov	fp, r1
 8015d24:	3501      	adds	r5, #1
 8015d26:	4628      	mov	r0, r5
 8015d28:	f7ea fc14 	bl	8000554 <__aeabi_i2d>
 8015d2c:	4652      	mov	r2, sl
 8015d2e:	465b      	mov	r3, fp
 8015d30:	f7ea fc7a 	bl	8000628 <__aeabi_dmul>
 8015d34:	4b82      	ldr	r3, [pc, #520]	; (8015f40 <_dtoa_r+0x628>)
 8015d36:	2200      	movs	r2, #0
 8015d38:	f7ea fac0 	bl	80002bc <__adddf3>
 8015d3c:	46d0      	mov	r8, sl
 8015d3e:	46d9      	mov	r9, fp
 8015d40:	4682      	mov	sl, r0
 8015d42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015d46:	2e00      	cmp	r6, #0
 8015d48:	d158      	bne.n	8015dfc <_dtoa_r+0x4e4>
 8015d4a:	4b7e      	ldr	r3, [pc, #504]	; (8015f44 <_dtoa_r+0x62c>)
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	4640      	mov	r0, r8
 8015d50:	4649      	mov	r1, r9
 8015d52:	f7ea fab1 	bl	80002b8 <__aeabi_dsub>
 8015d56:	4652      	mov	r2, sl
 8015d58:	465b      	mov	r3, fp
 8015d5a:	4680      	mov	r8, r0
 8015d5c:	4689      	mov	r9, r1
 8015d5e:	f7ea fef3 	bl	8000b48 <__aeabi_dcmpgt>
 8015d62:	2800      	cmp	r0, #0
 8015d64:	f040 8295 	bne.w	8016292 <_dtoa_r+0x97a>
 8015d68:	4652      	mov	r2, sl
 8015d6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015d6e:	4640      	mov	r0, r8
 8015d70:	4649      	mov	r1, r9
 8015d72:	f7ea fecb 	bl	8000b0c <__aeabi_dcmplt>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	f040 8289 	bne.w	801628e <_dtoa_r+0x976>
 8015d7c:	ec5b ab19 	vmov	sl, fp, d9
 8015d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	f2c0 8148 	blt.w	8016018 <_dtoa_r+0x700>
 8015d88:	9a00      	ldr	r2, [sp, #0]
 8015d8a:	2a0e      	cmp	r2, #14
 8015d8c:	f300 8144 	bgt.w	8016018 <_dtoa_r+0x700>
 8015d90:	4b67      	ldr	r3, [pc, #412]	; (8015f30 <_dtoa_r+0x618>)
 8015d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	f280 80d5 	bge.w	8015f4c <_dtoa_r+0x634>
 8015da2:	9b03      	ldr	r3, [sp, #12]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	f300 80d1 	bgt.w	8015f4c <_dtoa_r+0x634>
 8015daa:	f040 826f 	bne.w	801628c <_dtoa_r+0x974>
 8015dae:	4b65      	ldr	r3, [pc, #404]	; (8015f44 <_dtoa_r+0x62c>)
 8015db0:	2200      	movs	r2, #0
 8015db2:	4640      	mov	r0, r8
 8015db4:	4649      	mov	r1, r9
 8015db6:	f7ea fc37 	bl	8000628 <__aeabi_dmul>
 8015dba:	4652      	mov	r2, sl
 8015dbc:	465b      	mov	r3, fp
 8015dbe:	f7ea feb9 	bl	8000b34 <__aeabi_dcmpge>
 8015dc2:	9e03      	ldr	r6, [sp, #12]
 8015dc4:	4637      	mov	r7, r6
 8015dc6:	2800      	cmp	r0, #0
 8015dc8:	f040 8245 	bne.w	8016256 <_dtoa_r+0x93e>
 8015dcc:	9d01      	ldr	r5, [sp, #4]
 8015dce:	2331      	movs	r3, #49	; 0x31
 8015dd0:	f805 3b01 	strb.w	r3, [r5], #1
 8015dd4:	9b00      	ldr	r3, [sp, #0]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	9300      	str	r3, [sp, #0]
 8015dda:	e240      	b.n	801625e <_dtoa_r+0x946>
 8015ddc:	07f2      	lsls	r2, r6, #31
 8015dde:	d505      	bpl.n	8015dec <_dtoa_r+0x4d4>
 8015de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015de4:	f7ea fc20 	bl	8000628 <__aeabi_dmul>
 8015de8:	3501      	adds	r5, #1
 8015dea:	2301      	movs	r3, #1
 8015dec:	1076      	asrs	r6, r6, #1
 8015dee:	3708      	adds	r7, #8
 8015df0:	e777      	b.n	8015ce2 <_dtoa_r+0x3ca>
 8015df2:	2502      	movs	r5, #2
 8015df4:	e779      	b.n	8015cea <_dtoa_r+0x3d2>
 8015df6:	9f00      	ldr	r7, [sp, #0]
 8015df8:	9e03      	ldr	r6, [sp, #12]
 8015dfa:	e794      	b.n	8015d26 <_dtoa_r+0x40e>
 8015dfc:	9901      	ldr	r1, [sp, #4]
 8015dfe:	4b4c      	ldr	r3, [pc, #304]	; (8015f30 <_dtoa_r+0x618>)
 8015e00:	4431      	add	r1, r6
 8015e02:	910d      	str	r1, [sp, #52]	; 0x34
 8015e04:	9908      	ldr	r1, [sp, #32]
 8015e06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015e0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015e0e:	2900      	cmp	r1, #0
 8015e10:	d043      	beq.n	8015e9a <_dtoa_r+0x582>
 8015e12:	494d      	ldr	r1, [pc, #308]	; (8015f48 <_dtoa_r+0x630>)
 8015e14:	2000      	movs	r0, #0
 8015e16:	f7ea fd31 	bl	800087c <__aeabi_ddiv>
 8015e1a:	4652      	mov	r2, sl
 8015e1c:	465b      	mov	r3, fp
 8015e1e:	f7ea fa4b 	bl	80002b8 <__aeabi_dsub>
 8015e22:	9d01      	ldr	r5, [sp, #4]
 8015e24:	4682      	mov	sl, r0
 8015e26:	468b      	mov	fp, r1
 8015e28:	4649      	mov	r1, r9
 8015e2a:	4640      	mov	r0, r8
 8015e2c:	f7ea feac 	bl	8000b88 <__aeabi_d2iz>
 8015e30:	4606      	mov	r6, r0
 8015e32:	f7ea fb8f 	bl	8000554 <__aeabi_i2d>
 8015e36:	4602      	mov	r2, r0
 8015e38:	460b      	mov	r3, r1
 8015e3a:	4640      	mov	r0, r8
 8015e3c:	4649      	mov	r1, r9
 8015e3e:	f7ea fa3b 	bl	80002b8 <__aeabi_dsub>
 8015e42:	3630      	adds	r6, #48	; 0x30
 8015e44:	f805 6b01 	strb.w	r6, [r5], #1
 8015e48:	4652      	mov	r2, sl
 8015e4a:	465b      	mov	r3, fp
 8015e4c:	4680      	mov	r8, r0
 8015e4e:	4689      	mov	r9, r1
 8015e50:	f7ea fe5c 	bl	8000b0c <__aeabi_dcmplt>
 8015e54:	2800      	cmp	r0, #0
 8015e56:	d163      	bne.n	8015f20 <_dtoa_r+0x608>
 8015e58:	4642      	mov	r2, r8
 8015e5a:	464b      	mov	r3, r9
 8015e5c:	4936      	ldr	r1, [pc, #216]	; (8015f38 <_dtoa_r+0x620>)
 8015e5e:	2000      	movs	r0, #0
 8015e60:	f7ea fa2a 	bl	80002b8 <__aeabi_dsub>
 8015e64:	4652      	mov	r2, sl
 8015e66:	465b      	mov	r3, fp
 8015e68:	f7ea fe50 	bl	8000b0c <__aeabi_dcmplt>
 8015e6c:	2800      	cmp	r0, #0
 8015e6e:	f040 80b5 	bne.w	8015fdc <_dtoa_r+0x6c4>
 8015e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e74:	429d      	cmp	r5, r3
 8015e76:	d081      	beq.n	8015d7c <_dtoa_r+0x464>
 8015e78:	4b30      	ldr	r3, [pc, #192]	; (8015f3c <_dtoa_r+0x624>)
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	4650      	mov	r0, sl
 8015e7e:	4659      	mov	r1, fp
 8015e80:	f7ea fbd2 	bl	8000628 <__aeabi_dmul>
 8015e84:	4b2d      	ldr	r3, [pc, #180]	; (8015f3c <_dtoa_r+0x624>)
 8015e86:	4682      	mov	sl, r0
 8015e88:	468b      	mov	fp, r1
 8015e8a:	4640      	mov	r0, r8
 8015e8c:	4649      	mov	r1, r9
 8015e8e:	2200      	movs	r2, #0
 8015e90:	f7ea fbca 	bl	8000628 <__aeabi_dmul>
 8015e94:	4680      	mov	r8, r0
 8015e96:	4689      	mov	r9, r1
 8015e98:	e7c6      	b.n	8015e28 <_dtoa_r+0x510>
 8015e9a:	4650      	mov	r0, sl
 8015e9c:	4659      	mov	r1, fp
 8015e9e:	f7ea fbc3 	bl	8000628 <__aeabi_dmul>
 8015ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ea4:	9d01      	ldr	r5, [sp, #4]
 8015ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ea8:	4682      	mov	sl, r0
 8015eaa:	468b      	mov	fp, r1
 8015eac:	4649      	mov	r1, r9
 8015eae:	4640      	mov	r0, r8
 8015eb0:	f7ea fe6a 	bl	8000b88 <__aeabi_d2iz>
 8015eb4:	4606      	mov	r6, r0
 8015eb6:	f7ea fb4d 	bl	8000554 <__aeabi_i2d>
 8015eba:	3630      	adds	r6, #48	; 0x30
 8015ebc:	4602      	mov	r2, r0
 8015ebe:	460b      	mov	r3, r1
 8015ec0:	4640      	mov	r0, r8
 8015ec2:	4649      	mov	r1, r9
 8015ec4:	f7ea f9f8 	bl	80002b8 <__aeabi_dsub>
 8015ec8:	f805 6b01 	strb.w	r6, [r5], #1
 8015ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ece:	429d      	cmp	r5, r3
 8015ed0:	4680      	mov	r8, r0
 8015ed2:	4689      	mov	r9, r1
 8015ed4:	f04f 0200 	mov.w	r2, #0
 8015ed8:	d124      	bne.n	8015f24 <_dtoa_r+0x60c>
 8015eda:	4b1b      	ldr	r3, [pc, #108]	; (8015f48 <_dtoa_r+0x630>)
 8015edc:	4650      	mov	r0, sl
 8015ede:	4659      	mov	r1, fp
 8015ee0:	f7ea f9ec 	bl	80002bc <__adddf3>
 8015ee4:	4602      	mov	r2, r0
 8015ee6:	460b      	mov	r3, r1
 8015ee8:	4640      	mov	r0, r8
 8015eea:	4649      	mov	r1, r9
 8015eec:	f7ea fe2c 	bl	8000b48 <__aeabi_dcmpgt>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	d173      	bne.n	8015fdc <_dtoa_r+0x6c4>
 8015ef4:	4652      	mov	r2, sl
 8015ef6:	465b      	mov	r3, fp
 8015ef8:	4913      	ldr	r1, [pc, #76]	; (8015f48 <_dtoa_r+0x630>)
 8015efa:	2000      	movs	r0, #0
 8015efc:	f7ea f9dc 	bl	80002b8 <__aeabi_dsub>
 8015f00:	4602      	mov	r2, r0
 8015f02:	460b      	mov	r3, r1
 8015f04:	4640      	mov	r0, r8
 8015f06:	4649      	mov	r1, r9
 8015f08:	f7ea fe00 	bl	8000b0c <__aeabi_dcmplt>
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	f43f af35 	beq.w	8015d7c <_dtoa_r+0x464>
 8015f12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015f14:	1e6b      	subs	r3, r5, #1
 8015f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015f1c:	2b30      	cmp	r3, #48	; 0x30
 8015f1e:	d0f8      	beq.n	8015f12 <_dtoa_r+0x5fa>
 8015f20:	9700      	str	r7, [sp, #0]
 8015f22:	e049      	b.n	8015fb8 <_dtoa_r+0x6a0>
 8015f24:	4b05      	ldr	r3, [pc, #20]	; (8015f3c <_dtoa_r+0x624>)
 8015f26:	f7ea fb7f 	bl	8000628 <__aeabi_dmul>
 8015f2a:	4680      	mov	r8, r0
 8015f2c:	4689      	mov	r9, r1
 8015f2e:	e7bd      	b.n	8015eac <_dtoa_r+0x594>
 8015f30:	0801a700 	.word	0x0801a700
 8015f34:	0801a6d8 	.word	0x0801a6d8
 8015f38:	3ff00000 	.word	0x3ff00000
 8015f3c:	40240000 	.word	0x40240000
 8015f40:	401c0000 	.word	0x401c0000
 8015f44:	40140000 	.word	0x40140000
 8015f48:	3fe00000 	.word	0x3fe00000
 8015f4c:	9d01      	ldr	r5, [sp, #4]
 8015f4e:	4656      	mov	r6, sl
 8015f50:	465f      	mov	r7, fp
 8015f52:	4642      	mov	r2, r8
 8015f54:	464b      	mov	r3, r9
 8015f56:	4630      	mov	r0, r6
 8015f58:	4639      	mov	r1, r7
 8015f5a:	f7ea fc8f 	bl	800087c <__aeabi_ddiv>
 8015f5e:	f7ea fe13 	bl	8000b88 <__aeabi_d2iz>
 8015f62:	4682      	mov	sl, r0
 8015f64:	f7ea faf6 	bl	8000554 <__aeabi_i2d>
 8015f68:	4642      	mov	r2, r8
 8015f6a:	464b      	mov	r3, r9
 8015f6c:	f7ea fb5c 	bl	8000628 <__aeabi_dmul>
 8015f70:	4602      	mov	r2, r0
 8015f72:	460b      	mov	r3, r1
 8015f74:	4630      	mov	r0, r6
 8015f76:	4639      	mov	r1, r7
 8015f78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015f7c:	f7ea f99c 	bl	80002b8 <__aeabi_dsub>
 8015f80:	f805 6b01 	strb.w	r6, [r5], #1
 8015f84:	9e01      	ldr	r6, [sp, #4]
 8015f86:	9f03      	ldr	r7, [sp, #12]
 8015f88:	1bae      	subs	r6, r5, r6
 8015f8a:	42b7      	cmp	r7, r6
 8015f8c:	4602      	mov	r2, r0
 8015f8e:	460b      	mov	r3, r1
 8015f90:	d135      	bne.n	8015ffe <_dtoa_r+0x6e6>
 8015f92:	f7ea f993 	bl	80002bc <__adddf3>
 8015f96:	4642      	mov	r2, r8
 8015f98:	464b      	mov	r3, r9
 8015f9a:	4606      	mov	r6, r0
 8015f9c:	460f      	mov	r7, r1
 8015f9e:	f7ea fdd3 	bl	8000b48 <__aeabi_dcmpgt>
 8015fa2:	b9d0      	cbnz	r0, 8015fda <_dtoa_r+0x6c2>
 8015fa4:	4642      	mov	r2, r8
 8015fa6:	464b      	mov	r3, r9
 8015fa8:	4630      	mov	r0, r6
 8015faa:	4639      	mov	r1, r7
 8015fac:	f7ea fda4 	bl	8000af8 <__aeabi_dcmpeq>
 8015fb0:	b110      	cbz	r0, 8015fb8 <_dtoa_r+0x6a0>
 8015fb2:	f01a 0f01 	tst.w	sl, #1
 8015fb6:	d110      	bne.n	8015fda <_dtoa_r+0x6c2>
 8015fb8:	4620      	mov	r0, r4
 8015fba:	ee18 1a10 	vmov	r1, s16
 8015fbe:	f000 fafb 	bl	80165b8 <_Bfree>
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	9800      	ldr	r0, [sp, #0]
 8015fc6:	702b      	strb	r3, [r5, #0]
 8015fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fca:	3001      	adds	r0, #1
 8015fcc:	6018      	str	r0, [r3, #0]
 8015fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	f43f acf1 	beq.w	80159b8 <_dtoa_r+0xa0>
 8015fd6:	601d      	str	r5, [r3, #0]
 8015fd8:	e4ee      	b.n	80159b8 <_dtoa_r+0xa0>
 8015fda:	9f00      	ldr	r7, [sp, #0]
 8015fdc:	462b      	mov	r3, r5
 8015fde:	461d      	mov	r5, r3
 8015fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015fe4:	2a39      	cmp	r2, #57	; 0x39
 8015fe6:	d106      	bne.n	8015ff6 <_dtoa_r+0x6de>
 8015fe8:	9a01      	ldr	r2, [sp, #4]
 8015fea:	429a      	cmp	r2, r3
 8015fec:	d1f7      	bne.n	8015fde <_dtoa_r+0x6c6>
 8015fee:	9901      	ldr	r1, [sp, #4]
 8015ff0:	2230      	movs	r2, #48	; 0x30
 8015ff2:	3701      	adds	r7, #1
 8015ff4:	700a      	strb	r2, [r1, #0]
 8015ff6:	781a      	ldrb	r2, [r3, #0]
 8015ff8:	3201      	adds	r2, #1
 8015ffa:	701a      	strb	r2, [r3, #0]
 8015ffc:	e790      	b.n	8015f20 <_dtoa_r+0x608>
 8015ffe:	4ba6      	ldr	r3, [pc, #664]	; (8016298 <_dtoa_r+0x980>)
 8016000:	2200      	movs	r2, #0
 8016002:	f7ea fb11 	bl	8000628 <__aeabi_dmul>
 8016006:	2200      	movs	r2, #0
 8016008:	2300      	movs	r3, #0
 801600a:	4606      	mov	r6, r0
 801600c:	460f      	mov	r7, r1
 801600e:	f7ea fd73 	bl	8000af8 <__aeabi_dcmpeq>
 8016012:	2800      	cmp	r0, #0
 8016014:	d09d      	beq.n	8015f52 <_dtoa_r+0x63a>
 8016016:	e7cf      	b.n	8015fb8 <_dtoa_r+0x6a0>
 8016018:	9a08      	ldr	r2, [sp, #32]
 801601a:	2a00      	cmp	r2, #0
 801601c:	f000 80d7 	beq.w	80161ce <_dtoa_r+0x8b6>
 8016020:	9a06      	ldr	r2, [sp, #24]
 8016022:	2a01      	cmp	r2, #1
 8016024:	f300 80ba 	bgt.w	801619c <_dtoa_r+0x884>
 8016028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801602a:	2a00      	cmp	r2, #0
 801602c:	f000 80b2 	beq.w	8016194 <_dtoa_r+0x87c>
 8016030:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016034:	9e07      	ldr	r6, [sp, #28]
 8016036:	9d04      	ldr	r5, [sp, #16]
 8016038:	9a04      	ldr	r2, [sp, #16]
 801603a:	441a      	add	r2, r3
 801603c:	9204      	str	r2, [sp, #16]
 801603e:	9a05      	ldr	r2, [sp, #20]
 8016040:	2101      	movs	r1, #1
 8016042:	441a      	add	r2, r3
 8016044:	4620      	mov	r0, r4
 8016046:	9205      	str	r2, [sp, #20]
 8016048:	f000 fb6e 	bl	8016728 <__i2b>
 801604c:	4607      	mov	r7, r0
 801604e:	2d00      	cmp	r5, #0
 8016050:	dd0c      	ble.n	801606c <_dtoa_r+0x754>
 8016052:	9b05      	ldr	r3, [sp, #20]
 8016054:	2b00      	cmp	r3, #0
 8016056:	dd09      	ble.n	801606c <_dtoa_r+0x754>
 8016058:	42ab      	cmp	r3, r5
 801605a:	9a04      	ldr	r2, [sp, #16]
 801605c:	bfa8      	it	ge
 801605e:	462b      	movge	r3, r5
 8016060:	1ad2      	subs	r2, r2, r3
 8016062:	9204      	str	r2, [sp, #16]
 8016064:	9a05      	ldr	r2, [sp, #20]
 8016066:	1aed      	subs	r5, r5, r3
 8016068:	1ad3      	subs	r3, r2, r3
 801606a:	9305      	str	r3, [sp, #20]
 801606c:	9b07      	ldr	r3, [sp, #28]
 801606e:	b31b      	cbz	r3, 80160b8 <_dtoa_r+0x7a0>
 8016070:	9b08      	ldr	r3, [sp, #32]
 8016072:	2b00      	cmp	r3, #0
 8016074:	f000 80af 	beq.w	80161d6 <_dtoa_r+0x8be>
 8016078:	2e00      	cmp	r6, #0
 801607a:	dd13      	ble.n	80160a4 <_dtoa_r+0x78c>
 801607c:	4639      	mov	r1, r7
 801607e:	4632      	mov	r2, r6
 8016080:	4620      	mov	r0, r4
 8016082:	f000 fc11 	bl	80168a8 <__pow5mult>
 8016086:	ee18 2a10 	vmov	r2, s16
 801608a:	4601      	mov	r1, r0
 801608c:	4607      	mov	r7, r0
 801608e:	4620      	mov	r0, r4
 8016090:	f000 fb60 	bl	8016754 <__multiply>
 8016094:	ee18 1a10 	vmov	r1, s16
 8016098:	4680      	mov	r8, r0
 801609a:	4620      	mov	r0, r4
 801609c:	f000 fa8c 	bl	80165b8 <_Bfree>
 80160a0:	ee08 8a10 	vmov	s16, r8
 80160a4:	9b07      	ldr	r3, [sp, #28]
 80160a6:	1b9a      	subs	r2, r3, r6
 80160a8:	d006      	beq.n	80160b8 <_dtoa_r+0x7a0>
 80160aa:	ee18 1a10 	vmov	r1, s16
 80160ae:	4620      	mov	r0, r4
 80160b0:	f000 fbfa 	bl	80168a8 <__pow5mult>
 80160b4:	ee08 0a10 	vmov	s16, r0
 80160b8:	2101      	movs	r1, #1
 80160ba:	4620      	mov	r0, r4
 80160bc:	f000 fb34 	bl	8016728 <__i2b>
 80160c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	4606      	mov	r6, r0
 80160c6:	f340 8088 	ble.w	80161da <_dtoa_r+0x8c2>
 80160ca:	461a      	mov	r2, r3
 80160cc:	4601      	mov	r1, r0
 80160ce:	4620      	mov	r0, r4
 80160d0:	f000 fbea 	bl	80168a8 <__pow5mult>
 80160d4:	9b06      	ldr	r3, [sp, #24]
 80160d6:	2b01      	cmp	r3, #1
 80160d8:	4606      	mov	r6, r0
 80160da:	f340 8081 	ble.w	80161e0 <_dtoa_r+0x8c8>
 80160de:	f04f 0800 	mov.w	r8, #0
 80160e2:	6933      	ldr	r3, [r6, #16]
 80160e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80160e8:	6918      	ldr	r0, [r3, #16]
 80160ea:	f000 facd 	bl	8016688 <__hi0bits>
 80160ee:	f1c0 0020 	rsb	r0, r0, #32
 80160f2:	9b05      	ldr	r3, [sp, #20]
 80160f4:	4418      	add	r0, r3
 80160f6:	f010 001f 	ands.w	r0, r0, #31
 80160fa:	f000 8092 	beq.w	8016222 <_dtoa_r+0x90a>
 80160fe:	f1c0 0320 	rsb	r3, r0, #32
 8016102:	2b04      	cmp	r3, #4
 8016104:	f340 808a 	ble.w	801621c <_dtoa_r+0x904>
 8016108:	f1c0 001c 	rsb	r0, r0, #28
 801610c:	9b04      	ldr	r3, [sp, #16]
 801610e:	4403      	add	r3, r0
 8016110:	9304      	str	r3, [sp, #16]
 8016112:	9b05      	ldr	r3, [sp, #20]
 8016114:	4403      	add	r3, r0
 8016116:	4405      	add	r5, r0
 8016118:	9305      	str	r3, [sp, #20]
 801611a:	9b04      	ldr	r3, [sp, #16]
 801611c:	2b00      	cmp	r3, #0
 801611e:	dd07      	ble.n	8016130 <_dtoa_r+0x818>
 8016120:	ee18 1a10 	vmov	r1, s16
 8016124:	461a      	mov	r2, r3
 8016126:	4620      	mov	r0, r4
 8016128:	f000 fc18 	bl	801695c <__lshift>
 801612c:	ee08 0a10 	vmov	s16, r0
 8016130:	9b05      	ldr	r3, [sp, #20]
 8016132:	2b00      	cmp	r3, #0
 8016134:	dd05      	ble.n	8016142 <_dtoa_r+0x82a>
 8016136:	4631      	mov	r1, r6
 8016138:	461a      	mov	r2, r3
 801613a:	4620      	mov	r0, r4
 801613c:	f000 fc0e 	bl	801695c <__lshift>
 8016140:	4606      	mov	r6, r0
 8016142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016144:	2b00      	cmp	r3, #0
 8016146:	d06e      	beq.n	8016226 <_dtoa_r+0x90e>
 8016148:	ee18 0a10 	vmov	r0, s16
 801614c:	4631      	mov	r1, r6
 801614e:	f000 fc75 	bl	8016a3c <__mcmp>
 8016152:	2800      	cmp	r0, #0
 8016154:	da67      	bge.n	8016226 <_dtoa_r+0x90e>
 8016156:	9b00      	ldr	r3, [sp, #0]
 8016158:	3b01      	subs	r3, #1
 801615a:	ee18 1a10 	vmov	r1, s16
 801615e:	9300      	str	r3, [sp, #0]
 8016160:	220a      	movs	r2, #10
 8016162:	2300      	movs	r3, #0
 8016164:	4620      	mov	r0, r4
 8016166:	f000 fa49 	bl	80165fc <__multadd>
 801616a:	9b08      	ldr	r3, [sp, #32]
 801616c:	ee08 0a10 	vmov	s16, r0
 8016170:	2b00      	cmp	r3, #0
 8016172:	f000 81b1 	beq.w	80164d8 <_dtoa_r+0xbc0>
 8016176:	2300      	movs	r3, #0
 8016178:	4639      	mov	r1, r7
 801617a:	220a      	movs	r2, #10
 801617c:	4620      	mov	r0, r4
 801617e:	f000 fa3d 	bl	80165fc <__multadd>
 8016182:	9b02      	ldr	r3, [sp, #8]
 8016184:	2b00      	cmp	r3, #0
 8016186:	4607      	mov	r7, r0
 8016188:	f300 808e 	bgt.w	80162a8 <_dtoa_r+0x990>
 801618c:	9b06      	ldr	r3, [sp, #24]
 801618e:	2b02      	cmp	r3, #2
 8016190:	dc51      	bgt.n	8016236 <_dtoa_r+0x91e>
 8016192:	e089      	b.n	80162a8 <_dtoa_r+0x990>
 8016194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801619a:	e74b      	b.n	8016034 <_dtoa_r+0x71c>
 801619c:	9b03      	ldr	r3, [sp, #12]
 801619e:	1e5e      	subs	r6, r3, #1
 80161a0:	9b07      	ldr	r3, [sp, #28]
 80161a2:	42b3      	cmp	r3, r6
 80161a4:	bfbf      	itttt	lt
 80161a6:	9b07      	ldrlt	r3, [sp, #28]
 80161a8:	9607      	strlt	r6, [sp, #28]
 80161aa:	1af2      	sublt	r2, r6, r3
 80161ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80161ae:	bfb6      	itet	lt
 80161b0:	189b      	addlt	r3, r3, r2
 80161b2:	1b9e      	subge	r6, r3, r6
 80161b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80161b6:	9b03      	ldr	r3, [sp, #12]
 80161b8:	bfb8      	it	lt
 80161ba:	2600      	movlt	r6, #0
 80161bc:	2b00      	cmp	r3, #0
 80161be:	bfb7      	itett	lt
 80161c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80161c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80161c8:	1a9d      	sublt	r5, r3, r2
 80161ca:	2300      	movlt	r3, #0
 80161cc:	e734      	b.n	8016038 <_dtoa_r+0x720>
 80161ce:	9e07      	ldr	r6, [sp, #28]
 80161d0:	9d04      	ldr	r5, [sp, #16]
 80161d2:	9f08      	ldr	r7, [sp, #32]
 80161d4:	e73b      	b.n	801604e <_dtoa_r+0x736>
 80161d6:	9a07      	ldr	r2, [sp, #28]
 80161d8:	e767      	b.n	80160aa <_dtoa_r+0x792>
 80161da:	9b06      	ldr	r3, [sp, #24]
 80161dc:	2b01      	cmp	r3, #1
 80161de:	dc18      	bgt.n	8016212 <_dtoa_r+0x8fa>
 80161e0:	f1ba 0f00 	cmp.w	sl, #0
 80161e4:	d115      	bne.n	8016212 <_dtoa_r+0x8fa>
 80161e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161ea:	b993      	cbnz	r3, 8016212 <_dtoa_r+0x8fa>
 80161ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80161f0:	0d1b      	lsrs	r3, r3, #20
 80161f2:	051b      	lsls	r3, r3, #20
 80161f4:	b183      	cbz	r3, 8016218 <_dtoa_r+0x900>
 80161f6:	9b04      	ldr	r3, [sp, #16]
 80161f8:	3301      	adds	r3, #1
 80161fa:	9304      	str	r3, [sp, #16]
 80161fc:	9b05      	ldr	r3, [sp, #20]
 80161fe:	3301      	adds	r3, #1
 8016200:	9305      	str	r3, [sp, #20]
 8016202:	f04f 0801 	mov.w	r8, #1
 8016206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016208:	2b00      	cmp	r3, #0
 801620a:	f47f af6a 	bne.w	80160e2 <_dtoa_r+0x7ca>
 801620e:	2001      	movs	r0, #1
 8016210:	e76f      	b.n	80160f2 <_dtoa_r+0x7da>
 8016212:	f04f 0800 	mov.w	r8, #0
 8016216:	e7f6      	b.n	8016206 <_dtoa_r+0x8ee>
 8016218:	4698      	mov	r8, r3
 801621a:	e7f4      	b.n	8016206 <_dtoa_r+0x8ee>
 801621c:	f43f af7d 	beq.w	801611a <_dtoa_r+0x802>
 8016220:	4618      	mov	r0, r3
 8016222:	301c      	adds	r0, #28
 8016224:	e772      	b.n	801610c <_dtoa_r+0x7f4>
 8016226:	9b03      	ldr	r3, [sp, #12]
 8016228:	2b00      	cmp	r3, #0
 801622a:	dc37      	bgt.n	801629c <_dtoa_r+0x984>
 801622c:	9b06      	ldr	r3, [sp, #24]
 801622e:	2b02      	cmp	r3, #2
 8016230:	dd34      	ble.n	801629c <_dtoa_r+0x984>
 8016232:	9b03      	ldr	r3, [sp, #12]
 8016234:	9302      	str	r3, [sp, #8]
 8016236:	9b02      	ldr	r3, [sp, #8]
 8016238:	b96b      	cbnz	r3, 8016256 <_dtoa_r+0x93e>
 801623a:	4631      	mov	r1, r6
 801623c:	2205      	movs	r2, #5
 801623e:	4620      	mov	r0, r4
 8016240:	f000 f9dc 	bl	80165fc <__multadd>
 8016244:	4601      	mov	r1, r0
 8016246:	4606      	mov	r6, r0
 8016248:	ee18 0a10 	vmov	r0, s16
 801624c:	f000 fbf6 	bl	8016a3c <__mcmp>
 8016250:	2800      	cmp	r0, #0
 8016252:	f73f adbb 	bgt.w	8015dcc <_dtoa_r+0x4b4>
 8016256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016258:	9d01      	ldr	r5, [sp, #4]
 801625a:	43db      	mvns	r3, r3
 801625c:	9300      	str	r3, [sp, #0]
 801625e:	f04f 0800 	mov.w	r8, #0
 8016262:	4631      	mov	r1, r6
 8016264:	4620      	mov	r0, r4
 8016266:	f000 f9a7 	bl	80165b8 <_Bfree>
 801626a:	2f00      	cmp	r7, #0
 801626c:	f43f aea4 	beq.w	8015fb8 <_dtoa_r+0x6a0>
 8016270:	f1b8 0f00 	cmp.w	r8, #0
 8016274:	d005      	beq.n	8016282 <_dtoa_r+0x96a>
 8016276:	45b8      	cmp	r8, r7
 8016278:	d003      	beq.n	8016282 <_dtoa_r+0x96a>
 801627a:	4641      	mov	r1, r8
 801627c:	4620      	mov	r0, r4
 801627e:	f000 f99b 	bl	80165b8 <_Bfree>
 8016282:	4639      	mov	r1, r7
 8016284:	4620      	mov	r0, r4
 8016286:	f000 f997 	bl	80165b8 <_Bfree>
 801628a:	e695      	b.n	8015fb8 <_dtoa_r+0x6a0>
 801628c:	2600      	movs	r6, #0
 801628e:	4637      	mov	r7, r6
 8016290:	e7e1      	b.n	8016256 <_dtoa_r+0x93e>
 8016292:	9700      	str	r7, [sp, #0]
 8016294:	4637      	mov	r7, r6
 8016296:	e599      	b.n	8015dcc <_dtoa_r+0x4b4>
 8016298:	40240000 	.word	0x40240000
 801629c:	9b08      	ldr	r3, [sp, #32]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	f000 80ca 	beq.w	8016438 <_dtoa_r+0xb20>
 80162a4:	9b03      	ldr	r3, [sp, #12]
 80162a6:	9302      	str	r3, [sp, #8]
 80162a8:	2d00      	cmp	r5, #0
 80162aa:	dd05      	ble.n	80162b8 <_dtoa_r+0x9a0>
 80162ac:	4639      	mov	r1, r7
 80162ae:	462a      	mov	r2, r5
 80162b0:	4620      	mov	r0, r4
 80162b2:	f000 fb53 	bl	801695c <__lshift>
 80162b6:	4607      	mov	r7, r0
 80162b8:	f1b8 0f00 	cmp.w	r8, #0
 80162bc:	d05b      	beq.n	8016376 <_dtoa_r+0xa5e>
 80162be:	6879      	ldr	r1, [r7, #4]
 80162c0:	4620      	mov	r0, r4
 80162c2:	f000 f939 	bl	8016538 <_Balloc>
 80162c6:	4605      	mov	r5, r0
 80162c8:	b928      	cbnz	r0, 80162d6 <_dtoa_r+0x9be>
 80162ca:	4b87      	ldr	r3, [pc, #540]	; (80164e8 <_dtoa_r+0xbd0>)
 80162cc:	4602      	mov	r2, r0
 80162ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80162d2:	f7ff bb3b 	b.w	801594c <_dtoa_r+0x34>
 80162d6:	693a      	ldr	r2, [r7, #16]
 80162d8:	3202      	adds	r2, #2
 80162da:	0092      	lsls	r2, r2, #2
 80162dc:	f107 010c 	add.w	r1, r7, #12
 80162e0:	300c      	adds	r0, #12
 80162e2:	f7fe fc61 	bl	8014ba8 <memcpy>
 80162e6:	2201      	movs	r2, #1
 80162e8:	4629      	mov	r1, r5
 80162ea:	4620      	mov	r0, r4
 80162ec:	f000 fb36 	bl	801695c <__lshift>
 80162f0:	9b01      	ldr	r3, [sp, #4]
 80162f2:	f103 0901 	add.w	r9, r3, #1
 80162f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80162fa:	4413      	add	r3, r2
 80162fc:	9305      	str	r3, [sp, #20]
 80162fe:	f00a 0301 	and.w	r3, sl, #1
 8016302:	46b8      	mov	r8, r7
 8016304:	9304      	str	r3, [sp, #16]
 8016306:	4607      	mov	r7, r0
 8016308:	4631      	mov	r1, r6
 801630a:	ee18 0a10 	vmov	r0, s16
 801630e:	f7ff fa77 	bl	8015800 <quorem>
 8016312:	4641      	mov	r1, r8
 8016314:	9002      	str	r0, [sp, #8]
 8016316:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801631a:	ee18 0a10 	vmov	r0, s16
 801631e:	f000 fb8d 	bl	8016a3c <__mcmp>
 8016322:	463a      	mov	r2, r7
 8016324:	9003      	str	r0, [sp, #12]
 8016326:	4631      	mov	r1, r6
 8016328:	4620      	mov	r0, r4
 801632a:	f000 fba3 	bl	8016a74 <__mdiff>
 801632e:	68c2      	ldr	r2, [r0, #12]
 8016330:	f109 3bff 	add.w	fp, r9, #4294967295
 8016334:	4605      	mov	r5, r0
 8016336:	bb02      	cbnz	r2, 801637a <_dtoa_r+0xa62>
 8016338:	4601      	mov	r1, r0
 801633a:	ee18 0a10 	vmov	r0, s16
 801633e:	f000 fb7d 	bl	8016a3c <__mcmp>
 8016342:	4602      	mov	r2, r0
 8016344:	4629      	mov	r1, r5
 8016346:	4620      	mov	r0, r4
 8016348:	9207      	str	r2, [sp, #28]
 801634a:	f000 f935 	bl	80165b8 <_Bfree>
 801634e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016352:	ea43 0102 	orr.w	r1, r3, r2
 8016356:	9b04      	ldr	r3, [sp, #16]
 8016358:	430b      	orrs	r3, r1
 801635a:	464d      	mov	r5, r9
 801635c:	d10f      	bne.n	801637e <_dtoa_r+0xa66>
 801635e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016362:	d02a      	beq.n	80163ba <_dtoa_r+0xaa2>
 8016364:	9b03      	ldr	r3, [sp, #12]
 8016366:	2b00      	cmp	r3, #0
 8016368:	dd02      	ble.n	8016370 <_dtoa_r+0xa58>
 801636a:	9b02      	ldr	r3, [sp, #8]
 801636c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8016370:	f88b a000 	strb.w	sl, [fp]
 8016374:	e775      	b.n	8016262 <_dtoa_r+0x94a>
 8016376:	4638      	mov	r0, r7
 8016378:	e7ba      	b.n	80162f0 <_dtoa_r+0x9d8>
 801637a:	2201      	movs	r2, #1
 801637c:	e7e2      	b.n	8016344 <_dtoa_r+0xa2c>
 801637e:	9b03      	ldr	r3, [sp, #12]
 8016380:	2b00      	cmp	r3, #0
 8016382:	db04      	blt.n	801638e <_dtoa_r+0xa76>
 8016384:	9906      	ldr	r1, [sp, #24]
 8016386:	430b      	orrs	r3, r1
 8016388:	9904      	ldr	r1, [sp, #16]
 801638a:	430b      	orrs	r3, r1
 801638c:	d122      	bne.n	80163d4 <_dtoa_r+0xabc>
 801638e:	2a00      	cmp	r2, #0
 8016390:	ddee      	ble.n	8016370 <_dtoa_r+0xa58>
 8016392:	ee18 1a10 	vmov	r1, s16
 8016396:	2201      	movs	r2, #1
 8016398:	4620      	mov	r0, r4
 801639a:	f000 fadf 	bl	801695c <__lshift>
 801639e:	4631      	mov	r1, r6
 80163a0:	ee08 0a10 	vmov	s16, r0
 80163a4:	f000 fb4a 	bl	8016a3c <__mcmp>
 80163a8:	2800      	cmp	r0, #0
 80163aa:	dc03      	bgt.n	80163b4 <_dtoa_r+0xa9c>
 80163ac:	d1e0      	bne.n	8016370 <_dtoa_r+0xa58>
 80163ae:	f01a 0f01 	tst.w	sl, #1
 80163b2:	d0dd      	beq.n	8016370 <_dtoa_r+0xa58>
 80163b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80163b8:	d1d7      	bne.n	801636a <_dtoa_r+0xa52>
 80163ba:	2339      	movs	r3, #57	; 0x39
 80163bc:	f88b 3000 	strb.w	r3, [fp]
 80163c0:	462b      	mov	r3, r5
 80163c2:	461d      	mov	r5, r3
 80163c4:	3b01      	subs	r3, #1
 80163c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80163ca:	2a39      	cmp	r2, #57	; 0x39
 80163cc:	d071      	beq.n	80164b2 <_dtoa_r+0xb9a>
 80163ce:	3201      	adds	r2, #1
 80163d0:	701a      	strb	r2, [r3, #0]
 80163d2:	e746      	b.n	8016262 <_dtoa_r+0x94a>
 80163d4:	2a00      	cmp	r2, #0
 80163d6:	dd07      	ble.n	80163e8 <_dtoa_r+0xad0>
 80163d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80163dc:	d0ed      	beq.n	80163ba <_dtoa_r+0xaa2>
 80163de:	f10a 0301 	add.w	r3, sl, #1
 80163e2:	f88b 3000 	strb.w	r3, [fp]
 80163e6:	e73c      	b.n	8016262 <_dtoa_r+0x94a>
 80163e8:	9b05      	ldr	r3, [sp, #20]
 80163ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80163ee:	4599      	cmp	r9, r3
 80163f0:	d047      	beq.n	8016482 <_dtoa_r+0xb6a>
 80163f2:	ee18 1a10 	vmov	r1, s16
 80163f6:	2300      	movs	r3, #0
 80163f8:	220a      	movs	r2, #10
 80163fa:	4620      	mov	r0, r4
 80163fc:	f000 f8fe 	bl	80165fc <__multadd>
 8016400:	45b8      	cmp	r8, r7
 8016402:	ee08 0a10 	vmov	s16, r0
 8016406:	f04f 0300 	mov.w	r3, #0
 801640a:	f04f 020a 	mov.w	r2, #10
 801640e:	4641      	mov	r1, r8
 8016410:	4620      	mov	r0, r4
 8016412:	d106      	bne.n	8016422 <_dtoa_r+0xb0a>
 8016414:	f000 f8f2 	bl	80165fc <__multadd>
 8016418:	4680      	mov	r8, r0
 801641a:	4607      	mov	r7, r0
 801641c:	f109 0901 	add.w	r9, r9, #1
 8016420:	e772      	b.n	8016308 <_dtoa_r+0x9f0>
 8016422:	f000 f8eb 	bl	80165fc <__multadd>
 8016426:	4639      	mov	r1, r7
 8016428:	4680      	mov	r8, r0
 801642a:	2300      	movs	r3, #0
 801642c:	220a      	movs	r2, #10
 801642e:	4620      	mov	r0, r4
 8016430:	f000 f8e4 	bl	80165fc <__multadd>
 8016434:	4607      	mov	r7, r0
 8016436:	e7f1      	b.n	801641c <_dtoa_r+0xb04>
 8016438:	9b03      	ldr	r3, [sp, #12]
 801643a:	9302      	str	r3, [sp, #8]
 801643c:	9d01      	ldr	r5, [sp, #4]
 801643e:	ee18 0a10 	vmov	r0, s16
 8016442:	4631      	mov	r1, r6
 8016444:	f7ff f9dc 	bl	8015800 <quorem>
 8016448:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801644c:	9b01      	ldr	r3, [sp, #4]
 801644e:	f805 ab01 	strb.w	sl, [r5], #1
 8016452:	1aea      	subs	r2, r5, r3
 8016454:	9b02      	ldr	r3, [sp, #8]
 8016456:	4293      	cmp	r3, r2
 8016458:	dd09      	ble.n	801646e <_dtoa_r+0xb56>
 801645a:	ee18 1a10 	vmov	r1, s16
 801645e:	2300      	movs	r3, #0
 8016460:	220a      	movs	r2, #10
 8016462:	4620      	mov	r0, r4
 8016464:	f000 f8ca 	bl	80165fc <__multadd>
 8016468:	ee08 0a10 	vmov	s16, r0
 801646c:	e7e7      	b.n	801643e <_dtoa_r+0xb26>
 801646e:	9b02      	ldr	r3, [sp, #8]
 8016470:	2b00      	cmp	r3, #0
 8016472:	bfc8      	it	gt
 8016474:	461d      	movgt	r5, r3
 8016476:	9b01      	ldr	r3, [sp, #4]
 8016478:	bfd8      	it	le
 801647a:	2501      	movle	r5, #1
 801647c:	441d      	add	r5, r3
 801647e:	f04f 0800 	mov.w	r8, #0
 8016482:	ee18 1a10 	vmov	r1, s16
 8016486:	2201      	movs	r2, #1
 8016488:	4620      	mov	r0, r4
 801648a:	f000 fa67 	bl	801695c <__lshift>
 801648e:	4631      	mov	r1, r6
 8016490:	ee08 0a10 	vmov	s16, r0
 8016494:	f000 fad2 	bl	8016a3c <__mcmp>
 8016498:	2800      	cmp	r0, #0
 801649a:	dc91      	bgt.n	80163c0 <_dtoa_r+0xaa8>
 801649c:	d102      	bne.n	80164a4 <_dtoa_r+0xb8c>
 801649e:	f01a 0f01 	tst.w	sl, #1
 80164a2:	d18d      	bne.n	80163c0 <_dtoa_r+0xaa8>
 80164a4:	462b      	mov	r3, r5
 80164a6:	461d      	mov	r5, r3
 80164a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80164ac:	2a30      	cmp	r2, #48	; 0x30
 80164ae:	d0fa      	beq.n	80164a6 <_dtoa_r+0xb8e>
 80164b0:	e6d7      	b.n	8016262 <_dtoa_r+0x94a>
 80164b2:	9a01      	ldr	r2, [sp, #4]
 80164b4:	429a      	cmp	r2, r3
 80164b6:	d184      	bne.n	80163c2 <_dtoa_r+0xaaa>
 80164b8:	9b00      	ldr	r3, [sp, #0]
 80164ba:	3301      	adds	r3, #1
 80164bc:	9300      	str	r3, [sp, #0]
 80164be:	2331      	movs	r3, #49	; 0x31
 80164c0:	7013      	strb	r3, [r2, #0]
 80164c2:	e6ce      	b.n	8016262 <_dtoa_r+0x94a>
 80164c4:	4b09      	ldr	r3, [pc, #36]	; (80164ec <_dtoa_r+0xbd4>)
 80164c6:	f7ff ba95 	b.w	80159f4 <_dtoa_r+0xdc>
 80164ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	f47f aa6e 	bne.w	80159ae <_dtoa_r+0x96>
 80164d2:	4b07      	ldr	r3, [pc, #28]	; (80164f0 <_dtoa_r+0xbd8>)
 80164d4:	f7ff ba8e 	b.w	80159f4 <_dtoa_r+0xdc>
 80164d8:	9b02      	ldr	r3, [sp, #8]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	dcae      	bgt.n	801643c <_dtoa_r+0xb24>
 80164de:	9b06      	ldr	r3, [sp, #24]
 80164e0:	2b02      	cmp	r3, #2
 80164e2:	f73f aea8 	bgt.w	8016236 <_dtoa_r+0x91e>
 80164e6:	e7a9      	b.n	801643c <_dtoa_r+0xb24>
 80164e8:	0801a66a 	.word	0x0801a66a
 80164ec:	0801a7e9 	.word	0x0801a7e9
 80164f0:	0801a5eb 	.word	0x0801a5eb

080164f4 <_localeconv_r>:
 80164f4:	4800      	ldr	r0, [pc, #0]	; (80164f8 <_localeconv_r+0x4>)
 80164f6:	4770      	bx	lr
 80164f8:	20000474 	.word	0x20000474

080164fc <_lseek_r>:
 80164fc:	b538      	push	{r3, r4, r5, lr}
 80164fe:	4d07      	ldr	r5, [pc, #28]	; (801651c <_lseek_r+0x20>)
 8016500:	4604      	mov	r4, r0
 8016502:	4608      	mov	r0, r1
 8016504:	4611      	mov	r1, r2
 8016506:	2200      	movs	r2, #0
 8016508:	602a      	str	r2, [r5, #0]
 801650a:	461a      	mov	r2, r3
 801650c:	f7f5 fb9a 	bl	800bc44 <_lseek>
 8016510:	1c43      	adds	r3, r0, #1
 8016512:	d102      	bne.n	801651a <_lseek_r+0x1e>
 8016514:	682b      	ldr	r3, [r5, #0]
 8016516:	b103      	cbz	r3, 801651a <_lseek_r+0x1e>
 8016518:	6023      	str	r3, [r4, #0]
 801651a:	bd38      	pop	{r3, r4, r5, pc}
 801651c:	20006d48 	.word	0x20006d48

08016520 <__malloc_lock>:
 8016520:	4801      	ldr	r0, [pc, #4]	; (8016528 <__malloc_lock+0x8>)
 8016522:	f001 bb87 	b.w	8017c34 <__retarget_lock_acquire_recursive>
 8016526:	bf00      	nop
 8016528:	20006d4c 	.word	0x20006d4c

0801652c <__malloc_unlock>:
 801652c:	4801      	ldr	r0, [pc, #4]	; (8016534 <__malloc_unlock+0x8>)
 801652e:	f001 bb82 	b.w	8017c36 <__retarget_lock_release_recursive>
 8016532:	bf00      	nop
 8016534:	20006d4c 	.word	0x20006d4c

08016538 <_Balloc>:
 8016538:	b570      	push	{r4, r5, r6, lr}
 801653a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801653c:	4604      	mov	r4, r0
 801653e:	460d      	mov	r5, r1
 8016540:	b976      	cbnz	r6, 8016560 <_Balloc+0x28>
 8016542:	2010      	movs	r0, #16
 8016544:	f7fe fb20 	bl	8014b88 <malloc>
 8016548:	4602      	mov	r2, r0
 801654a:	6260      	str	r0, [r4, #36]	; 0x24
 801654c:	b920      	cbnz	r0, 8016558 <_Balloc+0x20>
 801654e:	4b18      	ldr	r3, [pc, #96]	; (80165b0 <_Balloc+0x78>)
 8016550:	4818      	ldr	r0, [pc, #96]	; (80165b4 <_Balloc+0x7c>)
 8016552:	2166      	movs	r1, #102	; 0x66
 8016554:	f001 f986 	bl	8017864 <__assert_func>
 8016558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801655c:	6006      	str	r6, [r0, #0]
 801655e:	60c6      	str	r6, [r0, #12]
 8016560:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016562:	68f3      	ldr	r3, [r6, #12]
 8016564:	b183      	cbz	r3, 8016588 <_Balloc+0x50>
 8016566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016568:	68db      	ldr	r3, [r3, #12]
 801656a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801656e:	b9b8      	cbnz	r0, 80165a0 <_Balloc+0x68>
 8016570:	2101      	movs	r1, #1
 8016572:	fa01 f605 	lsl.w	r6, r1, r5
 8016576:	1d72      	adds	r2, r6, #5
 8016578:	0092      	lsls	r2, r2, #2
 801657a:	4620      	mov	r0, r4
 801657c:	f000 fb60 	bl	8016c40 <_calloc_r>
 8016580:	b160      	cbz	r0, 801659c <_Balloc+0x64>
 8016582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016586:	e00e      	b.n	80165a6 <_Balloc+0x6e>
 8016588:	2221      	movs	r2, #33	; 0x21
 801658a:	2104      	movs	r1, #4
 801658c:	4620      	mov	r0, r4
 801658e:	f000 fb57 	bl	8016c40 <_calloc_r>
 8016592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016594:	60f0      	str	r0, [r6, #12]
 8016596:	68db      	ldr	r3, [r3, #12]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d1e4      	bne.n	8016566 <_Balloc+0x2e>
 801659c:	2000      	movs	r0, #0
 801659e:	bd70      	pop	{r4, r5, r6, pc}
 80165a0:	6802      	ldr	r2, [r0, #0]
 80165a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165a6:	2300      	movs	r3, #0
 80165a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80165ac:	e7f7      	b.n	801659e <_Balloc+0x66>
 80165ae:	bf00      	nop
 80165b0:	0801a5f8 	.word	0x0801a5f8
 80165b4:	0801a67b 	.word	0x0801a67b

080165b8 <_Bfree>:
 80165b8:	b570      	push	{r4, r5, r6, lr}
 80165ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80165bc:	4605      	mov	r5, r0
 80165be:	460c      	mov	r4, r1
 80165c0:	b976      	cbnz	r6, 80165e0 <_Bfree+0x28>
 80165c2:	2010      	movs	r0, #16
 80165c4:	f7fe fae0 	bl	8014b88 <malloc>
 80165c8:	4602      	mov	r2, r0
 80165ca:	6268      	str	r0, [r5, #36]	; 0x24
 80165cc:	b920      	cbnz	r0, 80165d8 <_Bfree+0x20>
 80165ce:	4b09      	ldr	r3, [pc, #36]	; (80165f4 <_Bfree+0x3c>)
 80165d0:	4809      	ldr	r0, [pc, #36]	; (80165f8 <_Bfree+0x40>)
 80165d2:	218a      	movs	r1, #138	; 0x8a
 80165d4:	f001 f946 	bl	8017864 <__assert_func>
 80165d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80165dc:	6006      	str	r6, [r0, #0]
 80165de:	60c6      	str	r6, [r0, #12]
 80165e0:	b13c      	cbz	r4, 80165f2 <_Bfree+0x3a>
 80165e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80165e4:	6862      	ldr	r2, [r4, #4]
 80165e6:	68db      	ldr	r3, [r3, #12]
 80165e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80165ec:	6021      	str	r1, [r4, #0]
 80165ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80165f2:	bd70      	pop	{r4, r5, r6, pc}
 80165f4:	0801a5f8 	.word	0x0801a5f8
 80165f8:	0801a67b 	.word	0x0801a67b

080165fc <__multadd>:
 80165fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016600:	690d      	ldr	r5, [r1, #16]
 8016602:	4607      	mov	r7, r0
 8016604:	460c      	mov	r4, r1
 8016606:	461e      	mov	r6, r3
 8016608:	f101 0c14 	add.w	ip, r1, #20
 801660c:	2000      	movs	r0, #0
 801660e:	f8dc 3000 	ldr.w	r3, [ip]
 8016612:	b299      	uxth	r1, r3
 8016614:	fb02 6101 	mla	r1, r2, r1, r6
 8016618:	0c1e      	lsrs	r6, r3, #16
 801661a:	0c0b      	lsrs	r3, r1, #16
 801661c:	fb02 3306 	mla	r3, r2, r6, r3
 8016620:	b289      	uxth	r1, r1
 8016622:	3001      	adds	r0, #1
 8016624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016628:	4285      	cmp	r5, r0
 801662a:	f84c 1b04 	str.w	r1, [ip], #4
 801662e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016632:	dcec      	bgt.n	801660e <__multadd+0x12>
 8016634:	b30e      	cbz	r6, 801667a <__multadd+0x7e>
 8016636:	68a3      	ldr	r3, [r4, #8]
 8016638:	42ab      	cmp	r3, r5
 801663a:	dc19      	bgt.n	8016670 <__multadd+0x74>
 801663c:	6861      	ldr	r1, [r4, #4]
 801663e:	4638      	mov	r0, r7
 8016640:	3101      	adds	r1, #1
 8016642:	f7ff ff79 	bl	8016538 <_Balloc>
 8016646:	4680      	mov	r8, r0
 8016648:	b928      	cbnz	r0, 8016656 <__multadd+0x5a>
 801664a:	4602      	mov	r2, r0
 801664c:	4b0c      	ldr	r3, [pc, #48]	; (8016680 <__multadd+0x84>)
 801664e:	480d      	ldr	r0, [pc, #52]	; (8016684 <__multadd+0x88>)
 8016650:	21b5      	movs	r1, #181	; 0xb5
 8016652:	f001 f907 	bl	8017864 <__assert_func>
 8016656:	6922      	ldr	r2, [r4, #16]
 8016658:	3202      	adds	r2, #2
 801665a:	f104 010c 	add.w	r1, r4, #12
 801665e:	0092      	lsls	r2, r2, #2
 8016660:	300c      	adds	r0, #12
 8016662:	f7fe faa1 	bl	8014ba8 <memcpy>
 8016666:	4621      	mov	r1, r4
 8016668:	4638      	mov	r0, r7
 801666a:	f7ff ffa5 	bl	80165b8 <_Bfree>
 801666e:	4644      	mov	r4, r8
 8016670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016674:	3501      	adds	r5, #1
 8016676:	615e      	str	r6, [r3, #20]
 8016678:	6125      	str	r5, [r4, #16]
 801667a:	4620      	mov	r0, r4
 801667c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016680:	0801a66a 	.word	0x0801a66a
 8016684:	0801a67b 	.word	0x0801a67b

08016688 <__hi0bits>:
 8016688:	0c03      	lsrs	r3, r0, #16
 801668a:	041b      	lsls	r3, r3, #16
 801668c:	b9d3      	cbnz	r3, 80166c4 <__hi0bits+0x3c>
 801668e:	0400      	lsls	r0, r0, #16
 8016690:	2310      	movs	r3, #16
 8016692:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016696:	bf04      	itt	eq
 8016698:	0200      	lsleq	r0, r0, #8
 801669a:	3308      	addeq	r3, #8
 801669c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80166a0:	bf04      	itt	eq
 80166a2:	0100      	lsleq	r0, r0, #4
 80166a4:	3304      	addeq	r3, #4
 80166a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80166aa:	bf04      	itt	eq
 80166ac:	0080      	lsleq	r0, r0, #2
 80166ae:	3302      	addeq	r3, #2
 80166b0:	2800      	cmp	r0, #0
 80166b2:	db05      	blt.n	80166c0 <__hi0bits+0x38>
 80166b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80166b8:	f103 0301 	add.w	r3, r3, #1
 80166bc:	bf08      	it	eq
 80166be:	2320      	moveq	r3, #32
 80166c0:	4618      	mov	r0, r3
 80166c2:	4770      	bx	lr
 80166c4:	2300      	movs	r3, #0
 80166c6:	e7e4      	b.n	8016692 <__hi0bits+0xa>

080166c8 <__lo0bits>:
 80166c8:	6803      	ldr	r3, [r0, #0]
 80166ca:	f013 0207 	ands.w	r2, r3, #7
 80166ce:	4601      	mov	r1, r0
 80166d0:	d00b      	beq.n	80166ea <__lo0bits+0x22>
 80166d2:	07da      	lsls	r2, r3, #31
 80166d4:	d423      	bmi.n	801671e <__lo0bits+0x56>
 80166d6:	0798      	lsls	r0, r3, #30
 80166d8:	bf49      	itett	mi
 80166da:	085b      	lsrmi	r3, r3, #1
 80166dc:	089b      	lsrpl	r3, r3, #2
 80166de:	2001      	movmi	r0, #1
 80166e0:	600b      	strmi	r3, [r1, #0]
 80166e2:	bf5c      	itt	pl
 80166e4:	600b      	strpl	r3, [r1, #0]
 80166e6:	2002      	movpl	r0, #2
 80166e8:	4770      	bx	lr
 80166ea:	b298      	uxth	r0, r3
 80166ec:	b9a8      	cbnz	r0, 801671a <__lo0bits+0x52>
 80166ee:	0c1b      	lsrs	r3, r3, #16
 80166f0:	2010      	movs	r0, #16
 80166f2:	b2da      	uxtb	r2, r3
 80166f4:	b90a      	cbnz	r2, 80166fa <__lo0bits+0x32>
 80166f6:	3008      	adds	r0, #8
 80166f8:	0a1b      	lsrs	r3, r3, #8
 80166fa:	071a      	lsls	r2, r3, #28
 80166fc:	bf04      	itt	eq
 80166fe:	091b      	lsreq	r3, r3, #4
 8016700:	3004      	addeq	r0, #4
 8016702:	079a      	lsls	r2, r3, #30
 8016704:	bf04      	itt	eq
 8016706:	089b      	lsreq	r3, r3, #2
 8016708:	3002      	addeq	r0, #2
 801670a:	07da      	lsls	r2, r3, #31
 801670c:	d403      	bmi.n	8016716 <__lo0bits+0x4e>
 801670e:	085b      	lsrs	r3, r3, #1
 8016710:	f100 0001 	add.w	r0, r0, #1
 8016714:	d005      	beq.n	8016722 <__lo0bits+0x5a>
 8016716:	600b      	str	r3, [r1, #0]
 8016718:	4770      	bx	lr
 801671a:	4610      	mov	r0, r2
 801671c:	e7e9      	b.n	80166f2 <__lo0bits+0x2a>
 801671e:	2000      	movs	r0, #0
 8016720:	4770      	bx	lr
 8016722:	2020      	movs	r0, #32
 8016724:	4770      	bx	lr
	...

08016728 <__i2b>:
 8016728:	b510      	push	{r4, lr}
 801672a:	460c      	mov	r4, r1
 801672c:	2101      	movs	r1, #1
 801672e:	f7ff ff03 	bl	8016538 <_Balloc>
 8016732:	4602      	mov	r2, r0
 8016734:	b928      	cbnz	r0, 8016742 <__i2b+0x1a>
 8016736:	4b05      	ldr	r3, [pc, #20]	; (801674c <__i2b+0x24>)
 8016738:	4805      	ldr	r0, [pc, #20]	; (8016750 <__i2b+0x28>)
 801673a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801673e:	f001 f891 	bl	8017864 <__assert_func>
 8016742:	2301      	movs	r3, #1
 8016744:	6144      	str	r4, [r0, #20]
 8016746:	6103      	str	r3, [r0, #16]
 8016748:	bd10      	pop	{r4, pc}
 801674a:	bf00      	nop
 801674c:	0801a66a 	.word	0x0801a66a
 8016750:	0801a67b 	.word	0x0801a67b

08016754 <__multiply>:
 8016754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016758:	4691      	mov	r9, r2
 801675a:	690a      	ldr	r2, [r1, #16]
 801675c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016760:	429a      	cmp	r2, r3
 8016762:	bfb8      	it	lt
 8016764:	460b      	movlt	r3, r1
 8016766:	460c      	mov	r4, r1
 8016768:	bfbc      	itt	lt
 801676a:	464c      	movlt	r4, r9
 801676c:	4699      	movlt	r9, r3
 801676e:	6927      	ldr	r7, [r4, #16]
 8016770:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016774:	68a3      	ldr	r3, [r4, #8]
 8016776:	6861      	ldr	r1, [r4, #4]
 8016778:	eb07 060a 	add.w	r6, r7, sl
 801677c:	42b3      	cmp	r3, r6
 801677e:	b085      	sub	sp, #20
 8016780:	bfb8      	it	lt
 8016782:	3101      	addlt	r1, #1
 8016784:	f7ff fed8 	bl	8016538 <_Balloc>
 8016788:	b930      	cbnz	r0, 8016798 <__multiply+0x44>
 801678a:	4602      	mov	r2, r0
 801678c:	4b44      	ldr	r3, [pc, #272]	; (80168a0 <__multiply+0x14c>)
 801678e:	4845      	ldr	r0, [pc, #276]	; (80168a4 <__multiply+0x150>)
 8016790:	f240 115d 	movw	r1, #349	; 0x15d
 8016794:	f001 f866 	bl	8017864 <__assert_func>
 8016798:	f100 0514 	add.w	r5, r0, #20
 801679c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80167a0:	462b      	mov	r3, r5
 80167a2:	2200      	movs	r2, #0
 80167a4:	4543      	cmp	r3, r8
 80167a6:	d321      	bcc.n	80167ec <__multiply+0x98>
 80167a8:	f104 0314 	add.w	r3, r4, #20
 80167ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80167b0:	f109 0314 	add.w	r3, r9, #20
 80167b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80167b8:	9202      	str	r2, [sp, #8]
 80167ba:	1b3a      	subs	r2, r7, r4
 80167bc:	3a15      	subs	r2, #21
 80167be:	f022 0203 	bic.w	r2, r2, #3
 80167c2:	3204      	adds	r2, #4
 80167c4:	f104 0115 	add.w	r1, r4, #21
 80167c8:	428f      	cmp	r7, r1
 80167ca:	bf38      	it	cc
 80167cc:	2204      	movcc	r2, #4
 80167ce:	9201      	str	r2, [sp, #4]
 80167d0:	9a02      	ldr	r2, [sp, #8]
 80167d2:	9303      	str	r3, [sp, #12]
 80167d4:	429a      	cmp	r2, r3
 80167d6:	d80c      	bhi.n	80167f2 <__multiply+0x9e>
 80167d8:	2e00      	cmp	r6, #0
 80167da:	dd03      	ble.n	80167e4 <__multiply+0x90>
 80167dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d05a      	beq.n	801689a <__multiply+0x146>
 80167e4:	6106      	str	r6, [r0, #16]
 80167e6:	b005      	add	sp, #20
 80167e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ec:	f843 2b04 	str.w	r2, [r3], #4
 80167f0:	e7d8      	b.n	80167a4 <__multiply+0x50>
 80167f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80167f6:	f1ba 0f00 	cmp.w	sl, #0
 80167fa:	d024      	beq.n	8016846 <__multiply+0xf2>
 80167fc:	f104 0e14 	add.w	lr, r4, #20
 8016800:	46a9      	mov	r9, r5
 8016802:	f04f 0c00 	mov.w	ip, #0
 8016806:	f85e 2b04 	ldr.w	r2, [lr], #4
 801680a:	f8d9 1000 	ldr.w	r1, [r9]
 801680e:	fa1f fb82 	uxth.w	fp, r2
 8016812:	b289      	uxth	r1, r1
 8016814:	fb0a 110b 	mla	r1, sl, fp, r1
 8016818:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801681c:	f8d9 2000 	ldr.w	r2, [r9]
 8016820:	4461      	add	r1, ip
 8016822:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016826:	fb0a c20b 	mla	r2, sl, fp, ip
 801682a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801682e:	b289      	uxth	r1, r1
 8016830:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016834:	4577      	cmp	r7, lr
 8016836:	f849 1b04 	str.w	r1, [r9], #4
 801683a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801683e:	d8e2      	bhi.n	8016806 <__multiply+0xb2>
 8016840:	9a01      	ldr	r2, [sp, #4]
 8016842:	f845 c002 	str.w	ip, [r5, r2]
 8016846:	9a03      	ldr	r2, [sp, #12]
 8016848:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801684c:	3304      	adds	r3, #4
 801684e:	f1b9 0f00 	cmp.w	r9, #0
 8016852:	d020      	beq.n	8016896 <__multiply+0x142>
 8016854:	6829      	ldr	r1, [r5, #0]
 8016856:	f104 0c14 	add.w	ip, r4, #20
 801685a:	46ae      	mov	lr, r5
 801685c:	f04f 0a00 	mov.w	sl, #0
 8016860:	f8bc b000 	ldrh.w	fp, [ip]
 8016864:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016868:	fb09 220b 	mla	r2, r9, fp, r2
 801686c:	4492      	add	sl, r2
 801686e:	b289      	uxth	r1, r1
 8016870:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016874:	f84e 1b04 	str.w	r1, [lr], #4
 8016878:	f85c 2b04 	ldr.w	r2, [ip], #4
 801687c:	f8be 1000 	ldrh.w	r1, [lr]
 8016880:	0c12      	lsrs	r2, r2, #16
 8016882:	fb09 1102 	mla	r1, r9, r2, r1
 8016886:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801688a:	4567      	cmp	r7, ip
 801688c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016890:	d8e6      	bhi.n	8016860 <__multiply+0x10c>
 8016892:	9a01      	ldr	r2, [sp, #4]
 8016894:	50a9      	str	r1, [r5, r2]
 8016896:	3504      	adds	r5, #4
 8016898:	e79a      	b.n	80167d0 <__multiply+0x7c>
 801689a:	3e01      	subs	r6, #1
 801689c:	e79c      	b.n	80167d8 <__multiply+0x84>
 801689e:	bf00      	nop
 80168a0:	0801a66a 	.word	0x0801a66a
 80168a4:	0801a67b 	.word	0x0801a67b

080168a8 <__pow5mult>:
 80168a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168ac:	4615      	mov	r5, r2
 80168ae:	f012 0203 	ands.w	r2, r2, #3
 80168b2:	4606      	mov	r6, r0
 80168b4:	460f      	mov	r7, r1
 80168b6:	d007      	beq.n	80168c8 <__pow5mult+0x20>
 80168b8:	4c25      	ldr	r4, [pc, #148]	; (8016950 <__pow5mult+0xa8>)
 80168ba:	3a01      	subs	r2, #1
 80168bc:	2300      	movs	r3, #0
 80168be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80168c2:	f7ff fe9b 	bl	80165fc <__multadd>
 80168c6:	4607      	mov	r7, r0
 80168c8:	10ad      	asrs	r5, r5, #2
 80168ca:	d03d      	beq.n	8016948 <__pow5mult+0xa0>
 80168cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80168ce:	b97c      	cbnz	r4, 80168f0 <__pow5mult+0x48>
 80168d0:	2010      	movs	r0, #16
 80168d2:	f7fe f959 	bl	8014b88 <malloc>
 80168d6:	4602      	mov	r2, r0
 80168d8:	6270      	str	r0, [r6, #36]	; 0x24
 80168da:	b928      	cbnz	r0, 80168e8 <__pow5mult+0x40>
 80168dc:	4b1d      	ldr	r3, [pc, #116]	; (8016954 <__pow5mult+0xac>)
 80168de:	481e      	ldr	r0, [pc, #120]	; (8016958 <__pow5mult+0xb0>)
 80168e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80168e4:	f000 ffbe 	bl	8017864 <__assert_func>
 80168e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80168ec:	6004      	str	r4, [r0, #0]
 80168ee:	60c4      	str	r4, [r0, #12]
 80168f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80168f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80168f8:	b94c      	cbnz	r4, 801690e <__pow5mult+0x66>
 80168fa:	f240 2171 	movw	r1, #625	; 0x271
 80168fe:	4630      	mov	r0, r6
 8016900:	f7ff ff12 	bl	8016728 <__i2b>
 8016904:	2300      	movs	r3, #0
 8016906:	f8c8 0008 	str.w	r0, [r8, #8]
 801690a:	4604      	mov	r4, r0
 801690c:	6003      	str	r3, [r0, #0]
 801690e:	f04f 0900 	mov.w	r9, #0
 8016912:	07eb      	lsls	r3, r5, #31
 8016914:	d50a      	bpl.n	801692c <__pow5mult+0x84>
 8016916:	4639      	mov	r1, r7
 8016918:	4622      	mov	r2, r4
 801691a:	4630      	mov	r0, r6
 801691c:	f7ff ff1a 	bl	8016754 <__multiply>
 8016920:	4639      	mov	r1, r7
 8016922:	4680      	mov	r8, r0
 8016924:	4630      	mov	r0, r6
 8016926:	f7ff fe47 	bl	80165b8 <_Bfree>
 801692a:	4647      	mov	r7, r8
 801692c:	106d      	asrs	r5, r5, #1
 801692e:	d00b      	beq.n	8016948 <__pow5mult+0xa0>
 8016930:	6820      	ldr	r0, [r4, #0]
 8016932:	b938      	cbnz	r0, 8016944 <__pow5mult+0x9c>
 8016934:	4622      	mov	r2, r4
 8016936:	4621      	mov	r1, r4
 8016938:	4630      	mov	r0, r6
 801693a:	f7ff ff0b 	bl	8016754 <__multiply>
 801693e:	6020      	str	r0, [r4, #0]
 8016940:	f8c0 9000 	str.w	r9, [r0]
 8016944:	4604      	mov	r4, r0
 8016946:	e7e4      	b.n	8016912 <__pow5mult+0x6a>
 8016948:	4638      	mov	r0, r7
 801694a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801694e:	bf00      	nop
 8016950:	0801a7c8 	.word	0x0801a7c8
 8016954:	0801a5f8 	.word	0x0801a5f8
 8016958:	0801a67b 	.word	0x0801a67b

0801695c <__lshift>:
 801695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016960:	460c      	mov	r4, r1
 8016962:	6849      	ldr	r1, [r1, #4]
 8016964:	6923      	ldr	r3, [r4, #16]
 8016966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801696a:	68a3      	ldr	r3, [r4, #8]
 801696c:	4607      	mov	r7, r0
 801696e:	4691      	mov	r9, r2
 8016970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016974:	f108 0601 	add.w	r6, r8, #1
 8016978:	42b3      	cmp	r3, r6
 801697a:	db0b      	blt.n	8016994 <__lshift+0x38>
 801697c:	4638      	mov	r0, r7
 801697e:	f7ff fddb 	bl	8016538 <_Balloc>
 8016982:	4605      	mov	r5, r0
 8016984:	b948      	cbnz	r0, 801699a <__lshift+0x3e>
 8016986:	4602      	mov	r2, r0
 8016988:	4b2a      	ldr	r3, [pc, #168]	; (8016a34 <__lshift+0xd8>)
 801698a:	482b      	ldr	r0, [pc, #172]	; (8016a38 <__lshift+0xdc>)
 801698c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016990:	f000 ff68 	bl	8017864 <__assert_func>
 8016994:	3101      	adds	r1, #1
 8016996:	005b      	lsls	r3, r3, #1
 8016998:	e7ee      	b.n	8016978 <__lshift+0x1c>
 801699a:	2300      	movs	r3, #0
 801699c:	f100 0114 	add.w	r1, r0, #20
 80169a0:	f100 0210 	add.w	r2, r0, #16
 80169a4:	4618      	mov	r0, r3
 80169a6:	4553      	cmp	r3, sl
 80169a8:	db37      	blt.n	8016a1a <__lshift+0xbe>
 80169aa:	6920      	ldr	r0, [r4, #16]
 80169ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80169b0:	f104 0314 	add.w	r3, r4, #20
 80169b4:	f019 091f 	ands.w	r9, r9, #31
 80169b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80169bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80169c0:	d02f      	beq.n	8016a22 <__lshift+0xc6>
 80169c2:	f1c9 0e20 	rsb	lr, r9, #32
 80169c6:	468a      	mov	sl, r1
 80169c8:	f04f 0c00 	mov.w	ip, #0
 80169cc:	681a      	ldr	r2, [r3, #0]
 80169ce:	fa02 f209 	lsl.w	r2, r2, r9
 80169d2:	ea42 020c 	orr.w	r2, r2, ip
 80169d6:	f84a 2b04 	str.w	r2, [sl], #4
 80169da:	f853 2b04 	ldr.w	r2, [r3], #4
 80169de:	4298      	cmp	r0, r3
 80169e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80169e4:	d8f2      	bhi.n	80169cc <__lshift+0x70>
 80169e6:	1b03      	subs	r3, r0, r4
 80169e8:	3b15      	subs	r3, #21
 80169ea:	f023 0303 	bic.w	r3, r3, #3
 80169ee:	3304      	adds	r3, #4
 80169f0:	f104 0215 	add.w	r2, r4, #21
 80169f4:	4290      	cmp	r0, r2
 80169f6:	bf38      	it	cc
 80169f8:	2304      	movcc	r3, #4
 80169fa:	f841 c003 	str.w	ip, [r1, r3]
 80169fe:	f1bc 0f00 	cmp.w	ip, #0
 8016a02:	d001      	beq.n	8016a08 <__lshift+0xac>
 8016a04:	f108 0602 	add.w	r6, r8, #2
 8016a08:	3e01      	subs	r6, #1
 8016a0a:	4638      	mov	r0, r7
 8016a0c:	612e      	str	r6, [r5, #16]
 8016a0e:	4621      	mov	r1, r4
 8016a10:	f7ff fdd2 	bl	80165b8 <_Bfree>
 8016a14:	4628      	mov	r0, r5
 8016a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8016a1e:	3301      	adds	r3, #1
 8016a20:	e7c1      	b.n	80169a6 <__lshift+0x4a>
 8016a22:	3904      	subs	r1, #4
 8016a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a28:	f841 2f04 	str.w	r2, [r1, #4]!
 8016a2c:	4298      	cmp	r0, r3
 8016a2e:	d8f9      	bhi.n	8016a24 <__lshift+0xc8>
 8016a30:	e7ea      	b.n	8016a08 <__lshift+0xac>
 8016a32:	bf00      	nop
 8016a34:	0801a66a 	.word	0x0801a66a
 8016a38:	0801a67b 	.word	0x0801a67b

08016a3c <__mcmp>:
 8016a3c:	b530      	push	{r4, r5, lr}
 8016a3e:	6902      	ldr	r2, [r0, #16]
 8016a40:	690c      	ldr	r4, [r1, #16]
 8016a42:	1b12      	subs	r2, r2, r4
 8016a44:	d10e      	bne.n	8016a64 <__mcmp+0x28>
 8016a46:	f100 0314 	add.w	r3, r0, #20
 8016a4a:	3114      	adds	r1, #20
 8016a4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016a50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016a54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016a58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016a5c:	42a5      	cmp	r5, r4
 8016a5e:	d003      	beq.n	8016a68 <__mcmp+0x2c>
 8016a60:	d305      	bcc.n	8016a6e <__mcmp+0x32>
 8016a62:	2201      	movs	r2, #1
 8016a64:	4610      	mov	r0, r2
 8016a66:	bd30      	pop	{r4, r5, pc}
 8016a68:	4283      	cmp	r3, r0
 8016a6a:	d3f3      	bcc.n	8016a54 <__mcmp+0x18>
 8016a6c:	e7fa      	b.n	8016a64 <__mcmp+0x28>
 8016a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8016a72:	e7f7      	b.n	8016a64 <__mcmp+0x28>

08016a74 <__mdiff>:
 8016a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a78:	460c      	mov	r4, r1
 8016a7a:	4606      	mov	r6, r0
 8016a7c:	4611      	mov	r1, r2
 8016a7e:	4620      	mov	r0, r4
 8016a80:	4690      	mov	r8, r2
 8016a82:	f7ff ffdb 	bl	8016a3c <__mcmp>
 8016a86:	1e05      	subs	r5, r0, #0
 8016a88:	d110      	bne.n	8016aac <__mdiff+0x38>
 8016a8a:	4629      	mov	r1, r5
 8016a8c:	4630      	mov	r0, r6
 8016a8e:	f7ff fd53 	bl	8016538 <_Balloc>
 8016a92:	b930      	cbnz	r0, 8016aa2 <__mdiff+0x2e>
 8016a94:	4b3a      	ldr	r3, [pc, #232]	; (8016b80 <__mdiff+0x10c>)
 8016a96:	4602      	mov	r2, r0
 8016a98:	f240 2132 	movw	r1, #562	; 0x232
 8016a9c:	4839      	ldr	r0, [pc, #228]	; (8016b84 <__mdiff+0x110>)
 8016a9e:	f000 fee1 	bl	8017864 <__assert_func>
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016aa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aac:	bfa4      	itt	ge
 8016aae:	4643      	movge	r3, r8
 8016ab0:	46a0      	movge	r8, r4
 8016ab2:	4630      	mov	r0, r6
 8016ab4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016ab8:	bfa6      	itte	ge
 8016aba:	461c      	movge	r4, r3
 8016abc:	2500      	movge	r5, #0
 8016abe:	2501      	movlt	r5, #1
 8016ac0:	f7ff fd3a 	bl	8016538 <_Balloc>
 8016ac4:	b920      	cbnz	r0, 8016ad0 <__mdiff+0x5c>
 8016ac6:	4b2e      	ldr	r3, [pc, #184]	; (8016b80 <__mdiff+0x10c>)
 8016ac8:	4602      	mov	r2, r0
 8016aca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016ace:	e7e5      	b.n	8016a9c <__mdiff+0x28>
 8016ad0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016ad4:	6926      	ldr	r6, [r4, #16]
 8016ad6:	60c5      	str	r5, [r0, #12]
 8016ad8:	f104 0914 	add.w	r9, r4, #20
 8016adc:	f108 0514 	add.w	r5, r8, #20
 8016ae0:	f100 0e14 	add.w	lr, r0, #20
 8016ae4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016ae8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016aec:	f108 0210 	add.w	r2, r8, #16
 8016af0:	46f2      	mov	sl, lr
 8016af2:	2100      	movs	r1, #0
 8016af4:	f859 3b04 	ldr.w	r3, [r9], #4
 8016af8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016afc:	fa1f f883 	uxth.w	r8, r3
 8016b00:	fa11 f18b 	uxtah	r1, r1, fp
 8016b04:	0c1b      	lsrs	r3, r3, #16
 8016b06:	eba1 0808 	sub.w	r8, r1, r8
 8016b0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016b0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016b12:	fa1f f888 	uxth.w	r8, r8
 8016b16:	1419      	asrs	r1, r3, #16
 8016b18:	454e      	cmp	r6, r9
 8016b1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016b1e:	f84a 3b04 	str.w	r3, [sl], #4
 8016b22:	d8e7      	bhi.n	8016af4 <__mdiff+0x80>
 8016b24:	1b33      	subs	r3, r6, r4
 8016b26:	3b15      	subs	r3, #21
 8016b28:	f023 0303 	bic.w	r3, r3, #3
 8016b2c:	3304      	adds	r3, #4
 8016b2e:	3415      	adds	r4, #21
 8016b30:	42a6      	cmp	r6, r4
 8016b32:	bf38      	it	cc
 8016b34:	2304      	movcc	r3, #4
 8016b36:	441d      	add	r5, r3
 8016b38:	4473      	add	r3, lr
 8016b3a:	469e      	mov	lr, r3
 8016b3c:	462e      	mov	r6, r5
 8016b3e:	4566      	cmp	r6, ip
 8016b40:	d30e      	bcc.n	8016b60 <__mdiff+0xec>
 8016b42:	f10c 0203 	add.w	r2, ip, #3
 8016b46:	1b52      	subs	r2, r2, r5
 8016b48:	f022 0203 	bic.w	r2, r2, #3
 8016b4c:	3d03      	subs	r5, #3
 8016b4e:	45ac      	cmp	ip, r5
 8016b50:	bf38      	it	cc
 8016b52:	2200      	movcc	r2, #0
 8016b54:	441a      	add	r2, r3
 8016b56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016b5a:	b17b      	cbz	r3, 8016b7c <__mdiff+0x108>
 8016b5c:	6107      	str	r7, [r0, #16]
 8016b5e:	e7a3      	b.n	8016aa8 <__mdiff+0x34>
 8016b60:	f856 8b04 	ldr.w	r8, [r6], #4
 8016b64:	fa11 f288 	uxtah	r2, r1, r8
 8016b68:	1414      	asrs	r4, r2, #16
 8016b6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016b6e:	b292      	uxth	r2, r2
 8016b70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016b74:	f84e 2b04 	str.w	r2, [lr], #4
 8016b78:	1421      	asrs	r1, r4, #16
 8016b7a:	e7e0      	b.n	8016b3e <__mdiff+0xca>
 8016b7c:	3f01      	subs	r7, #1
 8016b7e:	e7ea      	b.n	8016b56 <__mdiff+0xe2>
 8016b80:	0801a66a 	.word	0x0801a66a
 8016b84:	0801a67b 	.word	0x0801a67b

08016b88 <__d2b>:
 8016b88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016b8c:	4689      	mov	r9, r1
 8016b8e:	2101      	movs	r1, #1
 8016b90:	ec57 6b10 	vmov	r6, r7, d0
 8016b94:	4690      	mov	r8, r2
 8016b96:	f7ff fccf 	bl	8016538 <_Balloc>
 8016b9a:	4604      	mov	r4, r0
 8016b9c:	b930      	cbnz	r0, 8016bac <__d2b+0x24>
 8016b9e:	4602      	mov	r2, r0
 8016ba0:	4b25      	ldr	r3, [pc, #148]	; (8016c38 <__d2b+0xb0>)
 8016ba2:	4826      	ldr	r0, [pc, #152]	; (8016c3c <__d2b+0xb4>)
 8016ba4:	f240 310a 	movw	r1, #778	; 0x30a
 8016ba8:	f000 fe5c 	bl	8017864 <__assert_func>
 8016bac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016bb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016bb4:	bb35      	cbnz	r5, 8016c04 <__d2b+0x7c>
 8016bb6:	2e00      	cmp	r6, #0
 8016bb8:	9301      	str	r3, [sp, #4]
 8016bba:	d028      	beq.n	8016c0e <__d2b+0x86>
 8016bbc:	4668      	mov	r0, sp
 8016bbe:	9600      	str	r6, [sp, #0]
 8016bc0:	f7ff fd82 	bl	80166c8 <__lo0bits>
 8016bc4:	9900      	ldr	r1, [sp, #0]
 8016bc6:	b300      	cbz	r0, 8016c0a <__d2b+0x82>
 8016bc8:	9a01      	ldr	r2, [sp, #4]
 8016bca:	f1c0 0320 	rsb	r3, r0, #32
 8016bce:	fa02 f303 	lsl.w	r3, r2, r3
 8016bd2:	430b      	orrs	r3, r1
 8016bd4:	40c2      	lsrs	r2, r0
 8016bd6:	6163      	str	r3, [r4, #20]
 8016bd8:	9201      	str	r2, [sp, #4]
 8016bda:	9b01      	ldr	r3, [sp, #4]
 8016bdc:	61a3      	str	r3, [r4, #24]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	bf14      	ite	ne
 8016be2:	2202      	movne	r2, #2
 8016be4:	2201      	moveq	r2, #1
 8016be6:	6122      	str	r2, [r4, #16]
 8016be8:	b1d5      	cbz	r5, 8016c20 <__d2b+0x98>
 8016bea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016bee:	4405      	add	r5, r0
 8016bf0:	f8c9 5000 	str.w	r5, [r9]
 8016bf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016bf8:	f8c8 0000 	str.w	r0, [r8]
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	b003      	add	sp, #12
 8016c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016c08:	e7d5      	b.n	8016bb6 <__d2b+0x2e>
 8016c0a:	6161      	str	r1, [r4, #20]
 8016c0c:	e7e5      	b.n	8016bda <__d2b+0x52>
 8016c0e:	a801      	add	r0, sp, #4
 8016c10:	f7ff fd5a 	bl	80166c8 <__lo0bits>
 8016c14:	9b01      	ldr	r3, [sp, #4]
 8016c16:	6163      	str	r3, [r4, #20]
 8016c18:	2201      	movs	r2, #1
 8016c1a:	6122      	str	r2, [r4, #16]
 8016c1c:	3020      	adds	r0, #32
 8016c1e:	e7e3      	b.n	8016be8 <__d2b+0x60>
 8016c20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016c24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016c28:	f8c9 0000 	str.w	r0, [r9]
 8016c2c:	6918      	ldr	r0, [r3, #16]
 8016c2e:	f7ff fd2b 	bl	8016688 <__hi0bits>
 8016c32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016c36:	e7df      	b.n	8016bf8 <__d2b+0x70>
 8016c38:	0801a66a 	.word	0x0801a66a
 8016c3c:	0801a67b 	.word	0x0801a67b

08016c40 <_calloc_r>:
 8016c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c42:	fba1 2402 	umull	r2, r4, r1, r2
 8016c46:	b94c      	cbnz	r4, 8016c5c <_calloc_r+0x1c>
 8016c48:	4611      	mov	r1, r2
 8016c4a:	9201      	str	r2, [sp, #4]
 8016c4c:	f7fe f82e 	bl	8014cac <_malloc_r>
 8016c50:	9a01      	ldr	r2, [sp, #4]
 8016c52:	4605      	mov	r5, r0
 8016c54:	b930      	cbnz	r0, 8016c64 <_calloc_r+0x24>
 8016c56:	4628      	mov	r0, r5
 8016c58:	b003      	add	sp, #12
 8016c5a:	bd30      	pop	{r4, r5, pc}
 8016c5c:	220c      	movs	r2, #12
 8016c5e:	6002      	str	r2, [r0, #0]
 8016c60:	2500      	movs	r5, #0
 8016c62:	e7f8      	b.n	8016c56 <_calloc_r+0x16>
 8016c64:	4621      	mov	r1, r4
 8016c66:	f7fd ffad 	bl	8014bc4 <memset>
 8016c6a:	e7f4      	b.n	8016c56 <_calloc_r+0x16>

08016c6c <__ssputs_r>:
 8016c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c70:	688e      	ldr	r6, [r1, #8]
 8016c72:	429e      	cmp	r6, r3
 8016c74:	4682      	mov	sl, r0
 8016c76:	460c      	mov	r4, r1
 8016c78:	4690      	mov	r8, r2
 8016c7a:	461f      	mov	r7, r3
 8016c7c:	d838      	bhi.n	8016cf0 <__ssputs_r+0x84>
 8016c7e:	898a      	ldrh	r2, [r1, #12]
 8016c80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016c84:	d032      	beq.n	8016cec <__ssputs_r+0x80>
 8016c86:	6825      	ldr	r5, [r4, #0]
 8016c88:	6909      	ldr	r1, [r1, #16]
 8016c8a:	eba5 0901 	sub.w	r9, r5, r1
 8016c8e:	6965      	ldr	r5, [r4, #20]
 8016c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016c98:	3301      	adds	r3, #1
 8016c9a:	444b      	add	r3, r9
 8016c9c:	106d      	asrs	r5, r5, #1
 8016c9e:	429d      	cmp	r5, r3
 8016ca0:	bf38      	it	cc
 8016ca2:	461d      	movcc	r5, r3
 8016ca4:	0553      	lsls	r3, r2, #21
 8016ca6:	d531      	bpl.n	8016d0c <__ssputs_r+0xa0>
 8016ca8:	4629      	mov	r1, r5
 8016caa:	f7fd ffff 	bl	8014cac <_malloc_r>
 8016cae:	4606      	mov	r6, r0
 8016cb0:	b950      	cbnz	r0, 8016cc8 <__ssputs_r+0x5c>
 8016cb2:	230c      	movs	r3, #12
 8016cb4:	f8ca 3000 	str.w	r3, [sl]
 8016cb8:	89a3      	ldrh	r3, [r4, #12]
 8016cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cbe:	81a3      	strh	r3, [r4, #12]
 8016cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8016cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cc8:	6921      	ldr	r1, [r4, #16]
 8016cca:	464a      	mov	r2, r9
 8016ccc:	f7fd ff6c 	bl	8014ba8 <memcpy>
 8016cd0:	89a3      	ldrh	r3, [r4, #12]
 8016cd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cda:	81a3      	strh	r3, [r4, #12]
 8016cdc:	6126      	str	r6, [r4, #16]
 8016cde:	6165      	str	r5, [r4, #20]
 8016ce0:	444e      	add	r6, r9
 8016ce2:	eba5 0509 	sub.w	r5, r5, r9
 8016ce6:	6026      	str	r6, [r4, #0]
 8016ce8:	60a5      	str	r5, [r4, #8]
 8016cea:	463e      	mov	r6, r7
 8016cec:	42be      	cmp	r6, r7
 8016cee:	d900      	bls.n	8016cf2 <__ssputs_r+0x86>
 8016cf0:	463e      	mov	r6, r7
 8016cf2:	6820      	ldr	r0, [r4, #0]
 8016cf4:	4632      	mov	r2, r6
 8016cf6:	4641      	mov	r1, r8
 8016cf8:	f000 ffb0 	bl	8017c5c <memmove>
 8016cfc:	68a3      	ldr	r3, [r4, #8]
 8016cfe:	1b9b      	subs	r3, r3, r6
 8016d00:	60a3      	str	r3, [r4, #8]
 8016d02:	6823      	ldr	r3, [r4, #0]
 8016d04:	4433      	add	r3, r6
 8016d06:	6023      	str	r3, [r4, #0]
 8016d08:	2000      	movs	r0, #0
 8016d0a:	e7db      	b.n	8016cc4 <__ssputs_r+0x58>
 8016d0c:	462a      	mov	r2, r5
 8016d0e:	f000 ffbf 	bl	8017c90 <_realloc_r>
 8016d12:	4606      	mov	r6, r0
 8016d14:	2800      	cmp	r0, #0
 8016d16:	d1e1      	bne.n	8016cdc <__ssputs_r+0x70>
 8016d18:	6921      	ldr	r1, [r4, #16]
 8016d1a:	4650      	mov	r0, sl
 8016d1c:	f7fd ff5a 	bl	8014bd4 <_free_r>
 8016d20:	e7c7      	b.n	8016cb2 <__ssputs_r+0x46>
	...

08016d24 <_svfiprintf_r>:
 8016d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d28:	4698      	mov	r8, r3
 8016d2a:	898b      	ldrh	r3, [r1, #12]
 8016d2c:	061b      	lsls	r3, r3, #24
 8016d2e:	b09d      	sub	sp, #116	; 0x74
 8016d30:	4607      	mov	r7, r0
 8016d32:	460d      	mov	r5, r1
 8016d34:	4614      	mov	r4, r2
 8016d36:	d50e      	bpl.n	8016d56 <_svfiprintf_r+0x32>
 8016d38:	690b      	ldr	r3, [r1, #16]
 8016d3a:	b963      	cbnz	r3, 8016d56 <_svfiprintf_r+0x32>
 8016d3c:	2140      	movs	r1, #64	; 0x40
 8016d3e:	f7fd ffb5 	bl	8014cac <_malloc_r>
 8016d42:	6028      	str	r0, [r5, #0]
 8016d44:	6128      	str	r0, [r5, #16]
 8016d46:	b920      	cbnz	r0, 8016d52 <_svfiprintf_r+0x2e>
 8016d48:	230c      	movs	r3, #12
 8016d4a:	603b      	str	r3, [r7, #0]
 8016d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d50:	e0d1      	b.n	8016ef6 <_svfiprintf_r+0x1d2>
 8016d52:	2340      	movs	r3, #64	; 0x40
 8016d54:	616b      	str	r3, [r5, #20]
 8016d56:	2300      	movs	r3, #0
 8016d58:	9309      	str	r3, [sp, #36]	; 0x24
 8016d5a:	2320      	movs	r3, #32
 8016d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d64:	2330      	movs	r3, #48	; 0x30
 8016d66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016f10 <_svfiprintf_r+0x1ec>
 8016d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d6e:	f04f 0901 	mov.w	r9, #1
 8016d72:	4623      	mov	r3, r4
 8016d74:	469a      	mov	sl, r3
 8016d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d7a:	b10a      	cbz	r2, 8016d80 <_svfiprintf_r+0x5c>
 8016d7c:	2a25      	cmp	r2, #37	; 0x25
 8016d7e:	d1f9      	bne.n	8016d74 <_svfiprintf_r+0x50>
 8016d80:	ebba 0b04 	subs.w	fp, sl, r4
 8016d84:	d00b      	beq.n	8016d9e <_svfiprintf_r+0x7a>
 8016d86:	465b      	mov	r3, fp
 8016d88:	4622      	mov	r2, r4
 8016d8a:	4629      	mov	r1, r5
 8016d8c:	4638      	mov	r0, r7
 8016d8e:	f7ff ff6d 	bl	8016c6c <__ssputs_r>
 8016d92:	3001      	adds	r0, #1
 8016d94:	f000 80aa 	beq.w	8016eec <_svfiprintf_r+0x1c8>
 8016d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d9a:	445a      	add	r2, fp
 8016d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8016d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	f000 80a2 	beq.w	8016eec <_svfiprintf_r+0x1c8>
 8016da8:	2300      	movs	r3, #0
 8016daa:	f04f 32ff 	mov.w	r2, #4294967295
 8016dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016db2:	f10a 0a01 	add.w	sl, sl, #1
 8016db6:	9304      	str	r3, [sp, #16]
 8016db8:	9307      	str	r3, [sp, #28]
 8016dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8016dc0:	4654      	mov	r4, sl
 8016dc2:	2205      	movs	r2, #5
 8016dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dc8:	4851      	ldr	r0, [pc, #324]	; (8016f10 <_svfiprintf_r+0x1ec>)
 8016dca:	f7e9 fa21 	bl	8000210 <memchr>
 8016dce:	9a04      	ldr	r2, [sp, #16]
 8016dd0:	b9d8      	cbnz	r0, 8016e0a <_svfiprintf_r+0xe6>
 8016dd2:	06d0      	lsls	r0, r2, #27
 8016dd4:	bf44      	itt	mi
 8016dd6:	2320      	movmi	r3, #32
 8016dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ddc:	0711      	lsls	r1, r2, #28
 8016dde:	bf44      	itt	mi
 8016de0:	232b      	movmi	r3, #43	; 0x2b
 8016de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016de6:	f89a 3000 	ldrb.w	r3, [sl]
 8016dea:	2b2a      	cmp	r3, #42	; 0x2a
 8016dec:	d015      	beq.n	8016e1a <_svfiprintf_r+0xf6>
 8016dee:	9a07      	ldr	r2, [sp, #28]
 8016df0:	4654      	mov	r4, sl
 8016df2:	2000      	movs	r0, #0
 8016df4:	f04f 0c0a 	mov.w	ip, #10
 8016df8:	4621      	mov	r1, r4
 8016dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016dfe:	3b30      	subs	r3, #48	; 0x30
 8016e00:	2b09      	cmp	r3, #9
 8016e02:	d94e      	bls.n	8016ea2 <_svfiprintf_r+0x17e>
 8016e04:	b1b0      	cbz	r0, 8016e34 <_svfiprintf_r+0x110>
 8016e06:	9207      	str	r2, [sp, #28]
 8016e08:	e014      	b.n	8016e34 <_svfiprintf_r+0x110>
 8016e0a:	eba0 0308 	sub.w	r3, r0, r8
 8016e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8016e12:	4313      	orrs	r3, r2
 8016e14:	9304      	str	r3, [sp, #16]
 8016e16:	46a2      	mov	sl, r4
 8016e18:	e7d2      	b.n	8016dc0 <_svfiprintf_r+0x9c>
 8016e1a:	9b03      	ldr	r3, [sp, #12]
 8016e1c:	1d19      	adds	r1, r3, #4
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	9103      	str	r1, [sp, #12]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	bfbb      	ittet	lt
 8016e26:	425b      	neglt	r3, r3
 8016e28:	f042 0202 	orrlt.w	r2, r2, #2
 8016e2c:	9307      	strge	r3, [sp, #28]
 8016e2e:	9307      	strlt	r3, [sp, #28]
 8016e30:	bfb8      	it	lt
 8016e32:	9204      	strlt	r2, [sp, #16]
 8016e34:	7823      	ldrb	r3, [r4, #0]
 8016e36:	2b2e      	cmp	r3, #46	; 0x2e
 8016e38:	d10c      	bne.n	8016e54 <_svfiprintf_r+0x130>
 8016e3a:	7863      	ldrb	r3, [r4, #1]
 8016e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8016e3e:	d135      	bne.n	8016eac <_svfiprintf_r+0x188>
 8016e40:	9b03      	ldr	r3, [sp, #12]
 8016e42:	1d1a      	adds	r2, r3, #4
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	9203      	str	r2, [sp, #12]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	bfb8      	it	lt
 8016e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e50:	3402      	adds	r4, #2
 8016e52:	9305      	str	r3, [sp, #20]
 8016e54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016f20 <_svfiprintf_r+0x1fc>
 8016e58:	7821      	ldrb	r1, [r4, #0]
 8016e5a:	2203      	movs	r2, #3
 8016e5c:	4650      	mov	r0, sl
 8016e5e:	f7e9 f9d7 	bl	8000210 <memchr>
 8016e62:	b140      	cbz	r0, 8016e76 <_svfiprintf_r+0x152>
 8016e64:	2340      	movs	r3, #64	; 0x40
 8016e66:	eba0 000a 	sub.w	r0, r0, sl
 8016e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8016e6e:	9b04      	ldr	r3, [sp, #16]
 8016e70:	4303      	orrs	r3, r0
 8016e72:	3401      	adds	r4, #1
 8016e74:	9304      	str	r3, [sp, #16]
 8016e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e7a:	4826      	ldr	r0, [pc, #152]	; (8016f14 <_svfiprintf_r+0x1f0>)
 8016e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e80:	2206      	movs	r2, #6
 8016e82:	f7e9 f9c5 	bl	8000210 <memchr>
 8016e86:	2800      	cmp	r0, #0
 8016e88:	d038      	beq.n	8016efc <_svfiprintf_r+0x1d8>
 8016e8a:	4b23      	ldr	r3, [pc, #140]	; (8016f18 <_svfiprintf_r+0x1f4>)
 8016e8c:	bb1b      	cbnz	r3, 8016ed6 <_svfiprintf_r+0x1b2>
 8016e8e:	9b03      	ldr	r3, [sp, #12]
 8016e90:	3307      	adds	r3, #7
 8016e92:	f023 0307 	bic.w	r3, r3, #7
 8016e96:	3308      	adds	r3, #8
 8016e98:	9303      	str	r3, [sp, #12]
 8016e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e9c:	4433      	add	r3, r6
 8016e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8016ea0:	e767      	b.n	8016d72 <_svfiprintf_r+0x4e>
 8016ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8016ea6:	460c      	mov	r4, r1
 8016ea8:	2001      	movs	r0, #1
 8016eaa:	e7a5      	b.n	8016df8 <_svfiprintf_r+0xd4>
 8016eac:	2300      	movs	r3, #0
 8016eae:	3401      	adds	r4, #1
 8016eb0:	9305      	str	r3, [sp, #20]
 8016eb2:	4619      	mov	r1, r3
 8016eb4:	f04f 0c0a 	mov.w	ip, #10
 8016eb8:	4620      	mov	r0, r4
 8016eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ebe:	3a30      	subs	r2, #48	; 0x30
 8016ec0:	2a09      	cmp	r2, #9
 8016ec2:	d903      	bls.n	8016ecc <_svfiprintf_r+0x1a8>
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d0c5      	beq.n	8016e54 <_svfiprintf_r+0x130>
 8016ec8:	9105      	str	r1, [sp, #20]
 8016eca:	e7c3      	b.n	8016e54 <_svfiprintf_r+0x130>
 8016ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8016ed0:	4604      	mov	r4, r0
 8016ed2:	2301      	movs	r3, #1
 8016ed4:	e7f0      	b.n	8016eb8 <_svfiprintf_r+0x194>
 8016ed6:	ab03      	add	r3, sp, #12
 8016ed8:	9300      	str	r3, [sp, #0]
 8016eda:	462a      	mov	r2, r5
 8016edc:	4b0f      	ldr	r3, [pc, #60]	; (8016f1c <_svfiprintf_r+0x1f8>)
 8016ede:	a904      	add	r1, sp, #16
 8016ee0:	4638      	mov	r0, r7
 8016ee2:	f7fd fff7 	bl	8014ed4 <_printf_float>
 8016ee6:	1c42      	adds	r2, r0, #1
 8016ee8:	4606      	mov	r6, r0
 8016eea:	d1d6      	bne.n	8016e9a <_svfiprintf_r+0x176>
 8016eec:	89ab      	ldrh	r3, [r5, #12]
 8016eee:	065b      	lsls	r3, r3, #25
 8016ef0:	f53f af2c 	bmi.w	8016d4c <_svfiprintf_r+0x28>
 8016ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ef6:	b01d      	add	sp, #116	; 0x74
 8016ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016efc:	ab03      	add	r3, sp, #12
 8016efe:	9300      	str	r3, [sp, #0]
 8016f00:	462a      	mov	r2, r5
 8016f02:	4b06      	ldr	r3, [pc, #24]	; (8016f1c <_svfiprintf_r+0x1f8>)
 8016f04:	a904      	add	r1, sp, #16
 8016f06:	4638      	mov	r0, r7
 8016f08:	f7fe fa88 	bl	801541c <_printf_i>
 8016f0c:	e7eb      	b.n	8016ee6 <_svfiprintf_r+0x1c2>
 8016f0e:	bf00      	nop
 8016f10:	0801a7d4 	.word	0x0801a7d4
 8016f14:	0801a7de 	.word	0x0801a7de
 8016f18:	08014ed5 	.word	0x08014ed5
 8016f1c:	08016c6d 	.word	0x08016c6d
 8016f20:	0801a7da 	.word	0x0801a7da

08016f24 <_sungetc_r>:
 8016f24:	b538      	push	{r3, r4, r5, lr}
 8016f26:	1c4b      	adds	r3, r1, #1
 8016f28:	4614      	mov	r4, r2
 8016f2a:	d103      	bne.n	8016f34 <_sungetc_r+0x10>
 8016f2c:	f04f 35ff 	mov.w	r5, #4294967295
 8016f30:	4628      	mov	r0, r5
 8016f32:	bd38      	pop	{r3, r4, r5, pc}
 8016f34:	8993      	ldrh	r3, [r2, #12]
 8016f36:	f023 0320 	bic.w	r3, r3, #32
 8016f3a:	8193      	strh	r3, [r2, #12]
 8016f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f3e:	6852      	ldr	r2, [r2, #4]
 8016f40:	b2cd      	uxtb	r5, r1
 8016f42:	b18b      	cbz	r3, 8016f68 <_sungetc_r+0x44>
 8016f44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016f46:	4293      	cmp	r3, r2
 8016f48:	dd08      	ble.n	8016f5c <_sungetc_r+0x38>
 8016f4a:	6823      	ldr	r3, [r4, #0]
 8016f4c:	1e5a      	subs	r2, r3, #1
 8016f4e:	6022      	str	r2, [r4, #0]
 8016f50:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016f54:	6863      	ldr	r3, [r4, #4]
 8016f56:	3301      	adds	r3, #1
 8016f58:	6063      	str	r3, [r4, #4]
 8016f5a:	e7e9      	b.n	8016f30 <_sungetc_r+0xc>
 8016f5c:	4621      	mov	r1, r4
 8016f5e:	f000 fc47 	bl	80177f0 <__submore>
 8016f62:	2800      	cmp	r0, #0
 8016f64:	d0f1      	beq.n	8016f4a <_sungetc_r+0x26>
 8016f66:	e7e1      	b.n	8016f2c <_sungetc_r+0x8>
 8016f68:	6921      	ldr	r1, [r4, #16]
 8016f6a:	6823      	ldr	r3, [r4, #0]
 8016f6c:	b151      	cbz	r1, 8016f84 <_sungetc_r+0x60>
 8016f6e:	4299      	cmp	r1, r3
 8016f70:	d208      	bcs.n	8016f84 <_sungetc_r+0x60>
 8016f72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016f76:	42a9      	cmp	r1, r5
 8016f78:	d104      	bne.n	8016f84 <_sungetc_r+0x60>
 8016f7a:	3b01      	subs	r3, #1
 8016f7c:	3201      	adds	r2, #1
 8016f7e:	6023      	str	r3, [r4, #0]
 8016f80:	6062      	str	r2, [r4, #4]
 8016f82:	e7d5      	b.n	8016f30 <_sungetc_r+0xc>
 8016f84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8016f8e:	2303      	movs	r3, #3
 8016f90:	63a3      	str	r3, [r4, #56]	; 0x38
 8016f92:	4623      	mov	r3, r4
 8016f94:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016f98:	6023      	str	r3, [r4, #0]
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	e7dc      	b.n	8016f58 <_sungetc_r+0x34>

08016f9e <__ssrefill_r>:
 8016f9e:	b510      	push	{r4, lr}
 8016fa0:	460c      	mov	r4, r1
 8016fa2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016fa4:	b169      	cbz	r1, 8016fc2 <__ssrefill_r+0x24>
 8016fa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016faa:	4299      	cmp	r1, r3
 8016fac:	d001      	beq.n	8016fb2 <__ssrefill_r+0x14>
 8016fae:	f7fd fe11 	bl	8014bd4 <_free_r>
 8016fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016fb4:	6063      	str	r3, [r4, #4]
 8016fb6:	2000      	movs	r0, #0
 8016fb8:	6360      	str	r0, [r4, #52]	; 0x34
 8016fba:	b113      	cbz	r3, 8016fc2 <__ssrefill_r+0x24>
 8016fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016fbe:	6023      	str	r3, [r4, #0]
 8016fc0:	bd10      	pop	{r4, pc}
 8016fc2:	6923      	ldr	r3, [r4, #16]
 8016fc4:	6023      	str	r3, [r4, #0]
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	6063      	str	r3, [r4, #4]
 8016fca:	89a3      	ldrh	r3, [r4, #12]
 8016fcc:	f043 0320 	orr.w	r3, r3, #32
 8016fd0:	81a3      	strh	r3, [r4, #12]
 8016fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8016fd6:	e7f3      	b.n	8016fc0 <__ssrefill_r+0x22>

08016fd8 <__ssvfiscanf_r>:
 8016fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fdc:	460c      	mov	r4, r1
 8016fde:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016fe2:	2100      	movs	r1, #0
 8016fe4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016fe8:	49a6      	ldr	r1, [pc, #664]	; (8017284 <__ssvfiscanf_r+0x2ac>)
 8016fea:	91a0      	str	r1, [sp, #640]	; 0x280
 8016fec:	f10d 0804 	add.w	r8, sp, #4
 8016ff0:	49a5      	ldr	r1, [pc, #660]	; (8017288 <__ssvfiscanf_r+0x2b0>)
 8016ff2:	4fa6      	ldr	r7, [pc, #664]	; (801728c <__ssvfiscanf_r+0x2b4>)
 8016ff4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017290 <__ssvfiscanf_r+0x2b8>
 8016ff8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016ffc:	4606      	mov	r6, r0
 8016ffe:	91a1      	str	r1, [sp, #644]	; 0x284
 8017000:	9300      	str	r3, [sp, #0]
 8017002:	7813      	ldrb	r3, [r2, #0]
 8017004:	2b00      	cmp	r3, #0
 8017006:	f000 815a 	beq.w	80172be <__ssvfiscanf_r+0x2e6>
 801700a:	5dd9      	ldrb	r1, [r3, r7]
 801700c:	f011 0108 	ands.w	r1, r1, #8
 8017010:	f102 0501 	add.w	r5, r2, #1
 8017014:	d019      	beq.n	801704a <__ssvfiscanf_r+0x72>
 8017016:	6863      	ldr	r3, [r4, #4]
 8017018:	2b00      	cmp	r3, #0
 801701a:	dd0f      	ble.n	801703c <__ssvfiscanf_r+0x64>
 801701c:	6823      	ldr	r3, [r4, #0]
 801701e:	781a      	ldrb	r2, [r3, #0]
 8017020:	5cba      	ldrb	r2, [r7, r2]
 8017022:	0712      	lsls	r2, r2, #28
 8017024:	d401      	bmi.n	801702a <__ssvfiscanf_r+0x52>
 8017026:	462a      	mov	r2, r5
 8017028:	e7eb      	b.n	8017002 <__ssvfiscanf_r+0x2a>
 801702a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801702c:	3201      	adds	r2, #1
 801702e:	9245      	str	r2, [sp, #276]	; 0x114
 8017030:	6862      	ldr	r2, [r4, #4]
 8017032:	3301      	adds	r3, #1
 8017034:	3a01      	subs	r2, #1
 8017036:	6062      	str	r2, [r4, #4]
 8017038:	6023      	str	r3, [r4, #0]
 801703a:	e7ec      	b.n	8017016 <__ssvfiscanf_r+0x3e>
 801703c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801703e:	4621      	mov	r1, r4
 8017040:	4630      	mov	r0, r6
 8017042:	4798      	blx	r3
 8017044:	2800      	cmp	r0, #0
 8017046:	d0e9      	beq.n	801701c <__ssvfiscanf_r+0x44>
 8017048:	e7ed      	b.n	8017026 <__ssvfiscanf_r+0x4e>
 801704a:	2b25      	cmp	r3, #37	; 0x25
 801704c:	d012      	beq.n	8017074 <__ssvfiscanf_r+0x9c>
 801704e:	469a      	mov	sl, r3
 8017050:	6863      	ldr	r3, [r4, #4]
 8017052:	2b00      	cmp	r3, #0
 8017054:	f340 8091 	ble.w	801717a <__ssvfiscanf_r+0x1a2>
 8017058:	6822      	ldr	r2, [r4, #0]
 801705a:	7813      	ldrb	r3, [r2, #0]
 801705c:	4553      	cmp	r3, sl
 801705e:	f040 812e 	bne.w	80172be <__ssvfiscanf_r+0x2e6>
 8017062:	6863      	ldr	r3, [r4, #4]
 8017064:	3b01      	subs	r3, #1
 8017066:	6063      	str	r3, [r4, #4]
 8017068:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801706a:	3201      	adds	r2, #1
 801706c:	3301      	adds	r3, #1
 801706e:	6022      	str	r2, [r4, #0]
 8017070:	9345      	str	r3, [sp, #276]	; 0x114
 8017072:	e7d8      	b.n	8017026 <__ssvfiscanf_r+0x4e>
 8017074:	9141      	str	r1, [sp, #260]	; 0x104
 8017076:	9143      	str	r1, [sp, #268]	; 0x10c
 8017078:	7853      	ldrb	r3, [r2, #1]
 801707a:	2b2a      	cmp	r3, #42	; 0x2a
 801707c:	bf02      	ittt	eq
 801707e:	2310      	moveq	r3, #16
 8017080:	1c95      	addeq	r5, r2, #2
 8017082:	9341      	streq	r3, [sp, #260]	; 0x104
 8017084:	220a      	movs	r2, #10
 8017086:	46aa      	mov	sl, r5
 8017088:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801708c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017090:	2b09      	cmp	r3, #9
 8017092:	d91d      	bls.n	80170d0 <__ssvfiscanf_r+0xf8>
 8017094:	487e      	ldr	r0, [pc, #504]	; (8017290 <__ssvfiscanf_r+0x2b8>)
 8017096:	2203      	movs	r2, #3
 8017098:	f7e9 f8ba 	bl	8000210 <memchr>
 801709c:	b140      	cbz	r0, 80170b0 <__ssvfiscanf_r+0xd8>
 801709e:	2301      	movs	r3, #1
 80170a0:	eba0 0009 	sub.w	r0, r0, r9
 80170a4:	fa03 f000 	lsl.w	r0, r3, r0
 80170a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80170aa:	4318      	orrs	r0, r3
 80170ac:	9041      	str	r0, [sp, #260]	; 0x104
 80170ae:	4655      	mov	r5, sl
 80170b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80170b4:	2b78      	cmp	r3, #120	; 0x78
 80170b6:	d806      	bhi.n	80170c6 <__ssvfiscanf_r+0xee>
 80170b8:	2b57      	cmp	r3, #87	; 0x57
 80170ba:	d810      	bhi.n	80170de <__ssvfiscanf_r+0x106>
 80170bc:	2b25      	cmp	r3, #37	; 0x25
 80170be:	d0c6      	beq.n	801704e <__ssvfiscanf_r+0x76>
 80170c0:	d856      	bhi.n	8017170 <__ssvfiscanf_r+0x198>
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d064      	beq.n	8017190 <__ssvfiscanf_r+0x1b8>
 80170c6:	2303      	movs	r3, #3
 80170c8:	9347      	str	r3, [sp, #284]	; 0x11c
 80170ca:	230a      	movs	r3, #10
 80170cc:	9342      	str	r3, [sp, #264]	; 0x108
 80170ce:	e071      	b.n	80171b4 <__ssvfiscanf_r+0x1dc>
 80170d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80170d2:	fb02 1103 	mla	r1, r2, r3, r1
 80170d6:	3930      	subs	r1, #48	; 0x30
 80170d8:	9143      	str	r1, [sp, #268]	; 0x10c
 80170da:	4655      	mov	r5, sl
 80170dc:	e7d3      	b.n	8017086 <__ssvfiscanf_r+0xae>
 80170de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80170e2:	2a20      	cmp	r2, #32
 80170e4:	d8ef      	bhi.n	80170c6 <__ssvfiscanf_r+0xee>
 80170e6:	a101      	add	r1, pc, #4	; (adr r1, 80170ec <__ssvfiscanf_r+0x114>)
 80170e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80170ec:	0801719f 	.word	0x0801719f
 80170f0:	080170c7 	.word	0x080170c7
 80170f4:	080170c7 	.word	0x080170c7
 80170f8:	080171fd 	.word	0x080171fd
 80170fc:	080170c7 	.word	0x080170c7
 8017100:	080170c7 	.word	0x080170c7
 8017104:	080170c7 	.word	0x080170c7
 8017108:	080170c7 	.word	0x080170c7
 801710c:	080170c7 	.word	0x080170c7
 8017110:	080170c7 	.word	0x080170c7
 8017114:	080170c7 	.word	0x080170c7
 8017118:	08017213 	.word	0x08017213
 801711c:	080171e9 	.word	0x080171e9
 8017120:	08017177 	.word	0x08017177
 8017124:	08017177 	.word	0x08017177
 8017128:	08017177 	.word	0x08017177
 801712c:	080170c7 	.word	0x080170c7
 8017130:	080171ed 	.word	0x080171ed
 8017134:	080170c7 	.word	0x080170c7
 8017138:	080170c7 	.word	0x080170c7
 801713c:	080170c7 	.word	0x080170c7
 8017140:	080170c7 	.word	0x080170c7
 8017144:	08017223 	.word	0x08017223
 8017148:	080171f5 	.word	0x080171f5
 801714c:	08017197 	.word	0x08017197
 8017150:	080170c7 	.word	0x080170c7
 8017154:	080170c7 	.word	0x080170c7
 8017158:	0801721f 	.word	0x0801721f
 801715c:	080170c7 	.word	0x080170c7
 8017160:	080171e9 	.word	0x080171e9
 8017164:	080170c7 	.word	0x080170c7
 8017168:	080170c7 	.word	0x080170c7
 801716c:	0801719f 	.word	0x0801719f
 8017170:	3b45      	subs	r3, #69	; 0x45
 8017172:	2b02      	cmp	r3, #2
 8017174:	d8a7      	bhi.n	80170c6 <__ssvfiscanf_r+0xee>
 8017176:	2305      	movs	r3, #5
 8017178:	e01b      	b.n	80171b2 <__ssvfiscanf_r+0x1da>
 801717a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801717c:	4621      	mov	r1, r4
 801717e:	4630      	mov	r0, r6
 8017180:	4798      	blx	r3
 8017182:	2800      	cmp	r0, #0
 8017184:	f43f af68 	beq.w	8017058 <__ssvfiscanf_r+0x80>
 8017188:	9844      	ldr	r0, [sp, #272]	; 0x110
 801718a:	2800      	cmp	r0, #0
 801718c:	f040 808d 	bne.w	80172aa <__ssvfiscanf_r+0x2d2>
 8017190:	f04f 30ff 	mov.w	r0, #4294967295
 8017194:	e08f      	b.n	80172b6 <__ssvfiscanf_r+0x2de>
 8017196:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017198:	f042 0220 	orr.w	r2, r2, #32
 801719c:	9241      	str	r2, [sp, #260]	; 0x104
 801719e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80171a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80171a4:	9241      	str	r2, [sp, #260]	; 0x104
 80171a6:	2210      	movs	r2, #16
 80171a8:	2b6f      	cmp	r3, #111	; 0x6f
 80171aa:	9242      	str	r2, [sp, #264]	; 0x108
 80171ac:	bf34      	ite	cc
 80171ae:	2303      	movcc	r3, #3
 80171b0:	2304      	movcs	r3, #4
 80171b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80171b4:	6863      	ldr	r3, [r4, #4]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	dd42      	ble.n	8017240 <__ssvfiscanf_r+0x268>
 80171ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80171bc:	0659      	lsls	r1, r3, #25
 80171be:	d404      	bmi.n	80171ca <__ssvfiscanf_r+0x1f2>
 80171c0:	6823      	ldr	r3, [r4, #0]
 80171c2:	781a      	ldrb	r2, [r3, #0]
 80171c4:	5cba      	ldrb	r2, [r7, r2]
 80171c6:	0712      	lsls	r2, r2, #28
 80171c8:	d441      	bmi.n	801724e <__ssvfiscanf_r+0x276>
 80171ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80171cc:	2b02      	cmp	r3, #2
 80171ce:	dc50      	bgt.n	8017272 <__ssvfiscanf_r+0x29a>
 80171d0:	466b      	mov	r3, sp
 80171d2:	4622      	mov	r2, r4
 80171d4:	a941      	add	r1, sp, #260	; 0x104
 80171d6:	4630      	mov	r0, r6
 80171d8:	f000 f876 	bl	80172c8 <_scanf_chars>
 80171dc:	2801      	cmp	r0, #1
 80171de:	d06e      	beq.n	80172be <__ssvfiscanf_r+0x2e6>
 80171e0:	2802      	cmp	r0, #2
 80171e2:	f47f af20 	bne.w	8017026 <__ssvfiscanf_r+0x4e>
 80171e6:	e7cf      	b.n	8017188 <__ssvfiscanf_r+0x1b0>
 80171e8:	220a      	movs	r2, #10
 80171ea:	e7dd      	b.n	80171a8 <__ssvfiscanf_r+0x1d0>
 80171ec:	2300      	movs	r3, #0
 80171ee:	9342      	str	r3, [sp, #264]	; 0x108
 80171f0:	2303      	movs	r3, #3
 80171f2:	e7de      	b.n	80171b2 <__ssvfiscanf_r+0x1da>
 80171f4:	2308      	movs	r3, #8
 80171f6:	9342      	str	r3, [sp, #264]	; 0x108
 80171f8:	2304      	movs	r3, #4
 80171fa:	e7da      	b.n	80171b2 <__ssvfiscanf_r+0x1da>
 80171fc:	4629      	mov	r1, r5
 80171fe:	4640      	mov	r0, r8
 8017200:	f000 f9c6 	bl	8017590 <__sccl>
 8017204:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801720a:	9341      	str	r3, [sp, #260]	; 0x104
 801720c:	4605      	mov	r5, r0
 801720e:	2301      	movs	r3, #1
 8017210:	e7cf      	b.n	80171b2 <__ssvfiscanf_r+0x1da>
 8017212:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017218:	9341      	str	r3, [sp, #260]	; 0x104
 801721a:	2300      	movs	r3, #0
 801721c:	e7c9      	b.n	80171b2 <__ssvfiscanf_r+0x1da>
 801721e:	2302      	movs	r3, #2
 8017220:	e7c7      	b.n	80171b2 <__ssvfiscanf_r+0x1da>
 8017222:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017224:	06c3      	lsls	r3, r0, #27
 8017226:	f53f aefe 	bmi.w	8017026 <__ssvfiscanf_r+0x4e>
 801722a:	9b00      	ldr	r3, [sp, #0]
 801722c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801722e:	1d19      	adds	r1, r3, #4
 8017230:	9100      	str	r1, [sp, #0]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	f010 0f01 	tst.w	r0, #1
 8017238:	bf14      	ite	ne
 801723a:	801a      	strhne	r2, [r3, #0]
 801723c:	601a      	streq	r2, [r3, #0]
 801723e:	e6f2      	b.n	8017026 <__ssvfiscanf_r+0x4e>
 8017240:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017242:	4621      	mov	r1, r4
 8017244:	4630      	mov	r0, r6
 8017246:	4798      	blx	r3
 8017248:	2800      	cmp	r0, #0
 801724a:	d0b6      	beq.n	80171ba <__ssvfiscanf_r+0x1e2>
 801724c:	e79c      	b.n	8017188 <__ssvfiscanf_r+0x1b0>
 801724e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017250:	3201      	adds	r2, #1
 8017252:	9245      	str	r2, [sp, #276]	; 0x114
 8017254:	6862      	ldr	r2, [r4, #4]
 8017256:	3a01      	subs	r2, #1
 8017258:	2a00      	cmp	r2, #0
 801725a:	6062      	str	r2, [r4, #4]
 801725c:	dd02      	ble.n	8017264 <__ssvfiscanf_r+0x28c>
 801725e:	3301      	adds	r3, #1
 8017260:	6023      	str	r3, [r4, #0]
 8017262:	e7ad      	b.n	80171c0 <__ssvfiscanf_r+0x1e8>
 8017264:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017266:	4621      	mov	r1, r4
 8017268:	4630      	mov	r0, r6
 801726a:	4798      	blx	r3
 801726c:	2800      	cmp	r0, #0
 801726e:	d0a7      	beq.n	80171c0 <__ssvfiscanf_r+0x1e8>
 8017270:	e78a      	b.n	8017188 <__ssvfiscanf_r+0x1b0>
 8017272:	2b04      	cmp	r3, #4
 8017274:	dc0e      	bgt.n	8017294 <__ssvfiscanf_r+0x2bc>
 8017276:	466b      	mov	r3, sp
 8017278:	4622      	mov	r2, r4
 801727a:	a941      	add	r1, sp, #260	; 0x104
 801727c:	4630      	mov	r0, r6
 801727e:	f000 f87d 	bl	801737c <_scanf_i>
 8017282:	e7ab      	b.n	80171dc <__ssvfiscanf_r+0x204>
 8017284:	08016f25 	.word	0x08016f25
 8017288:	08016f9f 	.word	0x08016f9f
 801728c:	0801a4eb 	.word	0x0801a4eb
 8017290:	0801a7da 	.word	0x0801a7da
 8017294:	4b0b      	ldr	r3, [pc, #44]	; (80172c4 <__ssvfiscanf_r+0x2ec>)
 8017296:	2b00      	cmp	r3, #0
 8017298:	f43f aec5 	beq.w	8017026 <__ssvfiscanf_r+0x4e>
 801729c:	466b      	mov	r3, sp
 801729e:	4622      	mov	r2, r4
 80172a0:	a941      	add	r1, sp, #260	; 0x104
 80172a2:	4630      	mov	r0, r6
 80172a4:	f3af 8000 	nop.w
 80172a8:	e798      	b.n	80171dc <__ssvfiscanf_r+0x204>
 80172aa:	89a3      	ldrh	r3, [r4, #12]
 80172ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80172b0:	bf18      	it	ne
 80172b2:	f04f 30ff 	movne.w	r0, #4294967295
 80172b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80172ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80172c0:	e7f9      	b.n	80172b6 <__ssvfiscanf_r+0x2de>
 80172c2:	bf00      	nop
 80172c4:	00000000 	.word	0x00000000

080172c8 <_scanf_chars>:
 80172c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172cc:	4615      	mov	r5, r2
 80172ce:	688a      	ldr	r2, [r1, #8]
 80172d0:	4680      	mov	r8, r0
 80172d2:	460c      	mov	r4, r1
 80172d4:	b932      	cbnz	r2, 80172e4 <_scanf_chars+0x1c>
 80172d6:	698a      	ldr	r2, [r1, #24]
 80172d8:	2a00      	cmp	r2, #0
 80172da:	bf0c      	ite	eq
 80172dc:	2201      	moveq	r2, #1
 80172de:	f04f 32ff 	movne.w	r2, #4294967295
 80172e2:	608a      	str	r2, [r1, #8]
 80172e4:	6822      	ldr	r2, [r4, #0]
 80172e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017378 <_scanf_chars+0xb0>
 80172ea:	06d1      	lsls	r1, r2, #27
 80172ec:	bf5f      	itttt	pl
 80172ee:	681a      	ldrpl	r2, [r3, #0]
 80172f0:	1d11      	addpl	r1, r2, #4
 80172f2:	6019      	strpl	r1, [r3, #0]
 80172f4:	6816      	ldrpl	r6, [r2, #0]
 80172f6:	2700      	movs	r7, #0
 80172f8:	69a0      	ldr	r0, [r4, #24]
 80172fa:	b188      	cbz	r0, 8017320 <_scanf_chars+0x58>
 80172fc:	2801      	cmp	r0, #1
 80172fe:	d107      	bne.n	8017310 <_scanf_chars+0x48>
 8017300:	682a      	ldr	r2, [r5, #0]
 8017302:	7811      	ldrb	r1, [r2, #0]
 8017304:	6962      	ldr	r2, [r4, #20]
 8017306:	5c52      	ldrb	r2, [r2, r1]
 8017308:	b952      	cbnz	r2, 8017320 <_scanf_chars+0x58>
 801730a:	2f00      	cmp	r7, #0
 801730c:	d031      	beq.n	8017372 <_scanf_chars+0xaa>
 801730e:	e022      	b.n	8017356 <_scanf_chars+0x8e>
 8017310:	2802      	cmp	r0, #2
 8017312:	d120      	bne.n	8017356 <_scanf_chars+0x8e>
 8017314:	682b      	ldr	r3, [r5, #0]
 8017316:	781b      	ldrb	r3, [r3, #0]
 8017318:	f813 3009 	ldrb.w	r3, [r3, r9]
 801731c:	071b      	lsls	r3, r3, #28
 801731e:	d41a      	bmi.n	8017356 <_scanf_chars+0x8e>
 8017320:	6823      	ldr	r3, [r4, #0]
 8017322:	06da      	lsls	r2, r3, #27
 8017324:	bf5e      	ittt	pl
 8017326:	682b      	ldrpl	r3, [r5, #0]
 8017328:	781b      	ldrbpl	r3, [r3, #0]
 801732a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801732e:	682a      	ldr	r2, [r5, #0]
 8017330:	686b      	ldr	r3, [r5, #4]
 8017332:	3201      	adds	r2, #1
 8017334:	602a      	str	r2, [r5, #0]
 8017336:	68a2      	ldr	r2, [r4, #8]
 8017338:	3b01      	subs	r3, #1
 801733a:	3a01      	subs	r2, #1
 801733c:	606b      	str	r3, [r5, #4]
 801733e:	3701      	adds	r7, #1
 8017340:	60a2      	str	r2, [r4, #8]
 8017342:	b142      	cbz	r2, 8017356 <_scanf_chars+0x8e>
 8017344:	2b00      	cmp	r3, #0
 8017346:	dcd7      	bgt.n	80172f8 <_scanf_chars+0x30>
 8017348:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801734c:	4629      	mov	r1, r5
 801734e:	4640      	mov	r0, r8
 8017350:	4798      	blx	r3
 8017352:	2800      	cmp	r0, #0
 8017354:	d0d0      	beq.n	80172f8 <_scanf_chars+0x30>
 8017356:	6823      	ldr	r3, [r4, #0]
 8017358:	f013 0310 	ands.w	r3, r3, #16
 801735c:	d105      	bne.n	801736a <_scanf_chars+0xa2>
 801735e:	68e2      	ldr	r2, [r4, #12]
 8017360:	3201      	adds	r2, #1
 8017362:	60e2      	str	r2, [r4, #12]
 8017364:	69a2      	ldr	r2, [r4, #24]
 8017366:	b102      	cbz	r2, 801736a <_scanf_chars+0xa2>
 8017368:	7033      	strb	r3, [r6, #0]
 801736a:	6923      	ldr	r3, [r4, #16]
 801736c:	443b      	add	r3, r7
 801736e:	6123      	str	r3, [r4, #16]
 8017370:	2000      	movs	r0, #0
 8017372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017376:	bf00      	nop
 8017378:	0801a4eb 	.word	0x0801a4eb

0801737c <_scanf_i>:
 801737c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017380:	4698      	mov	r8, r3
 8017382:	4b76      	ldr	r3, [pc, #472]	; (801755c <_scanf_i+0x1e0>)
 8017384:	460c      	mov	r4, r1
 8017386:	4682      	mov	sl, r0
 8017388:	4616      	mov	r6, r2
 801738a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801738e:	b087      	sub	sp, #28
 8017390:	ab03      	add	r3, sp, #12
 8017392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017396:	4b72      	ldr	r3, [pc, #456]	; (8017560 <_scanf_i+0x1e4>)
 8017398:	69a1      	ldr	r1, [r4, #24]
 801739a:	4a72      	ldr	r2, [pc, #456]	; (8017564 <_scanf_i+0x1e8>)
 801739c:	2903      	cmp	r1, #3
 801739e:	bf18      	it	ne
 80173a0:	461a      	movne	r2, r3
 80173a2:	68a3      	ldr	r3, [r4, #8]
 80173a4:	9201      	str	r2, [sp, #4]
 80173a6:	1e5a      	subs	r2, r3, #1
 80173a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80173ac:	bf88      	it	hi
 80173ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80173b2:	4627      	mov	r7, r4
 80173b4:	bf82      	ittt	hi
 80173b6:	eb03 0905 	addhi.w	r9, r3, r5
 80173ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80173be:	60a3      	strhi	r3, [r4, #8]
 80173c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80173c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80173c8:	bf98      	it	ls
 80173ca:	f04f 0900 	movls.w	r9, #0
 80173ce:	6023      	str	r3, [r4, #0]
 80173d0:	463d      	mov	r5, r7
 80173d2:	f04f 0b00 	mov.w	fp, #0
 80173d6:	6831      	ldr	r1, [r6, #0]
 80173d8:	ab03      	add	r3, sp, #12
 80173da:	7809      	ldrb	r1, [r1, #0]
 80173dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80173e0:	2202      	movs	r2, #2
 80173e2:	f7e8 ff15 	bl	8000210 <memchr>
 80173e6:	b328      	cbz	r0, 8017434 <_scanf_i+0xb8>
 80173e8:	f1bb 0f01 	cmp.w	fp, #1
 80173ec:	d159      	bne.n	80174a2 <_scanf_i+0x126>
 80173ee:	6862      	ldr	r2, [r4, #4]
 80173f0:	b92a      	cbnz	r2, 80173fe <_scanf_i+0x82>
 80173f2:	6822      	ldr	r2, [r4, #0]
 80173f4:	2308      	movs	r3, #8
 80173f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80173fa:	6063      	str	r3, [r4, #4]
 80173fc:	6022      	str	r2, [r4, #0]
 80173fe:	6822      	ldr	r2, [r4, #0]
 8017400:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017404:	6022      	str	r2, [r4, #0]
 8017406:	68a2      	ldr	r2, [r4, #8]
 8017408:	1e51      	subs	r1, r2, #1
 801740a:	60a1      	str	r1, [r4, #8]
 801740c:	b192      	cbz	r2, 8017434 <_scanf_i+0xb8>
 801740e:	6832      	ldr	r2, [r6, #0]
 8017410:	1c51      	adds	r1, r2, #1
 8017412:	6031      	str	r1, [r6, #0]
 8017414:	7812      	ldrb	r2, [r2, #0]
 8017416:	f805 2b01 	strb.w	r2, [r5], #1
 801741a:	6872      	ldr	r2, [r6, #4]
 801741c:	3a01      	subs	r2, #1
 801741e:	2a00      	cmp	r2, #0
 8017420:	6072      	str	r2, [r6, #4]
 8017422:	dc07      	bgt.n	8017434 <_scanf_i+0xb8>
 8017424:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017428:	4631      	mov	r1, r6
 801742a:	4650      	mov	r0, sl
 801742c:	4790      	blx	r2
 801742e:	2800      	cmp	r0, #0
 8017430:	f040 8085 	bne.w	801753e <_scanf_i+0x1c2>
 8017434:	f10b 0b01 	add.w	fp, fp, #1
 8017438:	f1bb 0f03 	cmp.w	fp, #3
 801743c:	d1cb      	bne.n	80173d6 <_scanf_i+0x5a>
 801743e:	6863      	ldr	r3, [r4, #4]
 8017440:	b90b      	cbnz	r3, 8017446 <_scanf_i+0xca>
 8017442:	230a      	movs	r3, #10
 8017444:	6063      	str	r3, [r4, #4]
 8017446:	6863      	ldr	r3, [r4, #4]
 8017448:	4947      	ldr	r1, [pc, #284]	; (8017568 <_scanf_i+0x1ec>)
 801744a:	6960      	ldr	r0, [r4, #20]
 801744c:	1ac9      	subs	r1, r1, r3
 801744e:	f000 f89f 	bl	8017590 <__sccl>
 8017452:	f04f 0b00 	mov.w	fp, #0
 8017456:	68a3      	ldr	r3, [r4, #8]
 8017458:	6822      	ldr	r2, [r4, #0]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d03d      	beq.n	80174da <_scanf_i+0x15e>
 801745e:	6831      	ldr	r1, [r6, #0]
 8017460:	6960      	ldr	r0, [r4, #20]
 8017462:	f891 c000 	ldrb.w	ip, [r1]
 8017466:	f810 000c 	ldrb.w	r0, [r0, ip]
 801746a:	2800      	cmp	r0, #0
 801746c:	d035      	beq.n	80174da <_scanf_i+0x15e>
 801746e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017472:	d124      	bne.n	80174be <_scanf_i+0x142>
 8017474:	0510      	lsls	r0, r2, #20
 8017476:	d522      	bpl.n	80174be <_scanf_i+0x142>
 8017478:	f10b 0b01 	add.w	fp, fp, #1
 801747c:	f1b9 0f00 	cmp.w	r9, #0
 8017480:	d003      	beq.n	801748a <_scanf_i+0x10e>
 8017482:	3301      	adds	r3, #1
 8017484:	f109 39ff 	add.w	r9, r9, #4294967295
 8017488:	60a3      	str	r3, [r4, #8]
 801748a:	6873      	ldr	r3, [r6, #4]
 801748c:	3b01      	subs	r3, #1
 801748e:	2b00      	cmp	r3, #0
 8017490:	6073      	str	r3, [r6, #4]
 8017492:	dd1b      	ble.n	80174cc <_scanf_i+0x150>
 8017494:	6833      	ldr	r3, [r6, #0]
 8017496:	3301      	adds	r3, #1
 8017498:	6033      	str	r3, [r6, #0]
 801749a:	68a3      	ldr	r3, [r4, #8]
 801749c:	3b01      	subs	r3, #1
 801749e:	60a3      	str	r3, [r4, #8]
 80174a0:	e7d9      	b.n	8017456 <_scanf_i+0xda>
 80174a2:	f1bb 0f02 	cmp.w	fp, #2
 80174a6:	d1ae      	bne.n	8017406 <_scanf_i+0x8a>
 80174a8:	6822      	ldr	r2, [r4, #0]
 80174aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80174ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80174b2:	d1bf      	bne.n	8017434 <_scanf_i+0xb8>
 80174b4:	2310      	movs	r3, #16
 80174b6:	6063      	str	r3, [r4, #4]
 80174b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80174bc:	e7a2      	b.n	8017404 <_scanf_i+0x88>
 80174be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80174c2:	6022      	str	r2, [r4, #0]
 80174c4:	780b      	ldrb	r3, [r1, #0]
 80174c6:	f805 3b01 	strb.w	r3, [r5], #1
 80174ca:	e7de      	b.n	801748a <_scanf_i+0x10e>
 80174cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80174d0:	4631      	mov	r1, r6
 80174d2:	4650      	mov	r0, sl
 80174d4:	4798      	blx	r3
 80174d6:	2800      	cmp	r0, #0
 80174d8:	d0df      	beq.n	801749a <_scanf_i+0x11e>
 80174da:	6823      	ldr	r3, [r4, #0]
 80174dc:	05db      	lsls	r3, r3, #23
 80174de:	d50d      	bpl.n	80174fc <_scanf_i+0x180>
 80174e0:	42bd      	cmp	r5, r7
 80174e2:	d909      	bls.n	80174f8 <_scanf_i+0x17c>
 80174e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80174e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80174ec:	4632      	mov	r2, r6
 80174ee:	4650      	mov	r0, sl
 80174f0:	4798      	blx	r3
 80174f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80174f6:	464d      	mov	r5, r9
 80174f8:	42bd      	cmp	r5, r7
 80174fa:	d02d      	beq.n	8017558 <_scanf_i+0x1dc>
 80174fc:	6822      	ldr	r2, [r4, #0]
 80174fe:	f012 0210 	ands.w	r2, r2, #16
 8017502:	d113      	bne.n	801752c <_scanf_i+0x1b0>
 8017504:	702a      	strb	r2, [r5, #0]
 8017506:	6863      	ldr	r3, [r4, #4]
 8017508:	9e01      	ldr	r6, [sp, #4]
 801750a:	4639      	mov	r1, r7
 801750c:	4650      	mov	r0, sl
 801750e:	47b0      	blx	r6
 8017510:	6821      	ldr	r1, [r4, #0]
 8017512:	f8d8 3000 	ldr.w	r3, [r8]
 8017516:	f011 0f20 	tst.w	r1, #32
 801751a:	d013      	beq.n	8017544 <_scanf_i+0x1c8>
 801751c:	1d1a      	adds	r2, r3, #4
 801751e:	f8c8 2000 	str.w	r2, [r8]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	6018      	str	r0, [r3, #0]
 8017526:	68e3      	ldr	r3, [r4, #12]
 8017528:	3301      	adds	r3, #1
 801752a:	60e3      	str	r3, [r4, #12]
 801752c:	1bed      	subs	r5, r5, r7
 801752e:	44ab      	add	fp, r5
 8017530:	6925      	ldr	r5, [r4, #16]
 8017532:	445d      	add	r5, fp
 8017534:	6125      	str	r5, [r4, #16]
 8017536:	2000      	movs	r0, #0
 8017538:	b007      	add	sp, #28
 801753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801753e:	f04f 0b00 	mov.w	fp, #0
 8017542:	e7ca      	b.n	80174da <_scanf_i+0x15e>
 8017544:	1d1a      	adds	r2, r3, #4
 8017546:	f8c8 2000 	str.w	r2, [r8]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	f011 0f01 	tst.w	r1, #1
 8017550:	bf14      	ite	ne
 8017552:	8018      	strhne	r0, [r3, #0]
 8017554:	6018      	streq	r0, [r3, #0]
 8017556:	e7e6      	b.n	8017526 <_scanf_i+0x1aa>
 8017558:	2001      	movs	r0, #1
 801755a:	e7ed      	b.n	8017538 <_scanf_i+0x1bc>
 801755c:	08019e74 	.word	0x08019e74
 8017560:	080177ed 	.word	0x080177ed
 8017564:	08017705 	.word	0x08017705
 8017568:	0801a7fe 	.word	0x0801a7fe

0801756c <_read_r>:
 801756c:	b538      	push	{r3, r4, r5, lr}
 801756e:	4d07      	ldr	r5, [pc, #28]	; (801758c <_read_r+0x20>)
 8017570:	4604      	mov	r4, r0
 8017572:	4608      	mov	r0, r1
 8017574:	4611      	mov	r1, r2
 8017576:	2200      	movs	r2, #0
 8017578:	602a      	str	r2, [r5, #0]
 801757a:	461a      	mov	r2, r3
 801757c:	f7f4 fb02 	bl	800bb84 <_read>
 8017580:	1c43      	adds	r3, r0, #1
 8017582:	d102      	bne.n	801758a <_read_r+0x1e>
 8017584:	682b      	ldr	r3, [r5, #0]
 8017586:	b103      	cbz	r3, 801758a <_read_r+0x1e>
 8017588:	6023      	str	r3, [r4, #0]
 801758a:	bd38      	pop	{r3, r4, r5, pc}
 801758c:	20006d48 	.word	0x20006d48

08017590 <__sccl>:
 8017590:	b570      	push	{r4, r5, r6, lr}
 8017592:	780b      	ldrb	r3, [r1, #0]
 8017594:	4604      	mov	r4, r0
 8017596:	2b5e      	cmp	r3, #94	; 0x5e
 8017598:	bf0b      	itete	eq
 801759a:	784b      	ldrbeq	r3, [r1, #1]
 801759c:	1c48      	addne	r0, r1, #1
 801759e:	1c88      	addeq	r0, r1, #2
 80175a0:	2200      	movne	r2, #0
 80175a2:	bf08      	it	eq
 80175a4:	2201      	moveq	r2, #1
 80175a6:	1e61      	subs	r1, r4, #1
 80175a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80175ac:	f801 2f01 	strb.w	r2, [r1, #1]!
 80175b0:	42a9      	cmp	r1, r5
 80175b2:	d1fb      	bne.n	80175ac <__sccl+0x1c>
 80175b4:	b90b      	cbnz	r3, 80175ba <__sccl+0x2a>
 80175b6:	3801      	subs	r0, #1
 80175b8:	bd70      	pop	{r4, r5, r6, pc}
 80175ba:	f082 0201 	eor.w	r2, r2, #1
 80175be:	54e2      	strb	r2, [r4, r3]
 80175c0:	4605      	mov	r5, r0
 80175c2:	4628      	mov	r0, r5
 80175c4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80175c8:	292d      	cmp	r1, #45	; 0x2d
 80175ca:	d006      	beq.n	80175da <__sccl+0x4a>
 80175cc:	295d      	cmp	r1, #93	; 0x5d
 80175ce:	d0f3      	beq.n	80175b8 <__sccl+0x28>
 80175d0:	b909      	cbnz	r1, 80175d6 <__sccl+0x46>
 80175d2:	4628      	mov	r0, r5
 80175d4:	e7f0      	b.n	80175b8 <__sccl+0x28>
 80175d6:	460b      	mov	r3, r1
 80175d8:	e7f1      	b.n	80175be <__sccl+0x2e>
 80175da:	786e      	ldrb	r6, [r5, #1]
 80175dc:	2e5d      	cmp	r6, #93	; 0x5d
 80175de:	d0fa      	beq.n	80175d6 <__sccl+0x46>
 80175e0:	42b3      	cmp	r3, r6
 80175e2:	dcf8      	bgt.n	80175d6 <__sccl+0x46>
 80175e4:	3502      	adds	r5, #2
 80175e6:	4619      	mov	r1, r3
 80175e8:	3101      	adds	r1, #1
 80175ea:	428e      	cmp	r6, r1
 80175ec:	5462      	strb	r2, [r4, r1]
 80175ee:	dcfb      	bgt.n	80175e8 <__sccl+0x58>
 80175f0:	1af1      	subs	r1, r6, r3
 80175f2:	3901      	subs	r1, #1
 80175f4:	1c58      	adds	r0, r3, #1
 80175f6:	42b3      	cmp	r3, r6
 80175f8:	bfa8      	it	ge
 80175fa:	2100      	movge	r1, #0
 80175fc:	1843      	adds	r3, r0, r1
 80175fe:	e7e0      	b.n	80175c2 <__sccl+0x32>

08017600 <_strtol_l.constprop.0>:
 8017600:	2b01      	cmp	r3, #1
 8017602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017606:	d001      	beq.n	801760c <_strtol_l.constprop.0+0xc>
 8017608:	2b24      	cmp	r3, #36	; 0x24
 801760a:	d906      	bls.n	801761a <_strtol_l.constprop.0+0x1a>
 801760c:	f7fd fa8a 	bl	8014b24 <__errno>
 8017610:	2316      	movs	r3, #22
 8017612:	6003      	str	r3, [r0, #0]
 8017614:	2000      	movs	r0, #0
 8017616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801761a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017700 <_strtol_l.constprop.0+0x100>
 801761e:	460d      	mov	r5, r1
 8017620:	462e      	mov	r6, r5
 8017622:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017626:	f814 700c 	ldrb.w	r7, [r4, ip]
 801762a:	f017 0708 	ands.w	r7, r7, #8
 801762e:	d1f7      	bne.n	8017620 <_strtol_l.constprop.0+0x20>
 8017630:	2c2d      	cmp	r4, #45	; 0x2d
 8017632:	d132      	bne.n	801769a <_strtol_l.constprop.0+0x9a>
 8017634:	782c      	ldrb	r4, [r5, #0]
 8017636:	2701      	movs	r7, #1
 8017638:	1cb5      	adds	r5, r6, #2
 801763a:	2b00      	cmp	r3, #0
 801763c:	d05b      	beq.n	80176f6 <_strtol_l.constprop.0+0xf6>
 801763e:	2b10      	cmp	r3, #16
 8017640:	d109      	bne.n	8017656 <_strtol_l.constprop.0+0x56>
 8017642:	2c30      	cmp	r4, #48	; 0x30
 8017644:	d107      	bne.n	8017656 <_strtol_l.constprop.0+0x56>
 8017646:	782c      	ldrb	r4, [r5, #0]
 8017648:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801764c:	2c58      	cmp	r4, #88	; 0x58
 801764e:	d14d      	bne.n	80176ec <_strtol_l.constprop.0+0xec>
 8017650:	786c      	ldrb	r4, [r5, #1]
 8017652:	2310      	movs	r3, #16
 8017654:	3502      	adds	r5, #2
 8017656:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801765a:	f108 38ff 	add.w	r8, r8, #4294967295
 801765e:	f04f 0c00 	mov.w	ip, #0
 8017662:	fbb8 f9f3 	udiv	r9, r8, r3
 8017666:	4666      	mov	r6, ip
 8017668:	fb03 8a19 	mls	sl, r3, r9, r8
 801766c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017670:	f1be 0f09 	cmp.w	lr, #9
 8017674:	d816      	bhi.n	80176a4 <_strtol_l.constprop.0+0xa4>
 8017676:	4674      	mov	r4, lr
 8017678:	42a3      	cmp	r3, r4
 801767a:	dd24      	ble.n	80176c6 <_strtol_l.constprop.0+0xc6>
 801767c:	f1bc 0f00 	cmp.w	ip, #0
 8017680:	db1e      	blt.n	80176c0 <_strtol_l.constprop.0+0xc0>
 8017682:	45b1      	cmp	r9, r6
 8017684:	d31c      	bcc.n	80176c0 <_strtol_l.constprop.0+0xc0>
 8017686:	d101      	bne.n	801768c <_strtol_l.constprop.0+0x8c>
 8017688:	45a2      	cmp	sl, r4
 801768a:	db19      	blt.n	80176c0 <_strtol_l.constprop.0+0xc0>
 801768c:	fb06 4603 	mla	r6, r6, r3, r4
 8017690:	f04f 0c01 	mov.w	ip, #1
 8017694:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017698:	e7e8      	b.n	801766c <_strtol_l.constprop.0+0x6c>
 801769a:	2c2b      	cmp	r4, #43	; 0x2b
 801769c:	bf04      	itt	eq
 801769e:	782c      	ldrbeq	r4, [r5, #0]
 80176a0:	1cb5      	addeq	r5, r6, #2
 80176a2:	e7ca      	b.n	801763a <_strtol_l.constprop.0+0x3a>
 80176a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80176a8:	f1be 0f19 	cmp.w	lr, #25
 80176ac:	d801      	bhi.n	80176b2 <_strtol_l.constprop.0+0xb2>
 80176ae:	3c37      	subs	r4, #55	; 0x37
 80176b0:	e7e2      	b.n	8017678 <_strtol_l.constprop.0+0x78>
 80176b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80176b6:	f1be 0f19 	cmp.w	lr, #25
 80176ba:	d804      	bhi.n	80176c6 <_strtol_l.constprop.0+0xc6>
 80176bc:	3c57      	subs	r4, #87	; 0x57
 80176be:	e7db      	b.n	8017678 <_strtol_l.constprop.0+0x78>
 80176c0:	f04f 3cff 	mov.w	ip, #4294967295
 80176c4:	e7e6      	b.n	8017694 <_strtol_l.constprop.0+0x94>
 80176c6:	f1bc 0f00 	cmp.w	ip, #0
 80176ca:	da05      	bge.n	80176d8 <_strtol_l.constprop.0+0xd8>
 80176cc:	2322      	movs	r3, #34	; 0x22
 80176ce:	6003      	str	r3, [r0, #0]
 80176d0:	4646      	mov	r6, r8
 80176d2:	b942      	cbnz	r2, 80176e6 <_strtol_l.constprop.0+0xe6>
 80176d4:	4630      	mov	r0, r6
 80176d6:	e79e      	b.n	8017616 <_strtol_l.constprop.0+0x16>
 80176d8:	b107      	cbz	r7, 80176dc <_strtol_l.constprop.0+0xdc>
 80176da:	4276      	negs	r6, r6
 80176dc:	2a00      	cmp	r2, #0
 80176de:	d0f9      	beq.n	80176d4 <_strtol_l.constprop.0+0xd4>
 80176e0:	f1bc 0f00 	cmp.w	ip, #0
 80176e4:	d000      	beq.n	80176e8 <_strtol_l.constprop.0+0xe8>
 80176e6:	1e69      	subs	r1, r5, #1
 80176e8:	6011      	str	r1, [r2, #0]
 80176ea:	e7f3      	b.n	80176d4 <_strtol_l.constprop.0+0xd4>
 80176ec:	2430      	movs	r4, #48	; 0x30
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d1b1      	bne.n	8017656 <_strtol_l.constprop.0+0x56>
 80176f2:	2308      	movs	r3, #8
 80176f4:	e7af      	b.n	8017656 <_strtol_l.constprop.0+0x56>
 80176f6:	2c30      	cmp	r4, #48	; 0x30
 80176f8:	d0a5      	beq.n	8017646 <_strtol_l.constprop.0+0x46>
 80176fa:	230a      	movs	r3, #10
 80176fc:	e7ab      	b.n	8017656 <_strtol_l.constprop.0+0x56>
 80176fe:	bf00      	nop
 8017700:	0801a4eb 	.word	0x0801a4eb

08017704 <_strtol_r>:
 8017704:	f7ff bf7c 	b.w	8017600 <_strtol_l.constprop.0>

08017708 <_strtoul_l.constprop.0>:
 8017708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801770c:	4f36      	ldr	r7, [pc, #216]	; (80177e8 <_strtoul_l.constprop.0+0xe0>)
 801770e:	4686      	mov	lr, r0
 8017710:	460d      	mov	r5, r1
 8017712:	4628      	mov	r0, r5
 8017714:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017718:	5de6      	ldrb	r6, [r4, r7]
 801771a:	f016 0608 	ands.w	r6, r6, #8
 801771e:	d1f8      	bne.n	8017712 <_strtoul_l.constprop.0+0xa>
 8017720:	2c2d      	cmp	r4, #45	; 0x2d
 8017722:	d12f      	bne.n	8017784 <_strtoul_l.constprop.0+0x7c>
 8017724:	782c      	ldrb	r4, [r5, #0]
 8017726:	2601      	movs	r6, #1
 8017728:	1c85      	adds	r5, r0, #2
 801772a:	2b00      	cmp	r3, #0
 801772c:	d057      	beq.n	80177de <_strtoul_l.constprop.0+0xd6>
 801772e:	2b10      	cmp	r3, #16
 8017730:	d109      	bne.n	8017746 <_strtoul_l.constprop.0+0x3e>
 8017732:	2c30      	cmp	r4, #48	; 0x30
 8017734:	d107      	bne.n	8017746 <_strtoul_l.constprop.0+0x3e>
 8017736:	7828      	ldrb	r0, [r5, #0]
 8017738:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801773c:	2858      	cmp	r0, #88	; 0x58
 801773e:	d149      	bne.n	80177d4 <_strtoul_l.constprop.0+0xcc>
 8017740:	786c      	ldrb	r4, [r5, #1]
 8017742:	2310      	movs	r3, #16
 8017744:	3502      	adds	r5, #2
 8017746:	f04f 38ff 	mov.w	r8, #4294967295
 801774a:	2700      	movs	r7, #0
 801774c:	fbb8 f8f3 	udiv	r8, r8, r3
 8017750:	fb03 f908 	mul.w	r9, r3, r8
 8017754:	ea6f 0909 	mvn.w	r9, r9
 8017758:	4638      	mov	r0, r7
 801775a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801775e:	f1bc 0f09 	cmp.w	ip, #9
 8017762:	d814      	bhi.n	801778e <_strtoul_l.constprop.0+0x86>
 8017764:	4664      	mov	r4, ip
 8017766:	42a3      	cmp	r3, r4
 8017768:	dd22      	ble.n	80177b0 <_strtoul_l.constprop.0+0xa8>
 801776a:	2f00      	cmp	r7, #0
 801776c:	db1d      	blt.n	80177aa <_strtoul_l.constprop.0+0xa2>
 801776e:	4580      	cmp	r8, r0
 8017770:	d31b      	bcc.n	80177aa <_strtoul_l.constprop.0+0xa2>
 8017772:	d101      	bne.n	8017778 <_strtoul_l.constprop.0+0x70>
 8017774:	45a1      	cmp	r9, r4
 8017776:	db18      	blt.n	80177aa <_strtoul_l.constprop.0+0xa2>
 8017778:	fb00 4003 	mla	r0, r0, r3, r4
 801777c:	2701      	movs	r7, #1
 801777e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017782:	e7ea      	b.n	801775a <_strtoul_l.constprop.0+0x52>
 8017784:	2c2b      	cmp	r4, #43	; 0x2b
 8017786:	bf04      	itt	eq
 8017788:	782c      	ldrbeq	r4, [r5, #0]
 801778a:	1c85      	addeq	r5, r0, #2
 801778c:	e7cd      	b.n	801772a <_strtoul_l.constprop.0+0x22>
 801778e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017792:	f1bc 0f19 	cmp.w	ip, #25
 8017796:	d801      	bhi.n	801779c <_strtoul_l.constprop.0+0x94>
 8017798:	3c37      	subs	r4, #55	; 0x37
 801779a:	e7e4      	b.n	8017766 <_strtoul_l.constprop.0+0x5e>
 801779c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80177a0:	f1bc 0f19 	cmp.w	ip, #25
 80177a4:	d804      	bhi.n	80177b0 <_strtoul_l.constprop.0+0xa8>
 80177a6:	3c57      	subs	r4, #87	; 0x57
 80177a8:	e7dd      	b.n	8017766 <_strtoul_l.constprop.0+0x5e>
 80177aa:	f04f 37ff 	mov.w	r7, #4294967295
 80177ae:	e7e6      	b.n	801777e <_strtoul_l.constprop.0+0x76>
 80177b0:	2f00      	cmp	r7, #0
 80177b2:	da07      	bge.n	80177c4 <_strtoul_l.constprop.0+0xbc>
 80177b4:	2322      	movs	r3, #34	; 0x22
 80177b6:	f8ce 3000 	str.w	r3, [lr]
 80177ba:	f04f 30ff 	mov.w	r0, #4294967295
 80177be:	b932      	cbnz	r2, 80177ce <_strtoul_l.constprop.0+0xc6>
 80177c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177c4:	b106      	cbz	r6, 80177c8 <_strtoul_l.constprop.0+0xc0>
 80177c6:	4240      	negs	r0, r0
 80177c8:	2a00      	cmp	r2, #0
 80177ca:	d0f9      	beq.n	80177c0 <_strtoul_l.constprop.0+0xb8>
 80177cc:	b107      	cbz	r7, 80177d0 <_strtoul_l.constprop.0+0xc8>
 80177ce:	1e69      	subs	r1, r5, #1
 80177d0:	6011      	str	r1, [r2, #0]
 80177d2:	e7f5      	b.n	80177c0 <_strtoul_l.constprop.0+0xb8>
 80177d4:	2430      	movs	r4, #48	; 0x30
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d1b5      	bne.n	8017746 <_strtoul_l.constprop.0+0x3e>
 80177da:	2308      	movs	r3, #8
 80177dc:	e7b3      	b.n	8017746 <_strtoul_l.constprop.0+0x3e>
 80177de:	2c30      	cmp	r4, #48	; 0x30
 80177e0:	d0a9      	beq.n	8017736 <_strtoul_l.constprop.0+0x2e>
 80177e2:	230a      	movs	r3, #10
 80177e4:	e7af      	b.n	8017746 <_strtoul_l.constprop.0+0x3e>
 80177e6:	bf00      	nop
 80177e8:	0801a4eb 	.word	0x0801a4eb

080177ec <_strtoul_r>:
 80177ec:	f7ff bf8c 	b.w	8017708 <_strtoul_l.constprop.0>

080177f0 <__submore>:
 80177f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177f4:	460c      	mov	r4, r1
 80177f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80177f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177fc:	4299      	cmp	r1, r3
 80177fe:	d11d      	bne.n	801783c <__submore+0x4c>
 8017800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017804:	f7fd fa52 	bl	8014cac <_malloc_r>
 8017808:	b918      	cbnz	r0, 8017812 <__submore+0x22>
 801780a:	f04f 30ff 	mov.w	r0, #4294967295
 801780e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017816:	63a3      	str	r3, [r4, #56]	; 0x38
 8017818:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801781c:	6360      	str	r0, [r4, #52]	; 0x34
 801781e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017822:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017826:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801782a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801782e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017832:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017836:	6020      	str	r0, [r4, #0]
 8017838:	2000      	movs	r0, #0
 801783a:	e7e8      	b.n	801780e <__submore+0x1e>
 801783c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801783e:	0077      	lsls	r7, r6, #1
 8017840:	463a      	mov	r2, r7
 8017842:	f000 fa25 	bl	8017c90 <_realloc_r>
 8017846:	4605      	mov	r5, r0
 8017848:	2800      	cmp	r0, #0
 801784a:	d0de      	beq.n	801780a <__submore+0x1a>
 801784c:	eb00 0806 	add.w	r8, r0, r6
 8017850:	4601      	mov	r1, r0
 8017852:	4632      	mov	r2, r6
 8017854:	4640      	mov	r0, r8
 8017856:	f7fd f9a7 	bl	8014ba8 <memcpy>
 801785a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801785e:	f8c4 8000 	str.w	r8, [r4]
 8017862:	e7e9      	b.n	8017838 <__submore+0x48>

08017864 <__assert_func>:
 8017864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017866:	4614      	mov	r4, r2
 8017868:	461a      	mov	r2, r3
 801786a:	4b09      	ldr	r3, [pc, #36]	; (8017890 <__assert_func+0x2c>)
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4605      	mov	r5, r0
 8017870:	68d8      	ldr	r0, [r3, #12]
 8017872:	b14c      	cbz	r4, 8017888 <__assert_func+0x24>
 8017874:	4b07      	ldr	r3, [pc, #28]	; (8017894 <__assert_func+0x30>)
 8017876:	9100      	str	r1, [sp, #0]
 8017878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801787c:	4906      	ldr	r1, [pc, #24]	; (8017898 <__assert_func+0x34>)
 801787e:	462b      	mov	r3, r5
 8017880:	f000 f9a6 	bl	8017bd0 <fiprintf>
 8017884:	f000 fc5a 	bl	801813c <abort>
 8017888:	4b04      	ldr	r3, [pc, #16]	; (801789c <__assert_func+0x38>)
 801788a:	461c      	mov	r4, r3
 801788c:	e7f3      	b.n	8017876 <__assert_func+0x12>
 801788e:	bf00      	nop
 8017890:	20000320 	.word	0x20000320
 8017894:	0801a800 	.word	0x0801a800
 8017898:	0801a80d 	.word	0x0801a80d
 801789c:	0801a83b 	.word	0x0801a83b

080178a0 <__sflush_r>:
 80178a0:	898a      	ldrh	r2, [r1, #12]
 80178a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178a6:	4605      	mov	r5, r0
 80178a8:	0710      	lsls	r0, r2, #28
 80178aa:	460c      	mov	r4, r1
 80178ac:	d458      	bmi.n	8017960 <__sflush_r+0xc0>
 80178ae:	684b      	ldr	r3, [r1, #4]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	dc05      	bgt.n	80178c0 <__sflush_r+0x20>
 80178b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	dc02      	bgt.n	80178c0 <__sflush_r+0x20>
 80178ba:	2000      	movs	r0, #0
 80178bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80178c2:	2e00      	cmp	r6, #0
 80178c4:	d0f9      	beq.n	80178ba <__sflush_r+0x1a>
 80178c6:	2300      	movs	r3, #0
 80178c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80178cc:	682f      	ldr	r7, [r5, #0]
 80178ce:	602b      	str	r3, [r5, #0]
 80178d0:	d032      	beq.n	8017938 <__sflush_r+0x98>
 80178d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80178d4:	89a3      	ldrh	r3, [r4, #12]
 80178d6:	075a      	lsls	r2, r3, #29
 80178d8:	d505      	bpl.n	80178e6 <__sflush_r+0x46>
 80178da:	6863      	ldr	r3, [r4, #4]
 80178dc:	1ac0      	subs	r0, r0, r3
 80178de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80178e0:	b10b      	cbz	r3, 80178e6 <__sflush_r+0x46>
 80178e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80178e4:	1ac0      	subs	r0, r0, r3
 80178e6:	2300      	movs	r3, #0
 80178e8:	4602      	mov	r2, r0
 80178ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80178ec:	6a21      	ldr	r1, [r4, #32]
 80178ee:	4628      	mov	r0, r5
 80178f0:	47b0      	blx	r6
 80178f2:	1c43      	adds	r3, r0, #1
 80178f4:	89a3      	ldrh	r3, [r4, #12]
 80178f6:	d106      	bne.n	8017906 <__sflush_r+0x66>
 80178f8:	6829      	ldr	r1, [r5, #0]
 80178fa:	291d      	cmp	r1, #29
 80178fc:	d82c      	bhi.n	8017958 <__sflush_r+0xb8>
 80178fe:	4a2a      	ldr	r2, [pc, #168]	; (80179a8 <__sflush_r+0x108>)
 8017900:	40ca      	lsrs	r2, r1
 8017902:	07d6      	lsls	r6, r2, #31
 8017904:	d528      	bpl.n	8017958 <__sflush_r+0xb8>
 8017906:	2200      	movs	r2, #0
 8017908:	6062      	str	r2, [r4, #4]
 801790a:	04d9      	lsls	r1, r3, #19
 801790c:	6922      	ldr	r2, [r4, #16]
 801790e:	6022      	str	r2, [r4, #0]
 8017910:	d504      	bpl.n	801791c <__sflush_r+0x7c>
 8017912:	1c42      	adds	r2, r0, #1
 8017914:	d101      	bne.n	801791a <__sflush_r+0x7a>
 8017916:	682b      	ldr	r3, [r5, #0]
 8017918:	b903      	cbnz	r3, 801791c <__sflush_r+0x7c>
 801791a:	6560      	str	r0, [r4, #84]	; 0x54
 801791c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801791e:	602f      	str	r7, [r5, #0]
 8017920:	2900      	cmp	r1, #0
 8017922:	d0ca      	beq.n	80178ba <__sflush_r+0x1a>
 8017924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017928:	4299      	cmp	r1, r3
 801792a:	d002      	beq.n	8017932 <__sflush_r+0x92>
 801792c:	4628      	mov	r0, r5
 801792e:	f7fd f951 	bl	8014bd4 <_free_r>
 8017932:	2000      	movs	r0, #0
 8017934:	6360      	str	r0, [r4, #52]	; 0x34
 8017936:	e7c1      	b.n	80178bc <__sflush_r+0x1c>
 8017938:	6a21      	ldr	r1, [r4, #32]
 801793a:	2301      	movs	r3, #1
 801793c:	4628      	mov	r0, r5
 801793e:	47b0      	blx	r6
 8017940:	1c41      	adds	r1, r0, #1
 8017942:	d1c7      	bne.n	80178d4 <__sflush_r+0x34>
 8017944:	682b      	ldr	r3, [r5, #0]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d0c4      	beq.n	80178d4 <__sflush_r+0x34>
 801794a:	2b1d      	cmp	r3, #29
 801794c:	d001      	beq.n	8017952 <__sflush_r+0xb2>
 801794e:	2b16      	cmp	r3, #22
 8017950:	d101      	bne.n	8017956 <__sflush_r+0xb6>
 8017952:	602f      	str	r7, [r5, #0]
 8017954:	e7b1      	b.n	80178ba <__sflush_r+0x1a>
 8017956:	89a3      	ldrh	r3, [r4, #12]
 8017958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801795c:	81a3      	strh	r3, [r4, #12]
 801795e:	e7ad      	b.n	80178bc <__sflush_r+0x1c>
 8017960:	690f      	ldr	r7, [r1, #16]
 8017962:	2f00      	cmp	r7, #0
 8017964:	d0a9      	beq.n	80178ba <__sflush_r+0x1a>
 8017966:	0793      	lsls	r3, r2, #30
 8017968:	680e      	ldr	r6, [r1, #0]
 801796a:	bf08      	it	eq
 801796c:	694b      	ldreq	r3, [r1, #20]
 801796e:	600f      	str	r7, [r1, #0]
 8017970:	bf18      	it	ne
 8017972:	2300      	movne	r3, #0
 8017974:	eba6 0807 	sub.w	r8, r6, r7
 8017978:	608b      	str	r3, [r1, #8]
 801797a:	f1b8 0f00 	cmp.w	r8, #0
 801797e:	dd9c      	ble.n	80178ba <__sflush_r+0x1a>
 8017980:	6a21      	ldr	r1, [r4, #32]
 8017982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017984:	4643      	mov	r3, r8
 8017986:	463a      	mov	r2, r7
 8017988:	4628      	mov	r0, r5
 801798a:	47b0      	blx	r6
 801798c:	2800      	cmp	r0, #0
 801798e:	dc06      	bgt.n	801799e <__sflush_r+0xfe>
 8017990:	89a3      	ldrh	r3, [r4, #12]
 8017992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017996:	81a3      	strh	r3, [r4, #12]
 8017998:	f04f 30ff 	mov.w	r0, #4294967295
 801799c:	e78e      	b.n	80178bc <__sflush_r+0x1c>
 801799e:	4407      	add	r7, r0
 80179a0:	eba8 0800 	sub.w	r8, r8, r0
 80179a4:	e7e9      	b.n	801797a <__sflush_r+0xda>
 80179a6:	bf00      	nop
 80179a8:	20400001 	.word	0x20400001

080179ac <_fflush_r>:
 80179ac:	b538      	push	{r3, r4, r5, lr}
 80179ae:	690b      	ldr	r3, [r1, #16]
 80179b0:	4605      	mov	r5, r0
 80179b2:	460c      	mov	r4, r1
 80179b4:	b913      	cbnz	r3, 80179bc <_fflush_r+0x10>
 80179b6:	2500      	movs	r5, #0
 80179b8:	4628      	mov	r0, r5
 80179ba:	bd38      	pop	{r3, r4, r5, pc}
 80179bc:	b118      	cbz	r0, 80179c6 <_fflush_r+0x1a>
 80179be:	6983      	ldr	r3, [r0, #24]
 80179c0:	b90b      	cbnz	r3, 80179c6 <_fflush_r+0x1a>
 80179c2:	f000 f887 	bl	8017ad4 <__sinit>
 80179c6:	4b14      	ldr	r3, [pc, #80]	; (8017a18 <_fflush_r+0x6c>)
 80179c8:	429c      	cmp	r4, r3
 80179ca:	d11b      	bne.n	8017a04 <_fflush_r+0x58>
 80179cc:	686c      	ldr	r4, [r5, #4]
 80179ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d0ef      	beq.n	80179b6 <_fflush_r+0xa>
 80179d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80179d8:	07d0      	lsls	r0, r2, #31
 80179da:	d404      	bmi.n	80179e6 <_fflush_r+0x3a>
 80179dc:	0599      	lsls	r1, r3, #22
 80179de:	d402      	bmi.n	80179e6 <_fflush_r+0x3a>
 80179e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80179e2:	f000 f927 	bl	8017c34 <__retarget_lock_acquire_recursive>
 80179e6:	4628      	mov	r0, r5
 80179e8:	4621      	mov	r1, r4
 80179ea:	f7ff ff59 	bl	80178a0 <__sflush_r>
 80179ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80179f0:	07da      	lsls	r2, r3, #31
 80179f2:	4605      	mov	r5, r0
 80179f4:	d4e0      	bmi.n	80179b8 <_fflush_r+0xc>
 80179f6:	89a3      	ldrh	r3, [r4, #12]
 80179f8:	059b      	lsls	r3, r3, #22
 80179fa:	d4dd      	bmi.n	80179b8 <_fflush_r+0xc>
 80179fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80179fe:	f000 f91a 	bl	8017c36 <__retarget_lock_release_recursive>
 8017a02:	e7d9      	b.n	80179b8 <_fflush_r+0xc>
 8017a04:	4b05      	ldr	r3, [pc, #20]	; (8017a1c <_fflush_r+0x70>)
 8017a06:	429c      	cmp	r4, r3
 8017a08:	d101      	bne.n	8017a0e <_fflush_r+0x62>
 8017a0a:	68ac      	ldr	r4, [r5, #8]
 8017a0c:	e7df      	b.n	80179ce <_fflush_r+0x22>
 8017a0e:	4b04      	ldr	r3, [pc, #16]	; (8017a20 <_fflush_r+0x74>)
 8017a10:	429c      	cmp	r4, r3
 8017a12:	bf08      	it	eq
 8017a14:	68ec      	ldreq	r4, [r5, #12]
 8017a16:	e7da      	b.n	80179ce <_fflush_r+0x22>
 8017a18:	0801a85c 	.word	0x0801a85c
 8017a1c:	0801a87c 	.word	0x0801a87c
 8017a20:	0801a83c 	.word	0x0801a83c

08017a24 <std>:
 8017a24:	2300      	movs	r3, #0
 8017a26:	b510      	push	{r4, lr}
 8017a28:	4604      	mov	r4, r0
 8017a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8017a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a32:	6083      	str	r3, [r0, #8]
 8017a34:	8181      	strh	r1, [r0, #12]
 8017a36:	6643      	str	r3, [r0, #100]	; 0x64
 8017a38:	81c2      	strh	r2, [r0, #14]
 8017a3a:	6183      	str	r3, [r0, #24]
 8017a3c:	4619      	mov	r1, r3
 8017a3e:	2208      	movs	r2, #8
 8017a40:	305c      	adds	r0, #92	; 0x5c
 8017a42:	f7fd f8bf 	bl	8014bc4 <memset>
 8017a46:	4b05      	ldr	r3, [pc, #20]	; (8017a5c <std+0x38>)
 8017a48:	6263      	str	r3, [r4, #36]	; 0x24
 8017a4a:	4b05      	ldr	r3, [pc, #20]	; (8017a60 <std+0x3c>)
 8017a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017a4e:	4b05      	ldr	r3, [pc, #20]	; (8017a64 <std+0x40>)
 8017a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017a52:	4b05      	ldr	r3, [pc, #20]	; (8017a68 <std+0x44>)
 8017a54:	6224      	str	r4, [r4, #32]
 8017a56:	6323      	str	r3, [r4, #48]	; 0x30
 8017a58:	bd10      	pop	{r4, pc}
 8017a5a:	bf00      	nop
 8017a5c:	080156e1 	.word	0x080156e1
 8017a60:	08015707 	.word	0x08015707
 8017a64:	0801573f 	.word	0x0801573f
 8017a68:	08015763 	.word	0x08015763

08017a6c <_cleanup_r>:
 8017a6c:	4901      	ldr	r1, [pc, #4]	; (8017a74 <_cleanup_r+0x8>)
 8017a6e:	f000 b8c1 	b.w	8017bf4 <_fwalk_reent>
 8017a72:	bf00      	nop
 8017a74:	080179ad 	.word	0x080179ad

08017a78 <__sfmoreglue>:
 8017a78:	b570      	push	{r4, r5, r6, lr}
 8017a7a:	2268      	movs	r2, #104	; 0x68
 8017a7c:	1e4d      	subs	r5, r1, #1
 8017a7e:	4355      	muls	r5, r2
 8017a80:	460e      	mov	r6, r1
 8017a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017a86:	f7fd f911 	bl	8014cac <_malloc_r>
 8017a8a:	4604      	mov	r4, r0
 8017a8c:	b140      	cbz	r0, 8017aa0 <__sfmoreglue+0x28>
 8017a8e:	2100      	movs	r1, #0
 8017a90:	e9c0 1600 	strd	r1, r6, [r0]
 8017a94:	300c      	adds	r0, #12
 8017a96:	60a0      	str	r0, [r4, #8]
 8017a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017a9c:	f7fd f892 	bl	8014bc4 <memset>
 8017aa0:	4620      	mov	r0, r4
 8017aa2:	bd70      	pop	{r4, r5, r6, pc}

08017aa4 <__sfp_lock_acquire>:
 8017aa4:	4801      	ldr	r0, [pc, #4]	; (8017aac <__sfp_lock_acquire+0x8>)
 8017aa6:	f000 b8c5 	b.w	8017c34 <__retarget_lock_acquire_recursive>
 8017aaa:	bf00      	nop
 8017aac:	20006d4d 	.word	0x20006d4d

08017ab0 <__sfp_lock_release>:
 8017ab0:	4801      	ldr	r0, [pc, #4]	; (8017ab8 <__sfp_lock_release+0x8>)
 8017ab2:	f000 b8c0 	b.w	8017c36 <__retarget_lock_release_recursive>
 8017ab6:	bf00      	nop
 8017ab8:	20006d4d 	.word	0x20006d4d

08017abc <__sinit_lock_acquire>:
 8017abc:	4801      	ldr	r0, [pc, #4]	; (8017ac4 <__sinit_lock_acquire+0x8>)
 8017abe:	f000 b8b9 	b.w	8017c34 <__retarget_lock_acquire_recursive>
 8017ac2:	bf00      	nop
 8017ac4:	20006d4e 	.word	0x20006d4e

08017ac8 <__sinit_lock_release>:
 8017ac8:	4801      	ldr	r0, [pc, #4]	; (8017ad0 <__sinit_lock_release+0x8>)
 8017aca:	f000 b8b4 	b.w	8017c36 <__retarget_lock_release_recursive>
 8017ace:	bf00      	nop
 8017ad0:	20006d4e 	.word	0x20006d4e

08017ad4 <__sinit>:
 8017ad4:	b510      	push	{r4, lr}
 8017ad6:	4604      	mov	r4, r0
 8017ad8:	f7ff fff0 	bl	8017abc <__sinit_lock_acquire>
 8017adc:	69a3      	ldr	r3, [r4, #24]
 8017ade:	b11b      	cbz	r3, 8017ae8 <__sinit+0x14>
 8017ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ae4:	f7ff bff0 	b.w	8017ac8 <__sinit_lock_release>
 8017ae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017aec:	6523      	str	r3, [r4, #80]	; 0x50
 8017aee:	4b13      	ldr	r3, [pc, #76]	; (8017b3c <__sinit+0x68>)
 8017af0:	4a13      	ldr	r2, [pc, #76]	; (8017b40 <__sinit+0x6c>)
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	62a2      	str	r2, [r4, #40]	; 0x28
 8017af6:	42a3      	cmp	r3, r4
 8017af8:	bf04      	itt	eq
 8017afa:	2301      	moveq	r3, #1
 8017afc:	61a3      	streq	r3, [r4, #24]
 8017afe:	4620      	mov	r0, r4
 8017b00:	f000 f820 	bl	8017b44 <__sfp>
 8017b04:	6060      	str	r0, [r4, #4]
 8017b06:	4620      	mov	r0, r4
 8017b08:	f000 f81c 	bl	8017b44 <__sfp>
 8017b0c:	60a0      	str	r0, [r4, #8]
 8017b0e:	4620      	mov	r0, r4
 8017b10:	f000 f818 	bl	8017b44 <__sfp>
 8017b14:	2200      	movs	r2, #0
 8017b16:	60e0      	str	r0, [r4, #12]
 8017b18:	2104      	movs	r1, #4
 8017b1a:	6860      	ldr	r0, [r4, #4]
 8017b1c:	f7ff ff82 	bl	8017a24 <std>
 8017b20:	68a0      	ldr	r0, [r4, #8]
 8017b22:	2201      	movs	r2, #1
 8017b24:	2109      	movs	r1, #9
 8017b26:	f7ff ff7d 	bl	8017a24 <std>
 8017b2a:	68e0      	ldr	r0, [r4, #12]
 8017b2c:	2202      	movs	r2, #2
 8017b2e:	2112      	movs	r1, #18
 8017b30:	f7ff ff78 	bl	8017a24 <std>
 8017b34:	2301      	movs	r3, #1
 8017b36:	61a3      	str	r3, [r4, #24]
 8017b38:	e7d2      	b.n	8017ae0 <__sinit+0xc>
 8017b3a:	bf00      	nop
 8017b3c:	0801a4b4 	.word	0x0801a4b4
 8017b40:	08017a6d 	.word	0x08017a6d

08017b44 <__sfp>:
 8017b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b46:	4607      	mov	r7, r0
 8017b48:	f7ff ffac 	bl	8017aa4 <__sfp_lock_acquire>
 8017b4c:	4b1e      	ldr	r3, [pc, #120]	; (8017bc8 <__sfp+0x84>)
 8017b4e:	681e      	ldr	r6, [r3, #0]
 8017b50:	69b3      	ldr	r3, [r6, #24]
 8017b52:	b913      	cbnz	r3, 8017b5a <__sfp+0x16>
 8017b54:	4630      	mov	r0, r6
 8017b56:	f7ff ffbd 	bl	8017ad4 <__sinit>
 8017b5a:	3648      	adds	r6, #72	; 0x48
 8017b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017b60:	3b01      	subs	r3, #1
 8017b62:	d503      	bpl.n	8017b6c <__sfp+0x28>
 8017b64:	6833      	ldr	r3, [r6, #0]
 8017b66:	b30b      	cbz	r3, 8017bac <__sfp+0x68>
 8017b68:	6836      	ldr	r6, [r6, #0]
 8017b6a:	e7f7      	b.n	8017b5c <__sfp+0x18>
 8017b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017b70:	b9d5      	cbnz	r5, 8017ba8 <__sfp+0x64>
 8017b72:	4b16      	ldr	r3, [pc, #88]	; (8017bcc <__sfp+0x88>)
 8017b74:	60e3      	str	r3, [r4, #12]
 8017b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017b7a:	6665      	str	r5, [r4, #100]	; 0x64
 8017b7c:	f000 f859 	bl	8017c32 <__retarget_lock_init_recursive>
 8017b80:	f7ff ff96 	bl	8017ab0 <__sfp_lock_release>
 8017b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017b8c:	6025      	str	r5, [r4, #0]
 8017b8e:	61a5      	str	r5, [r4, #24]
 8017b90:	2208      	movs	r2, #8
 8017b92:	4629      	mov	r1, r5
 8017b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017b98:	f7fd f814 	bl	8014bc4 <memset>
 8017b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ba8:	3468      	adds	r4, #104	; 0x68
 8017baa:	e7d9      	b.n	8017b60 <__sfp+0x1c>
 8017bac:	2104      	movs	r1, #4
 8017bae:	4638      	mov	r0, r7
 8017bb0:	f7ff ff62 	bl	8017a78 <__sfmoreglue>
 8017bb4:	4604      	mov	r4, r0
 8017bb6:	6030      	str	r0, [r6, #0]
 8017bb8:	2800      	cmp	r0, #0
 8017bba:	d1d5      	bne.n	8017b68 <__sfp+0x24>
 8017bbc:	f7ff ff78 	bl	8017ab0 <__sfp_lock_release>
 8017bc0:	230c      	movs	r3, #12
 8017bc2:	603b      	str	r3, [r7, #0]
 8017bc4:	e7ee      	b.n	8017ba4 <__sfp+0x60>
 8017bc6:	bf00      	nop
 8017bc8:	0801a4b4 	.word	0x0801a4b4
 8017bcc:	ffff0001 	.word	0xffff0001

08017bd0 <fiprintf>:
 8017bd0:	b40e      	push	{r1, r2, r3}
 8017bd2:	b503      	push	{r0, r1, lr}
 8017bd4:	4601      	mov	r1, r0
 8017bd6:	ab03      	add	r3, sp, #12
 8017bd8:	4805      	ldr	r0, [pc, #20]	; (8017bf0 <fiprintf+0x20>)
 8017bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bde:	6800      	ldr	r0, [r0, #0]
 8017be0:	9301      	str	r3, [sp, #4]
 8017be2:	f000 f8ad 	bl	8017d40 <_vfiprintf_r>
 8017be6:	b002      	add	sp, #8
 8017be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8017bec:	b003      	add	sp, #12
 8017bee:	4770      	bx	lr
 8017bf0:	20000320 	.word	0x20000320

08017bf4 <_fwalk_reent>:
 8017bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bf8:	4606      	mov	r6, r0
 8017bfa:	4688      	mov	r8, r1
 8017bfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017c00:	2700      	movs	r7, #0
 8017c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017c06:	f1b9 0901 	subs.w	r9, r9, #1
 8017c0a:	d505      	bpl.n	8017c18 <_fwalk_reent+0x24>
 8017c0c:	6824      	ldr	r4, [r4, #0]
 8017c0e:	2c00      	cmp	r4, #0
 8017c10:	d1f7      	bne.n	8017c02 <_fwalk_reent+0xe>
 8017c12:	4638      	mov	r0, r7
 8017c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c18:	89ab      	ldrh	r3, [r5, #12]
 8017c1a:	2b01      	cmp	r3, #1
 8017c1c:	d907      	bls.n	8017c2e <_fwalk_reent+0x3a>
 8017c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c22:	3301      	adds	r3, #1
 8017c24:	d003      	beq.n	8017c2e <_fwalk_reent+0x3a>
 8017c26:	4629      	mov	r1, r5
 8017c28:	4630      	mov	r0, r6
 8017c2a:	47c0      	blx	r8
 8017c2c:	4307      	orrs	r7, r0
 8017c2e:	3568      	adds	r5, #104	; 0x68
 8017c30:	e7e9      	b.n	8017c06 <_fwalk_reent+0x12>

08017c32 <__retarget_lock_init_recursive>:
 8017c32:	4770      	bx	lr

08017c34 <__retarget_lock_acquire_recursive>:
 8017c34:	4770      	bx	lr

08017c36 <__retarget_lock_release_recursive>:
 8017c36:	4770      	bx	lr

08017c38 <__ascii_mbtowc>:
 8017c38:	b082      	sub	sp, #8
 8017c3a:	b901      	cbnz	r1, 8017c3e <__ascii_mbtowc+0x6>
 8017c3c:	a901      	add	r1, sp, #4
 8017c3e:	b142      	cbz	r2, 8017c52 <__ascii_mbtowc+0x1a>
 8017c40:	b14b      	cbz	r3, 8017c56 <__ascii_mbtowc+0x1e>
 8017c42:	7813      	ldrb	r3, [r2, #0]
 8017c44:	600b      	str	r3, [r1, #0]
 8017c46:	7812      	ldrb	r2, [r2, #0]
 8017c48:	1e10      	subs	r0, r2, #0
 8017c4a:	bf18      	it	ne
 8017c4c:	2001      	movne	r0, #1
 8017c4e:	b002      	add	sp, #8
 8017c50:	4770      	bx	lr
 8017c52:	4610      	mov	r0, r2
 8017c54:	e7fb      	b.n	8017c4e <__ascii_mbtowc+0x16>
 8017c56:	f06f 0001 	mvn.w	r0, #1
 8017c5a:	e7f8      	b.n	8017c4e <__ascii_mbtowc+0x16>

08017c5c <memmove>:
 8017c5c:	4288      	cmp	r0, r1
 8017c5e:	b510      	push	{r4, lr}
 8017c60:	eb01 0402 	add.w	r4, r1, r2
 8017c64:	d902      	bls.n	8017c6c <memmove+0x10>
 8017c66:	4284      	cmp	r4, r0
 8017c68:	4623      	mov	r3, r4
 8017c6a:	d807      	bhi.n	8017c7c <memmove+0x20>
 8017c6c:	1e43      	subs	r3, r0, #1
 8017c6e:	42a1      	cmp	r1, r4
 8017c70:	d008      	beq.n	8017c84 <memmove+0x28>
 8017c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017c7a:	e7f8      	b.n	8017c6e <memmove+0x12>
 8017c7c:	4402      	add	r2, r0
 8017c7e:	4601      	mov	r1, r0
 8017c80:	428a      	cmp	r2, r1
 8017c82:	d100      	bne.n	8017c86 <memmove+0x2a>
 8017c84:	bd10      	pop	{r4, pc}
 8017c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017c8e:	e7f7      	b.n	8017c80 <memmove+0x24>

08017c90 <_realloc_r>:
 8017c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c94:	4680      	mov	r8, r0
 8017c96:	4614      	mov	r4, r2
 8017c98:	460e      	mov	r6, r1
 8017c9a:	b921      	cbnz	r1, 8017ca6 <_realloc_r+0x16>
 8017c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca0:	4611      	mov	r1, r2
 8017ca2:	f7fd b803 	b.w	8014cac <_malloc_r>
 8017ca6:	b92a      	cbnz	r2, 8017cb4 <_realloc_r+0x24>
 8017ca8:	f7fc ff94 	bl	8014bd4 <_free_r>
 8017cac:	4625      	mov	r5, r4
 8017cae:	4628      	mov	r0, r5
 8017cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cb4:	f000 faae 	bl	8018214 <_malloc_usable_size_r>
 8017cb8:	4284      	cmp	r4, r0
 8017cba:	4607      	mov	r7, r0
 8017cbc:	d802      	bhi.n	8017cc4 <_realloc_r+0x34>
 8017cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017cc2:	d812      	bhi.n	8017cea <_realloc_r+0x5a>
 8017cc4:	4621      	mov	r1, r4
 8017cc6:	4640      	mov	r0, r8
 8017cc8:	f7fc fff0 	bl	8014cac <_malloc_r>
 8017ccc:	4605      	mov	r5, r0
 8017cce:	2800      	cmp	r0, #0
 8017cd0:	d0ed      	beq.n	8017cae <_realloc_r+0x1e>
 8017cd2:	42bc      	cmp	r4, r7
 8017cd4:	4622      	mov	r2, r4
 8017cd6:	4631      	mov	r1, r6
 8017cd8:	bf28      	it	cs
 8017cda:	463a      	movcs	r2, r7
 8017cdc:	f7fc ff64 	bl	8014ba8 <memcpy>
 8017ce0:	4631      	mov	r1, r6
 8017ce2:	4640      	mov	r0, r8
 8017ce4:	f7fc ff76 	bl	8014bd4 <_free_r>
 8017ce8:	e7e1      	b.n	8017cae <_realloc_r+0x1e>
 8017cea:	4635      	mov	r5, r6
 8017cec:	e7df      	b.n	8017cae <_realloc_r+0x1e>

08017cee <__sfputc_r>:
 8017cee:	6893      	ldr	r3, [r2, #8]
 8017cf0:	3b01      	subs	r3, #1
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	b410      	push	{r4}
 8017cf6:	6093      	str	r3, [r2, #8]
 8017cf8:	da08      	bge.n	8017d0c <__sfputc_r+0x1e>
 8017cfa:	6994      	ldr	r4, [r2, #24]
 8017cfc:	42a3      	cmp	r3, r4
 8017cfe:	db01      	blt.n	8017d04 <__sfputc_r+0x16>
 8017d00:	290a      	cmp	r1, #10
 8017d02:	d103      	bne.n	8017d0c <__sfputc_r+0x1e>
 8017d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d08:	f000 b94a 	b.w	8017fa0 <__swbuf_r>
 8017d0c:	6813      	ldr	r3, [r2, #0]
 8017d0e:	1c58      	adds	r0, r3, #1
 8017d10:	6010      	str	r0, [r2, #0]
 8017d12:	7019      	strb	r1, [r3, #0]
 8017d14:	4608      	mov	r0, r1
 8017d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d1a:	4770      	bx	lr

08017d1c <__sfputs_r>:
 8017d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d1e:	4606      	mov	r6, r0
 8017d20:	460f      	mov	r7, r1
 8017d22:	4614      	mov	r4, r2
 8017d24:	18d5      	adds	r5, r2, r3
 8017d26:	42ac      	cmp	r4, r5
 8017d28:	d101      	bne.n	8017d2e <__sfputs_r+0x12>
 8017d2a:	2000      	movs	r0, #0
 8017d2c:	e007      	b.n	8017d3e <__sfputs_r+0x22>
 8017d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d32:	463a      	mov	r2, r7
 8017d34:	4630      	mov	r0, r6
 8017d36:	f7ff ffda 	bl	8017cee <__sfputc_r>
 8017d3a:	1c43      	adds	r3, r0, #1
 8017d3c:	d1f3      	bne.n	8017d26 <__sfputs_r+0xa>
 8017d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017d40 <_vfiprintf_r>:
 8017d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d44:	460d      	mov	r5, r1
 8017d46:	b09d      	sub	sp, #116	; 0x74
 8017d48:	4614      	mov	r4, r2
 8017d4a:	4698      	mov	r8, r3
 8017d4c:	4606      	mov	r6, r0
 8017d4e:	b118      	cbz	r0, 8017d58 <_vfiprintf_r+0x18>
 8017d50:	6983      	ldr	r3, [r0, #24]
 8017d52:	b90b      	cbnz	r3, 8017d58 <_vfiprintf_r+0x18>
 8017d54:	f7ff febe 	bl	8017ad4 <__sinit>
 8017d58:	4b89      	ldr	r3, [pc, #548]	; (8017f80 <_vfiprintf_r+0x240>)
 8017d5a:	429d      	cmp	r5, r3
 8017d5c:	d11b      	bne.n	8017d96 <_vfiprintf_r+0x56>
 8017d5e:	6875      	ldr	r5, [r6, #4]
 8017d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d62:	07d9      	lsls	r1, r3, #31
 8017d64:	d405      	bmi.n	8017d72 <_vfiprintf_r+0x32>
 8017d66:	89ab      	ldrh	r3, [r5, #12]
 8017d68:	059a      	lsls	r2, r3, #22
 8017d6a:	d402      	bmi.n	8017d72 <_vfiprintf_r+0x32>
 8017d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d6e:	f7ff ff61 	bl	8017c34 <__retarget_lock_acquire_recursive>
 8017d72:	89ab      	ldrh	r3, [r5, #12]
 8017d74:	071b      	lsls	r3, r3, #28
 8017d76:	d501      	bpl.n	8017d7c <_vfiprintf_r+0x3c>
 8017d78:	692b      	ldr	r3, [r5, #16]
 8017d7a:	b9eb      	cbnz	r3, 8017db8 <_vfiprintf_r+0x78>
 8017d7c:	4629      	mov	r1, r5
 8017d7e:	4630      	mov	r0, r6
 8017d80:	f000 f96e 	bl	8018060 <__swsetup_r>
 8017d84:	b1c0      	cbz	r0, 8017db8 <_vfiprintf_r+0x78>
 8017d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d88:	07dc      	lsls	r4, r3, #31
 8017d8a:	d50e      	bpl.n	8017daa <_vfiprintf_r+0x6a>
 8017d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8017d90:	b01d      	add	sp, #116	; 0x74
 8017d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d96:	4b7b      	ldr	r3, [pc, #492]	; (8017f84 <_vfiprintf_r+0x244>)
 8017d98:	429d      	cmp	r5, r3
 8017d9a:	d101      	bne.n	8017da0 <_vfiprintf_r+0x60>
 8017d9c:	68b5      	ldr	r5, [r6, #8]
 8017d9e:	e7df      	b.n	8017d60 <_vfiprintf_r+0x20>
 8017da0:	4b79      	ldr	r3, [pc, #484]	; (8017f88 <_vfiprintf_r+0x248>)
 8017da2:	429d      	cmp	r5, r3
 8017da4:	bf08      	it	eq
 8017da6:	68f5      	ldreq	r5, [r6, #12]
 8017da8:	e7da      	b.n	8017d60 <_vfiprintf_r+0x20>
 8017daa:	89ab      	ldrh	r3, [r5, #12]
 8017dac:	0598      	lsls	r0, r3, #22
 8017dae:	d4ed      	bmi.n	8017d8c <_vfiprintf_r+0x4c>
 8017db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017db2:	f7ff ff40 	bl	8017c36 <__retarget_lock_release_recursive>
 8017db6:	e7e9      	b.n	8017d8c <_vfiprintf_r+0x4c>
 8017db8:	2300      	movs	r3, #0
 8017dba:	9309      	str	r3, [sp, #36]	; 0x24
 8017dbc:	2320      	movs	r3, #32
 8017dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8017dc6:	2330      	movs	r3, #48	; 0x30
 8017dc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017f8c <_vfiprintf_r+0x24c>
 8017dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017dd0:	f04f 0901 	mov.w	r9, #1
 8017dd4:	4623      	mov	r3, r4
 8017dd6:	469a      	mov	sl, r3
 8017dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ddc:	b10a      	cbz	r2, 8017de2 <_vfiprintf_r+0xa2>
 8017dde:	2a25      	cmp	r2, #37	; 0x25
 8017de0:	d1f9      	bne.n	8017dd6 <_vfiprintf_r+0x96>
 8017de2:	ebba 0b04 	subs.w	fp, sl, r4
 8017de6:	d00b      	beq.n	8017e00 <_vfiprintf_r+0xc0>
 8017de8:	465b      	mov	r3, fp
 8017dea:	4622      	mov	r2, r4
 8017dec:	4629      	mov	r1, r5
 8017dee:	4630      	mov	r0, r6
 8017df0:	f7ff ff94 	bl	8017d1c <__sfputs_r>
 8017df4:	3001      	adds	r0, #1
 8017df6:	f000 80aa 	beq.w	8017f4e <_vfiprintf_r+0x20e>
 8017dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017dfc:	445a      	add	r2, fp
 8017dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8017e00:	f89a 3000 	ldrb.w	r3, [sl]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	f000 80a2 	beq.w	8017f4e <_vfiprintf_r+0x20e>
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8017e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e14:	f10a 0a01 	add.w	sl, sl, #1
 8017e18:	9304      	str	r3, [sp, #16]
 8017e1a:	9307      	str	r3, [sp, #28]
 8017e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e20:	931a      	str	r3, [sp, #104]	; 0x68
 8017e22:	4654      	mov	r4, sl
 8017e24:	2205      	movs	r2, #5
 8017e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e2a:	4858      	ldr	r0, [pc, #352]	; (8017f8c <_vfiprintf_r+0x24c>)
 8017e2c:	f7e8 f9f0 	bl	8000210 <memchr>
 8017e30:	9a04      	ldr	r2, [sp, #16]
 8017e32:	b9d8      	cbnz	r0, 8017e6c <_vfiprintf_r+0x12c>
 8017e34:	06d1      	lsls	r1, r2, #27
 8017e36:	bf44      	itt	mi
 8017e38:	2320      	movmi	r3, #32
 8017e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e3e:	0713      	lsls	r3, r2, #28
 8017e40:	bf44      	itt	mi
 8017e42:	232b      	movmi	r3, #43	; 0x2b
 8017e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e48:	f89a 3000 	ldrb.w	r3, [sl]
 8017e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8017e4e:	d015      	beq.n	8017e7c <_vfiprintf_r+0x13c>
 8017e50:	9a07      	ldr	r2, [sp, #28]
 8017e52:	4654      	mov	r4, sl
 8017e54:	2000      	movs	r0, #0
 8017e56:	f04f 0c0a 	mov.w	ip, #10
 8017e5a:	4621      	mov	r1, r4
 8017e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e60:	3b30      	subs	r3, #48	; 0x30
 8017e62:	2b09      	cmp	r3, #9
 8017e64:	d94e      	bls.n	8017f04 <_vfiprintf_r+0x1c4>
 8017e66:	b1b0      	cbz	r0, 8017e96 <_vfiprintf_r+0x156>
 8017e68:	9207      	str	r2, [sp, #28]
 8017e6a:	e014      	b.n	8017e96 <_vfiprintf_r+0x156>
 8017e6c:	eba0 0308 	sub.w	r3, r0, r8
 8017e70:	fa09 f303 	lsl.w	r3, r9, r3
 8017e74:	4313      	orrs	r3, r2
 8017e76:	9304      	str	r3, [sp, #16]
 8017e78:	46a2      	mov	sl, r4
 8017e7a:	e7d2      	b.n	8017e22 <_vfiprintf_r+0xe2>
 8017e7c:	9b03      	ldr	r3, [sp, #12]
 8017e7e:	1d19      	adds	r1, r3, #4
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	9103      	str	r1, [sp, #12]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	bfbb      	ittet	lt
 8017e88:	425b      	neglt	r3, r3
 8017e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8017e8e:	9307      	strge	r3, [sp, #28]
 8017e90:	9307      	strlt	r3, [sp, #28]
 8017e92:	bfb8      	it	lt
 8017e94:	9204      	strlt	r2, [sp, #16]
 8017e96:	7823      	ldrb	r3, [r4, #0]
 8017e98:	2b2e      	cmp	r3, #46	; 0x2e
 8017e9a:	d10c      	bne.n	8017eb6 <_vfiprintf_r+0x176>
 8017e9c:	7863      	ldrb	r3, [r4, #1]
 8017e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8017ea0:	d135      	bne.n	8017f0e <_vfiprintf_r+0x1ce>
 8017ea2:	9b03      	ldr	r3, [sp, #12]
 8017ea4:	1d1a      	adds	r2, r3, #4
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	9203      	str	r2, [sp, #12]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	bfb8      	it	lt
 8017eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8017eb2:	3402      	adds	r4, #2
 8017eb4:	9305      	str	r3, [sp, #20]
 8017eb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017f9c <_vfiprintf_r+0x25c>
 8017eba:	7821      	ldrb	r1, [r4, #0]
 8017ebc:	2203      	movs	r2, #3
 8017ebe:	4650      	mov	r0, sl
 8017ec0:	f7e8 f9a6 	bl	8000210 <memchr>
 8017ec4:	b140      	cbz	r0, 8017ed8 <_vfiprintf_r+0x198>
 8017ec6:	2340      	movs	r3, #64	; 0x40
 8017ec8:	eba0 000a 	sub.w	r0, r0, sl
 8017ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8017ed0:	9b04      	ldr	r3, [sp, #16]
 8017ed2:	4303      	orrs	r3, r0
 8017ed4:	3401      	adds	r4, #1
 8017ed6:	9304      	str	r3, [sp, #16]
 8017ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017edc:	482c      	ldr	r0, [pc, #176]	; (8017f90 <_vfiprintf_r+0x250>)
 8017ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017ee2:	2206      	movs	r2, #6
 8017ee4:	f7e8 f994 	bl	8000210 <memchr>
 8017ee8:	2800      	cmp	r0, #0
 8017eea:	d03f      	beq.n	8017f6c <_vfiprintf_r+0x22c>
 8017eec:	4b29      	ldr	r3, [pc, #164]	; (8017f94 <_vfiprintf_r+0x254>)
 8017eee:	bb1b      	cbnz	r3, 8017f38 <_vfiprintf_r+0x1f8>
 8017ef0:	9b03      	ldr	r3, [sp, #12]
 8017ef2:	3307      	adds	r3, #7
 8017ef4:	f023 0307 	bic.w	r3, r3, #7
 8017ef8:	3308      	adds	r3, #8
 8017efa:	9303      	str	r3, [sp, #12]
 8017efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017efe:	443b      	add	r3, r7
 8017f00:	9309      	str	r3, [sp, #36]	; 0x24
 8017f02:	e767      	b.n	8017dd4 <_vfiprintf_r+0x94>
 8017f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f08:	460c      	mov	r4, r1
 8017f0a:	2001      	movs	r0, #1
 8017f0c:	e7a5      	b.n	8017e5a <_vfiprintf_r+0x11a>
 8017f0e:	2300      	movs	r3, #0
 8017f10:	3401      	adds	r4, #1
 8017f12:	9305      	str	r3, [sp, #20]
 8017f14:	4619      	mov	r1, r3
 8017f16:	f04f 0c0a 	mov.w	ip, #10
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f20:	3a30      	subs	r2, #48	; 0x30
 8017f22:	2a09      	cmp	r2, #9
 8017f24:	d903      	bls.n	8017f2e <_vfiprintf_r+0x1ee>
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d0c5      	beq.n	8017eb6 <_vfiprintf_r+0x176>
 8017f2a:	9105      	str	r1, [sp, #20]
 8017f2c:	e7c3      	b.n	8017eb6 <_vfiprintf_r+0x176>
 8017f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f32:	4604      	mov	r4, r0
 8017f34:	2301      	movs	r3, #1
 8017f36:	e7f0      	b.n	8017f1a <_vfiprintf_r+0x1da>
 8017f38:	ab03      	add	r3, sp, #12
 8017f3a:	9300      	str	r3, [sp, #0]
 8017f3c:	462a      	mov	r2, r5
 8017f3e:	4b16      	ldr	r3, [pc, #88]	; (8017f98 <_vfiprintf_r+0x258>)
 8017f40:	a904      	add	r1, sp, #16
 8017f42:	4630      	mov	r0, r6
 8017f44:	f7fc ffc6 	bl	8014ed4 <_printf_float>
 8017f48:	4607      	mov	r7, r0
 8017f4a:	1c78      	adds	r0, r7, #1
 8017f4c:	d1d6      	bne.n	8017efc <_vfiprintf_r+0x1bc>
 8017f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f50:	07d9      	lsls	r1, r3, #31
 8017f52:	d405      	bmi.n	8017f60 <_vfiprintf_r+0x220>
 8017f54:	89ab      	ldrh	r3, [r5, #12]
 8017f56:	059a      	lsls	r2, r3, #22
 8017f58:	d402      	bmi.n	8017f60 <_vfiprintf_r+0x220>
 8017f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f5c:	f7ff fe6b 	bl	8017c36 <__retarget_lock_release_recursive>
 8017f60:	89ab      	ldrh	r3, [r5, #12]
 8017f62:	065b      	lsls	r3, r3, #25
 8017f64:	f53f af12 	bmi.w	8017d8c <_vfiprintf_r+0x4c>
 8017f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f6a:	e711      	b.n	8017d90 <_vfiprintf_r+0x50>
 8017f6c:	ab03      	add	r3, sp, #12
 8017f6e:	9300      	str	r3, [sp, #0]
 8017f70:	462a      	mov	r2, r5
 8017f72:	4b09      	ldr	r3, [pc, #36]	; (8017f98 <_vfiprintf_r+0x258>)
 8017f74:	a904      	add	r1, sp, #16
 8017f76:	4630      	mov	r0, r6
 8017f78:	f7fd fa50 	bl	801541c <_printf_i>
 8017f7c:	e7e4      	b.n	8017f48 <_vfiprintf_r+0x208>
 8017f7e:	bf00      	nop
 8017f80:	0801a85c 	.word	0x0801a85c
 8017f84:	0801a87c 	.word	0x0801a87c
 8017f88:	0801a83c 	.word	0x0801a83c
 8017f8c:	0801a7d4 	.word	0x0801a7d4
 8017f90:	0801a7de 	.word	0x0801a7de
 8017f94:	08014ed5 	.word	0x08014ed5
 8017f98:	08017d1d 	.word	0x08017d1d
 8017f9c:	0801a7da 	.word	0x0801a7da

08017fa0 <__swbuf_r>:
 8017fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fa2:	460e      	mov	r6, r1
 8017fa4:	4614      	mov	r4, r2
 8017fa6:	4605      	mov	r5, r0
 8017fa8:	b118      	cbz	r0, 8017fb2 <__swbuf_r+0x12>
 8017faa:	6983      	ldr	r3, [r0, #24]
 8017fac:	b90b      	cbnz	r3, 8017fb2 <__swbuf_r+0x12>
 8017fae:	f7ff fd91 	bl	8017ad4 <__sinit>
 8017fb2:	4b21      	ldr	r3, [pc, #132]	; (8018038 <__swbuf_r+0x98>)
 8017fb4:	429c      	cmp	r4, r3
 8017fb6:	d12b      	bne.n	8018010 <__swbuf_r+0x70>
 8017fb8:	686c      	ldr	r4, [r5, #4]
 8017fba:	69a3      	ldr	r3, [r4, #24]
 8017fbc:	60a3      	str	r3, [r4, #8]
 8017fbe:	89a3      	ldrh	r3, [r4, #12]
 8017fc0:	071a      	lsls	r2, r3, #28
 8017fc2:	d52f      	bpl.n	8018024 <__swbuf_r+0x84>
 8017fc4:	6923      	ldr	r3, [r4, #16]
 8017fc6:	b36b      	cbz	r3, 8018024 <__swbuf_r+0x84>
 8017fc8:	6923      	ldr	r3, [r4, #16]
 8017fca:	6820      	ldr	r0, [r4, #0]
 8017fcc:	1ac0      	subs	r0, r0, r3
 8017fce:	6963      	ldr	r3, [r4, #20]
 8017fd0:	b2f6      	uxtb	r6, r6
 8017fd2:	4283      	cmp	r3, r0
 8017fd4:	4637      	mov	r7, r6
 8017fd6:	dc04      	bgt.n	8017fe2 <__swbuf_r+0x42>
 8017fd8:	4621      	mov	r1, r4
 8017fda:	4628      	mov	r0, r5
 8017fdc:	f7ff fce6 	bl	80179ac <_fflush_r>
 8017fe0:	bb30      	cbnz	r0, 8018030 <__swbuf_r+0x90>
 8017fe2:	68a3      	ldr	r3, [r4, #8]
 8017fe4:	3b01      	subs	r3, #1
 8017fe6:	60a3      	str	r3, [r4, #8]
 8017fe8:	6823      	ldr	r3, [r4, #0]
 8017fea:	1c5a      	adds	r2, r3, #1
 8017fec:	6022      	str	r2, [r4, #0]
 8017fee:	701e      	strb	r6, [r3, #0]
 8017ff0:	6963      	ldr	r3, [r4, #20]
 8017ff2:	3001      	adds	r0, #1
 8017ff4:	4283      	cmp	r3, r0
 8017ff6:	d004      	beq.n	8018002 <__swbuf_r+0x62>
 8017ff8:	89a3      	ldrh	r3, [r4, #12]
 8017ffa:	07db      	lsls	r3, r3, #31
 8017ffc:	d506      	bpl.n	801800c <__swbuf_r+0x6c>
 8017ffe:	2e0a      	cmp	r6, #10
 8018000:	d104      	bne.n	801800c <__swbuf_r+0x6c>
 8018002:	4621      	mov	r1, r4
 8018004:	4628      	mov	r0, r5
 8018006:	f7ff fcd1 	bl	80179ac <_fflush_r>
 801800a:	b988      	cbnz	r0, 8018030 <__swbuf_r+0x90>
 801800c:	4638      	mov	r0, r7
 801800e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018010:	4b0a      	ldr	r3, [pc, #40]	; (801803c <__swbuf_r+0x9c>)
 8018012:	429c      	cmp	r4, r3
 8018014:	d101      	bne.n	801801a <__swbuf_r+0x7a>
 8018016:	68ac      	ldr	r4, [r5, #8]
 8018018:	e7cf      	b.n	8017fba <__swbuf_r+0x1a>
 801801a:	4b09      	ldr	r3, [pc, #36]	; (8018040 <__swbuf_r+0xa0>)
 801801c:	429c      	cmp	r4, r3
 801801e:	bf08      	it	eq
 8018020:	68ec      	ldreq	r4, [r5, #12]
 8018022:	e7ca      	b.n	8017fba <__swbuf_r+0x1a>
 8018024:	4621      	mov	r1, r4
 8018026:	4628      	mov	r0, r5
 8018028:	f000 f81a 	bl	8018060 <__swsetup_r>
 801802c:	2800      	cmp	r0, #0
 801802e:	d0cb      	beq.n	8017fc8 <__swbuf_r+0x28>
 8018030:	f04f 37ff 	mov.w	r7, #4294967295
 8018034:	e7ea      	b.n	801800c <__swbuf_r+0x6c>
 8018036:	bf00      	nop
 8018038:	0801a85c 	.word	0x0801a85c
 801803c:	0801a87c 	.word	0x0801a87c
 8018040:	0801a83c 	.word	0x0801a83c

08018044 <__ascii_wctomb>:
 8018044:	b149      	cbz	r1, 801805a <__ascii_wctomb+0x16>
 8018046:	2aff      	cmp	r2, #255	; 0xff
 8018048:	bf85      	ittet	hi
 801804a:	238a      	movhi	r3, #138	; 0x8a
 801804c:	6003      	strhi	r3, [r0, #0]
 801804e:	700a      	strbls	r2, [r1, #0]
 8018050:	f04f 30ff 	movhi.w	r0, #4294967295
 8018054:	bf98      	it	ls
 8018056:	2001      	movls	r0, #1
 8018058:	4770      	bx	lr
 801805a:	4608      	mov	r0, r1
 801805c:	4770      	bx	lr
	...

08018060 <__swsetup_r>:
 8018060:	4b32      	ldr	r3, [pc, #200]	; (801812c <__swsetup_r+0xcc>)
 8018062:	b570      	push	{r4, r5, r6, lr}
 8018064:	681d      	ldr	r5, [r3, #0]
 8018066:	4606      	mov	r6, r0
 8018068:	460c      	mov	r4, r1
 801806a:	b125      	cbz	r5, 8018076 <__swsetup_r+0x16>
 801806c:	69ab      	ldr	r3, [r5, #24]
 801806e:	b913      	cbnz	r3, 8018076 <__swsetup_r+0x16>
 8018070:	4628      	mov	r0, r5
 8018072:	f7ff fd2f 	bl	8017ad4 <__sinit>
 8018076:	4b2e      	ldr	r3, [pc, #184]	; (8018130 <__swsetup_r+0xd0>)
 8018078:	429c      	cmp	r4, r3
 801807a:	d10f      	bne.n	801809c <__swsetup_r+0x3c>
 801807c:	686c      	ldr	r4, [r5, #4]
 801807e:	89a3      	ldrh	r3, [r4, #12]
 8018080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018084:	0719      	lsls	r1, r3, #28
 8018086:	d42c      	bmi.n	80180e2 <__swsetup_r+0x82>
 8018088:	06dd      	lsls	r5, r3, #27
 801808a:	d411      	bmi.n	80180b0 <__swsetup_r+0x50>
 801808c:	2309      	movs	r3, #9
 801808e:	6033      	str	r3, [r6, #0]
 8018090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018094:	81a3      	strh	r3, [r4, #12]
 8018096:	f04f 30ff 	mov.w	r0, #4294967295
 801809a:	e03e      	b.n	801811a <__swsetup_r+0xba>
 801809c:	4b25      	ldr	r3, [pc, #148]	; (8018134 <__swsetup_r+0xd4>)
 801809e:	429c      	cmp	r4, r3
 80180a0:	d101      	bne.n	80180a6 <__swsetup_r+0x46>
 80180a2:	68ac      	ldr	r4, [r5, #8]
 80180a4:	e7eb      	b.n	801807e <__swsetup_r+0x1e>
 80180a6:	4b24      	ldr	r3, [pc, #144]	; (8018138 <__swsetup_r+0xd8>)
 80180a8:	429c      	cmp	r4, r3
 80180aa:	bf08      	it	eq
 80180ac:	68ec      	ldreq	r4, [r5, #12]
 80180ae:	e7e6      	b.n	801807e <__swsetup_r+0x1e>
 80180b0:	0758      	lsls	r0, r3, #29
 80180b2:	d512      	bpl.n	80180da <__swsetup_r+0x7a>
 80180b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80180b6:	b141      	cbz	r1, 80180ca <__swsetup_r+0x6a>
 80180b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180bc:	4299      	cmp	r1, r3
 80180be:	d002      	beq.n	80180c6 <__swsetup_r+0x66>
 80180c0:	4630      	mov	r0, r6
 80180c2:	f7fc fd87 	bl	8014bd4 <_free_r>
 80180c6:	2300      	movs	r3, #0
 80180c8:	6363      	str	r3, [r4, #52]	; 0x34
 80180ca:	89a3      	ldrh	r3, [r4, #12]
 80180cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80180d0:	81a3      	strh	r3, [r4, #12]
 80180d2:	2300      	movs	r3, #0
 80180d4:	6063      	str	r3, [r4, #4]
 80180d6:	6923      	ldr	r3, [r4, #16]
 80180d8:	6023      	str	r3, [r4, #0]
 80180da:	89a3      	ldrh	r3, [r4, #12]
 80180dc:	f043 0308 	orr.w	r3, r3, #8
 80180e0:	81a3      	strh	r3, [r4, #12]
 80180e2:	6923      	ldr	r3, [r4, #16]
 80180e4:	b94b      	cbnz	r3, 80180fa <__swsetup_r+0x9a>
 80180e6:	89a3      	ldrh	r3, [r4, #12]
 80180e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80180ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80180f0:	d003      	beq.n	80180fa <__swsetup_r+0x9a>
 80180f2:	4621      	mov	r1, r4
 80180f4:	4630      	mov	r0, r6
 80180f6:	f000 f84d 	bl	8018194 <__smakebuf_r>
 80180fa:	89a0      	ldrh	r0, [r4, #12]
 80180fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018100:	f010 0301 	ands.w	r3, r0, #1
 8018104:	d00a      	beq.n	801811c <__swsetup_r+0xbc>
 8018106:	2300      	movs	r3, #0
 8018108:	60a3      	str	r3, [r4, #8]
 801810a:	6963      	ldr	r3, [r4, #20]
 801810c:	425b      	negs	r3, r3
 801810e:	61a3      	str	r3, [r4, #24]
 8018110:	6923      	ldr	r3, [r4, #16]
 8018112:	b943      	cbnz	r3, 8018126 <__swsetup_r+0xc6>
 8018114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018118:	d1ba      	bne.n	8018090 <__swsetup_r+0x30>
 801811a:	bd70      	pop	{r4, r5, r6, pc}
 801811c:	0781      	lsls	r1, r0, #30
 801811e:	bf58      	it	pl
 8018120:	6963      	ldrpl	r3, [r4, #20]
 8018122:	60a3      	str	r3, [r4, #8]
 8018124:	e7f4      	b.n	8018110 <__swsetup_r+0xb0>
 8018126:	2000      	movs	r0, #0
 8018128:	e7f7      	b.n	801811a <__swsetup_r+0xba>
 801812a:	bf00      	nop
 801812c:	20000320 	.word	0x20000320
 8018130:	0801a85c 	.word	0x0801a85c
 8018134:	0801a87c 	.word	0x0801a87c
 8018138:	0801a83c 	.word	0x0801a83c

0801813c <abort>:
 801813c:	b508      	push	{r3, lr}
 801813e:	2006      	movs	r0, #6
 8018140:	f000 f898 	bl	8018274 <raise>
 8018144:	2001      	movs	r0, #1
 8018146:	f7f3 fd13 	bl	800bb70 <_exit>

0801814a <__swhatbuf_r>:
 801814a:	b570      	push	{r4, r5, r6, lr}
 801814c:	460e      	mov	r6, r1
 801814e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018152:	2900      	cmp	r1, #0
 8018154:	b096      	sub	sp, #88	; 0x58
 8018156:	4614      	mov	r4, r2
 8018158:	461d      	mov	r5, r3
 801815a:	da08      	bge.n	801816e <__swhatbuf_r+0x24>
 801815c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018160:	2200      	movs	r2, #0
 8018162:	602a      	str	r2, [r5, #0]
 8018164:	061a      	lsls	r2, r3, #24
 8018166:	d410      	bmi.n	801818a <__swhatbuf_r+0x40>
 8018168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801816c:	e00e      	b.n	801818c <__swhatbuf_r+0x42>
 801816e:	466a      	mov	r2, sp
 8018170:	f000 f89c 	bl	80182ac <_fstat_r>
 8018174:	2800      	cmp	r0, #0
 8018176:	dbf1      	blt.n	801815c <__swhatbuf_r+0x12>
 8018178:	9a01      	ldr	r2, [sp, #4]
 801817a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801817e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018182:	425a      	negs	r2, r3
 8018184:	415a      	adcs	r2, r3
 8018186:	602a      	str	r2, [r5, #0]
 8018188:	e7ee      	b.n	8018168 <__swhatbuf_r+0x1e>
 801818a:	2340      	movs	r3, #64	; 0x40
 801818c:	2000      	movs	r0, #0
 801818e:	6023      	str	r3, [r4, #0]
 8018190:	b016      	add	sp, #88	; 0x58
 8018192:	bd70      	pop	{r4, r5, r6, pc}

08018194 <__smakebuf_r>:
 8018194:	898b      	ldrh	r3, [r1, #12]
 8018196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018198:	079d      	lsls	r5, r3, #30
 801819a:	4606      	mov	r6, r0
 801819c:	460c      	mov	r4, r1
 801819e:	d507      	bpl.n	80181b0 <__smakebuf_r+0x1c>
 80181a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80181a4:	6023      	str	r3, [r4, #0]
 80181a6:	6123      	str	r3, [r4, #16]
 80181a8:	2301      	movs	r3, #1
 80181aa:	6163      	str	r3, [r4, #20]
 80181ac:	b002      	add	sp, #8
 80181ae:	bd70      	pop	{r4, r5, r6, pc}
 80181b0:	ab01      	add	r3, sp, #4
 80181b2:	466a      	mov	r2, sp
 80181b4:	f7ff ffc9 	bl	801814a <__swhatbuf_r>
 80181b8:	9900      	ldr	r1, [sp, #0]
 80181ba:	4605      	mov	r5, r0
 80181bc:	4630      	mov	r0, r6
 80181be:	f7fc fd75 	bl	8014cac <_malloc_r>
 80181c2:	b948      	cbnz	r0, 80181d8 <__smakebuf_r+0x44>
 80181c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181c8:	059a      	lsls	r2, r3, #22
 80181ca:	d4ef      	bmi.n	80181ac <__smakebuf_r+0x18>
 80181cc:	f023 0303 	bic.w	r3, r3, #3
 80181d0:	f043 0302 	orr.w	r3, r3, #2
 80181d4:	81a3      	strh	r3, [r4, #12]
 80181d6:	e7e3      	b.n	80181a0 <__smakebuf_r+0xc>
 80181d8:	4b0d      	ldr	r3, [pc, #52]	; (8018210 <__smakebuf_r+0x7c>)
 80181da:	62b3      	str	r3, [r6, #40]	; 0x28
 80181dc:	89a3      	ldrh	r3, [r4, #12]
 80181de:	6020      	str	r0, [r4, #0]
 80181e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80181e4:	81a3      	strh	r3, [r4, #12]
 80181e6:	9b00      	ldr	r3, [sp, #0]
 80181e8:	6163      	str	r3, [r4, #20]
 80181ea:	9b01      	ldr	r3, [sp, #4]
 80181ec:	6120      	str	r0, [r4, #16]
 80181ee:	b15b      	cbz	r3, 8018208 <__smakebuf_r+0x74>
 80181f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181f4:	4630      	mov	r0, r6
 80181f6:	f000 f86b 	bl	80182d0 <_isatty_r>
 80181fa:	b128      	cbz	r0, 8018208 <__smakebuf_r+0x74>
 80181fc:	89a3      	ldrh	r3, [r4, #12]
 80181fe:	f023 0303 	bic.w	r3, r3, #3
 8018202:	f043 0301 	orr.w	r3, r3, #1
 8018206:	81a3      	strh	r3, [r4, #12]
 8018208:	89a0      	ldrh	r0, [r4, #12]
 801820a:	4305      	orrs	r5, r0
 801820c:	81a5      	strh	r5, [r4, #12]
 801820e:	e7cd      	b.n	80181ac <__smakebuf_r+0x18>
 8018210:	08017a6d 	.word	0x08017a6d

08018214 <_malloc_usable_size_r>:
 8018214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018218:	1f18      	subs	r0, r3, #4
 801821a:	2b00      	cmp	r3, #0
 801821c:	bfbc      	itt	lt
 801821e:	580b      	ldrlt	r3, [r1, r0]
 8018220:	18c0      	addlt	r0, r0, r3
 8018222:	4770      	bx	lr

08018224 <_raise_r>:
 8018224:	291f      	cmp	r1, #31
 8018226:	b538      	push	{r3, r4, r5, lr}
 8018228:	4604      	mov	r4, r0
 801822a:	460d      	mov	r5, r1
 801822c:	d904      	bls.n	8018238 <_raise_r+0x14>
 801822e:	2316      	movs	r3, #22
 8018230:	6003      	str	r3, [r0, #0]
 8018232:	f04f 30ff 	mov.w	r0, #4294967295
 8018236:	bd38      	pop	{r3, r4, r5, pc}
 8018238:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801823a:	b112      	cbz	r2, 8018242 <_raise_r+0x1e>
 801823c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018240:	b94b      	cbnz	r3, 8018256 <_raise_r+0x32>
 8018242:	4620      	mov	r0, r4
 8018244:	f000 f830 	bl	80182a8 <_getpid_r>
 8018248:	462a      	mov	r2, r5
 801824a:	4601      	mov	r1, r0
 801824c:	4620      	mov	r0, r4
 801824e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018252:	f000 b817 	b.w	8018284 <_kill_r>
 8018256:	2b01      	cmp	r3, #1
 8018258:	d00a      	beq.n	8018270 <_raise_r+0x4c>
 801825a:	1c59      	adds	r1, r3, #1
 801825c:	d103      	bne.n	8018266 <_raise_r+0x42>
 801825e:	2316      	movs	r3, #22
 8018260:	6003      	str	r3, [r0, #0]
 8018262:	2001      	movs	r0, #1
 8018264:	e7e7      	b.n	8018236 <_raise_r+0x12>
 8018266:	2400      	movs	r4, #0
 8018268:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801826c:	4628      	mov	r0, r5
 801826e:	4798      	blx	r3
 8018270:	2000      	movs	r0, #0
 8018272:	e7e0      	b.n	8018236 <_raise_r+0x12>

08018274 <raise>:
 8018274:	4b02      	ldr	r3, [pc, #8]	; (8018280 <raise+0xc>)
 8018276:	4601      	mov	r1, r0
 8018278:	6818      	ldr	r0, [r3, #0]
 801827a:	f7ff bfd3 	b.w	8018224 <_raise_r>
 801827e:	bf00      	nop
 8018280:	20000320 	.word	0x20000320

08018284 <_kill_r>:
 8018284:	b538      	push	{r3, r4, r5, lr}
 8018286:	4d07      	ldr	r5, [pc, #28]	; (80182a4 <_kill_r+0x20>)
 8018288:	2300      	movs	r3, #0
 801828a:	4604      	mov	r4, r0
 801828c:	4608      	mov	r0, r1
 801828e:	4611      	mov	r1, r2
 8018290:	602b      	str	r3, [r5, #0]
 8018292:	f7f3 fc5d 	bl	800bb50 <_kill>
 8018296:	1c43      	adds	r3, r0, #1
 8018298:	d102      	bne.n	80182a0 <_kill_r+0x1c>
 801829a:	682b      	ldr	r3, [r5, #0]
 801829c:	b103      	cbz	r3, 80182a0 <_kill_r+0x1c>
 801829e:	6023      	str	r3, [r4, #0]
 80182a0:	bd38      	pop	{r3, r4, r5, pc}
 80182a2:	bf00      	nop
 80182a4:	20006d48 	.word	0x20006d48

080182a8 <_getpid_r>:
 80182a8:	f7f3 bc4a 	b.w	800bb40 <_getpid>

080182ac <_fstat_r>:
 80182ac:	b538      	push	{r3, r4, r5, lr}
 80182ae:	4d07      	ldr	r5, [pc, #28]	; (80182cc <_fstat_r+0x20>)
 80182b0:	2300      	movs	r3, #0
 80182b2:	4604      	mov	r4, r0
 80182b4:	4608      	mov	r0, r1
 80182b6:	4611      	mov	r1, r2
 80182b8:	602b      	str	r3, [r5, #0]
 80182ba:	f7f3 fca8 	bl	800bc0e <_fstat>
 80182be:	1c43      	adds	r3, r0, #1
 80182c0:	d102      	bne.n	80182c8 <_fstat_r+0x1c>
 80182c2:	682b      	ldr	r3, [r5, #0]
 80182c4:	b103      	cbz	r3, 80182c8 <_fstat_r+0x1c>
 80182c6:	6023      	str	r3, [r4, #0]
 80182c8:	bd38      	pop	{r3, r4, r5, pc}
 80182ca:	bf00      	nop
 80182cc:	20006d48 	.word	0x20006d48

080182d0 <_isatty_r>:
 80182d0:	b538      	push	{r3, r4, r5, lr}
 80182d2:	4d06      	ldr	r5, [pc, #24]	; (80182ec <_isatty_r+0x1c>)
 80182d4:	2300      	movs	r3, #0
 80182d6:	4604      	mov	r4, r0
 80182d8:	4608      	mov	r0, r1
 80182da:	602b      	str	r3, [r5, #0]
 80182dc:	f7f3 fca7 	bl	800bc2e <_isatty>
 80182e0:	1c43      	adds	r3, r0, #1
 80182e2:	d102      	bne.n	80182ea <_isatty_r+0x1a>
 80182e4:	682b      	ldr	r3, [r5, #0]
 80182e6:	b103      	cbz	r3, 80182ea <_isatty_r+0x1a>
 80182e8:	6023      	str	r3, [r4, #0]
 80182ea:	bd38      	pop	{r3, r4, r5, pc}
 80182ec:	20006d48 	.word	0x20006d48

080182f0 <_init>:
 80182f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182f2:	bf00      	nop
 80182f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182f6:	bc08      	pop	{r3}
 80182f8:	469e      	mov	lr, r3
 80182fa:	4770      	bx	lr

080182fc <_fini>:
 80182fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182fe:	bf00      	nop
 8018300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018302:	bc08      	pop	{r3}
 8018304:	469e      	mov	lr, r3
 8018306:	4770      	bx	lr
